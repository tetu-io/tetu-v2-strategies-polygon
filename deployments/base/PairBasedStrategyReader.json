{
  "address": "0x0F0e5Eb31554a9f797e689b941151ad3A4A02a9a",
  "abi": [
    {
      "inputs": [],
      "name": "DEBTS_REBALANCE_IS_REQUIRED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FULL_WITHDRAW_IS_REQUIRED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalAssets",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isUnderlyingA",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "pricesAB",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "decsAB",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "requiredLockedAmountPercent",
          "type": "uint256"
        }
      ],
      "name": "getAmountToReduceDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deltaDebtAmountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requiredLockedAmountPercent",
          "type": "uint256"
        }
      ],
      "name": "getAmountToReduceDebtForStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requiredAmountToReduceDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy_",
          "type": "address"
        }
      ],
      "name": "getLockedUnderlyingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "estimatedUnderlyingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowedLockedAmountPercent",
          "type": "uint256"
        }
      ],
      "name": "isWithdrawByAggCallRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1730a3f0e95c101f0c6255c1ed9a29572487bef55be2db503749541875c4f4ae",
  "receipt": {
    "to": null,
    "from": "0xF1dCce3a6c321176C62b71c091E3165CC9C3816E",
    "contractAddress": "0x0F0e5Eb31554a9f797e689b941151ad3A4A02a9a",
    "transactionIndex": 23,
    "gasUsed": "1584261",
    "logsBloom": "0x
    "blockHash": "0xf3e49f38721ee911e091d3dcaf0d800734a70e96d27d53e4b1cff46eda31c627",
    "transactionHash": "0x1730a3f0e95c101f0c6255c1ed9a29572487bef55be2db503749541875c4f4ae",
    "logs": [],
    "blockNumber": 11988831,
    "cumulativeGasUsed": "12634971",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "a408f1fd06b60723e7f996d4b67ed7ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DEBTS_REBALANCE_IS_REQUIRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FULL_WITHDRAW_IS_REQUIRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnderlyingA\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"pricesAB\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"decsAB\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"requiredLockedAmountPercent\",\"type\":\"uint256\"}],\"name\":\"getAmountToReduceDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaDebtAmountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredLockedAmountPercent\",\"type\":\"uint256\"}],\"name\":\"getAmountToReduceDebtForStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredAmountToReduceDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy_\",\"type\":\"address\"}],\"name\":\"getLockedUnderlyingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedUnderlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowedLockedAmountPercent\",\"type\":\"uint256\"}],\"name\":\"isWithdrawByAggCallRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountToReduceDebt(uint256,bool,uint256,uint256,uint256[2],uint256[2],uint256)\":{\"params\":{\"collateralAmountA\":\"Total collateral amount in asset A\",\"debtAmountB\":\"Total debt amount in asset B\",\"decsAB\":\"10**decimals for A and B\",\"isUnderlyingA\":\"True if A is underlying\",\"pricesAB\":\"Prices of A and B, decimals 18\",\"requiredLockedAmountPercent\":\"Required value of locked amount percent [0..100]\",\"totalAssets\":\"Total assets of the strategy, in underlying\"},\"returns\":{\"deltaDebtAmountB\":\"The amount by which the debt should be reduced, asset B\"}},\"getAmountToReduceDebtForStrategy(address,uint256)\":{\"params\":{\"requiredAmountToReduceDebt\":\"If not zero: we are going to make repay-swap-repay to reduce total        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce        the amount of debt by the given amount.        This amount is set in terms of the token B if there is direct debt, or in terms of the token A otherwise.\",\"requiredLockedAmountPercent\":\"Required value of locked amount percent [0..100]\"}},\"getLockedUnderlyingAmount(address)\":{\"details\":\"We cannot call strategy.getState() because of stack too deep problem\",\"params\":{\"strategy_\":\"Instance of UniswapV3ConverterStrategy\"},\"returns\":{\"estimatedUnderlyingAmount\":\"Total locked amount recalculated to the underlying\",\"totalAssets\":\"strategy.totalAssets() - in terms of underlying\"}},\"isWithdrawByAggCallRequired(address,uint256)\":{\"params\":{\"allowedLockedAmountPercent\":\"[0...100]\",\"strategy_\":\"instance of IPairBasedStrategyReaderAccess\"},\"returns\":{\"_0\":\"0: it's not necessary to call withdrawByAgg         1: full withdraw is required (with propNotUnderlying = 0)         2: rebalance of the debts is required with pool proportions (propNotUnderlying = type(uint).max)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DEBTS_REBALANCE_IS_REQUIRED()\":{\"notice\":\"Possible results of isWithdrawByAggCallRequired:         rebalance of the debts is required with pool proportions (propNotUnderlying = type(uint).max)\"},\"FULL_WITHDRAW_IS_REQUIRED()\":{\"notice\":\"Possible results of isWithdrawByAggCallRequired:         full withdraw is required (with propNotUnderlying = 0)\"},\"getAmountToReduceDebt(uint256,bool,uint256,uint256,uint256[2],uint256[2],uint256)\":{\"notice\":\"Calculate the amount by which the debt should be reduced to reduce locked-amount-percent below given value\"},\"getAmountToReduceDebtForStrategy(address,uint256)\":{\"notice\":\"Calculate the amount by which the debt should be reduced to reduce locked-amount-percent below given value\"},\"getLockedUnderlyingAmount(address)\":{\"notice\":\"Estimate amount of underlying locked in the strategy by TetuConverter\"},\"isWithdrawByAggCallRequired(address,uint256)\":{\"notice\":\"Check if a call of withdrawByAgg is required\"}},\"notice\":\"Read raw values and calculate complex values related to UniswapV3ConverterStrategy\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/pair/PairBasedStrategyReader.sol\":\"PairBasedStrategyReader\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0xc2ef11f0141e7e1a5df255be2e1552044deed377349cb886908f3f10ded57fa8\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n\\n  // --- DEPENDENCY ADDRESSES\\n  function governance() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function liquidator() external view returns (address);\\n\\n  function forwarder() external view returns (address);\\n\\n  function investFund() external view returns (address);\\n\\n  function veDistributor() external view returns (address);\\n\\n  function platformVoter() external view returns (address);\\n\\n  // --- VAULTS\\n\\n  function vaults(uint id) external view returns (address);\\n\\n  function vaultsList() external view returns (address[] memory);\\n\\n  function vaultsListLength() external view returns (uint);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  // --- restrictions\\n\\n  function isOperator(address _adr) external view returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0x86716b8a4775605c31b8bb9f90f8f4a18b709ff4435182f3a148803368060a8c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IForwarder {\\n\\n  function tetu() external view returns (address);\\n  function tetuThreshold() external view returns (uint);\\n\\n  function tokenPerDestinationLength(address destination) external view returns (uint);\\n\\n  function tokenPerDestinationAt(address destination, uint i) external view returns (address);\\n\\n  function amountPerDestination(address token, address destination) external view returns (uint amount);\\n\\n  function registerIncome(\\n    address[] memory tokens,\\n    uint[] memory amounts,\\n    address vault,\\n    bool isDistribute\\n  ) external;\\n\\n  function distributeAll(address destination) external;\\n\\n  function distribute(address token) external;\\n\\n  function setInvestFundRatio(uint value) external;\\n\\n  function setGaugesRatio(uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x687c497fc034e8d64bca403bac1bf4cd7bd1f107df414c2657325c1b3ab92822\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISplitter {\\n\\n  function init(address controller_, address _asset, address _vault) external;\\n\\n  // *************** ACTIONS **************\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint256 amount) external;\\n\\n  function coverPossibleStrategyLoss(uint earned, uint lost) external;\\n\\n  function doHardWork() external;\\n\\n  function investAll() external;\\n\\n  // **************** VIEWS ***************\\n\\n  function asset() external view returns (address);\\n\\n  function vault() external view returns (address);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function isHardWorking() external view returns (bool);\\n\\n  function strategies(uint i) external view returns (address);\\n\\n  function strategiesLength() external view returns (uint);\\n\\n  function HARDWORK_DELAY() external view returns (uint);\\n\\n  function lastHardWorks(address strategy) external view returns (uint);\\n\\n  function pausedStrategies(address strategy) external view returns (bool);\\n\\n  function pauseInvesting(address strategy) external;\\n\\n  function continueInvesting(address strategy, uint apr) external;\\n\\n  function rebalance(uint percent, uint lossTolerance) external;\\n\\n  function getStrategyCapacity(address strategy) external view returns (uint capacity);\\n\\n}\\n\",\"keccak256\":\"0x266c43734e3da96d9e5dcdd0f19c6dbd58fdc377c9cd361cb12da3e309fbb4ec\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStrategyV2 {\\n\\n  function NAME() external view returns (string memory);\\n\\n  function strategySpecificName() external view returns (string memory);\\n\\n  function PLATFORM() external view returns (string memory);\\n\\n  function STRATEGY_VERSION() external view returns (string memory);\\n\\n  function asset() external view returns (address);\\n\\n  function splitter() external view returns (address);\\n\\n  function compoundRatio() external view returns (uint);\\n\\n  function totalAssets() external view returns (uint);\\n\\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\\n  function isReadyToHardWork() external view returns (bool);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawAllToSplitter() external returns (uint strategyLoss);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawToSplitter(uint amount) external returns (uint strategyLoss);\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// @param amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function investAll(\\n    uint amount_,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external returns (\\n    uint strategyLoss\\n  );\\n\\n  function doHardWork() external returns (uint earned, uint lost);\\n\\n  function setCompoundRatio(uint value) external;\\n\\n  /// @notice Max amount that can be deposited to the strategy (its internal capacity), see SCB-593.\\n  ///         0 means no deposit is allowed at this moment\\n  function capacity() external view returns (uint);\\n\\n  /// @notice {performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\\n  function performanceReceiver() external view returns (address);\\n\\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n  /// @dev use FEE_DENOMINATOR\\n  function performanceFee() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc7dac6097df7310b510f1027ef9c1bd3ccd6a202ca69582f68233ee798f7c312\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IStrategyV2.sol\\\";\\n\\ninterface IStrategyV3 is IStrategyV2 {\\n  struct BaseState {\\n    /// @dev Underlying asset\\n    address asset;\\n\\n    /// @dev Linked splitter\\n    address splitter;\\n\\n    /// @notice {performanceFee}% of total profit is sent to {performanceReceiver} before compounding\\n    /// @dev governance by default\\n    address performanceReceiver;\\n\\n    /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n    /// @dev {DEFAULT_PERFORMANCE_FEE} by default, FEE_DENOMINATOR is used\\n    uint performanceFee;\\n\\n    /// @notice Ratio to split performance fee on toPerf + toInsurance, [0..100_000]\\n    ///         100_000 - send full amount toPerf, 0 - send full amount toInsurance.\\n    uint performanceFeeRatio;\\n\\n    /// @dev Percent of profit for autocompound inside this strategy.\\n    uint compoundRatio;\\n\\n    /// @dev Represent specific name for this strategy. Should include short strategy name and used assets. Uniq across the vault.\\n    string strategySpecificName;\\n  }\\n}\\n\",\"keccak256\":\"0xe8a0179a82c40ba0c372486c5ebcc7df6431216c8c0d91cc408fb8f881e72f70\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0xd5fe6f3ab750cc2d23f573597db5607c701e74c39e13c20c07a921a26c6d5012\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVaultInsurance.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ISplitter.sol\\\";\\n\\ninterface ITetuVaultV2 {\\n\\n  function splitter() external view returns (ISplitter);\\n\\n  function insurance() external view returns (IVaultInsurance);\\n\\n  function depositFee() external view returns (uint);\\n\\n  function withdrawFee() external view returns (uint);\\n\\n  function init(\\n    address controller_,\\n    IERC20 _asset,\\n    string memory _name,\\n    string memory _symbol,\\n    address _gauge,\\n    uint _buffer\\n  ) external;\\n\\n  function setSplitter(address _splitter) external;\\n\\n  function coverLoss(uint amount) external;\\n\\n  function initInsurance(IVaultInsurance _insurance) external;\\n\\n}\\n\",\"keccak256\":\"0x9e77a10b32a52f826d28d17c420f776fd289e5e4f925ec87f7177a1ce224a412\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IVaultInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVaultInsurance {\\n\\n  function init(address _vault, address _asset) external;\\n\\n  function vault() external view returns (address);\\n\\n  function asset() external view returns (address);\\n\\n  function transferToVault(uint amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6461572763b1f6decec1dee9d2ffe8ca152369bdc68255ec083cb3da3ce507a1\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\",\"keccak256\":\"0x2c5be0f4a60126b08e20f40586958ec1b76a27b69406c4b0db19e9dc6f771cfc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\nimport \\\"../interfaces/IStrategyV3.sol\\\";\\n\\nlibrary StrategyLib2 {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Denominator for fee calculation.\\n  uint internal constant FEE_DENOMINATOR = 100_000;\\n  /// @notice 10% of total profit is sent to {performanceReceiver} before compounding\\n  uint internal constant DEFAULT_PERFORMANCE_FEE = 10_000;\\n  address internal constant DEFAULT_PERF_FEE_RECEIVER = 0x9Cc199D4353b5FB3e6C8EEBC99f5139e0d8eA06b;\\n  /// @dev Denominator for compound ratio\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant WRONG_VALUE = \\\"SB: Wrong value\\\";\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CompoundRatioChanged(uint oldValue, uint newValue);\\n  event StrategySpecificNameChanged(string name);\\n  event EmergencyExit(address sender, uint amount);\\n  event ManualClaim(address sender);\\n  event InvestAll(uint balance);\\n  event WithdrawAllToSplitter(uint amount);\\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\\n  event PerformanceFeeChanged(uint fee, address receiver, uint ratio);\\n\\n  // *************************************************************\\n  //                        CHECKS AND EMITS\\n  // *************************************************************\\n\\n  function _checkManualClaim(address controller) external {\\n    onlyOperators(controller);\\n    emit ManualClaim(msg.sender);\\n  }\\n\\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\\n    onlySplitter(splitter);\\n    assetBalance = IERC20(asset).balanceOf(address(this));\\n    emit InvestAll(assetBalance);\\n  }\\n\\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_, uint ratio_) internal {\\n    onlyGovernance(controller);\\n    require(fee_ <= FEE_DENOMINATOR, TOO_HIGH);\\n    require(receiver_ != address(0), WRONG_VALUE);\\n    require(ratio_ <= FEE_DENOMINATOR, TOO_HIGH);\\n    emit PerformanceFeeChanged(fee_, receiver_, ratio_);\\n  }\\n\\n  // *************************************************************\\n  //                        SETTERS\\n  // *************************************************************\\n\\n  function _changeCompoundRatio(IStrategyV3.BaseState storage baseState, address controller, uint newValue) external {\\n    onlyPlatformVoterOrGov(controller);\\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\\n\\n    uint oldValue = baseState.compoundRatio;\\n    baseState.compoundRatio = newValue;\\n\\n    emit CompoundRatioChanged(oldValue, newValue);\\n  }\\n\\n  function _changeStrategySpecificName(IStrategyV3.BaseState storage baseState, string calldata newName) external {\\n    baseState.strategySpecificName = newName;\\n    emit StrategySpecificNameChanged(newName);\\n  }\\n\\n  // *************************************************************\\n  //                     RESTRICTIONS\\n  // *************************************************************\\n\\n  /// @dev Restrict access only for operators\\n  function onlyOperators(address controller) public view {\\n    require(IController(controller).isOperator(msg.sender), DENIED);\\n  }\\n\\n  /// @dev Restrict access only for governance\\n  function onlyGovernance(address controller) public view {\\n    require(IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for platform voter\\n  function onlyPlatformVoterOrGov(address controller) public view {\\n    require(IController(controller).platformVoter() == msg.sender || IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for splitter\\n  function onlySplitter(address splitter) public view {\\n    require(splitter == msg.sender, DENIED);\\n  }\\n\\n  // *************************************************************\\n  //                       HELPERS\\n  // *************************************************************\\n\\n  function init(\\n    IStrategyV3.BaseState storage baseState,\\n    address controller_,\\n    address splitter_\\n  ) external {\\n    baseState.asset = ISplitter(splitter_).asset();\\n    baseState.splitter = splitter_;\\n    baseState.performanceReceiver = DEFAULT_PERF_FEE_RECEIVER;\\n    baseState.performanceFee = DEFAULT_PERFORMANCE_FEE;\\n\\n    require(IControllable(splitter_).isController(controller_), WRONG_VALUE);\\n  }\\n\\n  function setupPerformanceFee(IStrategyV3.BaseState storage baseState, uint fee_, address receiver_, uint ratio_, address controller_) external {\\n    _checkSetupPerformanceFee(controller_, fee_, receiver_, ratio_);\\n    baseState.performanceFee = fee_;\\n    baseState.performanceReceiver = receiver_;\\n    baseState.performanceFeeRatio = ratio_;\\n  }\\n\\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\\n  ///         Revert if the amount is different from expected too much (high price impact)\\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\\n  /// @param assetPrice Price of the asset, decimals 18\\n  /// @return balance Current asset balance of the strategy\\n  function checkWithdrawImpact(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) public view returns (uint balance) {\\n    balance = IERC20(_asset).balanceOf(address(this));\\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\\n\\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\\n    }\\n  }\\n\\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\\n    onlyOperators(controller);\\n\\n    uint balance = IERC20(asset).balanceOf(address(this));\\n    IERC20(asset).safeTransfer(splitter, balance);\\n    emit EmergencyExit(msg.sender, balance);\\n  }\\n\\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\\n    onlySplitter(splitter);\\n    return IERC20(asset).balanceOf(address(this));\\n  }\\n\\n  function _withdrawAllToSplitterPostActions(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) external {\\n    uint balance = checkWithdrawImpact(\\n      _asset,\\n      balanceBefore,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n\\n    if (balance != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, balance);\\n    }\\n    emit WithdrawAllToSplitter(balance);\\n  }\\n\\n  function _withdrawToSplitterPostActions(\\n    uint amount,\\n    uint balance,\\n    address _asset,\\n    address _splitter\\n  ) external {\\n    uint amountAdjusted = Math.min(amount, balance);\\n    if (amountAdjusted != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\\n    }\\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\\n  }\\n}\\n\",\"keccak256\":\"0x63704dba8a701606a0100190d2e46e4c7599571d0b21467b9cd8f87468a7947b\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Keep and provide addresses of all application contracts\\ninterface IConverterController {\\n  function governance() external view returns (address);\\n\\n  // ********************* Health factor explanation  ****************\\n  // For example, a landing platform has: liquidity threshold = 0.85, LTV=0.8, LTV / LT = 1.0625\\n  // For collateral $100 we can borrow $80. A liquidation happens if the cost of collateral will reduce below $85.\\n  // We set min-health-factor = 1.1, target-health-factor = 1.3\\n  // For collateral 100 we will borrow 100/1.3 = 76.92\\n  //\\n  // Collateral value   100        77            assume that collateral value is decreased at 100/77=1.3 times\\n  // Collateral * LT    85         65.45\\n  // Borrow value       65.38      65.38         but borrow value is the same as before\\n  // Health factor      1.3        1.001         liquidation almost happens here (!)\\n  //\\n  /// So, if we have target factor 1.3, it means, that if collateral amount will decreases at 1.3 times\\n  // and the borrow value won't change at the same time, the liquidation happens at that point.\\n  // Min health factor marks the point at which a rebalancing must be made asap.\\n  // *****************************************************************\\n\\n  //#region ----------------------------------------------------- Configuration\\n\\n  /// @notice min allowed health factor with decimals 2, must be >= 1e2\\n  function minHealthFactor2() external view returns (uint16);\\n  function setMinHealthFactor2(uint16 value_) external;\\n\\n  /// @notice target health factor with decimals 2\\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\\n  ///      or additional borrow and restore the health factor to the given target value\\n  function targetHealthFactor2() external view returns (uint16);\\n  function setTargetHealthFactor2(uint16 value_) external;\\n\\n  /// @notice max allowed health factor with decimals 2\\n  /// @dev For future versions, currently max health factor is not used\\n  function maxHealthFactor2() external view returns (uint16);\\n  /// @dev For future versions, currently max health factor is not used\\n  function setMaxHealthFactor2(uint16 value_) external;\\n\\n  /// @notice get current value of blocks per day. The value is set manually at first and can be auto-updated later\\n  function blocksPerDay() external view returns (uint);\\n  /// @notice set value of blocks per day manually and enable/disable auto update of this value\\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external;\\n  /// @notice Check if it's time to call updateBlocksPerDay()\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view returns (bool);\\n  /// @notice Recalculate blocksPerDay value\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function updateBlocksPerDay(uint periodInSeconds_) external;\\n\\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\\n  function paused() external view returns (bool);\\n\\n  /// @notice the given user is whitelisted and is allowed to make borrow/swap using TetuConverter\\n  function isWhitelisted(address user_) external view returns (bool);\\n\\n  /// @notice The size of the gap by which the debt should be increased upon repayment\\n  ///         Such gaps are required by AAVE pool adapters to workaround dust tokens problem\\n  ///         and be able to make full repayment.\\n  /// @dev Debt gap is applied as following: toPay = debt * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR\\n  function debtGap() external view returns (uint);\\n\\n  /// @notice Allow to rebalance exist debts during burrow, see SCB-708\\n  ///         If the user already has a debt(s) for the given pair of collateral-borrow assets,\\n  ///         new borrow is made using exist pool adapter(s). Exist debt is rebalanced during the borrowing\\n  ///         in both directions, but the rebalancing is asymmetrically limited by thresholds\\n  ///         THRESHOLD_REBALANCE_XXX, see BorrowManager.\\n  function rebalanceOnBorrowEnabled() external view returns (bool);\\n\\n  //#endregion ----------------------------------------------------- Configuration\\n  //#region ----------------------------------------------------- Core application contracts\\n\\n  function tetuConverter() external view returns (address);\\n  function borrowManager() external view returns (address);\\n  function debtMonitor() external view returns (address);\\n  function tetuLiquidator() external view returns (address);\\n  function swapManager() external view returns (address);\\n  function priceOracle() external view returns (address);\\n  function bookkeeper() external view returns (address);\\n  //#endregion ----------------------------------------------------- Core application contracts\\n\\n  //#region ----------------------------------------------------- External contracts\\n  /// @notice A keeper to control health and efficiency of the borrows\\n  function keeper() external view returns (address);\\n  /// @notice Controller of tetu-contracts-v2, that is allowed to update proxy contracts\\n  function proxyUpdater() external view returns (address);\\n  //#endregion ----------------------------------------------------- External contracts\\n}\\n\",\"keccak256\":\"0xff68dab4badf9543c9a0ae5a1314106f0a5b804e8b6669fbea6e2655eb3c741f\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IConverterControllerProvider {\\n  function controller() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71dce61809acb75f9078290e90033ffe816a51f18b7cb296d161e278c36eec86\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPriceOracle {\\n  /// @notice Return asset price in USD, decimals 18\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb11e653eb4d6d7c41f29ee1e3e498253cfa8df1aec3ff31ab527009b79bdb705\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IConverterControllerProvider.sol\\\";\\n\\n/// @notice Main contract of the TetuConverter application\\n/// @dev Borrower (strategy) makes all operations via this contract only.\\ninterface ITetuConverter is IConverterControllerProvider {\\n\\n  /// @notice Find possible borrow strategies and provide \\\"cost of money\\\" as interest for the period for each strategy\\n  ///         Result arrays of the strategy are ordered in ascending order of APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converters Array of available converters ordered in ascending order of APR.\\n  ///                    Each item contains a result contract that should be used for conversion; it supports IConverter\\n  ///                    This address should be passed to borrow-function during conversion.\\n  ///                    The length of array is always equal to the count of available lending platforms.\\n  ///                    Last items in array can contain zero addresses (it means they are not used)\\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\\n  /// @return amountToBorrowsOut Amounts that should be borrowed\\n  ///                            This amount is not zero if corresponded converter is not zero.\\n  /// @return aprs18 Interests on the use of {amountIn_} during the given period, decimals 18\\n  function findBorrowStrategies(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external view returns (\\n    address[] memory converters,\\n    uint[] memory collateralAmountsOut,\\n    uint[] memory amountToBorrowsOut,\\n    int[] memory aprs18\\n  );\\n\\n  /// @notice Find best swap strategy and provide \\\"cost of money\\\" as interest for the period\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow()\\n  /// @return sourceAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                         It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return targetAmountOut Result amount of {targetToken_} after swap\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findSwapStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_\\n  ) external returns (\\n    address converter,\\n    uint sourceAmountOut,\\n    uint targetAmountOut,\\n    int apr18\\n  );\\n\\n  /// @notice Find best conversion strategy (swap or borrow) and provide \\\"cost of money\\\" as interest for the period.\\n  ///         It calls both findBorrowStrategy and findSwapStrategy and selects a best strategy.\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR for swapping.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow().\\n  /// @return collateralAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                             It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return amountToBorrowOut Result amount of {targetToken_} after conversion\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findConversionStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external returns (\\n    address converter,\\n    uint collateralAmountOut,\\n    uint amountToBorrowOut,\\n    int apr18\\n  );\\n\\n  /// @notice Convert {collateralAmount_} to {amountToBorrow_} using {converter_}\\n  ///         Target amount will be transferred to {receiver_}.\\n  ///         Exist debts can be rebalanced fully or partially if {rebalanceOnBorrowEnabled} is ON\\n  /// @dev Transferring of {collateralAmount_} by TetuConverter-contract must be approved by the caller before the call\\n  ///      Only whitelisted users are allowed to make borrows\\n  /// @param converter_ A converter received from findBestConversionStrategy.\\n  /// @param collateralAmount_ Amount of {collateralAsset_} to be converted.\\n  ///                          This amount must be approved to TetuConverter before the call.\\n  /// @param amountToBorrow_ Amount of {borrowAsset_} to be borrowed and sent to {receiver_}\\n  /// @param receiver_ A receiver of borrowed amount\\n  /// @return borrowedAmountOut Exact borrowed amount transferred to {receiver_}\\n  function borrow(\\n    address converter_,\\n    address collateralAsset_,\\n    uint collateralAmount_,\\n    address borrowAsset_,\\n    uint amountToBorrow_,\\n    address receiver_\\n  ) external returns (\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Full or partial repay of the borrow\\n  /// @dev A user should transfer {amountToRepay_} to TetuConverter before calling repay()\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        A user should transfer {amountToRepay_} to TetuConverter before calling repay().\\n  ///        You can know exact total amount of debt using {getStatusCurrent}.\\n  ///        if the amount exceed total amount of the debt:\\n  ///           - the debt will be fully repaid\\n  ///           - remain amount will be swapped from {borrowAsset_} to {collateralAsset_}\\n  ///        This amount should be calculated with taking into account possible debt gap,\\n  ///        You should call getDebtAmountCurrent(debtGap = true) to get this amount.\\n  /// @param receiver_ A receiver of the collateral that will be withdrawn after the repay\\n  ///                  The remained amount of borrow asset will be returned to the {receiver_} too\\n  /// @return collateralAmountOut Exact collateral amount transferred to {collateralReceiver_}\\n  ///         If TetuConverter is not able to make the swap, it reverts\\n  /// @return returnedBorrowAmountOut A part of amount-to-repay that wasn't converted to collateral asset\\n  ///                                 because of any reasons (i.e. there is no available conversion strategy)\\n  ///                                 This amount is returned back to the collateralReceiver_\\n  /// @return swappedLeftoverCollateralOut A part of collateral received through the swapping\\n  /// @return swappedLeftoverBorrowOut A part of amountToRepay_ that was swapped\\n  function repay(\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_,\\n    address receiver_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint returnedBorrowAmountOut,\\n    uint swappedLeftoverCollateralOut,\\n    uint swappedLeftoverBorrowOut\\n  );\\n\\n  /// @notice Estimate result amount after making full or partial repay\\n  /// @dev It works in exactly same way as repay() but don't make actual repay\\n  ///      Anyway, the function is write, not read-only, because it makes updateStatus()\\n  /// @param user_ user whose amount-to-repay will be calculated\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        This amount should be calculated without possible debt gap.\\n  ///        In this way it's differ from {repay}\\n  /// @return collateralAmountOut Total collateral amount to be returned after repay in exchange of {amountToRepay_}\\n  /// @return swappedAmountOut A part of {collateralAmountOut} that were received by direct swap\\n  function quoteRepay(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint swappedAmountOut\\n  );\\n\\n  /// @notice Update status in all opened positions\\n  ///         After this call getDebtAmount will be able to return exact amount to repay\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountCurrent(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice Total amount of borrow tokens that should be repaid to close the borrow completely.\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountStored(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external view returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice User needs to redeem some collateral amount. Calculate an amount of borrow token that should be repaid\\n  /// @param user_ user whose debts will be returned\\n  /// @param collateralAmountRequired_ Amount of collateral required by the user\\n  /// @return borrowAssetAmount Borrowed amount that should be repaid to receive back following amount of collateral:\\n  ///                           amountToReceive = collateralAmountRequired_ - unobtainableCollateralAssetAmount\\n  /// @return unobtainableCollateralAssetAmount A part of collateral that cannot be obtained in any case\\n  ///                                           even if all borrowed amount will be returned.\\n  ///                                           If this amount is not 0, you ask to get too much collateral.\\n  function estimateRepay(\\n    address user_,\\n    address collateralAsset_,\\n    uint collateralAmountRequired_,\\n    address borrowAsset_\\n  ) external view returns (\\n    uint borrowAssetAmount,\\n    uint unobtainableCollateralAssetAmount\\n  );\\n\\n  /// @notice Transfer all reward tokens to {receiver_}\\n  /// @return rewardTokensOut What tokens were transferred. Same reward token can appear in the array several times\\n  /// @return amountsOut Amounts of transferred rewards, the array is synced with {rewardTokens}\\n  function claimRewards(address receiver_) external returns (\\n    address[] memory rewardTokensOut,\\n    uint[] memory amountsOut\\n  );\\n\\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\\n  ///                      It should be transferred on balance of the TetuConverter before the function call\\n  /// @param receiver_ Result amount will be sent to this address\\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\\n  function safeLiquidate(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    address receiver_,\\n    uint priceImpactToleranceSource_,\\n    uint priceImpactToleranceTarget_\\n  ) external returns (\\n    uint amountOut\\n  );\\n\\n  /// @notice Check if {amountOut_} is too different from the value calculated directly using price oracle prices\\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\\n  function isConversionValid(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    uint amountOut_,\\n    uint priceImpactTolerance_\\n  ) external view returns (bool);\\n\\n  /// @notice Close given borrow and return collateral back to the user, governance only\\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\\n  /// @param poolAdapter_ The pool adapter that represents the borrow\\n  /// @param closePosition Close position after repay\\n  ///        Usually it should be true, because the function always tries to repay all debt\\n  ///        false can be used if user doesn't have enough amount to pay full debt\\n  ///              and we are trying to pay \\\"as much as possible\\\"\\n  /// @return collateralAmountOut Amount of collateral returned to the user\\n  /// @return repaidAmountOut Amount of borrow asset paid to the lending platform\\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external returns (\\n    uint collateralAmountOut,\\n    uint repaidAmountOut\\n  );\\n\\n  /// @notice Get active borrows of the user with given collateral/borrowToken\\n  /// @dev Simple access to IDebtMonitor.getPositions\\n  /// @return poolAdaptersOut The instances of IPoolAdapter\\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\\n    address[] memory poolAdaptersOut\\n  );\\n\\n  /// @notice Save token from TC-balance to {receiver}\\n  /// @dev Normally TetuConverter doesn't have any tokens on balance, they can appear there accidentally only\\n  function salvage(address receiver, address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0x87ac3099e1254509929511509c207ecee9a665a3b43d7ee5b98e2ab0d639416d\",\"license\":\"MIT\"},\"contracts/interfaces/IConverterStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\n\\r\\n/// @notice Allow to share declaration of ConverterStrategyBaseState with libraries\\r\\ninterface IConverterStrategyBase {\\r\\n  struct ConverterStrategyBaseState {\\r\\n    /// @dev Amount of underlying assets invested to the pool.\\r\\n    uint investedAssets;\\r\\n\\r\\n    /// @dev Linked Tetu Converter\\r\\n    ITetuConverter converter;\\r\\n\\r\\n    /// @notice Percent of asset amount that can be not invested, it's allowed to just keep it on balance\\r\\n    ///         decimals = {DENOMINATOR}\\r\\n    /// @dev We need this threshold to avoid numerous conversions of small amounts\\r\\n    uint reinvestThresholdPercent;\\r\\n\\r\\n    /// @notice Current debt to the insurance.\\r\\n    ///         It's increased when insurance covers any losses related to swapping and borrow-debts-paying.\\r\\n    ///         It's not changed when insurance covers losses/receives profit that appeared after price changing.\\r\\n    ///         The strategy covers this debt on each hardwork using the profit (rewards, fees)\\r\\n    int debtToInsurance;\\r\\n\\r\\n    /// @notice reserve space for future needs\\r\\n    uint[50-1] __gap;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x0be4f2ba25d955dfa6c9f821ecb466c3ae78f025ad2a85d83d11e22d850047ea\",\"license\":\"MIT\"},\"contracts/interfaces/IPairBasedDefaultStateProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice Provides access to getDefaultState() of a pair-based strategy\\r\\ninterface IPairBasedDefaultStateProvider {\\r\\n  /// @notice Returns the current state of the contract\\r\\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\\r\\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\\r\\n  /// @return nums [totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]\\r\\n  /// @return boolValues [isStablePool, depositorSwapTokens]\\r\\n  function getDefaultState() external view returns (\\r\\n    address[] memory addr,\\r\\n    int24[] memory tickData,\\r\\n    uint[] memory nums,\\r\\n    bool[] memory boolValues\\r\\n  );\\r\\n}\",\"keccak256\":\"0x883b0f9e463485a57aa1baea9aafef64180362d336114a53f6cb8b7a94303d70\",\"license\":\"MIT\"},\"contracts/interfaces/IPairBasedStrategyReaderAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IPairBasedDefaultStateProvider.sol\\\";\\r\\n\\r\\n/// @notice Interface required to implement PairBasedStrategyReader\\r\\ninterface IPairBasedStrategyReaderAccess is IPairBasedDefaultStateProvider {\\r\\n  function converter() external view returns (address);\\r\\n  function splitter() external view returns (address);\\r\\n  function totalAssets() external view returns (uint);\\r\\n  function asset() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xec408e0b8d5923d9bd746f977b1ff0a47ee2b8e82fd29a18ce863049983e088c\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolProportionsProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IPoolProportionsProvider {\\r\\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\\r\\n  /// @return Proportion of the not-underlying [0...1e18]\\r\\n  function getPropNotUnderlying18() external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x6722552632531ac63c23ddc5a3a104647a3e4a0d4c417ab9051c47ed49bc826c\",\"license\":\"MIT\"},\"contracts/libs/AppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice List of all errors generated by the application\\r\\n///         Each error should have unique code TS-XXX and descriptive comment\\r\\nlibrary AppErrors {\\r\\n  /// @notice Provided address should be not zero\\r\\n  string public constant ZERO_ADDRESS = \\\"TS-1 zero address\\\";\\r\\n\\r\\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\\r\\n  string public constant UNISWAP_PAIR_NOT_FOUND = \\\"TS-2 pair not found\\\";\\r\\n\\r\\n  /// @notice Lengths not matched\\r\\n  string public constant WRONG_LENGTHS = \\\"TS-4 wrong lengths\\\";\\r\\n\\r\\n  /// @notice Unexpected zero balance\\r\\n  string public constant ZERO_BALANCE = \\\"TS-5 zero balance\\\";\\r\\n\\r\\n  string public constant ITEM_NOT_FOUND = \\\"TS-6 not found\\\";\\r\\n\\r\\n  string public constant NOT_ENOUGH_BALANCE = \\\"TS-7 not enough balance\\\";\\r\\n\\r\\n  /// @notice Price oracle returns zero price\\r\\n  string public constant ZERO_PRICE = \\\"TS-8 zero price\\\";\\r\\n\\r\\n  string public constant WRONG_VALUE = \\\"TS-9 wrong value\\\";\\r\\n\\r\\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\\r\\n  string public constant ZERO_AMOUNT_BORROWED = \\\"TS-10 zero borrowed amount\\\";\\r\\n\\r\\n  string public constant WITHDRAW_TOO_MUCH = \\\"TS-11 try to withdraw too much\\\";\\r\\n\\r\\n  string public constant UNKNOWN_ENTRY_KIND = \\\"TS-12 unknown entry kind\\\";\\r\\n\\r\\n  string public constant ONLY_TETU_CONVERTER = \\\"TS-13 only TetuConverter\\\";\\r\\n\\r\\n  string public constant WRONG_ASSET = \\\"TS-14 wrong asset\\\";\\r\\n\\r\\n  string public constant NO_LIQUIDATION_ROUTE = \\\"TS-15 No liquidation route\\\";\\r\\n\\r\\n  string public constant PRICE_IMPACT = \\\"TS-16 price impact\\\";\\r\\n\\r\\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\\r\\n  string public constant REPAY_MAKES_SWAP = \\\"TS-17 can not convert back\\\";\\r\\n\\r\\n  string public constant NO_INVESTMENTS = \\\"TS-18 no investments\\\";\\r\\n\\r\\n  string public constant INCORRECT_LENGTHS = \\\"TS-19 lengths\\\";\\r\\n\\r\\n  /// @notice We expect increasing of the balance, but it was decreased\\r\\n  string public constant BALANCE_DECREASE = \\\"TS-20 balance decrease\\\";\\r\\n\\r\\n  /// @notice Prices changed and invested assets amount was increased on S, value of S is too high\\r\\n  string public constant EARNED_AMOUNT_TOO_HIGH = \\\"TS-21 earned too high\\\";\\r\\n\\r\\n  string public constant GOVERNANCE_ONLY = \\\"TS-22 governance only\\\";\\r\\n\\r\\n  string public constant ZERO_VALUE = \\\"TS-24 zero value\\\";\\r\\n\\r\\n  string public constant INCORRECT_SWAP_BY_AGG_PARAM = \\\"TS-25 swap by agg\\\";\\r\\n\\r\\n  string public constant OVER_COLLATERAL_DETECTED = \\\"TS-27 over-collateral\\\";\\r\\n\\r\\n  string public constant NOT_IMPLEMENTED = \\\"TS-28 not implemented\\\";\\r\\n\\r\\n  /// @notice You are not allowed to make direct debt if a NOT-DUST reverse debt exists and visa verse.\\r\\n  string public constant OPPOSITE_DEBT_EXISTS = \\\"TS-29 opposite debt exists\\\";\\r\\n\\r\\n  string public constant INVALID_VALUE = \\\"TS-30 invalid value\\\";\\r\\n\\r\\n  string public constant TOO_HIGH = \\\"TS-32 too high value\\\";\\r\\n\\r\\n  /// @notice BorrowLib has recursive call, sub-calls are not allowed\\r\\n  ///         This error can happen if allowed proportion is too small, i.e. 0.0004 : (1-0.0004)\\r\\n  ///         Such situation can happen if amount to swap is almost equal to the amount of the token in the current tick,\\r\\n  ///         so swap will move us close to the border between ticks.\\r\\n  ///         It was decided, that it's ok to have revert in that case\\r\\n  ///         We can change this behavior by changing BorrowLib.rebalanceRepayBorrow implementation:\\r\\n  ///             if amount-to-repay passed to _repayDebt is too small to be used,\\r\\n  ///             we should increase it min amount required to make repay successfully (amount must be > threshold)\\r\\n  ///         Previously it was error NOT_ALLOWED = \\\"TS23: not allowed\\\", see issues SCB-777, SCB-818\\r\\n  string public constant TOO_DEEP_RECURSION_BORROW_LIB = \\\"TS-33 too deep recursion\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x1400c631697434c991de2bfadcac7a0164a87be41a2cb683ed7f4fc75798d3e8\",\"license\":\"BUSL-1.1\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\\\";\\r\\n\\r\\n/// @notice Common internal utils\\r\\nlibrary AppLib {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// @notice 1% gap to cover possible liquidation inefficiency\\r\\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\\r\\n  uint internal constant GAP_CONVERSION = 1_000;\\r\\n  /// @dev Absolute value for any token\\r\\n  uint internal constant DEFAULT_LIQUIDATION_THRESHOLD = 100_000;\\r\\n  uint internal constant DENOMINATOR = 100_000;\\r\\n\\r\\n  /// @notice Any amount less than the following is dust\\r\\n  uint public constant DUST_AMOUNT_TOKENS = 100;\\r\\n\\r\\n  /// @notice Unchecked increment for for-cycles\\r\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\r\\n    unchecked {\\r\\n      return i + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\r\\n  /// @dev Should NOT be used for third-party pools\\r\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\r\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\r\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\r\\n      IERC20(token).approve(spender, 2 ** 255);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Make approve of {token} to unsafe {spender} (like an aggregator) for fixed {amount}\\r\\n  function approveForced(address token, uint amount, address spender) internal {\\r\\n    IERC20(token).approve(spender, amount);\\r\\n  }\\r\\n\\r\\n  function balance(address token) internal view returns (uint) {\\r\\n    return IERC20(token).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /// @return prices Asset prices in USD, decimals 18\\r\\n  /// @return decs 10**decimals\\r\\n  function _getPricesAndDecs(IPriceOracle priceOracle, address[] memory tokens_, uint len) internal view returns (\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs\\r\\n  ) {\\r\\n    prices = new uint[](len);\\r\\n    decs = new uint[](len);\\r\\n    {\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\\r\\n        prices[i] = priceOracle.getAssetPrice(tokens_[i]);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\\r\\n  function getAssetIndex(address[] memory tokens_, address asset_) internal pure returns (uint) {\\r\\n    uint len = tokens_.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (tokens_[i] == asset_) {\\r\\n        return i;\\r\\n      }\\r\\n    }\\r\\n    return type(uint).max;\\r\\n  }\\r\\n\\r\\n  function _getLiquidator(address controller_) internal view returns (ITetuLiquidator) {\\r\\n    return ITetuLiquidator(IController(controller_).liquidator());\\r\\n  }\\r\\n\\r\\n  function _getPriceOracle(ITetuConverter converter_) internal view returns (IPriceOracle) {\\r\\n    return IPriceOracle(IConverterController(converter_.controller()).priceOracle());\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate liquidation threshold, use default value if the threshold is not set\\r\\n  ///         It's allowed to set any not-zero threshold, it this case default value is not used\\r\\n  /// @dev This function should be applied to the threshold at the moment of the reading its value from the storage.\\r\\n  ///      So, if we pass {mapping(address => uint) storage liquidationThresholds}, the threshold can be zero\\r\\n  ///      bug if we pass {uint liquidationThreshold} to a function, the threshold should be not zero\\r\\n  function _getLiquidationThreshold(uint threshold) internal pure returns (uint) {\\r\\n    return threshold == 0\\r\\n      ? AppLib.DEFAULT_LIQUIDATION_THRESHOLD\\r\\n      : threshold;\\r\\n  }\\r\\n\\r\\n  /// @notice Return a-b OR zero if a < b\\r\\n  function sub0(uint a, uint b) internal pure returns (uint) {\\r\\n    return a > b ? a - b : 0;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7dc2bddc5940fbdc22a6eb59637a71345999fead987b7e5dec86d3e64fb85dd4\",\"license\":\"BUSL-1.1\"},\"contracts/libs/BorrowLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"../strategies/ConverterStrategyBaseLib.sol\\\";\\r\\n\\r\\n/// @notice Library to make new borrow, extend/reduce exist borrows and repay to keep proper assets proportions\\r\\n/// @dev Swap through liquidator is still allowed to be able to get required profitToCover, but this amount is small\\r\\nlibrary BorrowLib {\\r\\n  /// @notice prop0 + prop1\\r\\n  uint constant public SUM_PROPORTIONS = 1e18;\\r\\n\\r\\n  /// @notice Function {_rebalanceAssets} cannot be called recursively more than twice.\\r\\n  /// Normally one call is enough.\\r\\n  /// Firstly repay(requiredAmount0) is called below. There are two possible results:\\r\\n  /// 1) requiredCost0 <= cost0\\r\\n  /// 2) v.directDebt == 0\\r\\n  /// There is SCB-818: there are two debts (big and small), on the first cycle we get amount less than expected\\r\\n  /// because of debt gap. So, we need second cycle.\\r\\n  uint constant public MAX_DEEP_RECURSION = 2;\\r\\n\\r\\n  //region -------------------------------------------------- Data types\\r\\n  struct PricesDecs {\\r\\n    /// @notice Asset prices in USD, decimals 18\\r\\n    uint[] prices;\\r\\n    /// @notice decs 10**decimals\\r\\n    uint[] decs;\\r\\n  }\\r\\n\\r\\n  struct ConverterLiquidator {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n  }\\r\\n\\r\\n  struct RebalanceAssetsLocal {\\r\\n    // ------- constant values\\r\\n    address asset0;\\r\\n    address asset1;\\r\\n    /// @notice Proportion of {asset0}, > 0; proportion of {asset1} is SUM_PROPORTIONS - prop0\\r\\n    uint prop0;\\r\\n    /// @notice Min allowed amount of {asset0}-collateral, 0 - use default min value\\r\\n    uint threshold0;\\r\\n    /// @ntoice Min allowed amount of {asset1}-collateral, 0 - use default min value\\r\\n    uint threshold1;\\r\\n\\r\\n    PricesDecs pd;\\r\\n    // ------- refreshable values\\r\\n\\r\\n    // @notice Current balance of {asset0}\\r\\n    uint amount0;\\r\\n    // @notice Current balance of {asset1}\\r\\n    uint amount1;\\r\\n\\r\\n    /// @notice Borrowed amount of not-underlying\\r\\n    uint directDebt;\\r\\n    /// @notice Borrowed amount of underlying\\r\\n    uint reverseDebt;\\r\\n\\r\\n    uint addition0;\\r\\n  }\\r\\n\\r\\n  /// @notice Params required to borrow {assetB} under {assetA}\\r\\n  struct RebalanceAssetsCore {\\r\\n    ConverterLiquidator converterLiquidator;\\r\\n    address assetA;\\r\\n    address assetB;\\r\\n    uint propA;\\r\\n    uint propB;\\r\\n    /// @notice {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\\r\\n    uint alpha18;\\r\\n    /// @notice Min allowed amount of {assetA}-collateral, 0 - use default min value\\r\\n    uint thresholdA;\\r\\n\\r\\n    uint addonA;\\r\\n    uint addonB;\\r\\n\\r\\n    /// @notice Index of {assetA} in {prices} and {decs}\\r\\n    uint indexA;\\r\\n    /// @notice Index of {assetB} in {prices} and {decs}\\r\\n    uint indexB;\\r\\n  }\\r\\n\\r\\n  struct OpenPosition2Local {\\r\\n    uint collateral;\\r\\n    uint toBorrow;\\r\\n    uint cc;\\r\\n    uint cb;\\r\\n    uint c0;\\r\\n    uint cb2;\\r\\n    uint ca0;\\r\\n    uint gamma18;\\r\\n    uint pa2;\\r\\n    uint pb2;\\r\\n    bytes entryData;\\r\\n    uint alpha18;\\r\\n  }\\r\\n\\r\\n  struct MakeBorrowToDepositLocal {\\r\\n    uint[] prices;\\r\\n    uint[] decs;\\r\\n    uint cost0;\\r\\n    uint cost1;\\r\\n    uint prop1;\\r\\n    bytes entryData;\\r\\n  }\\r\\n  //endregion -------------------------------------------------- Data types\\r\\n\\r\\n  //region -------------------------------------------------- External functions\\r\\n  /// @notice Set balances of {asset0} and {asset1} in proportions {prop0}:{prop1} using borrow/repay (no swaps)\\r\\n  /// @param prop0 Proportion of {asset0}, > 0. Proportion of {asset1} is calculates as 1e18 - prop0\\r\\n  /// @param threshold0 Min allowed amount of {asset0}-collateral, 0 - use default min value\\r\\n  /// @param threshold1 Min allowed amount of {asset1}-collateral, 0 - use default min value\\r\\n  /// @param addition0 Additional amount A0 of {asset0}.\\r\\n  ///                  Balance0 = A0 + B0\\r\\n  ///                  We need following balances in results: B0 : Balance1 === {proportion}:{100_000-proportion}\\r\\n  function rebalanceAssets(\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    address asset0,\\r\\n    address asset1,\\r\\n    uint prop0,\\r\\n    uint threshold0,\\r\\n    uint threshold1,\\r\\n    uint addition0\\r\\n  ) external {\\r\\n    // pool always have TWO assets, it's not allowed ot have only one asset\\r\\n    // so, we assume that the proportions are in the range (0...1e18)\\r\\n    require(prop0 != 0, AppErrors.ZERO_VALUE);\\r\\n    require(prop0 < SUM_PROPORTIONS, AppErrors.TOO_HIGH);\\r\\n\\r\\n    RebalanceAssetsLocal memory v;\\r\\n    v.asset0 = asset0;\\r\\n    v.asset1 = asset1;\\r\\n    v.prop0 = prop0;\\r\\n    v.threshold0 = threshold0;\\r\\n    v.threshold1 = threshold1;\\r\\n    v.addition0 = addition0;\\r\\n\\r\\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\r\\n    address[] memory tokens = new address[](2);\\r\\n    tokens[0] = asset0;\\r\\n    tokens[1] = asset1;\\r\\n    (v.pd.prices, v.pd.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\\r\\n\\r\\n    _refreshRebalance(v, ConverterLiquidator(converter_, liquidator_), MAX_DEEP_RECURSION);\\r\\n  }\\r\\n\\r\\n  /// @notice Convert {amount_} of underlying to two amounts: A0 (underlying) and A1 (not-underlying)\\r\\n  ///         Result proportions of A0 and A1 should match to {prop0} : 1e18-{prop0}\\r\\n  ///         The function is able to make new borrowing and/or close exist debts.\\r\\n  /// @param amount_ Amount of underlying that is going to be deposited\\r\\n  ///                We assume here, that current balance >= the {amount_}\\r\\n  /// @param tokens_ [Underlying, not underlying]\\r\\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\\r\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\r\\n  /// @return tokenAmounts Result amounts [A0 (underlying), A1 (not-underlying)]\\r\\n  function prepareToDeposit(\\r\\n    ITetuConverter converter_,\\r\\n    uint amount_,\\r\\n    address[2] memory tokens_,\\r\\n    uint[2] memory thresholds_,\\r\\n    uint prop0\\r\\n  ) external returns (\\r\\n    uint[] memory tokenAmounts\\r\\n  ) {\\r\\n    uint[2] memory amountsToDeposit;\\r\\n    uint[2] memory balances = [\\r\\n      AppLib.sub0(AppLib.balance(tokens_[0]), amount_), // We assume here, that current balance >= the {amount_}\\r\\n      AppLib.balance(tokens_[1])\\r\\n    ];\\r\\n\\r\\n    // we assume here, that either direct OR reverse debts (amount > threshold) are possible but not both at the same time\\r\\n    (uint debtReverse, ) = converter_.getDebtAmountCurrent(address(this), tokens_[1], tokens_[0], true);\\r\\n    if (debtReverse > thresholds_[0]) {\\r\\n      // case 1: reverse debt exists\\r\\n      // case 1.1: amount to deposit exceeds exist debt.\\r\\n      //    Close the debt completely and than make either new direct OR reverse debt\\r\\n      // case 1.2: amount to deposit is less than the exist debt.\\r\\n      //    Close the debt partially and make new reverse debt\\r\\n      uint amountToRepay = amount_ > debtReverse ? debtReverse : amount_;\\r\\n      ConverterStrategyBaseLib.closePosition(converter_, tokens_[1], tokens_[0], amountToRepay);\\r\\n      amountsToDeposit = [\\r\\n        AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]),\\r\\n        AppLib.sub0(AppLib.balance(tokens_[1]), balances[1])\\r\\n      ];\\r\\n    } else {\\r\\n      // case 2: no debts OR direct debt exists\\r\\n      amountsToDeposit = [amount_, 0];\\r\\n    }\\r\\n\\r\\n    _makeBorrowToDeposit(converter_, amountsToDeposit, tokens_, thresholds_, prop0);\\r\\n\\r\\n    tokenAmounts = new uint[](2);\\r\\n    tokenAmounts[0] = AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]);\\r\\n    tokenAmounts[1] = AppLib.sub0(AppLib.balance(tokens_[1]), balances[1]);\\r\\n  }\\r\\n  //endregion -------------------------------------------------- External functions\\r\\n\\r\\n  //region -------------------------------------------------- Implementation of prepareToDeposit\\r\\n  /// @notice Make a direct or reverse borrow to make amounts_ fit to the given proportions.\\r\\n  /// If one of available amounts is zero, we just need to make a borrow using second amount as amountIn.\\r\\n  /// Otherwise, we need to calculate amountIn at first.\\r\\n  /// @dev The purpose is to get the amounts in proper proportions: A:B = prop0:prop1.\\r\\n  /// Suppose, amounts_[1] is not enough:\\r\\n  ///   [A1, B1] => [A2 + A3, B1], A2:B1 = prop0:prop1, A3 is amountIn for new borrow.\\r\\n  /// Suppose, amounts_[0] is not enough:\\r\\n  ///   [A1, B1] => [A1, B2 + B3], A1:B2 = prop0:prop1, B3 is amountIn for new borrow.\\r\\n  /// @param amounts_ Available amounts\\r\\n  /// @param tokens_ [Underlying, not underlying]\\r\\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\\r\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\r\\n  function _makeBorrowToDeposit(\\r\\n    ITetuConverter converter_,\\r\\n    uint[2] memory amounts_,\\r\\n    address[2] memory tokens_,\\r\\n    uint[2] memory thresholds_,\\r\\n    uint prop0\\r\\n  ) internal {\\r\\n    MakeBorrowToDepositLocal memory v;\\r\\n\\r\\n    {\\r\\n      IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\r\\n      address[] memory tokens = new address[](2);\\r\\n      tokens[0] = tokens_[0];\\r\\n      tokens[1] = tokens_[1];\\r\\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\\r\\n    }\\r\\n\\r\\n    v.cost0 = amounts_[0] * v.prices[0] / v.decs[0];\\r\\n    v.cost1 = amounts_[1] * v.prices[1] / v.decs[1];\\r\\n    // we need: cost0/cost1 = prop0/prop1, and so cost0 * prop1 = cost1 * prop0\\r\\n    v.prop1 = SUM_PROPORTIONS - prop0;\\r\\n\\r\\n    if (v.cost0 * v.prop1 > v.cost1 * prop0) {\\r\\n      // we need to make direct borrow\\r\\n      uint cost0for1 = v.cost1 * prop0 / v.prop1; // a part of cost0 that is matched to cost1\\r\\n      uint amountIn = (v.cost0 - cost0for1) * v.decs[0] / v.prices[0];\\r\\n\\r\\n      AppLib.approveIfNeeded(tokens_[0], amountIn, address(converter_));\\r\\n      v.entryData = abi.encode(1, prop0, v.prop1); // ENTRY_KIND_EXACT_PROPORTION_1\\r\\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[0], tokens_[1], amountIn, thresholds_[0]);\\r\\n    } else if (v.cost0 * v.prop1 < v.cost1 * prop0) {\\r\\n      // we need to make reverse borrow\\r\\n      uint cost1for0 = v.cost0 * v.prop1 / prop0; // a part of cost1 that is matched to cost0\\r\\n      uint amountIn = (v.cost1 - cost1for0) * v.decs[1] / v.prices[1];\\r\\n\\r\\n      AppLib.approveIfNeeded(tokens_[1], amountIn, address(converter_));\\r\\n      v.entryData = abi.encode(1, v.prop1, prop0); // ENTRY_KIND_EXACT_PROPORTION_1\\r\\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[1], tokens_[0], amountIn, thresholds_[1]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  //endregion -------------------------------------------------- Implementation of prepareToDeposit\\r\\n\\r\\n  //region -------------------------------------------------- Internal helper functions\\r\\n\\r\\n  /// @notice refresh state in {v} and call _rebalanceAssets()\\r\\n  function _refreshRebalance(\\r\\n    RebalanceAssetsLocal memory v,\\r\\n    ConverterLiquidator memory converterLiquidator,\\r\\n    uint repayAllowed\\r\\n  ) internal {\\r\\n    v.amount0 = IERC20(v.asset0).balanceOf(address(this));\\r\\n    v.amount1 = IERC20(v.asset1).balanceOf(address(this));\\r\\n\\r\\n    (v.directDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset0, v.asset1, true);\\r\\n    (v.reverseDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset1, v.asset0, true);\\r\\n\\r\\n    _rebalanceAssets(v, converterLiquidator, repayAllowed);\\r\\n  }\\r\\n\\r\\n  /// @param repayAllowed Protection against recursion\\r\\n  ///                     Assets can be rebalanced in two ways:\\r\\n  ///                     1) openPosition\\r\\n  ///                     2) repay + openPosition\\r\\n  ///                     Only one repay is allowed.\\r\\n  function _rebalanceAssets(\\r\\n    RebalanceAssetsLocal memory v,\\r\\n    ConverterLiquidator memory converterLiquidator,\\r\\n    uint repayAllowed\\r\\n  ) internal {\\r\\n    uint cost0 = v.amount0 * v.pd.prices[0] / v.pd.decs[0];\\r\\n    uint cost1 = v.amount1 * v.pd.prices[1] / v.pd.decs[1];\\r\\n    uint costAddition0 = v.addition0 * v.pd.prices[0] / v.pd.decs[0];\\r\\n\\r\\n    if (cost0 + cost1 > costAddition0) {\\r\\n      uint totalCost = cost0 + cost1 - costAddition0;\\r\\n\\r\\n      uint requiredCost0 = totalCost * v.prop0 / SUM_PROPORTIONS + costAddition0;\\r\\n      uint requiredCost1 = totalCost * (SUM_PROPORTIONS - v.prop0) / SUM_PROPORTIONS;\\r\\n\\r\\n      if (requiredCost0 > cost0) {\\r\\n        // we need to increase amount of asset 0 and decrease amount of asset 1, so we need to borrow asset 0 (reverse)\\r\\n        RebalanceAssetsCore memory c10 = RebalanceAssetsCore({\\r\\n          converterLiquidator: converterLiquidator,\\r\\n          assetA: v.asset1,\\r\\n          assetB: v.asset0,\\r\\n          propA: SUM_PROPORTIONS - v.prop0,\\r\\n          propB: v.prop0,\\r\\n          alpha18: 1e18 * v.pd.prices[0] * v.pd.decs[1] / v.pd.prices[1] / v.pd.decs[0],\\r\\n          thresholdA: v.threshold1,\\r\\n          addonA: 0,\\r\\n          addonB: v.addition0,\\r\\n          indexA: 1,\\r\\n          indexB: 0\\r\\n        });\\r\\n\\r\\n        if (v.directDebt >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\r\\n\\r\\n          // repay of v.asset1 is required\\r\\n          uint requiredAmount0 = (requiredCost0 - cost0) * v.pd.decs[0] / v.pd.prices[0];\\r\\n          rebalanceRepayBorrow(v, c10, requiredAmount0, v.directDebt, repayAllowed);\\r\\n        } else {\\r\\n          // new (or additional) borrow of asset 0 under asset 1 is required\\r\\n          openPosition(c10, v.pd, v.amount1, v.amount0);\\r\\n        }\\r\\n      } else if (requiredCost0 < cost0) {\\r\\n        RebalanceAssetsCore memory c01 = RebalanceAssetsCore({\\r\\n          converterLiquidator: converterLiquidator,\\r\\n          assetA: v.asset0,\\r\\n          assetB: v.asset1,\\r\\n          propA: v.prop0,\\r\\n          propB: SUM_PROPORTIONS - v.prop0,\\r\\n          alpha18: 1e18 * v.pd.prices[1] * v.pd.decs[0] / v.pd.prices[0] / v.pd.decs[1],\\r\\n          thresholdA: v.threshold0,\\r\\n          addonA: v.addition0,\\r\\n          addonB: 0,\\r\\n          indexA: 0,\\r\\n          indexB: 1\\r\\n        });\\r\\n        // we need to decrease amount of asset 0 and increase amount of asset 1, so we need to borrow asset 1 (direct)\\r\\n        if (v.reverseDebt >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\r\\n\\r\\n          // repay of v.asset0 is required\\r\\n          // requiredCost0 < cost0 => requiredCost1 > cost1\\r\\n          uint requiredAmount1 = (requiredCost1 - cost1) * v.pd.decs[1] / v.pd.prices[1];\\r\\n          rebalanceRepayBorrow(v, c01, requiredAmount1, v.reverseDebt, repayAllowed);\\r\\n        } else {\\r\\n          // new or additional borrow of asset 1 under asset 0 is required\\r\\n          openPosition(c01, v.pd, v.amount0, v.amount1);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      // if costAddition0 exceeds cost0 + cost1, all amounts should be converted to asset 0\\r\\n      // for simplicity, we don't make any swaps or borrows (amount addition0 is assumed to be small)\\r\\n      // and just leave balances as is\\r\\n      // as result, profit-to-cover will be reduced from costAddition0 to v.amount0\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Repay {amountDebtA} fully or partially to get at least {requiredAmountB} of collateral\\r\\n  ///         then try to rebalance once more\\r\\n  /// @param requiredAmountB Amount of collateral that we need to receive after repay\\r\\n  /// @param amountDebtA Total amount that is required to pay to close the debt\\r\\n  function rebalanceRepayBorrow(\\r\\n    RebalanceAssetsLocal memory v,\\r\\n    RebalanceAssetsCore memory c,\\r\\n    uint requiredAmountB,\\r\\n    uint amountDebtA,\\r\\n    uint repayAllowed\\r\\n  ) internal {\\r\\n    // repayAllowed cannot be zero here because of requires in _rebalanceAssets, but it's safer to check it once more\\r\\n    require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\r\\n\\r\\n    // we need to get {requiredAmountB}\\r\\n    // we don't know exact amount to repay\\r\\n    // but we are sure that amount {requiredAmountB ===> requiredAmountA} would be more than required\\r\\n    uint capRequiredAmountA = requiredAmountB * c.alpha18 / 1e18;\\r\\n    uint amountToRepay = Math.min(capRequiredAmountA, amountDebtA);\\r\\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n      ConverterStrategyBaseLib._repayDebt(c.converterLiquidator.converter, c.assetB, c.assetA, amountToRepay);\\r\\n      _refreshRebalance(v, c.converterLiquidator, repayAllowed - 1);\\r\\n    } // else the assets are already in proper proportions\\r\\n  }\\r\\n\\r\\n  //endregion -------------------------------------------------- Internal helper functions\\r\\n\\r\\n  //region -------------------------------------------------- Open position\\r\\n  /// @notice borrow asset B under asset A. Result balances should be A0 + A1, B0 + B1\\r\\n  ///         Where (A1 : B1) == (propA : propB), A0 and B0 are equal to {c.addonA} and {c.addonB}\\r\\n  /// @param balanceA_ Current balance of the collateral\\r\\n  /// @param balanceB_ Current balance of the borrow asset\\r\\n  function openPosition(\\r\\n    RebalanceAssetsCore memory c,\\r\\n    PricesDecs memory pd,\\r\\n    uint balanceA_,\\r\\n    uint balanceB_\\r\\n  ) internal returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    // if there are two not-zero addons, the caller should reduce balances before the call\\r\\n    require(c.addonA == 0 || c.addonB == 0, AppErrors.INVALID_VALUE);\\r\\n\\r\\n    // we are going to borrow B under A\\r\\n    if (c.addonB != 0) {\\r\\n      // B is underlying, so we are going to borrow underlying\\r\\n      if (balanceB_ >= c.addonB) {\\r\\n        // simple case - we already have required addon on the balance. Just keep it unused\\r\\n        return _openPosition(c, balanceA_, balanceB_ - c.addonB);\\r\\n      } else {\\r\\n        // we need to get 1) (c.addonB + balanceB_) amount, so we will have required c.addonB\\r\\n        //                2) leftovers of A and B should be allocated in required proportions\\r\\n        // it's too hard to calculate correctly required to borrow amount in this case without changing TetuConverter\\r\\n        // but we can assume here, that amount (c.addonB - balanceB_) is pretty small (it's profitToCover)\\r\\n        // so, we can swap this required amount through liquidator at first\\r\\n        // then use _openPosition to re-allocated rest amounts to proper proportions\\r\\n        (uint decA,) = _makeLittleSwap(c, pd, balanceA_, c.addonB - balanceB_);\\r\\n        return _openPosition(c, balanceA_ - decA, balanceB_);\\r\\n      }\\r\\n    } else if (c.addonA != 0) {\\r\\n      // A is underlying, we need to put aside c.addonA and allocate leftovers in right proportions.\\r\\n      // we are going to borrow B under asset A, so the case (balanceA_ < c.addonA) is not valid here\\r\\n      require(balanceA_ >= c.addonA, AppErrors.NOT_ENOUGH_BALANCE);\\r\\n      return _openPosition(c, balanceA_ - c.addonA, balanceB_);\\r\\n    } else {\\r\\n      // simple logic, no addons\\r\\n      return _openPosition(c, balanceA_, balanceB_);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice borrow asset B under asset A, result balances should have proportions: (propA : propB)\\r\\n  function _openPosition(RebalanceAssetsCore memory c, uint balanceA_, uint balanceB_) internal returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    uint untouchedAmountA;\\r\\n    bytes memory entryData = abi.encode(1, c.propA, c.propB);\\r\\n\\r\\n    if (balanceB_ != 0) {\\r\\n      // we are going to use {balanceA_} as collateral\\r\\n      // but there is some amount on {balanceB_}, so we need to keep corresponded part of {balanceA_} untouched\\r\\n      untouchedAmountA = balanceB_ * c.alpha18 * c.propA / c.propB / 1e18;\\r\\n\\r\\n      // we are going to borrow B under A, so balance A must be greater then balance B\\r\\n      // otherwise the function is called incorrectly - probably we need to borrow A under B\\r\\n      require(untouchedAmountA <= balanceA_, AppErrors.WRONG_VALUE);\\r\\n    }\\r\\n\\r\\n    AppLib.approveIfNeeded(c.assetA, balanceA_ - untouchedAmountA, address(c.converterLiquidator.converter));\\r\\n\\r\\n    return ConverterStrategyBaseLib.openPosition(\\r\\n      c.converterLiquidator.converter,\\r\\n      entryData,\\r\\n      c.assetA,\\r\\n      c.assetB,\\r\\n      balanceA_ - untouchedAmountA,\\r\\n      c.thresholdA\\r\\n    );\\r\\n  }\\r\\n\\r\\n  //endregion -------------------------------------------------- Open position\\r\\n\\r\\n  //region -------------------------------------------------- Little swap\\r\\n  /// @notice Swap min amount of A to get {requiredAmountB}\\r\\n  /// @return spentAmountIn how much the balance A has decreased\\r\\n  /// @return receivedAmountOut how much the balance B has increased\\r\\n  function _makeLittleSwap(\\r\\n    RebalanceAssetsCore memory c,\\r\\n    PricesDecs memory pd,\\r\\n    uint balanceA_,\\r\\n    uint requiredAmountB\\r\\n  ) internal returns (\\r\\n    uint spentAmountIn,\\r\\n    uint receivedAmountOut\\r\\n  ) {\\r\\n    uint amountInA = requiredAmountB * pd.prices[c.indexB] * pd.decs[c.indexA] / pd.prices[c.indexA] / pd.decs[c.indexB];\\r\\n    // we can have some loss because of slippage\\r\\n    // so, let's increase input amount a bit\\r\\n    amountInA = amountInA * (100_000 + ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE) / 100_000;\\r\\n\\r\\n    // in practice the addition is required to pay ProfitToCover\\r\\n    // we assume, that total addition amount is small enough, much smaller then the total balance\\r\\n    // otherwise something is wrong: we are going to pay ProfitToCover, but we don't have enough amount on the balances.\\r\\n    require(balanceA_ > amountInA, AppErrors.NOT_ENOUGH_BALANCE);\\r\\n\\r\\n    (spentAmountIn, receivedAmountOut) = ConverterStrategyBaseLib.liquidate(\\r\\n      c.converterLiquidator.converter,\\r\\n      c.converterLiquidator.liquidator,\\r\\n      c.assetA,\\r\\n      c.assetB,\\r\\n      amountInA,\\r\\n      ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE,\\r\\n      c.thresholdA,\\r\\n      false\\r\\n    );\\r\\n  }\\r\\n\\r\\n  //endregion -------------------------------------------------- Little swap\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5a94be3da8739c31b91b0e4c6ca7860e96d052ef2d1975b63983e33eed33a8a8\",\"license\":\"BUSL-1.1\"},\"contracts/libs/ConverterEntryKinds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice Utils and constants related to entryKind param of ITetuConverter.findBorrowStrategy\\r\\nlibrary ConverterEntryKinds {\\r\\n  /// @notice Amount of collateral is fixed. Amount of borrow should be max possible.\\r\\n  uint constant public ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0 = 0;\\r\\n\\r\\n  /// @notice Split provided source amount S on two parts: C1 and C2 (C1 + C2 = S)\\r\\n  ///         C2 should be used as collateral to make a borrow B.\\r\\n  ///         Results amounts of C1 and B (both in terms of USD) must be in the given proportion\\r\\n  uint constant public ENTRY_KIND_EXACT_PROPORTION_1 = 1;\\r\\n\\r\\n  /// @notice Borrow given amount using min possible collateral\\r\\n  uint constant public ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2 = 2;\\r\\n\\r\\n  /// @notice Decode entryData, extract first uint - entry kind\\r\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\r\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\r\\n    if (entryData_.length == 0) {\\r\\n      return ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0;\\r\\n    }\\r\\n    return abi.decode(entryData_, (uint));\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x4f4332c8be1be5fd85fef7c06795fc19957b35a4f2e3735fdd89c0906ddc923b\",\"license\":\"BUSL-1.1\"},\"contracts/libs/IterationPlanLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"./AppErrors.sol\\\";\\r\\nimport \\\"./AppLib.sol\\\";\\r\\n\\r\\n/// @notice Support of withdraw iteration plans\\r\\nlibrary IterationPlanLib {\\r\\n\\r\\n//region ------------------------------------------------ Constants\\r\\n  /// @notice Swap collateral asset to get required amount-to-repay, then repay and get more collateral back.\\r\\n  ///         It tries to minimizes count of repay-operations.\\r\\n  ///         If there are no debts, swap leftovers to get required proportions of the asset.\\r\\n  ///         This mode is intended i.e. for \\\"withdraw all\\\"\\r\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\r\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                     The assets should be swapped to get following result proportions:\\r\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\r\\n  ///                     Pass type(uint).max to read proportions from the pool.\\r\\n  uint constant public PLAN_SWAP_REPAY = 0;\\r\\n\\r\\n  /// @notice Repay available amount-to-repay, swap all or part of collateral to borrowed-asset, make one repay if needed.\\r\\n  ///         Swap + second repay tries to make asset balances to proportions required by the pool.\\r\\n  ///         Proportions are read from pool through IPoolProportionsProvider(this) and re-read after swapping.\\r\\n  ///         This mode is intended i.e. for rebalancing debts using single iteration.\\r\\n  ///         (uint256, uint256, uint256) - (entry kind, propNotUnderlying18, required-amount-to-reduce-the-debt)\\r\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                     The assets should be swapped to get following result proportions:\\r\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\r\\n  ///                     Pass type(uint).max to read proportions from the pool.\\r\\n  uint constant public PLAN_REPAY_SWAP_REPAY = 1;\\r\\n\\r\\n  /// @notice Swap leftovers to required proportions, don't repay any debts\\r\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\r\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                     The assets should be swapped to get following result proportions:\\r\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\r\\n  ///                     Pass type(uint).max to read proportions from the pool.\\r\\n  uint constant public PLAN_SWAP_ONLY = 2;\\r\\n//endregion ------------------------------------------------ Constants\\r\\n\\r\\n//region ------------------------------------------------ Data types\\r\\n  /// @notice Set of parameters required to liquidation through aggregators\\r\\n  struct SwapRepayPlanParams {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n\\r\\n    /// @notice Assets used by depositor stored as following way: [underlying, not-underlying]\\r\\n    address[] tokens;\\r\\n\\r\\n    /// @notice Liquidation thresholds for the {tokens}\\r\\n    uint[] liquidationThresholds;\\r\\n\\r\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\r\\n    uint[] prices;\\r\\n    /// @notice 10**decimal for the assets\\r\\n    uint[] decs;\\r\\n\\r\\n    /// @notice Amounts that will be received on balance before execution of the plan.\\r\\n    uint[] balanceAdditions;\\r\\n\\r\\n    /// @notice Plan kind extracted from entry data, see {IterationPlanKinds}\\r\\n    uint planKind;\\r\\n\\r\\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n    ///         The leftovers should be swapped to get following result proportions of the assets:\\r\\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\r\\n    uint propNotUnderlying18;\\r\\n\\r\\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\\r\\n    bool usePoolProportions;\\r\\n\\r\\n    /// @notice \\\"required-amount-to-reduce-debt\\\" in the case of REPAY-SWAP-REPAY, zero in other cases\\r\\n    uint entryDataParam;\\r\\n  }\\r\\n\\r\\n  struct GetIterationPlanLocal {\\r\\n    /// @notice Underlying balance\\r\\n    uint assetBalance;\\r\\n    /// @notice Not-underlying balance\\r\\n    uint tokenBalance;\\r\\n\\r\\n    uint totalDebt;\\r\\n    uint totalCollateral;\\r\\n\\r\\n    uint debtReverse;\\r\\n    uint collateralReverse;\\r\\n\\r\\n    address asset;\\r\\n    address token;\\r\\n\\r\\n    bool swapLeftoversNeeded;\\r\\n  }\\r\\n\\r\\n  struct EstimateSwapAmountForRepaySwapRepayLocal {\\r\\n    uint x;\\r\\n    uint y;\\r\\n    uint bA1;\\r\\n    uint bB1;\\r\\n    uint alpha;\\r\\n    uint swapRatio;\\r\\n    uint aB3;\\r\\n    uint cA1;\\r\\n    uint cB1;\\r\\n    uint aA2;\\r\\n    uint aB2;\\r\\n  }\\r\\n//endregion ------------------------------------------------ Data types\\r\\n\\r\\n  /// @notice Decode entryData, extract first uint - entry kind\\r\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\r\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\r\\n    if (entryData_.length == 0) {\\r\\n      return PLAN_SWAP_REPAY;\\r\\n    }\\r\\n    return abi.decode(entryData_, (uint));\\r\\n  }\\r\\n\\r\\n//region ------------------------------------------------ Build plan\\r\\n  /// @notice Build plan to make single iteration of withdraw according to the selected plan\\r\\n  ///         The goal is to withdraw {requestedAmount} and receive {asset}:{token} in proper proportions on the balance\\r\\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\\r\\n  /// @param tokens List of the pool tokens. One of them is underlying and one of then is not-underlying\\r\\n  ///               that we are going to withdraw\\r\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}. If amount is less then the threshold,\\r\\n  ///                              we cannot swap it.\\r\\n  /// @param prices Prices of the {tokens}, decimals 18, [$/token]\\r\\n  /// @param decs 10**decimal for each token of the {tokens}\\r\\n  /// @param balanceAdditions Amounts that will be added to the current balances of the {tokens}\\r\\n  ///                         to the moment of the plan execution\\r\\n  /// @param packedData Several values packed to fixed-size array (to reduce number of params)\\r\\n  ///    0: usePoolProportions: 1 - read proportions from the pool through IPoolProportionsProvider(this)\\r\\n  ///    1: planKind: selected plan, one of PLAN_XXX\\r\\n  ///    2: propNotUnderlying18: value of not-underlying proportion [0..1e18] if usePoolProportions == 0\\r\\n  ///    3: requestedBalance: total amount that should be withdrawn, it can be type(uint).max\\r\\n  ///    4: indexAsset: index of the underlying in {tokens} array\\r\\n  ///    5: indexToken: index of the token in {tokens} array. We are going to withdraw the token and convert it to the asset\\r\\n  ///    6: entryDataParam: required-amount-to-reduce-debt in REPAY-SWAP-REPAY case; zero in other cases\\r\\n  function buildIterationPlan(\\r\\n    address[2] memory converterLiquidator,\\r\\n    address[] memory tokens,\\r\\n    uint[] memory liquidationThresholds,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    uint[] memory balanceAdditions,\\r\\n    uint[7] memory packedData\\r\\n  ) external returns (\\r\\n    uint indexToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexToRepayPlus1\\r\\n  ) {\\r\\n    return _buildIterationPlan(\\r\\n      SwapRepayPlanParams({\\r\\n        converter: ITetuConverter(converterLiquidator[0]),\\r\\n        liquidator: ITetuLiquidator(converterLiquidator[1]),\\r\\n        tokens: tokens,\\r\\n        liquidationThresholds: liquidationThresholds,\\r\\n        prices: prices,\\r\\n        decs: decs,\\r\\n        balanceAdditions: balanceAdditions,\\r\\n        planKind: packedData[1],\\r\\n        propNotUnderlying18: packedData[2],\\r\\n        usePoolProportions: packedData[0] != 0,\\r\\n        entryDataParam: packedData[6]\\r\\n      }),\\r\\n      packedData[3],\\r\\n      packedData[4],\\r\\n      packedData[5]\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Generate plan for next withdraw iteration. We can do only one swap per iteration.\\r\\n  ///         In general, we cam make 1) single swap (direct or reverse) and 2) repay\\r\\n  ///         Swap is required to get required repay-amount OR to swap leftovers on final iteration.\\r\\n  /// @param requestedBalance Amount of underlying that we need to have on balance after executing the plan.\\r\\n  /// @param indexAsset Index of the underlying in {p.tokens} array\\r\\n  /// @param indexToken Index of the not-underlying in {p.tokens} array\\r\\n  /// @return indexToSwapPlus1 1-based index of the token to be swapped; 0 means swap is not required.\\r\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap\\r\\n  /// @return indexToRepayPlus1 1-based index of the token that should be used to repay borrow in converter.\\r\\n  ///                            0 - no repay is required - it means that this is a last step with swapping leftovers.\\r\\n  function _buildIterationPlan(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint requestedBalance,\\r\\n    uint indexAsset,\\r\\n    uint indexToken\\r\\n  ) internal returns (\\r\\n    uint indexToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexToRepayPlus1\\r\\n  ) {\\r\\n    GetIterationPlanLocal memory v;\\r\\n    v.asset = p.tokens[indexAsset];\\r\\n    v.token = p.tokens[indexToken];\\r\\n\\r\\n    v.assetBalance = IERC20(v.asset).balanceOf(address(this)) + p.balanceAdditions[indexAsset];\\r\\n    v.tokenBalance = IERC20(p.tokens[indexToken]).balanceOf(address(this)) + p.balanceAdditions[indexToken];\\r\\n\\r\\n    if (p.planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\\r\\n      v.swapLeftoversNeeded = true;\\r\\n    } else {\\r\\n      uint requestedAmount = requestedBalance == type(uint).max\\r\\n        ? type(uint).max\\r\\n        : AppLib.sub0(requestedBalance, v.assetBalance);\\r\\n\\r\\n      if (requestedAmount < p.liquidationThresholds[indexAsset]) {\\r\\n        // we don't need to repay any debts anymore, but we should swap leftovers\\r\\n        v.swapLeftoversNeeded = true;\\r\\n      } else {\\r\\n        // we need to increase balance on the following amount: requestedAmount - v.balance;\\r\\n        // we can have two possible borrows:\\r\\n        // 1) direct (p.tokens[INDEX_ASSET] => tokens[i]) and 2) reverse (tokens[i] => p.tokens[INDEX_ASSET])\\r\\n        // normally we can have only one of them, not both..\\r\\n        // but better to take into account possibility to have two debts simultaneously\\r\\n\\r\\n        // reverse debt\\r\\n        (v.debtReverse, v.collateralReverse) = p.converter.getDebtAmountCurrent(address(this), v.token, v.asset, true);\\r\\n        if (v.debtReverse < AppLib.DUST_AMOUNT_TOKENS) { // there is reverse debt or the reverse debt is dust debt\\r\\n          // direct debt\\r\\n          (v.totalDebt, v.totalCollateral) = p.converter.getDebtAmountCurrent(address(this), v.asset, v.token, true);\\r\\n\\r\\n          if (v.totalDebt < AppLib.DUST_AMOUNT_TOKENS) { // there is direct debt or the direct debt is dust debt\\r\\n            // This is final iteration - we need to swap leftovers and get amounts on balance in proper proportions.\\r\\n            // The leftovers should be swapped to get following result proportions of the assets:\\r\\n            //      underlying : not-underlying === 1e18 - propNotUnderlying18 : propNotUnderlying18\\r\\n            v.swapLeftoversNeeded = true;\\r\\n          } else {\\r\\n            // repay direct debt\\r\\n            if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\r\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\r\\n                p,\\r\\n                [v.assetBalance, v.tokenBalance],\\r\\n                [indexAsset, indexToken],\\r\\n                p.propNotUnderlying18,\\r\\n                [v.totalCollateral, v.totalDebt],\\r\\n                p.entryDataParam\\r\\n              );\\r\\n            } else {\\r\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\r\\n                requestedAmount,\\r\\n                p,\\r\\n                v.totalCollateral,\\r\\n                v.totalDebt,\\r\\n                indexAsset,\\r\\n                indexToken,\\r\\n                v.assetBalance,\\r\\n                v.tokenBalance\\r\\n              );\\r\\n            }\\r\\n          }\\r\\n        } else {\\r\\n          // repay reverse debt\\r\\n          if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\r\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\r\\n              p,\\r\\n              [v.tokenBalance, v.assetBalance],\\r\\n              [indexToken, indexAsset],\\r\\n              1e18 - p.propNotUnderlying18,\\r\\n              [v.collateralReverse, v.debtReverse],\\r\\n              p.entryDataParam\\r\\n            );\\r\\n          } else {\\r\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\r\\n              requestedAmount == type(uint).max\\r\\n                ? type(uint).max\\r\\n                : requestedAmount * p.prices[indexAsset] * p.decs[indexToken] / p.prices[indexToken] / p.decs[indexAsset],\\r\\n              p,\\r\\n              v.collateralReverse,\\r\\n              v.debtReverse,\\r\\n              indexToken,\\r\\n              indexAsset,\\r\\n              v.tokenBalance,\\r\\n              v.assetBalance\\r\\n            );\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (v.swapLeftoversNeeded) {\\r\\n      (indexToSwapPlus1, amountToSwap) = _buildPlanForLeftovers(p, v.assetBalance, v.tokenBalance, indexAsset, indexToken, p.propNotUnderlying18);\\r\\n    }\\r\\n\\r\\n    return (indexToSwapPlus1, amountToSwap, indexToRepayPlus1);\\r\\n  }\\r\\n\\r\\n  /// @notice Repay B, get collateral A, then swap A => B, [make one more repay B] => get A:B in required proportions\\r\\n  /// @param balancesAB [balanceA, balanceB]\\r\\n  /// @param idxAB [indexA, indexB]\\r\\n  /// @param totalAB [totalCollateralA, totalBorrowB]\\r\\n  /// @param requiredAmountToReduceDebt If not zero: we are going to make repay-swap-repay to reduce total\\r\\n  ///        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce\\r\\n  ///        the amount of debt by the given amount.\\r\\n  function _buildPlanRepaySwapRepay(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint[2] memory balancesAB,\\r\\n    uint[2] memory idxAB,\\r\\n    uint propB,\\r\\n    uint[2] memory totalAB,\\r\\n    uint requiredAmountToReduceDebt\\r\\n  ) internal returns (\\r\\n    uint indexToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexToRepayPlus1\\r\\n  ) {\\r\\n    // use all available tokenB to repay debt and receive as much as possible tokenA\\r\\n    uint amountToRepay = Math.min(balancesAB[1], totalAB[1]);\\r\\n\\r\\n    uint collateralAmount;\\r\\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n      uint swappedAmountOut;\\r\\n      //\\r\\n      (collateralAmount, swappedAmountOut) = p.converter.quoteRepay(address(this), p.tokens[idxAB[0]], p.tokens[idxAB[1]], amountToRepay);\\r\\n      if (collateralAmount > swappedAmountOut) { // SCB-789\\r\\n        collateralAmount -= swappedAmountOut;\\r\\n      }\\r\\n    } else {\\r\\n      amountToRepay = 0;\\r\\n    }\\r\\n\\r\\n    // swap A to B: full or partial\\r\\n    // SCB-876: swap B to A are also possible here\\r\\n    bool swapB;\\r\\n    (amountToSwap, swapB) = estimateSwapAmountForRepaySwapRepay(\\r\\n      p,\\r\\n      [balancesAB[0], balancesAB[1]],\\r\\n      [idxAB[0], idxAB[1]],\\r\\n      propB,\\r\\n      totalAB[0],\\r\\n      totalAB[1],\\r\\n      collateralAmount,\\r\\n      amountToRepay\\r\\n    );\\r\\n\\r\\n    if (swapB) {\\r\\n      // edge case: swap B => A; for simplicity, we don't take into account requiredAmountToReduceDebt\\r\\n      return (idxAB[1] + 1, amountToSwap, idxAB[1] + 1);\\r\\n    } else {\\r\\n      // swap A => B\\r\\n      if (requiredAmountToReduceDebt != 0) {\\r\\n        // probably it worth to increase amount to swap?\\r\\n        uint requiredAmountToSwap = requiredAmountToReduceDebt * p.prices[idxAB[1]] * p.decs[idxAB[0]] / p.prices[idxAB[0]] / p.decs[idxAB[1]];\\r\\n        amountToSwap = Math.max(amountToSwap, requiredAmountToSwap);\\r\\n        amountToSwap = Math.min(amountToSwap, balancesAB[0] + collateralAmount);\\r\\n      }\\r\\n\\r\\n      return (idxAB[0] + 1, amountToSwap, idxAB[1] + 1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Estimate swap amount for iteration \\\"repay-swap-repay\\\"\\r\\n  ///         The iteration should give us amounts of assets in required proportions.\\r\\n  ///         There are two cases here: full swap and partial swap. Second repay is not required if the swap is partial.\\r\\n  /// @param collateralA Estimated value of collateral A received after repay balanceB\\r\\n  /// @return amountToSwap Amount to be swapped\\r\\n  /// @return swapB False: swap A => B; True: swap B => A\\r\\n  function estimateSwapAmountForRepaySwapRepay(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint[2] memory balancesAB,\\r\\n    uint[2] memory indicesAB,\\r\\n    uint propB,\\r\\n    uint totalCollateralA,\\r\\n    uint totalBorrowB,\\r\\n    uint collateralA,\\r\\n    uint amountToRepayB\\r\\n  ) internal pure returns(uint amountToSwap, bool swapB) {\\r\\n    // N - number of the state\\r\\n    // bAN, bBN - balances of A and B; aAN, aBN - amounts of A and B; cAN, cBN - collateral/borrow amounts of A/B\\r\\n    // alpha ~ cAN/cBN - estimated ratio of collateral/borrow\\r\\n    // s = swap ratio, aA is swapped to aB, so aA = s * aB\\r\\n    // g = split ratio, bA1 is divided on two parts: bA1 * gamma, bA1 * (1 - gamma). First part is swapped.\\r\\n    // X = proportion of A, Y = proportion of B\\r\\n\\r\\n    // Formulas\\r\\n    // aB3 = (x * bB2 - y * bA2) / (alpha * y + x)\\r\\n    // gamma = (y * bA1 - x * bB1) / (bA1 * (x * s + y))\\r\\n\\r\\n    // There are following stages:\\r\\n    // 0. init (we have at least not zero amount of B and not zero debt of B)\\r\\n    // 1. repay 1 (repay all available amount of B OR all available debt)\\r\\n    // 2. swap (swap A fully or partially to B)\\r\\n    // 3. repay 2 (optional: we need this stage if full swap produces amount of B that is <= available debt)\\r\\n    // 4. final (we have assets in right proportion on the balance)\\r\\n    EstimateSwapAmountForRepaySwapRepayLocal memory v;\\r\\n    v.x = 1e18 - propB;\\r\\n    v.y = propB;\\r\\n// 1. repay 1\\r\\n    // convert amounts A, amounts B to cost A, cost B in USD\\r\\n    v.bA1 = (balancesAB[0] + collateralA) * p.prices[indicesAB[0]] / p.decs[indicesAB[0]];\\r\\n    v.bB1 = (balancesAB[1] - amountToRepayB) * p.prices[indicesAB[1]] / p.decs[indicesAB[1]];\\r\\n    v.cB1 = (totalBorrowB - amountToRepayB) * p.prices[indicesAB[1]] / p.decs[indicesAB[1]];\\r\\n    v.alpha = 1e18 * totalCollateralA * p.prices[indicesAB[0]] * p.decs[indicesAB[1]]\\r\\n      / p.decs[indicesAB[0]] / p.prices[indicesAB[1]] / totalBorrowB; // (!) approx estimation\\r\\n\\r\\n// 2. full swap\\r\\n    v.aA2 = v.bA1;\\r\\n    v.swapRatio = 1e18; // we assume swap ratio 1:1\\r\\n\\r\\n// 3. repay 2\\r\\n    // aB3 = (x * bB2 - Y * bA2) / (alpha * y + x)\\r\\n    v.aB3 = (\\r\\n      v.x * (v.bB1 + v.aA2 * v.swapRatio / 1e18)    // bB2 = v.bB1 + v.aA2 * v.s / 1e18\\r\\n      - v.y * (v.bA1 - v.aA2)                       // bA2 = v.bA1 - v.aA2;\\r\\n    ) / (v.y * v.alpha / 1e18 + v.x);\\r\\n\\r\\n    if (v.aB3 > v.cB1) {\\r\\n      if (v.y * v.bA1 >= v.x * v.bB1) {\\r\\n        // there is not enough debt to make second repay\\r\\n        // we need to make partial swap and receive assets in right proportions in result\\r\\n        // v.gamma = 1e18 * (v.y * v.bA1 - v.x * v.bB1) / (v.bA1 * (v.x * v.s / 1e18 + v.y));\\r\\n        v.aA2 = (v.y * v.bA1 - v.x * v.bB1) / (v.x * v.swapRatio / 1e18 + v.y);\\r\\n      } else {\\r\\n        // scb-867: edge case, we need to make swap B => A\\r\\n        v.aB2 = (v.x * v.bB1 - v.y * v.bA1) / (v.x * v.swapRatio / 1e18 + v.y) /* * 1e18 / v.swapRatio */ ;\\r\\n        swapB = true;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return swapB\\r\\n      ? (v.aB2 * p.decs[indicesAB[1]] / p.prices[indicesAB[1]], true) // edge case: swap B => A\\r\\n      : (v.aA2 * p.decs[indicesAB[0]] / p.prices[indicesAB[0]], false); // normal case: swap A => B\\r\\n  }\\r\\n\\r\\n  /// @notice Prepare a plan to swap leftovers to required proportion\\r\\n  /// @param balanceA Balance of token A, i.e. underlying\\r\\n  /// @param balanceB Balance of token B, i.e. not-underlying\\r\\n  /// @param indexA Index of the token A, i.e. underlying, in {p.prices} and {p.decs}\\r\\n  /// @param indexB Index of the token B, i.e. not-underlying, in {p.prices} and {p.decs}\\r\\n  /// @param propB Required proportion of TokenB [0..1e18]. Proportion of token A is (1e18-propB)\\r\\n  /// @return indexTokenToSwapPlus1 Index of the token to be swapped. 0 - no swap is required\\r\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap is required\\r\\n  function _buildPlanForLeftovers(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint balanceA,\\r\\n    uint balanceB,\\r\\n    uint indexA,\\r\\n    uint indexB,\\r\\n    uint propB\\r\\n  ) internal pure returns (\\r\\n    uint indexTokenToSwapPlus1,\\r\\n    uint amountToSwap\\r\\n  ) {\\r\\n    (uint targetA, uint targetB) = _getTargetAmounts(p.prices, p.decs, balanceA, balanceB, propB, indexA, indexB);\\r\\n    if (balanceA < targetA) {\\r\\n      // we need to swap not-underlying to underlying\\r\\n      if (balanceB - targetB > p.liquidationThresholds[indexB]) {\\r\\n        amountToSwap = balanceB - targetB;\\r\\n        indexTokenToSwapPlus1 = indexB + 1;\\r\\n      }\\r\\n    } else {\\r\\n      // we need to swap underlying to not-underlying\\r\\n      if (balanceA - targetA > p.liquidationThresholds[indexA]) {\\r\\n        amountToSwap = balanceA - targetA;\\r\\n        indexTokenToSwapPlus1 = indexA + 1;\\r\\n      }\\r\\n    }\\r\\n    return (indexTokenToSwapPlus1, amountToSwap);\\r\\n  }\\r\\n\\r\\n  /// @notice Prepare a plan to swap some amount of collateral to get required repay-amount and make repaying\\r\\n  ///         1) Sell collateral-asset to get missed amount-to-repay 2) make repay and get more collateral back\\r\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount.\\r\\n  /// @param totalCollateral Total amount of collateral used in the borrow\\r\\n  /// @param totalDebt Total amount of debt that should be repaid to receive {totalCollateral}\\r\\n  /// @param indexCollateral Index of collateral asset in {p.prices}, {p.decs}\\r\\n  /// @param indexBorrow Index of borrow asset in {p.prices}, {p.decs}\\r\\n  /// @param balanceCollateral Current balance of the collateral asset\\r\\n  /// @param balanceBorrow Current balance of the borrowed asset\\r\\n  /// @param indexTokenToSwapPlus1 1-based index of the token to be swapped. Swap of amount of collateral asset can be required\\r\\n  ///                              to receive missed amount-to-repay. 0 - no swap is required\\r\\n  /// @param amountToSwap Amount to be swapped. 0 - no swap is required\\r\\n  /// @param indexRepayTokenPlus1 1-based index of the token to be repaied. 0 - no repaying is required\\r\\n  function _buildPlanForSellAndRepay(\\r\\n    uint requestedAmount,\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint totalCollateral,\\r\\n    uint totalDebt,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow,\\r\\n    uint balanceCollateral,\\r\\n    uint balanceBorrow\\r\\n  ) internal pure returns (\\r\\n    uint indexTokenToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexRepayTokenPlus1\\r\\n  ) {\\r\\n    // what amount of collateral we should sell to get required amount-to-pay to pay the debt\\r\\n    uint toSell = _getAmountToSell(\\r\\n      requestedAmount,\\r\\n      totalDebt,\\r\\n      totalCollateral,\\r\\n      p.prices,\\r\\n      p.decs,\\r\\n      indexCollateral,\\r\\n      indexBorrow,\\r\\n      balanceBorrow\\r\\n    );\\r\\n\\r\\n    // convert {toSell} amount of underlying to token\\r\\n    if (toSell != 0 && balanceCollateral != 0) {\\r\\n      toSell = Math.min(toSell, balanceCollateral);\\r\\n      uint threshold = p.liquidationThresholds[indexCollateral];\\r\\n      if (toSell > threshold) {\\r\\n        amountToSwap = toSell;\\r\\n        indexTokenToSwapPlus1 = indexCollateral + 1;\\r\\n      } else {\\r\\n        // we need to sell amount less than the threshold, it's not allowed\\r\\n        // but it's dangerous to just ignore the selling because there is a chance to have error 35\\r\\n        // (There is a debt $3.29, we make repay $3.27 => error 35)\\r\\n        // it would be safer to sell a bit more amount if it's possible\\r\\n        if (balanceCollateral >= threshold + 1) {\\r\\n          amountToSwap = threshold + 1;\\r\\n          indexTokenToSwapPlus1 = indexCollateral + 1;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (indexTokenToSwapPlus1, amountToSwap, indexBorrow + 1);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate what balances of underlying and not-underlying we need to fit {propNotUnderlying18}\\r\\n  /// @param prices Prices of underlying and not underlying\\r\\n  /// @param decs 10**decimals for underlying and not underlying\\r\\n  /// @param assetBalance Current balance of underlying\\r\\n  /// @param tokenBalance Current balance of not-underlying\\r\\n  /// @param propNotUnderlying18 Required proportion of not-underlying [0..1e18]\\r\\n  ///                            Proportion of underlying would be (1e18 - propNotUnderlying18)\\r\\n  /// @param targetAssets What result balance of underlying is required to fit to required proportions\\r\\n  /// @param targetTokens What result balance of not-underlying is required to fit to required proportions\\r\\n  function _getTargetAmounts(\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    uint assetBalance,\\r\\n    uint tokenBalance,\\r\\n    uint propNotUnderlying18,\\r\\n    uint indexAsset,\\r\\n    uint indexToken\\r\\n  ) internal pure returns (\\r\\n    uint targetAssets,\\r\\n    uint targetTokens\\r\\n  ) {\\r\\n    uint costAssets = assetBalance * prices[indexAsset] / decs[indexAsset];\\r\\n    uint costTokens = tokenBalance * prices[indexToken] / decs[indexToken];\\r\\n    targetTokens = propNotUnderlying18 == 0\\r\\n      ? 0\\r\\n      : ((costAssets + costTokens) * propNotUnderlying18 / 1e18);\\r\\n    targetAssets = ((costAssets + costTokens) - targetTokens) * decs[indexAsset] / prices[indexAsset];\\r\\n    targetTokens = targetTokens * decs[indexToken] / prices[indexToken];\\r\\n  }\\r\\n\\r\\n  /// @notice What amount of collateral should be sold to pay the debt and receive {requestedAmount}\\r\\n  /// @dev It doesn't allow to sell more than the amount of total debt in the borrow\\r\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount\\r\\n  /// @param totalDebt Total debt of the borrow in terms of borrow asset\\r\\n  /// @param totalCollateral Total collateral of the borrow in terms of collateral asset\\r\\n  /// @param prices Cost of $1 in terms of the asset, decimals 18\\r\\n  /// @param decs 10**decimals for each asset\\r\\n  /// @param indexCollateral Index of the collateral asset in {prices} and {decs}\\r\\n  /// @param indexBorrowAsset Index of the borrow asset in {prices} and {decs}\\r\\n  /// @param balanceBorrowAsset Available balance of the borrow asset, it will be used to cover the debt\\r\\n  /// @return amountOut Amount of collateral-asset that should be sold\\r\\n  function _getAmountToSell(\\r\\n    uint requestedAmount,\\r\\n    uint totalDebt,\\r\\n    uint totalCollateral,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrowAsset,\\r\\n    uint balanceBorrowAsset\\r\\n  ) internal pure returns (\\r\\n    uint amountOut\\r\\n  ) {\\r\\n    if (totalDebt != 0) {\\r\\n      if (balanceBorrowAsset != 0) {\\r\\n        // there is some borrow asset on balance\\r\\n        // it will be used to cover the debt\\r\\n        // let's reduce the size of totalDebt/Collateral to exclude balanceBorrowAsset\\r\\n        uint sub = Math.min(balanceBorrowAsset, totalDebt);\\r\\n        totalCollateral -= totalCollateral * sub / totalDebt;\\r\\n        totalDebt -= sub;\\r\\n      }\\r\\n\\r\\n      // for definiteness: usdc - collateral asset, dai - borrow asset\\r\\n      // Pc = price of the USDC, Pb = price of the DAI, alpha = Pc / Pb [DAI / USDC]\\r\\n      // S [USDC] - amount to sell, R [DAI] = alpha * S - amount to repay\\r\\n      // After repaying R we get: alpha * S * C / R\\r\\n      // Balance should be increased on: requestedAmount = alpha * S * C / R - S\\r\\n      // So, we should sell: S = requestedAmount / (alpha * C / R - 1))\\r\\n      // We can lost some amount on liquidation of S => R, so we need to use some gap = {GAP_AMOUNT_TO_SELL}\\r\\n      // Same formula: S * h = S + requestedAmount, where h = health factor => s = requestedAmount / (h - 1)\\r\\n      // h = alpha * C / R\\r\\n      uint alpha18 = prices[indexCollateral] * decs[indexBorrowAsset] * 1e18\\r\\n        / prices[indexBorrowAsset] / decs[indexCollateral];\\r\\n\\r\\n      // if totalCollateral is zero (liquidation happens) we will have zero amount (the debt shouldn't be paid)\\r\\n      amountOut = totalDebt != 0 && alpha18 * totalCollateral / totalDebt > 1e18\\r\\n        ? Math.min(requestedAmount, totalCollateral) * 1e18 / (alpha18 * totalCollateral / totalDebt - 1e18)\\r\\n        : 0;\\r\\n\\r\\n      if (amountOut != 0) {\\r\\n        // we shouldn't try to sell amount greater than amount of totalDebt in terms of collateral asset\\r\\n        // but we always asks +1% because liquidation results can be different a bit from expected\\r\\n        amountOut = (AppLib.GAP_CONVERSION + AppLib.DENOMINATOR) * Math.min(amountOut, totalDebt * 1e18 / alpha18) / AppLib.DENOMINATOR;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return amountOut;\\r\\n  }\\r\\n//endregion ------------------------------------------------ Build plan\\r\\n}\\r\\n\",\"keccak256\":\"0xbe94b0f9bfed116a0dd0fe1c212203b58d40d9a81416116d63fd07669f708596\",\"license\":\"BUSL-1.1\"},\"contracts/libs/TokenAmountsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./AppErrors.sol\\\";\\r\\n\\r\\n/// @title Library for clearing / joining token addresses & amounts arrays\\r\\n/// @author bogdoslav\\r\\nlibrary TokenAmountsLib {\\r\\n  /// @notice Version of the contract\\r\\n  /// @dev Should be incremented when contract changed\\r\\n  string internal constant TOKEN_AMOUNTS_LIB_VERSION = \\\"1.0.1\\\";\\r\\n\\r\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\r\\n    unchecked {\\r\\n      return i + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function filterZeroAmounts(\\r\\n    address[] memory tokens,\\r\\n    uint[] memory amounts\\r\\n  ) internal pure returns (\\r\\n    address[] memory t,\\r\\n    uint[] memory a\\r\\n  ) {\\r\\n    require(tokens.length == amounts.length, AppErrors.INCORRECT_LENGTHS);\\r\\n    uint len2 = 0;\\r\\n    uint len = tokens.length;\\r\\n    for (uint i = 0; i < len; i++) {\\r\\n      if (amounts[i] != 0) len2++;\\r\\n    }\\r\\n\\r\\n    t = new address[](len2);\\r\\n    a = new uint[](len2);\\r\\n\\r\\n    uint j = 0;\\r\\n    for (uint i = 0; i < len; i++) {\\r\\n      uint amount = amounts[i];\\r\\n      if (amount != 0) {\\r\\n        t[j] = tokens[i];\\r\\n        a[j] = amount;\\r\\n        j++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice unites three arrays to single array without duplicates, amounts are sum, zero amounts are allowed\\r\\n  function combineArrays(\\r\\n    address[] memory tokens0,\\r\\n    uint[] memory amounts0,\\r\\n    address[] memory tokens1,\\r\\n    uint[] memory amounts1,\\r\\n    address[] memory tokens2,\\r\\n    uint[] memory amounts2\\r\\n  ) internal pure returns (\\r\\n    address[] memory allTokens,\\r\\n    uint[] memory allAmounts\\r\\n  ) {\\r\\n    uint[] memory lens = new uint[](3);\\r\\n    lens[0] = tokens0.length;\\r\\n    lens[1] = tokens1.length;\\r\\n    lens[2] = tokens2.length;\\r\\n\\r\\n    require(\\r\\n      lens[0] == amounts0.length && lens[1] == amounts1.length && lens[2] == amounts2.length,\\r\\n      AppErrors.INCORRECT_LENGTHS\\r\\n    );\\r\\n\\r\\n    uint maxLength = lens[0] + lens[1] + lens[2];\\r\\n    address[] memory tokensOut = new address[](maxLength);\\r\\n    uint[] memory amountsOut = new uint[](maxLength);\\r\\n    uint unitedLength;\\r\\n\\r\\n    for (uint step; step < 3; ++step) {\\r\\n      uint[] memory amounts = step == 0\\r\\n        ? amounts0\\r\\n        : (step == 1\\r\\n          ? amounts1\\r\\n          : amounts2);\\r\\n      address[] memory tokens = step == 0\\r\\n        ? tokens0\\r\\n        : (step == 1\\r\\n          ? tokens1\\r\\n          : tokens2);\\r\\n      for (uint i1 = 0; i1 < lens[step]; i1++) {\\r\\n        uint amount1 = amounts[i1];\\r\\n        address token1 = tokens[i1];\\r\\n        bool united = false;\\r\\n\\r\\n        for (uint i = 0; i < unitedLength; i++) {\\r\\n          if (token1 == tokensOut[i]) {\\r\\n            amountsOut[i] += amount1;\\r\\n            united = true;\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        if (!united) {\\r\\n          tokensOut[unitedLength] = token1;\\r\\n          amountsOut[unitedLength] = amount1;\\r\\n          unitedLength++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // copy united tokens to result array\\r\\n    allTokens = new address[](unitedLength);\\r\\n    allAmounts = new uint[](unitedLength);\\r\\n    for (uint i; i < unitedLength; i++) {\\r\\n      allTokens[i] = tokensOut[i];\\r\\n      allAmounts[i] = amountsOut[i];\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3adb8a53441362b47b3bf5c0c7181f7c1652de7dde3df4fb765e8484447d074\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/ConverterStrategyBaseLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"../libs/AppErrors.sol\\\";\\r\\nimport \\\"../libs/AppLib.sol\\\";\\r\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\r\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\r\\nimport \\\"../libs/IterationPlanLib.sol\\\";\\r\\nimport \\\"../interfaces/IConverterStrategyBase.sol\\\";\\r\\n\\r\\nlibrary ConverterStrategyBaseLib {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n//region--------------------------------------------------- Data types\\r\\n\\r\\n  /// @notice Local vars for {_recycle}, workaround for stack too deep\\r\\n  struct RecycleLocalParams {\\r\\n    /// @notice Compound amount + Performance amount\\r\\n    uint amountCP;\\r\\n    /// @notice Amount to compound\\r\\n    uint amountC;\\r\\n    /// @notice Amount to send to performance and insurance\\r\\n    uint amountP;\\r\\n    /// @notice Amount to forwarder + amount to compound\\r\\n    uint amountFC;\\r\\n    address rewardToken;\\r\\n    uint len;\\r\\n    uint receivedAmountOut;\\r\\n  }\\r\\n\\r\\n  struct OpenPositionLocal {\\r\\n    uint entryKind;\\r\\n    address[] converters;\\r\\n    uint[] collateralsRequired;\\r\\n    uint[] amountsToBorrow;\\r\\n    uint collateral;\\r\\n    uint amountToBorrow;\\r\\n  }\\r\\n\\r\\n  struct OpenPositionEntryKind1Local {\\r\\n    address[] converters;\\r\\n    uint[] collateralsRequired;\\r\\n    uint[] amountsToBorrow;\\r\\n    uint collateral;\\r\\n    uint amountToBorrow;\\r\\n    uint c1;\\r\\n    uint c3;\\r\\n    uint alpha;\\r\\n  }\\r\\n\\r\\n  struct SwapToGetAmountLocal {\\r\\n    uint len;\\r\\n    uint[] prices;\\r\\n    uint[] decs;\\r\\n  }\\r\\n\\r\\n  struct ConvertAfterWithdrawLocal {\\r\\n    address asset;\\r\\n    uint spent;\\r\\n    uint received;\\r\\n    uint balance;\\r\\n    uint balanceBefore;\\r\\n    uint len;\\r\\n  }\\r\\n\\r\\n  struct SwapToGivenAmountInputParams {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n    uint targetAmount;\\r\\n    address[] tokens;\\r\\n    uint[] amounts;\\r\\n    /// @notice liquidationThresholds for the {tokens}\\r\\n    uint[] liquidationThresholds;\\r\\n    uint indexTargetAsset;\\r\\n    address underlying;\\r\\n    /// @notice Allow to swap more then required (i.e. 1_000 => +1%)\\r\\n    ///         to avoid additional swap if the swap return amount a bit less than we expected\\r\\n    uint overswap;\\r\\n  }\\r\\n\\r\\n  struct SwapToGivenAmountLocal {\\r\\n    uint len;\\r\\n    uint[] availableAmounts;\\r\\n    uint i;\\r\\n  }\\r\\n\\r\\n  struct CloseDebtsForRequiredAmountLocal {\\r\\n    address asset;\\r\\n    uint balanceAsset;\\r\\n    uint balanceToken;\\r\\n\\r\\n    uint newBalanceAsset;\\r\\n    uint newBalanceToken;\\r\\n\\r\\n    uint idxToSwap1;\\r\\n    uint amountToSwap;\\r\\n    uint idxToRepay1;\\r\\n\\r\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\r\\n    uint[] prices;\\r\\n    /// @notice 10**decimal for the assets\\r\\n    uint[] decs;\\r\\n\\r\\n    /// @notice Amounts that will be received on balance before execution of the plan.\\r\\n    uint[] balanceAdditions;\\r\\n\\r\\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n    ///         The leftovers should be swapped to get following result proportions of the assets:\\r\\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\r\\n    uint propNotUnderlying18;\\r\\n\\r\\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\\r\\n    bool usePoolProportions;\\r\\n\\r\\n    bool exitLoop;\\r\\n  }\\r\\n\\r\\n  struct DataSetLocal {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n    /// @notice Tokens received from {_depositorPoolAssets}\\r\\n    address[] tokens;\\r\\n    /// @notice Index of the main asset in {tokens}\\r\\n    uint indexAsset;\\r\\n    /// @notice Length of {tokens}\\r\\n    uint len;\\r\\n  }\\r\\n\\r\\n  struct RecycleLocal {\\r\\n    address asset;\\r\\n    uint compoundRatio;\\r\\n    uint performanceFee;\\r\\n    uint toPerf;\\r\\n    uint toInsurance;\\r\\n    uint[] amountsToForward;\\r\\n    uint[] thresholds;\\r\\n    int debtToInsuranceCurrent;\\r\\n    int debtToInsuranceUpdated;\\r\\n    address splitter;\\r\\n  }\\r\\n\\r\\n  /// @notice Input params for _recycle\\r\\n  struct RecycleParams {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n    address splitter;\\r\\n\\r\\n    /// @notice Underlying asset\\r\\n    address asset;\\r\\n    /// @notice Compound ration in the range [0...COMPOUND_DENOMINATOR]\\r\\n    uint compoundRatio;\\r\\n    /// @notice tokens received from {_depositorPoolAssets}\\r\\n    address[] tokens;\\r\\n    /// @notice Liquidation thresholds for rewards tokens\\r\\n    uint[] thresholds;\\r\\n    /// @notice Full list of reward tokens received from tetuConverter and depositor\\r\\n    address[] rewardTokens;\\r\\n    /// @notice Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\r\\n    uint[] rewardAmounts;\\r\\n    /// @notice Performance fee in the range [0...FEE_DENOMINATOR]\\r\\n    uint performanceFee;\\r\\n    /// @notice Current debt to the insurance [in underlying]\\r\\n    int debtToInsurance;\\r\\n    /// @notice Liquidation threshold for the {asset}\\r\\n    uint assetThreshold;\\r\\n  }\\r\\n//endregion--------------------------------------------------- Data types\\r\\n\\r\\n//region--------------------------------------------------- Constants\\r\\n\\r\\n  /// @notice approx one month for average block time 2 sec\\r\\n  uint internal constant _LOAN_PERIOD_IN_BLOCKS = 30 days / 2;\\r\\n  uint internal constant _REWARD_LIQUIDATION_SLIPPAGE = 5_000; // 5%\\r\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\r\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\r\\n  uint internal constant PRICE_IMPACT_TOLERANCE = 300;\\r\\n  /// @notice borrow/collateral amount cannot be less than given number of tokens\\r\\n  uint internal constant DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD = 10;\\r\\n  /// @notice Allow to swap more then required (i.e. 1_000 => +1%) inside {swapToGivenAmount}\\r\\n  ///         to avoid additional swap if the swap will return amount a bit less than we expected\\r\\n  uint internal constant OVERSWAP = PRICE_IMPACT_TOLERANCE + _ASSET_LIQUIDATION_SLIPPAGE;\\r\\n  /// @notice During SWAP-REPAY cycle we can receive requested amount after SWAP, so, following REPAY will be skipped.\\r\\n  ///         But we should prevent situation \\\"zero balance, not zero debts\\\".\\r\\n  ///         So, it worth to request amount higher (on the given gap) than it's really requested.\\r\\n  uint internal constant REQUESTED_BALANCE_GAP = 5_000; // 5%\\r\\n//endregion--------------------------------------------------- Constants\\r\\n\\r\\n//region--------------------------------------------------- Events\\r\\n  /// @notice A borrow was made\\r\\n  event OpenPosition(\\r\\n    address converter,\\r\\n    address collateralAsset,\\r\\n    uint collateralAmount,\\r\\n    address borrowAsset,\\r\\n    uint borrowedAmount,\\r\\n    address recepient\\r\\n  );\\r\\n\\r\\n  /// @notice Some borrow(s) was/were repaid\\r\\n  event ClosePosition(\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountRepay,\\r\\n    address recepient,\\r\\n    uint returnedAssetAmountOut,\\r\\n    uint returnedBorrowAmountOut\\r\\n  );\\r\\n\\r\\n  /// @notice A liquidation was made\\r\\n  event Liquidation(\\r\\n    address tokenIn,\\r\\n    address tokenOut,\\r\\n    uint amountIn,\\r\\n    uint spentAmountIn,\\r\\n    uint receivedAmountOut\\r\\n  );\\r\\n\\r\\n  event ReturnAssetToConverter(address asset, uint amount);\\r\\n\\r\\n  /// @notice Recycle was made\\r\\n  /// @param rewardTokens Full list of reward tokens received from tetuConverter and depositor\\r\\n  /// @param amountsToForward Amounts to be sent to forwarder\\r\\n  event Recycle(\\r\\n    address[] rewardTokens,\\r\\n    uint[] amountsToForward,\\r\\n    uint toPerf,\\r\\n    uint toInsurance\\r\\n  );\\r\\n\\r\\n  /// @notice Debt to insurance was paid by rewards\\r\\n  /// @param debtToInsuranceBefore Initial amount of debts to the insurance, in underlying\\r\\n  /// @param debtToInsuranceBefore Final amount of debts to the insurance, in underlying\\r\\n  event OnPayDebtToInsurance(\\r\\n    int debtToInsuranceBefore,\\r\\n    int debtToInsuraneAfter\\r\\n  );\\r\\n\\r\\n  /// @notice Debt to insurance was paid by a reward token\\r\\n  /// @param debtToCover Initial amount of debt that should be covered, in underlying\\r\\n  /// @param debtLeftovers Final amount of debt that should be covered, in underlying\\r\\n  /// It can be negative if we paid more than required\\r\\n  event OnCoverDebtToInsurance(\\r\\n    address rewardToken,\\r\\n    uint rewardAmount,\\r\\n    uint debtToCover,\\r\\n    int debtLeftovers\\r\\n  );\\r\\n//endregion---------------------------------------------------  Events\\r\\n\\r\\n//region--------------------------------------------------- Borrow and close positions\\r\\n\\r\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\r\\n  ///         Max possible collateral should be approved before calling of this function.\\r\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\r\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\r\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\r\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\r\\n  function openPosition(\\r\\n    ITetuConverter tetuConverter_,\\r\\n    bytes memory entryData_,\\r\\n    address collateralAsset_,\\r\\n    address borrowAsset_,\\r\\n    uint amountIn_,\\r\\n    uint thresholdAmountIn_\\r\\n  ) external returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    return _openPosition(tetuConverter_, entryData_, collateralAsset_, borrowAsset_, amountIn_, thresholdAmountIn_);\\r\\n  }\\r\\n\\r\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\r\\n  ///         Max possible collateral should be approved before calling of this function.\\r\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\r\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\r\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\r\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\r\\n  /// @param thresholdAmountIn_ Min value of amountIn allowed for the second and subsequent conversions.\\r\\n  ///        0 - use default min value\\r\\n  ///        If amountIn becomes too low, no additional borrows are possible, so\\r\\n  ///        the rest amountIn is just added to collateral/borrow amount of previous conversion.\\r\\n  function _openPosition(\\r\\n    ITetuConverter tetuConverter_,\\r\\n    bytes memory entryData_,\\r\\n    address collateralAsset_,\\r\\n    address borrowAsset_,\\r\\n    uint amountIn_,\\r\\n    uint thresholdAmountIn_\\r\\n  ) internal returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    if (thresholdAmountIn_ == 0) {\\r\\n      // zero threshold is not allowed because round-issues are possible, see openPosition.dust test\\r\\n      // we assume here, that it's useless to borrow amount using collateral/borrow amount\\r\\n      // less than given number of tokens (event for BTC)\\r\\n      thresholdAmountIn_ = DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD;\\r\\n    }\\r\\n    if (amountIn_ <= thresholdAmountIn_) {\\r\\n      return (0, 0);\\r\\n    }\\r\\n\\r\\n    OpenPositionLocal memory vars;\\r\\n    // we assume here, that max possible collateral amount is already approved (as it's required by TetuConverter)\\r\\n    vars.entryKind = ConverterEntryKinds.getEntryKind(entryData_);\\r\\n    if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\\r\\n      return openPositionEntryKind1(\\r\\n        tetuConverter_,\\r\\n        entryData_,\\r\\n        collateralAsset_,\\r\\n        borrowAsset_,\\r\\n        amountIn_,\\r\\n        thresholdAmountIn_\\r\\n      );\\r\\n    } else {\\r\\n      (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\r\\n        entryData_,\\r\\n        collateralAsset_,\\r\\n        amountIn_,\\r\\n        borrowAsset_,\\r\\n        _LOAN_PERIOD_IN_BLOCKS\\r\\n      );\\r\\n\\r\\n      uint len = vars.converters.length;\\r\\n      if (len > 0) {\\r\\n        for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n          // we need to approve collateralAmount before the borrow-call but it's already approved, see above comments\\r\\n          vars.collateral;\\r\\n          vars.amountToBorrow;\\r\\n          if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\\r\\n            // we have exact amount of total collateral amount\\r\\n            // Case ENTRY_KIND_EXACT_PROPORTION_1 is here too because we consider first platform only\\r\\n            vars.collateral = amountIn_ < vars.collateralsRequired[i]\\r\\n              ? amountIn_\\r\\n              : vars.collateralsRequired[i];\\r\\n            vars.amountToBorrow = amountIn_ < vars.collateralsRequired[i]\\r\\n              ? vars.amountsToBorrow[i] * amountIn_ / vars.collateralsRequired[i]\\r\\n              : vars.amountsToBorrow[i];\\r\\n            amountIn_ -= vars.collateral;\\r\\n          } else {\\r\\n            // assume here that entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2\\r\\n            // we have exact amount of total amount-to-borrow\\r\\n            vars.amountToBorrow = amountIn_ < vars.amountsToBorrow[i]\\r\\n              ? amountIn_\\r\\n              : vars.amountsToBorrow[i];\\r\\n            vars.collateral = amountIn_ < vars.amountsToBorrow[i]\\r\\n              ? vars.collateralsRequired[i] * amountIn_ / vars.amountsToBorrow[i]\\r\\n              : vars.collateralsRequired[i];\\r\\n            amountIn_ -= vars.amountToBorrow;\\r\\n          }\\r\\n\\r\\n          if (amountIn_ < thresholdAmountIn_ && amountIn_ != 0) {\\r\\n            // dust amount is left, just leave it unused\\r\\n            // we cannot add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\r\\n            amountIn_ = 0;\\r\\n          }\\r\\n\\r\\n          if (vars.amountToBorrow != 0) {\\r\\n            borrowedAmountOut += tetuConverter_.borrow(\\r\\n              vars.converters[i],\\r\\n              collateralAsset_,\\r\\n              vars.collateral,\\r\\n              borrowAsset_,\\r\\n              vars.amountToBorrow,\\r\\n              address(this)\\r\\n            );\\r\\n            collateralAmountOut += vars.collateral;\\r\\n            emit OpenPosition(\\r\\n              vars.converters[i],\\r\\n              collateralAsset_,\\r\\n              vars.collateral,\\r\\n              borrowAsset_,\\r\\n              vars.amountToBorrow,\\r\\n              address(this)\\r\\n            );\\r\\n          }\\r\\n\\r\\n          if (amountIn_ == 0) break;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return (collateralAmountOut, borrowedAmountOut);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Open position using entry kind 1 - split provided amount on two parts according provided proportions\\r\\n  /// @param amountIn_ Amount of collateral to be divided on parts. We assume {amountIn_} > 0\\r\\n  /// @param collateralThreshold_ Min allowed collateral amount to be used for new borrow, > 0\\r\\n  /// @return collateralAmountOut Total collateral used to borrow {borrowedAmountOut}\\r\\n  /// @return borrowedAmountOut Total borrowed amount\\r\\n  function openPositionEntryKind1(\\r\\n    ITetuConverter tetuConverter_,\\r\\n    bytes memory entryData_,\\r\\n    address collateralAsset_,\\r\\n    address borrowAsset_,\\r\\n    uint amountIn_,\\r\\n    uint collateralThreshold_\\r\\n  ) internal returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    OpenPositionEntryKind1Local memory vars;\\r\\n    (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\r\\n      entryData_,\\r\\n      collateralAsset_,\\r\\n      amountIn_,\\r\\n      borrowAsset_,\\r\\n      _LOAN_PERIOD_IN_BLOCKS\\r\\n    );\\r\\n\\r\\n    uint len = vars.converters.length;\\r\\n    if (len > 0) {\\r\\n      // we should split amountIn on two amounts with proportions x:y\\r\\n      (, uint x, uint y) = abi.decode(entryData_, (uint, uint, uint));\\r\\n      // calculate prices conversion ratio using price oracle, decimals 18\\r\\n      // i.e. alpha = 1e18 * 75e6 usdc / 25e18 matic = 3e6 usdc/matic\\r\\n      vars.alpha = _getCollateralToBorrowRatio(tetuConverter_, collateralAsset_, borrowAsset_);\\r\\n\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        // the lending platform allows to convert {collateralsRequired[i]} to {amountsToBorrow[i]}\\r\\n        // and give us required proportions in result\\r\\n        // C = C1 + C2, C2 => B2, B2 * alpha = C3, C1/C3 must be equal to x/y\\r\\n        // C1 is collateral amount left untouched (x)\\r\\n        // C2 is collateral amount converted to B2 (y)\\r\\n        // but if lending platform doesn't have enough liquidity\\r\\n        // it reduces {collateralsRequired[i]} and {amountsToBorrow[i]} proportionally to fit the limits\\r\\n        // as result, remaining C1 will be too big after conversion and we need to make another borrow\\r\\n        vars.c3 = vars.alpha * vars.amountsToBorrow[i] / 1e18;\\r\\n        vars.c1 = x * vars.c3 / y;\\r\\n\\r\\n        // we doesn't calculate an intermediate ratio cR/(cR+c1) to avoid lost of precision\\r\\n        if ((vars.collateralsRequired[i] + vars.c1) > amountIn_) {\\r\\n          vars.collateral = vars.collateralsRequired[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\\r\\n          vars.amountToBorrow = vars.amountsToBorrow[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\\r\\n        } else {\\r\\n          vars.collateral = vars.collateralsRequired[i];\\r\\n          vars.amountToBorrow = vars.amountsToBorrow[i];\\r\\n        }\\r\\n\\r\\n        // skip any attempts to borrow zero amount or use too little collateral\\r\\n        if (vars.collateral < collateralThreshold_ || vars.amountToBorrow == 0) {\\r\\n          if (vars.collateralsRequired[i] + vars.c1 + collateralThreshold_ > amountIn_) {\\r\\n            // The lending platform has enough resources to make the borrow but amount of the borrow is too low\\r\\n            // Skip the borrow, leave leftover of collateral untouched\\r\\n            break;\\r\\n          } else {\\r\\n            // The lending platform doesn't have enough resources to make the borrow.\\r\\n            // We should try to make borrow on the next platform (if any)\\r\\n            continue;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        require(\\r\\n          tetuConverter_.borrow(\\r\\n            vars.converters[i],\\r\\n            collateralAsset_,\\r\\n            vars.collateral,\\r\\n            borrowAsset_,\\r\\n            vars.amountToBorrow,\\r\\n            address(this)\\r\\n          ) == vars.amountToBorrow,\\r\\n          StrategyLib2.WRONG_VALUE\\r\\n        );\\r\\n        emit OpenPosition(\\r\\n          vars.converters[i],\\r\\n          collateralAsset_,\\r\\n          vars.collateral,\\r\\n          borrowAsset_,\\r\\n          vars.amountToBorrow,\\r\\n          address(this)\\r\\n        );\\r\\n\\r\\n        borrowedAmountOut += vars.amountToBorrow;\\r\\n        collateralAmountOut += vars.collateral;\\r\\n\\r\\n        // calculate amount to be borrowed in the next converter\\r\\n        vars.c3 = vars.alpha * vars.amountToBorrow / 1e18;\\r\\n        vars.c1 = x * vars.c3 / y;\\r\\n        amountIn_ = (amountIn_ > vars.c1 + vars.collateral)\\r\\n          ? amountIn_ - (vars.c1 + vars.collateral)\\r\\n          : 0;\\r\\n\\r\\n        // protection against dust amounts, see \\\"openPosition.dust\\\", just leave dust amount unused\\r\\n        // we CAN NOT add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\r\\n        // we assume here, that collateralThreshold_ != 0, so check amountIn_ != 0 is not required\\r\\n        if (amountIn_ < collateralThreshold_) break;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (collateralAmountOut, borrowedAmountOut);\\r\\n  }\\r\\n\\r\\n  /// @notice Get ratio18 = collateral / borrow\\r\\n  function _getCollateralToBorrowRatio(\\r\\n    ITetuConverter converter_,\\r\\n    address collateralAsset_,\\r\\n    address borrowAsset_\\r\\n  ) internal view returns (uint){\\r\\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\r\\n    uint priceCollateral = priceOracle.getAssetPrice(collateralAsset_);\\r\\n    uint priceBorrow = priceOracle.getAssetPrice(borrowAsset_);\\r\\n    return 1e18 * priceBorrow * 10 ** IERC20Metadata(collateralAsset_).decimals()\\r\\n    / priceCollateral / 10 ** IERC20Metadata(borrowAsset_).decimals();\\r\\n  }\\r\\n\\r\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\r\\n  ///         It doesn't repay more than the actual amount of the debt, so it can use less amount than {amountToRepay}\\r\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\r\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\r\\n  /// @return repaidAmountOut Amount that was actually repaid\\r\\n  function _closePosition(\\r\\n    ITetuConverter converter_,\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountToRepay\\r\\n  ) internal returns (\\r\\n    uint returnedAssetAmountOut,\\r\\n    uint repaidAmountOut\\r\\n  ) {\\r\\n\\r\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\r\\n\\r\\n    // We shouldn't try to pay more than we actually need to repay\\r\\n    // The leftover will be swapped inside TetuConverter, it's inefficient.\\r\\n    // Let's limit amountToRepay by needToRepay-amount\\r\\n    (uint needToRepay,) = converter_.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\r\\n    uint amountRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\r\\n\\r\\n    return _closePositionExact(converter_, collateralAsset, borrowAsset, amountRepay, balanceBefore);\\r\\n  }\\r\\n\\r\\n  /// @notice Close the given position, pay {amountRepay} exactly and ensure that all amount was accepted,\\r\\n  /// @param amountRepay Amount to repay in terms of {borrowAsset}\\r\\n  /// @param balanceBorrowAsset Current balance of the borrow asset\\r\\n  /// @return collateralOut Amount of collateral received back after repaying\\r\\n  /// @return repaidAmountOut Amount that was actually repaid\\r\\n  function _closePositionExact(\\r\\n    ITetuConverter converter_,\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountRepay,\\r\\n    uint balanceBorrowAsset\\r\\n  ) internal returns (\\r\\n    uint collateralOut,\\r\\n    uint repaidAmountOut\\r\\n  ) {\\r\\n    if (amountRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n      // Make full/partial repayment\\r\\n      IERC20(borrowAsset).safeTransfer(address(converter_), amountRepay);\\r\\n\\r\\n      uint notUsedAmount;\\r\\n      (collateralOut, notUsedAmount,,) = converter_.repay(collateralAsset, borrowAsset, amountRepay, address(this));\\r\\n\\r\\n      emit ClosePosition(collateralAsset, borrowAsset, amountRepay, address(this), collateralOut, notUsedAmount);\\r\\n      uint balanceAfter = IERC20(borrowAsset).balanceOf(address(this));\\r\\n\\r\\n      // we cannot use amountRepay here because AAVE pool adapter is able to send tiny amount back (debt-gap)\\r\\n      repaidAmountOut = balanceBorrowAsset > balanceAfter\\r\\n        ? balanceBorrowAsset - balanceAfter\\r\\n        : 0;\\r\\n      require(notUsedAmount == 0, StrategyLib2.WRONG_VALUE);\\r\\n    }\\r\\n\\r\\n    return (collateralOut, repaidAmountOut);\\r\\n  }\\r\\n\\r\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\r\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\r\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\r\\n  /// @return repaidAmountOut Amount that was actually repaid\\r\\n  function closePosition(\\r\\n    ITetuConverter tetuConverter_,\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountToRepay\\r\\n  ) external returns (\\r\\n    uint returnedAssetAmountOut,\\r\\n    uint repaidAmountOut\\r\\n  ) {\\r\\n    return _closePosition(tetuConverter_, collateralAsset, borrowAsset, amountToRepay);\\r\\n  }\\r\\n//endregion--------------------------------------------------- Borrow and close positions\\r\\n\\r\\n//region--------------------------------------------------- Liquidation\\r\\n\\r\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\r\\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\\r\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\r\\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator\\r\\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\r\\n  function liquidate(\\r\\n    ITetuConverter converter,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    address tokenIn_,\\r\\n    address tokenOut_,\\r\\n    uint amountIn_,\\r\\n    uint slippage_,\\r\\n    uint liquidationThresholdForTokenIn_,\\r\\n    bool skipValidation\\r\\n  ) external returns (\\r\\n    uint spentAmountIn,\\r\\n    uint receivedAmountOut\\r\\n  ) {\\r\\n    return _liquidate(converter, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, liquidationThresholdForTokenIn_, skipValidation);\\r\\n  }\\r\\n\\r\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\r\\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\\r\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\r\\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator (== 0 | amountIn_)\\r\\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\r\\n  function _liquidate(\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    address tokenIn_,\\r\\n    address tokenOut_,\\r\\n    uint amountIn_,\\r\\n    uint slippage_,\\r\\n    uint liquidationThresholdForTokenIn_,\\r\\n    bool skipValidation\\r\\n  ) internal returns (\\r\\n    uint spentAmountIn,\\r\\n    uint receivedAmountOut\\r\\n  ) {\\r\\n    // we check amountIn by threshold, not amountOut\\r\\n    // because {_closePositionsToGetAmount} is implemented in {get plan, make action}-way\\r\\n    // {_closePositionsToGetAmount} can be used with swap by aggregators, where amountOut cannot be calculate\\r\\n    // at the moment of plan building. So, for uniformity, only amountIn is checked everywhere\\r\\n\\r\\n    if (amountIn_ <= liquidationThresholdForTokenIn_) {\\r\\n      return (0, 0);\\r\\n    }\\r\\n\\r\\n    (ITetuLiquidator.PoolData[] memory route,) = liquidator_.buildRoute(tokenIn_, tokenOut_);\\r\\n\\r\\n    require(route.length != 0, AppErrors.NO_LIQUIDATION_ROUTE);\\r\\n\\r\\n    // if the expected value is higher than threshold distribute to destinations\\r\\n    return (amountIn_, _liquidateWithRoute(converter_, route, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, skipValidation));\\r\\n  }\\r\\n\\r\\n  /// @notice Make liquidation using given route and check correctness using TetuConverter's price oracle\\r\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\r\\n  function _liquidateWithRoute(\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator.PoolData[] memory route,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    address tokenIn_,\\r\\n    address tokenOut_,\\r\\n    uint amountIn_,\\r\\n    uint slippage_,\\r\\n    bool skipValidation\\r\\n  ) internal returns (\\r\\n    uint receivedAmountOut\\r\\n  ) {\\r\\n    // we need to approve each time, liquidator address can be changed in controller\\r\\n    AppLib.approveIfNeeded(tokenIn_, amountIn_, address(liquidator_));\\r\\n\\r\\n    uint balanceBefore = IERC20(tokenOut_).balanceOf(address(this));\\r\\n    liquidator_.liquidateWithRoute(route, amountIn_, slippage_);\\r\\n    uint balanceAfter = IERC20(tokenOut_).balanceOf(address(this));\\r\\n\\r\\n    require(balanceAfter > balanceBefore, AppErrors.BALANCE_DECREASE);\\r\\n    receivedAmountOut = balanceAfter - balanceBefore;\\r\\n\\r\\n    // Oracle in TetuConverter \\\"knows\\\" only limited number of the assets\\r\\n    // It may not know prices for reward assets, so for rewards this validation should be skipped to avoid TC-4 error\\r\\n    require(skipValidation || converter_.isConversionValid(tokenIn_, amountIn_, tokenOut_, receivedAmountOut, slippage_), AppErrors.PRICE_IMPACT);\\r\\n    emit Liquidation(tokenIn_, tokenOut_, amountIn_, amountIn_, receivedAmountOut);\\r\\n  }\\r\\n//endregion--------------------------------------------------- Liquidation\\r\\n\\r\\n//region--------------------------------------------------- Recycle rewards\\r\\n\\r\\n  /// @notice Recycle the amounts: liquidate a part of each amount, send the other part to the forwarder.\\r\\n  /// We have two kinds of rewards:\\r\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\r\\n  /// 2) any other rewards\\r\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\r\\n  ///   Compound-part of Rewards-2 can be liquidated\\r\\n  ///   Compound part of Rewards-1 should be just left on the balance\\r\\n  ///   Performance amounts should be liquidate, result underlying should be sent to performance receiver and insurance.\\r\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\r\\n  /// @dev {_recycle} is implemented as separate (inline) function to simplify unit testing\\r\\n  /// @param rewardTokens_ Full list of reward tokens received from tetuConverter and depositor\\r\\n  /// @param rewardAmounts_ Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\r\\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\\r\\n  /// @return amountPerf Performance fee in terms of underlying\\r\\n  function recycle(\\r\\n    IStrategyV3.BaseState storage baseState,\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    address[] memory tokens,\\r\\n    address controller,\\r\\n    mapping(address => uint) storage liquidationThresholds,\\r\\n    address[] memory rewardTokens_,\\r\\n    uint[] memory rewardAmounts_\\r\\n  ) external returns (uint paidDebtToInsurance, uint amountPerf) {\\r\\n    RecycleLocal memory v;\\r\\n    v.asset = baseState.asset;\\r\\n    v.compoundRatio = baseState.compoundRatio;\\r\\n    v.performanceFee = baseState.performanceFee;\\r\\n    v.thresholds = _getLiquidationThresholds(liquidationThresholds, rewardTokens_, rewardTokens_.length);\\r\\n    v.debtToInsuranceCurrent = csbs.debtToInsurance;\\r\\n    v.splitter = baseState.splitter;\\r\\n\\r\\n    (v.amountsToForward, amountPerf, v.debtToInsuranceUpdated) = _recycle(RecycleParams({\\r\\n      converter: csbs.converter,\\r\\n      liquidator: AppLib._getLiquidator(controller),\\r\\n      asset: v.asset,\\r\\n      compoundRatio: v.compoundRatio,\\r\\n      tokens: tokens,\\r\\n      thresholds: v.thresholds,\\r\\n      rewardTokens: rewardTokens_,\\r\\n      rewardAmounts: rewardAmounts_,\\r\\n      performanceFee: v.performanceFee,\\r\\n      debtToInsurance: v.debtToInsuranceCurrent,\\r\\n      splitter: v.splitter,\\r\\n      assetThreshold: AppLib._getLiquidationThreshold(liquidationThresholds[v.asset])\\r\\n    }));\\r\\n\\r\\n    if (v.debtToInsuranceCurrent != v.debtToInsuranceUpdated) {\\r\\n      csbs.debtToInsurance = v.debtToInsuranceUpdated;\\r\\n      emit OnPayDebtToInsurance(v.debtToInsuranceCurrent, v.debtToInsuranceUpdated);\\r\\n      paidDebtToInsurance = v.debtToInsuranceCurrent - v.debtToInsuranceUpdated > 0\\r\\n        ? uint(v.debtToInsuranceCurrent - v.debtToInsuranceUpdated)\\r\\n        : 0;\\r\\n    }\\r\\n\\r\\n    // send performance-part of the underlying to the performance receiver and insurance\\r\\n    (v.toPerf, v.toInsurance) = _sendPerformanceFee(\\r\\n      v.asset,\\r\\n      amountPerf,\\r\\n      v.splitter,\\r\\n      baseState.performanceReceiver,\\r\\n      baseState.performanceFeeRatio\\r\\n    );\\r\\n\\r\\n    // override rewardTokens_, v.amountsToForward by the values actually sent to the forwarder\\r\\n    (rewardTokens_, v.amountsToForward) = _sendTokensToForwarder(controller, v.splitter, rewardTokens_, v.amountsToForward, v.thresholds);\\r\\n\\r\\n    emit Recycle(rewardTokens_, v.amountsToForward, v.toPerf, v.toInsurance);\\r\\n    return (paidDebtToInsurance, amountPerf);\\r\\n  }\\r\\n\\r\\n  /// @notice Send {amount_} of {asset_} to {receiver_} and insurance\\r\\n  /// @param asset_ Underlying asset\\r\\n  /// @param amount_ Amount of underlying asset to be sent to performance+insurance\\r\\n  /// @param receiver_ Performance receiver\\r\\n  /// @param ratio [0..100_000], 100_000 - send full amount to perf, 0 - send full amount to the insurance.\\r\\n  function _sendPerformanceFee(address asset_, uint amount_, address splitter, address receiver_, uint ratio) internal returns (\\r\\n    uint toPerf,\\r\\n    uint toInsurance\\r\\n  ) {\\r\\n    // read inside lib for reduce contract space in the main contract\\r\\n    address insurance = address(ITetuVaultV2(ISplitter(splitter).vault()).insurance());\\r\\n\\r\\n    toPerf = amount_ * ratio / AppLib.DENOMINATOR;\\r\\n    toInsurance = amount_ - toPerf;\\r\\n\\r\\n    if (toPerf != 0) {\\r\\n      IERC20(asset_).safeTransfer(receiver_, toPerf);\\r\\n    }\\r\\n    if (toInsurance != 0) {\\r\\n      IERC20(asset_).safeTransfer(insurance, toInsurance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Send {amounts_} to forwarder, skip amounts < thresholds (see SCB-812)\\r\\n  /// @return tokensOut Tokens sent to the forwarder\\r\\n  /// @return amountsOut Amounts sent to the forwarder\\r\\n  function _sendTokensToForwarder(\\r\\n    address controller_,\\r\\n    address splitter_,\\r\\n    address[] memory tokens_,\\r\\n    uint[] memory amounts_,\\r\\n    uint[] memory thresholds_\\r\\n  ) internal returns (\\r\\n    address[] memory tokensOut,\\r\\n    uint[] memory amountsOut\\r\\n  ) {\\r\\n    uint len = tokens_.length;\\r\\n    IForwarder forwarder = IForwarder(IController(controller_).forwarder());\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (thresholds_[i] > amounts_[i]) {\\r\\n        amounts_[i] = 0; // it will be excluded in filterZeroAmounts() below\\r\\n      } else {\\r\\n        AppLib.approveIfNeeded(tokens_[i], amounts_[i], address(forwarder));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokens_, amounts_);\\r\\n    if (tokensOut.length != 0) {\\r\\n      forwarder.registerIncome(tokensOut, amountsOut, ISplitter(splitter_).vault(), true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Recycle the amounts: split each amount on tree parts: performance+insurance (P), forwarder (F), compound (C)\\r\\n  ///         Liquidate P+C, send F to the forwarder.\\r\\n  /// We have two kinds of rewards:\\r\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\r\\n  /// 2) any other rewards\\r\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\r\\n  ///   Compound-part of Rewards-2 can be liquidated\\r\\n  ///   Compound part of Rewards-1 should be just left on the balance\\r\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\r\\n  ///   Performance amounts are liquidated, result amount of underlying is returned in {amountToPerformanceAndInsurance}\\r\\n  /// @return amountsToForward Amounts of {rewardTokens} to be sent to forwarder, zero amounts are allowed here\\r\\n  /// @return amountToPerformanceAndInsurance Amount of underlying to be sent to performance receiver and insurance\\r\\n  /// @return debtToInsuranceOut Remain debt to the insurance [in underlying]\\r\\n  function _recycle(RecycleParams memory p) internal returns (\\r\\n    uint[] memory amountsToForward,\\r\\n    uint amountToPerformanceAndInsurance,\\r\\n    int debtToInsuranceOut\\r\\n  ) {\\r\\n    RecycleLocalParams memory v;\\r\\n\\r\\n    v.len = p.rewardTokens.length;\\r\\n    require(v.len == p.rewardAmounts.length, AppErrors.WRONG_LENGTHS);\\r\\n\\r\\n    amountsToForward = new uint[](v.len);\\r\\n\\r\\n    // rewardAmounts => P + F + C, where P - performance + insurance, F - forwarder, C - compound\\r\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\r\\n      // if we have a debt-to-insurance we should firstly cover the debt using all available rewards\\r\\n      // and only then we can use leftovers of the rewards for other needs\\r\\n      if (p.debtToInsurance > int(p.assetThreshold)) {\\r\\n        (p.rewardAmounts[i], p.debtToInsurance) = _coverDebtToInsuranceFromRewards(p, i, uint(p.debtToInsurance));\\r\\n        if (p.rewardAmounts[i] < p.thresholds[i]) continue;\\r\\n      }\\r\\n\\r\\n      v.amountFC = p.rewardAmounts[i] * (COMPOUND_DENOMINATOR - p.performanceFee) / COMPOUND_DENOMINATOR;\\r\\n      v.amountC = v.amountFC * p.compoundRatio / COMPOUND_DENOMINATOR;\\r\\n      v.amountP = p.rewardAmounts[i] - v.amountFC;\\r\\n      v.rewardToken = p.rewardTokens[i];\\r\\n      v.amountCP = v.amountC + v.amountP;\\r\\n\\r\\n      if (v.amountCP > 0) {\\r\\n        if (AppLib.getAssetIndex(p.tokens, v.rewardToken) != type(uint).max) {\\r\\n          if (v.rewardToken == p.asset) {\\r\\n            // This is underlying, liquidation of compound part is not allowed; just keep on the balance, should be handled later\\r\\n            amountToPerformanceAndInsurance += v.amountP;\\r\\n          } else {\\r\\n            // This is secondary asset, Liquidation of compound part is not allowed, we should liquidate performance part only\\r\\n            // If the performance amount is too small, liquidation will not happen and we will just keep that dust tokens on balance forever\\r\\n            (, v.receivedAmountOut) = _liquidate(\\r\\n              p.converter,\\r\\n              p.liquidator,\\r\\n              v.rewardToken,\\r\\n              p.asset,\\r\\n              v.amountP,\\r\\n              _REWARD_LIQUIDATION_SLIPPAGE,\\r\\n              p.thresholds[i],\\r\\n              false // use conversion validation for these rewards\\r\\n            );\\r\\n            amountToPerformanceAndInsurance += v.receivedAmountOut;\\r\\n          }\\r\\n        } else {\\r\\n          // If amount is too small, the liquidation won't be allowed and we will just keep that dust tokens on balance forever\\r\\n          // The asset is not in the list of depositor's assets, its amount is big enough and should be liquidated\\r\\n          // We assume here, that {token} cannot be equal to {_asset}\\r\\n          // because the {_asset} is always included to the list of depositor's assets\\r\\n          (, v.receivedAmountOut) = _liquidate(\\r\\n            p.converter,\\r\\n            p.liquidator,\\r\\n            v.rewardToken,\\r\\n            p.asset,\\r\\n            v.amountCP,\\r\\n            _REWARD_LIQUIDATION_SLIPPAGE,\\r\\n            p.thresholds[i],\\r\\n            true // skip conversion validation for rewards because we can have arbitrary assets here\\r\\n          );\\r\\n          amountToPerformanceAndInsurance += v.receivedAmountOut * (p.rewardAmounts[i] - v.amountFC) / v.amountCP;\\r\\n        }\\r\\n      }\\r\\n      amountsToForward[i] = v.amountFC - v.amountC;\\r\\n    }\\r\\n\\r\\n    return (amountsToForward, amountToPerformanceAndInsurance, p.debtToInsurance);\\r\\n  }\\r\\n\\r\\n  /// @notice Try to cover {p.debtToInsurance} using available rewards of {p.rewardTokens[index]}\\r\\n  /// @param index Index of the reward token in {p.rewardTokens}\\r\\n  /// @param debtAmount Debt to insurance that should be covered by the reward tokens\\r\\n  /// @return rewardsLeftovers Amount of unused reward tokens (it can be used for other needs)\\r\\n  /// @return debtToInsuranceOut New value of the debt to the insurance\\r\\n  function _coverDebtToInsuranceFromRewards(RecycleParams memory p, uint index, uint debtAmount) internal returns (\\r\\n    uint rewardsLeftovers,\\r\\n    int debtToInsuranceOut\\r\\n  ) {\\r\\n    uint spentAmount;\\r\\n    uint amountToSend;\\r\\n\\r\\n    if (p.asset == p.rewardTokens[index]) {\\r\\n      // assume p.debtToInsurance > 0 here\\r\\n      spentAmount = Math.min(debtAmount, p.rewardAmounts[index]);\\r\\n      amountToSend = spentAmount;\\r\\n    } else {\\r\\n      // estimate amount of underlying that we can receive for the available amount of the reward tokens\\r\\n      uint amountAsset = p.rewardAmounts[index] > p.assetThreshold\\r\\n        ? p.liquidator.getPrice(p.rewardTokens[index], p.asset, p.rewardAmounts[index])\\r\\n        : 0;\\r\\n      uint amountIn;\\r\\n\\r\\n      if (amountAsset > debtAmount + p.assetThreshold) {\\r\\n        // pay a part of the rewards to cover the debt completely\\r\\n        amountIn = p.rewardAmounts[index] * debtAmount / amountAsset;\\r\\n      } else {\\r\\n        // pay all available rewards to cover a part of the debt\\r\\n        amountIn = p.rewardAmounts[index];\\r\\n      }\\r\\n\\r\\n      (spentAmount, amountToSend) = _liquidate(\\r\\n        p.converter,\\r\\n        p.liquidator,\\r\\n        p.rewardTokens[index],\\r\\n        p.asset,\\r\\n        amountIn,\\r\\n        _REWARD_LIQUIDATION_SLIPPAGE,\\r\\n        p.thresholds[index],\\r\\n        true // skip conversion validation for rewards because we can have arbitrary assets here\\r\\n      );\\r\\n    }\\r\\n\\r\\n    IERC20(p.asset).safeTransfer(address(ITetuVaultV2(ISplitter(p.splitter).vault()).insurance()), amountToSend);\\r\\n\\r\\n    rewardsLeftovers = AppLib.sub0(p.rewardAmounts[index], spentAmount);\\r\\n    debtToInsuranceOut = int(debtAmount) - int(amountToSend);\\r\\n\\r\\n    emit OnCoverDebtToInsurance(p.rewardTokens[index], spentAmount, debtAmount, debtToInsuranceOut);\\r\\n  }\\r\\n//endregion----------------------------------------------- Recycle rewards\\r\\n\\r\\n//region--------------------------------------------------- Before deposit\\r\\n  /// @notice Default implementation of ConverterStrategyBase.beforeDeposit\\r\\n  /// @param amount_ Amount of underlying to be deposited\\r\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\r\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\r\\n  /// @param weights_ Depositor pool weights\\r\\n  /// @param totalWeight_ Sum of {weights_}\\r\\n  function beforeDeposit(\\r\\n    ITetuConverter converter_,\\r\\n    uint amount_,\\r\\n    address[] memory tokens_,\\r\\n    uint indexAsset_,\\r\\n    uint[] memory weights_,\\r\\n    uint totalWeight_,\\r\\n    mapping(address => uint) storage liquidationThresholds\\r\\n  ) external returns (\\r\\n    uint[] memory tokenAmounts\\r\\n  ) {\\r\\n    // temporary save collateral to tokensAmounts\\r\\n    tokenAmounts = _getCollaterals(amount_, tokens_, weights_, totalWeight_, indexAsset_, AppLib._getPriceOracle(converter_));\\r\\n\\r\\n    // make borrow and save amounts of tokens available for deposit to tokenAmounts, zero result amounts are possible\\r\\n    tokenAmounts = _getTokenAmounts(\\r\\n      converter_,\\r\\n      tokens_,\\r\\n      indexAsset_,\\r\\n      tokenAmounts,\\r\\n      AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[indexAsset_]])\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice For each {token_} calculate a part of {amount_} to be used as collateral according to the weights.\\r\\n  ///         I.e. we have 300 USDC, we need to split it on 100 USDC, 100 USDT, 100 DAI\\r\\n  ///         USDC is main asset, USDT and DAI should be borrowed. We check amounts of USDT and DAI on the balance\\r\\n  ///         and return collaterals reduced on that amounts. For main asset, we return full amount always (100 USDC).\\r\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\r\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\r\\n  /// @return tokenAmountsOut Length of the array is equal to the length of {tokens_}\\r\\n  function _getCollaterals(\\r\\n    uint amount_,\\r\\n    address[] memory tokens_,\\r\\n    uint[] memory weights_,\\r\\n    uint totalWeight_,\\r\\n    uint indexAsset_,\\r\\n    IPriceOracle priceOracle\\r\\n  ) internal view returns (\\r\\n    uint[] memory tokenAmountsOut\\r\\n  ) {\\r\\n    uint len = tokens_.length;\\r\\n    tokenAmountsOut = new uint[](len);\\r\\n\\r\\n    // get token prices and decimals\\r\\n    (uint[] memory prices, uint[] memory decs) = AppLib._getPricesAndDecs(priceOracle, tokens_, len);\\r\\n\\r\\n    // split the amount on tokens proportionally to the weights\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      uint amountAssetForToken = amount_ * weights_[i] / totalWeight_;\\r\\n\\r\\n      if (i == indexAsset_) {\\r\\n        tokenAmountsOut[i] = amountAssetForToken;\\r\\n      } else {\\r\\n        // if we have some tokens on balance then we need to use only a part of the collateral\\r\\n        uint tokenAmountToBeBorrowed = amountAssetForToken\\r\\n          * prices[indexAsset_]\\r\\n          * decs[i]\\r\\n          / prices[i]\\r\\n          / decs[indexAsset_];\\r\\n\\r\\n        uint tokenBalance = IERC20(tokens_[i]).balanceOf(address(this));\\r\\n        if (tokenBalance < tokenAmountToBeBorrowed) {\\r\\n          tokenAmountsOut[i] = amountAssetForToken * (tokenAmountToBeBorrowed - tokenBalance) / tokenAmountToBeBorrowed;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Make borrow and return amounts of {tokens} available to deposit\\r\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\r\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\r\\n  /// @param collaterals_ Amounts of main asset that can be used as collateral to borrow {tokens_}\\r\\n  /// @param thresholdAsset_ Value of liquidation threshold for the main (collateral) asset\\r\\n  /// @return tokenAmountsOut Amounts of {tokens}  available to deposit\\r\\n  function _getTokenAmounts(\\r\\n    ITetuConverter converter_,\\r\\n    address[] memory tokens_,\\r\\n    uint indexAsset_,\\r\\n    uint[] memory collaterals_,\\r\\n    uint thresholdAsset_\\r\\n  ) internal returns (\\r\\n    uint[] memory tokenAmountsOut\\r\\n  ) {\\r\\n    // content of tokenAmounts will be modified in place\\r\\n    uint len = tokens_.length;\\r\\n    tokenAmountsOut = new uint[](len);\\r\\n    address asset = tokens_[indexAsset_];\\r\\n\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i != indexAsset_) {\\r\\n        address token = tokens_[i];\\r\\n        if (collaterals_[i] != 0) {\\r\\n          AppLib.approveIfNeeded(asset, collaterals_[i], address(converter_));\\r\\n          _openPosition(\\r\\n            converter_,\\r\\n            \\\"\\\", // entry kind = 0: fixed collateral amount, max possible borrow amount\\r\\n            asset,\\r\\n            token,\\r\\n            collaterals_[i],\\r\\n            thresholdAsset_\\r\\n          );\\r\\n\\r\\n          // zero borrowed amount is possible here (conversion is not available)\\r\\n          // if it's not suitable for depositor, the depositor should check zero amount in other places\\r\\n        }\\r\\n        tokenAmountsOut[i] = IERC20(token).balanceOf(address(this));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    tokenAmountsOut[indexAsset_] = Math.min(\\r\\n      collaterals_[indexAsset_],\\r\\n      IERC20(asset).balanceOf(address(this))\\r\\n    );\\r\\n  }\\r\\n//endregion--------------------------------------------------- Before deposit\\r\\n\\r\\n//region--------------------------------------------------- Make requested amount\\r\\n\\r\\n  /// @notice Convert {amountsToConvert_} to the given {asset}\\r\\n  ///         Swap leftovers (if any) to the given asset.\\r\\n  ///         If result amount is less than expected, try to close any other available debts (1 repay per block only)\\r\\n  /// @param tokens_ Results of _depositorPoolAssets() call (list of depositor's asset in proper order)\\r\\n  /// @param indexAsset_ Index of the given {asset} in {tokens}\\r\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\r\\n  ///                         Max uint means attempt to withdraw all possible amount.\\r\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\r\\n  function makeRequestedAmount(\\r\\n    address[] memory tokens_,\\r\\n    uint indexAsset_,\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    uint requestedBalance,\\r\\n    mapping(address => uint) storage liquidationThresholds_\\r\\n  ) external returns (uint expectedBalance) {\\r\\n    DataSetLocal memory v = DataSetLocal({\\r\\n      len: tokens_.length,\\r\\n      converter: converter_,\\r\\n      tokens: tokens_,\\r\\n      indexAsset: indexAsset_,\\r\\n      liquidator: liquidator_\\r\\n    });\\r\\n    uint[] memory _liquidationThresholds = _getLiquidationThresholds(liquidationThresholds_, v.tokens, v.len);\\r\\n    expectedBalance = _closePositionsToGetAmount(v, _liquidationThresholds, requestedBalance);\\r\\n  }\\r\\n  //endregion-------------------------------------------- Make requested amount\\r\\n\\r\\n//region ------------------------------------------------ Close position\\r\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\r\\n  /// @dev We assume here that this function is called before closing any positions in the current block\\r\\n  /// @param liquidationThresholds Min allowed amounts-out for liquidations\\r\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\r\\n  ///                         Max uint means attempt to withdraw all possible amount.\\r\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\r\\n  function closePositionsToGetAmount(\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator liquidator,\\r\\n    uint indexAsset,\\r\\n    mapping(address => uint) storage liquidationThresholds,\\r\\n    uint requestedBalance,\\r\\n    address[] memory tokens\\r\\n  ) external returns (\\r\\n    uint expectedBalance\\r\\n  ) {\\r\\n    uint len = tokens.length;\\r\\n    return _closePositionsToGetAmount(\\r\\n      DataSetLocal({\\r\\n        len: len,\\r\\n        converter: converter_,\\r\\n        tokens: tokens,\\r\\n        indexAsset: indexAsset,\\r\\n        liquidator: liquidator\\r\\n      }),\\r\\n      _getLiquidationThresholds(liquidationThresholds, tokens, len),\\r\\n      requestedBalance\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\r\\n  /// @dev Implements {IterationPlanLib.PLAN_SWAP_REPAY} only\\r\\n  ///      Note: AAVE3 allows to make two repays in a single block, see Aave3SingleBlockTest in TetuConverter\\r\\n  ///      but it doesn't allow to make borrow and repay in a single block.\\r\\n  /// @param liquidationThresholds_ Min allowed amounts-out for liquidations\\r\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\r\\n  ///                         Max uint means attempt to withdraw all possible amount.\\r\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\r\\n  function _closePositionsToGetAmount(\\r\\n    DataSetLocal memory d_,\\r\\n    uint[] memory liquidationThresholds_,\\r\\n    uint requestedBalance\\r\\n  ) internal returns (\\r\\n    uint expectedBalance\\r\\n  ) {\\r\\n    if (requestedBalance != 0) {\\r\\n      //let's get a bit more amount on balance to prevent situation \\\"zero balance, not-zero debts\\\"\\r\\n      requestedBalance = applyRequestedBalanceGap(requestedBalance);\\r\\n      CloseDebtsForRequiredAmountLocal memory v;\\r\\n      v.asset = d_.tokens[d_.indexAsset];\\r\\n\\r\\n      // v.planKind = IterationPlanLib.PLAN_SWAP_REPAY; // PLAN_SWAP_REPAY == 0, so we don't need this line\\r\\n      v.balanceAdditions = new uint[](d_.len);\\r\\n      expectedBalance = IERC20(v.asset).balanceOf(address(this));\\r\\n\\r\\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(d_.converter), d_.tokens, d_.len);\\r\\n\\r\\n      for (uint i; i < d_.len; i = AppLib.uncheckedInc(i)) {\\r\\n        if (i == d_.indexAsset) continue;\\r\\n\\r\\n        v.balanceAsset = IERC20(v.asset).balanceOf(address(this));\\r\\n        v.balanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\\r\\n\\r\\n        // Make one or several iterations. Do single swap and single repaying (both are optional) on each iteration.\\r\\n        // Calculate expectedAmount of received underlying. Swap leftovers at the end even if requestedAmount is 0 at that moment.\\r\\n        do {\\r\\n          // generate iteration plan: [swap], [repay]\\r\\n          (v.idxToSwap1, v.amountToSwap, v.idxToRepay1) = IterationPlanLib.buildIterationPlan(\\r\\n            [address(d_.converter), address(d_.liquidator)],\\r\\n            d_.tokens,\\r\\n            liquidationThresholds_,\\r\\n            v.prices,\\r\\n            v.decs,\\r\\n            v.balanceAdditions,\\r\\n            [0, IterationPlanLib.PLAN_SWAP_REPAY, 0, requestedBalance, d_.indexAsset, i, 0]\\r\\n          );\\r\\n          if (v.idxToSwap1 == 0 && v.idxToRepay1 == 0) break;\\r\\n\\r\\n          // make swap if necessary\\r\\n          uint spentAmountIn;\\r\\n          if (v.idxToSwap1 != 0) {\\r\\n            uint indexIn = v.idxToSwap1 - 1;\\r\\n            uint indexOut = indexIn == d_.indexAsset ? i : d_.indexAsset;\\r\\n            (spentAmountIn,) = _liquidate(\\r\\n              d_.converter,\\r\\n              d_.liquidator,\\r\\n              d_.tokens[indexIn],\\r\\n              d_.tokens[indexOut],\\r\\n              v.amountToSwap,\\r\\n              _ASSET_LIQUIDATION_SLIPPAGE,\\r\\n              liquidationThresholds_[indexIn],\\r\\n              false\\r\\n            );\\r\\n\\r\\n            if (indexIn == d_.indexAsset) {\\r\\n              expectedBalance = AppLib.sub0(expectedBalance, spentAmountIn);\\r\\n            } else if (indexOut == d_.indexAsset) {\\r\\n              expectedBalance += spentAmountIn * v.prices[i] * v.decs[d_.indexAsset] / v.prices[d_.indexAsset] / v.decs[i];\\r\\n\\r\\n              // if we already received enough amount on balance, we can avoid additional actions\\r\\n              // to avoid high gas consumption in the cases like SCB-787\\r\\n              uint balanceAsset = IERC20(v.asset).balanceOf(address(this));\\r\\n              if (balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) {\\r\\n                v.balanceAsset = balanceAsset;\\r\\n                break;\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n\\r\\n          // repay a debt if necessary\\r\\n          if (v.idxToRepay1 != 0) {\\r\\n            uint indexBorrow = v.idxToRepay1 - 1;\\r\\n            uint indexCollateral = indexBorrow == d_.indexAsset ? i : d_.indexAsset;\\r\\n            uint amountToRepay = IERC20(d_.tokens[indexBorrow]).balanceOf(address(this));\\r\\n\\r\\n            (uint expectedAmountOut, uint repaidAmountOut, uint amountSendToRepay) = _repayDebt(\\r\\n              d_.converter,\\r\\n              d_.tokens[indexCollateral],\\r\\n              d_.tokens[indexBorrow],\\r\\n              amountToRepay\\r\\n            );\\r\\n\\r\\n            if (indexBorrow == d_.indexAsset) {\\r\\n              expectedBalance = expectedBalance > amountSendToRepay\\r\\n                ? expectedBalance - amountSendToRepay\\r\\n                : 0;\\r\\n            } else if (indexCollateral == d_.indexAsset) {\\r\\n              require(expectedAmountOut >= spentAmountIn, AppErrors.BALANCE_DECREASE);\\r\\n              if (repaidAmountOut < amountSendToRepay) {\\r\\n                // SCB-779: expectedAmountOut was estimated for amountToRepay, but we have paid repaidAmountOut only\\r\\n                expectedBalance += expectedAmountOut * repaidAmountOut / amountSendToRepay;\\r\\n              } else {\\r\\n                expectedBalance += expectedAmountOut;\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n\\r\\n          // update balances\\r\\n          v.newBalanceAsset = IERC20(v.asset).balanceOf(address(this));\\r\\n          v.newBalanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\\r\\n\\r\\n          v.exitLoop = (v.balanceAsset == v.newBalanceAsset && v.balanceToken == v.newBalanceToken);\\r\\n          v.balanceAsset = v.newBalanceAsset;\\r\\n          v.balanceToken = v.newBalanceToken;\\r\\n        } while (!v.exitLoop);\\r\\n\\r\\n        if (v.balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) break;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return expectedBalance;\\r\\n  }\\r\\n//endregion ------------------------------------------------ Close position\\r\\n\\r\\n//region ------------------------------------------------ Repay debts\\r\\n  /// @notice Repay {amountIn} and get collateral in return, calculate expected amount\\r\\n  ///         Take into account possible debt-gap and the fact that the amount of debt may be less than {amountIn}\\r\\n  /// @param amountToRepay Max available amount of borrow asset that we can repay\\r\\n  /// @return expectedAmountOut Estimated amount of main asset that should be added to balance = collateral - {toSell}\\r\\n  /// @return repaidAmountOut Actually paid amount\\r\\n  /// @return amountSendToRepay Amount send to repay\\r\\n  function _repayDebt(\\r\\n    ITetuConverter converter,\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountToRepay\\r\\n  ) internal returns (\\r\\n    uint expectedAmountOut,\\r\\n    uint repaidAmountOut,\\r\\n    uint amountSendToRepay\\r\\n  ) {\\r\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\r\\n\\r\\n    // get amount of debt with debt-gap\\r\\n    (uint needToRepay,) = converter.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\r\\n    amountSendToRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\r\\n\\r\\n    // get expected amount without debt-gap\\r\\n    uint swappedAmountOut;\\r\\n    (expectedAmountOut, swappedAmountOut) = converter.quoteRepay(address(this), collateralAsset, borrowAsset, amountSendToRepay);\\r\\n\\r\\n    if (expectedAmountOut > swappedAmountOut) {\\r\\n      // SCB-789 Following situation is possible\\r\\n      //    needToRepay = 100, needToRepayExact = 90 (debt gap is 10)\\r\\n      //    1) amountRepay = 80\\r\\n      //       expectedAmountOut is calculated for 80, no problems\\r\\n      //    2) amountRepay = 99,\\r\\n      //       expectedAmountOut is calculated for 90 + 9 (90 - repay, 9 - direct swap)\\r\\n      //       expectedAmountOut must be reduced on 9 here (!)\\r\\n      expectedAmountOut -= swappedAmountOut;\\r\\n    }\\r\\n\\r\\n    // close the debt\\r\\n    (, repaidAmountOut) = _closePositionExact(converter, collateralAsset, borrowAsset, amountSendToRepay, balanceBefore);\\r\\n\\r\\n    return (expectedAmountOut, repaidAmountOut, amountSendToRepay);\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Repay debts\\r\\n\\r\\n//region------------------------------------------------ Other helpers\\r\\n\\r\\n  /// @return liquidationThresholdsOut Liquidation thresholds of the {tokens_}, result values > 0\\r\\n  function _getLiquidationThresholds(\\r\\n    mapping(address => uint) storage liquidationThresholds,\\r\\n    address[] memory tokens_,\\r\\n    uint len\\r\\n  ) internal view returns (\\r\\n    uint[] memory liquidationThresholdsOut\\r\\n  ) {\\r\\n    liquidationThresholdsOut = new uint[](len);\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      liquidationThresholdsOut[i] = AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[i]]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function applyRequestedBalanceGap(uint amount_) internal pure returns (uint) {\\r\\n    return amount_ == type(uint).max\\r\\n      ? amount_\\r\\n      : amount_ * (COMPOUND_DENOMINATOR + REQUESTED_BALANCE_GAP) / COMPOUND_DENOMINATOR;\\r\\n  }\\r\\n//endregion--------------------------------------------- Other helpers\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x8dd1596a48aeabdaef121d613050c7731576aece3782a3c3042b33be3be7a13e\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/pair/PairBasedStrategyLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\r\\nimport \\\"../../interfaces/IPoolProportionsProvider.sol\\\";\\r\\nimport \\\"../../libs/BorrowLib.sol\\\";\\r\\n\\r\\n/// @notice Library for the UniV3-like strategies with two tokens in the pool\\r\\n/// @dev The library contains quoteWithdrawStep/withdrawStep-related logic\\r\\nlibrary PairBasedStrategyLib {\\r\\n  //region ------------------------------------------------ Constants\\r\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\r\\n  /// @notice In all functions below array {token} contains underlying at the first position\\r\\n  uint internal constant IDX_ASSET = 0;\\r\\n  /// @notice In all functions below array {token} contains not-underlying at the second position\\r\\n  uint internal constant IDX_TOKEN = 1;\\r\\n\\r\\n  uint internal constant IDX_SWAP_1 = 0;\\r\\n  uint internal constant IDX_REPAY_1 = 1;\\r\\n  uint internal constant IDX_SWAP_2 = 2;\\r\\n  uint internal constant IDX_REPAY_2 = 3;\\r\\n\\r\\n  /// @notice A gap to reduce AmountToSwap calculated inside quoteWithdrawByAgg, [0...100_000]\\r\\n  uint public constant GAP_AMOUNT_TO_SWAP = 100;\\r\\n\\r\\n  /// @notice Enter to the pool at the end of withdrawByAggStep\\r\\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED = 1;\\r\\n  /// @notice Enter to the pool at the end of withdrawByAggStep only if full withdrawing has been completed\\r\\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED = 2;\\r\\n\\r\\n  /// @notice Fuse thresholds are set as array: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\r\\n  ///         If the price falls below LOWER_LIMIT_ON the fuse is turned ON\\r\\n  ///         When the prices raises back and reaches LOWER_LIMIT_OFF, the fuse is turned OFF\\r\\n  ///         In the same way, if the price raises above UPPER_LIMIT_ON the fuse is turned ON\\r\\n  ///         When the prices falls back and reaches UPPER_LIMIT_OFF, the fuse is turned OFF\\r\\n  ///\\r\\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\\r\\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\\r\\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\\r\\n  uint public constant FUSE_IDX_LOWER_LIMIT_ON = 0;\\r\\n  uint public constant FUSE_IDX_LOWER_LIMIT_OFF = 1;\\r\\n  uint public constant FUSE_IDX_UPPER_LIMIT_ON = 2;\\r\\n  uint public constant FUSE_IDX_UPPER_LIMIT_OFF = 3;\\r\\n\\r\\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_A = 0;\\r\\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_B = 1;\\r\\n  uint public constant IDX_ADDR_DEFAULT_STATE_POOL = 2;\\r\\n  uint public constant IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER = 3;\\r\\n\\r\\n  uint public constant IDX_TICK_DEFAULT_STATE_TICK_SPACING = 0;\\r\\n  uint public constant IDX_TICK_DEFAULT_STATE_LOWER_TICK = 1;\\r\\n  uint public constant IDX_TICK_DEFAULT_STATE_UPPER_TICK = 2;\\r\\n  uint public constant IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE = 3;\\r\\n\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY = 0;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_FUSE_STATUS = 1;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_0 = 2;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE = 3;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_0 = 4;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_1 = 5;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_2 = 6;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_3 = 7;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_1 = 8;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_2 = 9;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_3 = 10;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_4 = 11;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP = 12;\\r\\n\\r\\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL = 0;\\r\\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS = 1;\\r\\n\\r\\n  /// @notice 1inch router V5 (Polygon, Base)\\r\\n  address internal constant ONEINCH = 0x1111111254EEB25477B68fb85Ed929f73A960582;\\r\\n  /// @notice OpenOceanExchangeProxy (Polygon and many other chains)\\r\\n  /// @dev See https://docs.openocean.finance/dev/contracts-of-chains\\r\\n  address internal constant OPENOCEAN = 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64;\\r\\n  /// @notice OpenOceanExchangeProxy (zkEVM)\\r\\n  /// @dev See https://docs.openocean.finance/dev/contracts-of-chains\\r\\n  address internal constant OPENOCEAN_ZKEVM = 0x6dd434082EAB5Cd134B33719ec1FF05fE985B97b;\\r\\n\\r\\n  string public constant UNKNOWN_SWAP_ROUTER = \\\"PBS-1 Unknown router\\\";\\r\\n  string public constant INCORRECT_TICK_RANGE = \\\"PBS-3 Incorrect tickRange\\\";\\r\\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \\\"PBS-4 Incorrect rebalanceTickRange\\\";\\r\\n  string public constant INCORRECT_ASSET = \\\"PBS-5 Incorrect asset\\\";\\r\\n\\r\\n  //endregion ------------------------------------------------ Constants\\r\\n\\r\\n  //region ------------------------------------------------ Data types\\r\\n  /// @notice The fuse is triggered when the price rises above or falls below the limit 1.\\r\\n  ///         If the fuse was triggered, all assets are withdrawn from the pool on the strategy balance.\\r\\n  ///         Then all debts should be closed and all assets should be converted to underlying.\\r\\n  ///         The fuse is turned off automatically when the price falls below or rises above the limit 2\\r\\n  ///         and all assets are deposited back to the pool.\\r\\n  enum FuseStatus {\\r\\n    /// @notice Fuse is not used at all\\r\\n    FUSE_DISABLED_0,\\r\\n    /// @notice Fuse is not triggered, assets are deposited to the pool\\r\\n    FUSE_OFF_1,\\r\\n    /// @notice Fuse was triggered by lower limit, assets was withdrawn from the pool, but active debts can exist\\r\\n    FUSE_ON_LOWER_LIMIT_2,\\r\\n    /// @notice Fuse was triggered by upper limit, assets was withdrawn from the pool, but active debts can exist\\r\\n    FUSE_ON_UPPER_LIMIT_3\\r\\n  }\\r\\n\\r\\n  struct SwapByAggParams {\\r\\n    bool useLiquidator;\\r\\n    address tokenToSwap;\\r\\n    /// @notice Aggregator to make swap\\r\\n    ///         It is 0 if useLiquidator is true\\r\\n    ///         It can be equal to address of liquidator if we use liquidator as aggregator (in tests)\\r\\n    address aggregator;\\r\\n    uint amountToSwap;\\r\\n    /// @notice Swap-data prepared off-chain (route, amounts, etc). 0 - use liquidator to make swap\\r\\n    bytes swapData;\\r\\n  }\\r\\n\\r\\n  struct GetAmountToRepay2Local {\\r\\n    uint x;\\r\\n    uint y;\\r\\n    uint c0;\\r\\n    uint b0;\\r\\n    uint alpha;\\r\\n    int b;\\r\\n  }\\r\\n\\r\\n  struct FuseStateParams {\\r\\n    FuseStatus status;\\r\\n    /// @notice Price thresholds [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\r\\n    /// @dev see PairBasedStrategyLib.FUSE_IDX_XXX\\r\\n    uint[4] thresholds;\\r\\n\\r\\n    /// @notice reserve space for future needs\\r\\n    uint[4] __gap;\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Data types\\r\\n\\r\\n  //region ------------------------------------------------ Events\\r\\n  event FuseStatusChanged(uint fuseStatus);\\r\\n  event NewFuseThresholds(uint[4] newFuseThresholds);\\r\\n  event SwapByAgg(\\r\\n    uint amountToSwap,\\r\\n    uint amountIn,\\r\\n    uint amountOut,\\r\\n    uint expectedAmountOut,\\r\\n    address aggregator,\\r\\n    address assetIn,\\r\\n    address assetOut\\r\\n  );\\r\\n  //endregion ------------------------------------------------ Events\\r\\n\\r\\n  //region ------------------------------------------------ External withdraw functions\\r\\n\\r\\n  /// @notice Get info for the swap that will be made on the next call of {withdrawStep}\\r\\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\\r\\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\\r\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\\r\\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\\r\\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\\r\\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\r\\n  ///                            Value type(uint).max means that the proportions should be read from the pool.\\r\\n  ///     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\\r\\n  /// @param amountsFromPool Amounts of {tokens} that will be received from the pool before calling withdraw\\r\\n  /// @return tokenToSwap Address of the token that will be swapped on the next swap. 0 - no swap\\r\\n  /// @return amountToSwap Amount that will be swapped on the next swap. 0 - no swap\\r\\n  ///                      This amount is NOT reduced on {GAP_AMOUNT_TO_SWAP}, it should be reduced after the call if necessary.\\r\\n  function quoteWithdrawStep(\\r\\n    address[2] memory converterLiquidator_,\\r\\n    address[] memory tokens,\\r\\n    uint[] memory liquidationThresholds,\\r\\n    uint[] memory amountsFromPool,\\r\\n    uint planKind,\\r\\n    uint[2] memory entryDataValues\\r\\n  ) external returns (\\r\\n    address tokenToSwap,\\r\\n    uint amountToSwap\\r\\n  ){\\r\\n    (uint[] memory prices,\\r\\n      uint[] memory decs\\r\\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\\r\\n      converter: ITetuConverter(converterLiquidator_[0]),\\r\\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\\r\\n      tokens: tokens,\\r\\n      liquidationThresholds: liquidationThresholds,\\r\\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\\r\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\r\\n        : entryDataValues[0],\\r\\n      prices: prices,\\r\\n      decs: decs,\\r\\n      balanceAdditions: amountsFromPool,\\r\\n      planKind: planKind,\\r\\n      usePoolProportions: entryDataValues[0] == type(uint).max,\\r\\n      entryDataParam: entryDataValues[1]\\r\\n    });\\r\\n    return _quoteWithdrawStep(p);\\r\\n  }\\r\\n\\r\\n  /// @notice Make withdraw step with 0 or 1 swap only. The step can make one of the following actions:\\r\\n  ///         1) repay direct debt 2) repay reverse debt 3) final swap leftovers of not-underlying asset\\r\\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\\r\\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\\r\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\\r\\n  /// @param tokenToSwap_ Address of the token that will be swapped on the next swap. 0 - no swap\\r\\n  /// @param amountToSwap_ Amount that will be swapped on the next swap. 0 - no swap\\r\\n  /// @param aggregator_ Aggregator that should be used for the next swap. 0 - no swap\\r\\n  /// @param swapData_ Swap data to be passed to the aggregator on the next swap.\\r\\n  ///                  Swap data contains swap-route, amount and all other required info for the swap.\\r\\n  ///                  Swap data should be prepared on-chain on the base of data received by {quoteWithdrawStep}\\r\\n  /// @param useLiquidator_ Use liquidator instead of aggregator.\\r\\n  ///                       Aggregator swaps amount reduced on {GAP_AMOUNT_TO_SWAP}.\\r\\n  ///                       Liquidator doesn't use {GAP_AMOUNT_TO_SWAP}.\\r\\n  ///                       It's allowed to pass liquidator address in {aggregator_} and set {useLiquidator_} to false -\\r\\n  ///                       the liquidator will be used in same way as aggregator in this case.\\r\\n  /// @param planKind One of IterationPlanLib.PLAN_XXX\\r\\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\\r\\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\\r\\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\r\\n  ///     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\\r\\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions\\r\\n  function withdrawStep(\\r\\n    address[2] memory converterLiquidator_,\\r\\n    address[] memory tokens,\\r\\n    uint[] memory liquidationThresholds,\\r\\n    address tokenToSwap_,\\r\\n    uint amountToSwap_,\\r\\n    address aggregator_,\\r\\n    bytes memory swapData_,\\r\\n    bool useLiquidator_,\\r\\n    uint planKind,\\r\\n    uint[2] memory entryDataValues\\r\\n  ) external returns (\\r\\n    bool completed\\r\\n  ){\\r\\n    (uint[] memory prices,\\r\\n      uint[] memory decs\\r\\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\\r\\n\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\\r\\n      converter: ITetuConverter(converterLiquidator_[0]),\\r\\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\\r\\n      tokens: tokens,\\r\\n      liquidationThresholds: liquidationThresholds,\\r\\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\\r\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\r\\n        : entryDataValues[0],\\r\\n      prices: prices,\\r\\n      decs: decs,\\r\\n      balanceAdditions: new uint[](2), // 2 = tokens.length\\r\\n      planKind: planKind,\\r\\n      usePoolProportions: entryDataValues[0] == type(uint).max,\\r\\n      entryDataParam: entryDataValues[1]\\r\\n    });\\r\\n    SwapByAggParams memory aggParams = SwapByAggParams({\\r\\n      tokenToSwap: tokenToSwap_,\\r\\n      amountToSwap: amountToSwap_,\\r\\n      useLiquidator: useLiquidator_,\\r\\n      aggregator: aggregator_,\\r\\n      swapData: swapData_\\r\\n    });\\r\\n    return _withdrawStep(p, aggParams);\\r\\n  }\\r\\n  //endregion ------------------------------------------------ External withdraw functions\\r\\n\\r\\n  //region ------------------------------------------------ Fuse functions\\r\\n  function setFuseStatus(FuseStateParams storage fuse, FuseStatus status) external {\\r\\n    fuse.status = status;\\r\\n    emit FuseStatusChanged(uint(status));\\r\\n  }\\r\\n\\r\\n  function setFuseThresholds(FuseStateParams storage state, uint[4] memory values) external {\\r\\n    require(\\r\\n      (values[FUSE_IDX_LOWER_LIMIT_ON] == 0 && values[FUSE_IDX_LOWER_LIMIT_OFF] == 0)\\r\\n      || (values[FUSE_IDX_LOWER_LIMIT_ON] <= values[FUSE_IDX_LOWER_LIMIT_OFF]),\\r\\n      AppErrors.INVALID_VALUE\\r\\n    );\\r\\n    require(\\r\\n      (values[FUSE_IDX_UPPER_LIMIT_ON] == 0 && values[FUSE_IDX_UPPER_LIMIT_OFF] == 0)\\r\\n      || (values[FUSE_IDX_UPPER_LIMIT_ON] >= values[FUSE_IDX_UPPER_LIMIT_OFF]),\\r\\n      AppErrors.INVALID_VALUE\\r\\n    );\\r\\n    if (values[FUSE_IDX_LOWER_LIMIT_ON] != 0 && values[FUSE_IDX_UPPER_LIMIT_ON] != 0) {\\r\\n      require(\\r\\n        values[FUSE_IDX_UPPER_LIMIT_ON] > values[FUSE_IDX_LOWER_LIMIT_ON],\\r\\n        AppErrors.INVALID_VALUE\\r\\n      );\\r\\n    }\\r\\n    state.thresholds = values;\\r\\n    emit NewFuseThresholds(values);\\r\\n  }\\r\\n\\r\\n  function isFuseTriggeredOn(PairBasedStrategyLib.FuseStatus fuseStatus) internal pure returns (bool) {\\r\\n    return uint(fuseStatus) > uint(PairBasedStrategyLib.FuseStatus.FUSE_OFF_1);\\r\\n  }\\r\\n\\r\\n  /// @notice Check if the fuse should be turned ON/OFF\\r\\n  /// @param price Current price in the oracle\\r\\n  /// @param poolPrice Current price in the pool\\r\\n  /// @return needToChange A boolean indicating if the fuse status should be changed\\r\\n  /// @return status Exist fuse status or new fuse status (if needToChange is true)\\r\\n  function needChangeFuseStatus(FuseStateParams memory fuse, uint price, uint poolPrice) internal pure returns (\\r\\n    bool needToChange,\\r\\n    FuseStatus status\\r\\n  ) {\\r\\n    if (fuse.status != FuseStatus.FUSE_DISABLED_0) {\\r\\n      if (fuse.status == FuseStatus.FUSE_OFF_1) {\\r\\n        // currently fuse is OFF\\r\\n        if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON]) {\\r\\n          needToChange = true;\\r\\n          status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\\r\\n        } else if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\\r\\n          needToChange = true;\\r\\n          status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\\r\\n        }\\r\\n      } else {\\r\\n        if (fuse.status == FuseStatus.FUSE_ON_LOWER_LIMIT_2) {\\r\\n          // currently fuse is triggered ON by lower limit\\r\\n          if (price >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] && poolPrice >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\\r\\n            needToChange = true;\\r\\n            if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\\r\\n              status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\\r\\n            } else {\\r\\n              status = FuseStatus.FUSE_OFF_1;\\r\\n            }\\r\\n          }\\r\\n        } else {\\r\\n          // currently fuse is triggered ON by upper limit\\r\\n          if (price <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF] && poolPrice <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF]) {\\r\\n            needToChange = true;\\r\\n            if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\\r\\n              status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\\r\\n            } else {\\r\\n              status = FuseStatus.FUSE_OFF_1;\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (needToChange, needToChange ? status : fuse.status);\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Fuse functions\\r\\n\\r\\n  //region ------------------------------------------------ Internal helper functions\\r\\n  /// @notice Quote amount of the next swap if any.\\r\\n  ///         Swaps are required if direct-borrow exists OR reverse-borrow exists or not underlying leftovers exist\\r\\n  ///         Function returns info for first swap only.\\r\\n  /// @return tokenToSwap What token should be swapped. Zero address if no swap is required\\r\\n  /// @return amountToSwap Amount to swap. Zero if no swap is required.\\r\\n  function _quoteWithdrawStep(IterationPlanLib.SwapRepayPlanParams memory p) internal returns (\\r\\n    address tokenToSwap,\\r\\n    uint amountToSwap\\r\\n  ) {\\r\\n    uint indexTokenToSwapPlus1;\\r\\n    (indexTokenToSwapPlus1, amountToSwap,) = IterationPlanLib.buildIterationPlan(\\r\\n      [address(p.converter), address(p.liquidator)],\\r\\n      p.tokens,\\r\\n      p.liquidationThresholds,\\r\\n      p.prices,\\r\\n      p.decs,\\r\\n      p.balanceAdditions,\\r\\n      [\\r\\n        p.usePoolProportions ? 1 : 0,\\r\\n        p.planKind,\\r\\n        p.propNotUnderlying18,\\r\\n        type(uint).max,\\r\\n        IDX_ASSET,\\r\\n        IDX_TOKEN,\\r\\n        p.entryDataParam\\r\\n      ]\\r\\n    );\\r\\n    if (indexTokenToSwapPlus1 != 0) {\\r\\n      tokenToSwap = p.tokens[indexTokenToSwapPlus1 - 1];\\r\\n    }\\r\\n    return (tokenToSwap, amountToSwap);\\r\\n  }\\r\\n\\r\\n  /// @notice Make one iteration of withdraw. Each iteration can make 0 or 1 swap only\\r\\n  ///         We can make only 1 of the following 3 operations per single call:\\r\\n  ///         1) repay direct debt 2) repay reverse debt 3) swap leftovers to underlying\\r\\n  function _withdrawStep(IterationPlanLib.SwapRepayPlanParams memory p, SwapByAggParams memory aggParams) internal returns (\\r\\n    bool completed\\r\\n  ) {\\r\\n    (uint idxToSwap1, uint amountToSwap, uint idxToRepay1) = IterationPlanLib.buildIterationPlan(\\r\\n      [address(p.converter), address(p.liquidator)],\\r\\n      p.tokens,\\r\\n      p.liquidationThresholds,\\r\\n      p.prices,\\r\\n      p.decs,\\r\\n      p.balanceAdditions,\\r\\n      [\\r\\n        p.usePoolProportions ? 1 : 0,\\r\\n        p.planKind,\\r\\n        p.propNotUnderlying18,\\r\\n        type(uint).max,\\r\\n        IDX_ASSET,\\r\\n        IDX_TOKEN,\\r\\n        p.entryDataParam\\r\\n      ]\\r\\n    );\\r\\n\\r\\n    bool[4] memory actions = [\\r\\n      p.planKind == IterationPlanLib.PLAN_SWAP_ONLY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // swap 1\\r\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // repay 1\\r\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, // swap 2\\r\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY // repay 2\\r\\n      ];\\r\\n\\r\\n    if (idxToSwap1 != 0 && actions[IDX_SWAP_1]) {\\r\\n      (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\\r\\n    }\\r\\n\\r\\n    if (idxToRepay1 != 0 && actions[IDX_REPAY_1]) {\\r\\n      ConverterStrategyBaseLib._repayDebt(\\r\\n        p.converter,\\r\\n        p.tokens[idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET],\\r\\n        p.tokens[idxToRepay1 - 1],\\r\\n        IERC20(p.tokens[idxToRepay1 - 1]).balanceOf(address(this))\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if (idxToSwap1 != 0) {\\r\\n      if (actions[IDX_SWAP_2]) {\\r\\n        (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\\r\\n\\r\\n        if (actions[IDX_REPAY_2] && idxToRepay1 != 0) {\\r\\n          // see calculations inside estimateSwapAmountForRepaySwapRepay\\r\\n          // There are two possibilities here:\\r\\n          // 1) All collateral asset available on balance was swapped. We need additional repay to get assets in right proportions\\r\\n          // 2) Only part of collateral asset was swapped, so assets are already in right proportions. Repay 2 is not needed\\r\\n          (uint amountToRepay2, bool borrowInsteadRepay) = _getAmountToRepay2(\\r\\n            p,\\r\\n            idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET,\\r\\n            idxToRepay1 - 1\\r\\n          );\\r\\n\\r\\n          if (borrowInsteadRepay) {\\r\\n            _borrowToProportions(p, idxToRepay1 - 1, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, true);\\r\\n\\r\\n          } else if (amountToRepay2 > p.liquidationThresholds[idxToRepay1 - 1]) {\\r\\n            _secondRepay(p, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, idxToRepay1 - 1, amountToRepay2, type(uint).max);\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        // leftovers were swapped, there are no debts anymore\\r\\n        // the swap can change pool proportions, so probably it's necessary to make additional borrow here\\r\\n        if (\\r\\n          idxToRepay1 == 0 // there are no debts anymore\\r\\n          && p.usePoolProportions  // we use proportions from the pool\\r\\n          && p.propNotUnderlying18 != 0 && p.propNotUnderlying18 != 1e18 // BorrowLib doesn't allow prop=0\\r\\n        ) {\\r\\n          _fixLeftoversProportions(p);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Withdraw is completed on last iteration (no debts, swapping leftovers)\\r\\n    return idxToRepay1 == 0;\\r\\n  }\\r\\n\\r\\n  /// @notice Make final repay in the scheme REPAY-SWAP-REPAY\\r\\n  ///         Depending on condition the final repay can be made several times or additional borrow can be made\\r\\n  /// @param amountToRepay Amount of {indexBorrow} asset that should be repaid\\r\\n  /// @param needToRepayPrev Amount-to-repay on previous call of the {_secondRepay}\\r\\n  ///                        This amount should decrease on each step of recursion.\\r\\n  ///                        if it doesn't decrease repay is not successfull and it's useless to continue to call repays\\r\\n  ///                        It can happen if liquidationThreshold has incorrect value (i.t. it's too low or zero)\\r\\n  function _secondRepay(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow,\\r\\n    uint amountToRepay,\\r\\n    uint needToRepayPrev\\r\\n  ) internal {\\r\\n    // we need to know repaidAmount\\r\\n    // we cannot relay on the value returned by _repayDebt because of SCB-710, we need to check balances\\r\\n    uint balanceBefore = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\\r\\n    ConverterStrategyBaseLib._repayDebt(p.converter, p.tokens[indexCollateral], p.tokens[indexBorrow], amountToRepay);\\r\\n    uint balanceAfter = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\\r\\n\\r\\n    uint repaidAmount = balanceBefore > balanceAfter\\r\\n      ? balanceBefore - balanceAfter\\r\\n      : 0;\\r\\n\\r\\n    if (repaidAmount < amountToRepay && amountToRepay - repaidAmount > p.liquidationThresholds[indexBorrow]) {\\r\\n      // repaidAmount is less than expected\\r\\n      // we need to make additional borrow OR probably make one more repay\\r\\n      // repaidAmount can be less amountToRepay2 even if there is still opened debt, see SCB-777\\r\\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexCollateral], p.tokens[indexBorrow], true);\\r\\n      if (\\r\\n        needToRepay > p.liquidationThresholds[indexBorrow]\\r\\n        && needToRepay < needToRepayPrev // amount of debt was reduced on prev iteration of recursion\\r\\n      ) {\\r\\n        // more repays are required\\r\\n        _secondRepay(p, indexCollateral, indexBorrow, amountToRepay - repaidAmount, needToRepay);\\r\\n      } else {\\r\\n        _borrowToProportions(p, indexBorrow, indexCollateral, false);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Set balances to right proportions using borrow\\r\\n  ///         (it can be necessary if propNotUnderlying18 was changed after swap)\\r\\n  function _fixLeftoversProportions(IterationPlanLib.SwapRepayPlanParams memory p) internal {\\r\\n    uint balanceAsset = IERC20(p.tokens[IDX_ASSET]).balanceOf(address(this));\\r\\n    uint balanceToken = IERC20(p.tokens[IDX_TOKEN]).balanceOf(address(this));\\r\\n    (uint targetAssets,\\r\\n      uint targetTokens\\r\\n    ) = IterationPlanLib._getTargetAmounts(p.prices, p.decs, balanceAsset, balanceToken, p.propNotUnderlying18, IDX_ASSET, IDX_TOKEN);\\r\\n\\r\\n    if (balanceAsset > targetAssets) {\\r\\n      if (balanceAsset - targetAssets > p.liquidationThresholds[IDX_ASSET]) {\\r\\n        _borrowToProportions(p, IDX_ASSET, IDX_TOKEN, balanceAsset, balanceToken, true);\\r\\n      }\\r\\n    } else if (balanceToken > targetTokens) {\\r\\n      if (balanceToken - targetTokens > p.liquidationThresholds[IDX_ASSET]) {\\r\\n        _borrowToProportions(p, IDX_TOKEN, IDX_ASSET, balanceToken, balanceAsset, true);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\\r\\n  function _borrowToProportions(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow,\\r\\n    bool checkOppositDebtDoesntExist\\r\\n  ) internal {\\r\\n    _borrowToProportions(\\r\\n      p,\\r\\n      indexCollateral,\\r\\n      indexBorrow,\\r\\n      IERC20(p.tokens[indexCollateral]).balanceOf(address(this)),\\r\\n      IERC20(p.tokens[indexBorrow]).balanceOf(address(this)),\\r\\n      checkOppositDebtDoesntExist\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\\r\\n  function _borrowToProportions(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow,\\r\\n    uint balanceCollateral,\\r\\n    uint balanceBorrow,\\r\\n    bool checkOppositDebtDoesntExist\\r\\n  ) internal {\\r\\n    // we are going to change direction of the borrow\\r\\n    // let's ensure that there is no debt in opposite direction\\r\\n    if (checkOppositDebtDoesntExist) {\\r\\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexBorrow], p.tokens[indexCollateral], false);\\r\\n      require(needToRepay < AppLib.DUST_AMOUNT_TOKENS, AppErrors.OPPOSITE_DEBT_EXISTS);\\r\\n    }\\r\\n\\r\\n    BorrowLib.RebalanceAssetsCore memory cac = BorrowLib.RebalanceAssetsCore({\\r\\n      converterLiquidator: BorrowLib.ConverterLiquidator(p.converter, p.liquidator),\\r\\n      assetA: p.tokens[indexCollateral],\\r\\n      assetB: p.tokens[indexBorrow],\\r\\n      propA: indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18,\\r\\n      propB: indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18,\\r\\n    // {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\\r\\n      alpha18: 1e18 * p.prices[indexBorrow] * p.decs[indexCollateral] / p.prices[indexCollateral] / p.decs[indexBorrow],\\r\\n      thresholdA: p.liquidationThresholds[indexCollateral],\\r\\n      addonA: 0,\\r\\n      addonB: 0,\\r\\n      indexA: indexCollateral,\\r\\n      indexB: indexBorrow\\r\\n    });\\r\\n\\r\\n    BorrowLib.openPosition(\\r\\n      cac,\\r\\n      BorrowLib.PricesDecs({\\r\\n        prices: p.prices,\\r\\n        decs: p.decs\\r\\n      }),\\r\\n      balanceCollateral,\\r\\n      balanceBorrow\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate amount that should be repaid to get right proportions of assets on balance\\r\\n  ///         Analyse only single borrow-direction: indexCollateral => indexBorrow\\r\\n  /// @return amountToRepay Amount that should be repaid\\r\\n  /// @return borrowInsteadRepay true if repay is not necessary at all and borrow is required instead\\r\\n  ///                            if we need both repay and borrow then false is returned\\r\\n  function _getAmountToRepay2(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow\\r\\n  ) internal view returns (\\r\\n    uint amountToRepay,\\r\\n    bool borrowInsteadRepay\\r\\n  ) {\\r\\n    GetAmountToRepay2Local memory v;\\r\\n    v.c0 = IERC20(p.tokens[indexCollateral]).balanceOf(address(this)) * p.prices[indexCollateral] / p.decs[indexCollateral];\\r\\n    v.b0 = IERC20(p.tokens[indexBorrow]).balanceOf(address(this)) * p.prices[indexBorrow] / p.decs[indexBorrow];\\r\\n\\r\\n    v.x = indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18;\\r\\n    v.y = indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18;\\r\\n    v.alpha = p.prices[indexCollateral] * p.decs[indexBorrow] * 1e18 / p.prices[indexBorrow] / p.decs[indexCollateral];\\r\\n\\r\\n    (uint needToRepay, uint collateralAmountOut) = p.converter.getDebtAmountStored(\\r\\n      address(this),\\r\\n      p.tokens[indexCollateral],\\r\\n      p.tokens[indexBorrow],\\r\\n      true\\r\\n    );\\r\\n\\r\\n    if (needToRepay == 0) {\\r\\n      // check if we need to make reverse borrow to fit to proportions: borrow collateral-asset under borrow-asset\\r\\n      uint targetCollateral = (v.c0 + v.b0) * v.x / (v.x + v.y);\\r\\n      borrowInsteadRepay = targetCollateral > v.c0\\r\\n        && targetCollateral - v.c0\\r\\n        > (p.liquidationThresholds[indexCollateral] * p.prices[indexCollateral] / p.decs[indexCollateral]);\\r\\n    } else {\\r\\n      // initial balances: c0, b0\\r\\n      // we are going to repay amount b and receive (betta * b, b), where betta ~ alpha * totalCollateral / totalBorrow\\r\\n      // we should have x/y = (c0 + betta * b) / (b0 - b)\\r\\n      // so b = (x * b0 - y * c0) / (betta * y + x)\\r\\n      v.b = (int(v.x * v.b0) - int(v.y * v.c0)) / (int(v.y * v.alpha * collateralAmountOut / needToRepay / 1e18) + int(v.x));\\r\\n      if (v.b > 0) {\\r\\n        amountToRepay = uint(v.b);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (amountToRepay * p.decs[indexBorrow] / p.prices[indexBorrow], borrowInsteadRepay);\\r\\n  }\\r\\n\\r\\n  /// @notice Swap {aggParams.amountToSwap} using either liquidator or aggregator\\r\\n  /// @dev You can use liquidator as aggregator, so aggregator's logic will be used for the liquidator\\r\\n  /// @param amountIn Calculated amount to be swapped. It can be different from {aggParams.amountToSwap} a bit,\\r\\n  ///                 but aggregators require exact value {aggParams.amountToSwap}, so amountIn is not used with agg.\\r\\n  function _swap(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    SwapByAggParams memory aggParams,\\r\\n    uint indexIn,\\r\\n    uint indexOut,\\r\\n    uint amountIn\\r\\n  ) internal returns (\\r\\n    uint spentAmountIn,\\r\\n    uint updatedPropNotUnderlying18\\r\\n  ) {\\r\\n    // liquidator and aggregator have different logic here:\\r\\n    // - liquidator uses amountIn to swap\\r\\n    // - Aggregator uses amountToSwap for which a route was built off-chain before the call of the swap()\\r\\n    // It's allowed to use aggregator == liquidator, so in this way liquidator will use aggregator's logic (for tests)\\r\\n\\r\\n    if (!aggParams.useLiquidator) {\\r\\n      // aggregator requires exact input amount - aggParams.amountToSwap\\r\\n      // actual amount can be a bit different because the quote function was called in different block\\r\\n      amountIn = aggParams.amountToSwap;\\r\\n    }\\r\\n    address aggregator = aggParams.useLiquidator\\r\\n      ? address(p.liquidator)\\r\\n      : aggParams.aggregator;\\r\\n\\r\\n    require(amountIn <= IERC20(p.tokens[indexIn]).balanceOf(address(this)), AppErrors.NOT_ENOUGH_BALANCE);\\r\\n    // let's ensure that \\\"next swap\\\" is made using correct token\\r\\n    require(aggParams.tokenToSwap == p.tokens[indexIn], AppErrors.INCORRECT_SWAP_BY_AGG_PARAM);\\r\\n\\r\\n    if (amountIn > p.liquidationThresholds[indexIn]) {\\r\\n      // infinite approve for aggregator is unsafe\\r\\n      AppLib.approveForced(p.tokens[indexIn], amountIn, aggregator);\\r\\n\\r\\n      uint balanceTokenOutBefore = AppLib.balance(p.tokens[indexOut]);\\r\\n\\r\\n      if (aggParams.useLiquidator) {\\r\\n        amountIn = Math.min(amountIn, aggParams.amountToSwap);\\r\\n        (spentAmountIn,) = ConverterStrategyBaseLib._liquidate(\\r\\n          p.converter,\\r\\n          ITetuLiquidator(aggregator),\\r\\n          p.tokens[indexIn],\\r\\n          p.tokens[indexOut],\\r\\n          amountIn,\\r\\n          _ASSET_LIQUIDATION_SLIPPAGE,\\r\\n          p.liquidationThresholds[indexIn],\\r\\n          true\\r\\n        );\\r\\n      } else {\\r\\n        if (aggregator != address(p.liquidator)) {\\r\\n          _checkSwapRouter(aggregator);\\r\\n        }\\r\\n\\r\\n        (bool success, bytes memory result) = aggregator.call(aggParams.swapData);\\r\\n        require(success, string(result));\\r\\n\\r\\n        spentAmountIn = amountIn;\\r\\n      }\\r\\n\\r\\n      require(\\r\\n        p.converter.isConversionValid(\\r\\n          p.tokens[indexIn],\\r\\n          amountIn,\\r\\n          p.tokens[indexOut],\\r\\n          AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\\r\\n          _ASSET_LIQUIDATION_SLIPPAGE\\r\\n        ), AppErrors.PRICE_IMPACT);\\r\\n\\r\\n      emit SwapByAgg(\\r\\n        aggParams.amountToSwap,\\r\\n        amountIn,\\r\\n        AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\\r\\n        amountIn * p.prices[indexIn] * p.decs[indexOut] / p.prices[indexOut] / p.decs[indexIn],\\r\\n        aggregator,\\r\\n        p.tokens[indexIn],\\r\\n        p.tokens[indexOut]\\r\\n      );\\r\\n    }\\r\\n\\r\\n    return (\\r\\n      spentAmountIn,\\r\\n    // p.propNotUnderlying18 contains original proportions that were valid before the swap\\r\\n    // after swap() we need to re-read new values from the pool\\r\\n      p.usePoolProportions\\r\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\r\\n        : p.propNotUnderlying18\\r\\n    );\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Internal helper functions\\r\\n\\r\\n  //region ----------------------------------------- Utils\\r\\n  function getPoolPriceAdjustment(uint poolPriceDecimals) external pure returns (uint adjustment) {\\r\\n    // we assume that decimals never higher than 18\\r\\n    adjustment = poolPriceDecimals < 18 ? 10 ** (18 - poolPriceDecimals) : 1;\\r\\n  }\\r\\n\\r\\n  function _checkSwapRouter(address router) internal pure {\\r\\n    require(router == ONEINCH || router == OPENOCEAN || router == OPENOCEAN_ZKEVM, UNKNOWN_SWAP_ROUTER);\\r\\n  }\\r\\n\\r\\n  /// @notice Extract propNotUnderlying18 from {planEntryData} of the given {planKind}\\r\\n  function _extractProp(uint planKind, bytes memory planEntryData) internal pure returns (\\r\\n    uint propNotUnderlying18,\\r\\n    uint entryDataParamValue\\r\\n  ) {\\r\\n    if (planKind == IterationPlanLib.PLAN_SWAP_REPAY || planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\\r\\n      (, propNotUnderlying18) = abi.decode(planEntryData, (uint, uint));\\r\\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\\r\\n    } else {\\r\\n      require(planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, AppErrors.WRONG_VALUE);\\r\\n      // save \\\"required-amount-to-reduce-debt\\\" to entryDataParamValue\\r\\n      (, propNotUnderlying18, entryDataParamValue) = abi.decode(planEntryData, (uint, uint, uint));\\r\\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\\r\\n    }\\r\\n    return (propNotUnderlying18, entryDataParamValue);\\r\\n  }\\r\\n  //endregion ------------------------------------------ Utils\\r\\n}\\r\\n\",\"keccak256\":\"0x33ba728785e3e0fe41ae312fb091a518303b27a81c76f88edd3f3b0c28b4849b\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/pair/PairBasedStrategyReader.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"../../interfaces/IPairBasedStrategyReaderAccess.sol\\\";\\r\\nimport \\\"../../libs/AppLib.sol\\\";\\r\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\r\\nimport \\\"./PairBasedStrategyLib.sol\\\";\\r\\n\\r\\n/// @notice Read raw values and calculate complex values related to UniswapV3ConverterStrategy\\r\\ncontract PairBasedStrategyReader {\\r\\n\\r\\n  /// @notice Possible results of isWithdrawByAggCallRequired:\\r\\n  ///         full withdraw is required (with propNotUnderlying = 0)\\r\\n  uint constant public FULL_WITHDRAW_IS_REQUIRED = 1;\\r\\n  /// @notice Possible results of isWithdrawByAggCallRequired:\\r\\n  ///         rebalance of the debts is required with pool proportions (propNotUnderlying = type(uint).max)\\r\\n  uint constant public DEBTS_REBALANCE_IS_REQUIRED = 2;\\r\\n\\r\\n  //region -------------------------------------------------- Data types\\r\\n  struct GetLockedUnderlyingAmountLocal {\\r\\n    ITetuConverter converter;\\r\\n    address[] tokens;\\r\\n    uint[] prices;\\r\\n    uint[] decs;\\r\\n    uint directDebt;\\r\\n    uint directCollateral;\\r\\n    uint reverseDebt;\\r\\n    uint reverseCollateral;\\r\\n    uint directDebtCost;\\r\\n    uint reverseCollateralCost;\\r\\n  }\\r\\n\\r\\n  struct GetAmountToReduceDebtLocal {\\r\\n    address[] tokens;\\r\\n    ITetuConverter converter;\\r\\n    uint[] prices;\\r\\n    uint[] decs;\\r\\n    address[] addr;\\r\\n    IPriceOracle priceOracle;\\r\\n    uint debtAmountB;\\r\\n    uint collateralAmountA;\\r\\n    uint debtAmountA;\\r\\n    uint collateralAmountB;\\r\\n  }\\r\\n  //endregion -------------------------------------------------- Data types\\r\\n\\r\\n  //region -------------------------------------------------- Locked underlying amount logic\\r\\n  /// @notice Estimate amount of underlying locked in the strategy by TetuConverter\\r\\n  /// @dev We cannot call strategy.getState() because of stack too deep problem\\r\\n  /// @param strategy_ Instance of UniswapV3ConverterStrategy\\r\\n  /// @return estimatedUnderlyingAmount Total locked amount recalculated to the underlying\\r\\n  /// @return totalAssets strategy.totalAssets() - in terms of underlying\\r\\n  function getLockedUnderlyingAmount(address strategy_) public view returns (\\r\\n    uint estimatedUnderlyingAmount,\\r\\n    uint totalAssets\\r\\n  ) {\\r\\n    GetLockedUnderlyingAmountLocal memory v;\\r\\n    IPairBasedStrategyReaderAccess strategy = IPairBasedStrategyReaderAccess(strategy_);\\r\\n\\r\\n    (address[] memory addr, , , ) = strategy.getDefaultState();\\r\\n    address tokenA = addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_A];\\r\\n    address tokenB = addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_B];\\r\\n\\r\\n    v.converter = ITetuConverter(strategy.converter());\\r\\n\\r\\n    v.tokens = new address[](2);\\r\\n    v.tokens[0] = ISplitter(strategy.splitter()).asset(); // underlying\\r\\n    v.tokens[1] = tokenA == v.tokens[0] ? tokenB : tokenA; // not underlying\\r\\n\\r\\n    IPriceOracle priceOracle = AppLib._getPriceOracle(v.converter);\\r\\n    (v.prices, v.decs) =  AppLib._getPricesAndDecs(priceOracle, v.tokens, 2);\\r\\n\\r\\n    // direct borrow: underlying is collateral\\r\\n    (v.directDebt, v.directCollateral) = v.converter.getDebtAmountStored(strategy_, v.tokens[0], v.tokens[1], true);\\r\\n\\r\\n    // reverse borrow: underlying is borrowed asset\\r\\n    (v.reverseDebt, v.reverseCollateral) = v.converter.getDebtAmountStored(strategy_, v.tokens[1], v.tokens[0], true);\\r\\n\\r\\n    v.directDebtCost = v.directDebt * v.prices[1] * v.decs[0] / v.decs[1] / v.prices[0];\\r\\n    v.reverseCollateralCost = v.reverseCollateral * v.prices[1] * v.decs[0] / v.decs[1] / v.prices[0];\\r\\n\\r\\n    return (\\r\\n      v.directCollateral + v.reverseCollateralCost > (v.directDebtCost + v.reverseDebt)\\r\\n        ? v.directCollateral + v.reverseCollateralCost - v.directDebtCost - v.reverseDebt\\r\\n        : 0,\\r\\n      strategy.totalAssets()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Check if a call of withdrawByAgg is required\\r\\n  /// @param strategy_ instance of IPairBasedStrategyReaderAccess\\r\\n  /// @param allowedLockedAmountPercent [0...100]\\r\\n  /// @return 0: it's not necessary to call withdrawByAgg\\r\\n  ///         1: full withdraw is required (with propNotUnderlying = 0)\\r\\n  ///         2: rebalance of the debts is required with pool proportions (propNotUnderlying = type(uint).max)\\r\\n  function isWithdrawByAggCallRequired(address strategy_, uint allowedLockedAmountPercent) external view returns (\\r\\n    uint\\r\\n  ) {\\r\\n    IPairBasedStrategyReaderAccess strategy = IPairBasedStrategyReaderAccess(strategy_);\\r\\n\\r\\n    (, , uint[] memory nums, ) = strategy.getDefaultState();\\r\\n\\r\\n    if (\\r\\n      PairBasedStrategyLib.isFuseTriggeredOn(\\r\\n        PairBasedStrategyLib.FuseStatus(nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_FUSE_STATUS])\\r\\n      )\\r\\n    ) {\\r\\n      // fuse is enabled: full withdraw to underlying is required\\r\\n      if (nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE] == 0) {\\r\\n        return FULL_WITHDRAW_IS_REQUIRED;\\r\\n      }\\r\\n    } else {\\r\\n      // locked amount is too high: partial withdraw  (with pool proportions) is required\\r\\n      (uint estimatedUnderlyingAmount, uint totalAssets) = getLockedUnderlyingAmount(strategy_);\\r\\n      uint percent = estimatedUnderlyingAmount * 100 / totalAssets;\\r\\n\\r\\n      if (percent > allowedLockedAmountPercent) {\\r\\n        return DEBTS_REBALANCE_IS_REQUIRED;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n  //endregion -------------------------------------------------- Locked underlying amount logic\\r\\n\\r\\n  //region -------------------------------------------------- Calculate amount to reduce debt\\r\\n  /// @notice Calculate the amount by which the debt should be reduced to reduce locked-amount-percent below given value\\r\\n  /// @param requiredLockedAmountPercent  Required value of locked amount percent [0..100]\\r\\n  /// @param requiredAmountToReduceDebt If not zero: we are going to make repay-swap-repay to reduce total\\r\\n  ///        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce\\r\\n  ///        the amount of debt by the given amount.\\r\\n  ///        This amount is set in terms of the token B if there is direct debt, or in terms of the token A otherwise.\\r\\n  function getAmountToReduceDebtForStrategy(address strategy_, uint requiredLockedAmountPercent) external view returns (\\r\\n    uint requiredAmountToReduceDebt\\r\\n  ) {\\r\\n    GetAmountToReduceDebtLocal memory v;\\r\\n    IPairBasedStrategyReaderAccess strategy = IPairBasedStrategyReaderAccess(strategy_);\\r\\n\\r\\n    (v.addr, , , ) = strategy.getDefaultState();\\r\\n\\r\\n    v.tokens = new address[](2);\\r\\n    v.tokens[0] = v.addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_A];\\r\\n    v.tokens[1] = v.addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_B];\\r\\n\\r\\n    v.converter = ITetuConverter(strategy.converter());\\r\\n\\r\\n    v.priceOracle = AppLib._getPriceOracle(v.converter);\\r\\n    (v.prices, v.decs) =  AppLib._getPricesAndDecs(v.priceOracle, v.tokens, 2);\\r\\n\\r\\n    (v.debtAmountB, v.collateralAmountA) = v.converter.getDebtAmountStored(strategy_, v.tokens[0], v.tokens[1], false);\\r\\n    (v.debtAmountA, v.collateralAmountB) = v.converter.getDebtAmountStored(strategy_, v.tokens[1], v.tokens[0], false);\\r\\n\\r\\n    // the app should have debt in one direction only - either direct or reverse\\r\\n    // but dust debts in contrary direction are still possible\\r\\n    if (v.debtAmountB > v.collateralAmountB) {\\r\\n      if (v.debtAmountB > AppLib.DUST_AMOUNT_TOKENS) {\\r\\n        // there is direct debt\\r\\n        requiredAmountToReduceDebt = getAmountToReduceDebt(\\r\\n          strategy.totalAssets(),\\r\\n          strategy.asset() == v.tokens[0],\\r\\n          v.collateralAmountA,\\r\\n          v.debtAmountB,\\r\\n          [v.prices[0], v.prices[1]],\\r\\n          [v.decs[0], v.decs[1]],\\r\\n          requiredLockedAmountPercent\\r\\n        );\\r\\n      }\\r\\n    } else {\\r\\n      if (v.debtAmountA > AppLib.DUST_AMOUNT_TOKENS) {\\r\\n        // there is reverse debt\\r\\n        requiredAmountToReduceDebt = getAmountToReduceDebt(\\r\\n          strategy.totalAssets(),\\r\\n          strategy.asset() == v.tokens[1],\\r\\n          v.collateralAmountB,\\r\\n          v.debtAmountA,\\r\\n          [v.prices[1], v.prices[0]],\\r\\n          [v.decs[1], v.decs[0]],\\r\\n          requiredLockedAmountPercent\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n    return requiredAmountToReduceDebt;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate the amount by which the debt should be reduced to reduce locked-amount-percent below given value\\r\\n  /// @param totalAssets Total assets of the strategy, in underlying\\r\\n  /// @param isUnderlyingA True if A is underlying\\r\\n  /// @param collateralAmountA Total collateral amount in asset A\\r\\n  /// @param debtAmountB Total debt amount in asset B\\r\\n  /// @param pricesAB Prices of A and B, decimals 18\\r\\n  /// @param decsAB 10**decimals for A and B\\r\\n  /// @param requiredLockedAmountPercent  Required value of locked amount percent [0..100]\\r\\n  /// @return deltaDebtAmountB The amount by which the debt should be reduced, asset B\\r\\n  function getAmountToReduceDebt(\\r\\n    uint totalAssets,\\r\\n    bool isUnderlyingA,\\r\\n    uint collateralAmountA,\\r\\n    uint debtAmountB,\\r\\n    uint[2] memory pricesAB,\\r\\n    uint[2] memory decsAB,\\r\\n    uint requiredLockedAmountPercent\\r\\n  ) public pure returns (uint deltaDebtAmountB) {\\r\\n    if (debtAmountB != 0 && totalAssets != 0) {\\r\\n      uint alpha18 = 1e18 * collateralAmountA * decsAB[1] / decsAB[0] / debtAmountB;\\r\\n\\r\\n      uint indexUnderlying = isUnderlyingA ? 0 : 1;\\r\\n      uint lockedPercent18 = 1e18\\r\\n        * AppLib.sub0(collateralAmountA * pricesAB[0] / decsAB[0], debtAmountB * pricesAB[1] / decsAB[1])\\r\\n        / (totalAssets * pricesAB[indexUnderlying] / decsAB[indexUnderlying]);\\r\\n      uint delta = AppLib.sub0(alpha18 * pricesAB[0] / 1e18, pricesAB[1]);\\r\\n\\r\\n      deltaDebtAmountB = delta == 0\\r\\n        ? 0 // weird case\\r\\n        : AppLib.sub0(lockedPercent18, requiredLockedAmountPercent * 1e16)\\r\\n          * totalAssets\\r\\n          * pricesAB[indexUnderlying]\\r\\n          / decsAB[indexUnderlying]\\r\\n          / delta;\\r\\n    }\\r\\n\\r\\n    return deltaDebtAmountB * decsAB[1] / 1e18;\\r\\n  }\\r\\n  //endregion -------------------------------------------------- Calculate amount to reduce debt\\r\\n}\\r\\n\",\"keccak256\":\"0x6a02b56f946a2db1ffca47387ba6a06cf50d5f8693b5a08ee703c8fbb02cb0e2\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063369e2efc1461006757806359af44dc146100945780635d698b52146100aa578063e8405269146100b2578063ebe4aef2146100c5578063fe03683f146100d8575b600080fd5b61007a610075366004611557565b6100eb565b604080519283526020830191909152015b60405180910390f35b61009c600181565b60405190815260200161008b565b61009c600281565b61009c6100c0366004611639565b6107d4565b61009c6100d33660046116a9565b6109c5565b61009c6100e63660046116a9565b61110f565b60008061014d60405180610140016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008490506000816001600160a01b0316635412335d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610192573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101ba9190810190611833565b50505090506000816000815181106101d4576101d4611941565b602002602001015190506000826001815181106101f3576101f3611941565b60200260200101519050836001600160a01b031663bd38837b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561023b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025f9190611957565b6001600160a01b031685526040805160028082526060820183529091602083019080368337019050508560200181905250836001600160a01b0316633cd8045e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f29190611957565b6001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561032f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103539190611957565b856020015160008151811061036a5761036a611941565b6001600160a01b03909216602092830291909101820152850151805160009061039557610395611941565b60200260200101516001600160a01b0316826001600160a01b0316146103bb57816103bd565b805b85602001516001815181106103d4576103d4611941565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610403866000015161123d565b90506104158187602001516002611302565b606088015260408701528551602087015180516001600160a01b039092169163e4c2be70918c9160009061044b5761044b611941565b6020026020010151896020015160018151811061046a5761046a611941565b602002602001015160016040518563ffffffff1660e01b81526004016104939493929190611974565b6040805180830381865afa1580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d3919061199e565b60a088015260808701528551602087015180516001600160a01b039092169163e4c2be70918c91600190811061050b5761050b611941565b6020026020010151896020015160008151811061052a5761052a611941565b602002602001015160016040518563ffffffff1660e01b81526004016105539493929190611974565b6040805180830381865afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610593919061199e565b60e088015260c0870152604086015180516000906105b3576105b3611941565b602002602001015186606001516001815181106105d2576105d2611941565b602002602001015187606001516000815181106105f1576105f1611941565b6020026020010151886040015160018151811061061057610610611941565b6020026020010151896080015161062791906119d8565b61063191906119d8565b61063b91906119ef565b61064591906119ef565b6101008701526040860151805160009061066157610661611941565b6020026020010151866060015160018151811061068057610680611941565b6020026020010151876060015160008151811061069f5761069f611941565b602002602001015188604001516001815181106106be576106be611941565b60200260200101518960e001516106d591906119d8565b6106df91906119d8565b6106e991906119ef565b6106f391906119ef565b61012087015260c086015161010087015161070e9190611a11565b8661012001518760a001516107239190611a11565b1161072f576000610763565b8560c001518661010001518761012001518860a0015161074f9190611a11565b6107599190611a24565b6107639190611a24565b856001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190611a37565b97509750505050505050915091565b600084158015906107e457508715155b15610996578251602084015160009187916108078a670de0b6b3a76400006119d8565b61081191906119d8565b61081b91906119ef565b61082591906119ef565b9050600088610835576001610838565b60005b60ff169050600085826002811061085157610851611941565b602002015187836002811061086857610868611941565b6020020151610877908d6119d8565b61088191906119ef565b865188516108c19190610894908d6119d8565b61089e91906119ef565b6020808a0151908b01516108b2908d6119d8565b6108bc91906119ef565b611501565b6108d390670de0b6b3a76400006119d8565b6108dd91906119ef565b90506000610912670de0b6b3a7640000898360200201516108fe90876119d8565b61090891906119ef565b60208a0151611501565b9050801561098c578087846002811061092d5761092d611941565b602002015189856002811061094457610944611941565b60200201518e61095f866108bc8c662386f26fc100006119d8565b61096991906119d8565b61097391906119d8565b61097d91906119ef565b61098791906119ef565b61098f565b60005b9450505050505b6020830151670de0b6b3a7640000906109af90836119d8565b6109b991906119ef565b98975050505050505050565b6000610a2f6040518061014001604052806060815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6000849050806001600160a01b0316635412335d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a72573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a9a9190810190611833565b50505060808301526040805160028082526060820183529091602083019080368337505050825260808201518051600090610ad757610ad7611941565b60200260200101518260000151600081518110610af657610af6611941565b60200260200101906001600160a01b031690816001600160a01b0316815250508160800151600181518110610b2d57610b2d611941565b60200260200101518260000151600181518110610b4c57610b4c611941565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b031663bd38837b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610baa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bce9190611957565b6001600160a01b031660208301819052610be79061123d565b6001600160a01b031660a083018190528251610c0591906002611302565b606084015260408301526020820151825180516001600160a01b039092169163e4c2be70918891600090610c3b57610c3b611941565b60200260200101518560000151600181518110610c5a57610c5a611941565b602002602001015160006040518563ffffffff1660e01b8152600401610c839493929190611974565b6040805180830381865afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc3919061199e565b60e084015260c08301526020820151825180516001600160a01b039092169163e4c2be709188916001908110610cfb57610cfb611941565b60200260200101518560000151600081518110610d1a57610d1a611941565b602002602001015160006040518563ffffffff1660e01b8152600401610d439493929190611974565b6040805180830381865afa158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d83919061199e565b610120840181905261010084019190915260c08301511115610f5b5760648260c001511115610f5657610f53816001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190611a37565b83518051600090610e2457610e24611941565b60200260200101516001600160a01b0316836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e979190611957565b6001600160a01b0316148460e001518560c0015160405180604001604052808860400151600081518110610ecd57610ecd611941565b602002602001015181526020018860400151600181518110610ef157610ef1611941565b602002602001015181525060405180604001604052808960600151600081518110610f1e57610f1e611941565b602002602001015181526020018960600151600181518110610f4257610f42611941565b60200260200101518152508a6107d4565b92505b611106565b6064826101000151111561110657611103816001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce9190611a37565b835180516001908110610fe357610fe3611941565b60200260200101516001600160a01b0316836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190611957565b6001600160a01b0316148461012001518561010001516040518060400160405280886040015160018151811061108e5761108e611941565b6020026020010151815260200188604001516000815181106110b2576110b2611941565b6020026020010151815250604051806040016040528089606001516001815181106110df576110df611941565b602002602001015181526020018960600151600081518110610f4257610f42611941565b92505b50505b92915050565b6000808390506000816001600160a01b0316635412335d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611155573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261117d9190810190611833565b50925050506111b68160018151811061119857611198611941565b602002602001015160038111156111b1576111b1611a50565b611522565b156111ed57806003815181106111ce576111ce611941565b60200260200101516000036111e857600192505050611109565b611232565b6000806111f9876100eb565b909250905060008161120c8460646119d8565b61121691906119ef565b90508681111561122e57600295505050505050611109565b5050505b506000949350505050565b6000816001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa15801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a19190611957565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111099190611957565b6060808267ffffffffffffffff81111561131e5761131e611582565b604051908082528060200260200182016040528015611347578160200160208202803683370190505b5091508267ffffffffffffffff81111561136357611363611582565b60405190808252806020026020018201604052801561138c578160200160208202803683370190505b50905060005b838110156114f8578481815181106113ac576113ac611941565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114159190611a66565b61142090600a611b6d565b82828151811061143257611432611941565b602002602001018181525050856001600160a01b031663b3596f0786838151811061145f5761145f611941565b60200260200101516040518263ffffffff1660e01b815260040161149291906001600160a01b0391909116815260200190565b602060405180830381865afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d39190611a37565b8382815181106114e5576114e5611941565b6020908102919091010152600101611392565b50935093915050565b600081831161151157600061151b565b61151b8284611a24565b9392505050565b6000600182600381111561153857611538611a50565b1192915050565b6001600160a01b038116811461155457600080fd5b50565b60006020828403121561156957600080fd5b813561151b8161153f565b801515811461155457600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156115c1576115c1611582565b604052919050565b600082601f8301126115da57600080fd5b6040516040810181811067ffffffffffffffff821117156115fd576115fd611582565b806040525080604084018581111561161457600080fd5b845b8181101561162e578035835260209283019201611616565b509195945050505050565b6000806000806000806000610120888a03121561165557600080fd5b87359650602088013561166781611574565b955060408801359450606088013593506116848960808a016115c9565b92506116938960c08a016115c9565b9150610100880135905092959891949750929550565b600080604083850312156116bc57600080fd5b82356116c78161153f565b946020939093013593505050565b600067ffffffffffffffff8211156116ef576116ef611582565b5060051b60200190565b600082601f83011261170a57600080fd5b8151602061171f61171a836116d5565b611598565b82815260059290921b8401810191818101908684111561173e57600080fd5b8286015b848110156117695780518060020b811461175c5760008081fd5b8352918301918301611742565b509695505050505050565b600082601f83011261178557600080fd5b8151602061179561171a836116d5565b82815260059290921b840181019181810190868411156117b457600080fd5b8286015b8481101561176957805183529183019183016117b8565b600082601f8301126117e057600080fd5b815160206117f061171a836116d5565b82815260059290921b8401810191818101908684111561180f57600080fd5b8286015b8481101561176957805161182681611574565b8352918301918301611813565b6000806000806080858703121561184957600080fd5b845167ffffffffffffffff8082111561186157600080fd5b818701915087601f83011261187557600080fd5b8151602061188561171a836116d5565b82815260059290921b8401810191818101908b8411156118a457600080fd5b948201945b838610156118cb5785516118bc8161153f565b825294820194908201906118a9565b918a01519198509093505050808211156118e457600080fd5b6118f0888389016116f9565b9450604087015191508082111561190657600080fd5b61191288838901611774565b9350606087015191508082111561192857600080fd5b50611935878288016117cf565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561196957600080fd5b815161151b8161153f565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b600080604083850312156119b157600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611109576111096119c2565b600082611a0c57634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611109576111096119c2565b81810381811115611109576111096119c2565b600060208284031215611a4957600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611a7857600080fd5b815160ff8116811461151b57600080fd5b600181815b80851115611ac4578160001904821115611aaa57611aaa6119c2565b80851615611ab757918102915b93841c9390800290611a8e565b509250929050565b600082611adb57506001611109565b81611ae857506000611109565b8160018114611afe5760028114611b0857611b24565b6001915050611109565b60ff841115611b1957611b196119c2565b50506001821b611109565b5060208310610133831016604e8410600b8410161715611b47575081810a611109565b611b518383611a89565b8060001904821115611b6557611b656119c2565b029392505050565b600061151b60ff841683611acc56fea264697066735822122052c486d10d79048ea7c29a18cd855e7aa9add0f68d15956290ff8d5f5890426864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountToReduceDebt(uint256,bool,uint256,uint256,uint256[2],uint256[2],uint256)": {
        "params": {
          "collateralAmountA": "Total collateral amount in asset A",
          "debtAmountB": "Total debt amount in asset B",
          "decsAB": "10**decimals for A and B",
          "isUnderlyingA": "True if A is underlying",
          "pricesAB": "Prices of A and B, decimals 18",
          "requiredLockedAmountPercent": "Required value of locked amount percent [0..100]",
          "totalAssets": "Total assets of the strategy, in underlying"
        },
        "returns": {
          "deltaDebtAmountB": "The amount by which the debt should be reduced, asset B"
        }
      },
      "getAmountToReduceDebtForStrategy(address,uint256)": {
        "params": {
          "requiredAmountToReduceDebt": "If not zero: we are going to make repay-swap-repay to reduce total        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce        the amount of debt by the given amount.        This amount is set in terms of the token B if there is direct debt, or in terms of the token A otherwise.",
          "requiredLockedAmountPercent": "Required value of locked amount percent [0..100]"
        }
      },
      "getLockedUnderlyingAmount(address)": {
        "details": "We cannot call strategy.getState() because of stack too deep problem",
        "params": {
          "strategy_": "Instance of UniswapV3ConverterStrategy"
        },
        "returns": {
          "estimatedUnderlyingAmount": "Total locked amount recalculated to the underlying",
          "totalAssets": "strategy.totalAssets() - in terms of underlying"
        }
      },
      "isWithdrawByAggCallRequired(address,uint256)": {
        "params": {
          "allowedLockedAmountPercent": "[0...100]",
          "strategy_": "instance of IPairBasedStrategyReaderAccess"
        },
        "returns": {
          "_0": "0: it's not necessary to call withdrawByAgg         1: full withdraw is required (with propNotUnderlying = 0)         2: rebalance of the debts is required with pool proportions (propNotUnderlying = type(uint).max)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DEBTS_REBALANCE_IS_REQUIRED()": {
        "notice": "Possible results of isWithdrawByAggCallRequired:         rebalance of the debts is required with pool proportions (propNotUnderlying = type(uint).max)"
      },
      "FULL_WITHDRAW_IS_REQUIRED()": {
        "notice": "Possible results of isWithdrawByAggCallRequired:         full withdraw is required (with propNotUnderlying = 0)"
      },
      "getAmountToReduceDebt(uint256,bool,uint256,uint256,uint256[2],uint256[2],uint256)": {
        "notice": "Calculate the amount by which the debt should be reduced to reduce locked-amount-percent below given value"
      },
      "getAmountToReduceDebtForStrategy(address,uint256)": {
        "notice": "Calculate the amount by which the debt should be reduced to reduce locked-amount-percent below given value"
      },
      "getLockedUnderlyingAmount(address)": {
        "notice": "Estimate amount of underlying locked in the strategy by TetuConverter"
      },
      "isWithdrawByAggCallRequired(address,uint256)": {
        "notice": "Check if a call of withdrawByAgg is required"
      }
    },
    "notice": "Read raw values and calculate complex values related to UniswapV3ConverterStrategy",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}