{
  "address": "0x9C6cdc64Fc3F43B13deb7971634D838908EB9336",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gains",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "losses",
          "type": "uint256"
        }
      ],
      "name": "BorrowResults",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "debtToInsuranceBefore",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "increaseToDebt",
          "type": "int256"
        }
      ],
      "name": "ChangeDebtToInsuranceOnProfit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investedAssetsBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investedAssetsOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "debtToInsuranceBefore",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "debtToInsuranceAfter",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "increaseToDebt",
          "type": "int256"
        }
      ],
      "name": "FixPriceChanges",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidationThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lossToCover",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "debtToInsuranceInc",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountCovered",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lossUncovered",
          "type": "uint256"
        }
      ],
      "name": "OnCoverLoss",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnedByPrice",
          "type": "uint256"
        }
      ],
      "name": "OnEarningOnWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "deltaGains",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "deltaLosses",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "increaseToDebt",
          "type": "int256"
        }
      ],
      "name": "OnIncreaseDebtToInsurance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReinvestThresholdPercentChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unsentAmount",
          "type": "uint256"
        }
      ],
      "name": "SendToInsurance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lossCovered",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lossUncovered",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investedAssetsBefore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investedAssetsAfter",
          "type": "uint256"
        }
      ],
      "name": "UncoveredLoss",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HARDWORK_LOSS_TOLERANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_CHANGE_PROFIT_TOLERANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITetuConverter",
          "name": "converter",
          "type": "ITetuConverter"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getAssetPriceFromConverter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "indexAsset",
          "type": "uint256"
        }
      ],
      "name": "getAvailableBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "indexAsset",
          "type": "uint256"
        },
        {
          "internalType": "contract ITetuConverter",
          "name": "converter",
          "type": "ITetuConverter"
        },
        {
          "internalType": "uint256[]",
          "name": "quoteAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "depositorLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "indexUnderlying",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "resultAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITetuConverter",
          "name": "converter",
          "type": "ITetuConverter"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getOracleAssetsPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98e6b63153e55acacec1f629c3194d26ac5e6068f3e439ab6740c6e3daffbfea",
  "receipt": {
    "to": null,
    "from": "0xF1dCce3a6c321176C62b71c091E3165CC9C3816E",
    "contractAddress": "0x9C6cdc64Fc3F43B13deb7971634D838908EB9336",
    "transactionIndex": 38,
    "gasUsed": "3873025",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe8c03fa11bd49d82f5e4fedd1456feb2bbdfaa97a50aeb3ea1fe009f3e510c46",
    "transactionHash": "0x98e6b63153e55acacec1f629c3194d26ac5e6068f3e439ab6740c6e3daffbfea",
    "logs": [],
    "blockNumber": 11988812,
    "cumulativeGasUsed": "16368861",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "a408f1fd06b60723e7f996d4b67ed7ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gains\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"}],\"name\":\"BorrowResults\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"debtToInsuranceBefore\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"increaseToDebt\",\"type\":\"int256\"}],\"name\":\"ChangeDebtToInsuranceOnProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedAssetsBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedAssetsOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"debtToInsuranceBefore\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"debtToInsuranceAfter\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"increaseToDebt\",\"type\":\"int256\"}],\"name\":\"FixPriceChanges\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidationThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lossToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"debtToInsuranceInc\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lossUncovered\",\"type\":\"uint256\"}],\"name\":\"OnCoverLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedByPrice\",\"type\":\"uint256\"}],\"name\":\"OnEarningOnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"deltaGains\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"deltaLosses\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"increaseToDebt\",\"type\":\"int256\"}],\"name\":\"OnIncreaseDebtToInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestThresholdPercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unsentAmount\",\"type\":\"uint256\"}],\"name\":\"SendToInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lossCovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lossUncovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedAssetsBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedAssetsAfter\",\"type\":\"uint256\"}],\"name\":\"UncoveredLoss\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HARDWORK_LOSS_TOLERANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_CHANGE_PROFIT_TOLERANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITetuConverter\",\"name\":\"converter\",\"type\":\"ITetuConverter\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAssetPriceFromConverter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"indexAsset\",\"type\":\"uint256\"}],\"name\":\"getAvailableBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"indexAsset\",\"type\":\"uint256\"},{\"internalType\":\"contract ITetuConverter\",\"name\":\"converter\",\"type\":\"ITetuConverter\"},{\"internalType\":\"uint256[]\",\"name\":\"quoteAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"depositorLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexUnderlying\",\"type\":\"uint256\"}],\"name\":\"getLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITetuConverter\",\"name\":\"converter\",\"type\":\"ITetuConverter\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getOracleAssetsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BorrowResults(uint256,uint256)\":{\"params\":{\"gains\":\"Amount received by all pool adapters for the provided collateral, in underlying\",\"losses\":\"Amount paid by all pool adapters for the debts, in underlying\"}},\"ChangeDebtToInsuranceOnProfit(int256,int256)\":{\"details\":\"See comments in {_coverLossAfterPriceChanging}: actual profit-to-cover amount can be less than {increaseToDebt}\",\"params\":{\"debtToInsuranceBefore\":\"Value of debtToInsurance before fix-price-change\",\"increaseToDebt\":\"Value on which {debtToInsuranceBefore} was incremented\"}},\"FixPriceChanges(uint256,uint256,int256,int256,int256)\":{\"params\":{\"debtToInsuranceAfter\":\"New value of the debt to insurance\",\"debtToInsuranceBefore\":\"Value of the debt to insurance before fix price change\",\"increaseToDebt\":\"Amount on which debt to insurance was increased. Actual value {debtToInsuranceAfter}-{debtToInsuranceBefore} can be less than increaseToDebt because some amount can be left uncovered.\"}},\"OnCoverLoss(uint256,int256,uint256,uint256)\":{\"params\":{\"amountCovered\":\"Actually covered amount of loss. If amountCovered < lossToCover => the insurance is not enough\",\"debtToInsuranceInc\":\"The amount by which the debt to insurance increases\",\"lossToCover\":\"Amount of loss that should be covered (it fits to allowed limits, no revert)\",\"lossUncovered\":\"Amount of uncovered losses (not enough insurance)\"}},\"OnEarningOnWithdraw(uint256,uint256)\":{\"details\":\"We assume that earned > earnedByPrice, but it's better to save raw values\"},\"OnIncreaseDebtToInsurance(address[],uint256[],uint256[],uint256[],int256)\":{\"params\":{\"deltaGains\":\"Amounts by which the debt has reduced (supply profit) [sync with {tokens}]\",\"deltaLosses\":\"Amounts by which the debt has increased (increase of amount-to-pay) [sync with {tokens}]\",\"increaseToDebt\":\"Total amount of increasing of the debt to the insurance in underlying\",\"prices\":\"Prices of the {tokens}\",\"tokens\":\"List of possible collateral/borrow assets. One of the is underlying.\"}}},\"kind\":\"dev\",\"methods\":{\"calcInvestedAssets(address[],uint256[],uint256,ITetuConverter,bool)\":{\"details\":\"This is writable function because we need to update current balances in the internal protocols.\",\"params\":{\"indexAsset\":\"Index of the underlying (main asset) in {tokens}\",\"makeCheckpoint_\":\"True - call IBookkeeper.checkpoint in the converter\"},\"returns\":{\"amountOut\":\"Invested asset amount under control (in terms of underlying)\",\"decs\":\"10**decimals\",\"prices\":\"Asset prices in USD, decimals 18\"}},\"calculateIncomeAfterWithdraw(address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Amount for the insurance is sent from the balance, so the sending doesn't change invested assets.\",\"params\":{\"asset\":\"Underlying\",\"balanceBefore\":\"Balance of the underlying at the moment of withdrawing start\",\"earnedByPrices_\":\"Amount of underlying earned because of price changes, it should be send to the insurance.\",\"investedAssets_\":\"Invested assets amount at the moment of withdrawing start\",\"updatedInvestedAssets_\":\"Invested assets amount after withdrawing\"},\"returns\":{\"amountSentToInsurance\":\"Total amount sent to the insurance in result.\"}},\"claimConverterRewards(ITetuConverter,address[],address[],uint256[],uint256[])\":{\"details\":\"The post-processing is rewards conversion to the main asset\",\"params\":{\"amountsOut\":\"Amounts of available rewards\",\"rewardTokens_\":\"Amounts of rewards claimed from the internal pool\",\"tokensOut\":\"List of available rewards - not zero amounts, reward tokens don't repeat\",\"tokens_\":\"tokens received from {_depositorPoolAssets}\"}},\"fixPriceChanges(IConverterStrategyBase.ConverterStrategyBaseState storage,IStrategyV3.BaseState storage,uint256[],address[],uint256)\":{\"params\":{\"amountsInPool\":\"Amount of tokens that can be received from the pool after withdrawing all liquidity. The order of tokens is same as in the {tokens}\",\"indexAsset\":\"Index of the underlying in {tokens}\",\"tokens\":\"Result of {_depositorPoolAssets}\"},\"returns\":{\"earnedOut\":\"Profit that was received because of price changes. It should be sent back to insurance.\",\"investedAssetsOut\":\"Updated value of {csbs.investedAssets}\"}},\"fixTooHighInvestedAssets(address,uint256,IConverterStrategyBase.ConverterStrategyBaseState storage)\":{\"details\":\"If profitToCover was sent only partly, we will postpone sending of remain amount up to the next call      of fixPriceChange in same manner\",\"params\":{\"oldTotalAssets\":\"Total asset at the moment after last call of fixPriceChange,                       decreased on the value of profitToCover.\"}},\"getLiquidityAmount(uint256,address[],uint256,ITetuConverter,uint256[],uint256,uint256)\":{\"params\":{\"quoteAmounts\":\"Results of _depositorQuoteExit(depositorLiquidity)\",\"targetAmount\":\"Required amount of main asset to be withdrawn from the strategy; type(uint).max - withdraw all\"},\"returns\":{\"resultAmount\":\"Amount of liquidity that should be withdrawn from the pool, cannot exceed depositorLiquidity\"}},\"getTokenAmountsPair(ITetuConverter,uint256,address,address,uint256[2])\":{\"params\":{\"liquidationThresholdsAB\":\"[liquidityThreshold of token A, liquidityThreshold of tokenB]\"},\"returns\":{\"loss\":\"New total assets - old total assets\",\"tokenAmounts\":\"Balances of the token A and token B.                     If any balance is zero it's not possible to enter to the pool, so return empty array (len 0)\"}},\"postWithdrawActions(ITetuConverter,address[],uint256,uint256[],uint256,uint256,uint256[],uint256[])\":{\"params\":{\"amountsToConvert\":\"Amounts of {tokens} to be converted, they are located on the balance before withdraw\",\"withdrawnAmounts\":\"Amounts of {tokens} that were withdrew from the pool\"}},\"sendProfitGetAssetBalance(address,uint256,uint256,uint256,IStrategyV3.BaseState storage)\":{\"params\":{\"balanceTheAsset_\":\"Current balance of {theAsset_}\",\"earnedByPrices_\":\"ProfitToCover received from fixPriceChange()\",\"investedAssets_\":\"Value of investedAssets after call fixPriceChange()\",\"theAsset_\":\"The asset passed from Converter\"},\"returns\":{\"balanceTheAssetOut\":\"Final balance of {theAsset_} (after sending profit-to-cover to the insurance)\"}},\"sendToInsurance(address,uint256,address,uint256,uint256)\":{\"params\":{\"balance\":\"Current balance of the underlying\",\"totalAssets_\":\"Total strategy balance = balance of underlying + current invested assets amount\"},\"returns\":{\"sentAmount\":\"Amount of underlying sent to the insurance\",\"unsentAmount\":\"Missed part of the {amount} that were not sent to the insurance\"}}},\"stateVariables\":{\"HARDWORK_LOSS_TOLERANCE\":{\"details\":\"0.5% of max loss for strategy TVL\"},\"PRICE_CHANGE_PROFIT_TOLERANCE\":{\"details\":\"0.5% of max profit for strategy TVL\"}},\"version\":1},\"userdoc\":{\"events\":{\"BorrowResults(uint256,uint256)\":{\"notice\":\"Register amounts received for supplying collaterals and amount paid for the debts\"},\"ChangeDebtToInsuranceOnProfit(int256,int256)\":{\"notice\":\"Value of {debtToInsurance} was increased on {increaseToDebt} inside fix-price-change in the case when invested-asset amounts were increased.\"},\"OnEarningOnWithdraw(uint256,uint256)\":{\"notice\":\"An amount (earned - earnedByPrice) is earned on withdraw and sent to the insurance\"},\"OnIncreaseDebtToInsurance(address[],uint256[],uint256[],uint256[],int256)\":{\"notice\":\"Increase to debts between new and previous checkpoints.\"},\"UncoveredLoss(uint256,uint256,uint256,uint256)\":{\"notice\":\"Amount {lossCovered}+{lossUncovered} should be covered, but it's too high and will produce revert on the splitter side. So, only {lossCovered} can be covered, {lossUncovered} are not covered\"}},\"kind\":\"user\",\"methods\":{\"HARDWORK_LOSS_TOLERANCE()\":{\"notice\":\"Same value as StrategySplitterV2.HARDWORK_LOSS_TOLERANCE\"},\"PRICE_CHANGE_PROFIT_TOLERANCE()\":{\"notice\":\"Limit max amount of profit that can be send to insurance after price changing\"},\"calcInvestedAssets(address[],uint256[],uint256,ITetuConverter,bool)\":{\"notice\":\"Calculate amount we will receive when we withdraw all from pool\"},\"calculateIncomeAfterWithdraw(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculate amount earned after withdraw. Withdraw cannot produce income, so we send all         earned amount to insurance. Also we send to the insurance earned-by-prices-amount here.\"},\"claimConverterRewards(ITetuConverter,address[],address[],uint256[],uint256[])\":{\"notice\":\"Claim rewards from tetuConverter, generate result list of all available rewards and airdrops\"},\"coverLossAndCheckResults(IConverterStrategyBase.ConverterStrategyBaseState storage,address,uint256)\":{\"notice\":\"Call coverPossibleStrategyLoss, covered loss will be sent to vault.         If the loss were covered only partially, emit {NotEnoughInsurance}\"},\"fixPriceChanges(IConverterStrategyBase.ConverterStrategyBaseState storage,IStrategyV3.BaseState storage,uint256[],address[],uint256)\":{\"notice\":\"Calculate profit/loss happened because of price changing. Try to cover the loss, send the profit to the insurance. Increment debt to insurance on amount of increase of the debts.\"},\"fixTooHighInvestedAssets(address,uint256,IConverterStrategyBase.ConverterStrategyBaseState storage)\":{\"notice\":\"Swap can give us more amount out than expected, so we will receive increasing of share price.         To prevent it, we need to send exceeded amount to insurance,         but it's too expensive to make such transfer at the end of withdrawAggByStep.         So, we postpone sending the profit until the next call of fixPriceChange         by manually setting investedAssets equal to the oldTotalAssets\"},\"getAvailableBalances(address[],uint256)\":{\"notice\":\"Get balances of the {tokens_} except balance of the token at {indexAsset} position\"},\"getLiquidityAmount(uint256,address[],uint256,ITetuConverter,uint256[],uint256,uint256)\":{\"notice\":\"Calculate amount of liquidity that should be withdrawn from the pool to get {targetAmount_}               liquidityAmount = _depositorLiquidity() * {liquidityRatioOut} / 1e18         User needs to withdraw {targetAmount_} in some asset.         There are three kinds of available liquidity:         1) liquidity in the pool - {depositorLiquidity_}         2) Converted amounts on balance of the strategy - {baseAmounts_}         3) Liquidity locked in the debts.\"},\"getOracleAssetsPrice(ITetuConverter,address,address)\":{\"notice\":\"Get price of {tokenB} in term of {tokenA} with 18 decimals\"},\"getTokenAmountsPair(ITetuConverter,uint256,address,address,uint256[2])\":{\"notice\":\"Calculate the token amounts for deposit and amount of loss (as old-total-asset - new-total-asset)\"},\"postWithdrawActions(ITetuConverter,address[],uint256,uint256[],uint256,uint256,uint256[],uint256[])\":{\"notice\":\"Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}\"},\"postWithdrawActionsEmpty(ITetuConverter,address[],uint256,uint256[])\":{\"notice\":\"return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}\"},\"registerBorrowResults(ITetuConverter,address)\":{\"notice\":\"Register amounts received for supplying collaterals and amount paid for the debts         for the current period (a new period is started after each hardwork operation)\"},\"sendProfitGetAssetBalance(address,uint256,uint256,uint256,IStrategyV3.BaseState storage)\":{\"notice\":\"Send ProfitToCover to insurance - code fragment of the requirePayAmountBack()         moved here to reduce size of requirePayAmountBack()\"},\"sendToInsurance(address,uint256,address,uint256,uint256)\":{\"notice\":\"Send given {amount} of {asset} (== underlying) to the insurance\"}},\"notice\":\"Continuation of ConverterStrategyBaseLib (workaround for size limits)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/ConverterStrategyBaseLib2.sol\":\"ConverterStrategyBaseLib2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n\\n  // --- DEPENDENCY ADDRESSES\\n  function governance() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function liquidator() external view returns (address);\\n\\n  function forwarder() external view returns (address);\\n\\n  function investFund() external view returns (address);\\n\\n  function veDistributor() external view returns (address);\\n\\n  function platformVoter() external view returns (address);\\n\\n  // --- VAULTS\\n\\n  function vaults(uint id) external view returns (address);\\n\\n  function vaultsList() external view returns (address[] memory);\\n\\n  function vaultsListLength() external view returns (uint);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  // --- restrictions\\n\\n  function isOperator(address _adr) external view returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0x86716b8a4775605c31b8bb9f90f8f4a18b709ff4435182f3a148803368060a8c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IForwarder {\\n\\n  function tetu() external view returns (address);\\n  function tetuThreshold() external view returns (uint);\\n\\n  function tokenPerDestinationLength(address destination) external view returns (uint);\\n\\n  function tokenPerDestinationAt(address destination, uint i) external view returns (address);\\n\\n  function amountPerDestination(address token, address destination) external view returns (uint amount);\\n\\n  function registerIncome(\\n    address[] memory tokens,\\n    uint[] memory amounts,\\n    address vault,\\n    bool isDistribute\\n  ) external;\\n\\n  function distributeAll(address destination) external;\\n\\n  function distribute(address token) external;\\n\\n  function setInvestFundRatio(uint value) external;\\n\\n  function setGaugesRatio(uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x687c497fc034e8d64bca403bac1bf4cd7bd1f107df414c2657325c1b3ab92822\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISplitter {\\n\\n  function init(address controller_, address _asset, address _vault) external;\\n\\n  // *************** ACTIONS **************\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint256 amount) external;\\n\\n  function coverPossibleStrategyLoss(uint earned, uint lost) external;\\n\\n  function doHardWork() external;\\n\\n  function investAll() external;\\n\\n  // **************** VIEWS ***************\\n\\n  function asset() external view returns (address);\\n\\n  function vault() external view returns (address);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function isHardWorking() external view returns (bool);\\n\\n  function strategies(uint i) external view returns (address);\\n\\n  function strategiesLength() external view returns (uint);\\n\\n  function HARDWORK_DELAY() external view returns (uint);\\n\\n  function lastHardWorks(address strategy) external view returns (uint);\\n\\n  function pausedStrategies(address strategy) external view returns (bool);\\n\\n  function pauseInvesting(address strategy) external;\\n\\n  function continueInvesting(address strategy, uint apr) external;\\n\\n  function rebalance(uint percent, uint lossTolerance) external;\\n\\n  function getStrategyCapacity(address strategy) external view returns (uint capacity);\\n\\n}\\n\",\"keccak256\":\"0x266c43734e3da96d9e5dcdd0f19c6dbd58fdc377c9cd361cb12da3e309fbb4ec\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStrategyV2 {\\n\\n  function NAME() external view returns (string memory);\\n\\n  function strategySpecificName() external view returns (string memory);\\n\\n  function PLATFORM() external view returns (string memory);\\n\\n  function STRATEGY_VERSION() external view returns (string memory);\\n\\n  function asset() external view returns (address);\\n\\n  function splitter() external view returns (address);\\n\\n  function compoundRatio() external view returns (uint);\\n\\n  function totalAssets() external view returns (uint);\\n\\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\\n  function isReadyToHardWork() external view returns (bool);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawAllToSplitter() external returns (uint strategyLoss);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawToSplitter(uint amount) external returns (uint strategyLoss);\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// @param amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function investAll(\\n    uint amount_,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external returns (\\n    uint strategyLoss\\n  );\\n\\n  function doHardWork() external returns (uint earned, uint lost);\\n\\n  function setCompoundRatio(uint value) external;\\n\\n  /// @notice Max amount that can be deposited to the strategy (its internal capacity), see SCB-593.\\n  ///         0 means no deposit is allowed at this moment\\n  function capacity() external view returns (uint);\\n\\n  /// @notice {performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\\n  function performanceReceiver() external view returns (address);\\n\\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n  /// @dev use FEE_DENOMINATOR\\n  function performanceFee() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc7dac6097df7310b510f1027ef9c1bd3ccd6a202ca69582f68233ee798f7c312\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IStrategyV2.sol\\\";\\n\\ninterface IStrategyV3 is IStrategyV2 {\\n  struct BaseState {\\n    /// @dev Underlying asset\\n    address asset;\\n\\n    /// @dev Linked splitter\\n    address splitter;\\n\\n    /// @notice {performanceFee}% of total profit is sent to {performanceReceiver} before compounding\\n    /// @dev governance by default\\n    address performanceReceiver;\\n\\n    /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n    /// @dev {DEFAULT_PERFORMANCE_FEE} by default, FEE_DENOMINATOR is used\\n    uint performanceFee;\\n\\n    /// @notice Ratio to split performance fee on toPerf + toInsurance, [0..100_000]\\n    ///         100_000 - send full amount toPerf, 0 - send full amount toInsurance.\\n    uint performanceFeeRatio;\\n\\n    /// @dev Percent of profit for autocompound inside this strategy.\\n    uint compoundRatio;\\n\\n    /// @dev Represent specific name for this strategy. Should include short strategy name and used assets. Uniq across the vault.\\n    string strategySpecificName;\\n  }\\n}\\n\",\"keccak256\":\"0xe8a0179a82c40ba0c372486c5ebcc7df6431216c8c0d91cc408fb8f881e72f70\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0xd5fe6f3ab750cc2d23f573597db5607c701e74c39e13c20c07a921a26c6d5012\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVaultInsurance.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ISplitter.sol\\\";\\n\\ninterface ITetuVaultV2 {\\n\\n  function splitter() external view returns (ISplitter);\\n\\n  function insurance() external view returns (IVaultInsurance);\\n\\n  function depositFee() external view returns (uint);\\n\\n  function withdrawFee() external view returns (uint);\\n\\n  function init(\\n    address controller_,\\n    IERC20 _asset,\\n    string memory _name,\\n    string memory _symbol,\\n    address _gauge,\\n    uint _buffer\\n  ) external;\\n\\n  function setSplitter(address _splitter) external;\\n\\n  function coverLoss(uint amount) external;\\n\\n  function initInsurance(IVaultInsurance _insurance) external;\\n\\n}\\n\",\"keccak256\":\"0x9e77a10b32a52f826d28d17c420f776fd289e5e4f925ec87f7177a1ce224a412\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IVaultInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVaultInsurance {\\n\\n  function init(address _vault, address _asset) external;\\n\\n  function vault() external view returns (address);\\n\\n  function asset() external view returns (address);\\n\\n  function transferToVault(uint amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6461572763b1f6decec1dee9d2ffe8ca152369bdc68255ec083cb3da3ce507a1\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\",\"keccak256\":\"0x2c5be0f4a60126b08e20f40586958ec1b76a27b69406c4b0db19e9dc6f771cfc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\n\\nlibrary StrategyLib {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Denominator for fee calculation.\\n  uint internal constant FEE_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CompoundRatioChanged(uint oldValue, uint newValue);\\n  event StrategySpecificNameChanged(string name);\\n  event EmergencyExit(address sender, uint amount);\\n  event ManualClaim(address sender);\\n  event InvestAll(uint balance);\\n  event WithdrawAllToSplitter(uint amount);\\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant WRONG_VALUE = \\\"SB: Wrong value\\\";\\n  /// @dev Denominator for compound ratio\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        CHECKS AND EMITS\\n  // *************************************************************\\n\\n  function _checkCompoundRatioChanged(address controller, uint oldValue, uint newValue) external {\\n    onlyPlatformVoter(controller);\\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\\n    emit CompoundRatioChanged(oldValue, newValue);\\n  }\\n\\n  function _checkStrategySpecificNameChanged(address controller, string calldata newName) external {\\n    onlyOperators(controller);\\n    emit StrategySpecificNameChanged(newName);\\n  }\\n\\n  function _checkManualClaim(address controller) external {\\n    onlyOperators(controller);\\n    emit ManualClaim(msg.sender);\\n  }\\n\\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\\n    onlySplitter(splitter);\\n    assetBalance = IERC20(asset).balanceOf(address(this));\\n    emit InvestAll(assetBalance);\\n  }\\n\\n  // *************************************************************\\n  //                     RESTRICTIONS\\n  // *************************************************************\\n\\n  /// @dev Restrict access only for operators\\n  function onlyOperators(address controller) public view {\\n    require(IController(controller).isOperator(msg.sender), DENIED);\\n  }\\n\\n  /// @dev Restrict access only for governance\\n  function onlyGovernance(address controller) public view {\\n    require(IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for platform voter\\n  function onlyPlatformVoter(address controller) public view {\\n    require(IController(controller).platformVoter() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for splitter\\n  function onlySplitter(address splitter) public view {\\n    require(splitter == msg.sender, DENIED);\\n  }\\n\\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_) external view {\\n    onlyGovernance(controller);\\n    require(fee_ <= 100_000, TOO_HIGH);\\n    require(receiver_ != address(0), WRONG_VALUE);\\n  }\\n\\n  // *************************************************************\\n  //                       HELPERS\\n  // *************************************************************\\n\\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\\n  ///         Revert if the amount is different from expected too much (high price impact)\\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\\n  /// @param assetPrice Price of the asset, decimals 18\\n  /// @return balance Current asset balance of the strategy\\n  function checkWithdrawImpact(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) public view returns (uint balance) {\\n    balance = IERC20(_asset).balanceOf(address(this));\\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\\n\\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\\n    }\\n  }\\n\\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\\n    onlyOperators(controller);\\n\\n    uint balance = IERC20(asset).balanceOf(address(this));\\n    IERC20(asset).safeTransfer(splitter, balance);\\n    emit EmergencyExit(msg.sender, balance);\\n  }\\n\\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\\n    onlySplitter(splitter);\\n    return IERC20(asset).balanceOf(address(this));\\n  }\\n\\n  function _withdrawAllToSplitterPostActions(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) external {\\n    uint balance = checkWithdrawImpact(\\n      _asset,\\n      balanceBefore,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n\\n    if (balance != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, balance);\\n    }\\n    emit WithdrawAllToSplitter(balance);\\n  }\\n\\n  function _withdrawToSplitterPostActions(\\n    uint amount,\\n    uint balance,\\n    address _asset,\\n    address _splitter\\n  ) external {\\n    uint amountAdjusted = Math.min(amount, balance);\\n    if (amountAdjusted != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\\n    }\\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\\n  }\\n}\\n\",\"keccak256\":\"0xa89e85b9acaeb5238c11c864167c152d0c33cf800fa3bb447e0629ed6fbff67c\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-converter/contracts/interfaces/IBookkeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBookkeeper {\\n  /// @notice Register a new loan\\n  /// @dev This function can be called by a pool adapter only\\n  /// @param collateralAmount Amount of supplied collateral for the new loan\\n  /// @param borrowedAmount Borrowed amount provided for the given {collateralAmount}\\n  function onBorrow(uint collateralAmount, uint borrowedAmount) external;\\n\\n  /// @notice Register loan payment\\n  /// @dev This function can be called by a pool adapter only\\n  /// @param withdrawnCollateral Amount of collateral received by the user during the repaying.\\n  /// @param paidAmount Amount paid by the user during the repaying.\\n  function onRepay(uint withdrawnCollateral, uint paidAmount) external;\\n\\n\\n  /// @notice Save checkpoint for all pool adapters of the given {user_}\\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\\n  function checkpoint(address[] memory tokens_) external returns (\\n    uint[] memory deltaGains,\\n    uint[] memory deltaLosses\\n  );\\n\\n  /// @notice Calculate deltas that user would receive if he creates a checkpoint at the moment\\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\\n  function previewCheckpoint(address user, address[] memory tokens_) external view returns (\\n    uint[] memory deltaGains,\\n    uint[] memory deltaLosses\\n  );\\n\\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the signer\\n  ///         for the current period, start new period.\\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\\n  function startPeriod(address underlying_) external returns (\\n    uint gains,\\n    uint losses\\n  );\\n\\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the {user_}\\n  ///         for the current period, DON'T start new period.\\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\\n  function previewPeriod(address underlying_, address user_) external view returns (uint gains, uint losses);\\n}\",\"keccak256\":\"0x98b7887d604ebcfaf28038c456c6c6893ce10f55b821f4c7c002dbc8055ea388\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Keep and provide addresses of all application contracts\\ninterface IConverterController {\\n  function governance() external view returns (address);\\n\\n  // ********************* Health factor explanation  ****************\\n  // For example, a landing platform has: liquidity threshold = 0.85, LTV=0.8, LTV / LT = 1.0625\\n  // For collateral $100 we can borrow $80. A liquidation happens if the cost of collateral will reduce below $85.\\n  // We set min-health-factor = 1.1, target-health-factor = 1.3\\n  // For collateral 100 we will borrow 100/1.3 = 76.92\\n  //\\n  // Collateral value   100        77            assume that collateral value is decreased at 100/77=1.3 times\\n  // Collateral * LT    85         65.45\\n  // Borrow value       65.38      65.38         but borrow value is the same as before\\n  // Health factor      1.3        1.001         liquidation almost happens here (!)\\n  //\\n  /// So, if we have target factor 1.3, it means, that if collateral amount will decreases at 1.3 times\\n  // and the borrow value won't change at the same time, the liquidation happens at that point.\\n  // Min health factor marks the point at which a rebalancing must be made asap.\\n  // *****************************************************************\\n\\n  //#region ----------------------------------------------------- Configuration\\n\\n  /// @notice min allowed health factor with decimals 2, must be >= 1e2\\n  function minHealthFactor2() external view returns (uint16);\\n  function setMinHealthFactor2(uint16 value_) external;\\n\\n  /// @notice target health factor with decimals 2\\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\\n  ///      or additional borrow and restore the health factor to the given target value\\n  function targetHealthFactor2() external view returns (uint16);\\n  function setTargetHealthFactor2(uint16 value_) external;\\n\\n  /// @notice max allowed health factor with decimals 2\\n  /// @dev For future versions, currently max health factor is not used\\n  function maxHealthFactor2() external view returns (uint16);\\n  /// @dev For future versions, currently max health factor is not used\\n  function setMaxHealthFactor2(uint16 value_) external;\\n\\n  /// @notice get current value of blocks per day. The value is set manually at first and can be auto-updated later\\n  function blocksPerDay() external view returns (uint);\\n  /// @notice set value of blocks per day manually and enable/disable auto update of this value\\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external;\\n  /// @notice Check if it's time to call updateBlocksPerDay()\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view returns (bool);\\n  /// @notice Recalculate blocksPerDay value\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function updateBlocksPerDay(uint periodInSeconds_) external;\\n\\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\\n  function paused() external view returns (bool);\\n\\n  /// @notice the given user is whitelisted and is allowed to make borrow/swap using TetuConverter\\n  function isWhitelisted(address user_) external view returns (bool);\\n\\n  /// @notice The size of the gap by which the debt should be increased upon repayment\\n  ///         Such gaps are required by AAVE pool adapters to workaround dust tokens problem\\n  ///         and be able to make full repayment.\\n  /// @dev Debt gap is applied as following: toPay = debt * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR\\n  function debtGap() external view returns (uint);\\n\\n  /// @notice Allow to rebalance exist debts during burrow, see SCB-708\\n  ///         If the user already has a debt(s) for the given pair of collateral-borrow assets,\\n  ///         new borrow is made using exist pool adapter(s). Exist debt is rebalanced during the borrowing\\n  ///         in both directions, but the rebalancing is asymmetrically limited by thresholds\\n  ///         THRESHOLD_REBALANCE_XXX, see BorrowManager.\\n  function rebalanceOnBorrowEnabled() external view returns (bool);\\n\\n  //#endregion ----------------------------------------------------- Configuration\\n  //#region ----------------------------------------------------- Core application contracts\\n\\n  function tetuConverter() external view returns (address);\\n  function borrowManager() external view returns (address);\\n  function debtMonitor() external view returns (address);\\n  function tetuLiquidator() external view returns (address);\\n  function swapManager() external view returns (address);\\n  function priceOracle() external view returns (address);\\n  function bookkeeper() external view returns (address);\\n  //#endregion ----------------------------------------------------- Core application contracts\\n\\n  //#region ----------------------------------------------------- External contracts\\n  /// @notice A keeper to control health and efficiency of the borrows\\n  function keeper() external view returns (address);\\n  /// @notice Controller of tetu-contracts-v2, that is allowed to update proxy contracts\\n  function proxyUpdater() external view returns (address);\\n  //#endregion ----------------------------------------------------- External contracts\\n}\\n\",\"keccak256\":\"0xff68dab4badf9543c9a0ae5a1314106f0a5b804e8b6669fbea6e2655eb3c741f\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IConverterControllerProvider {\\n  function controller() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71dce61809acb75f9078290e90033ffe816a51f18b7cb296d161e278c36eec86\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPriceOracle {\\n  /// @notice Return asset price in USD, decimals 18\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb11e653eb4d6d7c41f29ee1e3e498253cfa8df1aec3ff31ab527009b79bdb705\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IConverterControllerProvider.sol\\\";\\n\\n/// @notice Main contract of the TetuConverter application\\n/// @dev Borrower (strategy) makes all operations via this contract only.\\ninterface ITetuConverter is IConverterControllerProvider {\\n\\n  /// @notice Find possible borrow strategies and provide \\\"cost of money\\\" as interest for the period for each strategy\\n  ///         Result arrays of the strategy are ordered in ascending order of APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converters Array of available converters ordered in ascending order of APR.\\n  ///                    Each item contains a result contract that should be used for conversion; it supports IConverter\\n  ///                    This address should be passed to borrow-function during conversion.\\n  ///                    The length of array is always equal to the count of available lending platforms.\\n  ///                    Last items in array can contain zero addresses (it means they are not used)\\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\\n  /// @return amountToBorrowsOut Amounts that should be borrowed\\n  ///                            This amount is not zero if corresponded converter is not zero.\\n  /// @return aprs18 Interests on the use of {amountIn_} during the given period, decimals 18\\n  function findBorrowStrategies(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external view returns (\\n    address[] memory converters,\\n    uint[] memory collateralAmountsOut,\\n    uint[] memory amountToBorrowsOut,\\n    int[] memory aprs18\\n  );\\n\\n  /// @notice Find best swap strategy and provide \\\"cost of money\\\" as interest for the period\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow()\\n  /// @return sourceAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                         It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return targetAmountOut Result amount of {targetToken_} after swap\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findSwapStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_\\n  ) external returns (\\n    address converter,\\n    uint sourceAmountOut,\\n    uint targetAmountOut,\\n    int apr18\\n  );\\n\\n  /// @notice Find best conversion strategy (swap or borrow) and provide \\\"cost of money\\\" as interest for the period.\\n  ///         It calls both findBorrowStrategy and findSwapStrategy and selects a best strategy.\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR for swapping.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow().\\n  /// @return collateralAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                             It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return amountToBorrowOut Result amount of {targetToken_} after conversion\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findConversionStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external returns (\\n    address converter,\\n    uint collateralAmountOut,\\n    uint amountToBorrowOut,\\n    int apr18\\n  );\\n\\n  /// @notice Convert {collateralAmount_} to {amountToBorrow_} using {converter_}\\n  ///         Target amount will be transferred to {receiver_}.\\n  ///         Exist debts can be rebalanced fully or partially if {rebalanceOnBorrowEnabled} is ON\\n  /// @dev Transferring of {collateralAmount_} by TetuConverter-contract must be approved by the caller before the call\\n  ///      Only whitelisted users are allowed to make borrows\\n  /// @param converter_ A converter received from findBestConversionStrategy.\\n  /// @param collateralAmount_ Amount of {collateralAsset_} to be converted.\\n  ///                          This amount must be approved to TetuConverter before the call.\\n  /// @param amountToBorrow_ Amount of {borrowAsset_} to be borrowed and sent to {receiver_}\\n  /// @param receiver_ A receiver of borrowed amount\\n  /// @return borrowedAmountOut Exact borrowed amount transferred to {receiver_}\\n  function borrow(\\n    address converter_,\\n    address collateralAsset_,\\n    uint collateralAmount_,\\n    address borrowAsset_,\\n    uint amountToBorrow_,\\n    address receiver_\\n  ) external returns (\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Full or partial repay of the borrow\\n  /// @dev A user should transfer {amountToRepay_} to TetuConverter before calling repay()\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        A user should transfer {amountToRepay_} to TetuConverter before calling repay().\\n  ///        You can know exact total amount of debt using {getStatusCurrent}.\\n  ///        if the amount exceed total amount of the debt:\\n  ///           - the debt will be fully repaid\\n  ///           - remain amount will be swapped from {borrowAsset_} to {collateralAsset_}\\n  ///        This amount should be calculated with taking into account possible debt gap,\\n  ///        You should call getDebtAmountCurrent(debtGap = true) to get this amount.\\n  /// @param receiver_ A receiver of the collateral that will be withdrawn after the repay\\n  ///                  The remained amount of borrow asset will be returned to the {receiver_} too\\n  /// @return collateralAmountOut Exact collateral amount transferred to {collateralReceiver_}\\n  ///         If TetuConverter is not able to make the swap, it reverts\\n  /// @return returnedBorrowAmountOut A part of amount-to-repay that wasn't converted to collateral asset\\n  ///                                 because of any reasons (i.e. there is no available conversion strategy)\\n  ///                                 This amount is returned back to the collateralReceiver_\\n  /// @return swappedLeftoverCollateralOut A part of collateral received through the swapping\\n  /// @return swappedLeftoverBorrowOut A part of amountToRepay_ that was swapped\\n  function repay(\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_,\\n    address receiver_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint returnedBorrowAmountOut,\\n    uint swappedLeftoverCollateralOut,\\n    uint swappedLeftoverBorrowOut\\n  );\\n\\n  /// @notice Estimate result amount after making full or partial repay\\n  /// @dev It works in exactly same way as repay() but don't make actual repay\\n  ///      Anyway, the function is write, not read-only, because it makes updateStatus()\\n  /// @param user_ user whose amount-to-repay will be calculated\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        This amount should be calculated without possible debt gap.\\n  ///        In this way it's differ from {repay}\\n  /// @return collateralAmountOut Total collateral amount to be returned after repay in exchange of {amountToRepay_}\\n  /// @return swappedAmountOut A part of {collateralAmountOut} that were received by direct swap\\n  function quoteRepay(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint swappedAmountOut\\n  );\\n\\n  /// @notice Update status in all opened positions\\n  ///         After this call getDebtAmount will be able to return exact amount to repay\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountCurrent(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice Total amount of borrow tokens that should be repaid to close the borrow completely.\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountStored(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external view returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice User needs to redeem some collateral amount. Calculate an amount of borrow token that should be repaid\\n  /// @param user_ user whose debts will be returned\\n  /// @param collateralAmountRequired_ Amount of collateral required by the user\\n  /// @return borrowAssetAmount Borrowed amount that should be repaid to receive back following amount of collateral:\\n  ///                           amountToReceive = collateralAmountRequired_ - unobtainableCollateralAssetAmount\\n  /// @return unobtainableCollateralAssetAmount A part of collateral that cannot be obtained in any case\\n  ///                                           even if all borrowed amount will be returned.\\n  ///                                           If this amount is not 0, you ask to get too much collateral.\\n  function estimateRepay(\\n    address user_,\\n    address collateralAsset_,\\n    uint collateralAmountRequired_,\\n    address borrowAsset_\\n  ) external view returns (\\n    uint borrowAssetAmount,\\n    uint unobtainableCollateralAssetAmount\\n  );\\n\\n  /// @notice Transfer all reward tokens to {receiver_}\\n  /// @return rewardTokensOut What tokens were transferred. Same reward token can appear in the array several times\\n  /// @return amountsOut Amounts of transferred rewards, the array is synced with {rewardTokens}\\n  function claimRewards(address receiver_) external returns (\\n    address[] memory rewardTokensOut,\\n    uint[] memory amountsOut\\n  );\\n\\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\\n  ///                      It should be transferred on balance of the TetuConverter before the function call\\n  /// @param receiver_ Result amount will be sent to this address\\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\\n  function safeLiquidate(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    address receiver_,\\n    uint priceImpactToleranceSource_,\\n    uint priceImpactToleranceTarget_\\n  ) external returns (\\n    uint amountOut\\n  );\\n\\n  /// @notice Check if {amountOut_} is too different from the value calculated directly using price oracle prices\\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\\n  function isConversionValid(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    uint amountOut_,\\n    uint priceImpactTolerance_\\n  ) external view returns (bool);\\n\\n  /// @notice Close given borrow and return collateral back to the user, governance only\\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\\n  /// @param poolAdapter_ The pool adapter that represents the borrow\\n  /// @param closePosition Close position after repay\\n  ///        Usually it should be true, because the function always tries to repay all debt\\n  ///        false can be used if user doesn't have enough amount to pay full debt\\n  ///              and we are trying to pay \\\"as much as possible\\\"\\n  /// @return collateralAmountOut Amount of collateral returned to the user\\n  /// @return repaidAmountOut Amount of borrow asset paid to the lending platform\\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external returns (\\n    uint collateralAmountOut,\\n    uint repaidAmountOut\\n  );\\n\\n  /// @notice Get active borrows of the user with given collateral/borrowToken\\n  /// @dev Simple access to IDebtMonitor.getPositions\\n  /// @return poolAdaptersOut The instances of IPoolAdapter\\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\\n    address[] memory poolAdaptersOut\\n  );\\n\\n  /// @notice Save token from TC-balance to {receiver}\\n  /// @dev Normally TetuConverter doesn't have any tokens on balance, they can appear there accidentally only\\n  function salvage(address receiver, address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0x87ac3099e1254509929511509c207ecee9a665a3b43d7ee5b98e2ab0d639416d\",\"license\":\"MIT\"},\"contracts/interfaces/IConverterStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\n\\r\\n/// @notice Allow to share declaration of ConverterStrategyBaseState with libraries\\r\\ninterface IConverterStrategyBase {\\r\\n  struct ConverterStrategyBaseState {\\r\\n    /// @dev Amount of underlying assets invested to the pool.\\r\\n    uint investedAssets;\\r\\n\\r\\n    /// @dev Linked Tetu Converter\\r\\n    ITetuConverter converter;\\r\\n\\r\\n    /// @notice Percent of asset amount that can be not invested, it's allowed to just keep it on balance\\r\\n    ///         decimals = {DENOMINATOR}\\r\\n    /// @dev We need this threshold to avoid numerous conversions of small amounts\\r\\n    uint reinvestThresholdPercent;\\r\\n\\r\\n    /// @notice Current debt to the insurance.\\r\\n    ///         It's increased when insurance covers any losses related to swapping and borrow-debts-paying.\\r\\n    ///         It's not changed when insurance covers losses/receives profit that appeared after price changing.\\r\\n    ///         The strategy covers this debt on each hardwork using the profit (rewards, fees)\\r\\n    int debtToInsurance;\\r\\n\\r\\n    /// @notice reserve space for future needs\\r\\n    uint[50-1] __gap;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x0be4f2ba25d955dfa6c9f821ecb466c3ae78f025ad2a85d83d11e22d850047ea\",\"license\":\"MIT\"},\"contracts/libs/AppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice List of all errors generated by the application\\r\\n///         Each error should have unique code TS-XXX and descriptive comment\\r\\nlibrary AppErrors {\\r\\n  /// @notice Provided address should be not zero\\r\\n  string public constant ZERO_ADDRESS = \\\"TS-1 zero address\\\";\\r\\n\\r\\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\\r\\n  string public constant UNISWAP_PAIR_NOT_FOUND = \\\"TS-2 pair not found\\\";\\r\\n\\r\\n  /// @notice Lengths not matched\\r\\n  string public constant WRONG_LENGTHS = \\\"TS-4 wrong lengths\\\";\\r\\n\\r\\n  /// @notice Unexpected zero balance\\r\\n  string public constant ZERO_BALANCE = \\\"TS-5 zero balance\\\";\\r\\n\\r\\n  string public constant ITEM_NOT_FOUND = \\\"TS-6 not found\\\";\\r\\n\\r\\n  string public constant NOT_ENOUGH_BALANCE = \\\"TS-7 not enough balance\\\";\\r\\n\\r\\n  /// @notice Price oracle returns zero price\\r\\n  string public constant ZERO_PRICE = \\\"TS-8 zero price\\\";\\r\\n\\r\\n  string public constant WRONG_VALUE = \\\"TS-9 wrong value\\\";\\r\\n\\r\\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\\r\\n  string public constant ZERO_AMOUNT_BORROWED = \\\"TS-10 zero borrowed amount\\\";\\r\\n\\r\\n  string public constant WITHDRAW_TOO_MUCH = \\\"TS-11 try to withdraw too much\\\";\\r\\n\\r\\n  string public constant UNKNOWN_ENTRY_KIND = \\\"TS-12 unknown entry kind\\\";\\r\\n\\r\\n  string public constant ONLY_TETU_CONVERTER = \\\"TS-13 only TetuConverter\\\";\\r\\n\\r\\n  string public constant WRONG_ASSET = \\\"TS-14 wrong asset\\\";\\r\\n\\r\\n  string public constant NO_LIQUIDATION_ROUTE = \\\"TS-15 No liquidation route\\\";\\r\\n\\r\\n  string public constant PRICE_IMPACT = \\\"TS-16 price impact\\\";\\r\\n\\r\\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\\r\\n  string public constant REPAY_MAKES_SWAP = \\\"TS-17 can not convert back\\\";\\r\\n\\r\\n  string public constant NO_INVESTMENTS = \\\"TS-18 no investments\\\";\\r\\n\\r\\n  string public constant INCORRECT_LENGTHS = \\\"TS-19 lengths\\\";\\r\\n\\r\\n  /// @notice We expect increasing of the balance, but it was decreased\\r\\n  string public constant BALANCE_DECREASE = \\\"TS-20 balance decrease\\\";\\r\\n\\r\\n  /// @notice Prices changed and invested assets amount was increased on S, value of S is too high\\r\\n  string public constant EARNED_AMOUNT_TOO_HIGH = \\\"TS-21 earned too high\\\";\\r\\n\\r\\n  string public constant GOVERNANCE_ONLY = \\\"TS-22 governance only\\\";\\r\\n\\r\\n  string public constant ZERO_VALUE = \\\"TS-24 zero value\\\";\\r\\n\\r\\n  string public constant INCORRECT_SWAP_BY_AGG_PARAM = \\\"TS-25 swap by agg\\\";\\r\\n\\r\\n  string public constant OVER_COLLATERAL_DETECTED = \\\"TS-27 over-collateral\\\";\\r\\n\\r\\n  string public constant NOT_IMPLEMENTED = \\\"TS-28 not implemented\\\";\\r\\n\\r\\n  /// @notice You are not allowed to make direct debt if a NOT-DUST reverse debt exists and visa verse.\\r\\n  string public constant OPPOSITE_DEBT_EXISTS = \\\"TS-29 opposite debt exists\\\";\\r\\n\\r\\n  string public constant INVALID_VALUE = \\\"TS-30 invalid value\\\";\\r\\n\\r\\n  string public constant TOO_HIGH = \\\"TS-32 too high value\\\";\\r\\n\\r\\n  /// @notice BorrowLib has recursive call, sub-calls are not allowed\\r\\n  ///         This error can happen if allowed proportion is too small, i.e. 0.0004 : (1-0.0004)\\r\\n  ///         Such situation can happen if amount to swap is almost equal to the amount of the token in the current tick,\\r\\n  ///         so swap will move us close to the border between ticks.\\r\\n  ///         It was decided, that it's ok to have revert in that case\\r\\n  ///         We can change this behavior by changing BorrowLib.rebalanceRepayBorrow implementation:\\r\\n  ///             if amount-to-repay passed to _repayDebt is too small to be used,\\r\\n  ///             we should increase it min amount required to make repay successfully (amount must be > threshold)\\r\\n  ///         Previously it was error NOT_ALLOWED = \\\"TS23: not allowed\\\", see issues SCB-777, SCB-818\\r\\n  string public constant TOO_DEEP_RECURSION_BORROW_LIB = \\\"TS-33 too deep recursion\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x1400c631697434c991de2bfadcac7a0164a87be41a2cb683ed7f4fc75798d3e8\",\"license\":\"BUSL-1.1\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\\\";\\r\\n\\r\\n/// @notice Common internal utils\\r\\nlibrary AppLib {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// @notice 1% gap to cover possible liquidation inefficiency\\r\\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\\r\\n  uint internal constant GAP_CONVERSION = 1_000;\\r\\n  /// @dev Absolute value for any token\\r\\n  uint internal constant DEFAULT_LIQUIDATION_THRESHOLD = 100_000;\\r\\n  uint internal constant DENOMINATOR = 100_000;\\r\\n\\r\\n  /// @notice Any amount less than the following is dust\\r\\n  uint public constant DUST_AMOUNT_TOKENS = 100;\\r\\n\\r\\n  /// @notice Unchecked increment for for-cycles\\r\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\r\\n    unchecked {\\r\\n      return i + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\r\\n  /// @dev Should NOT be used for third-party pools\\r\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\r\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\r\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\r\\n      IERC20(token).approve(spender, 2 ** 255);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Make approve of {token} to unsafe {spender} (like an aggregator) for fixed {amount}\\r\\n  function approveForced(address token, uint amount, address spender) internal {\\r\\n    IERC20(token).approve(spender, amount);\\r\\n  }\\r\\n\\r\\n  function balance(address token) internal view returns (uint) {\\r\\n    return IERC20(token).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /// @return prices Asset prices in USD, decimals 18\\r\\n  /// @return decs 10**decimals\\r\\n  function _getPricesAndDecs(IPriceOracle priceOracle, address[] memory tokens_, uint len) internal view returns (\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs\\r\\n  ) {\\r\\n    prices = new uint[](len);\\r\\n    decs = new uint[](len);\\r\\n    {\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\\r\\n        prices[i] = priceOracle.getAssetPrice(tokens_[i]);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\\r\\n  function getAssetIndex(address[] memory tokens_, address asset_) internal pure returns (uint) {\\r\\n    uint len = tokens_.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (tokens_[i] == asset_) {\\r\\n        return i;\\r\\n      }\\r\\n    }\\r\\n    return type(uint).max;\\r\\n  }\\r\\n\\r\\n  function _getLiquidator(address controller_) internal view returns (ITetuLiquidator) {\\r\\n    return ITetuLiquidator(IController(controller_).liquidator());\\r\\n  }\\r\\n\\r\\n  function _getPriceOracle(ITetuConverter converter_) internal view returns (IPriceOracle) {\\r\\n    return IPriceOracle(IConverterController(converter_.controller()).priceOracle());\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate liquidation threshold, use default value if the threshold is not set\\r\\n  ///         It's allowed to set any not-zero threshold, it this case default value is not used\\r\\n  /// @dev This function should be applied to the threshold at the moment of the reading its value from the storage.\\r\\n  ///      So, if we pass {mapping(address => uint) storage liquidationThresholds}, the threshold can be zero\\r\\n  ///      bug if we pass {uint liquidationThreshold} to a function, the threshold should be not zero\\r\\n  function _getLiquidationThreshold(uint threshold) internal pure returns (uint) {\\r\\n    return threshold == 0\\r\\n      ? AppLib.DEFAULT_LIQUIDATION_THRESHOLD\\r\\n      : threshold;\\r\\n  }\\r\\n\\r\\n  /// @notice Return a-b OR zero if a < b\\r\\n  function sub0(uint a, uint b) internal pure returns (uint) {\\r\\n    return a > b ? a - b : 0;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7dc2bddc5940fbdc22a6eb59637a71345999fead987b7e5dec86d3e64fb85dd4\",\"license\":\"BUSL-1.1\"},\"contracts/libs/ConverterEntryKinds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice Utils and constants related to entryKind param of ITetuConverter.findBorrowStrategy\\r\\nlibrary ConverterEntryKinds {\\r\\n  /// @notice Amount of collateral is fixed. Amount of borrow should be max possible.\\r\\n  uint constant public ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0 = 0;\\r\\n\\r\\n  /// @notice Split provided source amount S on two parts: C1 and C2 (C1 + C2 = S)\\r\\n  ///         C2 should be used as collateral to make a borrow B.\\r\\n  ///         Results amounts of C1 and B (both in terms of USD) must be in the given proportion\\r\\n  uint constant public ENTRY_KIND_EXACT_PROPORTION_1 = 1;\\r\\n\\r\\n  /// @notice Borrow given amount using min possible collateral\\r\\n  uint constant public ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2 = 2;\\r\\n\\r\\n  /// @notice Decode entryData, extract first uint - entry kind\\r\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\r\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\r\\n    if (entryData_.length == 0) {\\r\\n      return ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0;\\r\\n    }\\r\\n    return abi.decode(entryData_, (uint));\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x4f4332c8be1be5fd85fef7c06795fc19957b35a4f2e3735fdd89c0906ddc923b\",\"license\":\"BUSL-1.1\"},\"contracts/libs/TokenAmountsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./AppErrors.sol\\\";\\r\\n\\r\\n/// @title Library for clearing / joining token addresses & amounts arrays\\r\\n/// @author bogdoslav\\r\\nlibrary TokenAmountsLib {\\r\\n  /// @notice Version of the contract\\r\\n  /// @dev Should be incremented when contract changed\\r\\n  string internal constant TOKEN_AMOUNTS_LIB_VERSION = \\\"1.0.1\\\";\\r\\n\\r\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\r\\n    unchecked {\\r\\n      return i + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function filterZeroAmounts(\\r\\n    address[] memory tokens,\\r\\n    uint[] memory amounts\\r\\n  ) internal pure returns (\\r\\n    address[] memory t,\\r\\n    uint[] memory a\\r\\n  ) {\\r\\n    require(tokens.length == amounts.length, AppErrors.INCORRECT_LENGTHS);\\r\\n    uint len2 = 0;\\r\\n    uint len = tokens.length;\\r\\n    for (uint i = 0; i < len; i++) {\\r\\n      if (amounts[i] != 0) len2++;\\r\\n    }\\r\\n\\r\\n    t = new address[](len2);\\r\\n    a = new uint[](len2);\\r\\n\\r\\n    uint j = 0;\\r\\n    for (uint i = 0; i < len; i++) {\\r\\n      uint amount = amounts[i];\\r\\n      if (amount != 0) {\\r\\n        t[j] = tokens[i];\\r\\n        a[j] = amount;\\r\\n        j++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice unites three arrays to single array without duplicates, amounts are sum, zero amounts are allowed\\r\\n  function combineArrays(\\r\\n    address[] memory tokens0,\\r\\n    uint[] memory amounts0,\\r\\n    address[] memory tokens1,\\r\\n    uint[] memory amounts1,\\r\\n    address[] memory tokens2,\\r\\n    uint[] memory amounts2\\r\\n  ) internal pure returns (\\r\\n    address[] memory allTokens,\\r\\n    uint[] memory allAmounts\\r\\n  ) {\\r\\n    uint[] memory lens = new uint[](3);\\r\\n    lens[0] = tokens0.length;\\r\\n    lens[1] = tokens1.length;\\r\\n    lens[2] = tokens2.length;\\r\\n\\r\\n    require(\\r\\n      lens[0] == amounts0.length && lens[1] == amounts1.length && lens[2] == amounts2.length,\\r\\n      AppErrors.INCORRECT_LENGTHS\\r\\n    );\\r\\n\\r\\n    uint maxLength = lens[0] + lens[1] + lens[2];\\r\\n    address[] memory tokensOut = new address[](maxLength);\\r\\n    uint[] memory amountsOut = new uint[](maxLength);\\r\\n    uint unitedLength;\\r\\n\\r\\n    for (uint step; step < 3; ++step) {\\r\\n      uint[] memory amounts = step == 0\\r\\n        ? amounts0\\r\\n        : (step == 1\\r\\n          ? amounts1\\r\\n          : amounts2);\\r\\n      address[] memory tokens = step == 0\\r\\n        ? tokens0\\r\\n        : (step == 1\\r\\n          ? tokens1\\r\\n          : tokens2);\\r\\n      for (uint i1 = 0; i1 < lens[step]; i1++) {\\r\\n        uint amount1 = amounts[i1];\\r\\n        address token1 = tokens[i1];\\r\\n        bool united = false;\\r\\n\\r\\n        for (uint i = 0; i < unitedLength; i++) {\\r\\n          if (token1 == tokensOut[i]) {\\r\\n            amountsOut[i] += amount1;\\r\\n            united = true;\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        if (!united) {\\r\\n          tokensOut[unitedLength] = token1;\\r\\n          amountsOut[unitedLength] = amount1;\\r\\n          unitedLength++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // copy united tokens to result array\\r\\n    allTokens = new address[](unitedLength);\\r\\n    allAmounts = new uint[](unitedLength);\\r\\n    for (uint i; i < unitedLength; i++) {\\r\\n      allTokens[i] = tokensOut[i];\\r\\n      allAmounts[i] = amountsOut[i];\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3adb8a53441362b47b3bf5c0c7181f7c1652de7dde3df4fb765e8484447d074\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/ConverterStrategyBaseLib2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IBookkeeper.sol\\\";\\r\\nimport \\\"../libs/AppErrors.sol\\\";\\r\\nimport \\\"../libs/AppLib.sol\\\";\\r\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\r\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\r\\nimport \\\"../interfaces/IConverterStrategyBase.sol\\\";\\r\\n\\r\\n/// @notice Continuation of ConverterStrategyBaseLib (workaround for size limits)\\r\\nlibrary ConverterStrategyBaseLib2 {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n//region --------------------------------------- Data types\\r\\n  struct CalcInvestedAssetsLocal {\\r\\n    uint len;\\r\\n    uint[] debts;\\r\\n    address asset;\\r\\n    address token;\\r\\n  }\\r\\n//endregion --------------------------------------- Data types\\r\\n\\r\\n//region --------------------------------------- CONSTANTS\\r\\n  uint internal constant DENOMINATOR = 100_000;\\r\\n\\r\\n  /// @dev 0.5% of max loss for strategy TVL\\r\\n  /// @notice Same value as StrategySplitterV2.HARDWORK_LOSS_TOLERANCE\\r\\n  uint public constant HARDWORK_LOSS_TOLERANCE = 500;\\r\\n\\r\\n  /// @dev 0.5% of max profit for strategy TVL\\r\\n  /// @notice Limit max amount of profit that can be send to insurance after price changing\\r\\n  uint public constant PRICE_CHANGE_PROFIT_TOLERANCE = HARDWORK_LOSS_TOLERANCE;\\r\\n\\r\\n//endregion --------------------------------------- CONSTANTS\\r\\n\\r\\n//region----------------------------------------- EVENTS\\r\\n  event LiquidationThresholdChanged(address token, uint amount);\\r\\n  event ReinvestThresholdPercentChanged(uint amount);\\r\\n  event SendToInsurance(uint sentAmount, uint unsentAmount);\\r\\n\\r\\n  /// @notice Increase to debts between new and previous checkpoints.\\r\\n  /// @param tokens List of possible collateral/borrow assets. One of the is underlying.\\r\\n  /// @param deltaGains Amounts by which the debt has reduced (supply profit) [sync with {tokens}]\\r\\n  /// @param deltaLosses Amounts by which the debt has increased (increase of amount-to-pay) [sync with {tokens}]\\r\\n  /// @param prices Prices of the {tokens}\\r\\n  /// @param increaseToDebt Total amount of increasing of the debt to the insurance in underlying\\r\\n  event OnIncreaseDebtToInsurance(\\r\\n    address[] tokens,\\r\\n    uint[] deltaGains,\\r\\n    uint[] deltaLosses,\\r\\n    uint[] prices,\\r\\n    int increaseToDebt\\r\\n  );\\r\\n\\r\\n  /// @param debtToInsuranceBefore Value of the debt to insurance before fix price change\\r\\n  /// @param debtToInsuranceAfter New value of the debt to insurance\\r\\n  /// @param increaseToDebt Amount on which debt to insurance was increased.\\r\\n  /// Actual value {debtToInsuranceAfter}-{debtToInsuranceBefore} can be less than increaseToDebt\\r\\n  /// because some amount can be left uncovered.\\r\\n  event FixPriceChanges(\\r\\n    uint investedAssetsBefore,\\r\\n    uint investedAssetsOut,\\r\\n    int debtToInsuranceBefore,\\r\\n    int debtToInsuranceAfter,\\r\\n    int increaseToDebt\\r\\n  );\\r\\n\\r\\n  /// @param lossToCover Amount of loss that should be covered (it fits to allowed limits, no revert)\\r\\n  /// @param debtToInsuranceInc The amount by which the debt to insurance increases\\r\\n  /// @param amountCovered Actually covered amount of loss. If amountCovered < lossToCover => the insurance is not enough\\r\\n  /// @param lossUncovered Amount of uncovered losses (not enough insurance)\\r\\n  event OnCoverLoss(\\r\\n    uint lossToCover,\\r\\n    int debtToInsuranceInc,\\r\\n    uint amountCovered,\\r\\n    uint lossUncovered\\r\\n  );\\r\\n\\r\\n  /// @notice Value of {debtToInsurance} was increased on {increaseToDebt} inside fix-price-change\\r\\n  /// in the case when invested-asset amounts were increased.\\r\\n  /// @dev See comments in {_coverLossAfterPriceChanging}: actual profit-to-cover amount can be less than {increaseToDebt}\\r\\n  /// @param debtToInsuranceBefore Value of debtToInsurance before fix-price-change\\r\\n  /// @param increaseToDebt Value on which {debtToInsuranceBefore} was incremented\\r\\n  event ChangeDebtToInsuranceOnProfit(\\r\\n    int debtToInsuranceBefore,\\r\\n    int increaseToDebt\\r\\n  );\\r\\n\\r\\n  /// @notice Amount {lossCovered}+{lossUncovered} should be covered, but it's too high and will produce revert\\r\\n  /// on the splitter side. So, only {lossCovered} can be covered, {lossUncovered} are not covered\\r\\n  event UncoveredLoss(uint lossCovered, uint lossUncovered, uint investedAssetsBefore, uint investedAssetsAfter);\\r\\n\\r\\n  /// @notice Register amounts received for supplying collaterals and amount paid for the debts\\r\\n  /// @param gains Amount received by all pool adapters for the provided collateral, in underlying\\r\\n  /// @param losses Amount paid by all pool adapters for the debts, in underlying\\r\\n  event BorrowResults(uint gains, uint losses);\\r\\n\\r\\n  /// @notice An amount (earned - earnedByPrice) is earned on withdraw and sent to the insurance\\r\\n  /// @dev We assume that earned > earnedByPrice, but it's better to save raw values\\r\\n  event OnEarningOnWithdraw(uint earned, uint earnedByPrice);\\r\\n\\r\\n//endregion----------------------------------------- EVENTS\\r\\n\\r\\n//region----------------------------------------- MAIN LOGIC\\r\\n  /// @notice Get balances of the {tokens_} except balance of the token at {indexAsset} position\\r\\n  function getAvailableBalances(\\r\\n    address[] memory tokens_,\\r\\n    uint indexAsset\\r\\n  ) external view returns (uint[] memory) {\\r\\n    uint len = tokens_.length;\\r\\n    uint[] memory amountsToConvert = new uint[](len);\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i == indexAsset) continue;\\r\\n      amountsToConvert[i] = IERC20(tokens_[i]).balanceOf(address(this));\\r\\n    }\\r\\n    return amountsToConvert;\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice Calculate amount of liquidity that should be withdrawn from the pool to get {targetAmount_}\\r\\n  ///               liquidityAmount = _depositorLiquidity() * {liquidityRatioOut} / 1e18\\r\\n  ///         User needs to withdraw {targetAmount_} in some asset.\\r\\n  ///         There are three kinds of available liquidity:\\r\\n  ///         1) liquidity in the pool - {depositorLiquidity_}\\r\\n  ///         2) Converted amounts on balance of the strategy - {baseAmounts_}\\r\\n  ///         3) Liquidity locked in the debts.\\r\\n  /// @param targetAmount Required amount of main asset to be withdrawn from the strategy; type(uint).max - withdraw all\\r\\n  /// @param quoteAmounts Results of _depositorQuoteExit(depositorLiquidity)\\r\\n  /// @return resultAmount Amount of liquidity that should be withdrawn from the pool, cannot exceed depositorLiquidity\\r\\n  function getLiquidityAmount(\\r\\n    uint targetAmount,\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n    ITetuConverter converter,\\r\\n    uint[] memory quoteAmounts,\\r\\n    uint depositorLiquidity,\\r\\n    uint indexUnderlying\\r\\n  ) external view returns (\\r\\n    uint resultAmount\\r\\n  ) {\\r\\n    // total amount of assetsInPool recalculated to the underlying\\r\\n    // we need to calculate this value in the case of partial withdraw only\\r\\n    // so we assume below that it is equal to 0 if full withdraw is required\\r\\n    uint totalUnderlying;\\r\\n\\r\\n    if (targetAmount != type(uint).max) {\\r\\n      // reduce targetAmount_ on the amounts of not-underlying assets available on the balance\\r\\n      uint len = tokens.length;\\r\\n      (uint[] memory prices, uint[] memory decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(converter), tokens, len);\\r\\n\\r\\n      // calculate total amount of assets invested to the pool\\r\\n      for (uint i; i < tokens.length; i = AppLib.uncheckedInc(i)) {\\r\\n        totalUnderlying += (indexAsset == i)\\r\\n          ? quoteAmounts[i]\\r\\n          : quoteAmounts[i] * prices[i] * decs[indexUnderlying] / prices[indexUnderlying] / decs[i];\\r\\n      }\\r\\n\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        // assume here that the targetAmount_ is already reduced on available balance of the target asset\\r\\n        if (indexAsset == i) continue;\\r\\n\\r\\n        uint tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\r\\n        if (tokenBalance != 0) {\\r\\n          uint tokenBalanceInAsset = tokenBalance * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\\r\\n\\r\\n          targetAmount = targetAmount > tokenBalanceInAsset\\r\\n            ? targetAmount - tokenBalanceInAsset\\r\\n            : 0;\\r\\n\\r\\n          uint tokenBalanceInUnderlying = indexUnderlying == indexAsset\\r\\n            ? tokenBalanceInAsset\\r\\n            : tokenBalance * prices[i] * decs[indexUnderlying] / prices[indexUnderlying] / decs[i];\\r\\n\\r\\n          totalUnderlying = totalUnderlying > tokenBalanceInUnderlying\\r\\n            ? totalUnderlying - tokenBalanceInUnderlying\\r\\n            : 0;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (indexAsset != indexUnderlying) {\\r\\n        // convert targetAmount_ to underlying\\r\\n        targetAmount =  targetAmount * prices[indexAsset] * decs[indexUnderlying] / prices[indexUnderlying] / decs[indexAsset];\\r\\n      }\\r\\n    }\\r\\n\\r\\n    uint liquidityRatioOut = totalUnderlying == 0\\r\\n      ? 1e18\\r\\n      : ((targetAmount == 0)\\r\\n        ? 0\\r\\n        : 1e18 * 101 * targetAmount / totalUnderlying / 100 // a part of amount that we are going to withdraw + 1% on top\\r\\n      );\\r\\n\\r\\n    resultAmount = liquidityRatioOut == 0\\r\\n      ? 0\\r\\n      : Math.min(liquidityRatioOut * depositorLiquidity / 1e18, depositorLiquidity);\\r\\n  }\\r\\n\\r\\n  /// @notice Claim rewards from tetuConverter, generate result list of all available rewards and airdrops\\r\\n  /// @dev The post-processing is rewards conversion to the main asset\\r\\n  /// @param tokens_ tokens received from {_depositorPoolAssets}\\r\\n  /// @param rewardTokens_ List of rewards claimed from the internal pool\\r\\n  /// @param rewardTokens_ Amounts of rewards claimed from the internal pool\\r\\n  /// @param tokensOut List of available rewards - not zero amounts, reward tokens don't repeat\\r\\n  /// @param amountsOut Amounts of available rewards\\r\\n  function claimConverterRewards(\\r\\n    ITetuConverter converter_,\\r\\n    address[] memory tokens_,\\r\\n    address[] memory rewardTokens_,\\r\\n    uint[] memory rewardAmounts_,\\r\\n    uint[] memory balancesBefore\\r\\n  ) external returns (\\r\\n    address[] memory tokensOut,\\r\\n    uint[] memory amountsOut\\r\\n  ) {\\r\\n    // Rewards from TetuConverter\\r\\n    (address[] memory tokensTC, uint[] memory amountsTC) = converter_.claimRewards(address(this));\\r\\n\\r\\n    // Join arrays and recycle tokens\\r\\n    (tokensOut, amountsOut) = TokenAmountsLib.combineArrays(\\r\\n      rewardTokens_, rewardAmounts_,\\r\\n      tokensTC, amountsTC,\\r\\n      // by default, depositor assets have zero amounts here\\r\\n      tokens_, new uint[](tokens_.length)\\r\\n    );\\r\\n\\r\\n    // set fresh balances for depositor tokens\\r\\n    uint len = tokensOut.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      for (uint j; j < tokens_.length; j = AppLib.uncheckedInc(j)) {\\r\\n        if (tokensOut[i] == tokens_[j]) {\\r\\n          amountsOut[i] = IERC20(tokens_[j]).balanceOf(address(this)) - balancesBefore[j];\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // filter zero amounts out\\r\\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokensOut, amountsOut);\\r\\n  }\\r\\n\\r\\n  /// @notice Get price of {tokenB} in term of {tokenA} with 18 decimals\\r\\n  function getOracleAssetsPrice(ITetuConverter converter, address tokenA, address tokenB) external view returns (\\r\\n    uint price\\r\\n  ) {\\r\\n    IPriceOracle oracle = AppLib._getPriceOracle(converter);\\r\\n    uint priceA = oracle.getAssetPrice(tokenA);\\r\\n    uint priceB = oracle.getAssetPrice(tokenB);\\r\\n    price = priceA > 0 ? 1e18 * priceB / priceA : type(uint).max;\\r\\n  }\\r\\n\\r\\n  function getAssetPriceFromConverter(ITetuConverter converter, address token) external view returns (uint) {\\r\\n    return AppLib._getPriceOracle(converter).getAssetPrice(token);\\r\\n  }\\r\\n\\r\\n  /// @notice Try to find zero amount\\r\\n  /// @return True if {amounts_} array contains zero amount\\r\\n  function findZeroAmount(uint[] memory amounts_) internal pure returns (bool) {\\r\\n    uint len = amounts_.length;\\r\\n    for (uint i = 0; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (amounts_[i] == 0) return true;\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n//endregion ----------------------------------------- MAIN LOGIC\\r\\n\\r\\n//region -------------------------------------------- Cover loss, send profit to insurance\\r\\n  /// @notice Send given {amount} of {asset} (== underlying) to the insurance\\r\\n  /// @param totalAssets_ Total strategy balance = balance of underlying + current invested assets amount\\r\\n  /// @param balance Current balance of the underlying\\r\\n  /// @return sentAmount Amount of underlying sent to the insurance\\r\\n  /// @return unsentAmount Missed part of the {amount} that were not sent to the insurance\\r\\n  function sendToInsurance(address asset, uint amount, address splitter, uint totalAssets_, uint balance) external returns (\\r\\n    uint sentAmount,\\r\\n    uint unsentAmount\\r\\n  ) {\\r\\n    return _sendToInsurance(asset, amount, splitter, totalAssets_, balance);\\r\\n  }\\r\\n\\r\\n  function _sendToInsurance(address asset, uint amount, address splitter, uint totalAssets_, uint balance) internal returns (\\r\\n    uint sentAmount,\\r\\n    uint unsentAmount\\r\\n  ) {\\r\\n    uint amountToSend = Math.min(amount, balance);\\r\\n    if (amountToSend != 0) {\\r\\n      // max amount that can be send to insurance is limited by PRICE_CHANGE_PROFIT_TOLERANCE\\r\\n\\r\\n      // Amount limitation should be implemented in the same way as in StrategySplitterV2._coverLoss\\r\\n      // Revert or cut amount in both cases\\r\\n\\r\\n      require(totalAssets_ != 0, AppErrors.ZERO_BALANCE);\\r\\n      amountToSend = Math.min(amountToSend, PRICE_CHANGE_PROFIT_TOLERANCE * totalAssets_ / 100_000);\\r\\n      //require(amountToSend <= PRICE_CHANGE_PROFIT_TOLERANCE * strategyBalance / 100_000, AppErrors.EARNED_AMOUNT_TOO_HIGH);\\r\\n\\r\\n      IERC20(asset).safeTransfer(address(ITetuVaultV2(ISplitter(splitter).vault()).insurance()), amountToSend);\\r\\n    }\\r\\n\\r\\n    sentAmount = amountToSend;\\r\\n    unsentAmount = amount > amountToSend\\r\\n      ? amount - amountToSend\\r\\n      : 0;\\r\\n\\r\\n    emit SendToInsurance(sentAmount, unsentAmount);\\r\\n  }\\r\\n\\r\\n  function _registerIncome(uint assetBefore, uint assetAfter) internal pure returns (uint earned, uint lost) {\\r\\n    if (assetAfter > assetBefore) {\\r\\n      earned = assetAfter - assetBefore;\\r\\n    } else {\\r\\n      lost = assetBefore - assetAfter;\\r\\n    }\\r\\n    return (earned, lost);\\r\\n  }\\r\\n\\r\\n  /// @notice Send ProfitToCover to insurance - code fragment of the requirePayAmountBack()\\r\\n  ///         moved here to reduce size of requirePayAmountBack()\\r\\n  /// @param theAsset_ The asset passed from Converter\\r\\n  /// @param balanceTheAsset_ Current balance of {theAsset_}\\r\\n  /// @param investedAssets_ Value of investedAssets after call fixPriceChange()\\r\\n  /// @param earnedByPrices_ ProfitToCover received from fixPriceChange()\\r\\n  /// @return balanceTheAssetOut Final balance of {theAsset_} (after sending profit-to-cover to the insurance)\\r\\n  function sendProfitGetAssetBalance(\\r\\n    address theAsset_,\\r\\n    uint balanceTheAsset_,\\r\\n    uint investedAssets_,\\r\\n    uint earnedByPrices_,\\r\\n    IStrategyV3.BaseState storage baseState_\\r\\n  ) external returns (\\r\\n    uint balanceTheAssetOut\\r\\n  ) {\\r\\n    balanceTheAssetOut = balanceTheAsset_;\\r\\n    if (earnedByPrices_ != 0) {\\r\\n      address underlying = baseState_.asset;\\r\\n      uint balanceUnderlying = theAsset_ == underlying\\r\\n        ? balanceTheAsset_\\r\\n        : AppLib.balance(underlying);\\r\\n\\r\\n      _sendToInsurance(underlying, earnedByPrices_, baseState_.splitter, investedAssets_ + balanceUnderlying, balanceUnderlying);\\r\\n\\r\\n      if (theAsset_ == underlying) {\\r\\n        balanceTheAssetOut = AppLib.balance(theAsset_);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n//endregion -------------------------------------------- Cover loss, send profit to insurance\\r\\n\\r\\n//region ---------------------------------------- Setters\\r\\n  function checkReinvestThresholdPercentChanged(address controller, uint percent_) external {\\r\\n    StrategyLib.onlyOperators(controller);\\r\\n    require(percent_ <= DENOMINATOR, StrategyLib.WRONG_VALUE);\\r\\n    emit ReinvestThresholdPercentChanged(percent_);\\r\\n  }\\r\\n\\r\\n  function checkLiquidationThresholdChanged(address controller, address token, uint amount) external {\\r\\n    StrategyLib.onlyOperators(controller);\\r\\n    emit LiquidationThresholdChanged(token, amount);\\r\\n  }\\r\\n//endregion ---------------------------------------- Setters\\r\\n\\r\\n//region ---------------------------------------- Withdraw helpers\\r\\n  /// @notice Get amount of assets that we expect to receive after withdrawing\\r\\n  ///         ratio = amount-LP-tokens-to-withdraw / total-amount-LP-tokens-in-pool\\r\\n  /// @param reserves_ Reserves of the {poolAssets_}, same order, same length (we don't check it)\\r\\n  ///                  The order of tokens should be same as in {_depositorPoolAssets()},\\r\\n  ///                  one of assets must be {asset_}\\r\\n  /// @param liquidityAmount_ Amount of LP tokens that we are going to withdraw\\r\\n  /// @param totalSupply_ Total amount of LP tokens in the depositor\\r\\n  /// @return withdrawnAmountsOut Expected withdrawn amounts (decimals == decimals of the tokens)\\r\\n  function getExpectedWithdrawnAmounts(\\r\\n    uint[] memory reserves_,\\r\\n    uint liquidityAmount_,\\r\\n    uint totalSupply_\\r\\n  ) internal pure returns (\\r\\n    uint[] memory withdrawnAmountsOut\\r\\n  ) {\\r\\n    uint ratio = totalSupply_ == 0\\r\\n      ? 0\\r\\n      : (liquidityAmount_ >= totalSupply_\\r\\n        ? 1e18\\r\\n        : 1e18 * liquidityAmount_ / totalSupply_\\r\\n      );\\r\\n\\r\\n    uint len = reserves_.length;\\r\\n    withdrawnAmountsOut = new uint[](len);\\r\\n\\r\\n    if (ratio != 0) {\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        withdrawnAmountsOut[i] = reserves_[i] * ratio / 1e18;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate expected amount of the main asset after withdrawing\\r\\n  /// @param withdrawnAmounts_ Expected amounts to be withdrawn from the pool\\r\\n  /// @param amountsToConvert_ Amounts on balance initially available for the conversion\\r\\n  /// @return amountsOut Expected amounts of the main asset received after conversion withdrawnAmounts+amountsToConvert\\r\\n  function getExpectedAmountMainAsset(\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n    ITetuConverter converter,\\r\\n    uint[] memory withdrawnAmounts_,\\r\\n    uint[] memory amountsToConvert_\\r\\n  ) internal returns (\\r\\n    uint[] memory amountsOut\\r\\n  ) {\\r\\n    uint len = tokens.length;\\r\\n    amountsOut = new uint[](len);\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i == indexAsset) {\\r\\n        amountsOut[i] = withdrawnAmounts_[i];\\r\\n      } else {\\r\\n        uint amount = withdrawnAmounts_[i] + amountsToConvert_[i];\\r\\n        if (amount != 0) {\\r\\n          (amountsOut[i],) = converter.quoteRepay(address(this), tokens[indexAsset], tokens[i], amount);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return amountsOut;\\r\\n  }\\r\\n\\r\\n  /// @notice Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}\\r\\n  /// @param amountsToConvert Amounts of {tokens} to be converted, they are located on the balance before withdraw\\r\\n  /// @param withdrawnAmounts Amounts of {tokens} that were withdrew from the pool\\r\\n  function postWithdrawActions(\\r\\n    ITetuConverter converter,\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n\\r\\n    uint[] memory reservesBeforeWithdraw,\\r\\n    uint liquidityAmountWithdrew,\\r\\n    uint totalSupplyBeforeWithdraw,\\r\\n\\r\\n    uint[] memory amountsToConvert,\\r\\n    uint[] memory withdrawnAmounts\\r\\n  ) external returns (\\r\\n    uint[] memory expectedMainAssetAmounts,\\r\\n    uint[] memory _amountsToConvert\\r\\n  ) {\\r\\n    // estimate expected amount of assets to be withdrawn\\r\\n    uint[] memory expectedWithdrawAmounts = getExpectedWithdrawnAmounts(\\r\\n      reservesBeforeWithdraw,\\r\\n      liquidityAmountWithdrew,\\r\\n      totalSupplyBeforeWithdraw\\r\\n    );\\r\\n\\r\\n    // from received amounts after withdraw calculate how much we receive from converter for them in terms of the underlying asset\\r\\n    expectedMainAssetAmounts = getExpectedAmountMainAsset(\\r\\n      tokens,\\r\\n      indexAsset,\\r\\n      converter,\\r\\n      expectedWithdrawAmounts,\\r\\n      amountsToConvert\\r\\n    );\\r\\n\\r\\n    uint len = tokens.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      amountsToConvert[i] += withdrawnAmounts[i];\\r\\n    }\\r\\n\\r\\n    return (expectedMainAssetAmounts, amountsToConvert);\\r\\n  }\\r\\n\\r\\n  /// @notice return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}\\r\\n  function postWithdrawActionsEmpty(\\r\\n    ITetuConverter converter,\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n    uint[] memory amountsToConvert_\\r\\n  ) external returns (\\r\\n    uint[] memory expectedAmountsMainAsset\\r\\n  ) {\\r\\n    expectedAmountsMainAsset = getExpectedAmountMainAsset(\\r\\n      tokens,\\r\\n      indexAsset,\\r\\n      converter,\\r\\n      // there are no withdrawn amounts\\r\\n      new uint[](tokens.length), // array with all zero values\\r\\n      amountsToConvert_\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate amount earned after withdraw. Withdraw cannot produce income, so we send all\\r\\n  ///         earned amount to insurance. Also we send to the insurance earned-by-prices-amount here.\\r\\n  /// @dev Amount for the insurance is sent from the balance, so the sending doesn't change invested assets.\\r\\n  /// @param asset Underlying\\r\\n  /// @param investedAssets_ Invested assets amount at the moment of withdrawing start\\r\\n  /// @param balanceBefore Balance of the underlying at the moment of withdrawing start\\r\\n  /// @param earnedByPrices_ Amount of underlying earned because of price changes, it should be send to the insurance.\\r\\n  /// @param updatedInvestedAssets_ Invested assets amount after withdrawing\\r\\n  /// @return amountSentToInsurance Total amount sent to the insurance in result.\\r\\n  function calculateIncomeAfterWithdraw(\\r\\n    address splitter,\\r\\n    address asset,\\r\\n    uint investedAssets_,\\r\\n    uint balanceBefore,\\r\\n    uint earnedByPrices_,\\r\\n    uint updatedInvestedAssets_\\r\\n  ) external returns (uint amountSentToInsurance, uint strategyLoss) {\\r\\n    uint balanceAfterWithdraw = AppLib.balance(asset);\\r\\n\\r\\n    // we need to compensate difference if during withdraw we lost some assets\\r\\n    // also we should send earned amounts to the insurance\\r\\n    // it's too dangerous to earn money on withdraw, we can move share price\\r\\n    // in the case of \\\"withdraw almost all\\\" share price can be changed significantly\\r\\n    // so, it's safer to transfer earned amount to the insurance\\r\\n    // earned can exceeds earnedByPrices_\\r\\n    // but if earned < earnedByPrices_ it means that we compensate a part of losses from earned-by-prices.\\r\\n    uint earned;\\r\\n    (earned, strategyLoss) = _registerIncome(\\r\\n      AppLib.sub0(investedAssets_ + balanceBefore, earnedByPrices_),\\r\\n      updatedInvestedAssets_ + balanceAfterWithdraw\\r\\n    );\\r\\n\\r\\n    if (earned != earnedByPrices_) {\\r\\n      emit OnEarningOnWithdraw(earned, earnedByPrices_);\\r\\n    }\\r\\n\\r\\n    if (earned != 0) {\\r\\n      (amountSentToInsurance,) = _sendToInsurance(\\r\\n        asset,\\r\\n        earned,\\r\\n        splitter,\\r\\n        investedAssets_ + balanceBefore,\\r\\n        balanceAfterWithdraw\\r\\n      );\\r\\n    }\\r\\n\\r\\n    return (amountSentToInsurance, strategyLoss);\\r\\n  }\\r\\n//endregion ------------------------------------- Withdraw helpers\\r\\n\\r\\n//region---------------------------------------- calcInvestedAssets\\r\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\r\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\r\\n  /// @param indexAsset Index of the underlying (main asset) in {tokens}\\r\\n  /// @param makeCheckpoint_ True - call IBookkeeper.checkpoint in the converter\\r\\n  /// @return amountOut Invested asset amount under control (in terms of underlying)\\r\\n  /// @return prices Asset prices in USD, decimals 18\\r\\n  /// @return decs 10**decimals\\r\\n  function calcInvestedAssets(\\r\\n    address[] memory tokens,\\r\\n    uint[] memory depositorQuoteExitAmountsOut,\\r\\n    uint indexAsset,\\r\\n    ITetuConverter converter_,\\r\\n    bool makeCheckpoint_\\r\\n  ) external returns (\\r\\n    uint amountOut,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs\\r\\n  ) {\\r\\n    return _calcInvestedAssets(tokens, depositorQuoteExitAmountsOut, indexAsset, converter_, makeCheckpoint_);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\r\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\r\\n  /// @param indexAsset Index of the underlying (main asset) in {tokens}\\r\\n  /// @param makeCheckpoint_ True - call IBookkeeper.checkpoint in the converter\\r\\n  /// @return amountOut Invested asset amount under control (in terms of underlying)\\r\\n  /// @return prices Asset prices in USD, decimals 18\\r\\n  /// @return decs 10**decimals\\r\\n  function _calcInvestedAssets(\\r\\n    address[] memory tokens,\\r\\n    uint[] memory depositorQuoteExitAmountsOut,\\r\\n    uint indexAsset,\\r\\n    ITetuConverter converter_,\\r\\n    bool makeCheckpoint_\\r\\n  ) internal returns (\\r\\n    uint amountOut,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs\\r\\n  ) {\\r\\n    CalcInvestedAssetsLocal memory v;\\r\\n    v.len = tokens.length;\\r\\n    v.asset = tokens[indexAsset];\\r\\n\\r\\n    // calculate prices, decimals\\r\\n    (prices, decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(converter_), tokens, v.len);\\r\\n\\r\\n    // A debt is registered below if we have X amount of asset, need to pay Y amount of the asset and X < Y\\r\\n    // In this case: debt = Y - X, the order of tokens is the same as in {tokens} array\\r\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i == indexAsset) {\\r\\n        // Current strategy balance of main asset is not taken into account here because it's add by splitter\\r\\n        amountOut += depositorQuoteExitAmountsOut[i];\\r\\n      } else {\\r\\n        v.token = tokens[i];\\r\\n        // possible reverse debt: collateralAsset = tokens[i], borrowAsset = underlying\\r\\n        // investedAssets is calculated using exact debts, debt-gaps are not taken into account\\r\\n        (uint toPay, uint collateral) = converter_.getDebtAmountCurrent(address(this), v.token, v.asset, false);\\r\\n        if (amountOut < toPay) {\\r\\n          setDebt(v, indexAsset, toPay);\\r\\n        } else {\\r\\n          amountOut -= toPay;\\r\\n        }\\r\\n\\r\\n        // available amount to repay\\r\\n        uint toRepay = collateral + IERC20(v.token).balanceOf(address(this)) + depositorQuoteExitAmountsOut[i];\\r\\n\\r\\n        // direct debt: collateralAsset = underlying, borrowAsset = tokens[i]\\r\\n        // investedAssets is calculated using exact debts, debt-gaps are not taken into account\\r\\n        (toPay, collateral) = converter_.getDebtAmountCurrent(address(this), v.asset, v.token, false);\\r\\n        amountOut += collateral;\\r\\n\\r\\n        if (toRepay >= toPay) {\\r\\n          amountOut += (toRepay - toPay) * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\\r\\n        } else {\\r\\n          // there is not enough amount to pay the debt\\r\\n          // let's register a debt and try to resolve it later below\\r\\n          setDebt(v, i, toPay - toRepay);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    if (v.debts.length == v.len) {\\r\\n      // we assume here, that it would be always profitable to save collateral\\r\\n      // f.e. if there is not enough amount of USDT on our balance and we have a debt in USDT,\\r\\n      // it's profitable to change any available asset to USDT, pay the debt and return the collateral back\\r\\n      for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\r\\n        if (v.debts[i] == 0) continue;\\r\\n\\r\\n        // estimatedAssets should be reduced on the debt-value\\r\\n        // this estimation is approx and do not count price impact on the liquidation\\r\\n        // we will able to count the real output only after withdraw process\\r\\n        uint debtInAsset = v.debts[i] * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\\r\\n        if (debtInAsset > amountOut) {\\r\\n          // The debt is greater than we can pay. We shouldn't try to pay the debt in this case\\r\\n          amountOut = 0;\\r\\n        } else {\\r\\n          amountOut -= debtInAsset;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (makeCheckpoint_) {\\r\\n      _callCheckpoint(tokens, converter_);\\r\\n    }\\r\\n\\r\\n    return (amountOut, prices, decs);\\r\\n  }\\r\\n\\r\\n  /// @notice Make new checkpoint in converter's bookkeeper\\r\\n  /// As results, a next call of checkpoint will return amount of increases to debts (\\\"deltas\\\")\\r\\n  /// since current moment up to the moment of the next call (we need such deltas in _fixPriceChanges only)\\r\\n  function _callCheckpoint(address[] memory tokens, ITetuConverter converter_) internal returns (\\r\\n    uint[] memory deltaGains,\\r\\n    uint[] memory deltaLosses\\r\\n  ) {\\r\\n    IBookkeeper a = IBookkeeper(IConverterController(converter_.controller()).bookkeeper());\\r\\n    return a.checkpoint(tokens);\\r\\n  }\\r\\n\\r\\n  /// @notice Lazy initialization of v.debts, add {value} to {v.debts[index]}\\r\\n  function setDebt(CalcInvestedAssetsLocal memory v, uint index, uint value) pure internal {\\r\\n    if (v.debts.length == 0) {\\r\\n      // lazy initialization\\r\\n      v.debts = new uint[](v.len);\\r\\n    }\\r\\n\\r\\n    // to pay the following amount we need to swap some other asset at first\\r\\n    v.debts[index] += value;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate the token amounts for deposit and amount of loss (as old-total-asset - new-total-asset)\\r\\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\\r\\n  /// @return loss New total assets - old total assets\\r\\n  /// @return tokenAmounts Balances of the token A and token B.\\r\\n  ///                     If any balance is zero it's not possible to enter to the pool, so return empty array (len 0)\\r\\n  function getTokenAmountsPair(\\r\\n    ITetuConverter converter,\\r\\n    uint totalAssets,\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint[2] calldata liquidationThresholdsAB\\r\\n  ) external returns (\\r\\n    uint loss,\\r\\n    uint[] memory tokenAmounts\\r\\n  ) {\\r\\n    tokenAmounts = new uint[](2);\\r\\n    tokenAmounts[0] = AppLib.balance(tokenA);\\r\\n    tokenAmounts[1] = AppLib.balance(tokenB);\\r\\n\\r\\n    address[] memory tokens = new address[](2);\\r\\n    tokens[0] = tokenA;\\r\\n    tokens[1] = tokenB;\\r\\n\\r\\n    uint[] memory amounts = new uint[](2);\\r\\n    amounts[0] = tokenAmounts[0];\\r\\n\\r\\n    (uint newTotalAssets,,) = _calcInvestedAssets(tokens, amounts, 0, converter, true);\\r\\n    return (\\r\\n      newTotalAssets < totalAssets\\r\\n        ? totalAssets - newTotalAssets\\r\\n        : 0,\\r\\n      (tokenAmounts[0] < liquidationThresholdsAB[0] || tokenAmounts[1] < liquidationThresholdsAB[1])\\r\\n        ? new uint[](0)\\r\\n        : tokenAmounts\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Swap can give us more amount out than expected, so we will receive increasing of share price.\\r\\n  ///         To prevent it, we need to send exceeded amount to insurance,\\r\\n  ///         but it's too expensive to make such transfer at the end of withdrawAggByStep.\\r\\n  ///         So, we postpone sending the profit until the next call of fixPriceChange\\r\\n  ///         by manually setting investedAssets equal to the oldTotalAssets\\r\\n  /// @dev If profitToCover was sent only partly, we will postpone sending of remain amount up to the next call\\r\\n  ///      of fixPriceChange in same manner\\r\\n  /// @param oldTotalAssets Total asset at the moment after last call of fixPriceChange,\\r\\n  ///                       decreased on the value of profitToCover.\\r\\n  function fixTooHighInvestedAssets(\\r\\n    address asset_,\\r\\n    uint oldTotalAssets,\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs_\\r\\n  ) external {\\r\\n    uint balance = IERC20(asset_).balanceOf(address(this));\\r\\n    uint newTotalAssets = csbs_.investedAssets + balance;\\r\\n\\r\\n    if (oldTotalAssets < newTotalAssets) {\\r\\n      // total asset was increased (i.e. because of too profitable swaps)\\r\\n      // this increment will increase share price\\r\\n      // we should send added amount to insurance to avoid share price change\\r\\n      // anyway, it's too expensive to do it here\\r\\n      // so, we postpone sending the profit until the next call of fixPriceChange\\r\\n      if (oldTotalAssets > balance) {\\r\\n        csbs_.investedAssets = oldTotalAssets - balance;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n//endregion------------------------------------- calcInvestedAssets\\r\\n\\r\\n//region ------------------------------------------------------- Bookkeeper logic\\r\\n  /// @notice Make checkpoint (it's writable function) and calculate total cost of the deltas in terms of the {asset}\\r\\n  /// @param tokens Full list of tokens that can be used as collateral/borrow asset by the current strategy\\r\\n  /// @param indexAsset Index of the underlying in {tokens}\\r\\n  /// @return increaseToDebt Total increase-to-debt since previous checkpoint [in underlying]\\r\\n  function _getIncreaseToDebt(\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    ITetuConverter converter\\r\\n  ) internal returns (\\r\\n    int increaseToDebt\\r\\n  ) {\\r\\n    IBookkeeper a = IBookkeeper(IConverterController(converter.controller()).bookkeeper());\\r\\n    (uint[] memory deltaGains, uint[] memory deltaLosses) = a.checkpoint(tokens);\\r\\n\\r\\n    uint len = tokens.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i == indexAsset) {\\r\\n        increaseToDebt -= int(deltaGains[i]);\\r\\n        increaseToDebt += int(deltaLosses[i]);\\r\\n      } else {\\r\\n        increaseToDebt += (int(deltaLosses[i]) - int(deltaGains[i]))\\r\\n          * int(prices[i]) * int(decs[indexAsset]) / int(prices[indexAsset]) / int(decs[i]);\\r\\n      }\\r\\n    }\\r\\n    emit OnIncreaseDebtToInsurance(tokens, deltaGains, deltaLosses, prices, increaseToDebt);\\r\\n\\r\\n    return increaseToDebt;\\r\\n  }\\r\\n\\r\\n  /// @notice Register income and cover possible loss after price changing, emit FixPriceChanges\\r\\n  /// @param investedAssetsBefore Currently stored value of _csbs.investedAssets\\r\\n  /// @param investedAssetsAfter Actual value of invested assets calculated at the current moment\\r\\n  /// @param increaseToDebt The amount by which the total loan debts increased for the selected period\\r\\n  /// @return earned Amount earned because of price changing\\r\\n  function _coverLossAfterPriceChanging(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    uint investedAssetsBefore,\\r\\n    uint investedAssetsAfter,\\r\\n    int increaseToDebt,\\r\\n    IStrategyV3.BaseState storage baseState\\r\\n  ) internal returns (uint earned) {\\r\\n    int debtToInsurance0 = csbs.debtToInsurance;\\r\\n    if (investedAssetsAfter > investedAssetsBefore) {\\r\\n      earned = investedAssetsAfter - investedAssetsBefore;\\r\\n      if (increaseToDebt != 0) {\\r\\n        // Earned amount will be send to the insurance later.\\r\\n        // Probably it can be reduced by same limitations as {lost} amount below\\r\\n        // and so, it will be necessary to decrease increaseToDebt proportionally.\\r\\n        // For simplicity, we increase debtToInsurance on full increaseToDebt always\\r\\n        // in assumption, that such profits are always low.\\r\\n        csbs.debtToInsurance += increaseToDebt;\\r\\n        emit ChangeDebtToInsuranceOnProfit(debtToInsurance0, increaseToDebt);\\r\\n      }\\r\\n    } else {\\r\\n      uint lost = investedAssetsBefore - investedAssetsAfter;\\r\\n      if (lost != 0) {\\r\\n        uint totalAsset = investedAssetsAfter + IERC20(baseState.asset).balanceOf(address(this));\\r\\n        (uint lossToCover, uint lossUncovered) = _getSafeLossToCover(lost, totalAsset);\\r\\n\\r\\n        if (lossUncovered != 0) {\\r\\n          // we need to cover lost-amount, but this amount is too high and will produce revert in the splitter\\r\\n          // so, we will cover only part of {lost} and leave other part uncovered.\\r\\n          emit UncoveredLoss(lossToCover, lossUncovered, investedAssetsBefore, investedAssetsAfter);\\r\\n        }\\r\\n\\r\\n        // if we compensate lost only partially, we reduce both amounts \\\"from prices\\\" and \\\"from debts\\\" proportionally\\r\\n        _coverLossAndCheckResults(csbs, baseState.splitter, lossToCover, increaseToDebt * int(lossToCover) / int(lost));\\r\\n\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit FixPriceChanges(\\r\\n      investedAssetsBefore,\\r\\n      investedAssetsAfter,\\r\\n      debtToInsurance0,\\r\\n      csbs.debtToInsurance,\\r\\n      increaseToDebt\\r\\n    );\\r\\n    return earned;\\r\\n  }\\r\\n\\r\\n  /// @notice Call coverPossibleStrategyLoss, covered loss will be sent to vault.\\r\\n  ///         If the loss were covered only partially, emit {NotEnoughInsurance}\\r\\n  function coverLossAndCheckResults(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    address splitter,\\r\\n    uint lossToCover\\r\\n  ) external {\\r\\n    _coverLossAndCheckResults(csbs, splitter, lossToCover, int(lossToCover));\\r\\n  }\\r\\n\\r\\n  /// @notice Call coverPossibleStrategyLoss, covered loss will be sent to vault.\\r\\n  function _coverLossAndCheckResults(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    address splitter,\\r\\n    uint lossToCover,\\r\\n    int debtToInsuranceInc\\r\\n  ) internal {\\r\\n    address asset = ISplitter(splitter).asset();\\r\\n    address vault = ISplitter(splitter).vault();\\r\\n\\r\\n    uint balanceBefore = IERC20(asset).balanceOf(vault);\\r\\n    ISplitter(splitter).coverPossibleStrategyLoss(0, lossToCover);\\r\\n    uint balanceAfter = IERC20(asset).balanceOf(vault);\\r\\n\\r\\n    uint delta = AppLib.sub0(balanceAfter, balanceBefore);\\r\\n    uint uncovered = AppLib.sub0(lossToCover, delta);\\r\\n    debtToInsuranceInc = lossToCover == 0\\r\\n      ? int(0)\\r\\n      : debtToInsuranceInc * int(lossToCover - uncovered) / int(lossToCover);\\r\\n\\r\\n    if (debtToInsuranceInc != 0) {\\r\\n      csbs.debtToInsurance += debtToInsuranceInc;\\r\\n    }\\r\\n\\r\\n    // we don't add uncovered amount to the debts to the insurance\\r\\n    emit OnCoverLoss(lossToCover, debtToInsuranceInc, delta, uncovered);\\r\\n  }\\r\\n\\r\\n  /// @notice Cut loss-value to safe value that doesn't produce revert inside splitter\\r\\n  function _getSafeLossToCover(uint loss, uint totalAssets_) internal pure returns (\\r\\n    uint lossToCover,\\r\\n    uint lossUncovered\\r\\n  ) {\\r\\n    // see StrategySplitterV2._declareStrategyIncomeAndCoverLoss, _coverLoss implementations\\r\\n    lossToCover = Math.min(loss, ConverterStrategyBaseLib2.HARDWORK_LOSS_TOLERANCE * totalAssets_ / 100_000);\\r\\n    lossUncovered = AppLib.sub0(loss, lossToCover);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate profit/loss happened because of price changing.\\r\\n  /// Try to cover the loss, send the profit to the insurance.\\r\\n  /// Increment debt to insurance on amount of increase of the debts.\\r\\n  /// @param amountsInPool Amount of tokens that can be received from the pool after withdrawing all liquidity.\\r\\n  /// The order of tokens is same as in the {tokens}\\r\\n  /// @param tokens Result of {_depositorPoolAssets}\\r\\n  /// @param indexAsset Index of the underlying in {tokens}\\r\\n  /// @return investedAssetsOut Updated value of {csbs.investedAssets}\\r\\n  /// @return earnedOut Profit that was received because of price changes. It should be sent back to insurance.\\r\\n  function fixPriceChanges(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    IStrategyV3.BaseState storage baseState,\\r\\n    uint[] memory amountsInPool,\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset\\r\\n  ) external returns (\\r\\n    uint investedAssetsOut,\\r\\n    uint earnedOut\\r\\n  ) {\\r\\n    ITetuConverter converter = csbs.converter;\\r\\n    uint investedAssetsBefore = csbs.investedAssets;\\r\\n\\r\\n    uint[] memory prices;\\r\\n    uint[] memory decs;\\r\\n\\r\\n    (investedAssetsOut, prices, decs) = _calcInvestedAssets(tokens, amountsInPool, indexAsset, converter, false);\\r\\n    csbs.investedAssets = investedAssetsOut;\\r\\n\\r\\n    int increaseToDebt = _getIncreaseToDebt(tokens, indexAsset, prices, decs, converter);\\r\\n    earnedOut = _coverLossAfterPriceChanging(csbs, investedAssetsBefore, investedAssetsOut, increaseToDebt, baseState);\\r\\n  }\\r\\n\\r\\n  /// @notice Register amounts received for supplying collaterals and amount paid for the debts\\r\\n  ///         for the current period (a new period is started after each hardwork operation)\\r\\n  function registerBorrowResults(ITetuConverter converter, address asset) external {\\r\\n    IBookkeeper a = IBookkeeper(IConverterController(converter.controller()).bookkeeper());\\r\\n    (uint gains, uint losses) = a.startPeriod(asset);\\r\\n    if (gains != 0 && losses != 0) {\\r\\n      emit BorrowResults(gains, losses);\\r\\n    }\\r\\n  }\\r\\n//endregion ------------------------------------------------------- Bookkeeper logic\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xbf108a509285156685b75ae591c421fc9b514e6011fd95f30ec4bfa13dd9f1d5\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61451261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101365760003560e01c80637325f33f116100b757806397783a6c1161007b57806397783a6c14610311578063a279fb6614610324578063ac2a37d614610344578063d2c3cf2514610372578063e99de4da1461039257600080fd5b80637325f33f1461026e5780637a55caf31461029d5780637a9a23e5146102b05780637fd6c0a1146102de578063890ffb84146102f157600080fd5b80632ce30333116100fe5780632ce30333146101ac57806336436118146101e157806347835cb2146102015780636138ea851461022157806368f9467b1461024e57600080fd5b80630252e2c71461013b57806309d28c5714610161578063142395ef1461016a5780631997c9ee1461016157806326eadaa31461018c575b600080fd5b61014e61014936600461377b565b6103c0565b6040519081526020015b60405180910390f35b61014e6101f481565b81801561017657600080fd5b5061018a610185366004613819565b610829565b005b81801561019857600080fd5b5061018a6101a736600461385a565b6108d8565b8180156101b857600080fd5b506101cc6101c7366004613881565b6108e9565b60408051928352602083019190915201610158565b8180156101ed57600080fd5b506101cc6101fc3660046138da565b610992565b81801561020d57600080fd5b5061018a61021c366004613958565b6109f3565b81801561022d57600080fd5b5061024161023c366004613991565b610b85565b6040516101589190613a4b565b81801561025a57600080fd5b5061018a610269366004613a5e565b610bdf565b81801561027a57600080fd5b5061028e610289366004613aa1565b610c88565b60405161015893929190613b35565b61014e6102ab366004613958565b610cab565b8180156102bc57600080fd5b506102d06102cb366004613b6a565b610d2b565b604051610158929190613c44565b61014e6102ec366004613c69565b610db8565b8180156102fd57600080fd5b506101cc61030c366004613cb4565b610ee0565b61024161031f366004613d06565b610efe565b81801561033057600080fd5b5061014e61033f366004613d4a565b611011565b81801561035057600080fd5b5061036461035f366004613d8e565b61109c565b604051610158929190613df7565b81801561037e57600080fd5b5061018a61038d366004613e10565b611295565b81801561039e57600080fd5b506103b26103ad366004613e3c565b61138a565b604051610158929190613efb565b60008060001989146107975787516000806103e46103dd8a6115b6565b8c8561167b565b9150915060005b8b518110156104d957808b146104aa5781818151811061040d5761040d613f51565b602002602001015183888151811061042757610427613f51565b602002602001015183898151811061044157610441613f51565b602002602001015185848151811061045b5761045b613f51565b60200260200101518c858151811061047557610475613f51565b60200260200101516104879190613f7d565b6104919190613f7d565b61049b9190613faa565b6104a59190613faa565b6104c5565b8881815181106104bc576104bc613f51565b60200260200101515b6104cf9086613fbe565b94506001016103eb565b5060005b838110156106f7578a81146106ef5760008c828151811061050057610500613f51565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016105339190613fd1565b602060405180830381865afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190613fe5565b905080156106ed57600083838151811061059057610590613f51565b6020026020010151858e815181106105aa576105aa613f51565b6020026020010151858f815181106105c4576105c4613f51565b60200260200101518786815181106105de576105de613f51565b6020026020010151856105f19190613f7d565b6105fb9190613f7d565b6106059190613faa565b61060f9190613faa565b9050808f1161061f57600061062b565b808f61062b9190613ffe565b9e5060008d8a146106cc5784848151811061064857610648613f51565b6020026020010151868b8151811061066257610662613f51565b6020026020010151868c8151811061067c5761067c613f51565b602002602001015188878151811061069657610696613f51565b6020026020010151866106a99190613f7d565b6106b39190613f7d565b6106bd9190613faa565b6106c79190613faa565b6106ce565b815b90508088116106de5760006106e8565b6106e88189613ffe565b975050505b505b6001016104dd565b50858a1461079357808a8151811061071157610711613f51565b602002602001015182878151811061072b5761072b613f51565b602002602001015182888151811061074557610745613f51565b6020026020010151848d8151811061075f5761075f613f51565b60200260200101518f6107729190613f7d565b61077c9190613f7d565b6107869190613faa565b6107909190613faa565b9b505b5050505b600081156107db5789156107d4576064826107bb8c680579a814e10a740000613f7d565b6107c59190613faa565b6107cf9190613faa565b6107e5565b60006107e5565b670de0b6b3a76400005b9050801561081857610813670de0b6b3a76400006108038784613f7d565b61080d9190613faa565b86611869565b61081b565b60005b9a9950505050505050505050565b60405163124fdbb760e21b815273fEA4888C097864Ff292D74AaBf05Bce3e9A969599063493f6edc90610860908690600401613fd1565b60006040518083038186803b15801561087857600080fd5b505af415801561088c573d6000803e3d6000fd5b5050604080516001600160a01b0386168152602081018590527f297f3fbc14027d2b4a4f7dac3dff2ad6b386024299045b0e163f131bb24b611d935001905060405180910390a1505050565b6108e48383838461187f565b505050565b60008060006108f788611b4f565b9050600061092061091161090b898b613fbe565b88611bbf565b61091b8488613fbe565b611bd9565b935090508581146109655760408051828152602081018890527f9d826eb710c9c4b327111bf0bd05a18b4fc3c327e701134e79cae1ce27f51f9b910160405180910390a15b80156109855761098189828c61097b8b8d613fbe565b86611c09565b5093505b5050965096945050505050565b6001850154855460009182916001600160a01b03909116906060806109ba888a898789611dc5565b828e559197509250905060006109d389898585896122ba565b90506109e28c8589848f612594565b955050505050509550959350505050565b6000826001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a579190614011565b6001600160a01b03166347b03bba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190614011565b9050600080826001600160a01b0316634be4e9a6856040518263ffffffff1660e01b8152600401610ae99190613fd1565b60408051808303816000875af1158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190614035565b9150915081600014158015610b3f57508015155b15610b7e5760408051838152602081018390527f37aa4ac70052a1bb5d5498a38dae3128bbc585be2886ae01b87e34c85fdccff2910160405180910390a15b5050505050565b6060610bd684848787516001600160401b03811115610ba657610ba661361b565b604051908082528060200260200182016040528015610bcf578160200160208202803683370190505b5086612793565b95945050505050565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190610c0e903090600401613fd1565b602060405180830381865afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f9190613fe5565b90506000818360000154610c639190613fbe565b905080841015610b7e5781841115610b7e57610c7f8285613ffe565b83555050505050565b6000606080610c9a8888888888611dc5565b925092509250955095509592505050565b6000610cb6836115b6565b6001600160a01b031663b3596f07836040518263ffffffff1660e01b8152600401610ce19190613fd1565b602060405180830381865afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d229190613fe5565b90505b92915050565b6060806000610d3b888888612965565b9050610d4a8a8a8d8489612793565b8a5190935060005b81811015610da557858181518110610d6c57610d6c613f51565b6020026020010151878281518110610d8657610d86613f51565b60200260200101818151610d9a9190613fbe565b905250600101610d52565b5085925050509850989650505050505050565b600080610dc4856115b6565b90506000816001600160a01b031663b3596f07866040518263ffffffff1660e01b8152600401610df49190613fd1565b602060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e359190613fe5565b90506000826001600160a01b031663b3596f07866040518263ffffffff1660e01b8152600401610e659190613fd1565b602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190613fe5565b905060008211610eb857600019610ed5565b81610ecb82670de0b6b3a7640000613f7d565b610ed59190613faa565b979650505050505050565b600080610ef08787878787611c09565b915091509550959350505050565b81516060906000816001600160401b03811115610f1d57610f1d61361b565b604051908082528060200260200182016040528015610f46578160200160208202803683370190505b50905060005b828110156110085780851461100057858181518110610f6d57610f6d613f51565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610fa09190613fd1565b602060405180830381865afa158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190613fe5565b828281518110610ff357610ff3613f51565b6020026020010181815250505b600101610f4c565b50949350505050565b838215610bd65781546001600160a01b03908116906000908816821461103f5761103a82611b4f565b611041565b865b600185015490915061106a90839087906001600160a01b0316611064858b613fbe565b85611c09565b5050816001600160a01b0316886001600160a01b0316036110915761108e88611b4f565b92505b505095945050505050565b60408051600280825260608083018452600093909291906020830190803683370190505090506110cb85611b4f565b816000815181106110de576110de613f51565b6020026020010181815250506110f384611b4f565b8160018151811061110657611106613f51565b602090810291909101015260408051600280825260608201909252600091816020016020820280368337019050509050858160008151811061114a5761114a613f51565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061117e5761117e613f51565b6001600160a01b03929092166020928302919091018201526040805160028082526060820183526000939192909183019080368337019050509050826000815181106111cc576111cc613f51565b6020026020010151816000815181106111e7576111e7613f51565b6020026020010181815250506000611204838360008d6001611dc5565b50509050888110611216576000611220565b611220818a613ffe565b8451873590869060009061123657611236613f51565b6020026020010151108061126a575086600160200201358560018151811061126057611260613f51565b6020026020010151105b6112745784611284565b6040805160008152602081019091525b945094505050509550959350505050565b60405163124fdbb760e21b815273fEA4888C097864Ff292D74AaBf05Bce3e9A969599063493f6edc906112cc908590600401613fd1565b60006040518083038186803b1580156112e457600080fd5b505af41580156112f8573d6000803e3d6000fd5b50505050620186a08111156040518060400160405280600f81526020016e53423a2057726f6e672076616c756560881b815250906113525760405162461bcd60e51b8152600401611349919061407d565b60405180910390fd5b506040518181527fe4166dfcf23bbd3e3f764a99dc8fa740554c03c82d6019b81cf265f396f6f2fe9060200160405180910390a15050565b606080600080886001600160a01b031663ef5cfb8c306040518263ffffffff1660e01b81526004016113bc9190613fd1565b6000604051808303816000875af11580156113db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611403919081019061410b565b91509150611457878784848c8d516001600160401b038111156114285761142861361b565b604051908082528060200260200182016040528015611451578160200160208202803683370190505b50612a6c565b8151919550935060005b8181101561159a5760005b8a51811015611591578a818151811061148757611487613f51565b60200260200101516001600160a01b03168783815181106114aa576114aa613f51565b60200260200101516001600160a01b031603611589578781815181106114d2576114d2613f51565b60200260200101518b82815181106114ec576114ec613f51565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161151f9190613fd1565b602060405180830381865afa15801561153c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115609190613fe5565b61156a9190613ffe565b86838151811061157c5761157c613f51565b6020026020010181815250505b60010161146c565b50600101611461565b506115a58585612f93565b909b909a5098505050505050505050565b6000816001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161a9190614011565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611657573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d259190614011565b606080826001600160401b038111156116965761169661361b565b6040519080825280602002602001820160405280156116bf578160200160208202803683370190505b509150826001600160401b038111156116da576116da61361b565b604051908082528060200260200182016040528015611703578160200160208202803683370190505b50905060005b838110156118605784818151811061172357611723613f51565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c91906141cf565b61179790600a6142d6565b8282815181106117a9576117a9613f51565b602002602001018181525050856001600160a01b031663b3596f078683815181106117d6576117d6613f51565b60200260200101516040518263ffffffff1660e01b81526004016117fa9190613fd1565b602060405180830381865afa158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183b9190613fe5565b83828151811061184d5761184d613f51565b6020908102919091010152600101611709565b50935093915050565b60008183106118785781610d22565b5090919050565b6000836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e39190614011565b90506000846001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119499190614011565b90506000826001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016119799190613fd1565b602060405180830381865afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba9190613fe5565b604051630855081f60e01b815260006004820152602481018790529091506001600160a01b03871690630855081f90604401600060405180830381600087803b158015611a0657600080fd5b505af1158015611a1a573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a0823190611a4d908690600401613fd1565b602060405180830381865afa158015611a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8e9190613fe5565b90506000611a9c8284611bbf565b90506000611aaa8883611bbf565b90508715611ad65787611abd8282613ffe565b611ac790896142e5565b611ad19190614315565b611ad9565b60005b96508615611afb57868a6003016000828254611af59190614343565b90915550505b6040805189815260208101899052908101839052606081018290527ff13a1512eb9fa6413cdb85c01e914c6df0dadc043d9aeec658469e95f5d059679060800160405180910390a150505050505050505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611b7e903090600401613fd1565b602060405180830381865afa158015611b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d259190613fe5565b6000818311611bcf576000610d22565b610d228284613ffe565b60008083831115611bf557611bee8484613ffe565b9150611c02565b611bff8385613ffe565b90505b9250929050565b6000806000611c188785611869565b90508015611d635760408051808201909152601181527054532d35207a65726f2062616c616e636560781b602082015285611c665760405162461bcd60e51b8152600401611349919061407d565b50611c8a81620186a0611c7b886101f4613f7d565b611c859190613faa565b611869565b9050611d63866001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf19190614011565b6001600160a01b03166389cf32046040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d529190614011565b6001600160a01b038a169083613181565b809250808711611d74576000611d7e565b611d7e8188613ffe565b60408051858152602081018390529193507fbaad96f61e3091f46555dc5cf915745a34dbd0981adc3f1c6747a4d5a1ffa055910160405180910390a1509550959350505050565b6000606080611e076040518060800160405280600081526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b885181528851899088908110611e1f57611e1f613f51565b60209081029190910101516001600160a01b03166040820152611e4d611e44876115b6565b82518b9061167b565b909350915060005b815181101561217f57878103611e9157888181518110611e7757611e77613f51565b602002602001015185611e8a9190613fbe565b9450612177565b898181518110611ea357611ea3613f51565b60209081029190910101516001600160a01b0390811660608401819052604080850151905163dd27ede760e01b8152306004820152602481019290925282166044820152600060648201819052918291908a169063dd27ede79060840160408051808303816000875af1158015611f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f429190614035565b9150915081871015611f5e57611f59848b846131d3565b611f6b565b611f688288613ffe565b96505b60008b8481518110611f7f57611f7f613f51565b602002602001015185606001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611fb79190613fd1565b602060405180830381865afa158015611fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff89190613fe5565b6120029084613fbe565b61200c9190613fbe565b6040808701516060880151915163dd27ede760e01b81523060048201526001600160a01b039182166024820152918116604483015260006064830152919250908b169063dd27ede79060840160408051808303816000875af1158015612076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209a9190614035565b90935091506120a98289613fbe565b975082811061215f578584815181106120c4576120c4613f51565b6020026020010151878c815181106120de576120de613f51565b6020026020010151878d815181106120f8576120f8613f51565b602002602001015189878151811061211257612112613f51565b602002602001015186856121269190613ffe565b6121309190613f7d565b61213a9190613f7d565b6121449190613faa565b61214e9190613faa565b6121589089613fbe565b9750612173565b612173858561216e8487613ffe565b6131d3565b5050505b600101611e55565b5080516020820151510361229b5760005b815181101561229957816020015181815181106121af576121af613f51565b6020026020010151600003156122915760008382815181106121d3576121d3613f51565b6020026020010151858a815181106121ed576121ed613f51565b6020026020010151858b8151811061220757612207613f51565b602002602001015187858151811061222157612221613f51565b60200260200101518660200151868151811061223f5761223f613f51565b60200260200101516122519190613f7d565b61225b9190613f7d565b6122659190613faa565b61226f9190613faa565b905085811115612282576000955061228f565b61228c8187613ffe565b95505b505b600101612190565b505b84156122ae576122ab898761325c565b50505b50955095509592505050565b600080826001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231f9190614011565b6001600160a01b03166347b03bba6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561235c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123809190614011565b9050600080826001600160a01b03166338bc8c5e8a6040518263ffffffff1660e01b81526004016123b191906143a4565b6000604051808303816000875af11580156123d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123f891908101906143b7565b8a51919350915060005b81811015612547578981036124645783818151811061242357612423613f51565b6020026020010151866124369190614403565b955082818151811061244a5761244a613f51565b60200260200101518661245d9190614343565b955061253f565b87818151811061247657612476613f51565b6020026020010151898b8151811061249057612490613f51565b6020026020010151898c815181106124aa576124aa613f51565b60200260200101518b84815181106124c4576124c4613f51565b60200260200101518785815181106124de576124de613f51565b60200260200101518786815181106124f8576124f8613f51565b602002602001015161250a9190614403565b61251491906142e5565b61251e91906142e5565b6125289190614315565b6125329190614315565b61253c9087614343565b95505b600101612402565b507f3c494ff6e1b11028d08783f71eb95f6a0f9705f6b74f85470926baa577ad52308a84848b8960405161257f95949392919061442a565b60405180910390a15050505095945050505050565b60038501546000908585111561260e576125ae8686613ffe565b9150831561260957838760030160008282546125ca9190614343565b909155505060408051828152602081018690527f9dca6303e24e8874cf8b056d48a1351b6a2725e7a309caa33a6a4f74a455ab25910160405180910390a15b612736565b600061261a8688613ffe565b905080156127345783546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612652903090600401613fd1565b602060405180830381865afa15801561266f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126939190613fe5565b61269d9088613fbe565b90506000806126ac84846133a6565b91509150806000146127015760408051838152602081018390529081018b9052606081018a90527f79ebefb350a48e2a470929fdbef327f4d53ceaafdd43e30e288f0279aa70e5fd9060800160405180910390a15b6001870154612730908c906001600160a01b03168487612721828e6142e5565b61272b9190614315565b61187f565b5050505b505b60038701546040805188815260208101889052808201849052606081019290925260808201869052517fdefa80b22e5fab3e2037351d0afab9e865dd4e3e4738002818eed2e6b25cc0139181900360a00190a15095945050505050565b8451606090806001600160401b038111156127b0576127b061361b565b6040519080825280602002602001820160405280156127d9578160200160208202803683370190505b50915060005b818110156110915786810361282b5784818151811061280057612800613f51565b602002602001015183828151811061281a5761281a613f51565b60200260200101818152505061295d565b600084828151811061283f5761283f613f51565b602002602001015186838151811061285957612859613f51565b602002602001015161286b9190613fbe565b9050801561295b57866001600160a01b031663667df249308b8b8151811061289557612895613f51565b60200260200101518c86815181106128af576128af613f51565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291831660248301529190911660448201526064810184905260840160408051808303816000875af1158015612917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293b9190614035565b5084838151811061294e5761294e613f51565b6020026020010181815250505b505b6001016127df565b6060600082156129a75782841015612999578261298a85670de0b6b3a7640000613f7d565b6129949190613faa565b6129aa565b670de0b6b3a76400006129aa565b60005b8551909150806001600160401b038111156129c7576129c761361b565b6040519080825280602002602001820160405280156129f0578160200160208202803683370190505b5092508115612a635760005b81811015612a6157670de0b6b3a764000083888381518110612a2057612a20613f51565b6020026020010151612a329190613f7d565b612a3c9190613faa565b848281518110612a4e57612a4e613f51565b60209081029190910101526001016129fc565b505b50509392505050565b604080516003808252608082019092526060918291600091602082018480368337019050509050885181600081518110612aa857612aa8613f51565b602002602001018181525050865181600181518110612ac957612ac9613f51565b602002602001018181525050845181600281518110612aea57612aea613f51565b602002602001018181525050875181600081518110612b0b57612b0b613f51565b6020026020010151148015612b3a5750855181600181518110612b3057612b30613f51565b6020026020010151145b8015612b605750835181600281518110612b5657612b56613f51565b6020026020010151145b6040518060400160405280600d81526020016c54532d3139206c656e6774687360981b81525090612ba45760405162461bcd60e51b8152600401611349919061407d565b50600081600281518110612bba57612bba613f51565b602002602001015182600181518110612bd557612bd5613f51565b602002602001015183600081518110612bf057612bf0613f51565b6020026020010151612c029190613fbe565b612c0c9190613fbe565b90506000816001600160401b03811115612c2857612c2861361b565b604051908082528060200260200182016040528015612c51578160200160208202803683370190505b5090506000826001600160401b03811115612c6e57612c6e61361b565b604051908082528060200260200182016040528015612c97578160200160208202803683370190505b5090506000805b6003811015612e595760008115612cc35781600114612cbd5789612cc5565b8b612cc5565b8d5b905060008215612ce35782600114612cdd578b612ce5565b8d612ce5565b8f5b905060005b888481518110612cfc57612cfc613f51565b6020026020010151811015612e45576000838281518110612d1f57612d1f613f51565b602002602001015190506000838381518110612d3d57612d3d613f51565b602002602001015190506000805b88811015612dca578a8181518110612d6557612d65613f51565b60200260200101516001600160a01b0316836001600160a01b031603612db857838a8281518110612d9857612d98613f51565b60200260200101818151612dac9190613fbe565b90525060019150612dca565b80612dc28161448a565b915050612d4b565b5080612e2f57818a8981518110612de357612de3613f51565b60200260200101906001600160a01b031690816001600160a01b03168152505082898981518110612e1657612e16613f51565b602090810291909101015287612e2b8161448a565b9850505b5050508080612e3d9061448a565b915050612cea565b50505080612e529061448a565b9050612c9e565b50806001600160401b03811115612e7257612e7261361b565b604051908082528060200260200182016040528015612e9b578160200160208202803683370190505b509650806001600160401b03811115612eb657612eb661361b565b604051908082528060200260200182016040528015612edf578160200160208202803683370190505b50955060005b81811015612f8257838181518110612eff57612eff613f51565b6020026020010151888281518110612f1957612f19613f51565b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110612f4b57612f4b613f51565b6020026020010151878281518110612f6557612f65613f51565b602090810291909101015280612f7a8161448a565b915050612ee5565b505050505050965096945050505050565b60608082518451146040518060400160405280600d81526020016c54532d3139206c656e6774687360981b81525090612fdf5760405162461bcd60e51b8152600401611349919061407d565b508351600090815b818110156130305785818151811061300157613001613f51565b602002602001015160001461301e578261301a8161448a565b9350505b806130288161448a565b915050612fe7565b50816001600160401b038111156130495761304961361b565b604051908082528060200260200182016040528015613072578160200160208202803683370190505b509350816001600160401b0381111561308d5761308d61361b565b6040519080825280602002602001820160405280156130b6578160200160208202803683370190505b5092506000805b828110156131765760008782815181106130d9576130d9613f51565b6020026020010151905080600014613163578882815181106130fd576130fd613f51565b602002602001015187848151811061311757613117613f51565b60200260200101906001600160a01b031690816001600160a01b0316815250508086848151811061314a5761314a613f51565b60209081029190910101528261315f8161448a565b9350505b508061316e8161448a565b9150506130bd565b505050509250929050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526108e49084906133c9565b8260200151516000036132295782516001600160401b038111156131f9576131f961361b565b604051908082528060200260200182016040528015613222578160200160208202803683370190505b5060208401525b808360200151838151811061324057613240613f51565b602002602001018181516132549190613fbe565b905250505050565b6060806000836001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa15801561329f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c39190614011565b6001600160a01b03166347b03bba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133249190614011565b604051631c5e462f60e11b81529091506001600160a01b038216906338bc8c5e906133539088906004016143a4565b6000604051808303816000875af1158015613372573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261339a91908101906143b7565b92509250509250929050565b6000806133bd84620186a0611c7b866101f4613f7d565b9150611bff8483611bbf565b600061341e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661349b9092919063ffffffff16565b8051909150156108e4578080602001905181019061343c91906144a3565b6108e45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611349565b60606134aa84846000856134b2565b949350505050565b6060824710156135135760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611349565b600080866001600160a01b0316858760405161352f91906144c0565b60006040518083038185875af1925050503d806000811461356c576040519150601f19603f3d011682016040523d82523d6000602084013e613571565b606091505b5091509150610ed587838387606083156135ec5782516000036135e5576001600160a01b0385163b6135e55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611349565b50816134aa565b6134aa83838151156136015781518083602001fd5b8060405162461bcd60e51b8152600401611349919061407d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156136595761365961361b565b604052919050565b60006001600160401b0382111561367a5761367a61361b565b5060051b60200190565b6001600160a01b038116811461369957600080fd5b50565b600082601f8301126136ad57600080fd5b813560206136c26136bd83613661565b613631565b82815260059290921b840181019181810190868411156136e157600080fd5b8286015b848110156137055780356136f881613684565b83529183019183016136e5565b509695505050505050565b803561371b81613684565b919050565b600082601f83011261373157600080fd5b813560206137416136bd83613661565b82815260059290921b8401810191818101908684111561376057600080fd5b8286015b848110156137055780358352918301918301613764565b600080600080600080600060e0888a03121561379657600080fd5b8735965060208801356001600160401b03808211156137b457600080fd5b6137c08b838c0161369c565b975060408a0135965060608a013591506137d982613684565b909450608089013590808211156137ef57600080fd5b506137fc8a828b01613720565b93505060a0880135915060c0880135905092959891949750929550565b60008060006060848603121561382e57600080fd5b833561383981613684565b9250602084013561384981613684565b929592945050506040919091013590565b60008060006060848603121561386f57600080fd5b83359250602084013561384981613684565b60008060008060008060c0878903121561389a57600080fd5b86356138a581613684565b955060208701356138b581613684565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080600060a086880312156138f257600080fd5b853594506020860135935060408601356001600160401b038082111561391757600080fd5b61392389838a01613720565b9450606088013591508082111561393957600080fd5b506139468882890161369c565b95989497509295608001359392505050565b6000806040838503121561396b57600080fd5b823561397681613684565b9150602083013561398681613684565b809150509250929050565b600080600080608085870312156139a757600080fd5b84356139b281613684565b935060208501356001600160401b03808211156139ce57600080fd5b6139da8883890161369c565b94506040870135935060608701359150808211156139f757600080fd5b50613a0487828801613720565b91505092959194509250565b600081518084526020808501945080840160005b83811015613a4057815187529582019590820190600101613a24565b509495945050505050565b602081526000610d226020830184613a10565b600080600060608486031215613a7357600080fd5b8335613a7e81613684565b95602085013595506040909401359392505050565b801515811461369957600080fd5b600080600080600060a08688031215613ab957600080fd5b85356001600160401b0380821115613ad057600080fd5b613adc89838a0161369c565b96506020880135915080821115613af257600080fd5b50613aff88828901613720565b945050604086013592506060860135613b1781613684565b91506080860135613b2781613a93565b809150509295509295909350565b838152606060208201526000613b4e6060830185613a10565b8281036040840152613b608185613a10565b9695505050505050565b600080600080600080600080610100898b031215613b8757600080fd5b613b9089613710565b975060208901356001600160401b0380821115613bac57600080fd5b613bb88c838d0161369c565b985060408b0135975060608b0135915080821115613bd557600080fd5b613be18c838d01613720565b965060808b0135955060a08b0135945060c08b0135915080821115613c0557600080fd5b613c118c838d01613720565b935060e08b0135915080821115613c2757600080fd5b50613c348b828c01613720565b9150509295985092959890939650565b604081526000613c576040830185613a10565b8281036020840152610bd68185613a10565b600080600060608486031215613c7e57600080fd5b8335613c8981613684565b92506020840135613c9981613684565b91506040840135613ca981613684565b809150509250925092565b600080600080600060a08688031215613ccc57600080fd5b8535613cd781613684565b9450602086013593506040860135613cee81613684565b94979396509394606081013594506080013592915050565b60008060408385031215613d1957600080fd5b82356001600160401b03811115613d2f57600080fd5b613d3b8582860161369c565b95602094909401359450505050565b600080600080600060a08688031215613d6257600080fd5b8535613d6d81613684565b97602087013597506040870135966060810135965060800135945092505050565b600080600080600060c08688031215613da657600080fd5b8535613db181613684565b9450602086013593506040860135613dc881613684565b92506060860135613dd881613684565b915060c08601871015613dea57600080fd5b5092959194509260800190565b8281526040602082015260006134aa6040830184613a10565b60008060408385031215613e2357600080fd5b8235613e2e81613684565b946020939093013593505050565b600080600080600060a08688031215613e5457600080fd5b8535613e5f81613684565b945060208601356001600160401b0380821115613e7b57600080fd5b613e8789838a0161369c565b95506040880135915080821115613e9d57600080fd5b613ea989838a0161369c565b94506060880135915080821115613ebf57600080fd5b613ecb89838a01613720565b93506080880135915080821115613ee157600080fd5b50613eee88828901613720565b9150509295509295909350565b604080825283519082018190526000906020906060840190828701845b82811015613f3d5781516001600160a01b031684529284019290840190600101613f18565b50505083810382850152613b608186613a10565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d2557610d25613f67565b634e487b7160e01b600052601260045260246000fd5b600082613fb957613fb9613f94565b500490565b80820180821115610d2557610d25613f67565b6001600160a01b0391909116815260200190565b600060208284031215613ff757600080fd5b5051919050565b81810381811115610d2557610d25613f67565b60006020828403121561402357600080fd5b815161402e81613684565b9392505050565b6000806040838503121561404857600080fd5b505080516020909101519092909150565b60005b8381101561407457818101518382015260200161405c565b50506000910152565b602081526000825180602084015261409c816040850160208701614059565b601f01601f19169190910160400192915050565b600082601f8301126140c157600080fd5b815160206140d16136bd83613661565b82815260059290921b840181019181810190868411156140f057600080fd5b8286015b8481101561370557805183529183019183016140f4565b6000806040838503121561411e57600080fd5b82516001600160401b038082111561413557600080fd5b818501915085601f83011261414957600080fd5b815160206141596136bd83613661565b82815260059290921b8401810191818101908984111561417857600080fd5b948201945b8386101561419f57855161419081613684565b8252948201949082019061417d565b918801519196509093505050808211156141b857600080fd5b506141c5858286016140b0565b9150509250929050565b6000602082840312156141e157600080fd5b815160ff8116811461402e57600080fd5b600181815b8085111561422d57816000190482111561421357614213613f67565b8085161561422057918102915b93841c93908002906141f7565b509250929050565b60008261424457506001610d25565b8161425157506000610d25565b816001811461426757600281146142715761428d565b6001915050610d25565b60ff84111561428257614282613f67565b50506001821b610d25565b5060208310610133831016604e8410600b84101617156142b0575081810a610d25565b6142ba83836141f2565b80600019048211156142ce576142ce613f67565b029392505050565b6000610d2260ff841683614235565b80820260008212600160ff1b8414161561430157614301613f67565b8181058314821517610d2557610d25613f67565b60008261432457614324613f94565b600160ff1b82146000198414161561433e5761433e613f67565b500590565b808201828112600083128015821682158216171561436357614363613f67565b505092915050565b600081518084526020808501945080840160005b83811015613a405781516001600160a01b03168752958201959082019060010161437f565b602081526000610d22602083018461436b565b600080604083850312156143ca57600080fd5b82516001600160401b03808211156143e157600080fd5b6143ed868387016140b0565b935060208501519150808211156141b857600080fd5b818103600083128015838313168383128216171561442357614423613f67565b5092915050565b60a08152600061443d60a083018861436b565b828103602084015261444f8188613a10565b905082810360408401526144638187613a10565b905082810360608401526144778186613a10565b9150508260808301529695505050505050565b60006001820161449c5761449c613f67565b5060010190565b6000602082840312156144b557600080fd5b815161402e81613a93565b600082516144d2818460208701614059565b919091019291505056fea26469706673582212206f28fa3d9c1167012f23eae81f00d751dc11abfd6151c318bb094eba9db67d1664736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101365760003560e01c80637325f33f116100b757806397783a6c1161007b57806397783a6c14610311578063a279fb6614610324578063ac2a37d614610344578063d2c3cf2514610372578063e99de4da1461039257600080fd5b80637325f33f1461026e5780637a55caf31461029d5780637a9a23e5146102b05780637fd6c0a1146102de578063890ffb84146102f157600080fd5b80632ce30333116100fe5780632ce30333146101ac57806336436118146101e157806347835cb2146102015780636138ea851461022157806368f9467b1461024e57600080fd5b80630252e2c71461013b57806309d28c5714610161578063142395ef1461016a5780631997c9ee1461016157806326eadaa31461018c575b600080fd5b61014e61014936600461377b565b6103c0565b6040519081526020015b60405180910390f35b61014e6101f481565b81801561017657600080fd5b5061018a610185366004613819565b610829565b005b81801561019857600080fd5b5061018a6101a736600461385a565b6108d8565b8180156101b857600080fd5b506101cc6101c7366004613881565b6108e9565b60408051928352602083019190915201610158565b8180156101ed57600080fd5b506101cc6101fc3660046138da565b610992565b81801561020d57600080fd5b5061018a61021c366004613958565b6109f3565b81801561022d57600080fd5b5061024161023c366004613991565b610b85565b6040516101589190613a4b565b81801561025a57600080fd5b5061018a610269366004613a5e565b610bdf565b81801561027a57600080fd5b5061028e610289366004613aa1565b610c88565b60405161015893929190613b35565b61014e6102ab366004613958565b610cab565b8180156102bc57600080fd5b506102d06102cb366004613b6a565b610d2b565b604051610158929190613c44565b61014e6102ec366004613c69565b610db8565b8180156102fd57600080fd5b506101cc61030c366004613cb4565b610ee0565b61024161031f366004613d06565b610efe565b81801561033057600080fd5b5061014e61033f366004613d4a565b611011565b81801561035057600080fd5b5061036461035f366004613d8e565b61109c565b604051610158929190613df7565b81801561037e57600080fd5b5061018a61038d366004613e10565b611295565b81801561039e57600080fd5b506103b26103ad366004613e3c565b61138a565b604051610158929190613efb565b60008060001989146107975787516000806103e46103dd8a6115b6565b8c8561167b565b9150915060005b8b518110156104d957808b146104aa5781818151811061040d5761040d613f51565b602002602001015183888151811061042757610427613f51565b602002602001015183898151811061044157610441613f51565b602002602001015185848151811061045b5761045b613f51565b60200260200101518c858151811061047557610475613f51565b60200260200101516104879190613f7d565b6104919190613f7d565b61049b9190613faa565b6104a59190613faa565b6104c5565b8881815181106104bc576104bc613f51565b60200260200101515b6104cf9086613fbe565b94506001016103eb565b5060005b838110156106f7578a81146106ef5760008c828151811061050057610500613f51565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016105339190613fd1565b602060405180830381865afa158015610550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190613fe5565b905080156106ed57600083838151811061059057610590613f51565b6020026020010151858e815181106105aa576105aa613f51565b6020026020010151858f815181106105c4576105c4613f51565b60200260200101518786815181106105de576105de613f51565b6020026020010151856105f19190613f7d565b6105fb9190613f7d565b6106059190613faa565b61060f9190613faa565b9050808f1161061f57600061062b565b808f61062b9190613ffe565b9e5060008d8a146106cc5784848151811061064857610648613f51565b6020026020010151868b8151811061066257610662613f51565b6020026020010151868c8151811061067c5761067c613f51565b602002602001015188878151811061069657610696613f51565b6020026020010151866106a99190613f7d565b6106b39190613f7d565b6106bd9190613faa565b6106c79190613faa565b6106ce565b815b90508088116106de5760006106e8565b6106e88189613ffe565b975050505b505b6001016104dd565b50858a1461079357808a8151811061071157610711613f51565b602002602001015182878151811061072b5761072b613f51565b602002602001015182888151811061074557610745613f51565b6020026020010151848d8151811061075f5761075f613f51565b60200260200101518f6107729190613f7d565b61077c9190613f7d565b6107869190613faa565b6107909190613faa565b9b505b5050505b600081156107db5789156107d4576064826107bb8c680579a814e10a740000613f7d565b6107c59190613faa565b6107cf9190613faa565b6107e5565b60006107e5565b670de0b6b3a76400005b9050801561081857610813670de0b6b3a76400006108038784613f7d565b61080d9190613faa565b86611869565b61081b565b60005b9a9950505050505050505050565b60405163124fdbb760e21b815273__$ec217c54da363a68ad871e6868efec481c$__9063493f6edc90610860908690600401613fd1565b60006040518083038186803b15801561087857600080fd5b505af415801561088c573d6000803e3d6000fd5b5050604080516001600160a01b0386168152602081018590527f297f3fbc14027d2b4a4f7dac3dff2ad6b386024299045b0e163f131bb24b611d935001905060405180910390a1505050565b6108e48383838461187f565b505050565b60008060006108f788611b4f565b9050600061092061091161090b898b613fbe565b88611bbf565b61091b8488613fbe565b611bd9565b935090508581146109655760408051828152602081018890527f9d826eb710c9c4b327111bf0bd05a18b4fc3c327e701134e79cae1ce27f51f9b910160405180910390a15b80156109855761098189828c61097b8b8d613fbe565b86611c09565b5093505b5050965096945050505050565b6001850154855460009182916001600160a01b03909116906060806109ba888a898789611dc5565b828e559197509250905060006109d389898585896122ba565b90506109e28c8589848f612594565b955050505050509550959350505050565b6000826001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a579190614011565b6001600160a01b03166347b03bba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190614011565b9050600080826001600160a01b0316634be4e9a6856040518263ffffffff1660e01b8152600401610ae99190613fd1565b60408051808303816000875af1158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190614035565b9150915081600014158015610b3f57508015155b15610b7e5760408051838152602081018390527f37aa4ac70052a1bb5d5498a38dae3128bbc585be2886ae01b87e34c85fdccff2910160405180910390a15b5050505050565b6060610bd684848787516001600160401b03811115610ba657610ba661361b565b604051908082528060200260200182016040528015610bcf578160200160208202803683370190505b5086612793565b95945050505050565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190610c0e903090600401613fd1565b602060405180830381865afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f9190613fe5565b90506000818360000154610c639190613fbe565b905080841015610b7e5781841115610b7e57610c7f8285613ffe565b83555050505050565b6000606080610c9a8888888888611dc5565b925092509250955095509592505050565b6000610cb6836115b6565b6001600160a01b031663b3596f07836040518263ffffffff1660e01b8152600401610ce19190613fd1565b602060405180830381865afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d229190613fe5565b90505b92915050565b6060806000610d3b888888612965565b9050610d4a8a8a8d8489612793565b8a5190935060005b81811015610da557858181518110610d6c57610d6c613f51565b6020026020010151878281518110610d8657610d86613f51565b60200260200101818151610d9a9190613fbe565b905250600101610d52565b5085925050509850989650505050505050565b600080610dc4856115b6565b90506000816001600160a01b031663b3596f07866040518263ffffffff1660e01b8152600401610df49190613fd1565b602060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e359190613fe5565b90506000826001600160a01b031663b3596f07866040518263ffffffff1660e01b8152600401610e659190613fd1565b602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190613fe5565b905060008211610eb857600019610ed5565b81610ecb82670de0b6b3a7640000613f7d565b610ed59190613faa565b979650505050505050565b600080610ef08787878787611c09565b915091509550959350505050565b81516060906000816001600160401b03811115610f1d57610f1d61361b565b604051908082528060200260200182016040528015610f46578160200160208202803683370190505b50905060005b828110156110085780851461100057858181518110610f6d57610f6d613f51565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610fa09190613fd1565b602060405180830381865afa158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190613fe5565b828281518110610ff357610ff3613f51565b6020026020010181815250505b600101610f4c565b50949350505050565b838215610bd65781546001600160a01b03908116906000908816821461103f5761103a82611b4f565b611041565b865b600185015490915061106a90839087906001600160a01b0316611064858b613fbe565b85611c09565b5050816001600160a01b0316886001600160a01b0316036110915761108e88611b4f565b92505b505095945050505050565b60408051600280825260608083018452600093909291906020830190803683370190505090506110cb85611b4f565b816000815181106110de576110de613f51565b6020026020010181815250506110f384611b4f565b8160018151811061110657611106613f51565b602090810291909101015260408051600280825260608201909252600091816020016020820280368337019050509050858160008151811061114a5761114a613f51565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061117e5761117e613f51565b6001600160a01b03929092166020928302919091018201526040805160028082526060820183526000939192909183019080368337019050509050826000815181106111cc576111cc613f51565b6020026020010151816000815181106111e7576111e7613f51565b6020026020010181815250506000611204838360008d6001611dc5565b50509050888110611216576000611220565b611220818a613ffe565b8451873590869060009061123657611236613f51565b6020026020010151108061126a575086600160200201358560018151811061126057611260613f51565b6020026020010151105b6112745784611284565b6040805160008152602081019091525b945094505050509550959350505050565b60405163124fdbb760e21b815273__$ec217c54da363a68ad871e6868efec481c$__9063493f6edc906112cc908590600401613fd1565b60006040518083038186803b1580156112e457600080fd5b505af41580156112f8573d6000803e3d6000fd5b50505050620186a08111156040518060400160405280600f81526020016e53423a2057726f6e672076616c756560881b815250906113525760405162461bcd60e51b8152600401611349919061407d565b60405180910390fd5b506040518181527fe4166dfcf23bbd3e3f764a99dc8fa740554c03c82d6019b81cf265f396f6f2fe9060200160405180910390a15050565b606080600080886001600160a01b031663ef5cfb8c306040518263ffffffff1660e01b81526004016113bc9190613fd1565b6000604051808303816000875af11580156113db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611403919081019061410b565b91509150611457878784848c8d516001600160401b038111156114285761142861361b565b604051908082528060200260200182016040528015611451578160200160208202803683370190505b50612a6c565b8151919550935060005b8181101561159a5760005b8a51811015611591578a818151811061148757611487613f51565b60200260200101516001600160a01b03168783815181106114aa576114aa613f51565b60200260200101516001600160a01b031603611589578781815181106114d2576114d2613f51565b60200260200101518b82815181106114ec576114ec613f51565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161151f9190613fd1565b602060405180830381865afa15801561153c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115609190613fe5565b61156a9190613ffe565b86838151811061157c5761157c613f51565b6020026020010181815250505b60010161146c565b50600101611461565b506115a58585612f93565b909b909a5098505050505050505050565b6000816001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161a9190614011565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611657573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d259190614011565b606080826001600160401b038111156116965761169661361b565b6040519080825280602002602001820160405280156116bf578160200160208202803683370190505b509150826001600160401b038111156116da576116da61361b565b604051908082528060200260200182016040528015611703578160200160208202803683370190505b50905060005b838110156118605784818151811061172357611723613f51565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c91906141cf565b61179790600a6142d6565b8282815181106117a9576117a9613f51565b602002602001018181525050856001600160a01b031663b3596f078683815181106117d6576117d6613f51565b60200260200101516040518263ffffffff1660e01b81526004016117fa9190613fd1565b602060405180830381865afa158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183b9190613fe5565b83828151811061184d5761184d613f51565b6020908102919091010152600101611709565b50935093915050565b60008183106118785781610d22565b5090919050565b6000836001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e39190614011565b90506000846001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119499190614011565b90506000826001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016119799190613fd1565b602060405180830381865afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba9190613fe5565b604051630855081f60e01b815260006004820152602481018790529091506001600160a01b03871690630855081f90604401600060405180830381600087803b158015611a0657600080fd5b505af1158015611a1a573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a0823190611a4d908690600401613fd1565b602060405180830381865afa158015611a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8e9190613fe5565b90506000611a9c8284611bbf565b90506000611aaa8883611bbf565b90508715611ad65787611abd8282613ffe565b611ac790896142e5565b611ad19190614315565b611ad9565b60005b96508615611afb57868a6003016000828254611af59190614343565b90915550505b6040805189815260208101899052908101839052606081018290527ff13a1512eb9fa6413cdb85c01e914c6df0dadc043d9aeec658469e95f5d059679060800160405180910390a150505050505050505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611b7e903090600401613fd1565b602060405180830381865afa158015611b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d259190613fe5565b6000818311611bcf576000610d22565b610d228284613ffe565b60008083831115611bf557611bee8484613ffe565b9150611c02565b611bff8385613ffe565b90505b9250929050565b6000806000611c188785611869565b90508015611d635760408051808201909152601181527054532d35207a65726f2062616c616e636560781b602082015285611c665760405162461bcd60e51b8152600401611349919061407d565b50611c8a81620186a0611c7b886101f4613f7d565b611c859190613faa565b611869565b9050611d63866001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf19190614011565b6001600160a01b03166389cf32046040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d529190614011565b6001600160a01b038a169083613181565b809250808711611d74576000611d7e565b611d7e8188613ffe565b60408051858152602081018390529193507fbaad96f61e3091f46555dc5cf915745a34dbd0981adc3f1c6747a4d5a1ffa055910160405180910390a1509550959350505050565b6000606080611e076040518060800160405280600081526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b885181528851899088908110611e1f57611e1f613f51565b60209081029190910101516001600160a01b03166040820152611e4d611e44876115b6565b82518b9061167b565b909350915060005b815181101561217f57878103611e9157888181518110611e7757611e77613f51565b602002602001015185611e8a9190613fbe565b9450612177565b898181518110611ea357611ea3613f51565b60209081029190910101516001600160a01b0390811660608401819052604080850151905163dd27ede760e01b8152306004820152602481019290925282166044820152600060648201819052918291908a169063dd27ede79060840160408051808303816000875af1158015611f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f429190614035565b9150915081871015611f5e57611f59848b846131d3565b611f6b565b611f688288613ffe565b96505b60008b8481518110611f7f57611f7f613f51565b602002602001015185606001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611fb79190613fd1565b602060405180830381865afa158015611fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff89190613fe5565b6120029084613fbe565b61200c9190613fbe565b6040808701516060880151915163dd27ede760e01b81523060048201526001600160a01b039182166024820152918116604483015260006064830152919250908b169063dd27ede79060840160408051808303816000875af1158015612076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209a9190614035565b90935091506120a98289613fbe565b975082811061215f578584815181106120c4576120c4613f51565b6020026020010151878c815181106120de576120de613f51565b6020026020010151878d815181106120f8576120f8613f51565b602002602001015189878151811061211257612112613f51565b602002602001015186856121269190613ffe565b6121309190613f7d565b61213a9190613f7d565b6121449190613faa565b61214e9190613faa565b6121589089613fbe565b9750612173565b612173858561216e8487613ffe565b6131d3565b5050505b600101611e55565b5080516020820151510361229b5760005b815181101561229957816020015181815181106121af576121af613f51565b6020026020010151600003156122915760008382815181106121d3576121d3613f51565b6020026020010151858a815181106121ed576121ed613f51565b6020026020010151858b8151811061220757612207613f51565b602002602001015187858151811061222157612221613f51565b60200260200101518660200151868151811061223f5761223f613f51565b60200260200101516122519190613f7d565b61225b9190613f7d565b6122659190613faa565b61226f9190613faa565b905085811115612282576000955061228f565b61228c8187613ffe565b95505b505b600101612190565b505b84156122ae576122ab898761325c565b50505b50955095509592505050565b600080826001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231f9190614011565b6001600160a01b03166347b03bba6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561235c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123809190614011565b9050600080826001600160a01b03166338bc8c5e8a6040518263ffffffff1660e01b81526004016123b191906143a4565b6000604051808303816000875af11580156123d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123f891908101906143b7565b8a51919350915060005b81811015612547578981036124645783818151811061242357612423613f51565b6020026020010151866124369190614403565b955082818151811061244a5761244a613f51565b60200260200101518661245d9190614343565b955061253f565b87818151811061247657612476613f51565b6020026020010151898b8151811061249057612490613f51565b6020026020010151898c815181106124aa576124aa613f51565b60200260200101518b84815181106124c4576124c4613f51565b60200260200101518785815181106124de576124de613f51565b60200260200101518786815181106124f8576124f8613f51565b602002602001015161250a9190614403565b61251491906142e5565b61251e91906142e5565b6125289190614315565b6125329190614315565b61253c9087614343565b95505b600101612402565b507f3c494ff6e1b11028d08783f71eb95f6a0f9705f6b74f85470926baa577ad52308a84848b8960405161257f95949392919061442a565b60405180910390a15050505095945050505050565b60038501546000908585111561260e576125ae8686613ffe565b9150831561260957838760030160008282546125ca9190614343565b909155505060408051828152602081018690527f9dca6303e24e8874cf8b056d48a1351b6a2725e7a309caa33a6a4f74a455ab25910160405180910390a15b612736565b600061261a8688613ffe565b905080156127345783546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612652903090600401613fd1565b602060405180830381865afa15801561266f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126939190613fe5565b61269d9088613fbe565b90506000806126ac84846133a6565b91509150806000146127015760408051838152602081018390529081018b9052606081018a90527f79ebefb350a48e2a470929fdbef327f4d53ceaafdd43e30e288f0279aa70e5fd9060800160405180910390a15b6001870154612730908c906001600160a01b03168487612721828e6142e5565b61272b9190614315565b61187f565b5050505b505b60038701546040805188815260208101889052808201849052606081019290925260808201869052517fdefa80b22e5fab3e2037351d0afab9e865dd4e3e4738002818eed2e6b25cc0139181900360a00190a15095945050505050565b8451606090806001600160401b038111156127b0576127b061361b565b6040519080825280602002602001820160405280156127d9578160200160208202803683370190505b50915060005b818110156110915786810361282b5784818151811061280057612800613f51565b602002602001015183828151811061281a5761281a613f51565b60200260200101818152505061295d565b600084828151811061283f5761283f613f51565b602002602001015186838151811061285957612859613f51565b602002602001015161286b9190613fbe565b9050801561295b57866001600160a01b031663667df249308b8b8151811061289557612895613f51565b60200260200101518c86815181106128af576128af613f51565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291831660248301529190911660448201526064810184905260840160408051808303816000875af1158015612917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293b9190614035565b5084838151811061294e5761294e613f51565b6020026020010181815250505b505b6001016127df565b6060600082156129a75782841015612999578261298a85670de0b6b3a7640000613f7d565b6129949190613faa565b6129aa565b670de0b6b3a76400006129aa565b60005b8551909150806001600160401b038111156129c7576129c761361b565b6040519080825280602002602001820160405280156129f0578160200160208202803683370190505b5092508115612a635760005b81811015612a6157670de0b6b3a764000083888381518110612a2057612a20613f51565b6020026020010151612a329190613f7d565b612a3c9190613faa565b848281518110612a4e57612a4e613f51565b60209081029190910101526001016129fc565b505b50509392505050565b604080516003808252608082019092526060918291600091602082018480368337019050509050885181600081518110612aa857612aa8613f51565b602002602001018181525050865181600181518110612ac957612ac9613f51565b602002602001018181525050845181600281518110612aea57612aea613f51565b602002602001018181525050875181600081518110612b0b57612b0b613f51565b6020026020010151148015612b3a5750855181600181518110612b3057612b30613f51565b6020026020010151145b8015612b605750835181600281518110612b5657612b56613f51565b6020026020010151145b6040518060400160405280600d81526020016c54532d3139206c656e6774687360981b81525090612ba45760405162461bcd60e51b8152600401611349919061407d565b50600081600281518110612bba57612bba613f51565b602002602001015182600181518110612bd557612bd5613f51565b602002602001015183600081518110612bf057612bf0613f51565b6020026020010151612c029190613fbe565b612c0c9190613fbe565b90506000816001600160401b03811115612c2857612c2861361b565b604051908082528060200260200182016040528015612c51578160200160208202803683370190505b5090506000826001600160401b03811115612c6e57612c6e61361b565b604051908082528060200260200182016040528015612c97578160200160208202803683370190505b5090506000805b6003811015612e595760008115612cc35781600114612cbd5789612cc5565b8b612cc5565b8d5b905060008215612ce35782600114612cdd578b612ce5565b8d612ce5565b8f5b905060005b888481518110612cfc57612cfc613f51565b6020026020010151811015612e45576000838281518110612d1f57612d1f613f51565b602002602001015190506000838381518110612d3d57612d3d613f51565b602002602001015190506000805b88811015612dca578a8181518110612d6557612d65613f51565b60200260200101516001600160a01b0316836001600160a01b031603612db857838a8281518110612d9857612d98613f51565b60200260200101818151612dac9190613fbe565b90525060019150612dca565b80612dc28161448a565b915050612d4b565b5080612e2f57818a8981518110612de357612de3613f51565b60200260200101906001600160a01b031690816001600160a01b03168152505082898981518110612e1657612e16613f51565b602090810291909101015287612e2b8161448a565b9850505b5050508080612e3d9061448a565b915050612cea565b50505080612e529061448a565b9050612c9e565b50806001600160401b03811115612e7257612e7261361b565b604051908082528060200260200182016040528015612e9b578160200160208202803683370190505b509650806001600160401b03811115612eb657612eb661361b565b604051908082528060200260200182016040528015612edf578160200160208202803683370190505b50955060005b81811015612f8257838181518110612eff57612eff613f51565b6020026020010151888281518110612f1957612f19613f51565b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110612f4b57612f4b613f51565b6020026020010151878281518110612f6557612f65613f51565b602090810291909101015280612f7a8161448a565b915050612ee5565b505050505050965096945050505050565b60608082518451146040518060400160405280600d81526020016c54532d3139206c656e6774687360981b81525090612fdf5760405162461bcd60e51b8152600401611349919061407d565b508351600090815b818110156130305785818151811061300157613001613f51565b602002602001015160001461301e578261301a8161448a565b9350505b806130288161448a565b915050612fe7565b50816001600160401b038111156130495761304961361b565b604051908082528060200260200182016040528015613072578160200160208202803683370190505b509350816001600160401b0381111561308d5761308d61361b565b6040519080825280602002602001820160405280156130b6578160200160208202803683370190505b5092506000805b828110156131765760008782815181106130d9576130d9613f51565b6020026020010151905080600014613163578882815181106130fd576130fd613f51565b602002602001015187848151811061311757613117613f51565b60200260200101906001600160a01b031690816001600160a01b0316815250508086848151811061314a5761314a613f51565b60209081029190910101528261315f8161448a565b9350505b508061316e8161448a565b9150506130bd565b505050509250929050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526108e49084906133c9565b8260200151516000036132295782516001600160401b038111156131f9576131f961361b565b604051908082528060200260200182016040528015613222578160200160208202803683370190505b5060208401525b808360200151838151811061324057613240613f51565b602002602001018181516132549190613fbe565b905250505050565b6060806000836001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa15801561329f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c39190614011565b6001600160a01b03166347b03bba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133249190614011565b604051631c5e462f60e11b81529091506001600160a01b038216906338bc8c5e906133539088906004016143a4565b6000604051808303816000875af1158015613372573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261339a91908101906143b7565b92509250509250929050565b6000806133bd84620186a0611c7b866101f4613f7d565b9150611bff8483611bbf565b600061341e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661349b9092919063ffffffff16565b8051909150156108e4578080602001905181019061343c91906144a3565b6108e45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611349565b60606134aa84846000856134b2565b949350505050565b6060824710156135135760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611349565b600080866001600160a01b0316858760405161352f91906144c0565b60006040518083038185875af1925050503d806000811461356c576040519150601f19603f3d011682016040523d82523d6000602084013e613571565b606091505b5091509150610ed587838387606083156135ec5782516000036135e5576001600160a01b0385163b6135e55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611349565b50816134aa565b6134aa83838151156136015781518083602001fd5b8060405162461bcd60e51b8152600401611349919061407d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156136595761365961361b565b604052919050565b60006001600160401b0382111561367a5761367a61361b565b5060051b60200190565b6001600160a01b038116811461369957600080fd5b50565b600082601f8301126136ad57600080fd5b813560206136c26136bd83613661565b613631565b82815260059290921b840181019181810190868411156136e157600080fd5b8286015b848110156137055780356136f881613684565b83529183019183016136e5565b509695505050505050565b803561371b81613684565b919050565b600082601f83011261373157600080fd5b813560206137416136bd83613661565b82815260059290921b8401810191818101908684111561376057600080fd5b8286015b848110156137055780358352918301918301613764565b600080600080600080600060e0888a03121561379657600080fd5b8735965060208801356001600160401b03808211156137b457600080fd5b6137c08b838c0161369c565b975060408a0135965060608a013591506137d982613684565b909450608089013590808211156137ef57600080fd5b506137fc8a828b01613720565b93505060a0880135915060c0880135905092959891949750929550565b60008060006060848603121561382e57600080fd5b833561383981613684565b9250602084013561384981613684565b929592945050506040919091013590565b60008060006060848603121561386f57600080fd5b83359250602084013561384981613684565b60008060008060008060c0878903121561389a57600080fd5b86356138a581613684565b955060208701356138b581613684565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080600060a086880312156138f257600080fd5b853594506020860135935060408601356001600160401b038082111561391757600080fd5b61392389838a01613720565b9450606088013591508082111561393957600080fd5b506139468882890161369c565b95989497509295608001359392505050565b6000806040838503121561396b57600080fd5b823561397681613684565b9150602083013561398681613684565b809150509250929050565b600080600080608085870312156139a757600080fd5b84356139b281613684565b935060208501356001600160401b03808211156139ce57600080fd5b6139da8883890161369c565b94506040870135935060608701359150808211156139f757600080fd5b50613a0487828801613720565b91505092959194509250565b600081518084526020808501945080840160005b83811015613a4057815187529582019590820190600101613a24565b509495945050505050565b602081526000610d226020830184613a10565b600080600060608486031215613a7357600080fd5b8335613a7e81613684565b95602085013595506040909401359392505050565b801515811461369957600080fd5b600080600080600060a08688031215613ab957600080fd5b85356001600160401b0380821115613ad057600080fd5b613adc89838a0161369c565b96506020880135915080821115613af257600080fd5b50613aff88828901613720565b945050604086013592506060860135613b1781613684565b91506080860135613b2781613a93565b809150509295509295909350565b838152606060208201526000613b4e6060830185613a10565b8281036040840152613b608185613a10565b9695505050505050565b600080600080600080600080610100898b031215613b8757600080fd5b613b9089613710565b975060208901356001600160401b0380821115613bac57600080fd5b613bb88c838d0161369c565b985060408b0135975060608b0135915080821115613bd557600080fd5b613be18c838d01613720565b965060808b0135955060a08b0135945060c08b0135915080821115613c0557600080fd5b613c118c838d01613720565b935060e08b0135915080821115613c2757600080fd5b50613c348b828c01613720565b9150509295985092959890939650565b604081526000613c576040830185613a10565b8281036020840152610bd68185613a10565b600080600060608486031215613c7e57600080fd5b8335613c8981613684565b92506020840135613c9981613684565b91506040840135613ca981613684565b809150509250925092565b600080600080600060a08688031215613ccc57600080fd5b8535613cd781613684565b9450602086013593506040860135613cee81613684565b94979396509394606081013594506080013592915050565b60008060408385031215613d1957600080fd5b82356001600160401b03811115613d2f57600080fd5b613d3b8582860161369c565b95602094909401359450505050565b600080600080600060a08688031215613d6257600080fd5b8535613d6d81613684565b97602087013597506040870135966060810135965060800135945092505050565b600080600080600060c08688031215613da657600080fd5b8535613db181613684565b9450602086013593506040860135613dc881613684565b92506060860135613dd881613684565b915060c08601871015613dea57600080fd5b5092959194509260800190565b8281526040602082015260006134aa6040830184613a10565b60008060408385031215613e2357600080fd5b8235613e2e81613684565b946020939093013593505050565b600080600080600060a08688031215613e5457600080fd5b8535613e5f81613684565b945060208601356001600160401b0380821115613e7b57600080fd5b613e8789838a0161369c565b95506040880135915080821115613e9d57600080fd5b613ea989838a0161369c565b94506060880135915080821115613ebf57600080fd5b613ecb89838a01613720565b93506080880135915080821115613ee157600080fd5b50613eee88828901613720565b9150509295509295909350565b604080825283519082018190526000906020906060840190828701845b82811015613f3d5781516001600160a01b031684529284019290840190600101613f18565b50505083810382850152613b608186613a10565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d2557610d25613f67565b634e487b7160e01b600052601260045260246000fd5b600082613fb957613fb9613f94565b500490565b80820180821115610d2557610d25613f67565b6001600160a01b0391909116815260200190565b600060208284031215613ff757600080fd5b5051919050565b81810381811115610d2557610d25613f67565b60006020828403121561402357600080fd5b815161402e81613684565b9392505050565b6000806040838503121561404857600080fd5b505080516020909101519092909150565b60005b8381101561407457818101518382015260200161405c565b50506000910152565b602081526000825180602084015261409c816040850160208701614059565b601f01601f19169190910160400192915050565b600082601f8301126140c157600080fd5b815160206140d16136bd83613661565b82815260059290921b840181019181810190868411156140f057600080fd5b8286015b8481101561370557805183529183019183016140f4565b6000806040838503121561411e57600080fd5b82516001600160401b038082111561413557600080fd5b818501915085601f83011261414957600080fd5b815160206141596136bd83613661565b82815260059290921b8401810191818101908984111561417857600080fd5b948201945b8386101561419f57855161419081613684565b8252948201949082019061417d565b918801519196509093505050808211156141b857600080fd5b506141c5858286016140b0565b9150509250929050565b6000602082840312156141e157600080fd5b815160ff8116811461402e57600080fd5b600181815b8085111561422d57816000190482111561421357614213613f67565b8085161561422057918102915b93841c93908002906141f7565b509250929050565b60008261424457506001610d25565b8161425157506000610d25565b816001811461426757600281146142715761428d565b6001915050610d25565b60ff84111561428257614282613f67565b50506001821b610d25565b5060208310610133831016604e8410600b84101617156142b0575081810a610d25565b6142ba83836141f2565b80600019048211156142ce576142ce613f67565b029392505050565b6000610d2260ff841683614235565b80820260008212600160ff1b8414161561430157614301613f67565b8181058314821517610d2557610d25613f67565b60008261432457614324613f94565b600160ff1b82146000198414161561433e5761433e613f67565b500590565b808201828112600083128015821682158216171561436357614363613f67565b505092915050565b600081518084526020808501945080840160005b83811015613a405781516001600160a01b03168752958201959082019060010161437f565b602081526000610d22602083018461436b565b600080604083850312156143ca57600080fd5b82516001600160401b03808211156143e157600080fd5b6143ed868387016140b0565b935060208501519150808211156141b857600080fd5b818103600083128015838313168383128216171561442357614423613f67565b5092915050565b60a08152600061443d60a083018861436b565b828103602084015261444f8188613a10565b905082810360408401526144638187613a10565b905082810360608401526144778186613a10565b9150508260808301529695505050505050565b60006001820161449c5761449c613f67565b5060010190565b6000602082840312156144b557600080fd5b815161402e81613a93565b600082516144d2818460208701614059565b919091019291505056fea26469706673582212206f28fa3d9c1167012f23eae81f00d751dc11abfd6151c318bb094eba9db67d1664736f6c63430008110033",
  "libraries": {
    "StrategyLib": "0xfEA4888C097864Ff292D74AaBf05Bce3e9A96959"
  },
  "devdoc": {
    "events": {
      "BorrowResults(uint256,uint256)": {
        "params": {
          "gains": "Amount received by all pool adapters for the provided collateral, in underlying",
          "losses": "Amount paid by all pool adapters for the debts, in underlying"
        }
      },
      "ChangeDebtToInsuranceOnProfit(int256,int256)": {
        "details": "See comments in {_coverLossAfterPriceChanging}: actual profit-to-cover amount can be less than {increaseToDebt}",
        "params": {
          "debtToInsuranceBefore": "Value of debtToInsurance before fix-price-change",
          "increaseToDebt": "Value on which {debtToInsuranceBefore} was incremented"
        }
      },
      "FixPriceChanges(uint256,uint256,int256,int256,int256)": {
        "params": {
          "debtToInsuranceAfter": "New value of the debt to insurance",
          "debtToInsuranceBefore": "Value of the debt to insurance before fix price change",
          "increaseToDebt": "Amount on which debt to insurance was increased. Actual value {debtToInsuranceAfter}-{debtToInsuranceBefore} can be less than increaseToDebt because some amount can be left uncovered."
        }
      },
      "OnCoverLoss(uint256,int256,uint256,uint256)": {
        "params": {
          "amountCovered": "Actually covered amount of loss. If amountCovered < lossToCover => the insurance is not enough",
          "debtToInsuranceInc": "The amount by which the debt to insurance increases",
          "lossToCover": "Amount of loss that should be covered (it fits to allowed limits, no revert)",
          "lossUncovered": "Amount of uncovered losses (not enough insurance)"
        }
      },
      "OnEarningOnWithdraw(uint256,uint256)": {
        "details": "We assume that earned > earnedByPrice, but it's better to save raw values"
      },
      "OnIncreaseDebtToInsurance(address[],uint256[],uint256[],uint256[],int256)": {
        "params": {
          "deltaGains": "Amounts by which the debt has reduced (supply profit) [sync with {tokens}]",
          "deltaLosses": "Amounts by which the debt has increased (increase of amount-to-pay) [sync with {tokens}]",
          "increaseToDebt": "Total amount of increasing of the debt to the insurance in underlying",
          "prices": "Prices of the {tokens}",
          "tokens": "List of possible collateral/borrow assets. One of the is underlying."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calcInvestedAssets(address[],uint256[],uint256,ITetuConverter,bool)": {
        "details": "This is writable function because we need to update current balances in the internal protocols.",
        "params": {
          "indexAsset": "Index of the underlying (main asset) in {tokens}",
          "makeCheckpoint_": "True - call IBookkeeper.checkpoint in the converter"
        },
        "returns": {
          "amountOut": "Invested asset amount under control (in terms of underlying)",
          "decs": "10**decimals",
          "prices": "Asset prices in USD, decimals 18"
        }
      },
      "calculateIncomeAfterWithdraw(address,address,uint256,uint256,uint256,uint256)": {
        "details": "Amount for the insurance is sent from the balance, so the sending doesn't change invested assets.",
        "params": {
          "asset": "Underlying",
          "balanceBefore": "Balance of the underlying at the moment of withdrawing start",
          "earnedByPrices_": "Amount of underlying earned because of price changes, it should be send to the insurance.",
          "investedAssets_": "Invested assets amount at the moment of withdrawing start",
          "updatedInvestedAssets_": "Invested assets amount after withdrawing"
        },
        "returns": {
          "amountSentToInsurance": "Total amount sent to the insurance in result."
        }
      },
      "claimConverterRewards(ITetuConverter,address[],address[],uint256[],uint256[])": {
        "details": "The post-processing is rewards conversion to the main asset",
        "params": {
          "amountsOut": "Amounts of available rewards",
          "rewardTokens_": "Amounts of rewards claimed from the internal pool",
          "tokensOut": "List of available rewards - not zero amounts, reward tokens don't repeat",
          "tokens_": "tokens received from {_depositorPoolAssets}"
        }
      },
      "fixPriceChanges(IConverterStrategyBase.ConverterStrategyBaseState storage,IStrategyV3.BaseState storage,uint256[],address[],uint256)": {
        "params": {
          "amountsInPool": "Amount of tokens that can be received from the pool after withdrawing all liquidity. The order of tokens is same as in the {tokens}",
          "indexAsset": "Index of the underlying in {tokens}",
          "tokens": "Result of {_depositorPoolAssets}"
        },
        "returns": {
          "earnedOut": "Profit that was received because of price changes. It should be sent back to insurance.",
          "investedAssetsOut": "Updated value of {csbs.investedAssets}"
        }
      },
      "fixTooHighInvestedAssets(address,uint256,IConverterStrategyBase.ConverterStrategyBaseState storage)": {
        "details": "If profitToCover was sent only partly, we will postpone sending of remain amount up to the next call      of fixPriceChange in same manner",
        "params": {
          "oldTotalAssets": "Total asset at the moment after last call of fixPriceChange,                       decreased on the value of profitToCover."
        }
      },
      "getLiquidityAmount(uint256,address[],uint256,ITetuConverter,uint256[],uint256,uint256)": {
        "params": {
          "quoteAmounts": "Results of _depositorQuoteExit(depositorLiquidity)",
          "targetAmount": "Required amount of main asset to be withdrawn from the strategy; type(uint).max - withdraw all"
        },
        "returns": {
          "resultAmount": "Amount of liquidity that should be withdrawn from the pool, cannot exceed depositorLiquidity"
        }
      },
      "getTokenAmountsPair(ITetuConverter,uint256,address,address,uint256[2])": {
        "params": {
          "liquidationThresholdsAB": "[liquidityThreshold of token A, liquidityThreshold of tokenB]"
        },
        "returns": {
          "loss": "New total assets - old total assets",
          "tokenAmounts": "Balances of the token A and token B.                     If any balance is zero it's not possible to enter to the pool, so return empty array (len 0)"
        }
      },
      "postWithdrawActions(ITetuConverter,address[],uint256,uint256[],uint256,uint256,uint256[],uint256[])": {
        "params": {
          "amountsToConvert": "Amounts of {tokens} to be converted, they are located on the balance before withdraw",
          "withdrawnAmounts": "Amounts of {tokens} that were withdrew from the pool"
        }
      },
      "sendProfitGetAssetBalance(address,uint256,uint256,uint256,IStrategyV3.BaseState storage)": {
        "params": {
          "balanceTheAsset_": "Current balance of {theAsset_}",
          "earnedByPrices_": "ProfitToCover received from fixPriceChange()",
          "investedAssets_": "Value of investedAssets after call fixPriceChange()",
          "theAsset_": "The asset passed from Converter"
        },
        "returns": {
          "balanceTheAssetOut": "Final balance of {theAsset_} (after sending profit-to-cover to the insurance)"
        }
      },
      "sendToInsurance(address,uint256,address,uint256,uint256)": {
        "params": {
          "balance": "Current balance of the underlying",
          "totalAssets_": "Total strategy balance = balance of underlying + current invested assets amount"
        },
        "returns": {
          "sentAmount": "Amount of underlying sent to the insurance",
          "unsentAmount": "Missed part of the {amount} that were not sent to the insurance"
        }
      }
    },
    "stateVariables": {
      "HARDWORK_LOSS_TOLERANCE": {
        "details": "0.5% of max loss for strategy TVL"
      },
      "PRICE_CHANGE_PROFIT_TOLERANCE": {
        "details": "0.5% of max profit for strategy TVL"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BorrowResults(uint256,uint256)": {
        "notice": "Register amounts received for supplying collaterals and amount paid for the debts"
      },
      "ChangeDebtToInsuranceOnProfit(int256,int256)": {
        "notice": "Value of {debtToInsurance} was increased on {increaseToDebt} inside fix-price-change in the case when invested-asset amounts were increased."
      },
      "OnEarningOnWithdraw(uint256,uint256)": {
        "notice": "An amount (earned - earnedByPrice) is earned on withdraw and sent to the insurance"
      },
      "OnIncreaseDebtToInsurance(address[],uint256[],uint256[],uint256[],int256)": {
        "notice": "Increase to debts between new and previous checkpoints."
      },
      "UncoveredLoss(uint256,uint256,uint256,uint256)": {
        "notice": "Amount {lossCovered}+{lossUncovered} should be covered, but it's too high and will produce revert on the splitter side. So, only {lossCovered} can be covered, {lossUncovered} are not covered"
      }
    },
    "kind": "user",
    "methods": {
      "HARDWORK_LOSS_TOLERANCE()": {
        "notice": "Same value as StrategySplitterV2.HARDWORK_LOSS_TOLERANCE"
      },
      "PRICE_CHANGE_PROFIT_TOLERANCE()": {
        "notice": "Limit max amount of profit that can be send to insurance after price changing"
      },
      "calcInvestedAssets(address[],uint256[],uint256,ITetuConverter,bool)": {
        "notice": "Calculate amount we will receive when we withdraw all from pool"
      },
      "calculateIncomeAfterWithdraw(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Calculate amount earned after withdraw. Withdraw cannot produce income, so we send all         earned amount to insurance. Also we send to the insurance earned-by-prices-amount here."
      },
      "claimConverterRewards(ITetuConverter,address[],address[],uint256[],uint256[])": {
        "notice": "Claim rewards from tetuConverter, generate result list of all available rewards and airdrops"
      },
      "coverLossAndCheckResults(IConverterStrategyBase.ConverterStrategyBaseState storage,address,uint256)": {
        "notice": "Call coverPossibleStrategyLoss, covered loss will be sent to vault.         If the loss were covered only partially, emit {NotEnoughInsurance}"
      },
      "fixPriceChanges(IConverterStrategyBase.ConverterStrategyBaseState storage,IStrategyV3.BaseState storage,uint256[],address[],uint256)": {
        "notice": "Calculate profit/loss happened because of price changing. Try to cover the loss, send the profit to the insurance. Increment debt to insurance on amount of increase of the debts."
      },
      "fixTooHighInvestedAssets(address,uint256,IConverterStrategyBase.ConverterStrategyBaseState storage)": {
        "notice": "Swap can give us more amount out than expected, so we will receive increasing of share price.         To prevent it, we need to send exceeded amount to insurance,         but it's too expensive to make such transfer at the end of withdrawAggByStep.         So, we postpone sending the profit until the next call of fixPriceChange         by manually setting investedAssets equal to the oldTotalAssets"
      },
      "getAvailableBalances(address[],uint256)": {
        "notice": "Get balances of the {tokens_} except balance of the token at {indexAsset} position"
      },
      "getLiquidityAmount(uint256,address[],uint256,ITetuConverter,uint256[],uint256,uint256)": {
        "notice": "Calculate amount of liquidity that should be withdrawn from the pool to get {targetAmount_}               liquidityAmount = _depositorLiquidity() * {liquidityRatioOut} / 1e18         User needs to withdraw {targetAmount_} in some asset.         There are three kinds of available liquidity:         1) liquidity in the pool - {depositorLiquidity_}         2) Converted amounts on balance of the strategy - {baseAmounts_}         3) Liquidity locked in the debts."
      },
      "getOracleAssetsPrice(ITetuConverter,address,address)": {
        "notice": "Get price of {tokenB} in term of {tokenA} with 18 decimals"
      },
      "getTokenAmountsPair(ITetuConverter,uint256,address,address,uint256[2])": {
        "notice": "Calculate the token amounts for deposit and amount of loss (as old-total-asset - new-total-asset)"
      },
      "postWithdrawActions(ITetuConverter,address[],uint256,uint256[],uint256,uint256,uint256[],uint256[])": {
        "notice": "Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}"
      },
      "postWithdrawActionsEmpty(ITetuConverter,address[],uint256,uint256[])": {
        "notice": "return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}"
      },
      "registerBorrowResults(ITetuConverter,address)": {
        "notice": "Register amounts received for supplying collaterals and amount paid for the debts         for the current period (a new period is started after each hardwork operation)"
      },
      "sendProfitGetAssetBalance(address,uint256,uint256,uint256,IStrategyV3.BaseState storage)": {
        "notice": "Send ProfitToCover to insurance - code fragment of the requirePayAmountBack()         moved here to reduce size of requirePayAmountBack()"
      },
      "sendToInsurance(address,uint256,address,uint256,uint256)": {
        "notice": "Send given {amount} of {asset} (== underlying) to the insurance"
      }
    },
    "notice": "Continuation of ConverterStrategyBaseLib (workaround for size limits)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}