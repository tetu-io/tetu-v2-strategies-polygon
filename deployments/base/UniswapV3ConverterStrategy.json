{
  "address": "0xFe5E7294F255caBb39C8f786264C6B4f92b63210",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "withdrawnAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "OnDepositorEmergencyExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "consumedAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "OnDepositorEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "withdrawnAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "OnDepositorExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investedAssetsNewPrices",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnedByPrices",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnedHandleRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lostHandleRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnedDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lostDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidDebtToInsurance",
          "type": "uint256"
        }
      ],
      "name": "OnHardWorkEarnedLost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "RevisionIncreased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLABLE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONVERTER_STRATEGY_BASE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLATFORM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_BASE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAPV3_DEPOSITOR_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcInvestedAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "investedAssetsOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "converter",
      "outputs": [
        {
          "internalType": "contract ITetuConverter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "created",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToInsurance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "doHardWork",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultState",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addr",
          "type": "address[]"
        },
        {
          "internalType": "int24[]",
          "name": "tickData",
          "type": "int24[]"
        },
        {
          "internalType": "uint256[]",
          "name": "nums",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "boolValues",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPropNotUnderlying18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "getSlot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSpecificState",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "nums",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "increaseRevision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "splitter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "converter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange_",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "rebalanceTickRange_",
          "type": "int24"
        },
        {
          "internalType": "uint256[4]",
          "name": "fuseThresholds",
          "type": "uint256[4]"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "updateTotalAssetsBeforeInvest_",
          "type": "bool"
        }
      ],
      "name": "investAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strategyLoss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "isGovernance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isReadyToHardWork",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "needRebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        }
      ],
      "name": "onTransferAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFeeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "planEntryData",
          "type": "bytes"
        }
      ],
      "name": "quoteWithdrawByAgg",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenToSwap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToSwap",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "checkNeedRebalance",
          "type": "bool"
        }
      ],
      "name": "rebalanceNoSwaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvestThresholdPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "theAsset_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "requirePayAmountBack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setCompoundRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "name": "setFuseStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "values",
          "type": "uint256[4]"
        }
      ],
      "name": "setFuseThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percent_",
          "type": "uint256"
        }
      ],
      "name": "setReinvestThresholdPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategyProfitHolder",
          "type": "address"
        }
      ],
      "name": "setStrategyProfitHolder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setStrategySpecificName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "done",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawDone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ratio_",
          "type": "uint256"
        }
      ],
      "name": "setupPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategySpecificName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0Owed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Owed",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3MintCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllToSplitter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strategyLoss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenToSwap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aggregator_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToSwap_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "planEntryData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "entryToPool",
          "type": "uint256"
        }
      ],
      "name": "withdrawByAggStep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToSplitter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strategyLoss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3f7986b6ca23ef6c0bccf6162aa156f37e890a5587bb80df257132180e8883e",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0xFe5E7294F255caBb39C8f786264C6B4f92b63210",
    "transactionIndex": 2,
    "gasUsed": "5181512",
    "logsBloom": "0x
    "blockHash": "0x906c7798eab13cf29d1c3986a82568f5e1196ecb7daf6e06c603d7023dcd9709",
    "transactionHash": "0xd3f7986b6ca23ef6c0bccf6162aa156f37e890a5587bb80df257132180e8883e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 7785169,
        "transactionHash": "0xd3f7986b6ca23ef6c0bccf6162aa156f37e890a5587bb80df257132180e8883e",
        "address": "0xFe5E7294F255caBb39C8f786264C6B4f92b63210",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0x906c7798eab13cf29d1c3986a82568f5e1196ecb7daf6e06c603d7023dcd9709"
      }
    ],
    "blockNumber": 7785169,
    "cumulativeGasUsed": "5378942",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e76158ae9a22536febb5003c96af34b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"withdrawnAmounts\",\"type\":\"uint256[]\"}],\"name\":\"OnDepositorEmergencyExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"consumedAmounts\",\"type\":\"uint256[]\"}],\"name\":\"OnDepositorEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"withdrawnAmounts\",\"type\":\"uint256[]\"}],\"name\":\"OnDepositorExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedAssetsNewPrices\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedByPrices\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedHandleRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lostHandleRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lostDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidDebtToInsurance\",\"type\":\"uint256\"}],\"name\":\"OnHardWorkEarnedLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"RevisionIncreased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLABLE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONVERTER_STRATEGY_BASE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_BASE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAPV3_DEPOSITOR_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcInvestedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investedAssetsOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"contract ITetuConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToInsurance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultState\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"int24[]\",\"name\":\"tickData\",\"type\":\"int24[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nums\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"boolValues\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPropNotUnderlying18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"getSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpecificState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nums\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"increaseRevision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"splitter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"converter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange_\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rebalanceTickRange_\",\"type\":\"int24\"},{\"internalType\":\"uint256[4]\",\"name\":\"fuseThresholds\",\"type\":\"uint256[4]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"updateTotalAssetsBeforeInvest_\",\"type\":\"bool\"}],\"name\":\"investAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyLoss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyToHardWork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"onTransferAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"planEntryData\",\"type\":\"bytes\"}],\"name\":\"quoteWithdrawByAgg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenToSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSwap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"checkNeedRebalance\",\"type\":\"bool\"}],\"name\":\"rebalanceNoSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"requirePayAmountBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCompoundRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setFuseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"values\",\"type\":\"uint256[4]\"}],\"name\":\"setFuseThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent_\",\"type\":\"uint256\"}],\"name\":\"setReinvestThresholdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyProfitHolder\",\"type\":\"address\"}],\"name\":\"setStrategyProfitHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setStrategySpecificName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"done\",\"type\":\"uint256\"}],\"name\":\"setWithdrawDone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"name\":\"setupPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategySpecificName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Owed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToSplitter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyLoss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToSwap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSwap_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"planEntryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"entryToPool\",\"type\":\"uint256\"}],\"name\":\"withdrawByAggStep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToSplitter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyLoss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"a17\",\"kind\":\"dev\",\"methods\":{\"claim()\":{\"details\":\"Manual claim rewards.\"},\"created()\":{\"returns\":{\"_0\":\"Creation timestamp\"}},\"createdBlock()\":{\"returns\":{\"_0\":\"Creation block number\"}},\"doHardWork()\":{\"returns\":{\"earned\":\"Earned amount in terms of {asset}\",\"lost\":\"Lost amount in terms of {asset}\"}},\"emergencyExit()\":{\"details\":\"In case of any issue operator can withdraw all from pool.\"},\"getDefaultState()\":{\"returns\":{\"addr\":\"[tokenA, tokenB, pool, profitHolder]\",\"boolValues\":\"[isStablePool, depositorSwapTokens]\",\"nums\":\"[totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]\",\"tickData\":\"[tickSpacing, lowerTick, upperTick, rebalanceTickRange]\"}},\"getFees()\":{\"returns\":{\"fee0\":\"and fee1.\"}},\"getPropNotUnderlying18()\":{\"returns\":{\"_0\":\"Proportion of the not-underlying [0...1e18]\"}},\"getSlot(uint256)\":{\"details\":\"Gets a slot as bytes32\"},\"getSpecificState()\":{\"returns\":{\"nums\":\"Balances of [tokenA, tokenB] for profit holder\"}},\"increaseRevision(address)\":{\"details\":\"Revision should be increased on each contract upgrade\"},\"init(address,address,address,address,int24,int24,uint256[4])\":{\"params\":{\"controller_\":\"The address of the controller.\",\"converter_\":\"The address of the converter.\",\"fuseThresholds\":\"Price thresholds for tokens [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\",\"pool_\":\"The address of the pool.\",\"rebalanceTickRange_\":\"The tick range for rebalancing.\",\"splitter_\":\"The address of the splitter.\",\"tickRange_\":\"The tick range for the liquidity position.\"}},\"investAll(uint256,bool)\":{\"params\":{\"updateTotalAssetsBeforeInvest_\":\"Recalculate total assets amount before depositing.                                       It can be false if we know exactly, that the amount is already actual.\"},\"returns\":{\"strategyLoss\":\"Loss should be covered from Insurance\"}},\"isController(address)\":{\"details\":\"Return true if given address is controller\"},\"isReadyToHardWork()\":{\"returns\":{\"_0\":\"A boolean indicating if the strategy is ready for hard work.\"}},\"needRebalance()\":{\"returns\":{\"_0\":\"A boolean indicating if {rebalanceNoSwaps} should be called.\"}},\"onTransferAmounts(address[],uint256[])\":{\"params\":{\"amounts_\":\"Amount of {asset_} that has been sent to the user's balance\",\"assets_\":\"Any asset sent to the balance, i.e. inside repayTheBorrow\"}},\"performanceFee()\":{\"details\":\"use FEE_DENOMINATOR\"},\"previousImplementation()\":{\"details\":\"Previous logic implementation\"},\"rebalanceNoSwaps(bool)\":{\"params\":{\"checkNeedRebalance\":\"Revert if rebalance is not needed. Pass false to deposit after withdrawByAgg-iterations\"}},\"requirePayAmountBack(address,uint256)\":{\"params\":{\"amount_\":\"Required amount of {theAsset_}\",\"theAsset_\":\"Required asset (either collateral or borrow), it can be NOT underlying\"},\"returns\":{\"amountOut\":\"Amount that was send OR can be claimed on the next call.                   The caller should control own balance to know if the amount was actually send                   (because we need compatibility with exist not-NSR strategies)\"}},\"revision()\":{\"details\":\"Contract upgrade counter\"},\"setCompoundRatio(uint256)\":{\"details\":\"PlatformVoter can change compound ratio for some strategies.      A strategy can implement another logic for some uniq cases.\"},\"setFuseStatus(uint256)\":{\"params\":{\"status\":\"See PairBasedStrategyLib.FuseStatus enum for possible values\"}},\"setFuseThresholds(uint256[4])\":{\"params\":{\"values\":\"Price thresholds: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\"}},\"setLiquidationThreshold(address,uint256)\":{\"details\":\"Liquidation thresholds are used to detect dust in many cases, not only in liquidation case\",\"params\":{\"amount\":\"Min amount of token allowed to liquidate, token's decimals are used.\"}},\"setReinvestThresholdPercent(uint256)\":{\"params\":{\"percent_\":\"New value of the percent, decimals = {REINVEST_THRESHOLD_PERCENT_DENOMINATOR}\"}},\"setStrategyProfitHolder(address)\":{\"details\":\"Set a dedicated contract for rewards for properly counting.      It is safe to allow change it to operator - we suppose the contract only temporally store the last rewards.\"},\"setStrategySpecificName(string)\":{\"details\":\"The name will be used for UI.\"},\"setWithdrawDone(uint256)\":{\"params\":{\"done\":\"0 - full withdraw required, 1 - full withdraw was done\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalAssets()\":{\"details\":\"Total amount of underlying assets under control of this strategy.\"},\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"params\":{\"amount0Owed\":\"The amount of token0 owed to the pool.\",\"amount1Owed\":\"The amount of token1 owed to the pool.\"}},\"withdrawAllToSplitter()\":{\"details\":\"Withdraws all underlying assets to the vault\",\"returns\":{\"strategyLoss\":\"Loss should be covered from Insurance\"}},\"withdrawByAggStep(address,address,uint256,bytes,bytes,uint256)\":{\"details\":\"All swap-by-agg data should be prepared using {quoteWithdrawByAgg} off-chain\",\"params\":{\"aggregator_\":\"Aggregator that should be used on next swap. 0 - use liquidator\",\"amountToSwap_\":\"Amount that should be swapped. 0 - no swap\",\"entryToPool\":\"Allow to enter to the pool at the end. Use false if you are going to make several iterations.                    It's possible to enter back to the pool by calling {rebalanceNoSwaps} at any moment                    0 - not allowed, 1 - allowed, 2 - allowed only if completed\",\"planEntryData\":\"PLAN_XXX + additional data, see IterationPlanKinds\",\"swapData\":\"Swap rote that was prepared off-chain.\",\"tokenToSwap_\":\"What token should be swapped to other\"},\"returns\":{\"completed\":\"All debts were closed, leftovers were swapped to the required proportions.\"}},\"withdrawToSplitter(uint256)\":{\"details\":\"Withdraws some assets to the splitter\",\"returns\":{\"strategyLoss\":\"Loss should be covered from Insurance\"}}},\"title\":\"Delta-neutral liquidity hedging converter fill-up/swap rebalancing strategy for UniswapV3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CONTROLLABLE_VERSION()\":{\"notice\":\"Version of the contract\"},\"capacity()\":{\"notice\":\"Unlimited capacity by default\"},\"controller()\":{\"notice\":\"Return controller address saved in the contract slot\"},\"created()\":{\"notice\":\"Return creation timestamp\"},\"createdBlock()\":{\"notice\":\"Return creation block number\"},\"doHardWork()\":{\"notice\":\"Do hard work with reinvesting\"},\"getDefaultState()\":{\"notice\":\"Returns the current state of the contract\"},\"getFees()\":{\"notice\":\"Returns the fees for the current state.\"},\"getPropNotUnderlying18()\":{\"notice\":\"Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\"},\"init(address,address,address,address,int24,int24,uint256[4])\":{\"notice\":\"Initialize the strategy with the given parameters.\"},\"investAll(uint256,bool)\":{\"notice\":\"Stakes everything the strategy holds into the reward pool. amount_ Amount transferred to the strategy balance just before calling this function\"},\"investedAssets()\":{\"notice\":\"Amount of underlying assets converted to pool assets and invested to the pool.\"},\"isGovernance(address)\":{\"notice\":\"Return true if given address is setup as governance in Controller\"},\"isReadyToHardWork()\":{\"notice\":\"Check if the strategy is ready for hard work.\"},\"liquidationThresholds(address)\":{\"notice\":\"Minimum token amounts that can be liquidated\"},\"needRebalance()\":{\"notice\":\"Check if the strategy needs rebalancing.\"},\"onTransferAmounts(address[],uint256[])\":{\"notice\":\"TetuConverter calls this function when it sends any amount to user's balance\"},\"performanceFee()\":{\"notice\":\"A percent of total profit that is sent to the {performanceReceiver} before compounding\"},\"performanceReceiver()\":{\"notice\":\"{performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\"},\"quoteWithdrawByAgg(bytes)\":{\"notice\":\"Get info about a swap required by next call of {withdrawByAggStep} within the given plan\"},\"rebalanceNoSwaps(bool)\":{\"notice\":\"Rebalance using borrow/repay only, no swaps\"},\"requirePayAmountBack(address,uint256)\":{\"notice\":\"Converters asks to send some amount back.         The results depend on whether the required amount is on the balance:         1. The {amount_} exists on the balance: send the amount to TetuConverter, return {amount_}         2. The {amount_} doesn't exist on the balance. Try to receive the {amount_}.         2.1. if the required amount is received: return {amount_}         2.2. if less amount X (X < {amount_}) is received return X - gap         In the case 2 no amount is send to TetuConverter.         Converter should make second call of requirePayAmountBack({amountOut}) to receive the assets.\"},\"setFuseStatus(uint256)\":{\"notice\":\"Manually set status of the fuse\"},\"setFuseThresholds(uint256[4])\":{\"notice\":\"Set thresholds for the fuse: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]         Decimals 18. The thresholds are compared with prices from TetuConverter's price oracle.         Example: [0.9, 0.92, 1.08, 1.1]         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\"},\"setWithdrawDone(uint256)\":{\"notice\":\"Set withdrawDone value.         When a fuse was triggered ON, all debts should be closed and asset should be converted to underlying.         After completion of the conversion withdrawDone can be set to 1.         So, {getFuseStatus} will return  withdrawDone=1 and you will know, that withdraw is not required\"},\"setupPerformanceFee(uint256,address,uint256)\":{\"notice\":\"Set performance fee, receiver and ratio\"},\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"notice\":\"Callback function called by Uniswap V3 pool on mint operation.\"},\"withdrawByAggStep(address,address,uint256,bytes,bytes,uint256)\":{\"notice\":\"Make withdraw iteration: [exit from the pool], [make 1 swap], [repay a debt], [enter to the pool]         Typical sequence of the actions is: exit from the pool, make 1 swap, repay 1 debt.         You can enter to the pool if you are sure that you won't have borrow + repay on AAVE3 in the same block.\"}},\"notice\":\"This strategy provides delta-neutral liquidity hedging for Uniswap V3 pools. It rebalances the liquidity         by utilizing fill-up and swap methods depending on the range size of the liquidity provided.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol\":\"UniswapV3ConverterStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0xc2ef11f0141e7e1a5df255be2e1552044deed377349cb886908f3f10ded57fa8\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n\\n  // --- DEPENDENCY ADDRESSES\\n  function governance() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function liquidator() external view returns (address);\\n\\n  function forwarder() external view returns (address);\\n\\n  function investFund() external view returns (address);\\n\\n  function veDistributor() external view returns (address);\\n\\n  function platformVoter() external view returns (address);\\n\\n  // --- VAULTS\\n\\n  function vaults(uint id) external view returns (address);\\n\\n  function vaultsList() external view returns (address[] memory);\\n\\n  function vaultsListLength() external view returns (uint);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  // --- restrictions\\n\\n  function isOperator(address _adr) external view returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0x86716b8a4775605c31b8bb9f90f8f4a18b709ff4435182f3a148803368060a8c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaeca7db2074d7c66a20c609539e1f1656e67f6981bf01f83ad6aa8aa140c8d2e\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IForwarder {\\n\\n  function tetu() external view returns (address);\\n  function tetuThreshold() external view returns (uint);\\n\\n  function tokenPerDestinationLength(address destination) external view returns (uint);\\n\\n  function tokenPerDestinationAt(address destination, uint i) external view returns (address);\\n\\n  function amountPerDestination(address token, address destination) external view returns (uint amount);\\n\\n  function registerIncome(\\n    address[] memory tokens,\\n    uint[] memory amounts,\\n    address vault,\\n    bool isDistribute\\n  ) external;\\n\\n  function distributeAll(address destination) external;\\n\\n  function distribute(address token) external;\\n\\n  function setInvestFundRatio(uint value) external;\\n\\n  function setGaugesRatio(uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x687c497fc034e8d64bca403bac1bf4cd7bd1f107df414c2657325c1b3ab92822\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISplitter {\\n\\n  function init(address controller_, address _asset, address _vault) external;\\n\\n  // *************** ACTIONS **************\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint256 amount) external;\\n\\n  function coverPossibleStrategyLoss(uint earned, uint lost) external;\\n\\n  function doHardWork() external;\\n\\n  function investAll() external;\\n\\n  // **************** VIEWS ***************\\n\\n  function asset() external view returns (address);\\n\\n  function vault() external view returns (address);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function isHardWorking() external view returns (bool);\\n\\n  function strategies(uint i) external view returns (address);\\n\\n  function strategiesLength() external view returns (uint);\\n\\n  function HARDWORK_DELAY() external view returns (uint);\\n\\n  function lastHardWorks(address strategy) external view returns (uint);\\n\\n  function pausedStrategies(address strategy) external view returns (bool);\\n\\n  function pauseInvesting(address strategy) external;\\n\\n  function continueInvesting(address strategy, uint apr) external;\\n\\n  function rebalance(uint percent, uint lossTolerance) external;\\n\\n  function getStrategyCapacity(address strategy) external view returns (uint capacity);\\n\\n}\\n\",\"keccak256\":\"0x266c43734e3da96d9e5dcdd0f19c6dbd58fdc377c9cd361cb12da3e309fbb4ec\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStrategyV2 {\\n\\n  function NAME() external view returns (string memory);\\n\\n  function strategySpecificName() external view returns (string memory);\\n\\n  function PLATFORM() external view returns (string memory);\\n\\n  function STRATEGY_VERSION() external view returns (string memory);\\n\\n  function asset() external view returns (address);\\n\\n  function splitter() external view returns (address);\\n\\n  function compoundRatio() external view returns (uint);\\n\\n  function totalAssets() external view returns (uint);\\n\\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\\n  function isReadyToHardWork() external view returns (bool);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawAllToSplitter() external returns (uint strategyLoss);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawToSplitter(uint amount) external returns (uint strategyLoss);\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// @param amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function investAll(\\n    uint amount_,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external returns (\\n    uint strategyLoss\\n  );\\n\\n  function doHardWork() external returns (uint earned, uint lost);\\n\\n  function setCompoundRatio(uint value) external;\\n\\n  /// @notice Max amount that can be deposited to the strategy (its internal capacity), see SCB-593.\\n  ///         0 means no deposit is allowed at this moment\\n  function capacity() external view returns (uint);\\n\\n  /// @notice {performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\\n  function performanceReceiver() external view returns (address);\\n\\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n  /// @dev use FEE_DENOMINATOR\\n  function performanceFee() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc7dac6097df7310b510f1027ef9c1bd3ccd6a202ca69582f68233ee798f7c312\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IStrategyV2.sol\\\";\\n\\ninterface IStrategyV3 is IStrategyV2 {\\n  struct BaseState {\\n    /// @dev Underlying asset\\n    address asset;\\n\\n    /// @dev Linked splitter\\n    address splitter;\\n\\n    /// @notice {performanceFee}% of total profit is sent to {performanceReceiver} before compounding\\n    /// @dev governance by default\\n    address performanceReceiver;\\n\\n    /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n    /// @dev {DEFAULT_PERFORMANCE_FEE} by default, FEE_DENOMINATOR is used\\n    uint performanceFee;\\n\\n    /// @notice Ratio to split performance fee on toPerf + toInsurance, [0..100_000]\\n    ///         100_000 - send full amount toPerf, 0 - send full amount toInsurance.\\n    uint performanceFeeRatio;\\n\\n    /// @dev Percent of profit for autocompound inside this strategy.\\n    uint compoundRatio;\\n\\n    /// @dev Represent specific name for this strategy. Should include short strategy name and used assets. Uniq across the vault.\\n    string strategySpecificName;\\n  }\\n}\\n\",\"keccak256\":\"0xe8a0179a82c40ba0c372486c5ebcc7df6431216c8c0d91cc408fb8f881e72f70\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0xd5fe6f3ab750cc2d23f573597db5607c701e74c39e13c20c07a921a26c6d5012\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVaultInsurance.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ISplitter.sol\\\";\\n\\ninterface ITetuVaultV2 {\\n\\n  function splitter() external view returns (ISplitter);\\n\\n  function insurance() external view returns (IVaultInsurance);\\n\\n  function depositFee() external view returns (uint);\\n\\n  function withdrawFee() external view returns (uint);\\n\\n  function init(\\n    address controller_,\\n    IERC20 _asset,\\n    string memory _name,\\n    string memory _symbol,\\n    address _gauge,\\n    uint _buffer\\n  ) external;\\n\\n  function setSplitter(address _splitter) external;\\n\\n  function coverLoss(uint amount) external;\\n\\n  function initInsurance(IVaultInsurance _insurance) external;\\n\\n}\\n\",\"keccak256\":\"0x9e77a10b32a52f826d28d17c420f776fd289e5e4f925ec87f7177a1ce224a412\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IVaultInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVaultInsurance {\\n\\n  function init(address _vault, address _asset) external;\\n\\n  function vault() external view returns (address);\\n\\n  function asset() external view returns (address);\\n\\n  function transferToVault(uint amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6461572763b1f6decec1dee9d2ffe8ca152369bdc68255ec083cb3da3ce507a1\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/lib/InterfaceIds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\n/// @title Library for interface IDs\\n/// @author bogdoslav\\nlibrary InterfaceIds {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant INTERFACE_IDS_LIB_VERSION = \\\"1.0.1\\\";\\n\\n  /// default notation:\\n  /// bytes4 public constant I_VOTER = type(IVoter).interfaceId;\\n\\n  /// As type({Interface}).interfaceId can be changed,\\n  /// when some functions changed at the interface,\\n  /// so used hardcoded interface identifiers\\n\\n  bytes4 public constant I_VOTER = bytes4(keccak256(\\\"IVoter\\\"));\\n  bytes4 public constant I_BRIBE = bytes4(keccak256(\\\"IBribe\\\"));\\n  bytes4 public constant I_GAUGE = bytes4(keccak256(\\\"IGauge\\\"));\\n  bytes4 public constant I_VE_TETU = bytes4(keccak256(\\\"IVeTetu\\\"));\\n  bytes4 public constant I_SPLITTER = bytes4(keccak256(\\\"ISplitter\\\"));\\n  bytes4 public constant I_FORWARDER = bytes4(keccak256(\\\"IForwarder\\\"));\\n  bytes4 public constant I_MULTI_POOL = bytes4(keccak256(\\\"IMultiPool\\\"));\\n  bytes4 public constant I_CONTROLLER = bytes4(keccak256(\\\"IController\\\"));\\n  bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\\\"ITetuERC165\\\"));\\n  bytes4 public constant I_STRATEGY_V2 = bytes4(keccak256(\\\"IStrategyV2\\\"));\\n  bytes4 public constant I_STRATEGY_V3 = bytes4(keccak256(\\\"IStrategyV3\\\"));\\n  bytes4 public constant I_CONTROLLABLE = bytes4(keccak256(\\\"IControllable\\\"));\\n  bytes4 public constant I_TETU_VAULT_V2 = bytes4(keccak256(\\\"ITetuVaultV2\\\"));\\n  bytes4 public constant I_PLATFORM_VOTER = bytes4(keccak256(\\\"IPlatformVoter\\\"));\\n  bytes4 public constant I_VE_DISTRIBUTOR = bytes4(keccak256(\\\"IVeDistributor\\\"));\\n  bytes4 public constant I_TETU_CONVERTER = bytes4(keccak256(\\\"ITetuConverter\\\"));\\n  bytes4 public constant I_VAULT_INSURANCE = bytes4(keccak256(\\\"IVaultInsurance\\\"));\\n  bytes4 public constant I_STRATEGY_STRICT = bytes4(keccak256(\\\"IStrategyStrict\\\"));\\n  bytes4 public constant I_ERC4626 = bytes4(keccak256(\\\"IERC4626\\\"));\\n\\n}\\n\",\"keccak256\":\"0x0b03305fffdb0ae7bca319c38ac0b43116765987cf61f529f156f46171e73de1\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-contracts-v2/contracts/lib/SlotsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\n/// @author bogdoslav\\nlibrary SlotsLib {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant SLOT_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  // ************* GETTERS *******************\\n\\n  /// @dev Gets a slot as bytes32\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as an address\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as uint256\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  // ************* ARRAY GETTERS *******************\\n\\n  /// @dev Gets an array length\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function uintAt(bytes32 slot, uint index) internal view returns (uint result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  // ************* SETTERS *******************\\n\\n  /// @dev Sets a slot with bytes32\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, bytes32 value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with address\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, address value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with uint\\n  function set(bytes32 slot, uint value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  // ************* ARRAY SETTERS *******************\\n\\n  /// @dev Sets a slot array at index with address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, address value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot array at index with uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, uint value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets an array length\\n  function setLength(bytes32 slot, uint length) internal {\\n    assembly {\\n      sstore(slot, length)\\n    }\\n  }\\n\\n  /// @dev Pushes an address to the array\\n  function push(bytes32 slot, address value) internal {\\n    uint length = arrayLength(slot);\\n    setAt(slot, length, value);\\n    setLength(slot, length + 1);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x883de721bbf73a85c494e45380b064b91ea2c5cd0b7a777cdacb544575761c8a\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\n\\nlibrary StringLib {\\n\\n  /// @dev Inspired by OraclizeAPI's implementation - MIT license\\n  ///      https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n  function toString(uint value) external pure returns (string memory) {\\n    return _toString(value);\\n  }\\n\\n  function _toString(uint value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint temp = value;\\n    uint digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toAsciiString(address x) external pure returns (string memory) {\\n    return _toAsciiString(x);\\n  }\\n\\n  function _toAsciiString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = _char(hi);\\n      s[2 * i + 1] = _char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) external pure returns (bytes1 c) {\\n    return _char(b);\\n  }\\n\\n  function _char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xe7fef8dd3d994fd08ac32e3eff07f39546cc58dc0101f5fc7c0efebfb4f3f01a\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n     */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xcaaf196e5c26fdcd072a9f0833b54cf9fbd12d08be59898f04611f685d31707a\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n  uint8 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n  event Initialized(uint8 version);\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n      \\\"Initializable: contract is already initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier reinitializer(uint8 version) {\\n    require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n    emit Initialized(version);\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n    if (_initialized != type(uint8).max) {\\n      _initialized = type(uint8).max;\\n      emit Initialized(type(uint8).max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n  function _getInitializedVersion() internal view returns (uint8) {\\n    return _initialized;\\n  }\\n\\n  /**\\n   * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0x3c7a20b7e9d134311f43e27990f32c75ff6cb461a6136c4f83fc20734f1d82e0\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\",\"keccak256\":\"0x2c5be0f4a60126b08e20f40586958ec1b76a27b69406c4b0db19e9dc6f771cfc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/proxy/ControllableV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/Initializable.sol\\\";\\nimport \\\"../tools/TetuERC165.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../lib/SlotsLib.sol\\\";\\nimport \\\"../lib/InterfaceIds.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call __Controllable_init() in any case.\\n/// @author belbix\\nabstract contract ControllableV3 is Initializable, TetuERC165, IControllable {\\n  using SlotsLib for bytes32;\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant CONTROLLABLE_VERSION = \\\"3.0.1\\\";\\n\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.revision\\\")) - 1);\\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.prev_logic\\\")) - 1);\\n\\n  event ContractInitialized(address controller, uint ts, uint block);\\n  event RevisionIncreased(uint value, address oldLogic);\\n\\n  /// @dev Prevent implementation init\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param controller_ Controller address\\n  function __Controllable_init(address controller_) internal onlyInitializing {\\n    require(controller_ != address(0), \\\"Zero controller\\\");\\n    _requireInterface(controller_, InterfaceIds.I_CONTROLLER);\\n    require(IController(controller_).governance() != address(0), \\\"Zero governance\\\");\\n    _CONTROLLER_SLOT.set(controller_);\\n    _CREATED_SLOT.set(block.timestamp);\\n    _CREATED_BLOCK_SLOT.set(block.number);\\n    emit ContractInitialized(controller_, block.timestamp, block.number);\\n  }\\n\\n  /// @dev Return true if given address is controller\\n  function isController(address _value) public override view returns (bool) {\\n    return _value == controller();\\n  }\\n\\n  /// @notice Return true if given address is setup as governance in Controller\\n  function isGovernance(address _value) public override view returns (bool) {\\n    return IController(controller()).governance() == _value;\\n  }\\n\\n  /// @dev Contract upgrade counter\\n  function revision() external view returns (uint){\\n    return _REVISION_SLOT.getUint();\\n  }\\n\\n  /// @dev Previous logic implementation\\n  function previousImplementation() external view returns (address){\\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_CONTROLLABLE || super.supportsInterface(interfaceId);\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  function controller() public view override returns (address) {\\n    return _CONTROLLER_SLOT.getAddress();\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return Creation timestamp\\n  function created() external view override returns (uint256) {\\n    return _CREATED_SLOT.getUint();\\n  }\\n\\n  /// @notice Return creation block number\\n  /// @return Creation block number\\n  function createdBlock() external override view returns (uint256) {\\n    return _CREATED_BLOCK_SLOT.getUint();\\n  }\\n\\n  /// @dev Revision should be increased on each contract upgrade\\n  function increaseRevision(address oldLogic) external override {\\n    require(msg.sender == address(this), \\\"Increase revision forbidden\\\");\\n    uint r = _REVISION_SLOT.getUint() + 1;\\n    _REVISION_SLOT.set(r);\\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\\n    emit RevisionIncreased(r, oldLogic);\\n  }\\n\\n  /// @dev Gets a slot as bytes32\\n  function getSlot(uint slot) external view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x903c41cf5b652b90c959c47013f8ad949e435ec7e98fd021fef12388c78c05a2\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyBaseV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IStrategyV3.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\nimport \\\"../interfaces/IForwarder.sol\\\";\\nimport \\\"../proxy/ControllableV3.sol\\\";\\nimport \\\"./StrategyLib2.sol\\\";\\n\\n/// @title Abstract contract for base strategy functionality\\n/// @author a17\\nabstract contract StrategyBaseV3 is IStrategyV3, ControllableV3 {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant STRATEGY_BASE_VERSION = \\\"3.0.0\\\";\\n\\n  // *************************************************************\\n  //                        VARIABLES\\n  //                Keep names and ordering!\\n  //                 Add only in the bottom.\\n  // *************************************************************\\n\\n  BaseState internal baseState;\\n\\n  // *************************************************************\\n  //                        INIT\\n  // *************************************************************\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  function __StrategyBase_init(\\n    address controller_,\\n    address splitter_\\n  ) internal onlyInitializing {\\n    _requireInterface(splitter_, InterfaceIds.I_SPLITTER);\\n    __Controllable_init(controller_);\\n    StrategyLib2.init(baseState, controller_, splitter_);\\n  }\\n\\n  // *************************************************************\\n  //                        VIEWS\\n  // *************************************************************\\n\\n  /// @dev Total amount of underlying assets under control of this strategy.\\n  function totalAssets() public view override returns (uint) {\\n    return IERC20(baseState.asset).balanceOf(address(this)) + investedAssets();\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_STRATEGY_V3 || interfaceId == InterfaceIds.I_STRATEGY_V2 || super.supportsInterface(interfaceId);\\n  }\\n\\n  function asset() external view returns (address) {\\n    return baseState.asset;\\n  }\\n\\n  function splitter() external view returns (address) {\\n    return baseState.splitter;\\n  }\\n\\n  function compoundRatio() external view returns (uint) {\\n    return baseState.compoundRatio;\\n  }\\n\\n  function performanceReceiver() external view returns (address) {\\n    return baseState.performanceReceiver;\\n  }\\n\\n  function performanceFee() external view returns (uint) {\\n    return baseState.performanceFee;\\n  }\\n\\n  function performanceFeeRatio() external view returns (uint) {\\n    return baseState.performanceFeeRatio;\\n  }\\n\\n  function strategySpecificName() external view returns (string memory) {\\n    return baseState.strategySpecificName;\\n  }\\n\\n  // *************************************************************\\n  //                   VOTER ACTIONS\\n  // *************************************************************\\n\\n  /// @dev PlatformVoter can change compound ratio for some strategies.\\n  ///      A strategy can implement another logic for some uniq cases.\\n  function setCompoundRatio(uint value) external virtual override {\\n    StrategyLib2._changeCompoundRatio(baseState, controller(), value);\\n  }\\n\\n  // *************************************************************\\n  //                   OPERATOR ACTIONS\\n  // *************************************************************\\n\\n  /// @dev The name will be used for UI.\\n  function setStrategySpecificName(string calldata name) external {\\n    StrategyLib2.onlyOperators(controller());\\n    StrategyLib2._changeStrategySpecificName(baseState, name);\\n  }\\n\\n  /// @dev In case of any issue operator can withdraw all from pool.\\n  function emergencyExit() external {\\n    // check inside lib call\\n\\n    _emergencyExitFromPool();\\n    StrategyLib2.sendOnEmergencyExit(controller(), baseState.asset, baseState.splitter);\\n  }\\n\\n  /// @dev Manual claim rewards.\\n  function claim() external {\\n    StrategyLib2._checkManualClaim(controller());\\n    _claim();\\n  }\\n\\n  // *************************************************************\\n  //                   GOVERNANCE ACTIONS\\n  // *************************************************************\\n\\n  /// @notice Set performance fee, receiver and ratio\\n  function setupPerformanceFee(uint fee_, address receiver_, uint ratio_) external {\\n    StrategyLib2.setupPerformanceFee(baseState, fee_, receiver_, ratio_, controller());\\n  }\\n\\n  // *************************************************************\\n  //                    DEPOSIT/WITHDRAW\\n  // *************************************************************\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function investAll(\\n    uint /*amount_*/,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external override returns (\\n    uint strategyLoss\\n  ) {\\n    uint balance = StrategyLib2._checkInvestAll(baseState.splitter, baseState.asset);\\n\\n    if (balance > 0) {\\n      strategyLoss = _depositToPool(balance, updateTotalAssetsBeforeInvest_);\\n    }\\n\\n    return strategyLoss;\\n  }\\n\\n  /// @dev Withdraws all underlying assets to the vault\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawAllToSplitter() external override returns (uint strategyLoss) {\\n    address _splitter = baseState.splitter;\\n    address _asset = baseState.asset;\\n\\n    uint balance = StrategyLib2._checkSplitterSenderAndGetBalance(_splitter, _asset);\\n\\n    (uint expectedWithdrewUSD, uint assetPrice, uint _strategyLoss) = _withdrawAllFromPool();\\n\\n    StrategyLib2._withdrawAllToSplitterPostActions(\\n      _asset,\\n      balance,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n    return _strategyLoss;\\n  }\\n\\n  /// @dev Withdraws some assets to the splitter\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawToSplitter(uint amount) external override returns (uint strategyLoss) {\\n    address _splitter = baseState.splitter;\\n    address _asset = baseState.asset;\\n\\n    uint balance = StrategyLib2._checkSplitterSenderAndGetBalance(_splitter, _asset);\\n\\n    if (amount > balance) {\\n      uint expectedWithdrewUSD;\\n      uint assetPrice;\\n\\n      (expectedWithdrewUSD, assetPrice, strategyLoss) = _withdrawFromPool(amount - balance);\\n      balance = StrategyLib2.checkWithdrawImpact(\\n        _asset,\\n        balance,\\n        expectedWithdrewUSD,\\n        assetPrice,\\n        _splitter\\n      );\\n    }\\n\\n    StrategyLib2._withdrawToSplitterPostActions(\\n      amount,\\n      balance,\\n      _asset,\\n      _splitter\\n    );\\n    return strategyLoss;\\n  }\\n\\n  // *************************************************************\\n  //                       VIRTUAL\\n  // These functions must be implemented in the strategy contract\\n  // *************************************************************\\n\\n  /// @dev Amount of underlying assets invested to the pool.\\n  function investedAssets() public view virtual returns (uint);\\n\\n  /// @notice Deposit given amount to the pool.\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _depositToPool(\\n    uint amount,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) internal virtual returns (\\n    uint strategyLoss\\n  );\\n\\n  /// @dev Withdraw given amount from the pool.\\n  /// @return expectedWithdrewUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\\n  /// @return assetPrice Price of the strategy {asset}.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _withdrawFromPool(uint amount) internal virtual returns (\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    uint strategyLoss\\n  );\\n\\n  /// @dev Withdraw all from the pool.\\n  /// @return expectedWithdrewUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\\n  /// @return assetPrice Price of the strategy {asset}.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _withdrawAllFromPool() internal virtual returns (\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    uint strategyLoss\\n  );\\n\\n  /// @dev If pool support emergency withdraw need to call it for emergencyExit()\\n  ///      Withdraw assets without impact checking.\\n  function _emergencyExitFromPool() internal virtual;\\n\\n  /// @dev Claim all possible rewards.\\n  function _claim() internal virtual returns (address[] memory rewardTokens, uint[] memory amounts);\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to add new\\n  ///      variables without shifting down storage in the inheritance chain.\\n  ///      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint[50 - 7] private __gap;\\n}\\n\",\"keccak256\":\"0x690fcf00e6b6502f94af4a5b92c6da9b6b8ee5dc7cbc0f5e4647de27128f5592\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\n\\nlibrary StrategyLib {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Denominator for fee calculation.\\n  uint internal constant FEE_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CompoundRatioChanged(uint oldValue, uint newValue);\\n  event StrategySpecificNameChanged(string name);\\n  event EmergencyExit(address sender, uint amount);\\n  event ManualClaim(address sender);\\n  event InvestAll(uint balance);\\n  event WithdrawAllToSplitter(uint amount);\\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant WRONG_VALUE = \\\"SB: Wrong value\\\";\\n  /// @dev Denominator for compound ratio\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        CHECKS AND EMITS\\n  // *************************************************************\\n\\n  function _checkCompoundRatioChanged(address controller, uint oldValue, uint newValue) external {\\n    onlyPlatformVoter(controller);\\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\\n    emit CompoundRatioChanged(oldValue, newValue);\\n  }\\n\\n  function _checkStrategySpecificNameChanged(address controller, string calldata newName) external {\\n    onlyOperators(controller);\\n    emit StrategySpecificNameChanged(newName);\\n  }\\n\\n  function _checkManualClaim(address controller) external {\\n    onlyOperators(controller);\\n    emit ManualClaim(msg.sender);\\n  }\\n\\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\\n    onlySplitter(splitter);\\n    assetBalance = IERC20(asset).balanceOf(address(this));\\n    emit InvestAll(assetBalance);\\n  }\\n\\n  // *************************************************************\\n  //                     RESTRICTIONS\\n  // *************************************************************\\n\\n  /// @dev Restrict access only for operators\\n  function onlyOperators(address controller) public view {\\n    require(IController(controller).isOperator(msg.sender), DENIED);\\n  }\\n\\n  /// @dev Restrict access only for governance\\n  function onlyGovernance(address controller) public view {\\n    require(IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for platform voter\\n  function onlyPlatformVoter(address controller) public view {\\n    require(IController(controller).platformVoter() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for splitter\\n  function onlySplitter(address splitter) public view {\\n    require(splitter == msg.sender, DENIED);\\n  }\\n\\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_) external view {\\n    onlyGovernance(controller);\\n    require(fee_ <= 100_000, TOO_HIGH);\\n    require(receiver_ != address(0), WRONG_VALUE);\\n  }\\n\\n  // *************************************************************\\n  //                       HELPERS\\n  // *************************************************************\\n\\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\\n  ///         Revert if the amount is different from expected too much (high price impact)\\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\\n  /// @param assetPrice Price of the asset, decimals 18\\n  /// @return balance Current asset balance of the strategy\\n  function checkWithdrawImpact(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) public view returns (uint balance) {\\n    balance = IERC20(_asset).balanceOf(address(this));\\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\\n\\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\\n    }\\n  }\\n\\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\\n    onlyOperators(controller);\\n\\n    uint balance = IERC20(asset).balanceOf(address(this));\\n    IERC20(asset).safeTransfer(splitter, balance);\\n    emit EmergencyExit(msg.sender, balance);\\n  }\\n\\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\\n    onlySplitter(splitter);\\n    return IERC20(asset).balanceOf(address(this));\\n  }\\n\\n  function _withdrawAllToSplitterPostActions(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) external {\\n    uint balance = checkWithdrawImpact(\\n      _asset,\\n      balanceBefore,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n\\n    if (balance != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, balance);\\n    }\\n    emit WithdrawAllToSplitter(balance);\\n  }\\n\\n  function _withdrawToSplitterPostActions(\\n    uint amount,\\n    uint balance,\\n    address _asset,\\n    address _splitter\\n  ) external {\\n    uint amountAdjusted = Math.min(amount, balance);\\n    if (amountAdjusted != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\\n    }\\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\\n  }\\n}\\n\",\"keccak256\":\"0xa89e85b9acaeb5238c11c864167c152d0c33cf800fa3bb447e0629ed6fbff67c\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\nimport \\\"../interfaces/IStrategyV3.sol\\\";\\n\\nlibrary StrategyLib2 {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Denominator for fee calculation.\\n  uint internal constant FEE_DENOMINATOR = 100_000;\\n  /// @notice 10% of total profit is sent to {performanceReceiver} before compounding\\n  uint internal constant DEFAULT_PERFORMANCE_FEE = 10_000;\\n  address internal constant DEFAULT_PERF_FEE_RECEIVER = 0x9Cc199D4353b5FB3e6C8EEBC99f5139e0d8eA06b;\\n  /// @dev Denominator for compound ratio\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant WRONG_VALUE = \\\"SB: Wrong value\\\";\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CompoundRatioChanged(uint oldValue, uint newValue);\\n  event StrategySpecificNameChanged(string name);\\n  event EmergencyExit(address sender, uint amount);\\n  event ManualClaim(address sender);\\n  event InvestAll(uint balance);\\n  event WithdrawAllToSplitter(uint amount);\\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\\n  event PerformanceFeeChanged(uint fee, address receiver, uint ratio);\\n\\n  // *************************************************************\\n  //                        CHECKS AND EMITS\\n  // *************************************************************\\n\\n  function _checkManualClaim(address controller) external {\\n    onlyOperators(controller);\\n    emit ManualClaim(msg.sender);\\n  }\\n\\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\\n    onlySplitter(splitter);\\n    assetBalance = IERC20(asset).balanceOf(address(this));\\n    emit InvestAll(assetBalance);\\n  }\\n\\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_, uint ratio_) internal {\\n    onlyGovernance(controller);\\n    require(fee_ <= FEE_DENOMINATOR, TOO_HIGH);\\n    require(receiver_ != address(0), WRONG_VALUE);\\n    require(ratio_ <= FEE_DENOMINATOR, TOO_HIGH);\\n    emit PerformanceFeeChanged(fee_, receiver_, ratio_);\\n  }\\n\\n  // *************************************************************\\n  //                        SETTERS\\n  // *************************************************************\\n\\n  function _changeCompoundRatio(IStrategyV3.BaseState storage baseState, address controller, uint newValue) external {\\n    onlyPlatformVoter(controller);\\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\\n\\n    uint oldValue = baseState.compoundRatio;\\n    baseState.compoundRatio = newValue;\\n\\n    emit CompoundRatioChanged(oldValue, newValue);\\n  }\\n\\n  function _changeStrategySpecificName(IStrategyV3.BaseState storage baseState, string calldata newName) external {\\n    baseState.strategySpecificName = newName;\\n    emit StrategySpecificNameChanged(newName);\\n  }\\n\\n  // *************************************************************\\n  //                     RESTRICTIONS\\n  // *************************************************************\\n\\n  /// @dev Restrict access only for operators\\n  function onlyOperators(address controller) public view {\\n    require(IController(controller).isOperator(msg.sender), DENIED);\\n  }\\n\\n  /// @dev Restrict access only for governance\\n  function onlyGovernance(address controller) public view {\\n    require(IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for platform voter\\n  function onlyPlatformVoter(address controller) public view {\\n    require(IController(controller).platformVoter() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for splitter\\n  function onlySplitter(address splitter) public view {\\n    require(splitter == msg.sender, DENIED);\\n  }\\n\\n  // *************************************************************\\n  //                       HELPERS\\n  // *************************************************************\\n\\n  function init(\\n    IStrategyV3.BaseState storage baseState,\\n    address controller_,\\n    address splitter_\\n  ) external {\\n    baseState.asset = ISplitter(splitter_).asset();\\n    baseState.splitter = splitter_;\\n    baseState.performanceReceiver = DEFAULT_PERF_FEE_RECEIVER;\\n    baseState.performanceFee = DEFAULT_PERFORMANCE_FEE;\\n\\n    require(IControllable(splitter_).isController(controller_), WRONG_VALUE);\\n  }\\n\\n  function setupPerformanceFee(IStrategyV3.BaseState storage baseState, uint fee_, address receiver_, uint ratio_, address controller_) external {\\n    _checkSetupPerformanceFee(controller_, fee_, receiver_, ratio_);\\n    baseState.performanceFee = fee_;\\n    baseState.performanceReceiver = receiver_;\\n    baseState.performanceFeeRatio = ratio_;\\n  }\\n\\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\\n  ///         Revert if the amount is different from expected too much (high price impact)\\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\\n  /// @param assetPrice Price of the asset, decimals 18\\n  /// @return balance Current asset balance of the strategy\\n  function checkWithdrawImpact(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) public view returns (uint balance) {\\n    balance = IERC20(_asset).balanceOf(address(this));\\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\\n\\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\\n    }\\n  }\\n\\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\\n    onlyOperators(controller);\\n\\n    uint balance = IERC20(asset).balanceOf(address(this));\\n    IERC20(asset).safeTransfer(splitter, balance);\\n    emit EmergencyExit(msg.sender, balance);\\n  }\\n\\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\\n    onlySplitter(splitter);\\n    return IERC20(asset).balanceOf(address(this));\\n  }\\n\\n  function _withdrawAllToSplitterPostActions(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) external {\\n    uint balance = checkWithdrawImpact(\\n      _asset,\\n      balanceBefore,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n\\n    if (balance != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, balance);\\n    }\\n    emit WithdrawAllToSplitter(balance);\\n  }\\n\\n  function _withdrawToSplitterPostActions(\\n    uint amount,\\n    uint balance,\\n    address _asset,\\n    address _splitter\\n  ) external {\\n    uint amountAdjusted = Math.min(amount, balance);\\n    if (amountAdjusted != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\\n    }\\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\\n  }\\n}\\n\",\"keccak256\":\"0x02ca53b015408479ff049ce8a321a85f238e6b0a2d57f899f21dc9d879fb05cf\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-contracts-v2/contracts/tools/TetuERC165.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/ERC165.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../lib/InterfaceIds.sol\\\";\\n\\n/// @dev Tetu Implementation of the {IERC165} interface extended with helper functions.\\n/// @author bogdoslav\\nabstract contract TetuERC165 is ERC165 {\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_TETU_ERC165 || super.supportsInterface(interfaceId);\\n  }\\n\\n  // *************************************************************\\n  //                        HELPER FUNCTIONS\\n  // *************************************************************\\n  /// @author bogdoslav\\n\\n  /// @dev Checks what interface with id is supported by contract.\\n  /// @return bool. Do not throws\\n  function _isInterfaceSupported(address contractAddress, bytes4 interfaceId) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    try IERC165(contractAddress).supportsInterface(interfaceId) returns (bool isSupported) {\\n      return isSupported;\\n    } catch {\\n    }\\n    return false;\\n  }\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireInterface(address contractAddress, bytes4 interfaceId) internal view {\\n    require(_isInterfaceSupported(contractAddress, interfaceId), \\\"Interface is not supported\\\");\\n  }\\n\\n  /// @dev Checks what address is ERC20.\\n  /// @return bool. Do not throws\\n  function _isERC20(address contractAddress) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    bool totalSupplySupported;\\n    try IERC20(contractAddress).totalSupply() returns (uint) {\\n      totalSupplySupported = true;\\n    } catch {\\n    }\\n\\n    bool balanceSupported;\\n    try IERC20(contractAddress).balanceOf(address(this)) returns (uint) {\\n      balanceSupported = true;\\n    } catch {\\n    }\\n\\n    return totalSupplySupported && balanceSupported;\\n  }\\n\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireERC20(address contractAddress) internal view {\\n    require(_isERC20(contractAddress), \\\"Not ERC20\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xa6eb1009f769fbca986553c7f32af09c9e66c330b4b8c7b8344997001e2cd4f1\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-converter/contracts/interfaces/IBookkeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBookkeeper {\\n  /// @notice Register a new loan\\n  /// @dev This function can be called by a pool adapter only\\n  /// @param collateralAmount Amount of supplied collateral for the new loan\\n  /// @param borrowedAmount Borrowed amount provided for the given {collateralAmount}\\n  function onBorrow(uint collateralAmount, uint borrowedAmount) external;\\n\\n  /// @notice Register loan payment\\n  /// @dev This function can be called by a pool adapter only\\n  /// @param withdrawnCollateral Amount of collateral received by the user during the repaying.\\n  /// @param paidAmount Amount paid by the user during the repaying.\\n  function onRepay(uint withdrawnCollateral, uint paidAmount) external;\\n\\n\\n  /// @notice Save checkpoint for all pool adapters of the given {user_}\\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\\n  function checkpoint(address[] memory tokens_) external returns (\\n    uint[] memory deltaGains,\\n    uint[] memory deltaLosses\\n  );\\n\\n  /// @notice Calculate deltas that user would receive if he creates a checkpoint at the moment\\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\\n  function previewCheckpoint(address user, address[] memory tokens_) external view returns (\\n    uint[] memory deltaGains,\\n    uint[] memory deltaLosses\\n  );\\n\\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the signer\\n  ///         for the current period, start new period.\\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\\n  function startPeriod(address underlying_) external returns (\\n    uint gains,\\n    uint losses\\n  );\\n\\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the {user_}\\n  ///         for the current period, DON'T start new period.\\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\\n  function previewPeriod(address underlying_, address user_) external view returns (uint gains, uint losses);\\n}\",\"keccak256\":\"0x98b7887d604ebcfaf28038c456c6c6893ce10f55b821f4c7c002dbc8055ea388\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Keep and provide addresses of all application contracts\\ninterface IConverterController {\\n  function governance() external view returns (address);\\n\\n  // ********************* Health factor explanation  ****************\\n  // For example, a landing platform has: liquidity threshold = 0.85, LTV=0.8, LTV / LT = 1.0625\\n  // For collateral $100 we can borrow $80. A liquidation happens if the cost of collateral will reduce below $85.\\n  // We set min-health-factor = 1.1, target-health-factor = 1.3\\n  // For collateral 100 we will borrow 100/1.3 = 76.92\\n  //\\n  // Collateral value   100        77            assume that collateral value is decreased at 100/77=1.3 times\\n  // Collateral * LT    85         65.45\\n  // Borrow value       65.38      65.38         but borrow value is the same as before\\n  // Health factor      1.3        1.001         liquidation almost happens here (!)\\n  //\\n  /// So, if we have target factor 1.3, it means, that if collateral amount will decreases at 1.3 times\\n  // and the borrow value won't change at the same time, the liquidation happens at that point.\\n  // Min health factor marks the point at which a rebalancing must be made asap.\\n  // *****************************************************************\\n\\n  //#region ----------------------------------------------------- Configuration\\n\\n  /// @notice min allowed health factor with decimals 2, must be >= 1e2\\n  function minHealthFactor2() external view returns (uint16);\\n  function setMinHealthFactor2(uint16 value_) external;\\n\\n  /// @notice target health factor with decimals 2\\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\\n  ///      or additional borrow and restore the health factor to the given target value\\n  function targetHealthFactor2() external view returns (uint16);\\n  function setTargetHealthFactor2(uint16 value_) external;\\n\\n  /// @notice max allowed health factor with decimals 2\\n  /// @dev For future versions, currently max health factor is not used\\n  function maxHealthFactor2() external view returns (uint16);\\n  /// @dev For future versions, currently max health factor is not used\\n  function setMaxHealthFactor2(uint16 value_) external;\\n\\n  /// @notice get current value of blocks per day. The value is set manually at first and can be auto-updated later\\n  function blocksPerDay() external view returns (uint);\\n  /// @notice set value of blocks per day manually and enable/disable auto update of this value\\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external;\\n  /// @notice Check if it's time to call updateBlocksPerDay()\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view returns (bool);\\n  /// @notice Recalculate blocksPerDay value\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function updateBlocksPerDay(uint periodInSeconds_) external;\\n\\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\\n  function paused() external view returns (bool);\\n\\n  /// @notice the given user is whitelisted and is allowed to make borrow/swap using TetuConverter\\n  function isWhitelisted(address user_) external view returns (bool);\\n\\n  /// @notice The size of the gap by which the debt should be increased upon repayment\\n  ///         Such gaps are required by AAVE pool adapters to workaround dust tokens problem\\n  ///         and be able to make full repayment.\\n  /// @dev Debt gap is applied as following: toPay = debt * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR\\n  function debtGap() external view returns (uint);\\n\\n  /// @notice Allow to rebalance exist debts during burrow, see SCB-708\\n  ///         If the user already has a debt(s) for the given pair of collateral-borrow assets,\\n  ///         new borrow is made using exist pool adapter(s). Exist debt is rebalanced during the borrowing\\n  ///         in both directions, but the rebalancing is asymmetrically limited by thresholds\\n  ///         THRESHOLD_REBALANCE_XXX, see BorrowManager.\\n  function rebalanceOnBorrowEnabled() external view returns (bool);\\n\\n  //#endregion ----------------------------------------------------- Configuration\\n  //#region ----------------------------------------------------- Core application contracts\\n\\n  function tetuConverter() external view returns (address);\\n  function borrowManager() external view returns (address);\\n  function debtMonitor() external view returns (address);\\n  function tetuLiquidator() external view returns (address);\\n  function swapManager() external view returns (address);\\n  function priceOracle() external view returns (address);\\n  function bookkeeper() external view returns (address);\\n  //#endregion ----------------------------------------------------- Core application contracts\\n\\n  //#region ----------------------------------------------------- External contracts\\n  /// @notice A keeper to control health and efficiency of the borrows\\n  function keeper() external view returns (address);\\n  /// @notice Controller of tetu-contracts-v2, that is allowed to update proxy contracts\\n  function proxyUpdater() external view returns (address);\\n  //#endregion ----------------------------------------------------- External contracts\\n}\\n\",\"keccak256\":\"0xff68dab4badf9543c9a0ae5a1314106f0a5b804e8b6669fbea6e2655eb3c741f\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IConverterControllerProvider {\\n  function controller() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71dce61809acb75f9078290e90033ffe816a51f18b7cb296d161e278c36eec86\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPriceOracle {\\n  /// @notice Return asset price in USD, decimals 18\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb11e653eb4d6d7c41f29ee1e3e498253cfa8df1aec3ff31ab527009b79bdb705\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IConverterControllerProvider.sol\\\";\\n\\n/// @notice Main contract of the TetuConverter application\\n/// @dev Borrower (strategy) makes all operations via this contract only.\\ninterface ITetuConverter is IConverterControllerProvider {\\n\\n  /// @notice Find possible borrow strategies and provide \\\"cost of money\\\" as interest for the period for each strategy\\n  ///         Result arrays of the strategy are ordered in ascending order of APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converters Array of available converters ordered in ascending order of APR.\\n  ///                    Each item contains a result contract that should be used for conversion; it supports IConverter\\n  ///                    This address should be passed to borrow-function during conversion.\\n  ///                    The length of array is always equal to the count of available lending platforms.\\n  ///                    Last items in array can contain zero addresses (it means they are not used)\\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\\n  /// @return amountToBorrowsOut Amounts that should be borrowed\\n  ///                            This amount is not zero if corresponded converter is not zero.\\n  /// @return aprs18 Interests on the use of {amountIn_} during the given period, decimals 18\\n  function findBorrowStrategies(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external view returns (\\n    address[] memory converters,\\n    uint[] memory collateralAmountsOut,\\n    uint[] memory amountToBorrowsOut,\\n    int[] memory aprs18\\n  );\\n\\n  /// @notice Find best swap strategy and provide \\\"cost of money\\\" as interest for the period\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow()\\n  /// @return sourceAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                         It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return targetAmountOut Result amount of {targetToken_} after swap\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findSwapStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_\\n  ) external returns (\\n    address converter,\\n    uint sourceAmountOut,\\n    uint targetAmountOut,\\n    int apr18\\n  );\\n\\n  /// @notice Find best conversion strategy (swap or borrow) and provide \\\"cost of money\\\" as interest for the period.\\n  ///         It calls both findBorrowStrategy and findSwapStrategy and selects a best strategy.\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR for swapping.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow().\\n  /// @return collateralAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                             It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return amountToBorrowOut Result amount of {targetToken_} after conversion\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findConversionStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external returns (\\n    address converter,\\n    uint collateralAmountOut,\\n    uint amountToBorrowOut,\\n    int apr18\\n  );\\n\\n  /// @notice Convert {collateralAmount_} to {amountToBorrow_} using {converter_}\\n  ///         Target amount will be transferred to {receiver_}.\\n  ///         Exist debts can be rebalanced fully or partially if {rebalanceOnBorrowEnabled} is ON\\n  /// @dev Transferring of {collateralAmount_} by TetuConverter-contract must be approved by the caller before the call\\n  ///      Only whitelisted users are allowed to make borrows\\n  /// @param converter_ A converter received from findBestConversionStrategy.\\n  /// @param collateralAmount_ Amount of {collateralAsset_} to be converted.\\n  ///                          This amount must be approved to TetuConverter before the call.\\n  /// @param amountToBorrow_ Amount of {borrowAsset_} to be borrowed and sent to {receiver_}\\n  /// @param receiver_ A receiver of borrowed amount\\n  /// @return borrowedAmountOut Exact borrowed amount transferred to {receiver_}\\n  function borrow(\\n    address converter_,\\n    address collateralAsset_,\\n    uint collateralAmount_,\\n    address borrowAsset_,\\n    uint amountToBorrow_,\\n    address receiver_\\n  ) external returns (\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Full or partial repay of the borrow\\n  /// @dev A user should transfer {amountToRepay_} to TetuConverter before calling repay()\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        A user should transfer {amountToRepay_} to TetuConverter before calling repay().\\n  ///        You can know exact total amount of debt using {getStatusCurrent}.\\n  ///        if the amount exceed total amount of the debt:\\n  ///           - the debt will be fully repaid\\n  ///           - remain amount will be swapped from {borrowAsset_} to {collateralAsset_}\\n  ///        This amount should be calculated with taking into account possible debt gap,\\n  ///        You should call getDebtAmountCurrent(debtGap = true) to get this amount.\\n  /// @param receiver_ A receiver of the collateral that will be withdrawn after the repay\\n  ///                  The remained amount of borrow asset will be returned to the {receiver_} too\\n  /// @return collateralAmountOut Exact collateral amount transferred to {collateralReceiver_}\\n  ///         If TetuConverter is not able to make the swap, it reverts\\n  /// @return returnedBorrowAmountOut A part of amount-to-repay that wasn't converted to collateral asset\\n  ///                                 because of any reasons (i.e. there is no available conversion strategy)\\n  ///                                 This amount is returned back to the collateralReceiver_\\n  /// @return swappedLeftoverCollateralOut A part of collateral received through the swapping\\n  /// @return swappedLeftoverBorrowOut A part of amountToRepay_ that was swapped\\n  function repay(\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_,\\n    address receiver_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint returnedBorrowAmountOut,\\n    uint swappedLeftoverCollateralOut,\\n    uint swappedLeftoverBorrowOut\\n  );\\n\\n  /// @notice Estimate result amount after making full or partial repay\\n  /// @dev It works in exactly same way as repay() but don't make actual repay\\n  ///      Anyway, the function is write, not read-only, because it makes updateStatus()\\n  /// @param user_ user whose amount-to-repay will be calculated\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        This amount should be calculated without possible debt gap.\\n  ///        In this way it's differ from {repay}\\n  /// @return collateralAmountOut Total collateral amount to be returned after repay in exchange of {amountToRepay_}\\n  /// @return swappedAmountOut A part of {collateralAmountOut} that were received by direct swap\\n  function quoteRepay(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint swappedAmountOut\\n  );\\n\\n  /// @notice Update status in all opened positions\\n  ///         After this call getDebtAmount will be able to return exact amount to repay\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountCurrent(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice Total amount of borrow tokens that should be repaid to close the borrow completely.\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountStored(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external view returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice User needs to redeem some collateral amount. Calculate an amount of borrow token that should be repaid\\n  /// @param user_ user whose debts will be returned\\n  /// @param collateralAmountRequired_ Amount of collateral required by the user\\n  /// @return borrowAssetAmount Borrowed amount that should be repaid to receive back following amount of collateral:\\n  ///                           amountToReceive = collateralAmountRequired_ - unobtainableCollateralAssetAmount\\n  /// @return unobtainableCollateralAssetAmount A part of collateral that cannot be obtained in any case\\n  ///                                           even if all borrowed amount will be returned.\\n  ///                                           If this amount is not 0, you ask to get too much collateral.\\n  function estimateRepay(\\n    address user_,\\n    address collateralAsset_,\\n    uint collateralAmountRequired_,\\n    address borrowAsset_\\n  ) external view returns (\\n    uint borrowAssetAmount,\\n    uint unobtainableCollateralAssetAmount\\n  );\\n\\n  /// @notice Transfer all reward tokens to {receiver_}\\n  /// @return rewardTokensOut What tokens were transferred. Same reward token can appear in the array several times\\n  /// @return amountsOut Amounts of transferred rewards, the array is synced with {rewardTokens}\\n  function claimRewards(address receiver_) external returns (\\n    address[] memory rewardTokensOut,\\n    uint[] memory amountsOut\\n  );\\n\\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\\n  ///                      It should be transferred on balance of the TetuConverter before the function call\\n  /// @param receiver_ Result amount will be sent to this address\\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\\n  function safeLiquidate(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    address receiver_,\\n    uint priceImpactToleranceSource_,\\n    uint priceImpactToleranceTarget_\\n  ) external returns (\\n    uint amountOut\\n  );\\n\\n  /// @notice Check if {amountOut_} is too different from the value calculated directly using price oracle prices\\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\\n  function isConversionValid(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    uint amountOut_,\\n    uint priceImpactTolerance_\\n  ) external view returns (bool);\\n\\n  /// @notice Close given borrow and return collateral back to the user, governance only\\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\\n  /// @param poolAdapter_ The pool adapter that represents the borrow\\n  /// @param closePosition Close position after repay\\n  ///        Usually it should be true, because the function always tries to repay all debt\\n  ///        false can be used if user doesn't have enough amount to pay full debt\\n  ///              and we are trying to pay \\\"as much as possible\\\"\\n  /// @return collateralAmountOut Amount of collateral returned to the user\\n  /// @return repaidAmountOut Amount of borrow asset paid to the lending platform\\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external returns (\\n    uint collateralAmountOut,\\n    uint repaidAmountOut\\n  );\\n\\n  /// @notice Get active borrows of the user with given collateral/borrowToken\\n  /// @dev Simple access to IDebtMonitor.getPositions\\n  /// @return poolAdaptersOut The instances of IPoolAdapter\\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\\n    address[] memory poolAdaptersOut\\n  );\\n\\n  /// @notice Save token from TC-balance to {receiver}\\n  /// @dev Normally TetuConverter doesn't have any tokens on balance, they can appear there accidentally only\\n  function salvage(address receiver, address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0x87ac3099e1254509929511509c207ecee9a665a3b43d7ee5b98e2ab0d639416d\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverterCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice TetuConverter sends callback notifications to its user via this interface\\ninterface ITetuConverterCallback {\\n  /// @notice Converters calls this function if user should return some amount back.\\n  ///         f.e. when the health factor is unhealthy and the converter needs more tokens to fix it.\\n  ///         or when the full repay is required and converter needs to get full amount-to-repay.\\n  /// @param asset_ Required asset (either collateral or borrow)\\n  /// @param amount_ Required amount of the {asset_}\\n  /// @return amountOut Exact amount that borrower has sent to balance of TetuConverter\\n  function requirePayAmountBack(address asset_, uint amount_) external returns (uint amountOut);\\n\\n  /// @notice TetuConverter calls this function when it sends any amount to user's balance\\n  /// @param assets_ Any asset sent to the balance, i.e. inside repayTheBorrow\\n  /// @param amounts_ Amount of {asset_} that has been sent to the user's balance\\n  function onTransferAmounts(address[] memory assets_, uint[] memory amounts_) external;\\n}\\n\",\"keccak256\":\"0x1ab7657c44e7725e32ef1a25293f1895911943bb25a8d0afb22a218ee4fa9d5b\",\"license\":\"MIT\"},\"contracts/integrations/uniswap/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n  /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n  /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n  function uniswapV3MintCallback(\\n    uint256 amount0Owed,\\n    uint256 amount1Owed,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x15393d5d0b189901998f6f64a62ef6c4b936b7801d973a93f20e199fda3b520d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/uniswap/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\nimport './IUniswapV3PoolImmutables.sol';\\nimport './IUniswapV3PoolState.sol';\\nimport './IUniswapV3PoolDerivedState.sol';\\nimport './IUniswapV3PoolActions.sol';\\nimport './IUniswapV3PoolOwnerActions.sol';\\nimport './IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\nIUniswapV3PoolImmutables,\\nIUniswapV3PoolState,\\nIUniswapV3PoolDerivedState,\\nIUniswapV3PoolActions,\\nIUniswapV3PoolOwnerActions,\\nIUniswapV3PoolEvents\\n{}\\n\",\"keccak256\":\"0x0b7dce5b7063889c1b3f2b0fe16a0b835059148fb7214b314fbaef973320745b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/uniswap/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n  /// @notice Sets the initial price for the pool\\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n  function initialize(uint160 sqrtPriceX96) external;\\n\\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n  /// @param recipient The address for which the liquidity will be created\\n  /// @param tickLower The lower tick of the position in which to add liquidity\\n  /// @param tickUpper The upper tick of the position in which to add liquidity\\n  /// @param amount The amount of liquidity to mint\\n  /// @param data Any data that should be passed through to the callback\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n  function mint(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount,\\n    bytes calldata data\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Collects tokens owed to a position\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n  /// @param recipient The address which should receive the fees collected\\n  /// @param tickLower The lower tick of the position for which to collect fees\\n  /// @param tickUpper The upper tick of the position for which to collect fees\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n  /// @return amount0 The amount of fees collected in token0\\n  /// @return amount1 The amount of fees collected in token1\\n  function collect(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n  /// @dev Fees must be collected separately via a call to #collect\\n  /// @param tickLower The lower tick of the position for which to burn liquidity\\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\\n  /// @param amount How much liquidity to burn\\n  /// @return amount0 The amount of token0 sent to the recipient\\n  /// @return amount1 The amount of token1 sent to the recipient\\n  function burn(\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Swap token0 for token1, or token1 for token0\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n  /// @param recipient The address to receive the output of the swap\\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n  /// @param data Any data to be passed through to the callback\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n  /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\n  /// @param amount0 The amount of token0 to send\\n  /// @param amount1 The amount of token1 to send\\n  /// @param data Any data to be passed through to the callback\\n  function flash(\\n    address recipient,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n  /// the input observationCardinalityNext.\\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0xef0167ee0d52ad0341db1b2e9d9a61282ddb893129e72818a2dfb9d993d39057\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/uniswap/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n  /// you must call it with secondsAgos = [3600, 0].\\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n  /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n  /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n  /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n  /// timestamp\\n  function observe(uint32[] calldata secondsAgos)\\n  external\\n  view\\n  returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n  /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n  /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n  /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n  /// snapshot is taken and the second snapshot is taken.\\n  /// @param tickLower The lower tick of the range\\n  /// @param tickUpper The upper tick of the range\\n  /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n  /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n  /// @return secondsInside The snapshot of seconds per liquidity for the range\\n  function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n  external\\n  view\\n  returns (\\n    int56 tickCumulativeInside,\\n    uint160 secondsPerLiquidityInsideX128,\\n    uint32 secondsInside\\n  );\\n}\\n\",\"keccak256\":\"0x8f336f451a6027c42240dfd7cdb931935ee98476c44d1deca3d8b7cb80b6d26c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/uniswap/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n  /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n  event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n  /// @notice Emitted when liquidity is minted for a given position\\n  /// @param sender The address that minted the liquidity\\n  /// @param owner The owner of the position and recipient of any minted liquidity\\n  /// @param tickLower The lower tick of the position\\n  /// @param tickUpper The upper tick of the position\\n  /// @param amount The amount of liquidity minted to the position range\\n  /// @param amount0 How much token0 was required for the minted liquidity\\n  /// @param amount1 How much token1 was required for the minted liquidity\\n  event Mint(\\n    address sender,\\n    address indexed owner,\\n    int24 indexed tickLower,\\n    int24 indexed tickUpper,\\n    uint128 amount,\\n    uint256 amount0,\\n    uint256 amount1\\n  );\\n\\n  /// @notice Emitted when fees are collected by the owner of a position\\n  /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n  /// @param owner The owner of the position for which fees are collected\\n  /// @param tickLower The lower tick of the position\\n  /// @param tickUpper The upper tick of the position\\n  /// @param amount0 The amount of token0 fees collected\\n  /// @param amount1 The amount of token1 fees collected\\n  event Collect(\\n    address indexed owner,\\n    address recipient,\\n    int24 indexed tickLower,\\n    int24 indexed tickUpper,\\n    uint128 amount0,\\n    uint128 amount1\\n  );\\n\\n  /// @notice Emitted when a position's liquidity is removed\\n  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n  /// @param owner The owner of the position for which liquidity is removed\\n  /// @param tickLower The lower tick of the position\\n  /// @param tickUpper The upper tick of the position\\n  /// @param amount The amount of liquidity to remove\\n  /// @param amount0 The amount of token0 withdrawn\\n  /// @param amount1 The amount of token1 withdrawn\\n  event Burn(\\n    address indexed owner,\\n    int24 indexed tickLower,\\n    int24 indexed tickUpper,\\n    uint128 amount,\\n    uint256 amount0,\\n    uint256 amount1\\n  );\\n\\n  /// @notice Emitted by the pool for any swaps between token0 and token1\\n  /// @param sender The address that initiated the swap call, and that received the callback\\n  /// @param recipient The address that received the output of the swap\\n  /// @param amount0 The delta of the token0 balance of the pool\\n  /// @param amount1 The delta of the token1 balance of the pool\\n  /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n  /// @param liquidity The liquidity of the pool after the swap\\n  /// @param tick The log base 1.0001 of price of the pool after the swap\\n  event Swap(\\n    address indexed sender,\\n    address indexed recipient,\\n    int256 amount0,\\n    int256 amount1,\\n    uint160 sqrtPriceX96,\\n    uint128 liquidity,\\n    int24 tick\\n  );\\n\\n  /// @notice Emitted by the pool for any flashes of token0/token1\\n  /// @param sender The address that initiated the swap call, and that received the callback\\n  /// @param recipient The address that received the tokens from flash\\n  /// @param amount0 The amount of token0 that was flashed\\n  /// @param amount1 The amount of token1 that was flashed\\n  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n  event Flash(\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 amount0,\\n    uint256 amount1,\\n    uint256 paid0,\\n    uint256 paid1\\n  );\\n\\n  /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n  /// just before a mint/swap/burn.\\n  /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n  /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n  event IncreaseObservationCardinalityNext(\\n    uint16 observationCardinalityNextOld,\\n    uint16 observationCardinalityNextNew\\n  );\\n\\n  /// @notice Emitted when the protocol fee is changed by the pool\\n  /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n  /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n  /// @param feeProtocol0New The updated value of the token0 protocol fee\\n  /// @param feeProtocol1New The updated value of the token1 protocol fee\\n  event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n  /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n  /// @param sender The address that collects the protocol fees\\n  /// @param recipient The address that receives the collected protocol fees\\n  /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n  /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n  event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0xd6e8ce263e7046a0359ee36c1fd990952e6ae20d713c251702b4801e4ea03bf6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/uniswap/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n  /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n  /// @return The contract address\\n  function factory() external view returns (address);\\n\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (address);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (address);\\n\\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n  /// @return The fee\\n  function fee() external view returns (uint24);\\n\\n  /// @notice The pool tick spacing\\n  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n  /// This value is an int24 to avoid casting even though it is always positive.\\n  /// @return The tick spacing\\n  function tickSpacing() external view returns (int24);\\n\\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n  /// @return The max amount of liquidity per tick\\n  function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0x7c155c49c7ef3bc8093b8e1a73631d7e89ed766a3052d8ebdfeea3c58cf5abf4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/uniswap/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n  /// @notice Set the denominator of the protocol's % share of the fees\\n  /// @param feeProtocol0 new protocol fee for token0 of the pool\\n  /// @param feeProtocol1 new protocol fee for token1 of the pool\\n  function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n  /// @notice Collect the protocol fee accrued to the pool\\n  /// @param recipient The address to which collected protocol fees should be sent\\n  /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n  /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n  /// @return amount0 The protocol fee collected in token0\\n  /// @return amount1 The protocol fee collected in token1\\n  function collectProtocol(\\n    address recipient,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0xbeec57ee9eeccb05b8361796f3c1118297e68095ab84a1e19c0e3b6fa31c6ab6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/uniswap/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n  /// when accessed externally.\\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n  /// boundary.\\n  /// observationIndex The index of the last oracle observation that was written,\\n  /// observationCardinality The current maximum number of observations stored in the pool,\\n  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n  /// feeProtocol The protocol fee for both tokens of the pool.\\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n  /// unlocked Whether the pool is currently locked to reentrancy\\n  function slot0()\\n  external\\n  view\\n  returns (\\n    uint160 sqrtPriceX96,\\n    int24 tick,\\n    uint16 observationIndex,\\n    uint16 observationCardinality,\\n    uint16 observationCardinalityNext,\\n    uint8 feeProtocol,\\n    bool unlocked\\n  );\\n\\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n  /// @dev This value can overflow the uint256\\n  function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n  /// @dev This value can overflow the uint256\\n  function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n  /// @notice The amounts of token0 and token1 that are owed to the protocol\\n  /// @dev Protocol fees will never exceed uint128 max in either token\\n  function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n  /// @notice The currently in range liquidity available to the pool\\n  /// @dev This value has no relationship to the total liquidity across all ticks\\n  function liquidity() external view returns (uint128);\\n\\n  /// @notice Look up information about a specific tick in the pool\\n  /// @param tick The tick to look up\\n  /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n  /// tick upper,\\n  /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n  /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n  /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n  /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n  /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n  /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n  /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n  /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n  /// a specific position.\\n  function ticks(int24 tick)\\n  external\\n  view\\n  returns (\\n    uint128 liquidityGross,\\n    int128 liquidityNet,\\n    uint256 feeGrowthOutside0X128,\\n    uint256 feeGrowthOutside1X128,\\n    int56 tickCumulativeOutside,\\n    uint160 secondsPerLiquidityOutsideX128,\\n    uint32 secondsOutside,\\n    bool initialized\\n  );\\n\\n  /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n  function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n  /// @notice Returns the information about a position by the position's key\\n  /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n  /// @return _liquidity The amount of liquidity in the position,\\n  /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n  /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n  /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n  /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n  function positions(bytes32 key)\\n  external\\n  view\\n  returns (\\n    uint128 _liquidity,\\n    uint256 feeGrowthInside0LastX128,\\n    uint256 feeGrowthInside1LastX128,\\n    uint128 tokensOwed0,\\n    uint128 tokensOwed1\\n  );\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param index The element of the observations array to fetch\\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n  /// ago, rather than at a specific index in the array.\\n  /// @return blockTimestamp The timestamp of the observation,\\n  /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n  /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n  /// Returns initialized whether the observation has been initialized and the values are safe to use\\n  function observations(uint256 index)\\n  external\\n  view\\n  returns (\\n    uint32 blockTimestamp,\\n    int56 tickCumulative,\\n    uint160 secondsPerLiquidityCumulativeX128,\\n    bool initialized\\n  );\\n}\\n\",\"keccak256\":\"0xb9290dfe72c75342b93aa7c5b7508750b0b7d5c72d10fba7e98ecda0abe59678\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IConverterStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\n\\n/// @notice Allow to share declaration of ConverterStrategyBaseState with libraries\\ninterface IConverterStrategyBase {\\n  struct ConverterStrategyBaseState {\\n    /// @dev Amount of underlying assets invested to the pool.\\n    uint investedAssets;\\n\\n    /// @dev Linked Tetu Converter\\n    ITetuConverter converter;\\n\\n    /// @notice Percent of asset amount that can be not invested, it's allowed to just keep it on balance\\n    ///         decimals = {DENOMINATOR}\\n    /// @dev We need this threshold to avoid numerous conversions of small amounts\\n    uint reinvestThresholdPercent;\\n\\n    /// @notice Current debt to the insurance.\\n    ///         It's increased when insurance covers any losses related to swapping and borrow-debts-paying.\\n    ///         It's not changed when insurance covers losses/receives profit that appeared after price changing.\\n    ///         The strategy covers this debt on each hardwork using the profit (rewards, fees)\\n    int debtToInsurance;\\n\\n    /// @notice reserve space for future needs\\n    uint[50-1] __gap;\\n  }\\n}\",\"keccak256\":\"0x01589d89694f60bb33589a5c396d894adf75a388ef71482905d5a4c9920e5086\",\"license\":\"MIT\"},\"contracts/interfaces/IPairBasedDefaultStateProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice Provides access to getDefaultState() of a pair-based strategy\\ninterface IPairBasedDefaultStateProvider {\\n  /// @notice Returns the current state of the contract\\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\\n  /// @return nums [totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]\\n  /// @return boolValues [isStablePool, depositorSwapTokens]\\n  function getDefaultState() external view returns (\\n    address[] memory addr,\\n    int24[] memory tickData,\\n    uint[] memory nums,\\n    bool[] memory boolValues\\n  );\\n}\",\"keccak256\":\"0x611b19b3cce34f1b2d2ff1091638ca464be36212525d9ba7032feea98c385b49\",\"license\":\"MIT\"},\"contracts/interfaces/IPairBasedStrategyReaderAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IPairBasedDefaultStateProvider.sol\\\";\\n\\n/// @notice Interface required to implement PairBasedStrategyReader\\ninterface IPairBasedStrategyReaderAccess is IPairBasedDefaultStateProvider {\\n  function converter() external view returns (address);\\n  function splitter() external view returns (address);\\n  function totalAssets() external view returns (uint);\\n  function asset() external view returns (address);\\n}\\n\",\"keccak256\":\"0x45b958ace8342f75624756696f1e39118cb688350060c072f5724082f5480f71\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolProportionsProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPoolProportionsProvider {\\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\\n  /// @return Proportion of the not-underlying [0...1e18]\\n  function getPropNotUnderlying18() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xb923a1c932c1cb5bba91d43b92de2fb5271e0ee770cfd31f9ccb133d247e8390\",\"license\":\"MIT\"},\"contracts/interfaces/IRebalancingV2Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IPairBasedDefaultStateProvider.sol\\\";\\nimport \\\"./ISetupPairBasedStrategy.sol\\\";\\n\\ninterface IRebalancingV2Strategy is IPairBasedDefaultStateProvider, ISetupPairBasedStrategy {\\n  function needRebalance() external view returns (bool);\\n\\n  /// @notice Rebalance using borrow/repay only, no swaps\\n  /// @param checkNeedRebalance Revert if rebalance is not needed. Pass false to deposit after withdrawByAgg-iterations\\n  function rebalanceNoSwaps(bool checkNeedRebalance) external;\\n\\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\\n  function quoteWithdrawByAgg(bytes memory planEntryData) external returns (address tokenToSwap, uint amountToSwap);\\n\\n  /// @notice Make withdraw iteration: [exit from the pool], [make 1 swap], [repay a debt], [enter to the pool]\\n  ///         Typical sequence of the actions is: exit from the pool, make 1 swap, repay 1 debt.\\n  ///         You can enter to the pool if you are sure that you won't have borrow + repay on AAVE3 in the same block.\\n  /// @dev All swap-by-agg data should be prepared using {quoteWithdrawByAgg} off-chain\\n  /// @param tokenToSwap_ What token should be swapped to other\\n  /// @param aggregator_ Aggregator that should be used on next swap. 0 - use liquidator\\n  /// @param amountToSwap_ Amount that should be swapped. 0 - no swap\\n  /// @param swapData Swap rote that was prepared off-chain.\\n  /// @param planEntryData PLAN_XXX + additional data, see IterationPlanKinds\\n  /// @param entryToPool Allow to enter to the pool at the end. Use false if you are going to make several iterations.\\n  ///                    It's possible to enter back to the pool by calling {rebalanceNoSwaps} at any moment\\n  ///                    0 - not allowed, 1 - allowed, 2 - allowed only if completed\\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions.\\n  function withdrawByAggStep(\\n    address tokenToSwap_,\\n    address aggregator_,\\n    uint amountToSwap_,\\n    bytes memory swapData,\\n    bytes memory planEntryData,\\n    uint entryToPool\\n  ) external returns (bool completed);\\n\\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\\n  /// @return Proportion of the not-underlying [0...1e18]\\n  function getPropNotUnderlying18() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xcf0141c4f2e5d86c3c72d2d3753ff44aebb0f0b3d5083a30e15dfa6e279c1358\",\"license\":\"MIT\"},\"contracts/interfaces/ISetupPairBasedStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice Functions to initialize pair-based strategies\\ninterface ISetupPairBasedStrategy {\\n\\n  /// @notice Manually set status of the fuse\\n  /// @param status See PairBasedStrategyLib.FuseStatus enum for possile values\\n  function setFuseStatus(uint status) external;\\n\\n  /// @notice Set thresholds for the fuse: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\\n  /// @param values Price thresholds: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\n  function setFuseThresholds(uint[4] memory values) external;\\n  function setStrategyProfitHolder(address strategyProfitHolder) external;\\n\\n  /// @notice Set withdrawDone value.\\n  ///         When a fuse was triggered ON, all debts should be closed and asset should be converted to underlying.\\n  ///         After completion of the conversion withdrawDone can be set to 1.\\n  ///         So, {getFuseStatus} will return  withdrawDone=1 and you will know, that withdraw is not required\\n  /// @param done 0 - full withdraw required, 1 - full withdraw was done\\n  function setWithdrawDone(uint done) external;\\n}\\n\",\"keccak256\":\"0x6b5b66b9ec34137f6f2464d9752a67fa725720d14b4f9a56b6c7791a0196e628\",\"license\":\"MIT\"},\"contracts/libs/AppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/// @notice List of all errors generated by the application\\n///         Each error should have unique code TS-XXX and descriptive comment\\nlibrary AppErrors {\\n  /// @notice Provided address should be not zero\\n  string public constant ZERO_ADDRESS = \\\"TS-1 zero address\\\";\\n\\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\\n  string public constant UNISWAP_PAIR_NOT_FOUND = \\\"TS-2 pair not found\\\";\\n\\n  /// @notice Lengths not matched\\n  string public constant WRONG_LENGTHS = \\\"TS-4 wrong lengths\\\";\\n\\n  /// @notice Unexpected zero balance\\n  string public constant ZERO_BALANCE = \\\"TS-5 zero balance\\\";\\n\\n  string public constant ITEM_NOT_FOUND = \\\"TS-6 not found\\\";\\n\\n  string public constant NOT_ENOUGH_BALANCE = \\\"TS-7 not enough balance\\\";\\n\\n  /// @notice Price oracle returns zero price\\n  string public constant ZERO_PRICE = \\\"TS-8 zero price\\\";\\n\\n  string public constant WRONG_VALUE = \\\"TS-9 wrong value\\\";\\n\\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\\n  string public constant ZERO_AMOUNT_BORROWED = \\\"TS-10 zero borrowed amount\\\";\\n\\n  string public constant WITHDRAW_TOO_MUCH = \\\"TS-11 try to withdraw too much\\\";\\n\\n  string public constant UNKNOWN_ENTRY_KIND = \\\"TS-12 unknown entry kind\\\";\\n\\n  string public constant ONLY_TETU_CONVERTER = \\\"TS-13 only TetuConverter\\\";\\n\\n  string public constant WRONG_ASSET = \\\"TS-14 wrong asset\\\";\\n\\n  string public constant NO_LIQUIDATION_ROUTE = \\\"TS-15 No liquidation route\\\";\\n\\n  string public constant PRICE_IMPACT = \\\"TS-16 price impact\\\";\\n\\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\\n  string public constant REPAY_MAKES_SWAP = \\\"TS-17 can not convert back\\\";\\n\\n  string public constant NO_INVESTMENTS = \\\"TS-18 no investments\\\";\\n\\n  string public constant INCORRECT_LENGTHS = \\\"TS-19 lengths\\\";\\n\\n  /// @notice We expect increasing of the balance, but it was decreased\\n  string public constant BALANCE_DECREASE = \\\"TS-20 balance decrease\\\";\\n\\n  /// @notice Prices changed and invested assets amount was increased on S, value of S is too high\\n  string public constant EARNED_AMOUNT_TOO_HIGH = \\\"TS-21 earned too high\\\";\\n\\n  string public constant GOVERNANCE_ONLY = \\\"TS-22 governance only\\\";\\n\\n  string public constant ZERO_VALUE = \\\"TS-24 zero value\\\";\\n\\n  string public constant INCORRECT_SWAP_BY_AGG_PARAM = \\\"TS-25 swap by agg\\\";\\n\\n  string public constant OVER_COLLATERAL_DETECTED = \\\"TS-27 over-collateral\\\";\\n\\n  string public constant NOT_IMPLEMENTED = \\\"TS-28 not implemented\\\";\\n\\n  /// @notice You are not allowed to make direct debt if a NOT-DUST reverse debt exists and visa verse.\\n  string public constant OPPOSITE_DEBT_EXISTS = \\\"TS-29 opposite debt exists\\\";\\n\\n  string public constant INVALID_VALUE = \\\"TS-30 invalid value\\\";\\n\\n  string public constant TOO_HIGH = \\\"TS-32 too high value\\\";\\n\\n  /// @notice BorrowLib has recursive call, sub-calls are not allowed\\n  ///         This error can happen if allowed proportion is too small, i.e. 0.0004 : (1-0.0004)\\n  ///         Such situation can happen if amount to swap is almost equal to the amount of the token in the current tick,\\n  ///         so swap will move us close to the border between ticks.\\n  ///         It was decided, that it's ok to have revert in that case\\n  ///         We can change this behavior by changing BorrowLib.rebalanceRepayBorrow implementation:\\n  ///             if amount-to-repay passed to _repayDebt is too small to be used,\\n  ///             we should increase it min amount required to make repay successfully (amount must be > threshold)\\n  ///         Previously it was error NOT_ALLOWED = \\\"TS23: not allowed\\\", see issues SCB-777, SCB-818\\n  string public constant TOO_DEEP_RECURSION_BORROW_LIB = \\\"TS-33 too deep recursion\\\";\\n}\\n\",\"keccak256\":\"0x7dbc4c86075e52fadf33db909d0954ae13266aa35bce356412783d2770cc6129\",\"license\":\"BUSL-1.1\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\\\";\\n\\n/// @notice Common internal utils\\nlibrary AppLib {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice 1% gap to cover possible liquidation inefficiency\\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\\n  uint internal constant GAP_CONVERSION = 1_000;\\n  /// @dev Absolute value for any token\\n  uint internal constant DEFAULT_LIQUIDATION_THRESHOLD = 100_000;\\n  uint internal constant DENOMINATOR = 100_000;\\n\\n  /// @notice Any amount less than the following is dust\\n  uint public constant DUST_AMOUNT_TOKENS = 100;\\n\\n  /// @notice Unchecked increment for for-cycles\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n    unchecked {\\n      return i + 1;\\n    }\\n  }\\n\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\n  /// @dev Should NOT be used for third-party pools\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\n      IERC20(token).safeApprove(spender, 0);\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\n      IERC20(token).safeApprove(spender, 2 ** 255);\\n    }\\n  }\\n\\n  function balance(address token) internal view returns (uint) {\\n    return IERC20(token).balanceOf(address(this));\\n  }\\n\\n  /// @return prices Asset prices in USD, decimals 18\\n  /// @return decs 10**decimals\\n  function _getPricesAndDecs(IPriceOracle priceOracle, address[] memory tokens_, uint len) internal view returns (\\n    uint[] memory prices,\\n    uint[] memory decs\\n  ) {\\n    prices = new uint[](len);\\n    decs = new uint[](len);\\n    {\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\\n        prices[i] = priceOracle.getAssetPrice(tokens_[i]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\\n  function getAssetIndex(address[] memory tokens_, address asset_) internal pure returns (uint) {\\n    uint len = tokens_.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (tokens_[i] == asset_) {\\n        return i;\\n      }\\n    }\\n    return type(uint).max;\\n  }\\n\\n  function _getLiquidator(address controller_) internal view returns (ITetuLiquidator) {\\n    return ITetuLiquidator(IController(controller_).liquidator());\\n  }\\n\\n  function _getPriceOracle(ITetuConverter converter_) internal view returns (IPriceOracle) {\\n    return IPriceOracle(IConverterController(converter_.controller()).priceOracle());\\n  }\\n\\n  /// @notice Calculate liquidation threshold, use default value if the threshold is not set\\n  ///         It's allowed to set any not-zero threshold, it this case default value is not used\\n  /// @dev This function should be applied to the threshold at the moment of the reading its value from the storage.\\n  ///      So, if we pass {mapping(address => uint) storage liquidationThresholds}, the threshold can be zero\\n  ///      bug if we pass {uint liquidationThreshold} to a function, the threshold should be not zero\\n  function _getLiquidationThreshold(uint threshold) internal pure returns (uint) {\\n    return threshold == 0\\n      ? AppLib.DEFAULT_LIQUIDATION_THRESHOLD\\n      : threshold;\\n  }\\n\\n  /// @notice Return a-b OR zero if a < b\\n  function sub0(uint a, uint b) internal pure returns (uint) {\\n    return a > b ? a - b : 0;\\n  }\\n}\\n\",\"keccak256\":\"0x381e0ccdce8a3fc61875780314db3ffc93b0d30389d8d65f755d17086ea963a7\",\"license\":\"BUSL-1.1\"},\"contracts/libs/AppPlatforms.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nlibrary AppPlatforms {\\n  string public constant UNIV3 = \\\"UniswapV3\\\";\\n  string public constant BALANCER = \\\"Balancer\\\";\\n  string public constant ALGEBRA = \\\"Algebra\\\";\\n  string public constant KYBER = \\\"Kyber\\\";\\n}\\n\",\"keccak256\":\"0x680c536b00b849ae22a01496719d608605906a1eec722431ec44a5cf3d80dd56\",\"license\":\"BUSL-1.1\"},\"contracts/libs/BorrowLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"../strategies/ConverterStrategyBaseLib.sol\\\";\\n\\n/// @notice Library to make new borrow, extend/reduce exist borrows and repay to keep proper assets proportions\\n/// @dev Swap through liquidator is still allowed to be able to get required profitToCover, but this amount is small\\nlibrary BorrowLib {\\n  /// @notice prop0 + prop1\\n  uint constant public SUM_PROPORTIONS = 1e18;\\n\\n  /// @notice Function {_rebalanceAssets} cannot be called recursively more than twice.\\n  /// Normally one call is enough.\\n  /// Firstly repay(requiredAmount0) is called below. There are two possible results:\\n  /// 1) requiredCost0 <= cost0\\n  /// 2) v.directDebt == 0\\n  /// There is SCB-818: there are two debts (big and small), on the first cycle we get amount less than expected\\n  /// because of debt gap. So, we need second cycle.\\n  uint constant public MAX_DEEP_RECURSION = 2;\\n\\n  //region -------------------------------------------------- Data types\\n  struct PricesDecs {\\n    /// @notice Asset prices in USD, decimals 18\\n    uint[] prices;\\n    /// @notice decs 10**decimals\\n    uint[] decs;\\n  }\\n\\n  struct ConverterLiquidator {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n  }\\n\\n  struct RebalanceAssetsLocal {\\n    // ------- constant values\\n    address asset0;\\n    address asset1;\\n    /// @notice Proportion of {asset0}, > 0; proportion of {asset1} is SUM_PROPORTIONS - prop0\\n    uint prop0;\\n    /// @notice Min allowed amount of {asset0}-collateral, 0 - use default min value\\n    uint threshold0;\\n    /// @ntoice Min allowed amount of {asset1}-collateral, 0 - use default min value\\n    uint threshold1;\\n\\n    PricesDecs pd;\\n    // ------- refreshable values\\n\\n    // @notice Current balance of {asset0}\\n    uint amount0;\\n    // @notice Current balance of {asset1}\\n    uint amount1;\\n\\n    /// @notice Borrowed amount of not-underlying\\n    uint directDebt;\\n    /// @notice Borrowed amount of underlying\\n    uint reverseDebt;\\n\\n    uint addition0;\\n  }\\n\\n  /// @notice Params required to borrow {assetB} under {assetA}\\n  struct RebalanceAssetsCore {\\n    ConverterLiquidator converterLiquidator;\\n    address assetA;\\n    address assetB;\\n    uint propA;\\n    uint propB;\\n    /// @notice {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\\n    uint alpha18;\\n    /// @notice Min allowed amount of {assetA}-collateral, 0 - use default min value\\n    uint thresholdA;\\n\\n    uint addonA;\\n    uint addonB;\\n\\n    /// @notice Index of {assetA} in {prices} and {decs}\\n    uint indexA;\\n    /// @notice Index of {assetB} in {prices} and {decs}\\n    uint indexB;\\n  }\\n\\n  struct OpenPosition2Local {\\n    uint collateral;\\n    uint toBorrow;\\n    uint cc;\\n    uint cb;\\n    uint c0;\\n    uint cb2;\\n    uint ca0;\\n    uint gamma18;\\n    uint pa2;\\n    uint pb2;\\n    bytes entryData;\\n    uint alpha18;\\n  }\\n\\n  struct MakeBorrowToDepositLocal {\\n    uint[] prices;\\n    uint[] decs;\\n    uint cost0;\\n    uint cost1;\\n    uint prop1;\\n    bytes entryData;\\n  }\\n  //endregion -------------------------------------------------- Data types\\n\\n  //region -------------------------------------------------- External functions\\n  /// @notice Set balances of {asset0} and {asset1} in proportions {prop0}:{prop1} using borrow/repay (no swaps)\\n  /// @param prop0 Proportion of {asset0}, > 0. Proportion of {asset1} is calculates as 1e18 - prop0\\n  /// @param threshold0 Min allowed amount of {asset0}-collateral, 0 - use default min value\\n  /// @param threshold1 Min allowed amount of {asset1}-collateral, 0 - use default min value\\n  /// @param addition0 Additional amount A0 of {asset0}.\\n  ///                  Balance0 = A0 + B0\\n  ///                  We need following balances in results: B0 : Balance1 === {proportion}:{100_000-proportion}\\n  function rebalanceAssets(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    address asset0,\\n    address asset1,\\n    uint prop0,\\n    uint threshold0,\\n    uint threshold1,\\n    uint addition0\\n  ) external {\\n    // pool always have TWO assets, it's not allowed ot have only one asset\\n    // so, we assume that the proportions are in the range (0...1e18)\\n    require(prop0 != 0, AppErrors.ZERO_VALUE);\\n    require(prop0 < SUM_PROPORTIONS, AppErrors.TOO_HIGH);\\n\\n    RebalanceAssetsLocal memory v;\\n    v.asset0 = asset0;\\n    v.asset1 = asset1;\\n    v.prop0 = prop0;\\n    v.threshold0 = threshold0;\\n    v.threshold1 = threshold1;\\n    v.addition0 = addition0;\\n\\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\n    address[] memory tokens = new address[](2);\\n    tokens[0] = asset0;\\n    tokens[1] = asset1;\\n    (v.pd.prices, v.pd.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\\n\\n    _refreshRebalance(v, ConverterLiquidator(converter_, liquidator_), MAX_DEEP_RECURSION);\\n  }\\n\\n  /// @notice Convert {amount_} of underlying to two amounts: A0 (underlying) and A1 (not-underlying)\\n  ///         Result proportions of A0 and A1 should match to {prop0} : 1e18-{prop0}\\n  ///         The function is able to make new borrowing and/or close exist debts.\\n  /// @param amount_ Amount of underlying that is going to be deposited\\n  ///                We assume here, that current balance >= the {amount_}\\n  /// @param tokens_ [Underlying, not underlying]\\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\n  /// @return tokenAmounts Result amounts [A0 (underlying), A1 (not-underlying)]\\n  function prepareToDeposit(\\n    ITetuConverter converter_,\\n    uint amount_,\\n    address[2] memory tokens_,\\n    uint[2] memory thresholds_,\\n    uint prop0\\n  ) external returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    uint[2] memory amountsToDeposit;\\n    uint[2] memory balances = [\\n      AppLib.sub0(AppLib.balance(tokens_[0]), amount_), // We assume here, that current balance >= the {amount_}\\n      AppLib.balance(tokens_[1])\\n    ];\\n\\n    // we assume here, that either direct OR reverse debts (amount > threshold) are possible but not both at the same time\\n    (uint debtReverse, ) = converter_.getDebtAmountCurrent(address(this), tokens_[1], tokens_[0], true);\\n    if (debtReverse > thresholds_[0]) {\\n      // case 1: reverse debt exists\\n      // case 1.1: amount to deposit exceeds exist debt.\\n      //    Close the debt completely and than make either new direct OR reverse debt\\n      // case 1.2: amount to deposit is less than the exist debt.\\n      //    Close the debt partially and make new reverse debt\\n      uint amountToRepay = amount_ > debtReverse ? debtReverse : amount_;\\n      ConverterStrategyBaseLib.closePosition(converter_, tokens_[1], tokens_[0], amountToRepay);\\n      amountsToDeposit = [\\n        AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]),\\n        AppLib.sub0(AppLib.balance(tokens_[1]), balances[1])\\n      ];\\n    } else {\\n      // case 2: no debts OR direct debt exists\\n      amountsToDeposit = [amount_, 0];\\n    }\\n\\n    _makeBorrowToDeposit(converter_, amountsToDeposit, tokens_, thresholds_, prop0);\\n\\n    tokenAmounts = new uint[](2);\\n    tokenAmounts[0] = AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]);\\n    tokenAmounts[1] = AppLib.sub0(AppLib.balance(tokens_[1]), balances[1]);\\n  }\\n  //endregion -------------------------------------------------- External functions\\n\\n  //region -------------------------------------------------- Implementation of prepareToDeposit\\n  /// @notice Make a direct or reverse borrow to make amounts_ fit to the given proportions.\\n  /// If one of available amounts is zero, we just need to make a borrow using second amount as amountIn.\\n  /// Otherwise, we need to calculate amountIn at first.\\n  /// @dev The purpose is to get the amounts in proper proportions: A:B = prop0:prop1.\\n  /// Suppose, amounts_[1] is not enough:\\n  ///   [A1, B1] => [A2 + A3, B1], A2:B1 = prop0:prop1, A3 is amountIn for new borrow.\\n  /// Suppose, amounts_[0] is not enough:\\n  ///   [A1, B1] => [A1, B2 + B3], A1:B2 = prop0:prop1, B3 is amountIn for new borrow.\\n  /// @param amounts_ Available amounts\\n  /// @param tokens_ [Underlying, not underlying]\\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\n  function _makeBorrowToDeposit(\\n    ITetuConverter converter_,\\n    uint[2] memory amounts_,\\n    address[2] memory tokens_,\\n    uint[2] memory thresholds_,\\n    uint prop0\\n  ) internal {\\n    MakeBorrowToDepositLocal memory v;\\n\\n    {\\n      IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\n      address[] memory tokens = new address[](2);\\n      tokens[0] = tokens_[0];\\n      tokens[1] = tokens_[1];\\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\\n    }\\n\\n    v.cost0 = amounts_[0] * v.prices[0] / v.decs[0];\\n    v.cost1 = amounts_[1] * v.prices[1] / v.decs[1];\\n    // we need: cost0/cost1 = prop0/prop1, and so cost0 * prop1 = cost1 * prop0\\n    v.prop1 = SUM_PROPORTIONS - prop0;\\n\\n    if (v.cost0 * v.prop1 > v.cost1 * prop0) {\\n      // we need to make direct borrow\\n      uint cost0for1 = v.cost1 * prop0 / v.prop1; // a part of cost0 that is matched to cost1\\n      uint amountIn = (v.cost0 - cost0for1) * v.decs[0] / v.prices[0];\\n\\n      AppLib.approveIfNeeded(tokens_[0], amountIn, address(converter_));\\n      v.entryData = abi.encode(1, prop0, v.prop1); // ENTRY_KIND_EXACT_PROPORTION_1\\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[0], tokens_[1], amountIn, thresholds_[0]);\\n    } else if (v.cost0 * v.prop1 < v.cost1 * prop0) {\\n      // we need to make reverse borrow\\n      uint cost1for0 = v.cost0 * v.prop1 / prop0; // a part of cost1 that is matched to cost0\\n      uint amountIn = (v.cost1 - cost1for0) * v.decs[1] / v.prices[1];\\n\\n      AppLib.approveIfNeeded(tokens_[1], amountIn, address(converter_));\\n      v.entryData = abi.encode(1, v.prop1, prop0); // ENTRY_KIND_EXACT_PROPORTION_1\\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[1], tokens_[0], amountIn, thresholds_[1]);\\n    }\\n  }\\n\\n  //endregion -------------------------------------------------- Implementation of prepareToDeposit\\n\\n  //region -------------------------------------------------- Internal helper functions\\n\\n  /// @notice refresh state in {v} and call _rebalanceAssets()\\n  function _refreshRebalance(\\n    RebalanceAssetsLocal memory v,\\n    ConverterLiquidator memory converterLiquidator,\\n    uint repayAllowed\\n  ) internal {\\n    v.amount0 = IERC20(v.asset0).balanceOf(address(this));\\n    v.amount1 = IERC20(v.asset1).balanceOf(address(this));\\n\\n    (v.directDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset0, v.asset1, true);\\n    (v.reverseDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset1, v.asset0, true);\\n\\n    _rebalanceAssets(v, converterLiquidator, repayAllowed);\\n  }\\n\\n  /// @param repayAllowed Protection against recursion\\n  ///                     Assets can be rebalanced in two ways:\\n  ///                     1) openPosition\\n  ///                     2) repay + openPosition\\n  ///                     Only one repay is allowed.\\n  function _rebalanceAssets(\\n    RebalanceAssetsLocal memory v,\\n    ConverterLiquidator memory converterLiquidator,\\n    uint repayAllowed\\n  ) internal {\\n    uint cost0 = v.amount0 * v.pd.prices[0] / v.pd.decs[0];\\n    uint cost1 = v.amount1 * v.pd.prices[1] / v.pd.decs[1];\\n    uint costAddition0 = v.addition0 * v.pd.prices[0] / v.pd.decs[0];\\n\\n    if (cost0 + cost1 > costAddition0) {\\n      uint totalCost = cost0 + cost1 - costAddition0;\\n\\n      uint requiredCost0 = totalCost * v.prop0 / SUM_PROPORTIONS + costAddition0;\\n      uint requiredCost1 = totalCost * (SUM_PROPORTIONS - v.prop0) / SUM_PROPORTIONS;\\n\\n      if (requiredCost0 > cost0) {\\n        // we need to increase amount of asset 0 and decrease amount of asset 1, so we need to borrow asset 0 (reverse)\\n        RebalanceAssetsCore memory c10 = RebalanceAssetsCore({\\n          converterLiquidator: converterLiquidator,\\n          assetA: v.asset1,\\n          assetB: v.asset0,\\n          propA: SUM_PROPORTIONS - v.prop0,\\n          propB: v.prop0,\\n          alpha18: 1e18 * v.pd.prices[0] * v.pd.decs[1] / v.pd.prices[1] / v.pd.decs[0],\\n          thresholdA: v.threshold1,\\n          addonA: 0,\\n          addonB: v.addition0,\\n          indexA: 1,\\n          indexB: 0\\n        });\\n\\n        if (v.directDebt >= AppLib.DUST_AMOUNT_TOKENS) {\\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\n\\n          // repay of v.asset1 is required\\n          uint requiredAmount0 = (requiredCost0 - cost0) * v.pd.decs[0] / v.pd.prices[0];\\n          rebalanceRepayBorrow(v, c10, requiredAmount0, v.directDebt, repayAllowed);\\n        } else {\\n          // new (or additional) borrow of asset 0 under asset 1 is required\\n          openPosition(c10, v.pd, v.amount1, v.amount0);\\n        }\\n      } else if (requiredCost0 < cost0) {\\n        RebalanceAssetsCore memory c01 = RebalanceAssetsCore({\\n          converterLiquidator: converterLiquidator,\\n          assetA: v.asset0,\\n          assetB: v.asset1,\\n          propA: v.prop0,\\n          propB: SUM_PROPORTIONS - v.prop0,\\n          alpha18: 1e18 * v.pd.prices[1] * v.pd.decs[0] / v.pd.prices[0] / v.pd.decs[1],\\n          thresholdA: v.threshold0,\\n          addonA: v.addition0,\\n          addonB: 0,\\n          indexA: 0,\\n          indexB: 1\\n        });\\n        // we need to decrease amount of asset 0 and increase amount of asset 1, so we need to borrow asset 1 (direct)\\n        if (v.reverseDebt >= AppLib.DUST_AMOUNT_TOKENS) {\\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\n\\n          // repay of v.asset0 is required\\n          // requiredCost0 < cost0 => requiredCost1 > cost1\\n          uint requiredAmount1 = (requiredCost1 - cost1) * v.pd.decs[1] / v.pd.prices[1];\\n          rebalanceRepayBorrow(v, c01, requiredAmount1, v.reverseDebt, repayAllowed);\\n        } else {\\n          // new or additional borrow of asset 1 under asset 0 is required\\n          openPosition(c01, v.pd, v.amount0, v.amount1);\\n        }\\n      }\\n    } else {\\n      // if costAddition0 exceeds cost0 + cost1, all amounts should be converted to asset 0\\n      // for simplicity, we don't make any swaps or borrows (amount addition0 is assumed to be small)\\n      // and just leave balances as is\\n      // as result, profit-to-cover will be reduced from costAddition0 to v.amount0\\n    }\\n  }\\n\\n  /// @notice Repay {amountDebtA} fully or partially to get at least {requiredAmountB} of collateral\\n  ///         then try to rebalance once more\\n  /// @param requiredAmountB Amount of collateral that we need to receive after repay\\n  /// @param amountDebtA Total amount that is required to pay to close the debt\\n  function rebalanceRepayBorrow(\\n    RebalanceAssetsLocal memory v,\\n    RebalanceAssetsCore memory c,\\n    uint requiredAmountB,\\n    uint amountDebtA,\\n    uint repayAllowed\\n  ) internal {\\n    // repayAllowed cannot be zero here because of requires in _rebalanceAssets, but it's safer to check it once more\\n    require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\n\\n    // we need to get {requiredAmountB}\\n    // we don't know exact amount to repay\\n    // but we are sure that amount {requiredAmountB ===> requiredAmountA} would be more than required\\n    uint capRequiredAmountA = requiredAmountB * c.alpha18 / 1e18;\\n    uint amountToRepay = Math.min(capRequiredAmountA, amountDebtA);\\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\n      ConverterStrategyBaseLib._repayDebt(c.converterLiquidator.converter, c.assetB, c.assetA, amountToRepay);\\n      _refreshRebalance(v, c.converterLiquidator, repayAllowed - 1);\\n    } // else the assets are already in proper proportions\\n  }\\n\\n  //endregion -------------------------------------------------- Internal helper functions\\n\\n  //region -------------------------------------------------- Open position\\n  /// @notice borrow asset B under asset A. Result balances should be A0 + A1, B0 + B1\\n  ///         Where (A1 : B1) == (propA : propB), A0 and B0 are equal to {c.addonA} and {c.addonB}\\n  /// @param balanceA_ Current balance of the collateral\\n  /// @param balanceB_ Current balance of the borrow asset\\n  function openPosition(\\n    RebalanceAssetsCore memory c,\\n    PricesDecs memory pd,\\n    uint balanceA_,\\n    uint balanceB_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    // if there are two not-zero addons, the caller should reduce balances before the call\\n    require(c.addonA == 0 || c.addonB == 0, AppErrors.INVALID_VALUE);\\n\\n    // we are going to borrow B under A\\n    if (c.addonB != 0) {\\n      // B is underlying, so we are going to borrow underlying\\n      if (balanceB_ >= c.addonB) {\\n        // simple case - we already have required addon on the balance. Just keep it unused\\n        return _openPosition(c, balanceA_, balanceB_ - c.addonB);\\n      } else {\\n        // we need to get 1) (c.addonB + balanceB_) amount, so we will have required c.addonB\\n        //                2) leftovers of A and B should be allocated in required proportions\\n        // it's too hard to calculate correctly required to borrow amount in this case without changing TetuConverter\\n        // but we can assume here, that amount (c.addonB - balanceB_) is pretty small (it's profitToCover)\\n        // so, we can swap this required amount through liquidator at first\\n        // then use _openPosition to re-allocated rest amounts to proper proportions\\n        (uint decA,) = _makeLittleSwap(c, pd, balanceA_, c.addonB - balanceB_);\\n        return _openPosition(c, balanceA_ - decA, balanceB_);\\n      }\\n    } else if (c.addonA != 0) {\\n      // A is underlying, we need to put aside c.addonA and allocate leftovers in right proportions.\\n      // we are going to borrow B under asset A, so the case (balanceA_ < c.addonA) is not valid here\\n      require(balanceA_ >= c.addonA, AppErrors.NOT_ENOUGH_BALANCE);\\n      return _openPosition(c, balanceA_ - c.addonA, balanceB_);\\n    } else {\\n      // simple logic, no addons\\n      return _openPosition(c, balanceA_, balanceB_);\\n    }\\n  }\\n\\n  /// @notice borrow asset B under asset A, result balances should have proportions: (propA : propB)\\n  function _openPosition(RebalanceAssetsCore memory c, uint balanceA_, uint balanceB_) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    uint untouchedAmountA;\\n    bytes memory entryData = abi.encode(1, c.propA, c.propB);\\n\\n    if (balanceB_ != 0) {\\n      // we are going to use {balanceA_} as collateral\\n      // but there is some amount on {balanceB_}, so we need to keep corresponded part of {balanceA_} untouched\\n      untouchedAmountA = balanceB_ * c.alpha18 * c.propA / c.propB / 1e18;\\n\\n      // we are going to borrow B under A, so balance A must be greater then balance B\\n      // otherwise the function is called incorrectly - probably we need to borrow A under B\\n      require(untouchedAmountA <= balanceA_, AppErrors.WRONG_VALUE);\\n    }\\n\\n    AppLib.approveIfNeeded(c.assetA, balanceA_ - untouchedAmountA, address(c.converterLiquidator.converter));\\n\\n    return ConverterStrategyBaseLib.openPosition(\\n      c.converterLiquidator.converter,\\n      entryData,\\n      c.assetA,\\n      c.assetB,\\n      balanceA_ - untouchedAmountA,\\n      c.thresholdA\\n    );\\n  }\\n\\n  //endregion -------------------------------------------------- Open position\\n\\n  //region -------------------------------------------------- Little swap\\n  /// @notice Swap min amount of A to get {requiredAmountB}\\n  /// @return spentAmountIn how much the balance A has decreased\\n  /// @return receivedAmountOut how much the balance B has increased\\n  function _makeLittleSwap(\\n    RebalanceAssetsCore memory c,\\n    PricesDecs memory pd,\\n    uint balanceA_,\\n    uint requiredAmountB\\n  ) internal returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    uint amountInA = requiredAmountB * pd.prices[c.indexB] * pd.decs[c.indexA] / pd.prices[c.indexA] / pd.decs[c.indexB];\\n    // we can have some loss because of slippage\\n    // so, let's increase input amount a bit\\n    amountInA = amountInA * (100_000 + ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE) / 100_000;\\n\\n    // in practice the addition is required to pay ProfitToCover\\n    // we assume, that total addition amount is small enough, much smaller then the total balance\\n    // otherwise something is wrong: we are going to pay ProfitToCover, but we don't have enough amount on the balances.\\n    require(balanceA_ > amountInA, AppErrors.NOT_ENOUGH_BALANCE);\\n\\n    (spentAmountIn, receivedAmountOut) = ConverterStrategyBaseLib.liquidate(\\n      c.converterLiquidator.converter,\\n      c.converterLiquidator.liquidator,\\n      c.assetA,\\n      c.assetB,\\n      amountInA,\\n      ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE,\\n      c.thresholdA,\\n      false\\n    );\\n  }\\n\\n  //endregion -------------------------------------------------- Little swap\\n\\n}\\n\",\"keccak256\":\"0x6cafb845dad647c8d8ae8b7e15ab57e9918ee5731a5d2caef7349acde2dda3e7\",\"license\":\"BUSL-1.1\"},\"contracts/libs/ConverterEntryKinds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/// @notice Utils and constants related to entryKind param of ITetuConverter.findBorrowStrategy\\nlibrary ConverterEntryKinds {\\n  /// @notice Amount of collateral is fixed. Amount of borrow should be max possible.\\n  uint constant public ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0 = 0;\\n\\n  /// @notice Split provided source amount S on two parts: C1 and C2 (C1 + C2 = S)\\n  ///         C2 should be used as collateral to make a borrow B.\\n  ///         Results amounts of C1 and B (both in terms of USD) must be in the given proportion\\n  uint constant public ENTRY_KIND_EXACT_PROPORTION_1 = 1;\\n\\n  /// @notice Borrow given amount using min possible collateral\\n  uint constant public ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2 = 2;\\n\\n  /// @notice Decode entryData, extract first uint - entry kind\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\n    if (entryData_.length == 0) {\\n      return ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0;\\n    }\\n    return abi.decode(entryData_, (uint));\\n  }\\n}\\n\",\"keccak256\":\"0xdab780e4c6b58e604dc56232bd16132a951944a543b0baa639233fdb26cdbe75\",\"license\":\"BUSL-1.1\"},\"contracts/libs/IterationPlanLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"./AppErrors.sol\\\";\\nimport \\\"./AppLib.sol\\\";\\n\\n/// @notice Support of withdraw iteration plans\\nlibrary IterationPlanLib {\\n\\n//region ------------------------------------------------ Constants\\n  /// @notice Swap collateral asset to get required amount-to-repay, then repay and get more collateral back.\\n  ///         It tries to minimizes count of repay-operations.\\n  ///         If there are no debts, swap leftovers to get required proportions of the asset.\\n  ///         This mode is intended i.e. for \\\"withdraw all\\\"\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                     The assets should be swapped to get following result proportions:\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\n  ///                     Pass type(uint).max to read proportions from the pool.\\n  uint constant public PLAN_SWAP_REPAY = 0;\\n\\n  /// @notice Repay available amount-to-repay, swap all or part of collateral to borrowed-asset, make one repay if needed.\\n  ///         Swap + second repay tries to make asset balances to proportions required by the pool.\\n  ///         Proportions are read from pool through IPoolProportionsProvider(this) and re-read after swapping.\\n  ///         This mode is intended i.e. for rebalancing debts using single iteration.\\n  ///         (uint256, uint256, uint256) - (entry kind, propNotUnderlying18, required-amount-to-reduce-the-debt)\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                     The assets should be swapped to get following result proportions:\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\n  ///                     Pass type(uint).max to read proportions from the pool.\\n  uint constant public PLAN_REPAY_SWAP_REPAY = 1;\\n\\n  /// @notice Swap leftovers to required proportions, don't repay any debts\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                     The assets should be swapped to get following result proportions:\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\n  ///                     Pass type(uint).max to read proportions from the pool.\\n  uint constant public PLAN_SWAP_ONLY = 2;\\n//endregion ------------------------------------------------ Constants\\n\\n//region ------------------------------------------------ Data types\\n  /// @notice Set of parameters required to liquidation through aggregators\\n  struct SwapRepayPlanParams {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n\\n    /// @notice Assets used by depositor stored as following way: [underlying, not-underlying]\\n    address[] tokens;\\n\\n    /// @notice Liquidation thresholds for the {tokens}\\n    uint[] liquidationThresholds;\\n\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\n    uint[] prices;\\n    /// @notice 10**decimal for the assets\\n    uint[] decs;\\n\\n    /// @notice Amounts that will be received on balance before execution of the plan.\\n    uint[] balanceAdditions;\\n\\n    /// @notice Plan kind extracted from entry data, see {IterationPlanKinds}\\n    uint planKind;\\n\\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n    ///         The leftovers should be swapped to get following result proportions of the assets:\\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\n    uint propNotUnderlying18;\\n\\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\\n    bool usePoolProportions;\\n\\n    /// @notice \\\"required-amount-to-reduce-debt\\\" in the case of REPAY-SWAP-REPAY, zero in other cases\\n    uint entryDataParam;\\n  }\\n\\n  struct GetIterationPlanLocal {\\n    /// @notice Underlying balance\\n    uint assetBalance;\\n    /// @notice Not-underlying balance\\n    uint tokenBalance;\\n\\n    uint totalDebt;\\n    uint totalCollateral;\\n\\n    uint debtReverse;\\n    uint collateralReverse;\\n\\n    address asset;\\n    address token;\\n\\n    bool swapLeftoversNeeded;\\n  }\\n\\n  struct EstimateSwapAmountForRepaySwapRepayLocal {\\n    uint x;\\n    uint y;\\n    uint bA1;\\n    uint bB1;\\n    uint alpha;\\n    uint swapRatio;\\n    uint aB3;\\n    uint cA1;\\n    uint cB1;\\n    uint aA2;\\n  }\\n//endregion ------------------------------------------------ Data types\\n\\n  /// @notice Decode entryData, extract first uint - entry kind\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\n    if (entryData_.length == 0) {\\n      return PLAN_SWAP_REPAY;\\n    }\\n    return abi.decode(entryData_, (uint));\\n  }\\n\\n//region ------------------------------------------------ Build plan\\n  /// @notice Build plan to make single iteration of withdraw according to the selected plan\\n  ///         The goal is to withdraw {requestedAmount} and receive {asset}:{token} in proper proportions on the balance\\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\\n  /// @param tokens List of the pool tokens. One of them is underlying and one of then is not-underlying\\n  ///               that we are going to withdraw\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}. If amount is less then the threshold,\\n  ///                              we cannot swap it.\\n  /// @param prices Prices of the {tokens}, decimals 18, [$/token]\\n  /// @param decs 10**decimal for each token of the {tokens}\\n  /// @param balanceAdditions Amounts that will be added to the current balances of the {tokens}\\n  ///                         to the moment of the plan execution\\n  /// @param packedData Several values packed to fixed-size array (to reduce number of params)\\n  ///    0: usePoolProportions: 1 - read proportions from the pool through IPoolProportionsProvider(this)\\n  ///    1: planKind: selected plan, one of PLAN_XXX\\n  ///    2: propNotUnderlying18: value of not-underlying proportion [0..1e18] if usePoolProportions == 0\\n  ///    3: requestedBalance: total amount that should be withdrawn, it can be type(uint).max\\n  ///    4: indexAsset: index of the underlying in {tokens} array\\n  ///    5: indexToken: index of the token in {tokens} array. We are going to withdraw the token and convert it to the asset\\n  ///    6: entryDataParam: required-amount-to-reduce-debt in REPAY-SWAP-REPAY case; zero in other cases\\n  function buildIterationPlan(\\n    address[2] memory converterLiquidator,\\n    address[] memory tokens,\\n    uint[] memory liquidationThresholds,\\n    uint[] memory prices,\\n    uint[] memory decs,\\n    uint[] memory balanceAdditions,\\n    uint[7] memory packedData\\n  ) external returns (\\n    uint indexToSwapPlus1,\\n    uint amountToSwap,\\n    uint indexToRepayPlus1\\n  ) {\\n    return _buildIterationPlan(\\n      SwapRepayPlanParams({\\n        converter: ITetuConverter(converterLiquidator[0]),\\n        liquidator: ITetuLiquidator(converterLiquidator[1]),\\n        tokens: tokens,\\n        liquidationThresholds: liquidationThresholds,\\n        prices: prices,\\n        decs: decs,\\n        balanceAdditions: balanceAdditions,\\n        planKind: packedData[1],\\n        propNotUnderlying18: packedData[2],\\n        usePoolProportions: packedData[0] != 0,\\n        entryDataParam: packedData[6]\\n      }),\\n      packedData[3],\\n      packedData[4],\\n      packedData[5]\\n    );\\n  }\\n\\n  /// @notice Generate plan for next withdraw iteration. We can do only one swap per iteration.\\n  ///         In general, we cam make 1) single swap (direct or reverse) and 2) repay\\n  ///         Swap is required to get required repay-amount OR to swap leftovers on final iteration.\\n  /// @param requestedBalance Amount of underlying that we need to have on balance after executing the plan.\\n  /// @param indexAsset Index of the underlying in {p.tokens} array\\n  /// @param indexToken Index of the not-underlying in {p.tokens} array\\n  /// @return indexToSwapPlus1 1-based index of the token to be swapped; 0 means swap is not required.\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap\\n  /// @return indexToRepayPlus1 1-based index of the token that should be used to repay borrow in converter.\\n  ///                            0 - no repay is required - it means that this is a last step with swapping leftovers.\\n  function _buildIterationPlan(\\n    SwapRepayPlanParams memory p,\\n    uint requestedBalance,\\n    uint indexAsset,\\n    uint indexToken\\n  ) internal returns (\\n    uint indexToSwapPlus1,\\n    uint amountToSwap,\\n    uint indexToRepayPlus1\\n  ) {\\n    GetIterationPlanLocal memory v;\\n    v.asset = p.tokens[indexAsset];\\n    v.token = p.tokens[indexToken];\\n\\n    v.assetBalance = IERC20(v.asset).balanceOf(address(this)) + p.balanceAdditions[indexAsset];\\n    v.tokenBalance = IERC20(p.tokens[indexToken]).balanceOf(address(this)) + p.balanceAdditions[indexToken];\\n\\n    if (p.planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\\n      v.swapLeftoversNeeded = true;\\n    } else {\\n      uint requestedAmount = requestedBalance == type(uint).max\\n        ? type(uint).max\\n        : AppLib.sub0(requestedBalance, v.assetBalance);\\n\\n      if (requestedAmount < p.liquidationThresholds[indexAsset]) {\\n        // we don't need to repay any debts anymore, but we should swap leftovers\\n        v.swapLeftoversNeeded = true;\\n      } else {\\n        // we need to increase balance on the following amount: requestedAmount - v.balance;\\n        // we can have two possible borrows:\\n        // 1) direct (p.tokens[INDEX_ASSET] => tokens[i]) and 2) reverse (tokens[i] => p.tokens[INDEX_ASSET])\\n        // normally we can have only one of them, not both..\\n        // but better to take into account possibility to have two debts simultaneously\\n\\n        // reverse debt\\n        (v.debtReverse, v.collateralReverse) = p.converter.getDebtAmountCurrent(address(this), v.token, v.asset, true);\\n        if (v.debtReverse < AppLib.DUST_AMOUNT_TOKENS) { // there is reverse debt or the reverse debt is dust debt\\n          // direct debt\\n          (v.totalDebt, v.totalCollateral) = p.converter.getDebtAmountCurrent(address(this), v.asset, v.token, true);\\n\\n          if (v.totalDebt < AppLib.DUST_AMOUNT_TOKENS) { // there is direct debt or the direct debt is dust debt\\n            // This is final iteration - we need to swap leftovers and get amounts on balance in proper proportions.\\n            // The leftovers should be swapped to get following result proportions of the assets:\\n            //      underlying : not-underlying === 1e18 - propNotUnderlying18 : propNotUnderlying18\\n            v.swapLeftoversNeeded = true;\\n          } else {\\n            // repay direct debt\\n            if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\n                p,\\n                [v.assetBalance, v.tokenBalance],\\n                [indexAsset, indexToken],\\n                p.propNotUnderlying18,\\n                [v.totalCollateral, v.totalDebt],\\n                p.entryDataParam\\n              );\\n            } else {\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\n                requestedAmount,\\n                p,\\n                v.totalCollateral,\\n                v.totalDebt,\\n                indexAsset,\\n                indexToken,\\n                v.assetBalance,\\n                v.tokenBalance\\n              );\\n            }\\n          }\\n        } else {\\n          // repay reverse debt\\n          if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\n              p,\\n              [v.tokenBalance, v.assetBalance],\\n              [indexToken, indexAsset],\\n              1e18 - p.propNotUnderlying18,\\n              [v.collateralReverse, v.debtReverse],\\n              p.entryDataParam\\n            );\\n          } else {\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\n              requestedAmount == type(uint).max\\n                ? type(uint).max\\n                : requestedAmount * p.prices[indexAsset] * p.decs[indexToken] / p.prices[indexToken] / p.decs[indexAsset],\\n              p,\\n              v.collateralReverse,\\n              v.debtReverse,\\n              indexToken,\\n              indexAsset,\\n              v.tokenBalance,\\n              v.assetBalance\\n            );\\n          }\\n        }\\n      }\\n    }\\n\\n    if (v.swapLeftoversNeeded) {\\n      (indexToSwapPlus1, amountToSwap) = _buildPlanForLeftovers(p, v.assetBalance, v.tokenBalance, indexAsset, indexToken, p.propNotUnderlying18);\\n    }\\n\\n    return (indexToSwapPlus1, amountToSwap, indexToRepayPlus1);\\n  }\\n\\n  /// @notice Repay B, get collateral A, then swap A => B, [make one more repay B] => get A:B in required proportions\\n  /// @param balancesAB [balanceA, balanceB]\\n  /// @param idxAB [indexA, indexB]\\n  /// @param totalAB [totalCollateralA, totalBorrowB]\\n  /// @param requiredAmountToReduceDebt If not zero: we are going to make repay-swap-repay to reduce total\\n  ///        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce\\n  ///        the amount of debt by the given amount.\\n  function _buildPlanRepaySwapRepay(\\n    SwapRepayPlanParams memory p,\\n    uint[2] memory balancesAB,\\n    uint[2] memory idxAB,\\n    uint propB,\\n    uint[2] memory totalAB,\\n    uint requiredAmountToReduceDebt\\n  ) internal returns (\\n    uint indexToSwapPlus1,\\n    uint amountToSwap,\\n    uint indexToRepayPlus1\\n  ) {\\n    // use all available tokenB to repay debt and receive as much as possible tokenA\\n    uint amountToRepay = Math.min(balancesAB[1], totalAB[1]);\\n\\n    uint collateralAmount;\\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\n      uint swappedAmountOut;\\n      //\\n      (collateralAmount, swappedAmountOut) = p.converter.quoteRepay(address(this), p.tokens[idxAB[0]], p.tokens[idxAB[1]], amountToRepay);\\n      if (collateralAmount > swappedAmountOut) { // SCB-789\\n        collateralAmount -= swappedAmountOut;\\n      }\\n    } else {\\n      amountToRepay = 0;\\n    }\\n\\n    // swap A to B: full or partial\\n    amountToSwap = estimateSwapAmountForRepaySwapRepay(\\n      p,\\n      balancesAB[0],\\n      balancesAB[1],\\n      idxAB[0],\\n      idxAB[1],\\n      propB,\\n      totalAB[0],\\n      totalAB[1],\\n      collateralAmount,\\n      amountToRepay\\n    );\\n\\n    if (requiredAmountToReduceDebt != 0) {\\n      // probably it worth to increase amount to swap?\\n      uint requiredAmountToSwap = requiredAmountToReduceDebt * p.prices[idxAB[1]] * p.decs[idxAB[0]] / p.prices[idxAB[0]] / p.decs[idxAB[1]];\\n      amountToSwap = Math.max(amountToSwap, requiredAmountToSwap);\\n      amountToSwap = Math.min(amountToSwap, balancesAB[0] + collateralAmount);\\n    }\\n\\n    return (idxAB[0] + 1, amountToSwap, idxAB[1] + 1);\\n  }\\n\\n  /// @notice Estimate swap amount for iteration \\\"repay-swap-repay\\\"\\n  ///         The iteration should give us amounts of assets in required proportions.\\n  ///         There are two cases here: full swap and partial swap. Second repay is not required if the swap is partial.\\n  /// @param collateralA Estimated value of collateral A received after repay balanceB\\n  /// @return amount of token A to be swapped\\n  function estimateSwapAmountForRepaySwapRepay(\\n    SwapRepayPlanParams memory p,\\n    uint balanceA,\\n    uint balanceB,\\n    uint indexA,\\n    uint indexB,\\n    uint propB,\\n    uint totalCollateralA,\\n    uint totalBorrowB,\\n    uint collateralA,\\n    uint amountToRepayB\\n  ) internal pure returns(uint) {\\n    // N - number of the state\\n    // bAN, bBN - balances of A and B; aAN, aBN - amounts of A and B; cAN, cBN - collateral/borrow amounts of A/B\\n    // alpha ~ cAN/cBN - estimated ratio of collateral/borrow\\n    // s = swap ratio, aA is swapped to aB, so aA = s * aB\\n    // g = split ratio, bA1 is divided on two parts: bA1 * gamma, bA1 * (1 - gamma). First part is swapped.\\n    // X = proportion of A, Y = proportion of B\\n\\n    // Formulas\\n    // aB3 = (x * bB2 - y * bA2) / (alpha * y + x)\\n    // gamma = (y * bA1 - x * bB1) / (bA1 * (x * s + y))\\n\\n    // There are following stages:\\n    // 0. init (we have at least not zero amount of B and not zero debt of B)\\n    // 1. repay 1 (repay all available amount of B OR all available debt)\\n    // 2. swap (swap A fully or partially to B)\\n    // 3. repay 2 (optional: we need this stage if full swap produces amount of B that is <= available debt)\\n    // 4. final (we have assets in right proportion on the balance)\\n    EstimateSwapAmountForRepaySwapRepayLocal memory v;\\n    v.x = 1e18 - propB;\\n    v.y = propB;\\n\\n// 1. repay 1\\n    // convert amounts A, amounts B to cost A, cost B in USD\\n    v.bA1 = (balanceA + collateralA) * p.prices[indexA] / p.decs[indexA];\\n    v.bB1 = (balanceB - amountToRepayB) * p.prices[indexB] / p.decs[indexB];\\n    v.cB1 = (totalBorrowB - amountToRepayB) * p.prices[indexB] / p.decs[indexB];\\n    v.alpha = 1e18 * totalCollateralA * p.prices[indexA] * p.decs[indexB]\\n      / p.decs[indexA] / p.prices[indexB] / totalBorrowB; // (!) approx estimation\\n\\n// 2. full swap\\n    v.aA2 = v.bA1;\\n    v.swapRatio = 1e18; // we assume swap ratio 1:1\\n\\n// 3. repay 2\\n    // aB3 = (x * bB2 - Y * bA2) / (alpha * y + x)\\n    v.aB3 = (\\n      v.x * (v.bB1 + v.aA2 * v.swapRatio / 1e18)    // bB2 = v.bB1 + v.aA2 * v.s / 1e18\\n      - v.y * (v.bA1 - v.aA2)                       // bA2 = v.bA1 - v.aA2;\\n    ) / (v.y * v.alpha / 1e18 + v.x);\\n\\n    if (v.aB3 > v.cB1) {\\n      // there is not enough debt to make second repay\\n      // we need to make partial swap and receive assets in right proportions in result\\n      // v.gamma = 1e18 * (v.y * v.bA1 - v.x * v.bB1) / (v.bA1 * (v.x * v.s / 1e18 + v.y));\\n      v.aA2 = v.bA1 * (v.y * v.bA1 - v.x * v.bB1) / (v.bA1 * (v.x * v.swapRatio / 1e18 + v.y));\\n    }\\n\\n    return v.aA2 * p.decs[indexA] / p.prices[indexA];\\n  }\\n\\n  /// @notice Prepare a plan to swap leftovers to required proportion\\n  /// @param balanceA Balance of token A, i.e. underlying\\n  /// @param balanceB Balance of token B, i.e. not-underlying\\n  /// @param indexA Index of the token A, i.e. underlying, in {p.prices} and {p.decs}\\n  /// @param indexB Index of the token B, i.e. not-underlying, in {p.prices} and {p.decs}\\n  /// @param propB Required proportion of TokenB [0..1e18]. Proportion of token A is (1e18-propB)\\n  /// @return indexTokenToSwapPlus1 Index of the token to be swapped. 0 - no swap is required\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap is required\\n  function _buildPlanForLeftovers(\\n    SwapRepayPlanParams memory p,\\n    uint balanceA,\\n    uint balanceB,\\n    uint indexA,\\n    uint indexB,\\n    uint propB\\n  ) internal pure returns (\\n    uint indexTokenToSwapPlus1,\\n    uint amountToSwap\\n  ) {\\n    (uint targetA, uint targetB) = _getTargetAmounts(p.prices, p.decs, balanceA, balanceB, propB, indexA, indexB);\\n    if (balanceA < targetA) {\\n      // we need to swap not-underlying to underlying\\n      if (balanceB - targetB > p.liquidationThresholds[indexB]) {\\n        amountToSwap = balanceB - targetB;\\n        indexTokenToSwapPlus1 = indexB + 1;\\n      }\\n    } else {\\n      // we need to swap underlying to not-underlying\\n      if (balanceA - targetA > p.liquidationThresholds[indexA]) {\\n        amountToSwap = balanceA - targetA;\\n        indexTokenToSwapPlus1 = indexA + 1;\\n      }\\n    }\\n    return (indexTokenToSwapPlus1, amountToSwap);\\n  }\\n\\n  /// @notice Prepare a plan to swap some amount of collateral to get required repay-amount and make repaying\\n  ///         1) Sell collateral-asset to get missed amount-to-repay 2) make repay and get more collateral back\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount.\\n  /// @param totalCollateral Total amount of collateral used in the borrow\\n  /// @param totalDebt Total amount of debt that should be repaid to receive {totalCollateral}\\n  /// @param indexCollateral Index of collateral asset in {p.prices}, {p.decs}\\n  /// @param indexBorrow Index of borrow asset in {p.prices}, {p.decs}\\n  /// @param balanceCollateral Current balance of the collateral asset\\n  /// @param balanceBorrow Current balance of the borrowed asset\\n  /// @param indexTokenToSwapPlus1 1-based index of the token to be swapped. Swap of amount of collateral asset can be required\\n  ///                              to receive missed amount-to-repay. 0 - no swap is required\\n  /// @param amountToSwap Amount to be swapped. 0 - no swap is required\\n  /// @param indexRepayTokenPlus1 1-based index of the token to be repaied. 0 - no repaying is required\\n  function _buildPlanForSellAndRepay(\\n    uint requestedAmount,\\n    SwapRepayPlanParams memory p,\\n    uint totalCollateral,\\n    uint totalDebt,\\n    uint indexCollateral,\\n    uint indexBorrow,\\n    uint balanceCollateral,\\n    uint balanceBorrow\\n  ) internal pure returns (\\n    uint indexTokenToSwapPlus1,\\n    uint amountToSwap,\\n    uint indexRepayTokenPlus1\\n  ) {\\n    // what amount of collateral we should sell to get required amount-to-pay to pay the debt\\n    uint toSell = _getAmountToSell(\\n      requestedAmount,\\n      totalDebt,\\n      totalCollateral,\\n      p.prices,\\n      p.decs,\\n      indexCollateral,\\n      indexBorrow,\\n      balanceBorrow\\n    );\\n\\n    // convert {toSell} amount of underlying to token\\n    if (toSell != 0 && balanceCollateral != 0) {\\n      toSell = Math.min(toSell, balanceCollateral);\\n      uint threshold = p.liquidationThresholds[indexCollateral];\\n      if (toSell > threshold) {\\n        amountToSwap = toSell;\\n        indexTokenToSwapPlus1 = indexCollateral + 1;\\n      } else {\\n        // we need to sell amount less than the threshold, it's not allowed\\n        // but it's dangerous to just ignore the selling because there is a chance to have error 35\\n        // (There is a debt $3.29, we make repay $3.27 => error 35)\\n        // it would be safer to sell a bit more amount if it's possible\\n        if (balanceCollateral >= threshold + 1) {\\n          amountToSwap = threshold + 1;\\n          indexTokenToSwapPlus1 = indexCollateral + 1;\\n        }\\n      }\\n    }\\n\\n    return (indexTokenToSwapPlus1, amountToSwap, indexBorrow + 1);\\n  }\\n\\n  /// @notice Calculate what balances of underlying and not-underlying we need to fit {propNotUnderlying18}\\n  /// @param prices Prices of underlying and not underlying\\n  /// @param decs 10**decimals for underlying and not underlying\\n  /// @param assetBalance Current balance of underlying\\n  /// @param tokenBalance Current balance of not-underlying\\n  /// @param propNotUnderlying18 Required proportion of not-underlying [0..1e18]\\n  ///                            Proportion of underlying would be (1e18 - propNotUnderlying18)\\n  /// @param targetAssets What result balance of underlying is required to fit to required proportions\\n  /// @param targetTokens What result balance of not-underlying is required to fit to required proportions\\n  function _getTargetAmounts(\\n    uint[] memory prices,\\n    uint[] memory decs,\\n    uint assetBalance,\\n    uint tokenBalance,\\n    uint propNotUnderlying18,\\n    uint indexAsset,\\n    uint indexToken\\n  ) internal pure returns (\\n    uint targetAssets,\\n    uint targetTokens\\n  ) {\\n    uint costAssets = assetBalance * prices[indexAsset] / decs[indexAsset];\\n    uint costTokens = tokenBalance * prices[indexToken] / decs[indexToken];\\n    targetTokens = propNotUnderlying18 == 0\\n      ? 0\\n      : ((costAssets + costTokens) * propNotUnderlying18 / 1e18);\\n    targetAssets = ((costAssets + costTokens) - targetTokens) * decs[indexAsset] / prices[indexAsset];\\n    targetTokens = targetTokens * decs[indexToken] / prices[indexToken];\\n  }\\n\\n  /// @notice What amount of collateral should be sold to pay the debt and receive {requestedAmount}\\n  /// @dev It doesn't allow to sell more than the amount of total debt in the borrow\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount\\n  /// @param totalDebt Total debt of the borrow in terms of borrow asset\\n  /// @param totalCollateral Total collateral of the borrow in terms of collateral asset\\n  /// @param prices Cost of $1 in terms of the asset, decimals 18\\n  /// @param decs 10**decimals for each asset\\n  /// @param indexCollateral Index of the collateral asset in {prices} and {decs}\\n  /// @param indexBorrowAsset Index of the borrow asset in {prices} and {decs}\\n  /// @param balanceBorrowAsset Available balance of the borrow asset, it will be used to cover the debt\\n  /// @return amountOut Amount of collateral-asset that should be sold\\n  function _getAmountToSell(\\n    uint requestedAmount,\\n    uint totalDebt,\\n    uint totalCollateral,\\n    uint[] memory prices,\\n    uint[] memory decs,\\n    uint indexCollateral,\\n    uint indexBorrowAsset,\\n    uint balanceBorrowAsset\\n  ) internal pure returns (\\n    uint amountOut\\n  ) {\\n    if (totalDebt != 0) {\\n      if (balanceBorrowAsset != 0) {\\n        // there is some borrow asset on balance\\n        // it will be used to cover the debt\\n        // let's reduce the size of totalDebt/Collateral to exclude balanceBorrowAsset\\n        uint sub = Math.min(balanceBorrowAsset, totalDebt);\\n        totalCollateral -= totalCollateral * sub / totalDebt;\\n        totalDebt -= sub;\\n      }\\n\\n      // for definiteness: usdc - collateral asset, dai - borrow asset\\n      // Pc = price of the USDC, Pb = price of the DAI, alpha = Pc / Pb [DAI / USDC]\\n      // S [USDC] - amount to sell, R [DAI] = alpha * S - amount to repay\\n      // After repaying R we get: alpha * S * C / R\\n      // Balance should be increased on: requestedAmount = alpha * S * C / R - S\\n      // So, we should sell: S = requestedAmount / (alpha * C / R - 1))\\n      // We can lost some amount on liquidation of S => R, so we need to use some gap = {GAP_AMOUNT_TO_SELL}\\n      // Same formula: S * h = S + requestedAmount, where h = health factor => s = requestedAmount / (h - 1)\\n      // h = alpha * C / R\\n      uint alpha18 = prices[indexCollateral] * decs[indexBorrowAsset] * 1e18\\n        / prices[indexBorrowAsset] / decs[indexCollateral];\\n\\n      // if totalCollateral is zero (liquidation happens) we will have zero amount (the debt shouldn't be paid)\\n      amountOut = totalDebt != 0 && alpha18 * totalCollateral / totalDebt > 1e18\\n        ? Math.min(requestedAmount, totalCollateral) * 1e18 / (alpha18 * totalCollateral / totalDebt - 1e18)\\n        : 0;\\n\\n      if (amountOut != 0) {\\n        // we shouldn't try to sell amount greater than amount of totalDebt in terms of collateral asset\\n        // but we always asks +1% because liquidation results can be different a bit from expected\\n        amountOut = (AppLib.GAP_CONVERSION + AppLib.DENOMINATOR) * Math.min(amountOut, totalDebt * 1e18 / alpha18) / AppLib.DENOMINATOR;\\n      }\\n    }\\n\\n    return amountOut;\\n  }\\n//endregion ------------------------------------------------ Build plan\\n}\\n\",\"keccak256\":\"0xc6864acaa89f4fa3d63898f018836ef04b11e4a972344a62a3dfa51f13ee08f2\",\"license\":\"BUSL-1.1\"},\"contracts/libs/TokenAmountsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./AppErrors.sol\\\";\\n\\n/// @title Library for clearing / joining token addresses & amounts arrays\\n/// @author bogdoslav\\nlibrary TokenAmountsLib {\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string internal constant TOKEN_AMOUNTS_LIB_VERSION = \\\"1.0.1\\\";\\n\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n    unchecked {\\n      return i + 1;\\n    }\\n  }\\n\\n  function filterZeroAmounts(\\n    address[] memory tokens,\\n    uint[] memory amounts\\n  ) internal pure returns (\\n    address[] memory t,\\n    uint[] memory a\\n  ) {\\n    require(tokens.length == amounts.length, AppErrors.INCORRECT_LENGTHS);\\n    uint len2 = 0;\\n    uint len = tokens.length;\\n    for (uint i = 0; i < len; i++) {\\n      if (amounts[i] != 0) len2++;\\n    }\\n\\n    t = new address[](len2);\\n    a = new uint[](len2);\\n\\n    uint j = 0;\\n    for (uint i = 0; i < len; i++) {\\n      uint amount = amounts[i];\\n      if (amount != 0) {\\n        t[j] = tokens[i];\\n        a[j] = amount;\\n        j++;\\n      }\\n    }\\n  }\\n\\n  /// @notice unites three arrays to single array without duplicates, amounts are sum, zero amounts are allowed\\n  function combineArrays(\\n    address[] memory tokens0,\\n    uint[] memory amounts0,\\n    address[] memory tokens1,\\n    uint[] memory amounts1,\\n    address[] memory tokens2,\\n    uint[] memory amounts2\\n  ) internal pure returns (\\n    address[] memory allTokens,\\n    uint[] memory allAmounts\\n  ) {\\n    uint[] memory lens = new uint[](3);\\n    lens[0] = tokens0.length;\\n    lens[1] = tokens1.length;\\n    lens[2] = tokens2.length;\\n\\n    require(\\n      lens[0] == amounts0.length && lens[1] == amounts1.length && lens[2] == amounts2.length,\\n      AppErrors.INCORRECT_LENGTHS\\n    );\\n\\n    uint maxLength = lens[0] + lens[1] + lens[2];\\n    address[] memory tokensOut = new address[](maxLength);\\n    uint[] memory amountsOut = new uint[](maxLength);\\n    uint unitedLength;\\n\\n    for (uint step; step < 3; ++step) {\\n      uint[] memory amounts = step == 0\\n        ? amounts0\\n        : (step == 1\\n          ? amounts1\\n          : amounts2);\\n      address[] memory tokens = step == 0\\n        ? tokens0\\n        : (step == 1\\n          ? tokens1\\n          : tokens2);\\n      for (uint i1 = 0; i1 < lens[step]; i1++) {\\n        uint amount1 = amounts[i1];\\n        address token1 = tokens[i1];\\n        bool united = false;\\n\\n        for (uint i = 0; i < unitedLength; i++) {\\n          if (token1 == tokensOut[i]) {\\n            amountsOut[i] += amount1;\\n            united = true;\\n            break;\\n          }\\n        }\\n\\n        if (!united) {\\n          tokensOut[unitedLength] = token1;\\n          amountsOut[unitedLength] = amount1;\\n          unitedLength++;\\n        }\\n      }\\n    }\\n\\n    // copy united tokens to result array\\n    allTokens = new address[](unitedLength);\\n    allAmounts = new uint[](unitedLength);\\n    for (uint i; i < unitedLength; i++) {\\n      allTokens[i] = tokensOut[i];\\n      allAmounts[i] = amountsOut[i];\\n    }\\n\\n  }\\n}\\n\",\"keccak256\":\"0xaf9a3fd1b25e58d6b854d64061ab8508bd9a6d00241f6399ffb6748e9c992ac8\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/ConverterStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyBaseV3.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverterCallback.sol\\\";\\nimport \\\"./ConverterStrategyBaseLib.sol\\\";\\nimport \\\"./ConverterStrategyBaseLib2.sol\\\";\\nimport \\\"./DepositorBase.sol\\\";\\nimport \\\"../interfaces/IConverterStrategyBase.sol\\\";\\n\\n/////////////////////////////////////////////////////////////////////\\n///                        TERMS\\n///  Main asset == underlying: the asset deposited to the vault by users\\n///  Secondary assets: all assets deposited to the internal pool except the main asset\\n/////////////////////////////////////////////////////////////////////\\n// History:\\n// 3.0.1 refactoring of emergency exit\\n// 3.1.0 use bookkeeper, new set of events\\n\\n/// @title Abstract contract for base Converter strategy functionality\\n/// @notice All depositor assets must be correlated (ie USDC/USDT/DAI)\\n/// @author bogdoslav, dvpublic, a17\\nabstract contract ConverterStrategyBase is IConverterStrategyBase, ITetuConverterCallback, DepositorBase, StrategyBaseV3 {\\n  using SafeERC20 for IERC20;\\n\\n  //region -------------------------------------------------------- DATA TYPES\\n  struct WithdrawUniversalLocal {\\n    ITetuConverter converter;\\n    /// @notice Target asset that should be received on balance.\\n    ///         It's underlying in _withdrawUniversal(), but it can be any other asset in requirePayAmountBack()\\n    address theAsset;\\n    /// @notice List of tokens received by _depositorPoolAssets()\\n    address[] tokens;\\n    /// @notice Index of the {asset} in {tokens}\\n    uint indexTheAsset;\\n    /// @notice Initial balance of the [asset}\\n    uint balanceBefore;\\n    uint indexUnderlying;\\n  }\\n  //endregion -------------------------------------------------------- DATA TYPES\\n\\n  //region -------------------------------------------------------- CONSTANTS\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant CONVERTER_STRATEGY_BASE_VERSION = \\\"3.1.1\\\";\\n\\n  /// @notice 1% gap to cover possible liquidation inefficiency\\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\\n  uint internal constant GAP_CONVERSION = 1_000;\\n  uint internal constant DENOMINATOR = 100_000;\\n  /// @notice If we need to withdraw A, we always tries to receive on balance A + delta\\n  ///         and have at least delta on balance after withdraw to prevent situation when we have debts\\n  ///         but don't have any liquidity to pay the debts and receive locked collaterals back\\n  ///\\n  ///         Delta will be in the range [GAP_WITHDRAW...2 * GAP_WITHDRAW]\\n  uint internal constant GAP_WITHDRAW = 1_000;\\n  //endregion -------------------------------------------------------- CONSTANTS\\n\\n  //region -------------------------------------------------------- VARIABLES\\n  /////////////////////////////////////////////////////////////////////\\n  //                Keep names and ordering!\\n  // Add only in the bottom and don't forget to decrease gap variable\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Minimum token amounts that can be liquidated\\n  /// @dev These thresholds are used to workaround dust problems in many other cases, not during liquidation only\\n  mapping(address => uint) public liquidationThresholds;\\n\\n  /// @notice Internal variables of ConverterStrategyBase\\n  ConverterStrategyBaseState internal _csbs;\\n  //endregion -------------------------------------------------------- VARIABLES\\n\\n  //region -------------------------------------------------------- Getters\\n  function converter() external view returns (ITetuConverter) {\\n    return _csbs.converter;\\n  }\\n\\n  function reinvestThresholdPercent() external view returns (uint) {\\n    return _csbs.reinvestThresholdPercent;\\n  }\\n\\n  function debtToInsurance() external view returns (int) {\\n    return _csbs.debtToInsurance;\\n  }\\n  //endregion -------------------------------------------------------- Getters\\n\\n  //region -------------------------------------------------------- Events\\n  event OnDepositorEnter(uint[] amounts, uint[] consumedAmounts);\\n  event OnDepositorExit(uint liquidityAmount, uint[] withdrawnAmounts);\\n  event OnDepositorEmergencyExit(uint[] withdrawnAmounts);\\n  event OnHardWorkEarnedLost(\\n    uint investedAssetsNewPrices,\\n    uint earnedByPrices,\\n    uint earnedHandleRewards,\\n    uint lostHandleRewards,\\n    uint earnedDeposit,\\n    uint lostDeposit,\\n    uint paidDebtToInsurance\\n  );\\n  //endregion -------------------------------------------------------- Events\\n\\n  //region -------------------------------------------------------- Initialization and configuration\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  function __ConverterStrategyBase_init(\\n    address controller_,\\n    address splitter_,\\n    address converter_\\n  ) internal onlyInitializing {\\n    __StrategyBase_init(controller_, splitter_);\\n    _csbs.converter = ITetuConverter(converter_);\\n\\n    // 1% by default\\n    _csbs.reinvestThresholdPercent = DENOMINATOR / 100;\\n    emit ConverterStrategyBaseLib2.ReinvestThresholdPercentChanged(DENOMINATOR / 100);\\n  }\\n\\n  /// @dev Liquidation thresholds are used to detect dust in many cases, not only in liquidation case\\n  /// @param amount Min amount of token allowed to liquidate, token's decimals are used.\\n  function setLiquidationThreshold(address token, uint amount) external {\\n    ConverterStrategyBaseLib2.checkLiquidationThresholdChanged(controller(), token, amount);\\n    liquidationThresholds[token] = amount;\\n  }\\n\\n  /// @param percent_ New value of the percent, decimals = {REINVEST_THRESHOLD_PERCENT_DENOMINATOR}\\n  function setReinvestThresholdPercent(uint percent_) external {\\n    ConverterStrategyBaseLib2.checkReinvestThresholdPercentChanged(controller(), percent_);\\n    _csbs.reinvestThresholdPercent = percent_;\\n  }\\n  //endregion -------------------------------------------------------- Initialization and configuration\\n\\n  //region -------------------------------------------------------- Deposit to the pool\\n\\n  /// @notice Amount of underlying assets converted to pool assets and invested to the pool.\\n  function investedAssets() override public view virtual returns (uint) {\\n    return _csbs.investedAssets;\\n  }\\n\\n  /// @notice Deposit given amount to the pool.\\n  function _depositToPool(uint amount_, bool updateTotalAssetsBeforeInvest_) override internal virtual returns (\\n    uint strategyLoss\\n  ){\\n    (uint updatedInvestedAssets, uint earnedByPrices) = _fixPriceChanges(updateTotalAssetsBeforeInvest_);\\n    (strategyLoss,) = _depositToPoolUniversal(amount_, earnedByPrices, updatedInvestedAssets);\\n  }\\n\\n  /// @notice Deposit {amount_} to the pool, send {earnedByPrices_} to insurance.\\n  ///         totalAsset will decrease on earnedByPrices_ and sharePrice won't change after all recalculations.\\n  /// @dev We need to deposit {amount_} and withdraw {earnedByPrices_} here\\n  /// @param amount_ Amount of underlying to be deposited\\n  /// @param earnedByPrices_ Profit received because of price changing\\n  /// @param investedAssets_ Invested assets value calculated with updated prices\\n  /// @return strategyLoss Loss happened on the depositing. It doesn't include any price-changing losses\\n  /// @return amountSentToInsurance Price-changing-profit that was sent to the insurance\\n  function _depositToPoolUniversal(uint amount_, uint earnedByPrices_, uint investedAssets_) internal virtual returns (\\n    uint strategyLoss,\\n    uint amountSentToInsurance\\n  ){\\n    address _asset = baseState.asset;\\n\\n    uint amountToDeposit = amount_ > earnedByPrices_\\n      ? amount_ - earnedByPrices_\\n      : 0;\\n\\n    // skip deposit for small amounts\\n    bool needToDeposit = amountToDeposit > _csbs.reinvestThresholdPercent * investedAssets_ / DENOMINATOR;\\n    uint balanceBefore = AppLib.balance(_asset);\\n\\n    // send earned-by-prices to the insurance, ignore dust values\\n    if (earnedByPrices_ > AppLib._getLiquidationThreshold(liquidationThresholds[_asset])) {\\n      if (needToDeposit || balanceBefore >= earnedByPrices_) {\\n        (amountSentToInsurance,) = ConverterStrategyBaseLib2.sendToInsurance(\\n          _asset,\\n          earnedByPrices_,\\n          baseState.splitter,\\n          investedAssets_ + balanceBefore,\\n          balanceBefore\\n        );\\n      } else {\\n        // needToDeposit is false and we don't have enough amount to cover earned-by-prices, we need to withdraw\\n        (/* expectedWithdrewUSD */,, strategyLoss, amountSentToInsurance) = _withdrawUniversal(0, earnedByPrices_, investedAssets_);\\n      }\\n    }\\n\\n    // make deposit\\n    if (needToDeposit) {\\n      (address[] memory tokens, uint indexAsset) = _getTokens(_asset);\\n\\n      // prepare array of amounts ready to deposit, borrow missed amounts\\n      uint[] memory amounts = _beforeDeposit(_csbs.converter, amountToDeposit, tokens, indexAsset);\\n\\n      // make deposit, actually consumed amounts can be different from the desired amounts\\n      if (!ConverterStrategyBaseLib2.findZeroAmount(amounts)) {\\n        // we cannot enter to pool if at least one of amounts is zero\\n        // we check != 0 and don't use thresholds because some strategies allow to enter to the pool with amount < liquidation threshold\\n        (uint[] memory consumedAmounts,) = _depositorEnter(amounts);\\n        emit OnDepositorEnter(amounts, consumedAmounts);\\n      }\\n\\n      // update _investedAssets with new deposited amount\\n      uint investedAssetsAfter = _updateInvestedAssets();\\n\\n      // we need to compensate difference if during deposit we lost some assets\\n      (,strategyLoss) = ConverterStrategyBaseLib2._registerIncome(\\n        investedAssets_ + balanceBefore,\\n        investedAssetsAfter + AppLib.balance(_asset) + amountSentToInsurance\\n      );\\n    }\\n\\n    return (strategyLoss, amountSentToInsurance);\\n  }\\n  //endregion -------------------------------------------------------- Deposit to the pool\\n\\n  //region -------------------------------------------------------- Convert amounts before deposit\\n\\n  /// @notice Prepare {tokenAmounts} to be passed to depositorEnter\\n  /// @dev Override this function to customize entry kind\\n  /// @param amount_ The amount of main asset that should be invested\\n  /// @param tokens_ Results of _depositorPoolAssets() call (list of depositor's asset in proper order)\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\n  /// @return tokenAmounts Amounts of depositor's assets ready to invest (this array can be passed to depositorEnter)\\n  function _beforeDeposit(\\n    ITetuConverter converter_,\\n    uint amount_,\\n    address[] memory tokens_,\\n    uint indexAsset_\\n  ) internal virtual returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    // calculate required collaterals for each token and temporary save them to tokenAmounts\\n    (uint[] memory weights, uint totalWeight) = _depositorPoolWeights();\\n    return ConverterStrategyBaseLib.beforeDeposit(\\n      converter_,\\n      amount_,\\n      tokens_,\\n      indexAsset_,\\n      weights,\\n      totalWeight,\\n      liquidationThresholds\\n    );\\n  }\\n  //endregion -------------------------------------------------------- Convert amounts before deposit\\n\\n  //region -------------------------------------------------------- Get requested amount\\n\\n  /// @notice Initialize members of {v}\\n  /// @param underlying true if asset_ is underlying\\n  function _initWithdrawUniversalLocal(address asset_, WithdrawUniversalLocal memory v, bool underlying) internal view {\\n    v.tokens = _depositorPoolAssets();\\n    v.theAsset = asset_;\\n    v.converter = _csbs.converter;\\n    v.indexTheAsset = AppLib.getAssetIndex(v.tokens, asset_);\\n    v.balanceBefore = AppLib.balance(asset_);\\n    v.indexUnderlying = underlying ? v.indexTheAsset : AppLib.getAssetIndex(v.tokens, baseState.asset);\\n  }\\n\\n  /// @notice Get the specified {amount} of the given {v.asset} on the balance\\n  /// @dev Ensures that either all debts are closed, or a non-zero amount remains on the balance or in the pool to pay off the debts\\n  /// @param amount_ Required amount of {v.asset}. Use type(uint).max to withdraw all\\n  /// @return expectedTotalAssetAmount Expected amount of {v.asset} that should be received on the balance\\n  ///                                  Expected total amount of given asset after all withdraws, conversions, swaps and repays\\n  function _makeRequestedAmount(uint amount_, WithdrawUniversalLocal memory v) internal virtual returns ( // it's virtual to simplify unit testing\\n    uint expectedTotalAssetAmount\\n  ) {\\n    uint depositorLiquidity = _depositorLiquidity();\\n\\n    // calculate how much liquidity we need to withdraw for getting at least requested amount of the {v.asset}\\n    uint[] memory quoteAmounts = _depositorQuoteExit(depositorLiquidity);\\n    uint liquidityAmountToWithdraw = ConverterStrategyBaseLib2.getLiquidityAmount(\\n      amount_,\\n      v.tokens,\\n      v.indexTheAsset,\\n      v.converter,\\n      quoteAmounts,\\n      depositorLiquidity,\\n      v.indexUnderlying\\n    );\\n\\n    if (liquidityAmountToWithdraw != 0) {\\n      uint[] memory withdrawnAmounts = _depositorExit(liquidityAmountToWithdraw, false);\\n      // the depositor is able to use less liquidity than it was asked, i.e. Balancer-depositor leaves some BPT unused\\n      // use what exactly was withdrew instead of the expectation\\n      // assume that liquidity cannot increase in _depositorExit\\n      liquidityAmountToWithdraw = depositorLiquidity - _depositorLiquidity();\\n      emit OnDepositorExit(liquidityAmountToWithdraw, withdrawnAmounts);\\n    }\\n\\n    // try to receive at least requested amount of the {v.asset} on the balance\\n    uint expectedBalance = ConverterStrategyBaseLib.makeRequestedAmount(\\n      v.tokens,\\n      v.indexTheAsset,\\n      v.converter,\\n      AppLib._getLiquidator(controller()),\\n      (amount_ == type(uint).max ? amount_ : v.balanceBefore + amount_), // current balance + the amount required to be withdrawn on balance\\n      liquidationThresholds\\n    );\\n\\n    require(expectedBalance >= v.balanceBefore, AppErrors.BALANCE_DECREASE);\\n    return expectedBalance - v.balanceBefore;\\n  }\\n\\n  //endregion -------------------------------------------------------- Get requested amount\\n\\n  //region -------------------------------------------------------- Withdraw from the pool\\n\\n  function _beforeWithdraw(uint /*amount*/) internal virtual {\\n    // do nothing\\n  }\\n\\n  /// @notice Withdraw given amount from the pool.\\n  /// @param amount Amount to be withdrawn in terms of the asset in addition to the exist balance.\\n  /// @return expectedWithdrewUSD The value that we should receive after withdrawing (in USD, decimals of the {asset})\\n  /// @return assetPrice Price of the {asset} from the price oracle\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _withdrawFromPool(uint amount) override internal virtual returns (\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    uint strategyLoss\\n  ) {\\n    // calculate profit/loss because of price changes, try to compensate the loss from the insurance\\n    (uint investedAssetsNewPrices, uint earnedByPrices) = _fixPriceChanges(true);\\n    (expectedWithdrewUSD, assetPrice, strategyLoss,) = _withdrawUniversal(amount, earnedByPrices, investedAssetsNewPrices);\\n  }\\n\\n  /// @notice Withdraw all from the pool.\\n  /// @return expectedWithdrewUSD The value that we should receive after withdrawing\\n  /// @return assetPrice Price of the {asset} taken from the price oracle\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _withdrawAllFromPool() override internal virtual returns (\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    uint strategyLoss\\n  ) {\\n    return _withdrawFromPool(type(uint).max);\\n  }\\n\\n  /// @dev The function is virtual to simplify unit testing\\n  /// @param amount_ Amount to be trying to withdrawn. Max uint means attempt to withdraw all possible invested assets.\\n  /// @param earnedByPrices_ Additional amount that should be withdrawn and send to the insurance\\n  /// @param investedAssets_ Value of invested assets recalculated using current prices\\n  /// @return expectedWithdrewUSD The value that we should receive after withdrawing in terms of USD value of each asset in the pool\\n  /// @return assetPrice Price of the {asset} taken from the price oracle\\n  /// @return strategyLoss Loss before withdrawing: [new-investedAssets - old-investedAssets]\\n  /// @return amountSentToInsurance Actual amount of underlying sent to the insurance\\n  function _withdrawUniversal(uint amount_, uint earnedByPrices_, uint investedAssets_) virtual internal returns (\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    uint strategyLoss,\\n    uint amountSentToInsurance\\n  ) {\\n    // amount to withdraw; we add a little gap to avoid situation \\\"opened debts, no liquidity to pay\\\"\\n    uint amount = amount_ == type(uint).max\\n      ? amount_\\n      : (amount_ + earnedByPrices_) * (DENOMINATOR + GAP_WITHDRAW) / DENOMINATOR;\\n    _beforeWithdraw(amount);\\n\\n    if (amount != 0 && investedAssets_ != 0) {\\n      WithdrawUniversalLocal memory v;\\n      _initWithdrawUniversalLocal(baseState.asset, v, true);\\n\\n      // get at least requested amount of the underlying on the balance\\n      assetPrice = ConverterStrategyBaseLib2.getAssetPriceFromConverter(v.converter, v.theAsset);\\n      expectedWithdrewUSD = AppLib.sub0(_makeRequestedAmount(amount, v), earnedByPrices_) * assetPrice / 1e18;\\n\\n      (amountSentToInsurance, strategyLoss) = ConverterStrategyBaseLib2.calculateIncomeAfterWithdraw(\\n        baseState.splitter,\\n        v.theAsset,\\n        investedAssets_,\\n        v.balanceBefore,\\n        earnedByPrices_,\\n        _updateInvestedAssets()\\n      );\\n    }\\n\\n    return (\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      strategyLoss,\\n      amountSentToInsurance\\n    );\\n  }\\n\\n  /// @notice Withdraw all amounts from the pool using minimum actions (it skips claiming rewards, fees and so on)\\n  function _emergencyExitFromPool() override internal virtual {\\n    uint[] memory withdrawnAmounts = _depositorEmergencyExit();\\n    emit OnDepositorEmergencyExit(withdrawnAmounts);\\n    // we don't convert amounts to main asset to avoid any excess actions\\n    // update of invested assets is necessary in any case\\n    _updateInvestedAssets();\\n  }\\n  //endregion -------------------------------------------------------- Withdraw from the pool\\n\\n  //region -------------------------------------------------------- Claim rewards\\n\\n  /// @notice Claim all possible rewards.\\n  function _claim() override internal virtual returns (address[] memory rewardTokensOut, uint[] memory amountsOut) {\\n    // get rewards from the Depositor\\n    (address[] memory rewardTokens, uint[] memory rewardAmounts, uint[] memory balancesBefore) = _depositorClaimRewards();\\n\\n    (rewardTokensOut, amountsOut) = ConverterStrategyBaseLib2.claimConverterRewards(\\n      _csbs.converter,\\n      _depositorPoolAssets(),\\n      rewardTokens,\\n      rewardAmounts,\\n      balancesBefore\\n    );\\n  }\\n\\n  /// @dev Call recycle process and send tokens to forwarder.\\n  ///      Need to be separated from the claim process - the claim can be called by operator for other purposes.\\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\\n  function _rewardsLiquidation(address[] memory rewardTokens_, uint[] memory rewardAmounts_) internal returns (\\n    uint paidDebtToInsurance\\n  ) {\\n    if (rewardTokens_.length != 0) {\\n      paidDebtToInsurance = ConverterStrategyBaseLib.recycle(\\n        baseState,\\n        _csbs,\\n        _depositorPoolAssets(),\\n        controller(),\\n        liquidationThresholds,\\n        rewardTokens_,\\n        rewardAmounts_\\n      );\\n    }\\n    return paidDebtToInsurance;\\n  }\\n  //endregion -------------------------------------------------------- Claim rewards\\n\\n  //region -------------------------------------------------------- Hardwork\\n\\n  /// @notice A virtual handler to make any action before hardwork\\n  /// @return True if the hardwork should be skipped\\n  function _preHardWork(bool reInvest) internal virtual returns (bool) {\\n    reInvest; // hide warning\\n    return false;\\n  }\\n\\n  /// @notice A virtual handler to make any action after hardwork\\n  function _postHardWork() internal virtual {}\\n\\n  /// @notice Is strategy ready to hard work\\n  function isReadyToHardWork() override external virtual view returns (bool) {\\n    // check claimable amounts and compare with thresholds\\n    return true;\\n  }\\n\\n  /// @notice Do hard work with reinvesting\\n  /// @return earned Earned amount in terms of {asset}\\n  /// @return lost Lost amount in terms of {asset}\\n  function doHardWork() override public returns (uint earned, uint lost) {\\n    require(msg.sender == baseState.splitter, StrategyLib2.DENIED);\\n    return _doHardWork(true);\\n  }\\n\\n  /// @notice Claim rewards, do _processClaims() after claiming, calculate earned and lost amounts\\n  /// @return earned The amount of earned rewards.\\n  /// @return lost The amount of lost rewards.\\n  /// @return assetBalanceAfterClaim The asset balance after claiming rewards.\\n  /// @return paidDebtToInsurance A part of {earned} spent on debt-to-insurance payment\\n  function _handleRewards() internal virtual returns (\\n    uint earned,\\n    uint lost,\\n    uint assetBalanceAfterClaim,\\n    uint paidDebtToInsurance\\n  );\\n\\n  /// @param reInvest Deposit to pool all available amount if it's greater than the threshold\\n  /// @return earned Earned amount in terms of {asset}\\n  /// @return lost Lost amount in terms of {asset}\\n  function _doHardWork(bool reInvest) internal returns (uint earned, uint lost) {\\n    // ATTENTION! splitter will not cover the loss if it is lower than profit\\n    (uint investedAssetsNewPrices, uint earnedByPrices) = _fixPriceChanges(true);\\n    if (!_preHardWork(reInvest)) {\\n      // claim rewards and get current asset balance\\n      (uint earned1, uint lost1, uint assetBalance, uint paidDebtToInsurance) = _handleRewards();\\n\\n      // re-invest income\\n      (uint investedAssetsAfterHandleRewards,,) = _calcInvestedAssets();\\n      (, uint amountSentToInsurance) = _depositToPoolUniversal(\\n        reInvest\\n        && investedAssetsAfterHandleRewards != 0\\n        && assetBalance > _csbs.reinvestThresholdPercent * investedAssetsAfterHandleRewards / DENOMINATOR\\n          ? assetBalance\\n          : 0,\\n        earnedByPrices,\\n        investedAssetsAfterHandleRewards\\n      );\\n\\n      (earned, lost) = ConverterStrategyBaseLib2._registerIncome(\\n        investedAssetsNewPrices + assetBalance, // assets in use before handling rewards\\n        _csbs.investedAssets + AppLib.balance(baseState.asset) + amountSentToInsurance // assets in use after deposit\\n      );\\n\\n      _postHardWork();\\n      emit OnHardWorkEarnedLost(investedAssetsNewPrices, earnedByPrices, earned1, lost1, earned, lost, paidDebtToInsurance);\\n\\n      earned = AppLib.sub0(earned + earned1, paidDebtToInsurance);\\n      lost += lost1;\\n    }\\n\\n    // register amount paid for the debts and amount received for the provided collaterals\\n    ConverterStrategyBaseLib2.registerBorrowResults(_csbs.converter, baseState.asset);\\n\\n    return (earned, lost);\\n  }\\n  //endregion -------------------------------------------------------- Hardwork\\n\\n  //region -------------------------------------------------------- InvestedAssets Calculations\\n\\n  /// @notice Updates cached _investedAssets to actual value\\n  /// @dev Should be called after deposit / withdraw / claim; virtual - for ut\\n  function _updateInvestedAssets() internal returns (uint investedAssetsOut) {\\n    (investedAssetsOut,,) = _calcInvestedAssets();\\n    _csbs.investedAssets = investedAssetsOut;\\n  }\\n\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\n  /// @return amountOut Invested asset amount under control (in terms of {asset})\\n  /// @return prices Asset prices in USD, decimals 18\\n  /// @return decs 10**decimals\\n  function _calcInvestedAssets() internal returns (uint amountOut, uint[] memory prices, uint[] memory decs) {\\n    (address[] memory tokens, uint indexAsset) = _getTokens(baseState.asset);\\n    return ConverterStrategyBaseLib2.calcInvestedAssets(\\n      tokens,\\n      _getDepositorQuoteExitAmountsOut(tokens),\\n      indexAsset,\\n      _csbs.converter,\\n      true\\n    );\\n  }\\n\\n  function calcInvestedAssets() external returns (uint investedAssetsOut) {\\n    StrategyLib2.onlyOperators(controller());\\n    (investedAssetsOut,,) = _calcInvestedAssets();\\n  }\\n\\n  /// @notice Calculate amount of deposited tokens that can be received from the pool after withdrawing all liquidity.\\n  function _getDepositorQuoteExitAmountsOut(address[] memory tokens) internal returns (\\n    uint[] memory depositorQuoteExitAmountsOut\\n  ) {\\n    uint liquidity = _depositorLiquidity();\\n    return liquidity == 0\\n      ? new uint[](tokens.length)\\n      : _depositorQuoteExit(liquidity);\\n  }\\n\\n  /// @notice Calculate profit/loss happened because of price changing. Try to cover the loss, send the profit to the insurance\\n  /// @param updateInvestedAssetsAmount_ If false - just return current value of invested assets\\n  /// @return investedAssetsOut Updated value of {_investedAssets}\\n  /// @return earnedOut Profit that was received because of price changes. It should be sent back to insurance.\\n  /// It's too dangerous to try to get this amount here because of the problem \\\"borrow-repay is not allowed in a single block\\\"\\n  /// So, we need to handle it in the caller code.\\n  function _fixPriceChanges(bool updateInvestedAssetsAmount_) internal returns (uint investedAssetsOut, uint earnedOut) {\\n    if (updateInvestedAssetsAmount_) {\\n      (address[] memory tokens, uint indexAsset) = _getTokens(baseState.asset);\\n      (investedAssetsOut, earnedOut) = ConverterStrategyBaseLib2.fixPriceChanges(\\n        _csbs,\\n        baseState,\\n        _getDepositorQuoteExitAmountsOut(tokens),\\n        tokens,\\n        indexAsset\\n      );\\n    } else {\\n      (investedAssetsOut, earnedOut) = (_csbs.investedAssets, 0);\\n    }\\n  }\\n  //endregion -------------------------------------------------------- InvestedAssets Calculations\\n\\n  //region -------------------------------------------------------- ITetuConverterCallback\\n\\n  /// @notice Converters asks to send some amount back.\\n  ///         The results depend on whether the required amount is on the balance:\\n  ///         1. The {amount_} exists on the balance: send the amount to TetuConverter, return {amount_}\\n  ///         2. The {amount_} doesn't exist on the balance. Try to receive the {amount_}.\\n  ///         2.1. if the required amount is received: return {amount_}\\n  ///         2.2. if less amount X (X < {amount_}) is received return X - gap\\n  ///         In the case 2 no amount is send to TetuConverter.\\n  ///         Converter should make second call of requirePayAmountBack({amountOut}) to receive the assets.\\n  /// @param theAsset_ Required asset (either collateral or borrow), it can be NOT underlying\\n  /// @param amount_ Required amount of {theAsset_}\\n  /// @return amountOut Amount that was send OR can be claimed on the next call.\\n  ///                   The caller should control own balance to know if the amount was actually send\\n  ///                   (because we need compatibility with exist not-NSR strategies)\\n  function requirePayAmountBack(address theAsset_, uint amount_) external override returns (uint amountOut) {\\n    WithdrawUniversalLocal memory v;\\n    _initWithdrawUniversalLocal(theAsset_, v, false);\\n    require(msg.sender == address(v.converter), StrategyLib.DENIED);\\n    require(amount_ != 0, AppErrors.ZERO_VALUE);\\n    require(v.indexTheAsset != type(uint).max, AppErrors.WRONG_ASSET);\\n\\n    (uint _investedAssets, uint earnedByPrices) = _fixPriceChanges(true);\\n    v.balanceBefore = ConverterStrategyBaseLib2.sendProfitGetAssetBalance(theAsset_, v.balanceBefore, _investedAssets, earnedByPrices, baseState);\\n\\n    // amount to withdraw; we add a little gap to avoid situation \\\"opened debts, no liquidity to pay\\\"\\n    // At first we add only 1 gap.\\n    // This is min allowed amount that we should have on balance to be able to send {amount_} to the converter\\n    uint amountPlusGap = amount_ * (DENOMINATOR + GAP_WITHDRAW) / DENOMINATOR;\\n\\n    if (v.balanceBefore >= amountPlusGap) {\\n      // the requested amount is available, send it to the converter\\n      IERC20(theAsset_).safeTransfer(address(v.converter), amount_);\\n      amountOut = amount_;\\n    } else {\\n      // the requested amount is not available\\n      // so, we cannot send anything to converter in this call\\n      // try to receive requested amount to balance\\n      // we should receive amount with extra gap, where gap is in the range (GAP_WITHDRAW, 2 * GAP_WITHDRAW]\\n      // The caller will be able to claim requested amount (w/o extra gap) in the next call\\n      if (_investedAssets == 0) {\\n        // there are no invested amounts, we can use amount on balance only\\n        // but we cannot send all amount, we should keep not zero amount on balance\\n        // to avoid situation \\\"opened debts, no liquidity to pay\\\"\\n        // as soon as the converter asks for payment, we still have an opened debt..\\n        amountOut = v.balanceBefore * DENOMINATOR / (DENOMINATOR + GAP_WITHDRAW);\\n      } else {\\n        uint amountTwoGaps = amount_ * (DENOMINATOR + 2 * GAP_WITHDRAW) / DENOMINATOR;\\n        // get at least requested amount of {theAsset_} on the balance\\n        _makeRequestedAmount(amountTwoGaps - v.balanceBefore, v);\\n\\n        uint balanceAfter = AppLib.balance(theAsset_);\\n        amountOut = balanceAfter > amountPlusGap\\n          ? amount_\\n          : balanceAfter * DENOMINATOR / (DENOMINATOR + GAP_WITHDRAW);\\n      }\\n    }\\n\\n    // update invested assets anyway, even if we suppose it will be called in other places\\n    _updateInvestedAssets();\\n\\n    return amountOut;\\n  }\\n\\n  /// @notice TetuConverter calls this function when it sends any amount to user's balance\\n  /// @param assets_ Any asset sent to the balance, i.e. inside repayTheBorrow\\n  /// @param amounts_ Amount of {asset_} that has been sent to the user's balance\\n  function onTransferAmounts(address[] memory assets_, uint[] memory amounts_) external override {\\n    require(msg.sender == address(_csbs.converter), StrategyLib2.DENIED);\\n    require(assets_.length == amounts_.length, AppErrors.INCORRECT_LENGTHS);\\n\\n    // TetuConverter is able two call this function in two cases:\\n    // 1) rebalancing (the health factor of some borrow is too low)\\n    // 2) forcible closing of the borrow\\n    // In both cases we update invested assets value here\\n    // and avoid fixing any related losses in hardwork\\n    _updateInvestedAssets();\\n  }\\n  //endregion -------------------------------------------------------- ITetuConverterCallback\\n\\n  //region -------------------------------------------------------- Others\\n\\n  /// @notice Unlimited capacity by default\\n  function capacity() external virtual view returns (uint) {\\n    return 2 ** 255;\\n    // almost same as type(uint).max but more gas efficient\\n  }\\n\\n  /// @return tokens Result of {_depositorPoolAssets}\\n  /// @return indexAsset Index of the underlying in {tokens}\\n  function _getTokens(address asset_) internal view returns (address[] memory tokens, uint indexAsset) {\\n    tokens = _depositorPoolAssets();\\n    indexAsset = AppLib.getAssetIndex(tokens, asset_);\\n    require(indexAsset != type(uint).max, StrategyLib2.WRONG_VALUE);\\n  }\\n  //endregion -------------------------------------------------------- Others\\n\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to add new\\n  /// variables without shifting down storage in the inheritance chain.\\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint[50 - 4] private __gap; // 50 - count of variables\\n\\n}\\n\",\"keccak256\":\"0xad016fb096e59dcf0f238ebb74fc338b28ae2accb7977766b5ac772284290891\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/ConverterStrategyBaseLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"../libs/AppErrors.sol\\\";\\nimport \\\"../libs/AppLib.sol\\\";\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\nimport \\\"../libs/IterationPlanLib.sol\\\";\\nimport \\\"../interfaces/IConverterStrategyBase.sol\\\";\\n\\nlibrary ConverterStrategyBaseLib {\\n  using SafeERC20 for IERC20;\\n\\n//region--------------------------------------------------- Data types\\n\\n  /// @notice Local vars for {_recycle}, workaround for stack too deep\\n  struct RecycleLocalParams {\\n    /// @notice Compound amount + Performance amount\\n    uint amountCP;\\n    /// @notice Amount to compound\\n    uint amountC;\\n    /// @notice Amount to send to performance and insurance\\n    uint amountP;\\n    /// @notice Amount to forwarder + amount to compound\\n    uint amountFC;\\n    address rewardToken;\\n    uint len;\\n    uint receivedAmountOut;\\n  }\\n\\n  struct OpenPositionLocal {\\n    uint entryKind;\\n    address[] converters;\\n    uint[] collateralsRequired;\\n    uint[] amountsToBorrow;\\n    uint collateral;\\n    uint amountToBorrow;\\n  }\\n\\n  struct OpenPositionEntryKind1Local {\\n    address[] converters;\\n    uint[] collateralsRequired;\\n    uint[] amountsToBorrow;\\n    uint collateral;\\n    uint amountToBorrow;\\n    uint c1;\\n    uint c3;\\n    uint alpha;\\n  }\\n\\n  struct SwapToGetAmountLocal {\\n    uint len;\\n    uint[] prices;\\n    uint[] decs;\\n  }\\n\\n  struct ConvertAfterWithdrawLocal {\\n    address asset;\\n    uint spent;\\n    uint received;\\n    uint balance;\\n    uint balanceBefore;\\n    uint len;\\n  }\\n\\n  struct SwapToGivenAmountInputParams {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n    uint targetAmount;\\n    address[] tokens;\\n    uint[] amounts;\\n    /// @notice liquidationThresholds for the {tokens}\\n    uint[] liquidationThresholds;\\n    uint indexTargetAsset;\\n    address underlying;\\n    /// @notice Allow to swap more then required (i.e. 1_000 => +1%)\\n    ///         to avoid additional swap if the swap return amount a bit less than we expected\\n    uint overswap;\\n  }\\n\\n  struct SwapToGivenAmountLocal {\\n    uint len;\\n    uint[] availableAmounts;\\n    uint i;\\n  }\\n\\n  struct CloseDebtsForRequiredAmountLocal {\\n    address asset;\\n    uint balanceAsset;\\n    uint balanceToken;\\n\\n    uint newBalanceAsset;\\n    uint newBalanceToken;\\n\\n    uint idxToSwap1;\\n    uint amountToSwap;\\n    uint idxToRepay1;\\n\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\n    uint[] prices;\\n    /// @notice 10**decimal for the assets\\n    uint[] decs;\\n\\n    /// @notice Amounts that will be received on balance before execution of the plan.\\n    uint[] balanceAdditions;\\n\\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n    ///         The leftovers should be swapped to get following result proportions of the assets:\\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\n    uint propNotUnderlying18;\\n\\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\\n    bool usePoolProportions;\\n\\n    bool exitLoop;\\n  }\\n\\n  struct DataSetLocal {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n    /// @notice Tokens received from {_depositorPoolAssets}\\n    address[] tokens;\\n    /// @notice Index of the main asset in {tokens}\\n    uint indexAsset;\\n    /// @notice Length of {tokens}\\n    uint len;\\n  }\\n\\n  struct RecycleLocal {\\n    address asset;\\n    uint compoundRatio;\\n    uint performanceFee;\\n    /// @notice // total amount for the performance receiver and insurance\\n    uint amountPerf;\\n    uint toPerf;\\n    uint toInsurance;\\n    uint[] amountsToForward;\\n    uint[] thresholds;\\n    int debtToInsuranceCurrent;\\n    int debtToInsuranceUpdated;\\n    address splitter;\\n  }\\n\\n  /// @notice Input params for _recycle\\n  struct RecycleParams {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n    address splitter;\\n\\n    /// @notice Underlying asset\\n    address asset;\\n    /// @notice Compound ration in the range [0...COMPOUND_DENOMINATOR]\\n    uint compoundRatio;\\n    /// @notice tokens received from {_depositorPoolAssets}\\n    address[] tokens;\\n    /// @notice Liquidation thresholds for rewards tokens\\n    uint[] thresholds;\\n    /// @notice Full list of reward tokens received from tetuConverter and depositor\\n    address[] rewardTokens;\\n    /// @notice Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\n    uint[] rewardAmounts;\\n    /// @notice Performance fee in the range [0...FEE_DENOMINATOR]\\n    uint performanceFee;\\n    /// @notice Current debt to the insurance [in underlying]\\n    int debtToInsurance;\\n    /// @notice Liquidation threshold for the {asset}\\n    uint assetThreshold;\\n  }\\n//endregion--------------------------------------------------- Data types\\n\\n//region--------------------------------------------------- Constants\\n\\n  /// @notice approx one month for average block time 2 sec\\n  uint internal constant _LOAN_PERIOD_IN_BLOCKS = 30 days / 2;\\n  uint internal constant _REWARD_LIQUIDATION_SLIPPAGE = 5_000; // 5%\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\n  uint internal constant PRICE_IMPACT_TOLERANCE = 300;\\n  /// @notice borrow/collateral amount cannot be less than given number of tokens\\n  uint internal constant DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD = 10;\\n  /// @notice Allow to swap more then required (i.e. 1_000 => +1%) inside {swapToGivenAmount}\\n  ///         to avoid additional swap if the swap will return amount a bit less than we expected\\n  uint internal constant OVERSWAP = PRICE_IMPACT_TOLERANCE + _ASSET_LIQUIDATION_SLIPPAGE;\\n  /// @notice During SWAP-REPAY cycle we can receive requested amount after SWAP, so, following REPAY will be skipped.\\n  ///         But we should prevent situation \\\"zero balance, not zero debts\\\".\\n  ///         So, it worth to request amount higher (on the given gap) than it's really requested.\\n  uint internal constant REQUESTED_BALANCE_GAP = 5_000; // 5%\\n//endregion--------------------------------------------------- Constants\\n\\n//region--------------------------------------------------- Events\\n  /// @notice A borrow was made\\n  event OpenPosition(\\n    address converter,\\n    address collateralAsset,\\n    uint collateralAmount,\\n    address borrowAsset,\\n    uint borrowedAmount,\\n    address recepient\\n  );\\n\\n  /// @notice Some borrow(s) was/were repaid\\n  event ClosePosition(\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountRepay,\\n    address recepient,\\n    uint returnedAssetAmountOut,\\n    uint returnedBorrowAmountOut\\n  );\\n\\n  /// @notice A liquidation was made\\n  event Liquidation(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amountIn,\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  );\\n\\n  event ReturnAssetToConverter(address asset, uint amount);\\n\\n  /// @notice Recycle was made\\n  /// @param rewardTokens Full list of reward tokens received from tetuConverter and depositor\\n  /// @param amountsToForward Amounts to be sent to forwarder\\n  event Recycle(\\n    address[] rewardTokens,\\n    uint[] amountsToForward,\\n    uint toPerf,\\n    uint toInsurance\\n  );\\n\\n  /// @notice Debt to insurance was paid by rewards\\n  /// @param debtToInsuranceBefore Initial amount of debts to the insurance, in underlying\\n  /// @param debtToInsuranceBefore Final amount of debts to the insurance, in underlying\\n  event OnPayDebtToInsurance(\\n    int debtToInsuranceBefore,\\n    int debtToInsuraneAfter\\n  );\\n\\n  /// @notice Debt to insurance was paid by a reward token\\n  /// @param debtToCover Initial amount of debt that should be covered, in underlying\\n  /// @param debtLeftovers Final amount of debt that should be covered, in underlying\\n  /// It can be negative if we paid more than required\\n  event OnCoverDebtToInsurance(\\n    address rewardToken,\\n    uint rewardAmount,\\n    uint debtToCover,\\n    int debtLeftovers\\n  );\\n//endregion---------------------------------------------------  Events\\n\\n//region--------------------------------------------------- Borrow and close positions\\n\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\n  ///         Max possible collateral should be approved before calling of this function.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\n  function openPosition(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint thresholdAmountIn_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    return _openPosition(tetuConverter_, entryData_, collateralAsset_, borrowAsset_, amountIn_, thresholdAmountIn_);\\n  }\\n\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\n  ///         Max possible collateral should be approved before calling of this function.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\n  /// @param thresholdAmountIn_ Min value of amountIn allowed for the second and subsequent conversions.\\n  ///        0 - use default min value\\n  ///        If amountIn becomes too low, no additional borrows are possible, so\\n  ///        the rest amountIn is just added to collateral/borrow amount of previous conversion.\\n  function _openPosition(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint thresholdAmountIn_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    if (thresholdAmountIn_ == 0) {\\n      // zero threshold is not allowed because round-issues are possible, see openPosition.dust test\\n      // we assume here, that it's useless to borrow amount using collateral/borrow amount\\n      // less than given number of tokens (event for BTC)\\n      thresholdAmountIn_ = DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD;\\n    }\\n    if (amountIn_ <= thresholdAmountIn_) {\\n      return (0, 0);\\n    }\\n\\n    OpenPositionLocal memory vars;\\n    // we assume here, that max possible collateral amount is already approved (as it's required by TetuConverter)\\n    vars.entryKind = ConverterEntryKinds.getEntryKind(entryData_);\\n    if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\\n      return openPositionEntryKind1(\\n        tetuConverter_,\\n        entryData_,\\n        collateralAsset_,\\n        borrowAsset_,\\n        amountIn_,\\n        thresholdAmountIn_\\n      );\\n    } else {\\n      (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\n        entryData_,\\n        collateralAsset_,\\n        amountIn_,\\n        borrowAsset_,\\n        _LOAN_PERIOD_IN_BLOCKS\\n      );\\n\\n      uint len = vars.converters.length;\\n      if (len > 0) {\\n        for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n          // we need to approve collateralAmount before the borrow-call but it's already approved, see above comments\\n          vars.collateral;\\n          vars.amountToBorrow;\\n          if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\\n            // we have exact amount of total collateral amount\\n            // Case ENTRY_KIND_EXACT_PROPORTION_1 is here too because we consider first platform only\\n            vars.collateral = amountIn_ < vars.collateralsRequired[i]\\n              ? amountIn_\\n              : vars.collateralsRequired[i];\\n            vars.amountToBorrow = amountIn_ < vars.collateralsRequired[i]\\n              ? vars.amountsToBorrow[i] * amountIn_ / vars.collateralsRequired[i]\\n              : vars.amountsToBorrow[i];\\n            amountIn_ -= vars.collateral;\\n          } else {\\n            // assume here that entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2\\n            // we have exact amount of total amount-to-borrow\\n            vars.amountToBorrow = amountIn_ < vars.amountsToBorrow[i]\\n              ? amountIn_\\n              : vars.amountsToBorrow[i];\\n            vars.collateral = amountIn_ < vars.amountsToBorrow[i]\\n              ? vars.collateralsRequired[i] * amountIn_ / vars.amountsToBorrow[i]\\n              : vars.collateralsRequired[i];\\n            amountIn_ -= vars.amountToBorrow;\\n          }\\n\\n          if (amountIn_ < thresholdAmountIn_ && amountIn_ != 0) {\\n            // dust amount is left, just leave it unused\\n            // we cannot add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\n            amountIn_ = 0;\\n          }\\n\\n          if (vars.amountToBorrow != 0) {\\n            borrowedAmountOut += tetuConverter_.borrow(\\n              vars.converters[i],\\n              collateralAsset_,\\n              vars.collateral,\\n              borrowAsset_,\\n              vars.amountToBorrow,\\n              address(this)\\n            );\\n            collateralAmountOut += vars.collateral;\\n            emit OpenPosition(\\n              vars.converters[i],\\n              collateralAsset_,\\n              vars.collateral,\\n              borrowAsset_,\\n              vars.amountToBorrow,\\n              address(this)\\n            );\\n          }\\n\\n          if (amountIn_ == 0) break;\\n        }\\n      }\\n\\n      return (collateralAmountOut, borrowedAmountOut);\\n    }\\n  }\\n\\n  /// @notice Open position using entry kind 1 - split provided amount on two parts according provided proportions\\n  /// @param amountIn_ Amount of collateral to be divided on parts. We assume {amountIn_} > 0\\n  /// @param collateralThreshold_ Min allowed collateral amount to be used for new borrow, > 0\\n  /// @return collateralAmountOut Total collateral used to borrow {borrowedAmountOut}\\n  /// @return borrowedAmountOut Total borrowed amount\\n  function openPositionEntryKind1(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint collateralThreshold_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    OpenPositionEntryKind1Local memory vars;\\n    (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\n      entryData_,\\n      collateralAsset_,\\n      amountIn_,\\n      borrowAsset_,\\n      _LOAN_PERIOD_IN_BLOCKS\\n    );\\n\\n    uint len = vars.converters.length;\\n    if (len > 0) {\\n      // we should split amountIn on two amounts with proportions x:y\\n      (, uint x, uint y) = abi.decode(entryData_, (uint, uint, uint));\\n      // calculate prices conversion ratio using price oracle, decimals 18\\n      // i.e. alpha = 1e18 * 75e6 usdc / 25e18 matic = 3e6 usdc/matic\\n      vars.alpha = _getCollateralToBorrowRatio(tetuConverter_, collateralAsset_, borrowAsset_);\\n\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        // the lending platform allows to convert {collateralsRequired[i]} to {amountsToBorrow[i]}\\n        // and give us required proportions in result\\n        // C = C1 + C2, C2 => B2, B2 * alpha = C3, C1/C3 must be equal to x/y\\n        // C1 is collateral amount left untouched (x)\\n        // C2 is collateral amount converted to B2 (y)\\n        // but if lending platform doesn't have enough liquidity\\n        // it reduces {collateralsRequired[i]} and {amountsToBorrow[i]} proportionally to fit the limits\\n        // as result, remaining C1 will be too big after conversion and we need to make another borrow\\n        vars.c3 = vars.alpha * vars.amountsToBorrow[i] / 1e18;\\n        vars.c1 = x * vars.c3 / y;\\n\\n        // we doesn't calculate an intermediate ratio cR/(cR+c1) to avoid lost of precision\\n        if ((vars.collateralsRequired[i] + vars.c1) > amountIn_) {\\n          vars.collateral = vars.collateralsRequired[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\\n          vars.amountToBorrow = vars.amountsToBorrow[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\\n        } else {\\n          vars.collateral = vars.collateralsRequired[i];\\n          vars.amountToBorrow = vars.amountsToBorrow[i];\\n        }\\n\\n        // skip any attempts to borrow zero amount or use too little collateral\\n        if (vars.collateral < collateralThreshold_ || vars.amountToBorrow == 0) {\\n          if (vars.collateralsRequired[i] + vars.c1 + collateralThreshold_ > amountIn_) {\\n            // The lending platform has enough resources to make the borrow but amount of the borrow is too low\\n            // Skip the borrow, leave leftover of collateral untouched\\n            break;\\n          } else {\\n            // The lending platform doesn't have enough resources to make the borrow.\\n            // We should try to make borrow on the next platform (if any)\\n            continue;\\n          }\\n        }\\n\\n        require(\\n          tetuConverter_.borrow(\\n            vars.converters[i],\\n            collateralAsset_,\\n            vars.collateral,\\n            borrowAsset_,\\n            vars.amountToBorrow,\\n            address(this)\\n          ) == vars.amountToBorrow,\\n          StrategyLib2.WRONG_VALUE\\n        );\\n        emit OpenPosition(\\n          vars.converters[i],\\n          collateralAsset_,\\n          vars.collateral,\\n          borrowAsset_,\\n          vars.amountToBorrow,\\n          address(this)\\n        );\\n\\n        borrowedAmountOut += vars.amountToBorrow;\\n        collateralAmountOut += vars.collateral;\\n\\n        // calculate amount to be borrowed in the next converter\\n        vars.c3 = vars.alpha * vars.amountToBorrow / 1e18;\\n        vars.c1 = x * vars.c3 / y;\\n        amountIn_ = (amountIn_ > vars.c1 + vars.collateral)\\n          ? amountIn_ - (vars.c1 + vars.collateral)\\n          : 0;\\n\\n        // protection against dust amounts, see \\\"openPosition.dust\\\", just leave dust amount unused\\n        // we CAN NOT add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\n        // we assume here, that collateralThreshold_ != 0, so check amountIn_ != 0 is not required\\n        if (amountIn_ < collateralThreshold_) break;\\n      }\\n    }\\n\\n    return (collateralAmountOut, borrowedAmountOut);\\n  }\\n\\n  /// @notice Get ratio18 = collateral / borrow\\n  function _getCollateralToBorrowRatio(\\n    ITetuConverter converter_,\\n    address collateralAsset_,\\n    address borrowAsset_\\n  ) internal view returns (uint){\\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\n    uint priceCollateral = priceOracle.getAssetPrice(collateralAsset_);\\n    uint priceBorrow = priceOracle.getAssetPrice(borrowAsset_);\\n    return 1e18 * priceBorrow * 10 ** IERC20Metadata(collateralAsset_).decimals()\\n    / priceCollateral / 10 ** IERC20Metadata(borrowAsset_).decimals();\\n  }\\n\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\n  ///         It doesn't repay more than the actual amount of the debt, so it can use less amount than {amountToRepay}\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function _closePosition(\\n    ITetuConverter converter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) internal returns (\\n    uint returnedAssetAmountOut,\\n    uint repaidAmountOut\\n  ) {\\n\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // We shouldn't try to pay more than we actually need to repay\\n    // The leftover will be swapped inside TetuConverter, it's inefficient.\\n    // Let's limit amountToRepay by needToRepay-amount\\n    (uint needToRepay,) = converter_.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\n    uint amountRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\n\\n    return _closePositionExact(converter_, collateralAsset, borrowAsset, amountRepay, balanceBefore);\\n  }\\n\\n  /// @notice Close the given position, pay {amountRepay} exactly and ensure that all amount was accepted,\\n  /// @param amountRepay Amount to repay in terms of {borrowAsset}\\n  /// @param balanceBorrowAsset Current balance of the borrow asset\\n  /// @return collateralOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function _closePositionExact(\\n    ITetuConverter converter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountRepay,\\n    uint balanceBorrowAsset\\n  ) internal returns (\\n    uint collateralOut,\\n    uint repaidAmountOut\\n  ) {\\n    if (amountRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\n      // Make full/partial repayment\\n      IERC20(borrowAsset).safeTransfer(address(converter_), amountRepay);\\n\\n      uint notUsedAmount;\\n      (collateralOut, notUsedAmount,,) = converter_.repay(collateralAsset, borrowAsset, amountRepay, address(this));\\n\\n      emit ClosePosition(collateralAsset, borrowAsset, amountRepay, address(this), collateralOut, notUsedAmount);\\n      uint balanceAfter = IERC20(borrowAsset).balanceOf(address(this));\\n\\n      // we cannot use amountRepay here because AAVE pool adapter is able to send tiny amount back (debt-gap)\\n      repaidAmountOut = balanceBorrowAsset > balanceAfter\\n        ? balanceBorrowAsset - balanceAfter\\n        : 0;\\n      require(notUsedAmount == 0, StrategyLib2.WRONG_VALUE);\\n    }\\n\\n    return (collateralOut, repaidAmountOut);\\n  }\\n\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function closePosition(\\n    ITetuConverter tetuConverter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) external returns (\\n    uint returnedAssetAmountOut,\\n    uint repaidAmountOut\\n  ) {\\n    return _closePosition(tetuConverter_, collateralAsset, borrowAsset, amountToRepay);\\n  }\\n//endregion--------------------------------------------------- Borrow and close positions\\n\\n//region--------------------------------------------------- Liquidation\\n\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator\\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\n  function liquidate(\\n    ITetuConverter converter,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    uint liquidationThresholdForTokenIn_,\\n    bool skipValidation\\n  ) external returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    return _liquidate(converter, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, liquidationThresholdForTokenIn_, skipValidation);\\n  }\\n\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator (== 0 | amountIn_)\\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\n  function _liquidate(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    uint liquidationThresholdForTokenIn_,\\n    bool skipValidation\\n  ) internal returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    // we check amountIn by threshold, not amountOut\\n    // because {_closePositionsToGetAmount} is implemented in {get plan, make action}-way\\n    // {_closePositionsToGetAmount} can be used with swap by aggregators, where amountOut cannot be calculate\\n    // at the moment of plan building. So, for uniformity, only amountIn is checked everywhere\\n\\n    if (amountIn_ <= liquidationThresholdForTokenIn_) {\\n      return (0, 0);\\n    }\\n\\n    (ITetuLiquidator.PoolData[] memory route,) = liquidator_.buildRoute(tokenIn_, tokenOut_);\\n\\n    require(route.length != 0, AppErrors.NO_LIQUIDATION_ROUTE);\\n\\n    // if the expected value is higher than threshold distribute to destinations\\n    return (amountIn_, _liquidateWithRoute(converter_, route, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, skipValidation));\\n  }\\n\\n  /// @notice Make liquidation using given route and check correctness using TetuConverter's price oracle\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\n  function _liquidateWithRoute(\\n    ITetuConverter converter_,\\n    ITetuLiquidator.PoolData[] memory route,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    bool skipValidation\\n  ) internal returns (\\n    uint receivedAmountOut\\n  ) {\\n    // we need to approve each time, liquidator address can be changed in controller\\n    AppLib.approveIfNeeded(tokenIn_, amountIn_, address(liquidator_));\\n\\n    uint balanceBefore = IERC20(tokenOut_).balanceOf(address(this));\\n    liquidator_.liquidateWithRoute(route, amountIn_, slippage_);\\n    uint balanceAfter = IERC20(tokenOut_).balanceOf(address(this));\\n\\n    require(balanceAfter > balanceBefore, AppErrors.BALANCE_DECREASE);\\n    receivedAmountOut = balanceAfter - balanceBefore;\\n\\n    // Oracle in TetuConverter \\\"knows\\\" only limited number of the assets\\n    // It may not know prices for reward assets, so for rewards this validation should be skipped to avoid TC-4 error\\n    require(skipValidation || converter_.isConversionValid(tokenIn_, amountIn_, tokenOut_, receivedAmountOut, slippage_), AppErrors.PRICE_IMPACT);\\n    emit Liquidation(tokenIn_, tokenOut_, amountIn_, amountIn_, receivedAmountOut);\\n  }\\n//endregion--------------------------------------------------- Liquidation\\n\\n//region--------------------------------------------------- Recycle rewards\\n\\n  /// @notice Recycle the amounts: liquidate a part of each amount, send the other part to the forwarder.\\n  /// We have two kinds of rewards:\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\n  /// 2) any other rewards\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\n  ///   Compound-part of Rewards-2 can be liquidated\\n  ///   Compound part of Rewards-1 should be just left on the balance\\n  ///   Performance amounts should be liquidate, result underlying should be sent to performance receiver and insurance.\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\n  /// @dev {_recycle} is implemented as separate (inline) function to simplify unit testing\\n  /// @param rewardTokens_ Full list of reward tokens received from tetuConverter and depositor\\n  /// @param rewardAmounts_ Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\\n  function recycle(\\n    IStrategyV3.BaseState storage baseState,\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\n    address[] memory tokens,\\n    address controller,\\n    mapping(address => uint) storage liquidationThresholds,\\n    address[] memory rewardTokens_,\\n    uint[] memory rewardAmounts_\\n  ) external returns (uint paidDebtToInsurance) {\\n    RecycleLocal memory v;\\n    v.asset = baseState.asset;\\n    v.compoundRatio = baseState.compoundRatio;\\n    v.performanceFee = baseState.performanceFee;\\n    v.thresholds = _getLiquidationThresholds(liquidationThresholds, rewardTokens_, rewardTokens_.length);\\n    v.debtToInsuranceCurrent = csbs.debtToInsurance;\\n    v.splitter = baseState.splitter;\\n\\n    (v.amountsToForward, v.amountPerf, v.debtToInsuranceUpdated) = _recycle(RecycleParams({\\n      converter: csbs.converter,\\n      liquidator: AppLib._getLiquidator(controller),\\n      asset: v.asset,\\n      compoundRatio: v.compoundRatio,\\n      tokens: tokens,\\n      thresholds: v.thresholds,\\n      rewardTokens: rewardTokens_,\\n      rewardAmounts: rewardAmounts_,\\n      performanceFee: v.performanceFee,\\n      debtToInsurance: v.debtToInsuranceCurrent,\\n      splitter: v.splitter,\\n      assetThreshold: AppLib._getLiquidationThreshold(liquidationThresholds[v.asset])\\n    }));\\n\\n    if (v.debtToInsuranceCurrent != v.debtToInsuranceUpdated) {\\n      csbs.debtToInsurance = v.debtToInsuranceUpdated;\\n      emit OnPayDebtToInsurance(v.debtToInsuranceCurrent, v.debtToInsuranceUpdated);\\n      paidDebtToInsurance = v.debtToInsuranceCurrent - v.debtToInsuranceUpdated > 0\\n        ? uint(v.debtToInsuranceCurrent - v.debtToInsuranceUpdated)\\n        : 0;\\n    }\\n\\n    // send performance-part of the underlying to the performance receiver and insurance\\n    (v.toPerf, v.toInsurance) = _sendPerformanceFee(\\n      v.asset,\\n      v.amountPerf,\\n      v.splitter,\\n      baseState.performanceReceiver,\\n      baseState.performanceFeeRatio\\n    );\\n\\n    // override rewardTokens_, v.amountsToForward by the values actually sent to the forwarder\\n    (rewardTokens_, v.amountsToForward) = _sendTokensToForwarder(controller, v.splitter, rewardTokens_, v.amountsToForward, v.thresholds);\\n\\n    emit Recycle(rewardTokens_, v.amountsToForward, v.toPerf, v.toInsurance);\\n    return paidDebtToInsurance;\\n  }\\n\\n  /// @notice Send {amount_} of {asset_} to {receiver_} and insurance\\n  /// @param asset_ Underlying asset\\n  /// @param amount_ Amount of underlying asset to be sent to\\n  /// @param receiver_ Performance receiver\\n  /// @param ratio [0..100_000], 100_000 - send full amount to perf, 0 - send full amount to the insurance.\\n  function _sendPerformanceFee(address asset_, uint amount_, address splitter, address receiver_, uint ratio) internal returns (\\n    uint toPerf,\\n    uint toInsurance\\n  ) {\\n    // read inside lib for reduce contract space in the main contract\\n    address insurance = address(ITetuVaultV2(ISplitter(splitter).vault()).insurance());\\n\\n    toPerf = amount_ * ratio / AppLib.DENOMINATOR;\\n    toInsurance = amount_ - toPerf;\\n\\n    if (toPerf != 0) {\\n      IERC20(asset_).safeTransfer(receiver_, toPerf);\\n    }\\n    if (toInsurance != 0) {\\n      IERC20(asset_).safeTransfer(insurance, toInsurance);\\n    }\\n  }\\n\\n  /// @notice Send {amounts_} to forwarder, skip amounts < thresholds (see SCB-812)\\n  /// @return tokensOut Tokens sent to the forwarder\\n  /// @return amountsOut Amounts sent to the forwarder\\n  function _sendTokensToForwarder(\\n    address controller_,\\n    address splitter_,\\n    address[] memory tokens_,\\n    uint[] memory amounts_,\\n    uint[] memory thresholds_\\n  ) internal returns (\\n    address[] memory tokensOut,\\n    uint[] memory amountsOut\\n  ) {\\n    uint len = tokens_.length;\\n    IForwarder forwarder = IForwarder(IController(controller_).forwarder());\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (thresholds_[i] > amounts_[i]) {\\n        amounts_[i] = 0; // it will be excluded in filterZeroAmounts() below\\n      } else {\\n        AppLib.approveIfNeeded(tokens_[i], amounts_[i], address(forwarder));\\n      }\\n    }\\n\\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokens_, amounts_);\\n    if (tokensOut.length != 0) {\\n      forwarder.registerIncome(tokensOut, amountsOut, ISplitter(splitter_).vault(), true);\\n    }\\n  }\\n\\n  /// @notice Recycle the amounts: split each amount on tree parts: performance+insurance (P), forwarder (F), compound (C)\\n  ///         Liquidate P+C, send F to the forwarder.\\n  /// We have two kinds of rewards:\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\n  /// 2) any other rewards\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\n  ///   Compound-part of Rewards-2 can be liquidated\\n  ///   Compound part of Rewards-1 should be just left on the balance\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\n  ///   Performance amounts are liquidated, result amount of underlying is returned in {amountToPerformanceAndInsurance}\\n  /// @return amountsToForward Amounts of {rewardTokens} to be sent to forwarder, zero amounts are allowed here\\n  /// @return amountToPerformanceAndInsurance Amount of underlying to be sent to performance receiver and insurance\\n  /// @return debtToInsuranceOut Remain debt to the insurance [in underlying]\\n  function _recycle(RecycleParams memory p) internal returns (\\n    uint[] memory amountsToForward,\\n    uint amountToPerformanceAndInsurance,\\n    int debtToInsuranceOut\\n  ) {\\n    RecycleLocalParams memory v;\\n\\n    v.len = p.rewardTokens.length;\\n    require(v.len == p.rewardAmounts.length, AppErrors.WRONG_LENGTHS);\\n\\n    amountsToForward = new uint[](v.len);\\n\\n    // rewardAmounts => P + F + C, where P - performance + insurance, F - forwarder, C - compound\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      // if we have a debt-to-insurance we should firstly cover the debt using all available rewards\\n      // and only then we can use leftovers of the rewards for other needs\\n      if (p.debtToInsurance > int(p.assetThreshold)) {\\n        (p.rewardAmounts[i], p.debtToInsurance) = _coverDebtToInsuranceFromRewards(p, i, uint(p.debtToInsurance));\\n        if (p.rewardAmounts[i] < p.thresholds[i]) continue;\\n      }\\n\\n      v.amountFC = p.rewardAmounts[i] * (COMPOUND_DENOMINATOR - p.performanceFee) / COMPOUND_DENOMINATOR;\\n      v.amountC = v.amountFC * p.compoundRatio / COMPOUND_DENOMINATOR;\\n      v.amountP = p.rewardAmounts[i] - v.amountFC;\\n      v.rewardToken = p.rewardTokens[i];\\n      v.amountCP = v.amountC + v.amountP;\\n\\n      if (v.amountCP > 0) {\\n        if (AppLib.getAssetIndex(p.tokens, v.rewardToken) != type(uint).max) {\\n          if (v.rewardToken == p.asset) {\\n            // This is underlying, liquidation of compound part is not allowed; just keep on the balance, should be handled later\\n            amountToPerformanceAndInsurance += v.amountP;\\n          } else {\\n            // This is secondary asset, Liquidation of compound part is not allowed, we should liquidate performance part only\\n            // If the performance amount is too small, liquidation will not happen and we will just keep that dust tokens on balance forever\\n            (, v.receivedAmountOut) = _liquidate(\\n              p.converter,\\n              p.liquidator,\\n              v.rewardToken,\\n              p.asset,\\n              v.amountP,\\n              _REWARD_LIQUIDATION_SLIPPAGE,\\n              p.thresholds[i],\\n              false // use conversion validation for these rewards\\n            );\\n            amountToPerformanceAndInsurance += v.receivedAmountOut;\\n          }\\n        } else {\\n          // If amount is too small, the liquidation won't be allowed and we will just keep that dust tokens on balance forever\\n          // The asset is not in the list of depositor's assets, its amount is big enough and should be liquidated\\n          // We assume here, that {token} cannot be equal to {_asset}\\n          // because the {_asset} is always included to the list of depositor's assets\\n          (, v.receivedAmountOut) = _liquidate(\\n            p.converter,\\n            p.liquidator,\\n            v.rewardToken,\\n            p.asset,\\n            v.amountCP,\\n            _REWARD_LIQUIDATION_SLIPPAGE,\\n            p.thresholds[i],\\n            true // skip conversion validation for rewards because we can have arbitrary assets here\\n          );\\n          amountToPerformanceAndInsurance += v.receivedAmountOut * (p.rewardAmounts[i] - v.amountFC) / v.amountCP;\\n        }\\n      }\\n      amountsToForward[i] = v.amountFC - v.amountC;\\n    }\\n    return (amountsToForward, amountToPerformanceAndInsurance, p.debtToInsurance);\\n  }\\n\\n  /// @notice Try to cover {p.debtToInsurance} using available rewards of {p.rewardTokens[index]}\\n  /// @param index Index of the reward token in {p.rewardTokens}\\n  /// @param debtAmount Debt to insurance that should be covered by the reward tokens\\n  /// @return rewardsLeftovers Amount of unused reward tokens (it can be used for other needs)\\n  /// @return debtToInsuranceOut New value of the debt to the insurance\\n  function _coverDebtToInsuranceFromRewards(RecycleParams memory p, uint index, uint debtAmount) internal returns (\\n    uint rewardsLeftovers,\\n    int debtToInsuranceOut\\n  ) {\\n    uint spentAmount;\\n    uint amountToSend;\\n\\n    if (p.asset == p.rewardTokens[index]) {\\n      // assume p.debtToInsurance > 0 here\\n      spentAmount = Math.min(debtAmount, p.rewardAmounts[index]);\\n      amountToSend = spentAmount;\\n    } else {\\n      // estimate amount of underlying that we can receive for the available amount of the reward tokens\\n      uint amountAsset = p.rewardAmounts[index] > p.assetThreshold\\n        ? p.liquidator.getPrice(p.rewardTokens[index], p.asset, p.rewardAmounts[index])\\n        : 0;\\n      uint amountIn;\\n\\n      if (amountAsset > debtAmount + p.assetThreshold) {\\n        // pay a part of the rewards to cover the debt completely\\n        amountIn = p.rewardAmounts[index] * debtAmount / amountAsset;\\n      } else {\\n        // pay all available rewards to cover a part of the debt\\n        amountIn = p.rewardAmounts[index];\\n      }\\n\\n      (spentAmount, amountToSend) = _liquidate(\\n        p.converter,\\n        p.liquidator,\\n        p.rewardTokens[index],\\n        p.asset,\\n        amountIn,\\n        _REWARD_LIQUIDATION_SLIPPAGE,\\n        p.thresholds[index],\\n        true // skip conversion validation for rewards because we can have arbitrary assets here\\n      );\\n    }\\n\\n    IERC20(p.asset).safeTransfer(address(ITetuVaultV2(ISplitter(p.splitter).vault()).insurance()), amountToSend);\\n\\n    rewardsLeftovers = AppLib.sub0(p.rewardAmounts[index], spentAmount);\\n    debtToInsuranceOut = int(debtAmount) - int(amountToSend);\\n\\n    emit OnCoverDebtToInsurance(p.rewardTokens[index], spentAmount, debtAmount, debtToInsuranceOut);\\n  }\\n//endregion----------------------------------------------- Recycle rewards\\n\\n//region--------------------------------------------------- Before deposit\\n  /// @notice Default implementation of ConverterStrategyBase.beforeDeposit\\n  /// @param amount_ Amount of underlying to be deposited\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\n  /// @param weights_ Depositor pool weights\\n  /// @param totalWeight_ Sum of {weights_}\\n  function beforeDeposit(\\n    ITetuConverter converter_,\\n    uint amount_,\\n    address[] memory tokens_,\\n    uint indexAsset_,\\n    uint[] memory weights_,\\n    uint totalWeight_,\\n    mapping(address => uint) storage liquidationThresholds\\n  ) external returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    // temporary save collateral to tokensAmounts\\n    tokenAmounts = _getCollaterals(amount_, tokens_, weights_, totalWeight_, indexAsset_, AppLib._getPriceOracle(converter_));\\n\\n    // make borrow and save amounts of tokens available for deposit to tokenAmounts, zero result amounts are possible\\n    tokenAmounts = _getTokenAmounts(\\n      converter_,\\n      tokens_,\\n      indexAsset_,\\n      tokenAmounts,\\n      AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[indexAsset_]])\\n    );\\n  }\\n\\n  /// @notice For each {token_} calculate a part of {amount_} to be used as collateral according to the weights.\\n  ///         I.e. we have 300 USDC, we need to split it on 100 USDC, 100 USDT, 100 DAI\\n  ///         USDC is main asset, USDT and DAI should be borrowed. We check amounts of USDT and DAI on the balance\\n  ///         and return collaterals reduced on that amounts. For main asset, we return full amount always (100 USDC).\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\n  /// @return tokenAmountsOut Length of the array is equal to the length of {tokens_}\\n  function _getCollaterals(\\n    uint amount_,\\n    address[] memory tokens_,\\n    uint[] memory weights_,\\n    uint totalWeight_,\\n    uint indexAsset_,\\n    IPriceOracle priceOracle\\n  ) internal view returns (\\n    uint[] memory tokenAmountsOut\\n  ) {\\n    uint len = tokens_.length;\\n    tokenAmountsOut = new uint[](len);\\n\\n    // get token prices and decimals\\n    (uint[] memory prices, uint[] memory decs) = AppLib._getPricesAndDecs(priceOracle, tokens_, len);\\n\\n    // split the amount on tokens proportionally to the weights\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      uint amountAssetForToken = amount_ * weights_[i] / totalWeight_;\\n\\n      if (i == indexAsset_) {\\n        tokenAmountsOut[i] = amountAssetForToken;\\n      } else {\\n        // if we have some tokens on balance then we need to use only a part of the collateral\\n        uint tokenAmountToBeBorrowed = amountAssetForToken\\n          * prices[indexAsset_]\\n          * decs[i]\\n          / prices[i]\\n          / decs[indexAsset_];\\n\\n        uint tokenBalance = IERC20(tokens_[i]).balanceOf(address(this));\\n        if (tokenBalance < tokenAmountToBeBorrowed) {\\n          tokenAmountsOut[i] = amountAssetForToken * (tokenAmountToBeBorrowed - tokenBalance) / tokenAmountToBeBorrowed;\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Make borrow and return amounts of {tokens} available to deposit\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\n  /// @param collaterals_ Amounts of main asset that can be used as collateral to borrow {tokens_}\\n  /// @param thresholdAsset_ Value of liquidation threshold for the main (collateral) asset\\n  /// @return tokenAmountsOut Amounts of {tokens}  available to deposit\\n  function _getTokenAmounts(\\n    ITetuConverter converter_,\\n    address[] memory tokens_,\\n    uint indexAsset_,\\n    uint[] memory collaterals_,\\n    uint thresholdAsset_\\n  ) internal returns (\\n    uint[] memory tokenAmountsOut\\n  ) {\\n    // content of tokenAmounts will be modified in place\\n    uint len = tokens_.length;\\n    tokenAmountsOut = new uint[](len);\\n    address asset = tokens_[indexAsset_];\\n\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i != indexAsset_) {\\n        address token = tokens_[i];\\n        if (collaterals_[i] != 0) {\\n          AppLib.approveIfNeeded(asset, collaterals_[i], address(converter_));\\n          _openPosition(\\n            converter_,\\n            \\\"\\\", // entry kind = 0: fixed collateral amount, max possible borrow amount\\n            asset,\\n            token,\\n            collaterals_[i],\\n            thresholdAsset_\\n          );\\n\\n          // zero borrowed amount is possible here (conversion is not available)\\n          // if it's not suitable for depositor, the depositor should check zero amount in other places\\n        }\\n        tokenAmountsOut[i] = IERC20(token).balanceOf(address(this));\\n      }\\n    }\\n\\n    tokenAmountsOut[indexAsset_] = Math.min(\\n      collaterals_[indexAsset_],\\n      IERC20(asset).balanceOf(address(this))\\n    );\\n  }\\n//endregion--------------------------------------------------- Before deposit\\n\\n//region--------------------------------------------------- Make requested amount\\n\\n  /// @notice Convert {amountsToConvert_} to the given {asset}\\n  ///         Swap leftovers (if any) to the given asset.\\n  ///         If result amount is less than expected, try to close any other available debts (1 repay per block only)\\n  /// @param tokens_ Results of _depositorPoolAssets() call (list of depositor's asset in proper order)\\n  /// @param indexAsset_ Index of the given {asset} in {tokens}\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\n  ///                         Max uint means attempt to withdraw all possible amount.\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\n  function makeRequestedAmount(\\n    address[] memory tokens_,\\n    uint indexAsset_,\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    uint requestedBalance,\\n    mapping(address => uint) storage liquidationThresholds_\\n  ) external returns (uint expectedBalance) {\\n    DataSetLocal memory v = DataSetLocal({\\n      len: tokens_.length,\\n      converter: converter_,\\n      tokens: tokens_,\\n      indexAsset: indexAsset_,\\n      liquidator: liquidator_\\n    });\\n    uint[] memory _liquidationThresholds = _getLiquidationThresholds(liquidationThresholds_, v.tokens, v.len);\\n    expectedBalance = _closePositionsToGetAmount(v, _liquidationThresholds, requestedBalance);\\n  }\\n  //endregion-------------------------------------------- Make requested amount\\n\\n//region ------------------------------------------------ Close position\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\n  /// @dev We assume here that this function is called before closing any positions in the current block\\n  /// @param liquidationThresholds Min allowed amounts-out for liquidations\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\n  ///                         Max uint means attempt to withdraw all possible amount.\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\n  function closePositionsToGetAmount(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator,\\n    uint indexAsset,\\n    mapping(address => uint) storage liquidationThresholds,\\n    uint requestedBalance,\\n    address[] memory tokens\\n  ) external returns (\\n    uint expectedBalance\\n  ) {\\n    uint len = tokens.length;\\n    return _closePositionsToGetAmount(\\n      DataSetLocal({\\n        len: len,\\n        converter: converter_,\\n        tokens: tokens,\\n        indexAsset: indexAsset,\\n        liquidator: liquidator\\n      }),\\n      _getLiquidationThresholds(liquidationThresholds, tokens, len),\\n      requestedBalance\\n    );\\n  }\\n\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\n  /// @dev Implements {IterationPlanLib.PLAN_SWAP_REPAY} only\\n  ///      Note: AAVE3 allows to make two repays in a single block, see Aave3SingleBlockTest in TetuConverter\\n  ///      but it doesn't allow to make borrow and repay in a single block.\\n  /// @param liquidationThresholds_ Min allowed amounts-out for liquidations\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\n  ///                         Max uint means attempt to withdraw all possible amount.\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\n  function _closePositionsToGetAmount(\\n    DataSetLocal memory d_,\\n    uint[] memory liquidationThresholds_,\\n    uint requestedBalance\\n  ) internal returns (\\n    uint expectedBalance\\n  ) {\\n    if (requestedBalance != 0) {\\n      //let's get a bit more amount on balance to prevent situation \\\"zero balance, not-zero debts\\\"\\n      requestedBalance = applyRequestedBalanceGap(requestedBalance);\\n      CloseDebtsForRequiredAmountLocal memory v;\\n      v.asset = d_.tokens[d_.indexAsset];\\n\\n      // v.planKind = IterationPlanLib.PLAN_SWAP_REPAY; // PLAN_SWAP_REPAY == 0, so we don't need this line\\n      v.balanceAdditions = new uint[](d_.len);\\n      expectedBalance = IERC20(v.asset).balanceOf(address(this));\\n\\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(d_.converter), d_.tokens, d_.len);\\n\\n      for (uint i; i < d_.len; i = AppLib.uncheckedInc(i)) {\\n        if (i == d_.indexAsset) continue;\\n\\n        v.balanceAsset = IERC20(v.asset).balanceOf(address(this));\\n        v.balanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\\n\\n        // Make one or several iterations. Do single swap and single repaying (both are optional) on each iteration.\\n        // Calculate expectedAmount of received underlying. Swap leftovers at the end even if requestedAmount is 0 at that moment.\\n        do {\\n          // generate iteration plan: [swap], [repay]\\n          (v.idxToSwap1, v.amountToSwap, v.idxToRepay1) = IterationPlanLib.buildIterationPlan(\\n            [address(d_.converter), address(d_.liquidator)],\\n            d_.tokens,\\n            liquidationThresholds_,\\n            v.prices,\\n            v.decs,\\n            v.balanceAdditions,\\n            [0, IterationPlanLib.PLAN_SWAP_REPAY, 0, requestedBalance, d_.indexAsset, i, 0]\\n          );\\n          if (v.idxToSwap1 == 0 && v.idxToRepay1 == 0) break;\\n\\n          // make swap if necessary\\n          uint spentAmountIn;\\n          if (v.idxToSwap1 != 0) {\\n            uint indexIn = v.idxToSwap1 - 1;\\n            uint indexOut = indexIn == d_.indexAsset ? i : d_.indexAsset;\\n            (spentAmountIn,) = _liquidate(\\n              d_.converter,\\n              d_.liquidator,\\n              d_.tokens[indexIn],\\n              d_.tokens[indexOut],\\n              v.amountToSwap,\\n              _ASSET_LIQUIDATION_SLIPPAGE,\\n              liquidationThresholds_[indexIn],\\n              false\\n            );\\n\\n            if (indexIn == d_.indexAsset) {\\n              expectedBalance = AppLib.sub0(expectedBalance, spentAmountIn);\\n            } else if (indexOut == d_.indexAsset) {\\n              expectedBalance += spentAmountIn * v.prices[i] * v.decs[d_.indexAsset] / v.prices[d_.indexAsset] / v.decs[i];\\n\\n              // if we already received enough amount on balance, we can avoid additional actions\\n              // to avoid high gas consumption in the cases like SCB-787\\n              uint balanceAsset = IERC20(v.asset).balanceOf(address(this));\\n              if (balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) {\\n                v.balanceAsset = balanceAsset;\\n                break;\\n              }\\n            }\\n          }\\n\\n          // repay a debt if necessary\\n          if (v.idxToRepay1 != 0) {\\n            uint indexBorrow = v.idxToRepay1 - 1;\\n            uint indexCollateral = indexBorrow == d_.indexAsset ? i : d_.indexAsset;\\n            uint amountToRepay = IERC20(d_.tokens[indexBorrow]).balanceOf(address(this));\\n\\n            (uint expectedAmountOut, uint repaidAmountOut, uint amountSendToRepay) = _repayDebt(\\n              d_.converter,\\n              d_.tokens[indexCollateral],\\n              d_.tokens[indexBorrow],\\n              amountToRepay\\n            );\\n\\n            if (indexBorrow == d_.indexAsset) {\\n              expectedBalance = expectedBalance > amountSendToRepay\\n                ? expectedBalance - amountSendToRepay\\n                : 0;\\n            } else if (indexCollateral == d_.indexAsset) {\\n              require(expectedAmountOut >= spentAmountIn, AppErrors.BALANCE_DECREASE);\\n              if (repaidAmountOut < amountSendToRepay) {\\n                // SCB-779: expectedAmountOut was estimated for amountToRepay, but we have paid repaidAmountOut only\\n                expectedBalance += expectedAmountOut * repaidAmountOut / amountSendToRepay;\\n              } else {\\n                expectedBalance += expectedAmountOut;\\n              }\\n            }\\n          }\\n\\n          // update balances\\n          v.newBalanceAsset = IERC20(v.asset).balanceOf(address(this));\\n          v.newBalanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\\n\\n          v.exitLoop = (v.balanceAsset == v.newBalanceAsset && v.balanceToken == v.newBalanceToken);\\n          v.balanceAsset = v.newBalanceAsset;\\n          v.balanceToken = v.newBalanceToken;\\n        } while (!v.exitLoop);\\n\\n        if (v.balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) break;\\n      }\\n    }\\n\\n    return expectedBalance;\\n  }\\n//endregion ------------------------------------------------ Close position\\n\\n//region ------------------------------------------------ Repay debts\\n  /// @notice Repay {amountIn} and get collateral in return, calculate expected amount\\n  ///         Take into account possible debt-gap and the fact that the amount of debt may be less than {amountIn}\\n  /// @param amountToRepay Max available amount of borrow asset that we can repay\\n  /// @return expectedAmountOut Estimated amount of main asset that should be added to balance = collateral - {toSell}\\n  /// @return repaidAmountOut Actually paid amount\\n  /// @return amountSendToRepay Amount send to repay\\n  function _repayDebt(\\n    ITetuConverter converter,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) internal returns (\\n    uint expectedAmountOut,\\n    uint repaidAmountOut,\\n    uint amountSendToRepay\\n  ) {\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // get amount of debt with debt-gap\\n    (uint needToRepay,) = converter.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\n    amountSendToRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\n\\n    // get expected amount without debt-gap\\n    uint swappedAmountOut;\\n    (expectedAmountOut, swappedAmountOut) = converter.quoteRepay(address(this), collateralAsset, borrowAsset, amountSendToRepay);\\n\\n    if (expectedAmountOut > swappedAmountOut) {\\n      // SCB-789 Following situation is possible\\n      //    needToRepay = 100, needToRepayExact = 90 (debt gap is 10)\\n      //    1) amountRepay = 80\\n      //       expectedAmountOut is calculated for 80, no problems\\n      //    2) amountRepay = 99,\\n      //       expectedAmountOut is calculated for 90 + 9 (90 - repay, 9 - direct swap)\\n      //       expectedAmountOut must be reduced on 9 here (!)\\n      expectedAmountOut -= swappedAmountOut;\\n    }\\n\\n    // close the debt\\n    (, repaidAmountOut) = _closePositionExact(converter, collateralAsset, borrowAsset, amountSendToRepay, balanceBefore);\\n\\n    return (expectedAmountOut, repaidAmountOut, amountSendToRepay);\\n  }\\n  //endregion ------------------------------------------------ Repay debts\\n\\n//region------------------------------------------------ Other helpers\\n\\n  /// @return liquidationThresholdsOut Liquidation thresholds of the {tokens_}, result values > 0\\n  function _getLiquidationThresholds(\\n    mapping(address => uint) storage liquidationThresholds,\\n    address[] memory tokens_,\\n    uint len\\n  ) internal view returns (\\n    uint[] memory liquidationThresholdsOut\\n  ) {\\n    liquidationThresholdsOut = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      liquidationThresholdsOut[i] = AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[i]]);\\n    }\\n  }\\n\\n  function applyRequestedBalanceGap(uint amount_) internal pure returns (uint) {\\n    return amount_ == type(uint).max\\n      ? amount_\\n      : amount_ * (COMPOUND_DENOMINATOR + REQUESTED_BALANCE_GAP) / COMPOUND_DENOMINATOR;\\n  }\\n//endregion--------------------------------------------- Other helpers\\n}\\n\\n\",\"keccak256\":\"0x77509802a65fc8625f12e420c33ae8120564529396856bb5560cb380dbf06d2d\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/ConverterStrategyBaseLib2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IBookkeeper.sol\\\";\\nimport \\\"../libs/AppErrors.sol\\\";\\nimport \\\"../libs/AppLib.sol\\\";\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\nimport \\\"../interfaces/IConverterStrategyBase.sol\\\";\\n\\n/// @notice Continuation of ConverterStrategyBaseLib (workaround for size limits)\\nlibrary ConverterStrategyBaseLib2 {\\n  using SafeERC20 for IERC20;\\n\\n//region --------------------------------------- Data types\\n  struct CalcInvestedAssetsLocal {\\n    uint len;\\n    uint[] debts;\\n    address asset;\\n    address token;\\n  }\\n//endregion --------------------------------------- Data types\\n\\n//region --------------------------------------- CONSTANTS\\n  uint internal constant DENOMINATOR = 100_000;\\n\\n  /// @dev 0.5% of max loss for strategy TVL\\n  /// @notice Same value as StrategySplitterV2.HARDWORK_LOSS_TOLERANCE\\n  uint public constant HARDWORK_LOSS_TOLERANCE = 500;\\n\\n  /// @dev 0.5% of max profit for strategy TVL\\n  /// @notice Limit max amount of profit that can be send to insurance after price changing\\n  uint public constant PRICE_CHANGE_PROFIT_TOLERANCE = HARDWORK_LOSS_TOLERANCE;\\n\\n//endregion --------------------------------------- CONSTANTS\\n\\n//region----------------------------------------- EVENTS\\n  event LiquidationThresholdChanged(address token, uint amount);\\n  event ReinvestThresholdPercentChanged(uint amount);\\n  event SendToInsurance(uint sentAmount, uint unsentAmount);\\n\\n  /// @notice Increase to debts between new and previous checkpoints.\\n  /// @param tokens List of possible collateral/borrow assets. One of the is underlying.\\n  /// @param deltaGains Amounts by which the debt has reduced (supply profit) [sync with {tokens}]\\n  /// @param deltaLosses Amounts by which the debt has increased (increase of amount-to-pay) [sync with {tokens}]\\n  /// @param prices Prices of the {tokens}\\n  /// @param increaseToDebt Total amount of increasing of the debt to the insurance in underlying\\n  event OnIncreaseDebtToInsurance(\\n    address[] tokens,\\n    uint[] deltaGains,\\n    uint[] deltaLosses,\\n    uint[] prices,\\n    int increaseToDebt\\n  );\\n\\n  /// @param debtToInsuranceBefore Value of the debt to insurance before fix price change\\n  /// @param debtToInsuranceAfter New value of the debt to insurance\\n  /// @param increaseToDebt Amount on which debt to insurance was increased.\\n  /// Actual value {debtToInsuranceAfter}-{debtToInsuranceBefore} can be less than increaseToDebt\\n  /// because some amount can be left uncovered.\\n  event FixPriceChanges(\\n    uint investedAssetsBefore,\\n    uint investedAssetsOut,\\n    int debtToInsuranceBefore,\\n    int debtToInsuranceAfter,\\n    int increaseToDebt\\n  );\\n\\n  /// @param lossToCover Amount of loss that should be covered (it fits to allowed limits, no revert)\\n  /// @param debtToInsuranceInc The amount by which the debt to insurance increases\\n  /// @param amountCovered Actually covered amount of loss. If amountCovered < lossToCover => the insurance is not enough\\n  /// @param lossUncovered Amount of uncovered losses (not enough insurance)\\n  event OnCoverLoss(\\n    uint lossToCover,\\n    int debtToInsuranceInc,\\n    uint amountCovered,\\n    uint lossUncovered\\n  );\\n\\n  /// @notice Value of {debtToInsurance} was increased on {increaseToDebt} inside fix-price-change\\n  /// in the case when invested-asset amounts were increased.\\n  /// @dev See comments in {_coverLossAfterPriceChanging}: actual profit-to-cover amount can be less than {increaseToDebt}\\n  /// @param debtToInsuranceBefore Value of debtToInsurance before fix-price-change\\n  /// @param increaseToDebt Value on which {debtToInsuranceBefore} was incremented\\n  event ChangeDebtToInsuranceOnProfit(\\n    int debtToInsuranceBefore,\\n    int increaseToDebt\\n  );\\n\\n  /// @notice Amount {lossCovered}+{lossUncovered} should be covered, but it's too high and will produce revert\\n  /// on the splitter side. So, only {lossCovered} can be covered, {lossUncovered} are not covered\\n  event UncoveredLoss(uint lossCovered, uint lossUncovered, uint investedAssetsBefore, uint investedAssetsAfter);\\n\\n  /// @notice Register amounts received for supplying collaterals and amount paid for the debts\\n  /// @param gains Amount received by all pool adapters for the provided collateral, in underlying\\n  /// @param losses Amount paid by all pool adapters for the debts, in underlying\\n  event BorrowResults(uint gains, uint losses);\\n\\n  /// @notice An amount (earned - earnedByPrice) is earned on withdraw and sent to the insurance\\n  /// @dev We assume that earned > earnedByPrice, but it's better to save raw values\\n  event OnEarningOnWithdraw(uint earned, uint earnedByPrice);\\n\\n//endregion----------------------------------------- EVENTS\\n\\n//region----------------------------------------- MAIN LOGIC\\n  /// @notice Get balances of the {tokens_} except balance of the token at {indexAsset} position\\n  function getAvailableBalances(\\n    address[] memory tokens_,\\n    uint indexAsset\\n  ) external view returns (uint[] memory) {\\n    uint len = tokens_.length;\\n    uint[] memory amountsToConvert = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) continue;\\n      amountsToConvert[i] = IERC20(tokens_[i]).balanceOf(address(this));\\n    }\\n    return amountsToConvert;\\n  }\\n\\n\\n  /// @notice Calculate amount of liquidity that should be withdrawn from the pool to get {targetAmount_}\\n  ///               liquidityAmount = _depositorLiquidity() * {liquidityRatioOut} / 1e18\\n  ///         User needs to withdraw {targetAmount_} in some asset.\\n  ///         There are three kinds of available liquidity:\\n  ///         1) liquidity in the pool - {depositorLiquidity_}\\n  ///         2) Converted amounts on balance of the strategy - {baseAmounts_}\\n  ///         3) Liquidity locked in the debts.\\n  /// @param targetAmount Required amount of main asset to be withdrawn from the strategy; type(uint).max - withdraw all\\n  /// @param quoteAmounts Results of _depositorQuoteExit(depositorLiquidity)\\n  /// @return resultAmount Amount of liquidity that should be withdrawn from the pool, cannot exceed depositorLiquidity\\n  function getLiquidityAmount(\\n    uint targetAmount,\\n    address[] memory tokens,\\n    uint indexAsset,\\n    ITetuConverter converter,\\n    uint[] memory quoteAmounts,\\n    uint depositorLiquidity,\\n    uint indexUnderlying\\n  ) external view returns (\\n    uint resultAmount\\n  ) {\\n    // total amount of assetsInPool recalculated to the underlying\\n    // we need to calculate this value in the case of partial withdraw only\\n    // so we assume below that it is equal to 0 if full withdraw is required\\n    uint totalUnderlying;\\n\\n    if (targetAmount != type(uint).max) {\\n      // reduce targetAmount_ on the amounts of not-underlying assets available on the balance\\n      uint len = tokens.length;\\n      (uint[] memory prices, uint[] memory decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(converter), tokens, len);\\n\\n      // calculate total amount of assets invested to the pool\\n      for (uint i; i < tokens.length; i = AppLib.uncheckedInc(i)) {\\n        totalUnderlying += (indexAsset == i)\\n          ? quoteAmounts[i]\\n          : quoteAmounts[i] * prices[i] * decs[indexUnderlying] / prices[indexUnderlying] / decs[i];\\n      }\\n\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        // assume here that the targetAmount_ is already reduced on available balance of the target asset\\n        if (indexAsset == i) continue;\\n\\n        uint tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\n        if (tokenBalance != 0) {\\n          uint tokenBalanceInAsset = tokenBalance * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\\n\\n          targetAmount = targetAmount > tokenBalanceInAsset\\n            ? targetAmount - tokenBalanceInAsset\\n            : 0;\\n\\n          uint tokenBalanceInUnderlying = indexUnderlying == indexAsset\\n            ? tokenBalanceInAsset\\n            : tokenBalance * prices[i] * decs[indexUnderlying] / prices[indexUnderlying] / decs[i];\\n\\n          totalUnderlying = totalUnderlying > tokenBalanceInUnderlying\\n            ? totalUnderlying - tokenBalanceInUnderlying\\n            : 0;\\n        }\\n      }\\n\\n      if (indexAsset != indexUnderlying) {\\n        // convert targetAmount_ to underlying\\n        targetAmount =  targetAmount * prices[indexAsset] * decs[indexUnderlying] / prices[indexUnderlying] / decs[indexAsset];\\n      }\\n    }\\n\\n    uint liquidityRatioOut = totalUnderlying == 0\\n      ? 1e18\\n      : ((targetAmount == 0)\\n        ? 0\\n        : 1e18 * 101 * targetAmount / totalUnderlying / 100 // a part of amount that we are going to withdraw + 1% on top\\n      );\\n\\n    resultAmount = liquidityRatioOut == 0\\n      ? 0\\n      : Math.min(liquidityRatioOut * depositorLiquidity / 1e18, depositorLiquidity);\\n  }\\n\\n  /// @notice Claim rewards from tetuConverter, generate result list of all available rewards and airdrops\\n  /// @dev The post-processing is rewards conversion to the main asset\\n  /// @param tokens_ tokens received from {_depositorPoolAssets}\\n  /// @param rewardTokens_ List of rewards claimed from the internal pool\\n  /// @param rewardTokens_ Amounts of rewards claimed from the internal pool\\n  /// @param tokensOut List of available rewards - not zero amounts, reward tokens don't repeat\\n  /// @param amountsOut Amounts of available rewards\\n  function claimConverterRewards(\\n    ITetuConverter converter_,\\n    address[] memory tokens_,\\n    address[] memory rewardTokens_,\\n    uint[] memory rewardAmounts_,\\n    uint[] memory balancesBefore\\n  ) external returns (\\n    address[] memory tokensOut,\\n    uint[] memory amountsOut\\n  ) {\\n    // Rewards from TetuConverter\\n    (address[] memory tokensTC, uint[] memory amountsTC) = converter_.claimRewards(address(this));\\n\\n    // Join arrays and recycle tokens\\n    (tokensOut, amountsOut) = TokenAmountsLib.combineArrays(\\n      rewardTokens_, rewardAmounts_,\\n      tokensTC, amountsTC,\\n      // by default, depositor assets have zero amounts here\\n      tokens_, new uint[](tokens_.length)\\n    );\\n\\n    // set fresh balances for depositor tokens\\n    uint len = tokensOut.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      for (uint j; j < tokens_.length; j = AppLib.uncheckedInc(j)) {\\n        if (tokensOut[i] == tokens_[j]) {\\n          amountsOut[i] = IERC20(tokens_[j]).balanceOf(address(this)) - balancesBefore[j];\\n        }\\n      }\\n    }\\n\\n    // filter zero amounts out\\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokensOut, amountsOut);\\n  }\\n\\n  /// @notice Get price of {tokenB} in term of {tokenA} with 18 decimals\\n  function getOracleAssetsPrice(ITetuConverter converter, address tokenA, address tokenB) external view returns (\\n    uint price\\n  ) {\\n    IPriceOracle oracle = AppLib._getPriceOracle(converter);\\n    uint priceA = oracle.getAssetPrice(tokenA);\\n    uint priceB = oracle.getAssetPrice(tokenB);\\n    price = priceA > 0 ? 1e18 * priceB / priceA : type(uint).max;\\n  }\\n\\n  function getAssetPriceFromConverter(ITetuConverter converter, address token) external view returns (uint) {\\n    return AppLib._getPriceOracle(converter).getAssetPrice(token);\\n  }\\n\\n  /// @notice Try to find zero amount\\n  /// @return True if {amounts_} array contains zero amount\\n  function findZeroAmount(uint[] memory amounts_) internal pure returns (bool) {\\n    uint len = amounts_.length;\\n    for (uint i = 0; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (amounts_[i] == 0) return true;\\n    }\\n    return false;\\n  }\\n//endregion ----------------------------------------- MAIN LOGIC\\n\\n//region -------------------------------------------- Cover loss, send profit to insurance\\n  /// @notice Send given {amount} of {asset} (== underlying) to the insurance\\n  /// @param totalAssets_ Total strategy balance = balance of underlying + current invested assets amount\\n  /// @param balance Current balance of the underlying\\n  /// @return sentAmount Amount of underlying sent to the insurance\\n  /// @return unsentAmount Missed part of the {amount} that were not sent to the insurance\\n  function sendToInsurance(address asset, uint amount, address splitter, uint totalAssets_, uint balance) external returns (\\n    uint sentAmount,\\n    uint unsentAmount\\n  ) {\\n    return _sendToInsurance(asset, amount, splitter, totalAssets_, balance);\\n  }\\n\\n  function _sendToInsurance(address asset, uint amount, address splitter, uint totalAssets_, uint balance) internal returns (\\n    uint sentAmount,\\n    uint unsentAmount\\n  ) {\\n    uint amountToSend = Math.min(amount, balance);\\n    if (amountToSend != 0) {\\n      // max amount that can be send to insurance is limited by PRICE_CHANGE_PROFIT_TOLERANCE\\n\\n      // Amount limitation should be implemented in the same way as in StrategySplitterV2._coverLoss\\n      // Revert or cut amount in both cases\\n\\n      require(totalAssets_ != 0, AppErrors.ZERO_BALANCE);\\n      amountToSend = Math.min(amountToSend, PRICE_CHANGE_PROFIT_TOLERANCE * totalAssets_ / 100_000);\\n      //require(amountToSend <= PRICE_CHANGE_PROFIT_TOLERANCE * strategyBalance / 100_000, AppErrors.EARNED_AMOUNT_TOO_HIGH);\\n\\n      IERC20(asset).safeTransfer(address(ITetuVaultV2(ISplitter(splitter).vault()).insurance()), amountToSend);\\n    }\\n\\n    sentAmount = amountToSend;\\n    unsentAmount = amount > amountToSend\\n      ? amount - amountToSend\\n      : 0;\\n\\n    emit SendToInsurance(sentAmount, unsentAmount);\\n  }\\n\\n  function _registerIncome(uint assetBefore, uint assetAfter) internal pure returns (uint earned, uint lost) {\\n    if (assetAfter > assetBefore) {\\n      earned = assetAfter - assetBefore;\\n    } else {\\n      lost = assetBefore - assetAfter;\\n    }\\n    return (earned, lost);\\n  }\\n\\n  /// @notice Send ProfitToCover to insurance - code fragment of the requirePayAmountBack()\\n  ///         moved here to reduce size of requirePayAmountBack()\\n  /// @param theAsset_ The asset passed from Converter\\n  /// @param balanceTheAsset_ Current balance of {theAsset_}\\n  /// @param investedAssets_ Value of investedAssets after call fixPriceChange()\\n  /// @param earnedByPrices_ ProfitToCover received from fixPriceChange()\\n  /// @return balanceTheAssetOut Final balance of {theAsset_} (after sending profit-to-cover to the insurance)\\n  function sendProfitGetAssetBalance(\\n    address theAsset_,\\n    uint balanceTheAsset_,\\n    uint investedAssets_,\\n    uint earnedByPrices_,\\n    IStrategyV3.BaseState storage baseState_\\n  ) external returns (\\n    uint balanceTheAssetOut\\n  ) {\\n    balanceTheAssetOut = balanceTheAsset_;\\n    if (earnedByPrices_ != 0) {\\n      address underlying = baseState_.asset;\\n      uint balanceUnderlying = theAsset_ == underlying\\n        ? balanceTheAsset_\\n        : AppLib.balance(underlying);\\n\\n      _sendToInsurance(underlying, earnedByPrices_, baseState_.splitter, investedAssets_ + balanceUnderlying, balanceUnderlying);\\n\\n      if (theAsset_ == underlying) {\\n        balanceTheAssetOut = AppLib.balance(theAsset_);\\n      }\\n    }\\n  }\\n//endregion -------------------------------------------- Cover loss, send profit to insurance\\n\\n//region ---------------------------------------- Setters\\n  function checkReinvestThresholdPercentChanged(address controller, uint percent_) external {\\n    StrategyLib.onlyOperators(controller);\\n    require(percent_ <= DENOMINATOR, StrategyLib.WRONG_VALUE);\\n    emit ReinvestThresholdPercentChanged(percent_);\\n  }\\n\\n  function checkLiquidationThresholdChanged(address controller, address token, uint amount) external {\\n    StrategyLib.onlyOperators(controller);\\n    emit LiquidationThresholdChanged(token, amount);\\n  }\\n//endregion ---------------------------------------- Setters\\n\\n//region ---------------------------------------- Withdraw helpers\\n  /// @notice Get amount of assets that we expect to receive after withdrawing\\n  ///         ratio = amount-LP-tokens-to-withdraw / total-amount-LP-tokens-in-pool\\n  /// @param reserves_ Reserves of the {poolAssets_}, same order, same length (we don't check it)\\n  ///                  The order of tokens should be same as in {_depositorPoolAssets()},\\n  ///                  one of assets must be {asset_}\\n  /// @param liquidityAmount_ Amount of LP tokens that we are going to withdraw\\n  /// @param totalSupply_ Total amount of LP tokens in the depositor\\n  /// @return withdrawnAmountsOut Expected withdrawn amounts (decimals == decimals of the tokens)\\n  function getExpectedWithdrawnAmounts(\\n    uint[] memory reserves_,\\n    uint liquidityAmount_,\\n    uint totalSupply_\\n  ) internal pure returns (\\n    uint[] memory withdrawnAmountsOut\\n  ) {\\n    uint ratio = totalSupply_ == 0\\n      ? 0\\n      : (liquidityAmount_ >= totalSupply_\\n        ? 1e18\\n        : 1e18 * liquidityAmount_ / totalSupply_\\n      );\\n\\n    uint len = reserves_.length;\\n    withdrawnAmountsOut = new uint[](len);\\n\\n    if (ratio != 0) {\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        withdrawnAmountsOut[i] = reserves_[i] * ratio / 1e18;\\n      }\\n    }\\n  }\\n\\n  /// @notice Calculate expected amount of the main asset after withdrawing\\n  /// @param withdrawnAmounts_ Expected amounts to be withdrawn from the pool\\n  /// @param amountsToConvert_ Amounts on balance initially available for the conversion\\n  /// @return amountsOut Expected amounts of the main asset received after conversion withdrawnAmounts+amountsToConvert\\n  function getExpectedAmountMainAsset(\\n    address[] memory tokens,\\n    uint indexAsset,\\n    ITetuConverter converter,\\n    uint[] memory withdrawnAmounts_,\\n    uint[] memory amountsToConvert_\\n  ) internal returns (\\n    uint[] memory amountsOut\\n  ) {\\n    uint len = tokens.length;\\n    amountsOut = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) {\\n        amountsOut[i] = withdrawnAmounts_[i];\\n      } else {\\n        uint amount = withdrawnAmounts_[i] + amountsToConvert_[i];\\n        if (amount != 0) {\\n          (amountsOut[i],) = converter.quoteRepay(address(this), tokens[indexAsset], tokens[i], amount);\\n        }\\n      }\\n    }\\n\\n    return amountsOut;\\n  }\\n\\n  /// @notice Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}\\n  /// @param amountsToConvert Amounts of {tokens} to be converted, they are located on the balance before withdraw\\n  /// @param withdrawnAmounts Amounts of {tokens} that were withdrew from the pool\\n  function postWithdrawActions(\\n    ITetuConverter converter,\\n    address[] memory tokens,\\n    uint indexAsset,\\n\\n    uint[] memory reservesBeforeWithdraw,\\n    uint liquidityAmountWithdrew,\\n    uint totalSupplyBeforeWithdraw,\\n\\n    uint[] memory amountsToConvert,\\n    uint[] memory withdrawnAmounts\\n  ) external returns (\\n    uint[] memory expectedMainAssetAmounts,\\n    uint[] memory _amountsToConvert\\n  ) {\\n    // estimate expected amount of assets to be withdrawn\\n    uint[] memory expectedWithdrawAmounts = getExpectedWithdrawnAmounts(\\n      reservesBeforeWithdraw,\\n      liquidityAmountWithdrew,\\n      totalSupplyBeforeWithdraw\\n    );\\n\\n    // from received amounts after withdraw calculate how much we receive from converter for them in terms of the underlying asset\\n    expectedMainAssetAmounts = getExpectedAmountMainAsset(\\n      tokens,\\n      indexAsset,\\n      converter,\\n      expectedWithdrawAmounts,\\n      amountsToConvert\\n    );\\n\\n    uint len = tokens.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      amountsToConvert[i] += withdrawnAmounts[i];\\n    }\\n\\n    return (expectedMainAssetAmounts, amountsToConvert);\\n  }\\n\\n  /// @notice return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}\\n  function postWithdrawActionsEmpty(\\n    ITetuConverter converter,\\n    address[] memory tokens,\\n    uint indexAsset,\\n    uint[] memory amountsToConvert_\\n  ) external returns (\\n    uint[] memory expectedAmountsMainAsset\\n  ) {\\n    expectedAmountsMainAsset = getExpectedAmountMainAsset(\\n      tokens,\\n      indexAsset,\\n      converter,\\n      // there are no withdrawn amounts\\n      new uint[](tokens.length), // array with all zero values\\n      amountsToConvert_\\n    );\\n  }\\n\\n  /// @notice Calculate amount earned after withdraw. Withdraw cannot produce income, so we send all\\n  ///         earned amount to insurance. Also we send to the insurance earned-by-prices-amount here.\\n  /// @dev Amount for the insurance is sent from the balance, so the sending doesn't change invested assets.\\n  /// @param asset Underlying\\n  /// @param investedAssets_ Invested assets amount at the moment of withdrawing start\\n  /// @param balanceBefore Balance of the underlying at the moment of withdrawing start\\n  /// @param earnedByPrices_ Amount of underlying earned because of price changes, it should be send to the insurance.\\n  /// @param updatedInvestedAssets_ Invested assets amount after withdrawing\\n  /// @return amountSentToInsurance Total amount sent to the insurance in result.\\n  function calculateIncomeAfterWithdraw(\\n    address splitter,\\n    address asset,\\n    uint investedAssets_,\\n    uint balanceBefore,\\n    uint earnedByPrices_,\\n    uint updatedInvestedAssets_\\n  ) external returns (uint amountSentToInsurance, uint strategyLoss) {\\n    uint balanceAfterWithdraw = AppLib.balance(asset);\\n\\n    // we need to compensate difference if during withdraw we lost some assets\\n    // also we should send earned amounts to the insurance\\n    // it's too dangerous to earn money on withdraw, we can move share price\\n    // in the case of \\\"withdraw almost all\\\" share price can be changed significantly\\n    // so, it's safer to transfer earned amount to the insurance\\n    // earned can exceeds earnedByPrices_\\n    // but if earned < earnedByPrices_ it means that we compensate a part of losses from earned-by-prices.\\n    uint earned;\\n    (earned, strategyLoss) = _registerIncome(\\n      AppLib.sub0(investedAssets_ + balanceBefore, earnedByPrices_),\\n      updatedInvestedAssets_ + balanceAfterWithdraw\\n    );\\n\\n    if (earned != earnedByPrices_) {\\n      emit OnEarningOnWithdraw(earned, earnedByPrices_);\\n    }\\n\\n    if (earned != 0) {\\n      (amountSentToInsurance,) = _sendToInsurance(\\n        asset,\\n        earned,\\n        splitter,\\n        investedAssets_ + balanceBefore,\\n        balanceAfterWithdraw\\n      );\\n    }\\n\\n    return (amountSentToInsurance, strategyLoss);\\n  }\\n//endregion ------------------------------------- Withdraw helpers\\n\\n//region---------------------------------------- calcInvestedAssets\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\n  /// @param indexAsset Index of the underlying (main asset) in {tokens}\\n  /// @param makeCheckpoint_ True - call IBookkeeper.checkpoint in the converter\\n  /// @return amountOut Invested asset amount under control (in terms of underlying)\\n  /// @return prices Asset prices in USD, decimals 18\\n  /// @return decs 10**decimals\\n  function calcInvestedAssets(\\n    address[] memory tokens,\\n    uint[] memory depositorQuoteExitAmountsOut,\\n    uint indexAsset,\\n    ITetuConverter converter_,\\n    bool makeCheckpoint_\\n  ) external returns (\\n    uint amountOut,\\n    uint[] memory prices,\\n    uint[] memory decs\\n  ) {\\n    return _calcInvestedAssets(tokens, depositorQuoteExitAmountsOut, indexAsset, converter_, makeCheckpoint_);\\n  }\\n\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\n  /// @param indexAsset Index of the underlying (main asset) in {tokens}\\n  /// @param makeCheckpoint_ True - call IBookkeeper.checkpoint in the converter\\n  /// @return amountOut Invested asset amount under control (in terms of underlying)\\n  /// @return prices Asset prices in USD, decimals 18\\n  /// @return decs 10**decimals\\n  function _calcInvestedAssets(\\n    address[] memory tokens,\\n    uint[] memory depositorQuoteExitAmountsOut,\\n    uint indexAsset,\\n    ITetuConverter converter_,\\n    bool makeCheckpoint_\\n  ) internal returns (\\n    uint amountOut,\\n    uint[] memory prices,\\n    uint[] memory decs\\n  ) {\\n    CalcInvestedAssetsLocal memory v;\\n    v.len = tokens.length;\\n    v.asset = tokens[indexAsset];\\n\\n    // calculate prices, decimals\\n    (prices, decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(converter_), tokens, v.len);\\n\\n    // A debt is registered below if we have X amount of asset, need to pay Y amount of the asset and X < Y\\n    // In this case: debt = Y - X, the order of tokens is the same as in {tokens} array\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) {\\n        // Current strategy balance of main asset is not taken into account here because it's add by splitter\\n        amountOut += depositorQuoteExitAmountsOut[i];\\n      } else {\\n        v.token = tokens[i];\\n        // possible reverse debt: collateralAsset = tokens[i], borrowAsset = underlying\\n        // investedAssets is calculated using exact debts, debt-gaps are not taken into account\\n        (uint toPay, uint collateral) = converter_.getDebtAmountCurrent(address(this), v.token, v.asset, false);\\n        if (amountOut < toPay) {\\n          setDebt(v, indexAsset, toPay);\\n        } else {\\n          amountOut -= toPay;\\n        }\\n\\n        // available amount to repay\\n        uint toRepay = collateral + IERC20(v.token).balanceOf(address(this)) + depositorQuoteExitAmountsOut[i];\\n\\n        // direct debt: collateralAsset = underlying, borrowAsset = tokens[i]\\n        // investedAssets is calculated using exact debts, debt-gaps are not taken into account\\n        (toPay, collateral) = converter_.getDebtAmountCurrent(address(this), v.asset, v.token, false);\\n        amountOut += collateral;\\n\\n        if (toRepay >= toPay) {\\n          amountOut += (toRepay - toPay) * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\\n        } else {\\n          // there is not enough amount to pay the debt\\n          // let's register a debt and try to resolve it later below\\n          setDebt(v, i, toPay - toRepay);\\n        }\\n      }\\n    }\\n    if (v.debts.length == v.len) {\\n      // we assume here, that it would be always profitable to save collateral\\n      // f.e. if there is not enough amount of USDT on our balance and we have a debt in USDT,\\n      // it's profitable to change any available asset to USDT, pay the debt and return the collateral back\\n      for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n        if (v.debts[i] == 0) continue;\\n\\n        // estimatedAssets should be reduced on the debt-value\\n        // this estimation is approx and do not count price impact on the liquidation\\n        // we will able to count the real output only after withdraw process\\n        uint debtInAsset = v.debts[i] * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\\n        if (debtInAsset > amountOut) {\\n          // The debt is greater than we can pay. We shouldn't try to pay the debt in this case\\n          amountOut = 0;\\n        } else {\\n          amountOut -= debtInAsset;\\n        }\\n      }\\n    }\\n\\n    if (makeCheckpoint_) {\\n      _callCheckpoint(tokens, converter_);\\n    }\\n\\n    return (amountOut, prices, decs);\\n  }\\n\\n  /// @notice Make new checkpoint in converter's bookkeeper\\n  /// As results, a next call of checkpoint will return amount of increases to debts (\\\"deltas\\\")\\n  /// since current moment up to the moment of the next call (we need such deltas in _fixPriceChanges only)\\n  function _callCheckpoint(address[] memory tokens, ITetuConverter converter_) internal returns (\\n    uint[] memory deltaGains,\\n    uint[] memory deltaLosses\\n  ) {\\n    IBookkeeper a = IBookkeeper(IConverterController(converter_.controller()).bookkeeper());\\n    return a.checkpoint(tokens);\\n  }\\n\\n  /// @notice Lazy initialization of v.debts, add {value} to {v.debts[index]}\\n  function setDebt(CalcInvestedAssetsLocal memory v, uint index, uint value) pure internal {\\n    if (v.debts.length == 0) {\\n      // lazy initialization\\n      v.debts = new uint[](v.len);\\n    }\\n\\n    // to pay the following amount we need to swap some other asset at first\\n    v.debts[index] += value;\\n  }\\n\\n  /// @notice Calculate the token amounts for deposit and amount of loss (as old-total-asset - new-total-asset)\\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\\n  /// @return loss New total assets - old total assets\\n  /// @return tokenAmounts Balances of the token A and token B.\\n  ///                     If any balance is zero it's not possible to enter to the pool, so return empty array (len 0)\\n  function getTokenAmountsPair(\\n    ITetuConverter converter,\\n    uint totalAssets,\\n    address tokenA,\\n    address tokenB,\\n    uint[2] calldata liquidationThresholdsAB\\n  ) external returns (\\n    uint loss,\\n    uint[] memory tokenAmounts\\n  ) {\\n    tokenAmounts = new uint[](2);\\n    tokenAmounts[0] = AppLib.balance(tokenA);\\n    tokenAmounts[1] = AppLib.balance(tokenB);\\n\\n    address[] memory tokens = new address[](2);\\n    tokens[0] = tokenA;\\n    tokens[1] = tokenB;\\n\\n    uint[] memory amounts = new uint[](2);\\n    amounts[0] = tokenAmounts[0];\\n\\n    (uint newTotalAssets,,) = _calcInvestedAssets(tokens, amounts, 0, converter, true);\\n    return (\\n      newTotalAssets < totalAssets\\n        ? totalAssets - newTotalAssets\\n        : 0,\\n      (tokenAmounts[0] < liquidationThresholdsAB[0] || tokenAmounts[1] < liquidationThresholdsAB[1])\\n        ? new uint[](0)\\n        : tokenAmounts\\n    );\\n  }\\n\\n  /// @notice Swap can give us more amount out than expected, so we will receive increasing of share price.\\n  ///         To prevent it, we need to send exceeded amount to insurance,\\n  ///         but it's too expensive to make such transfer at the end of withdrawAggByStep.\\n  ///         So, we postpone sending the profit until the next call of fixPriceChange\\n  ///         by manually setting investedAssets equal to the oldTotalAssets\\n  /// @dev If profitToCover was sent only partly, we will postpone sending of remain amount up to the next call\\n  ///      of fixPriceChange in same manner\\n  /// @param oldTotalAssets Total asset at the moment after last call of fixPriceChange,\\n  ///                       decreased on the value of profitToCover.\\n  function fixTooHighInvestedAssets(\\n    address asset_,\\n    uint oldTotalAssets,\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs_\\n  ) external {\\n    uint balance = IERC20(asset_).balanceOf(address(this));\\n    uint newTotalAssets = csbs_.investedAssets + balance;\\n\\n    if (oldTotalAssets < newTotalAssets) {\\n      // total asset was increased (i.e. because of too profitable swaps)\\n      // this increment will increase share price\\n      // we should send added amount to insurance to avoid share price change\\n      // anyway, it's too expensive to do it here\\n      // so, we postpone sending the profit until the next call of fixPriceChange\\n      if (oldTotalAssets > balance) {\\n        csbs_.investedAssets = oldTotalAssets - balance;\\n      }\\n    }\\n  }\\n//endregion------------------------------------- calcInvestedAssets\\n\\n//region ------------------------------------------------------- Bookkeeper logic\\n  /// @notice Make checkpoint (it's writable function) and calculate total cost of the deltas in terms of the {asset}\\n  /// @param tokens Full list of tokens that can be used as collateral/borrow asset by the current strategy\\n  /// @param indexAsset Index of the underlying in {tokens}\\n  /// @return increaseToDebt Total increase-to-debt since previous checkpoint [in underlying]\\n  function _getIncreaseToDebt(\\n    address[] memory tokens,\\n    uint indexAsset,\\n    uint[] memory prices,\\n    uint[] memory decs,\\n    ITetuConverter converter\\n  ) internal returns (\\n    int increaseToDebt\\n  ) {\\n    IBookkeeper a = IBookkeeper(IConverterController(converter.controller()).bookkeeper());\\n    (uint[] memory deltaGains, uint[] memory deltaLosses) = a.checkpoint(tokens);\\n\\n    uint len = tokens.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) {\\n        increaseToDebt -= int(deltaGains[i]);\\n        increaseToDebt += int(deltaLosses[i]);\\n      } else {\\n        increaseToDebt += (int(deltaLosses[i]) - int(deltaGains[i]))\\n          * int(prices[i]) * int(decs[indexAsset]) / int(prices[indexAsset]) / int(decs[i]);\\n      }\\n    }\\n    emit OnIncreaseDebtToInsurance(tokens, deltaGains, deltaLosses, prices, increaseToDebt);\\n\\n    return increaseToDebt;\\n  }\\n\\n  /// @notice Register income and cover possible loss after price changing, emit FixPriceChanges\\n  /// @param investedAssetsBefore Currently stored value of _csbs.investedAssets\\n  /// @param investedAssetsAfter Actual value of invested assets calculated at the current moment\\n  /// @param increaseToDebt The amount by which the total loan debts increased for the selected period\\n  /// @return earned Amount earned because of price changing\\n  function _coverLossAfterPriceChanging(\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\n    uint investedAssetsBefore,\\n    uint investedAssetsAfter,\\n    int increaseToDebt,\\n    IStrategyV3.BaseState storage baseState\\n  ) internal returns (uint earned) {\\n    int debtToInsurance0 = csbs.debtToInsurance;\\n    if (investedAssetsAfter > investedAssetsBefore) {\\n      earned = investedAssetsAfter - investedAssetsBefore;\\n      if (increaseToDebt != 0) {\\n        // Earned amount will be send to the insurance later.\\n        // Probably it can be reduced by same limitations as {lost} amount below\\n        // and so, it will be necessary to decrease increaseToDebt proportionally.\\n        // For simplicity, we increase debtToInsurance on full increaseToDebt always\\n        // in assumption, that such profits are always low.\\n        csbs.debtToInsurance += increaseToDebt;\\n        emit ChangeDebtToInsuranceOnProfit(debtToInsurance0, increaseToDebt);\\n      }\\n    } else {\\n      uint lost = investedAssetsBefore - investedAssetsAfter;\\n      if (lost != 0) {\\n        uint totalAsset = investedAssetsAfter + IERC20(baseState.asset).balanceOf(address(this));\\n        (uint lossToCover, uint lossUncovered) = _getSafeLossToCover(lost, totalAsset);\\n\\n        if (lossUncovered != 0) {\\n          // we need to cover lost-amount, but this amount is too high and will produce revert in the splitter\\n          // so, we will cover only part of {lost} and leave other part uncovered.\\n          emit UncoveredLoss(lossToCover, lossUncovered, investedAssetsBefore, investedAssetsAfter);\\n        }\\n\\n        // if we compensate lost only partially, we reduce both amounts \\\"from prices\\\" and \\\"from debts\\\" proportionally\\n        _coverLossAndCheckResults(csbs, baseState.splitter, lossToCover, increaseToDebt * int(lossToCover) / int(lost));\\n\\n      }\\n    }\\n\\n    emit FixPriceChanges(\\n      investedAssetsBefore,\\n      investedAssetsAfter,\\n      debtToInsurance0,\\n      csbs.debtToInsurance,\\n      increaseToDebt\\n    );\\n    return earned;\\n  }\\n\\n  /// @notice Call coverPossibleStrategyLoss, covered loss will be sent to vault.\\n  ///         If the loss were covered only partially, emit {NotEnoughInsurance}\\n  function coverLossAndCheckResults(\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\n    address splitter,\\n    uint lossToCover\\n  ) external {\\n    _coverLossAndCheckResults(csbs, splitter, lossToCover, int(lossToCover));\\n  }\\n\\n  /// @notice Call coverPossibleStrategyLoss, covered loss will be sent to vault.\\n  function _coverLossAndCheckResults(\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\n    address splitter,\\n    uint lossToCover,\\n    int debtToInsuranceInc\\n  ) internal {\\n    address asset = ISplitter(splitter).asset();\\n    address vault = ISplitter(splitter).vault();\\n\\n    uint balanceBefore = IERC20(asset).balanceOf(vault);\\n    ISplitter(splitter).coverPossibleStrategyLoss(0, lossToCover);\\n    uint balanceAfter = IERC20(asset).balanceOf(vault);\\n\\n    uint delta = AppLib.sub0(balanceAfter, balanceBefore);\\n    uint uncovered = AppLib.sub0(lossToCover, delta);\\n    debtToInsuranceInc = lossToCover == 0\\n      ? int(0)\\n      : debtToInsuranceInc * int(lossToCover - uncovered) / int(lossToCover);\\n\\n    if (debtToInsuranceInc != 0) {\\n      csbs.debtToInsurance += debtToInsuranceInc;\\n    }\\n\\n    // we don't add uncovered amount to the debts to the insurance\\n    emit OnCoverLoss(lossToCover, debtToInsuranceInc, delta, uncovered);\\n  }\\n\\n  /// @notice Cut loss-value to safe value that doesn't produce revert inside splitter\\n  function _getSafeLossToCover(uint loss, uint totalAssets_) internal pure returns (\\n    uint lossToCover,\\n    uint lossUncovered\\n  ) {\\n    // see StrategySplitterV2._declareStrategyIncomeAndCoverLoss, _coverLoss implementations\\n    lossToCover = Math.min(loss, ConverterStrategyBaseLib2.HARDWORK_LOSS_TOLERANCE * totalAssets_ / 100_000);\\n    lossUncovered = AppLib.sub0(loss, lossToCover);\\n  }\\n\\n  /// @notice Calculate profit/loss happened because of price changing.\\n  /// Try to cover the loss, send the profit to the insurance.\\n  /// Increment debt to insurance on amount of increase of the debts.\\n  /// @param amountsInPool Amount of tokens that can be received from the pool after withdrawing all liquidity.\\n  /// The order of tokens is same as in the {tokens}\\n  /// @param tokens Result of {_depositorPoolAssets}\\n  /// @param indexAsset Index of the underlying in {tokens}\\n  /// @return investedAssetsOut Updated value of {csbs.investedAssets}\\n  /// @return earnedOut Profit that was received because of price changes. It should be sent back to insurance.\\n  function fixPriceChanges(\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\n    IStrategyV3.BaseState storage baseState,\\n    uint[] memory amountsInPool,\\n    address[] memory tokens,\\n    uint indexAsset\\n  ) external returns (\\n    uint investedAssetsOut,\\n    uint earnedOut\\n  ) {\\n    ITetuConverter converter = csbs.converter;\\n    uint investedAssetsBefore = csbs.investedAssets;\\n\\n    uint[] memory prices;\\n    uint[] memory decs;\\n\\n    (investedAssetsOut, prices, decs) = _calcInvestedAssets(tokens, amountsInPool, indexAsset, converter, false);\\n    csbs.investedAssets = investedAssetsOut;\\n\\n    int increaseToDebt = _getIncreaseToDebt(tokens, indexAsset, prices, decs, converter);\\n    earnedOut = _coverLossAfterPriceChanging(csbs, investedAssetsBefore, investedAssetsOut, increaseToDebt, baseState);\\n  }\\n\\n  /// @notice Register amounts received for supplying collaterals and amount paid for the debts\\n  ///         for the current period (a new period is started after each hardwork operation)\\n  function registerBorrowResults(ITetuConverter converter, address asset) external {\\n    IBookkeeper a = IBookkeeper(IConverterController(converter.controller()).bookkeeper());\\n    (uint gains, uint losses) = a.startPeriod(asset);\\n    if (gains != 0 && losses != 0) {\\n      emit BorrowResults(gains, losses);\\n    }\\n  }\\n//endregion ------------------------------------------------------- Bookkeeper logic\\n\\n\\n}\\n\\n\",\"keccak256\":\"0xa0913cc04bac00faa68dddeb59d1e64eb739bb79521fe4a4ac5f895f69534adc\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/DepositorBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/// @title Abstract base Depositor contract.\\n/// @notice Converter strategies should inherit xDepositor.\\n/// @notice All communication with external pools should be done at inherited contract\\n/// @author bogdoslav\\nabstract contract DepositorBase {\\n\\n  /// @notice Returns pool assets\\n  function _depositorPoolAssets() internal virtual view returns (address[] memory assets);\\n\\n  /// @notice Returns pool token proportions\\n  function _depositorPoolWeights() internal virtual view returns (uint[] memory weights, uint total);\\n\\n  /// @notice Returns pool token reserves\\n  function _depositorPoolReserves() internal virtual view returns (uint[] memory reserves);\\n\\n  /// @notice Returns depositor's pool shares / lp token amount\\n  function _depositorLiquidity() internal virtual view returns (uint);\\n\\n  //// @notice Total amount of LP tokens in the depositor\\n  function _depositorTotalSupply() internal view virtual returns (uint);\\n\\n  /// @notice Deposit given amount to the pool.\\n  /// @dev Depositor must care about tokens approval by itself.\\n  function _depositorEnter(uint[] memory amountsDesired_) internal virtual returns (\\n    uint[] memory amountsConsumed,\\n    uint liquidityOut\\n  );\\n\\n  /// @notice Withdraw given lp amount from the pool.\\n  /// @param liquidityAmount Amount of liquidity to be converted\\n  ///                        If requested liquidityAmount >= invested, then should make full exit.\\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\\n  /// @return amountsOut The order of amounts is the same as in {_depositorPoolAssets}\\n  function _depositorExit(uint liquidityAmount, bool emergency) internal virtual returns (uint[] memory amountsOut);\\n\\n  /// @notice Quotes output for given lp amount from the pool.\\n  /// @dev Write function with read-only behavior. BalanceR's depositor requires not-view.\\n  /// @param liquidityAmount Amount of liquidity to be converted\\n  ///                        If requested liquidityAmount >= invested, then should make full exit.\\n  /// @return amountsOut The order of amounts is the same as in {_depositorPoolAssets}\\n  function _depositorQuoteExit(uint liquidityAmount) internal virtual returns (uint[] memory amountsOut);\\n\\n  /// @dev If pool supports emergency withdraw need to call it for emergencyExit()\\n  /// @return amountsOut The order of amounts is the same as in {_depositorPoolAssets}\\n  function _depositorEmergencyExit() internal virtual returns (uint[] memory amountsOut) {\\n    uint liquidity = _depositorLiquidity();\\n    return liquidity == 0\\n      ? new uint[](_depositorPoolAssets().length)\\n      : _depositorExit(liquidity, true);\\n  }\\n\\n  /// @notice Claim all possible rewards.\\n  /// @return rewardTokens Claimed token addresses\\n  /// @return rewardAmounts Claimed token amounts\\n  /// @return depositorBalancesBefore Must have the same length as _depositorPoolAssets and represent balances before claim in the same order\\n  function _depositorClaimRewards() internal virtual returns (\\n    address[] memory rewardTokens,\\n    uint[] memory rewardAmounts,\\n    uint[] memory depositorBalancesBefore\\n  );\\n}\\n\",\"keccak256\":\"0x4a8da7fa7668fedf1133c95376838a6fe1d86c9ef5e87517336b34dae3f42d1a\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/pair/PairBasedStrategyLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\nimport \\\"../../interfaces/IPoolProportionsProvider.sol\\\";\\nimport \\\"../../libs/BorrowLib.sol\\\";\\n\\n/// @notice Library for the UniV3-like strategies with two tokens in the pool\\n/// @dev The library contains quoteWithdrawStep/withdrawStep-related logic\\nlibrary PairBasedStrategyLib {\\n  //region ------------------------------------------------ Constants\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\n  /// @notice In all functions below array {token} contains underlying at the first position\\n  uint internal constant IDX_ASSET = 0;\\n  /// @notice In all functions below array {token} contains not-underlying at the second position\\n  uint internal constant IDX_TOKEN = 1;\\n\\n  uint internal constant IDX_SWAP_1 = 0;\\n  uint internal constant IDX_REPAY_1 = 1;\\n  uint internal constant IDX_SWAP_2 = 2;\\n  uint internal constant IDX_REPAY_2 = 3;\\n\\n  /// @notice A gap to reduce AmountToSwap calculated inside quoteWithdrawByAgg, [0...100_000]\\n  uint public constant GAP_AMOUNT_TO_SWAP = 100;\\n\\n  /// @notice Enter to the pool at the end of withdrawByAggStep\\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED = 1;\\n  /// @notice Enter to the pool at the end of withdrawByAggStep only if full withdrawing has been completed\\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED = 2;\\n\\n  /// @notice Fuse thresholds are set as array: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\n  ///         If the price falls below LOWER_LIMIT_ON the fuse is turned ON\\n  ///         When the prices raises back and reaches LOWER_LIMIT_OFF, the fuse is turned OFF\\n  ///         In the same way, if the price raises above UPPER_LIMIT_ON the fuse is turned ON\\n  ///         When the prices falls back and reaches UPPER_LIMIT_OFF, the fuse is turned OFF\\n  ///\\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\\n  uint public constant FUSE_IDX_LOWER_LIMIT_ON = 0;\\n  uint public constant FUSE_IDX_LOWER_LIMIT_OFF = 1;\\n  uint public constant FUSE_IDX_UPPER_LIMIT_ON = 2;\\n  uint public constant FUSE_IDX_UPPER_LIMIT_OFF = 3;\\n\\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_A = 0;\\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_B = 1;\\n  uint public constant IDX_ADDR_DEFAULT_STATE_POOL = 2;\\n  uint public constant IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER = 3;\\n\\n  uint public constant IDX_TICK_DEFAULT_STATE_TICK_SPACING = 0;\\n  uint public constant IDX_TICK_DEFAULT_STATE_LOWER_TICK = 1;\\n  uint public constant IDX_TICK_DEFAULT_STATE_UPPER_TICK = 2;\\n  uint public constant IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE = 3;\\n\\n  uint public constant IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY = 0;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_FUSE_STATUS = 1;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_0 = 2;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE = 3;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_0 = 4;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_1 = 5;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_2 = 6;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_3 = 7;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_1 = 8;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_2 = 9;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_3 = 10;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_4 = 11;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP = 12;\\n\\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL = 0;\\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS = 1;\\n\\n  /// @notice 1inch router V5\\n  address internal constant ONEINCH = 0x1111111254EEB25477B68fb85Ed929f73A960582;\\n  /// @notice OpenOceanExchangeProxy\\n  address internal constant OPENOCEAN = 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64;\\n\\n  string public constant UNKNOWN_SWAP_ROUTER = \\\"PBS-1 Unknown router\\\";\\n  string public constant INCORRECT_TICK_RANGE = \\\"PBS-3 Incorrect tickRange\\\";\\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \\\"PBS-4 Incorrect rebalanceTickRange\\\";\\n  string public constant INCORRECT_ASSET = \\\"PBS-5 Incorrect asset\\\";\\n\\n  //endregion ------------------------------------------------ Constants\\n\\n  //region ------------------------------------------------ Data types\\n  /// @notice The fuse is triggered when the price rises above or falls below the limit 1.\\n  ///         If the fuse was triggered, all assets are withdrawn from the pool on the strategy balance.\\n  ///         Then all debts should be closed and all assets should be converted to underlying.\\n  ///         The fuse is turned off automatically when the price falls below or rises above the limit 2\\n  ///         and all assets are deposited back to the pool.\\n  enum FuseStatus {\\n    /// @notice Fuse is not used at all\\n    FUSE_DISABLED_0,\\n    /// @notice Fuse is not triggered, assets are deposited to the pool\\n    FUSE_OFF_1,\\n    /// @notice Fuse was triggered by lower limit, assets was withdrawn from the pool, but active debts can exist\\n    FUSE_ON_LOWER_LIMIT_2,\\n    /// @notice Fuse was triggered by upper limit, assets was withdrawn from the pool, but active debts can exist\\n    FUSE_ON_UPPER_LIMIT_3\\n  }\\n\\n  struct SwapByAggParams {\\n    bool useLiquidator;\\n    address tokenToSwap;\\n    /// @notice Aggregator to make swap\\n    ///         It is 0 if useLiquidator is true\\n    ///         It can be equal to address of liquidator if we use liquidator as aggregator (in tests)\\n    address aggregator;\\n    uint amountToSwap;\\n    /// @notice Swap-data prepared off-chain (route, amounts, etc). 0 - use liquidator to make swap\\n    bytes swapData;\\n  }\\n\\n  struct GetAmountToRepay2Local {\\n    uint x;\\n    uint y;\\n    uint c0;\\n    uint b0;\\n    uint alpha;\\n    int b;\\n  }\\n\\n  struct FuseStateParams {\\n    FuseStatus status;\\n    /// @notice Price thresholds [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\n    /// @dev see PairBasedStrategyLib.FUSE_IDX_XXX\\n    uint[4] thresholds;\\n\\n    /// @notice reserve space for future needs\\n    uint[4] __gap;\\n  }\\n  //endregion ------------------------------------------------ Data types\\n\\n  //region ------------------------------------------------ Events\\n  event FuseStatusChanged(uint fuseStatus);\\n  event NewFuseThresholds(uint[4] newFuseThresholds);\\n  event SwapByAgg(\\n    uint amountToSwap,\\n    uint amountIn,\\n    uint amountOut,\\n    uint expectedAmountOut,\\n    address aggregator,\\n    address assetIn,\\n    address assetOut\\n  );\\n  //endregion ------------------------------------------------ Events\\n\\n  //region ------------------------------------------------ External withdraw functions\\n\\n  /// @notice Get info for the swap that will be made on the next call of {withdrawStep}\\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\n  ///                            Value type(uint).max means that the proportions should be read from the pool.\\n  ///     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\\n  /// @param amountsFromPool Amounts of {tokens} that will be received from the pool before calling withdraw\\n  /// @return tokenToSwap Address of the token that will be swapped on the next swap. 0 - no swap\\n  /// @return amountToSwap Amount that will be swapped on the next swap. 0 - no swap\\n  ///                      This amount is NOT reduced on {GAP_AMOUNT_TO_SWAP}, it should be reduced after the call if necessary.\\n  function quoteWithdrawStep(\\n    address[2] memory converterLiquidator_,\\n    address[] memory tokens,\\n    uint[] memory liquidationThresholds,\\n    uint[] memory amountsFromPool,\\n    uint planKind,\\n    uint[2] memory entryDataValues\\n  ) external returns (\\n    address tokenToSwap,\\n    uint amountToSwap\\n  ){\\n    (uint[] memory prices,\\n      uint[] memory decs\\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\\n      converter: ITetuConverter(converterLiquidator_[0]),\\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\\n      tokens: tokens,\\n      liquidationThresholds: liquidationThresholds,\\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\n        : entryDataValues[0],\\n      prices: prices,\\n      decs: decs,\\n      balanceAdditions: amountsFromPool,\\n      planKind: planKind,\\n      usePoolProportions: entryDataValues[0] == type(uint).max,\\n      entryDataParam: entryDataValues[1]\\n    });\\n    return _quoteWithdrawStep(p);\\n  }\\n\\n  /// @notice Make withdraw step with 0 or 1 swap only. The step can make one of the following actions:\\n  ///         1) repay direct debt 2) repay reverse debt 3) final swap leftovers of not-underlying asset\\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\\n  /// @param tokenToSwap_ Address of the token that will be swapped on the next swap. 0 - no swap\\n  /// @param amountToSwap_ Amount that will be swapped on the next swap. 0 - no swap\\n  /// @param aggregator_ Aggregator that should be used for the next swap. 0 - no swap\\n  /// @param swapData_ Swap data to be passed to the aggregator on the next swap.\\n  ///                  Swap data contains swap-route, amount and all other required info for the swap.\\n  ///                  Swap data should be prepared on-chain on the base of data received by {quoteWithdrawStep}\\n  /// @param useLiquidator_ Use liquidator instead of aggregator.\\n  ///                       Aggregator swaps amount reduced on {GAP_AMOUNT_TO_SWAP}.\\n  ///                       Liquidator doesn't use {GAP_AMOUNT_TO_SWAP}.\\n  ///                       It's allowed to pass liquidator address in {aggregator_} and set {useLiquidator_} to false -\\n  ///                       the liquidator will be used in same way as aggregator in this case.\\n  /// @param planKind One of IterationPlanLib.PLAN_XXX\\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\n  ///     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions\\n  function withdrawStep(\\n    address[2] memory converterLiquidator_,\\n    address[] memory tokens,\\n    uint[] memory liquidationThresholds,\\n    address tokenToSwap_,\\n    uint amountToSwap_,\\n    address aggregator_,\\n    bytes memory swapData_,\\n    bool useLiquidator_,\\n    uint planKind,\\n    uint[2] memory entryDataValues\\n  ) external returns (\\n    bool completed\\n  ){\\n    (uint[] memory prices,\\n      uint[] memory decs\\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\\n\\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\\n      converter: ITetuConverter(converterLiquidator_[0]),\\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\\n      tokens: tokens,\\n      liquidationThresholds: liquidationThresholds,\\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\n        : entryDataValues[0],\\n      prices: prices,\\n      decs: decs,\\n      balanceAdditions: new uint[](2), // 2 = tokens.length\\n      planKind: planKind,\\n      usePoolProportions: entryDataValues[0] == type(uint).max,\\n      entryDataParam: entryDataValues[1]\\n    });\\n    SwapByAggParams memory aggParams = SwapByAggParams({\\n      tokenToSwap: tokenToSwap_,\\n      amountToSwap: amountToSwap_,\\n      useLiquidator: useLiquidator_,\\n      aggregator: aggregator_,\\n      swapData: swapData_\\n    });\\n    return _withdrawStep(p, aggParams);\\n  }\\n  //endregion ------------------------------------------------ External withdraw functions\\n\\n  //region ------------------------------------------------ Fuse functions\\n  function setFuseStatus(FuseStateParams storage fuse, FuseStatus status) external {\\n    fuse.status = status;\\n    emit FuseStatusChanged(uint(status));\\n  }\\n\\n  function setFuseThresholds(FuseStateParams storage state, uint[4] memory values) external {\\n    require(\\n      (values[FUSE_IDX_LOWER_LIMIT_ON] == 0 && values[FUSE_IDX_LOWER_LIMIT_OFF] == 0)\\n      || (values[FUSE_IDX_LOWER_LIMIT_ON] <= values[FUSE_IDX_LOWER_LIMIT_OFF]),\\n      AppErrors.INVALID_VALUE\\n    );\\n    require(\\n      (values[FUSE_IDX_UPPER_LIMIT_ON] == 0 && values[FUSE_IDX_UPPER_LIMIT_OFF] == 0)\\n      || (values[FUSE_IDX_UPPER_LIMIT_ON] >= values[FUSE_IDX_UPPER_LIMIT_OFF]),\\n      AppErrors.INVALID_VALUE\\n    );\\n    if (values[FUSE_IDX_LOWER_LIMIT_ON] != 0 && values[FUSE_IDX_UPPER_LIMIT_ON] != 0) {\\n      require(\\n        values[FUSE_IDX_UPPER_LIMIT_ON] > values[FUSE_IDX_LOWER_LIMIT_ON],\\n        AppErrors.INVALID_VALUE\\n      );\\n    }\\n    state.thresholds = values;\\n    emit NewFuseThresholds(values);\\n  }\\n\\n  function isFuseTriggeredOn(PairBasedStrategyLib.FuseStatus fuseStatus) internal pure returns (bool) {\\n    return uint(fuseStatus) > uint(PairBasedStrategyLib.FuseStatus.FUSE_OFF_1);\\n  }\\n\\n  /// @notice Check if the fuse should be turned ON/OFF\\n  /// @param price Current price in the oracle\\n  /// @param poolPrice Current price in the pool\\n  /// @return needToChange A boolean indicating if the fuse status should be changed\\n  /// @return status Exist fuse status or new fuse status (if needToChange is true)\\n  function needChangeFuseStatus(FuseStateParams memory fuse, uint price, uint poolPrice) internal pure returns (\\n    bool needToChange,\\n    FuseStatus status\\n  ) {\\n    if (fuse.status != FuseStatus.FUSE_DISABLED_0) {\\n      if (fuse.status == FuseStatus.FUSE_OFF_1) {\\n        // currently fuse is OFF\\n        if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON]) {\\n          needToChange = true;\\n          status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\\n        } else if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\\n          needToChange = true;\\n          status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\\n        }\\n      } else {\\n        if (fuse.status == FuseStatus.FUSE_ON_LOWER_LIMIT_2) {\\n          // currently fuse is triggered ON by lower limit\\n          if (price >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] && poolPrice >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\\n            needToChange = true;\\n            if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\\n              status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\\n            } else {\\n              status = FuseStatus.FUSE_OFF_1;\\n            }\\n          }\\n        } else {\\n          // currently fuse is triggered ON by upper limit\\n          if (price <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF] && poolPrice <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF]) {\\n            needToChange = true;\\n            if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\\n              status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\\n            } else {\\n              status = FuseStatus.FUSE_OFF_1;\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n    return (needToChange, needToChange ? status : fuse.status);\\n  }\\n  //endregion ------------------------------------------------ Fuse functions\\n\\n  //region ------------------------------------------------ Internal helper functions\\n  /// @notice Quote amount of the next swap if any.\\n  ///         Swaps are required if direct-borrow exists OR reverse-borrow exists or not underlying leftovers exist\\n  ///         Function returns info for first swap only.\\n  /// @return tokenToSwap What token should be swapped. Zero address if no swap is required\\n  /// @return amountToSwap Amount to swap. Zero if no swap is required.\\n  function _quoteWithdrawStep(IterationPlanLib.SwapRepayPlanParams memory p) internal returns (\\n    address tokenToSwap,\\n    uint amountToSwap\\n  ) {\\n    uint indexTokenToSwapPlus1;\\n    (indexTokenToSwapPlus1, amountToSwap,) = IterationPlanLib.buildIterationPlan(\\n      [address(p.converter), address(p.liquidator)],\\n      p.tokens,\\n      p.liquidationThresholds,\\n      p.prices,\\n      p.decs,\\n      p.balanceAdditions,\\n      [\\n        p.usePoolProportions ? 1 : 0,\\n        p.planKind,\\n        p.propNotUnderlying18,\\n        type(uint).max,\\n        IDX_ASSET,\\n        IDX_TOKEN,\\n        p.entryDataParam\\n      ]\\n    );\\n    if (indexTokenToSwapPlus1 != 0) {\\n      tokenToSwap = p.tokens[indexTokenToSwapPlus1 - 1];\\n    }\\n    return (tokenToSwap, amountToSwap);\\n  }\\n\\n  /// @notice Make one iteration of withdraw. Each iteration can make 0 or 1 swap only\\n  ///         We can make only 1 of the following 3 operations per single call:\\n  ///         1) repay direct debt 2) repay reverse debt 3) swap leftovers to underlying\\n  function _withdrawStep(IterationPlanLib.SwapRepayPlanParams memory p, SwapByAggParams memory aggParams) internal returns (\\n    bool completed\\n  ) {\\n    (uint idxToSwap1, uint amountToSwap, uint idxToRepay1) = IterationPlanLib.buildIterationPlan(\\n      [address(p.converter), address(p.liquidator)],\\n      p.tokens,\\n      p.liquidationThresholds,\\n      p.prices,\\n      p.decs,\\n      p.balanceAdditions,\\n      [\\n        p.usePoolProportions ? 1 : 0,\\n        p.planKind,\\n        p.propNotUnderlying18,\\n        type(uint).max,\\n        IDX_ASSET,\\n        IDX_TOKEN,\\n        p.entryDataParam\\n      ]\\n    );\\n\\n    bool[4] memory actions = [\\n      p.planKind == IterationPlanLib.PLAN_SWAP_ONLY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // swap 1\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // repay 1\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, // swap 2\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY // repay 2\\n      ];\\n\\n    if (idxToSwap1 != 0 && actions[IDX_SWAP_1]) {\\n      (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\\n    }\\n\\n    if (idxToRepay1 != 0 && actions[IDX_REPAY_1]) {\\n      ConverterStrategyBaseLib._repayDebt(\\n        p.converter,\\n        p.tokens[idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET],\\n        p.tokens[idxToRepay1 - 1],\\n        IERC20(p.tokens[idxToRepay1 - 1]).balanceOf(address(this))\\n      );\\n    }\\n\\n    if (idxToSwap1 != 0) {\\n      if (actions[IDX_SWAP_2]) {\\n        (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\\n\\n        if (actions[IDX_REPAY_2] && idxToRepay1 != 0) {\\n          // see calculations inside estimateSwapAmountForRepaySwapRepay\\n          // There are two possibilities here:\\n          // 1) All collateral asset available on balance was swapped. We need additional repay to get assets in right proportions\\n          // 2) Only part of collateral asset was swapped, so assets are already in right proportions. Repay 2 is not needed\\n          (uint amountToRepay2, bool borrowInsteadRepay) = _getAmountToRepay2(\\n            p,\\n            idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET,\\n            idxToRepay1 - 1\\n          );\\n\\n          if (borrowInsteadRepay) {\\n            _borrowToProportions(p, idxToRepay1 - 1, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, true);\\n\\n          } else if (amountToRepay2 > p.liquidationThresholds[idxToRepay1 - 1]) {\\n            _secondRepay(p, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, idxToRepay1 - 1, amountToRepay2, type(uint).max);\\n          }\\n        }\\n      } else {\\n        // leftovers were swapped, there are no debts anymore\\n        // the swap can change pool proportions, so probably it's necessary to make additional borrow here\\n        if (\\n          idxToRepay1 == 0 // there are no debts anymore\\n          && p.usePoolProportions  // we use proportions from the pool\\n          && p.propNotUnderlying18 != 0 && p.propNotUnderlying18 != 1e18 // BorrowLib doesn't allow prop=0\\n        ) {\\n          _fixLeftoversProportions(p);\\n        }\\n      }\\n    }\\n\\n    // Withdraw is completed on last iteration (no debts, swapping leftovers)\\n    return idxToRepay1 == 0;\\n  }\\n\\n  /// @notice Make final repay in the scheme REPAY-SWAP-REPAY\\n  ///         Depending on condition the final repay can be made several times or additional borrow can be made\\n  /// @param amountToRepay Amount of {indexBorrow} asset that should be repaid\\n  /// @param needToRepayPrev Amount-to-repay on previous call of the {_secondRepay}\\n  ///                        This amount should decrease on each step of recursion.\\n  ///                        if it doesn't decrease repay is not successfull and it's useless to continue to call repays\\n  ///                        It can happen if liquidationThreshold has incorrect value (i.t. it's too low or zero)\\n  function _secondRepay(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    uint indexCollateral,\\n    uint indexBorrow,\\n    uint amountToRepay,\\n    uint needToRepayPrev\\n  ) internal {\\n    // we need to know repaidAmount\\n    // we cannot relay on the value returned by _repayDebt because of SCB-710, we need to check balances\\n    uint balanceBefore = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\\n    ConverterStrategyBaseLib._repayDebt(p.converter, p.tokens[indexCollateral], p.tokens[indexBorrow], amountToRepay);\\n    uint balanceAfter = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\\n\\n    uint repaidAmount = balanceBefore > balanceAfter\\n      ? balanceBefore - balanceAfter\\n      : 0;\\n\\n    if (repaidAmount < amountToRepay && amountToRepay - repaidAmount > p.liquidationThresholds[indexBorrow]) {\\n      // repaidAmount is less than expected\\n      // we need to make additional borrow OR probably make one more repay\\n      // repaidAmount can be less amountToRepay2 even if there is still opened debt, see SCB-777\\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexCollateral], p.tokens[indexBorrow], true);\\n      if (\\n        needToRepay > p.liquidationThresholds[indexBorrow]\\n        && needToRepay < needToRepayPrev // amount of debt was reduced on prev iteration of recursion\\n      ) {\\n        // more repays are required\\n        _secondRepay(p, indexCollateral, indexBorrow, amountToRepay - repaidAmount, needToRepay);\\n      } else {\\n        _borrowToProportions(p, indexBorrow, indexCollateral, false);\\n      }\\n    }\\n  }\\n\\n  /// @notice Set balances to right proportions using borrow\\n  ///         (it can be necessary if propNotUnderlying18 was changed after swap)\\n  function _fixLeftoversProportions(IterationPlanLib.SwapRepayPlanParams memory p) internal {\\n    uint balanceAsset = IERC20(p.tokens[IDX_ASSET]).balanceOf(address(this));\\n    uint balanceToken = IERC20(p.tokens[IDX_TOKEN]).balanceOf(address(this));\\n    (uint targetAssets,\\n      uint targetTokens\\n    ) = IterationPlanLib._getTargetAmounts(p.prices, p.decs, balanceAsset, balanceToken, p.propNotUnderlying18, IDX_ASSET, IDX_TOKEN);\\n\\n    if (balanceAsset > targetAssets) {\\n      if (balanceAsset - targetAssets > p.liquidationThresholds[IDX_ASSET]) {\\n        _borrowToProportions(p, IDX_ASSET, IDX_TOKEN, balanceAsset, balanceToken, true);\\n      }\\n    } else if (balanceToken > targetTokens) {\\n      if (balanceToken - targetTokens > p.liquidationThresholds[IDX_ASSET]) {\\n        _borrowToProportions(p, IDX_TOKEN, IDX_ASSET, balanceToken, balanceAsset, true);\\n      }\\n    }\\n  }\\n\\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\\n  function _borrowToProportions(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    uint indexCollateral,\\n    uint indexBorrow,\\n    bool checkOppositDebtDoesntExist\\n  ) internal {\\n    _borrowToProportions(\\n      p,\\n      indexCollateral,\\n      indexBorrow,\\n      IERC20(p.tokens[indexCollateral]).balanceOf(address(this)),\\n      IERC20(p.tokens[indexBorrow]).balanceOf(address(this)),\\n      checkOppositDebtDoesntExist\\n    );\\n  }\\n\\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\\n  function _borrowToProportions(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    uint indexCollateral,\\n    uint indexBorrow,\\n    uint balanceCollateral,\\n    uint balanceBorrow,\\n    bool checkOppositDebtDoesntExist\\n  ) internal {\\n    // we are going to change direction of the borrow\\n    // let's ensure that there is no debt in opposite direction\\n    if (checkOppositDebtDoesntExist) {\\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexBorrow], p.tokens[indexCollateral], false);\\n      require(needToRepay < AppLib.DUST_AMOUNT_TOKENS, AppErrors.OPPOSITE_DEBT_EXISTS);\\n    }\\n\\n    BorrowLib.RebalanceAssetsCore memory cac = BorrowLib.RebalanceAssetsCore({\\n      converterLiquidator: BorrowLib.ConverterLiquidator(p.converter, p.liquidator),\\n      assetA: p.tokens[indexCollateral],\\n      assetB: p.tokens[indexBorrow],\\n      propA: indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18,\\n      propB: indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18,\\n    // {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\\n      alpha18: 1e18 * p.prices[indexBorrow] * p.decs[indexCollateral] / p.prices[indexCollateral] / p.decs[indexBorrow],\\n      thresholdA: p.liquidationThresholds[indexCollateral],\\n      addonA: 0,\\n      addonB: 0,\\n      indexA: indexCollateral,\\n      indexB: indexBorrow\\n    });\\n\\n    BorrowLib.openPosition(\\n      cac,\\n      BorrowLib.PricesDecs({\\n        prices: p.prices,\\n        decs: p.decs\\n      }),\\n      balanceCollateral,\\n      balanceBorrow\\n    );\\n  }\\n\\n  /// @notice Calculate amount that should be repaid to get right proportions of assets on balance\\n  ///         Analyse only single borrow-direction: indexCollateral => indexBorrow\\n  /// @return amountToRepay Amount that should be repaid\\n  /// @return borrowInsteadRepay true if repay is not necessary at all and borrow is required instead\\n  ///                            if we need both repay and borrow then false is returned\\n  function _getAmountToRepay2(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    uint indexCollateral,\\n    uint indexBorrow\\n  ) internal view returns (\\n    uint amountToRepay,\\n    bool borrowInsteadRepay\\n  ) {\\n    GetAmountToRepay2Local memory v;\\n    v.c0 = IERC20(p.tokens[indexCollateral]).balanceOf(address(this)) * p.prices[indexCollateral] / p.decs[indexCollateral];\\n    v.b0 = IERC20(p.tokens[indexBorrow]).balanceOf(address(this)) * p.prices[indexBorrow] / p.decs[indexBorrow];\\n\\n    v.x = indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18;\\n    v.y = indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18;\\n    v.alpha = p.prices[indexCollateral] * p.decs[indexBorrow] * 1e18 / p.prices[indexBorrow] / p.decs[indexCollateral];\\n\\n    (uint needToRepay, uint collateralAmountOut) = p.converter.getDebtAmountStored(\\n      address(this),\\n      p.tokens[indexCollateral],\\n      p.tokens[indexBorrow],\\n      true\\n    );\\n\\n    if (needToRepay == 0) {\\n      // check if we need to make reverse borrow to fit to proportions: borrow collateral-asset under borrow-asset\\n      uint targetCollateral = (v.c0 + v.b0) * v.x / (v.x + v.y);\\n      borrowInsteadRepay = targetCollateral > v.c0\\n        && targetCollateral - v.c0\\n        > (p.liquidationThresholds[indexCollateral] * p.prices[indexCollateral] / p.decs[indexCollateral]);\\n    } else {\\n      // initial balances: c0, b0\\n      // we are going to repay amount b and receive (betta * b, b), where betta ~ alpha * totalCollateral / totalBorrow\\n      // we should have x/y = (c0 + betta * b) / (b0 - b)\\n      // so b = (x * b0 - y * c0) / (betta * y + x)\\n      v.b = (int(v.x * v.b0) - int(v.y * v.c0)) / (int(v.y * v.alpha * collateralAmountOut / needToRepay / 1e18) + int(v.x));\\n      if (v.b > 0) {\\n        amountToRepay = uint(v.b);\\n      }\\n    }\\n\\n    return (amountToRepay * p.decs[indexBorrow] / p.prices[indexBorrow], borrowInsteadRepay);\\n  }\\n\\n  /// @notice Swap {aggParams.amountToSwap} using either liquidator or aggregator\\n  /// @dev You can use liquidator as aggregator, so aggregator's logic will be used for the liquidator\\n  /// @param amountIn Calculated amount to be swapped. It can be different from {aggParams.amountToSwap} a bit,\\n  ///                 but aggregators require exact value {aggParams.amountToSwap}, so amountIn is not used with agg.\\n  function _swap(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    SwapByAggParams memory aggParams,\\n    uint indexIn,\\n    uint indexOut,\\n    uint amountIn\\n  ) internal returns (\\n    uint spentAmountIn,\\n    uint updatedPropNotUnderlying18\\n  ) {\\n    // liquidator and aggregator have different logic here:\\n    // - liquidator uses amountIn to swap\\n    // - Aggregator uses amountToSwap for which a route was built off-chain before the call of the swap()\\n    // It's allowed to use aggregator == liquidator, so in this way liquidator will use aggregator's logic (for tests)\\n\\n    if (!aggParams.useLiquidator) {\\n      // aggregator requires exact input amount - aggParams.amountToSwap\\n      // actual amount can be a bit different because the quote function was called in different block\\n      amountIn = aggParams.amountToSwap;\\n    }\\n    address aggregator = aggParams.useLiquidator\\n      ? address(p.liquidator)\\n      : aggParams.aggregator;\\n\\n    require(amountIn <= IERC20(p.tokens[indexIn]).balanceOf(address(this)), AppErrors.NOT_ENOUGH_BALANCE);\\n    // let's ensure that \\\"next swap\\\" is made using correct token\\n    require(aggParams.tokenToSwap == p.tokens[indexIn], AppErrors.INCORRECT_SWAP_BY_AGG_PARAM);\\n\\n    if (amountIn > p.liquidationThresholds[indexIn]) {\\n      AppLib.approveIfNeeded(p.tokens[indexIn], amountIn, aggregator);\\n\\n      uint balanceTokenOutBefore = AppLib.balance(p.tokens[indexOut]);\\n\\n      if (aggParams.useLiquidator) {\\n\\n        (spentAmountIn,) = ConverterStrategyBaseLib._liquidate(\\n          p.converter,\\n          ITetuLiquidator(aggregator),\\n          p.tokens[indexIn],\\n          p.tokens[indexOut],\\n          amountIn,\\n          _ASSET_LIQUIDATION_SLIPPAGE,\\n          p.liquidationThresholds[indexIn],\\n          true\\n        );\\n      } else {\\n        if (aggregator != address(p.liquidator)) {\\n          _checkSwapRouter(aggregator);\\n        }\\n\\n        (bool success, bytes memory result) = aggregator.call(aggParams.swapData);\\n        require(success, string(result));\\n\\n        spentAmountIn = amountIn;\\n      }\\n\\n      require(\\n        p.converter.isConversionValid(\\n          p.tokens[indexIn],\\n          amountIn,\\n          p.tokens[indexOut],\\n          AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\\n          _ASSET_LIQUIDATION_SLIPPAGE\\n        ), AppErrors.PRICE_IMPACT);\\n\\n      emit SwapByAgg(\\n        aggParams.amountToSwap,\\n        amountIn,\\n        AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\\n        amountIn * p.prices[indexIn] * p.decs[indexOut] / p.prices[indexOut] / p.decs[indexIn],\\n        aggregator,\\n        p.tokens[indexIn],\\n        p.tokens[indexOut]\\n      );\\n    }\\n\\n    return (\\n      spentAmountIn,\\n    // p.propNotUnderlying18 contains original proportions that were valid before the swap\\n    // after swap() we need to re-read new values from the pool\\n      p.usePoolProportions\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\n        : p.propNotUnderlying18\\n    );\\n  }\\n  //endregion ------------------------------------------------ Internal helper functions\\n\\n  //region ----------------------------------------- Utils\\n  function getPoolPriceAdjustment(uint poolPriceDecimals) external pure returns (uint adjustment) {\\n    // we assume that decimals never higher than 18\\n    adjustment = poolPriceDecimals < 18 ? 10 ** (18 - poolPriceDecimals) : 1;\\n  }\\n\\n  function _checkSwapRouter(address router) internal pure {\\n    require(router == ONEINCH || router == OPENOCEAN, UNKNOWN_SWAP_ROUTER);\\n  }\\n\\n  /// @notice Extract propNotUnderlying18 from {planEntryData} of the given {planKind}\\n  function _extractProp(uint planKind, bytes memory planEntryData) internal pure returns (\\n    uint propNotUnderlying18,\\n    uint entryDataParamValue\\n  ) {\\n    if (planKind == IterationPlanLib.PLAN_SWAP_REPAY || planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\\n      (, propNotUnderlying18) = abi.decode(planEntryData, (uint, uint));\\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\\n    } else {\\n      require(planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, AppErrors.WRONG_VALUE);\\n      // save \\\"required-amount-to-reduce-debt\\\" to entryDataParamValue\\n      (, propNotUnderlying18, entryDataParamValue) = abi.decode(planEntryData, (uint, uint, uint));\\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\\n    }\\n    return (propNotUnderlying18, entryDataParamValue);\\n  }\\n  //endregion ------------------------------------------ Utils\\n}\\n\",\"keccak256\":\"0x4f83352fff906b68d581d11b43a506408511778712a20a0958ea36a21e413cff\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/pair/PairBasedStrategyLogicLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\nimport \\\"./PairBasedStrategyLib.sol\\\";\\nimport \\\"../ConverterStrategyBaseLib2.sol\\\";\\n\\n/// @notice Library for the UniV3-like strategies with two tokens in the pool\\nlibrary PairBasedStrategyLogicLib {\\n  //region ------------------------------------------------------- Data types\\n  /// @notice Local variables required inside withdrawByAggStep and quoteWithdrawByAgg\\n  struct WithdrawLocal {\\n    /// @notice [underlying, not-underlying]\\n    address[] tokens;\\n    address controller;\\n    /// @notice liquidationThresholds for the {tokens}, greater or equal to {DEFAULT_LIQUIDATION_THRESHOLD}\\n    uint[] liquidationThresholds;\\n    uint planKind;\\n    uint propNotUnderlying18;\\n    uint entryDataParam;\\n  }\\n\\n  /// @notice Common part of all XXXXConverterStrategyLogicLib.State\\n  struct PairState {\\n    address pool;\\n    address strategyProfitHolder;\\n    /// @notice This is underlying\\n    address tokenA;\\n    /// @notice This is not underlying\\n    address tokenB;\\n\\n    bool isStablePool;\\n    /// @notice Tokens are swapped in the pool (pool.tokenB is underlying, pool.tokenA is not-underlying)\\n    bool depositorSwapTokens;\\n\\n    int24 tickSpacing;\\n    int24 lowerTick;\\n    int24 upperTick;\\n    int24 rebalanceTickRange;\\n    uint128 totalLiquidity;\\n\\n    /// @notice Fuse for tokens\\n    PairBasedStrategyLib.FuseStateParams fuseAB;\\n\\n    /// @notice 1 means that the fuse was triggered ON and then all debts were closed\\n    ///         and assets were converter to underlying using withdrawStepByAgg.\\n    ///         This flag is automatically cleared to 0 if fuse is triggered OFF.\\n    uint withdrawDone;\\n\\n    /// @notice Timestamp of last call of rebalanceNoSwaps() or zero if withdrawByAggStep() was called last\\n    uint lastRebalanceNoSwap;\\n\\n    /// @notice reserve space for future needs\\n    uint[50 - 17] __gap;\\n  }\\n\\n  struct RebalanceNoSwapsLocal {\\n    address tokenA;\\n    address tokenB;\\n    bool depositorSwapTokens;\\n    int24 newLowerTick;\\n    int24 newUpperTick;\\n    uint prop0;\\n    uint prop1;\\n  }\\n\\n  struct WithdrawByAggStepLocal {\\n    PairBasedStrategyLogicLib.WithdrawLocal w;\\n    address tokenToSwap;\\n    address aggregator;\\n    address controller;\\n    address converter;\\n    address splitter;\\n    uint amountToSwap;\\n    uint profitToCover;\\n    uint oldTotalAssets;\\n    uint entryToPool;\\n  }\\n  //endregion ------------------------------------------------------- Data types\\n\\n  //region ------------------------------------------------------- Events\\n  //endregion ------------------------------------------------------- Events\\n\\n  //region ------------------------------------------------------- Helpers\\n  /// @notice Prepare array of amounts ready to deposit, borrow missed amounts\\n  /// @param amount_ Amount of tokenA\\n  /// @param tokenA Underlying\\n  /// @param tokenB Not-underlying\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\n  /// @param liquidationThresholds Dust-thresholds for the tokens A and B\\n  /// @return tokenAmounts Amounts of token A and B to be deposited, [A, B]\\n  function _beforeDeposit(\\n    ITetuConverter tetuConverter_,\\n    uint amount_,\\n    address tokenA,\\n    address tokenB,\\n    uint prop0,\\n    mapping(address => uint) storage liquidationThresholds\\n  ) external returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    return BorrowLib.prepareToDeposit(\\n      tetuConverter_,\\n      amount_,\\n      [tokenA, tokenB],\\n      [\\n        AppLib._getLiquidationThreshold(liquidationThresholds[tokenA]),\\n        AppLib._getLiquidationThreshold(liquidationThresholds[tokenB])\\n      ],\\n      prop0\\n    );\\n  }\\n\\n  /// @notice Initialize {dest} in place. Underlying is always first in {dest.tokens}.\\n  /// @param tokens_ [underlying, not-underlying]\\n  function initWithdrawLocal(\\n    WithdrawLocal memory dest,\\n    address[2] memory tokens_,\\n    mapping(address => uint) storage liquidationThresholds,\\n    bytes memory planEntryData,\\n    address controller\\n  ) internal view { // it's internal because it initializes {dest}\\n    dest.controller = controller;\\n    StrategyLib2.onlyOperators(dest.controller);\\n\\n    dest.planKind = IterationPlanLib.getEntryKind(planEntryData);\\n    (dest.propNotUnderlying18, dest.entryDataParam)  = PairBasedStrategyLib._extractProp(dest.planKind, planEntryData);\\n\\n    dest.tokens = new address[](2);\\n    (dest.tokens[0], dest.tokens[1]) = (tokens_[0], tokens_[1]);\\n\\n    dest.liquidationThresholds = new uint[](2);\\n    dest.liquidationThresholds[0] = AppLib._getLiquidationThreshold(liquidationThresholds[dest.tokens[0]]);\\n    dest.liquidationThresholds[1] = AppLib._getLiquidationThreshold(liquidationThresholds[dest.tokens[1]]);\\n  }\\n\\n  function calcTickRange(int24 tick, int24 tickRange, int24 tickSpacing) public pure returns (\\n    int24 lowerTick,\\n    int24 upperTick\\n  ) {\\n    if (tick < 0 && tick / tickSpacing * tickSpacing != tick) {\\n      lowerTick = ((tick - tickRange) / tickSpacing - 1) * tickSpacing;\\n    } else {\\n      lowerTick = (tick - tickRange) / tickSpacing * tickSpacing;\\n    }\\n    upperTick = tickRange == 0 ? lowerTick + tickSpacing : lowerTick + tickRange * 2;\\n  }\\n  //endregion ------------------------------------------------------- Helpers\\n\\n  //region ------------------------------------------------------- PairState-helpers\\n  /// @notice Set the initial values to PairState instance\\n  /// @param pairState Depositor storage state struct to be initialized\\n  /// @param addr [pool, asset, pool.token0(), pool.token1()]\\n  ///        asset: Underlying asset of the depositor.\\n  /// @param tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\\n  /// @param fuseThresholds Fuse thresholds for tokens (stable pool only)\\n  function setInitialDepositorValues(\\n    PairState storage pairState,\\n    address[4] calldata addr,\\n    int24[4] calldata tickData,\\n    bool isStablePool_,\\n    uint[4] calldata fuseThresholds\\n  ) external {\\n    pairState.pool = addr[0];\\n    address asset = addr[1];\\n    address token0 = addr[2];\\n    address token1 = addr[3];\\n\\n    pairState.tickSpacing = tickData[0];\\n    pairState.lowerTick = tickData[1];\\n    pairState.upperTick = tickData[2];\\n    pairState.rebalanceTickRange = tickData[3];\\n\\n    require(asset == token0 || asset == token1, PairBasedStrategyLib.INCORRECT_ASSET);\\n    if (asset == token0) {\\n      pairState.tokenA = token0;\\n      pairState.tokenB = token1;\\n      pairState.depositorSwapTokens = false;\\n    } else {\\n      pairState.tokenA = token1;\\n      pairState.tokenB = token0;\\n      pairState.depositorSwapTokens = true;\\n    }\\n\\n    if (isStablePool_) {\\n      /// for stable pools fuse can be enabled\\n      pairState.isStablePool = true;\\n      PairBasedStrategyLib.setFuseStatus(pairState.fuseAB, PairBasedStrategyLib.FuseStatus.FUSE_OFF_1);\\n      PairBasedStrategyLib.setFuseThresholds(pairState.fuseAB, fuseThresholds);\\n    }\\n\\n    // totalLiquidity is 0, no need to initialize\\n    // withdrawDone is 0, no need to initialize\\n  }\\n\\n  function updateFuseStatus(\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    bool fuseStatusChangedAB,\\n    PairBasedStrategyLib.FuseStatus fuseStatusAB\\n  ) external {\\n    bool updated;\\n    if (fuseStatusChangedAB) {\\n      PairBasedStrategyLib.setFuseStatus(pairState.fuseAB, fuseStatusAB);\\n      updated = true;\\n    }\\n\\n    if (updated) {\\n      // if fuse is triggered ON, full-withdraw is required\\n      // if fuse is triggered OFF, the assets will be deposited back to pool\\n      // in both cases withdrawDone should be reset\\n      pairState.withdrawDone = 0;\\n    }\\n  }\\n\\n  /// @notice Returns the current state of the contract\\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\\n  /// @return nums [totalLiquidity, fuse-status-tokenA, withdrawDone, 4 thresholds of token A, lastRebalanceNoSwap, 5 reserved values]\\n  /// @return boolValues [isStablePool, depositorSwapTokens]\\n  function getDefaultState(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (\\n    address[] memory addr,\\n    int24[] memory tickData,\\n    uint[] memory nums,\\n    bool[] memory boolValues\\n  ) {\\n    addr = new address[](4);\\n    tickData = new int24[](4);\\n    nums = new uint[](13);\\n    boolValues = new bool[](2);\\n\\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_A] = pairState.tokenA;\\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_B] = pairState.tokenB;\\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_POOL] = pairState.pool;\\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER] = pairState.strategyProfitHolder;\\n\\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_TICK_SPACING] = pairState.tickSpacing;\\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_LOWER_TICK] = pairState.lowerTick;\\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_UPPER_TICK] = pairState.upperTick;\\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE] = pairState.rebalanceTickRange;\\n\\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY] = uint(pairState.totalLiquidity);\\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_FUSE_STATUS] = uint(pairState.fuseAB.status);\\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE] = pairState.withdrawDone;\\n    for (uint i = 0; i < 4; ++i) {\\n      nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_THRESHOLD_0 + i] = pairState.fuseAB.thresholds[i];\\n    }\\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP] = pairState.lastRebalanceNoSwap;\\n\\n    boolValues[PairBasedStrategyLib.IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL] = pairState.isStablePool;\\n    boolValues[PairBasedStrategyLib.IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS] = pairState.depositorSwapTokens;\\n  }\\n\\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\\n  /// @param amounts_ Amounts of [underlying, not-underlying] that will be received from the pool before withdrawing\\n  function quoteWithdrawByAgg(\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    bytes memory planEntryData,\\n    uint[] memory amounts_,\\n    address controller_,\\n    ITetuConverter converter_,\\n    mapping(address => uint) storage liquidationThresholds\\n  ) external returns (\\n    address tokenToSwap,\\n    uint amountToSwap\\n  ) {\\n    // check operator-only, initialize w\\n    WithdrawLocal memory w;\\n    initWithdrawLocal(\\n      w,\\n      [pairState.tokenA, pairState.tokenB],\\n      liquidationThresholds,\\n      planEntryData,\\n      controller_\\n    );\\n\\n    (tokenToSwap, amountToSwap) = PairBasedStrategyLib.quoteWithdrawStep(\\n      [address(converter_), address(AppLib._getLiquidator(w.controller))],\\n      w.tokens,\\n      w.liquidationThresholds,\\n      amounts_,\\n      w.planKind,\\n      [w.propNotUnderlying18, w.entryDataParam]\\n    );\\n\\n    if (amountToSwap != 0) {\\n      // withdrawByAggStep will execute REPAY1 - SWAP - REPAY2\\n      // but quoteWithdrawByAgg and withdrawByAggStep are executed in different blocks\\n      // so, REPAY1 can return less collateral than quoteWithdrawByAgg expected\\n      // As result, we can have less amount on balance than required amountToSwap\\n      // So, we need to reduce amountToSwap on small gap amount\\n      amountToSwap -= amountToSwap * PairBasedStrategyLib.GAP_AMOUNT_TO_SWAP / 100_000;\\n    }\\n  }\\n\\n  /// @notice Calculate amounts to be deposited to pool, calculate loss, fix profitToCover\\n  /// @param addr_ [tokenToSwap, aggregator, controller, converter, splitter]\\n  /// @param values_ [amountToSwap_, profitToCover, oldTotalAssets, not used here]\\n  /// @param tokens [underlying, not-underlying] (values been read from pairBase)\\n  /// @return completed All debts were closed, leftovers were swapped to proper proportions\\n  /// @return tokenAmounts Amounts to be deposited to pool. If {tokenAmounts} contains zero amount return empty array.\\n  function withdrawByAggStep(\\n    address[5] calldata addr_,\\n    uint[4] calldata values_,\\n    bytes memory swapData,\\n    bytes memory planEntryData,\\n    address[2] memory tokens,\\n    mapping(address => uint) storage liquidationThresholds\\n  ) external returns (\\n    bool completed,\\n    uint[] memory tokenAmounts,\\n    uint loss\\n  ) {\\n    WithdrawByAggStepLocal memory v;\\n\\n    v.tokenToSwap = addr_[0];\\n    v.aggregator = addr_[1];\\n    v.controller = addr_[2];\\n    v.converter = addr_[3];\\n    v.splitter = addr_[4];\\n\\n    v.amountToSwap = values_[0];\\n    v.profitToCover = values_[1];\\n    v.oldTotalAssets = values_[2];\\n\\n    // initialize v\\n    PairBasedStrategyLogicLib.initWithdrawLocal(v.w, tokens, liquidationThresholds, planEntryData, v.controller);\\n\\n    // make withdraw iteration according to the selected plan\\n    completed = PairBasedStrategyLib.withdrawStep(\\n      [v.converter, address(AppLib._getLiquidator(v.w.controller))],\\n      v.w.tokens,\\n      v.w.liquidationThresholds,\\n      v.tokenToSwap,\\n      v.amountToSwap,\\n      v.aggregator,\\n      swapData,\\n      v.aggregator == address(0),\\n      v.w.planKind,\\n      [v.w.propNotUnderlying18, v.w.entryDataParam]\\n    );\\n\\n    // fix loss / profitToCover\\n    if (v.profitToCover != 0) {\\n      ConverterStrategyBaseLib2.sendToInsurance(\\n        v.w.tokens[0],\\n        v.profitToCover,\\n        v.splitter,\\n        v.oldTotalAssets,\\n        IERC20(v.w.tokens[0]).balanceOf(address(this))\\n      );\\n    }\\n\\n    (loss, tokenAmounts) = ConverterStrategyBaseLib2.getTokenAmountsPair(\\n      ITetuConverter(v.converter),\\n      v.oldTotalAssets,\\n      v.w.tokens[0],\\n      v.w.tokens[1],\\n      [v.w.liquidationThresholds[0], v.w.liquidationThresholds[1]]\\n    );\\n  }\\n\\n  /// @notice Rebalance asset to proportions {propTokenA}:{1e18-propTokenA}, fix profitToCover\\n  /// @param propTokenA Proportion of {tokenA}, > 0. Proportion of {tokenB} is calculates as 1e18 - prop0\\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\\n  function _rebalanceNoSwaps(\\n    address[2] calldata converterLiquidator,\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    uint profitToCover,\\n    uint totalAssets,\\n    address splitter,\\n    uint[2] calldata liquidationThresholdsAB,\\n    uint propTokenA\\n  ) internal {\\n    address tokenA = pairState.tokenA;\\n    address tokenB = pairState.tokenB;\\n\\n    BorrowLib.rebalanceAssets(\\n      ITetuConverter(converterLiquidator[0]),\\n      ITetuLiquidator(converterLiquidator[1]),\\n      tokenA,\\n      tokenB,\\n      propTokenA,\\n      liquidationThresholdsAB[0], // liquidityThreshold of token A\\n      liquidationThresholdsAB[1], // liquidityThreshold of token B\\n      profitToCover\\n    );\\n\\n    // we assume here, that rebalanceAssets provides profitToCover on balance and set leftovers to right proportions\\n    if (profitToCover != 0) {\\n      ConverterStrategyBaseLib2.sendToInsurance(tokenA, profitToCover, splitter, totalAssets, IERC20(tokenA).balanceOf(address(this)));\\n    }\\n  }\\n  //endregion ------------------------------------------------------- PairState-helpers\\n\\n  //region ------------------------------------------------------- needStrategyRebalance\\n  /// @notice Determine if the strategy needs to be rebalanced.\\n  /// @return needRebalance A boolean indicating if {rebalanceNoSwaps} should be called\\n  function needStrategyRebalance(\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    ITetuConverter converter_,\\n    int24 tick,\\n    uint poolPrice\\n  ) external view returns (\\n    bool needRebalance,\\n    bool fuseStatusChangedAB,\\n    PairBasedStrategyLib.FuseStatus fuseStatusAB\\n  ) {\\n    if (pairState.isStablePool) {\\n      uint price = ConverterStrategyBaseLib2.getOracleAssetsPrice(\\n        converter_,\\n        pairState.tokenA,\\n        pairState.tokenB\\n      );\\n      (fuseStatusChangedAB, fuseStatusAB) = PairBasedStrategyLib.needChangeFuseStatus(pairState.fuseAB, price, poolPrice);\\n      needRebalance = fuseStatusChangedAB\\n        || (\\n          !PairBasedStrategyLib.isFuseTriggeredOn(fuseStatusAB)\\n          && _needPoolRebalance(pairState, tick)\\n        );\\n    } else {\\n      needRebalance = _needPoolRebalance(pairState, tick);\\n    }\\n\\n    return (needRebalance, fuseStatusChangedAB, fuseStatusAB); // hide warning\\n  }\\n\\n  /// @notice Determine if the pool needs to be rebalanced.\\n  /// @return A boolean indicating if the pool needs to be rebalanced.\\n  function _needPoolRebalance(\\n    int24 tick,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    int24 tickSpacing,\\n    int24 rebalanceTickRange\\n  ) internal pure returns (bool) {\\n    if (upperTick - lowerTick == tickSpacing) {\\n      return tick < lowerTick || tick >= upperTick;\\n    } else {\\n      int24 halfRange = (upperTick - lowerTick) / 2;\\n      int24 oldMedianTick = lowerTick + halfRange;\\n      return (tick > oldMedianTick)\\n        ? tick - oldMedianTick >= rebalanceTickRange\\n        : oldMedianTick - tick > rebalanceTickRange;\\n    }\\n  }\\n\\n  function _needPoolRebalance(PairBasedStrategyLogicLib.PairState storage pairState, int24 tick) internal view returns (bool) {\\n    return _needPoolRebalance(\\n      tick,\\n      pairState.lowerTick,\\n      pairState.upperTick,\\n      pairState.tickSpacing,\\n      pairState.rebalanceTickRange\\n    );\\n  }\\n  //endregion ------------------------------------------------------- needStrategyRebalance\\n}\\n\",\"keccak256\":\"0x44f74c6c8391dc071b03ce4a3fada185bab9d6aa6bb11c709edb03404175884f\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/uniswap/Uni3StrategyErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nlibrary Uni3StrategyErrors {\\n\\n  string public constant NEED_REBALANCE = \\\"U3S-1 Need rebalance\\\";\\n  string public constant WRONG_BALANCE = \\\"U3S-2 Wrong balance\\\";\\n  string public constant INCORRECT_TICK_RANGE = \\\"U3S-3 Incorrect tickRange\\\";\\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \\\"U3S-4 Incorrect rebalanceTickRange\\\";\\n  string public constant INCORRECT_ASSET = \\\"U3S-5 Incorrect asset\\\";\\n  string public constant WRONG_FEE = \\\"U3S-6 Wrong fee\\\";\\n  string public constant WRONG_LIQUIDITY = \\\"U3S-7 Wrong liquidity\\\";\\n  string public constant WRONG_FILLUP = \\\"U3S-8 Wrong fillup\\\";\\n  string public constant NO_REBALANCE_NEEDED = \\\"U3S-9 No rebalance needed\\\";\\n  string public constant BALANCE_LOWER_THAN_FEE = \\\"U3S-10 Balance lower than fee\\\";\\n  string public constant NOT_CALLBACK_CALLER = \\\"U3S-11 Not callback caller\\\";\\n  string public constant ZERO_PROFIT_HOLDER = \\\"U3S-13 Zero strategy profit holder\\\";\\n  string public constant FUSE_IS_ACTIVE = \\\"U3S-14 Fuse is active\\\";\\n\\n}\\n\",\"keccak256\":\"0x5f3c81f5fb4c6d83a642783d560fe18c8483840c9e8dc9cf5f87fdf574575de3\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"../ConverterStrategyBase.sol\\\";\\nimport \\\"./UniswapV3Depositor.sol\\\";\\nimport \\\"./UniswapV3ConverterStrategyLogicLib.sol\\\";\\nimport \\\"../../libs/AppPlatforms.sol\\\";\\nimport \\\"../../interfaces/IRebalancingV2Strategy.sol\\\";\\nimport \\\"./Uni3StrategyErrors.sol\\\";\\nimport \\\"../pair/PairBasedStrategyLib.sol\\\";\\nimport \\\"../pair/PairBasedStrategyLogicLib.sol\\\";\\n\\n/// @title Delta-neutral liquidity hedging converter fill-up/swap rebalancing strategy for UniswapV3\\n/// @notice This strategy provides delta-neutral liquidity hedging for Uniswap V3 pools. It rebalances the liquidity\\n///         by utilizing fill-up and swap methods depending on the range size of the liquidity provided.\\n/// @author a17\\ncontract UniswapV3ConverterStrategy is UniswapV3Depositor, ConverterStrategyBase, IRebalancingV2Strategy {\\n\\n  //region ------------------------------------------------- Constants\\n\\n  string public constant override NAME = \\\"UniswapV3 Converter Strategy\\\";\\n  string public constant override PLATFORM = AppPlatforms.UNIV3;\\n  string public constant override STRATEGY_VERSION = \\\"3.1.1\\\";\\n\\n  //endregion ------------------------------------------------- Constants\\n\\n  //region ------------------------------------------------- INIT\\n\\n  /// @notice Initialize the strategy with the given parameters.\\n  /// @param controller_ The address of the controller.\\n  /// @param splitter_ The address of the splitter.\\n  /// @param converter_ The address of the converter.\\n  /// @param pool_ The address of the pool.\\n  /// @param tickRange_ The tick range for the liquidity position.\\n  /// @param rebalanceTickRange_ The tick range for rebalancing.\\n  /// @param fuseThresholds Price thresholds for tokens [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\n  function init(\\n    address controller_,\\n    address splitter_,\\n    address converter_,\\n    address pool_,\\n    int24 tickRange_,\\n    int24 rebalanceTickRange_,\\n    uint[4] calldata fuseThresholds\\n  ) external initializer {\\n    __ConverterStrategyBase_init(controller_, splitter_, converter_);\\n    UniswapV3ConverterStrategyLogicLib.initStrategyState(\\n      state,\\n      controller_,\\n      pool_,\\n      tickRange_,\\n      rebalanceTickRange_,\\n      ISplitter(splitter_).asset(),\\n      fuseThresholds\\n    );\\n\\n    // setup specific name for UI\\n    StrategyLib2._changeStrategySpecificName(baseState, UniswapV3ConverterStrategyLogicLib.createSpecificName(state.pair));\\n  }\\n  //endregion ------------------------------------------------- INIT\\n\\n  //region --------------------------------------------- OPERATOR ACTIONS\\n\\n  /// @notice Manually set status of the fuse\\n  /// @param status See PairBasedStrategyLib.FuseStatus enum for possible values\\n  function setFuseStatus(uint status) external {\\n    StrategyLib2.onlyOperators(controller());\\n    PairBasedStrategyLib.setFuseStatus(state.pair.fuseAB, PairBasedStrategyLib.FuseStatus(status));\\n  }\\n\\n  /// @notice Set thresholds for the fuse: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\n  ///         Decimals 18. The thresholds are compared with prices from TetuConverter's price oracle.\\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\\n  /// @param values Price thresholds: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\n  function setFuseThresholds(uint[4] memory values) external {\\n    StrategyLib2.onlyOperators(controller());\\n    PairBasedStrategyLib.setFuseThresholds(state.pair.fuseAB, values);\\n  }\\n\\n  /// @dev Set a dedicated contract for rewards for properly counting.\\n  ///      It is safe to allow change it to operator - we suppose the contract only temporally store the last rewards.\\n  function setStrategyProfitHolder(address strategyProfitHolder) external {\\n    StrategyLib2.onlyOperators(controller());\\n    state.pair.strategyProfitHolder = strategyProfitHolder;\\n  }\\n\\n  /// @notice Set withdrawDone value.\\n  ///         When a fuse was triggered ON, all debts should be closed and asset should be converted to underlying.\\n  ///         After completion of the conversion withdrawDone can be set to 1.\\n  ///         So, {getFuseStatus} will return  withdrawDone=1 and you will know, that withdraw is not required\\n  /// @param done 0 - full withdraw required, 1 - full withdraw was done\\n  function setWithdrawDone(uint done) external {\\n    StrategyLib2.onlyOperators(controller());\\n    state.pair.withdrawDone = done;\\n  }\\n  //endregion --------------------------------------------- OPERATOR ACTIONS\\n\\n  //region --------------------------------------------- METRIC VIEWS\\n\\n  /// @notice Check if the strategy is ready for hard work.\\n  /// @return A boolean indicating if the strategy is ready for hard work.\\n  function isReadyToHardWork() override external virtual view returns (bool) {\\n    return !needRebalance()\\n    && !_isFuseTriggeredOn()\\n    && UniswapV3ConverterStrategyLogicLib.isReadyToHardWork(state.pair, _csbs.converter);\\n  }\\n\\n  /// @notice Check if the strategy needs rebalancing.\\n  /// @return A boolean indicating if {rebalanceNoSwaps} should be called.\\n  function needRebalance() public view override returns (bool) {\\n    return UniswapV3ConverterStrategyLogicLib.needStrategyRebalance(state.pair, _csbs.converter);\\n  }\\n\\n  /// @notice Returns the current state of the contract\\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\\n  /// @return nums [totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]\\n  /// @return boolValues [isStablePool, depositorSwapTokens]\\n  function getDefaultState() external view override returns (\\n    address[] memory addr,\\n    int24[] memory tickData,\\n    uint[] memory nums,\\n    bool[] memory boolValues\\n  ) {\\n    return PairBasedStrategyLogicLib.getDefaultState(state.pair);\\n  }\\n  //endregion ---------------------------------------------- METRIC VIEWS\\n\\n  //region--------------------------------------------- REBALANCE\\n  /// @notice Rebalance using borrow/repay only, no swaps\\n  /// @param checkNeedRebalance Revert if rebalance is not needed. Pass false to deposit after withdrawByAgg-iterations\\n  function rebalanceNoSwaps(bool checkNeedRebalance) external override {\\n    address _controller = controller();\\n    StrategyLib2.onlyOperators(_controller);\\n\\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\\n    uint[] memory tokenAmounts = UniswapV3ConverterStrategyLogicLib.rebalanceNoSwaps(\\n      _csbs,\\n      state.pair,\\n      [address(_csbs.converter), address(AppLib._getLiquidator(_controller))],\\n      oldTotalAssets,\\n      profitToCover,\\n      baseState.splitter,\\n      checkNeedRebalance,\\n      liquidationThresholds\\n    );\\n    _rebalanceAfter(tokenAmounts);\\n    state.pair.lastRebalanceNoSwap = block.timestamp;\\n  }\\n  //endregion--------------------------------------------- REBALANCE\\n\\n  //region --------------------------------------------- Withdraw by iterations\\n\\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\\n  function quoteWithdrawByAgg(bytes memory planEntryData) external returns (address tokenToSwap, uint amountToSwap) {\\n    // restriction \\\"operator only\\\" is checked inside {initWithdrawLocal} in {quoteWithdrawStep}\\n\\n    // estimate amounts to be withdrawn from the pool\\n    uint totalLiquidity = state.pair.totalLiquidity;\\n    uint[] memory amountsOut = (totalLiquidity == 0)\\n      ? new uint[](2)\\n      : _depositorQuoteExit(totalLiquidity);\\n\\n    return PairBasedStrategyLogicLib.quoteWithdrawByAgg(\\n      state.pair,\\n      planEntryData,\\n      amountsOut,\\n      controller(),\\n      _csbs.converter,\\n      liquidationThresholds\\n    );\\n  }\\n\\n  /// @notice Make withdraw iteration: [exit from the pool], [make 1 swap], [repay a debt], [enter to the pool]\\n  ///         Typical sequence of the actions is: exit from the pool, make 1 swap, repay 1 debt.\\n  ///         You can enter to the pool if you are sure that you won't have borrow + repay on AAVE3 in the same block.\\n  /// @dev All swap-by-agg data should be prepared using {quoteWithdrawByAgg} off-chain\\n  /// @param tokenToSwap_ What token should be swapped to other\\n  /// @param aggregator_ Aggregator that should be used on next swap. 0 - use liquidator\\n  /// @param amountToSwap_ Amount that should be swapped. 0 - no swap\\n  /// @param swapData Swap rote that was prepared off-chain.\\n  /// @param planEntryData PLAN_XXX + additional data, see IterationPlanKinds\\n  /// @param entryToPool Allow to enter to the pool at the end. Use false if you are going to make several iterations.\\n  ///                    It's possible to enter back to the pool by calling {rebalanceNoSwaps} at any moment\\n  ///                    0 - not allowed, 1 - allowed, 2 - allowed only if completed\\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions.\\n  function withdrawByAggStep(\\n    address tokenToSwap_,\\n    address aggregator_,\\n    uint amountToSwap_,\\n    bytes memory swapData,\\n    bytes memory planEntryData,\\n    uint entryToPool\\n  ) external returns (bool completed) {\\n    // restriction \\\"operator only\\\" is checked inside UniswapV3ConverterStrategyLogicLib.withdrawByAggStep\\n\\n    // fix price changes, exit from the pool\\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\\n\\n    // check \\\"operator only\\\", make withdraw step, cover-loss, send profit to cover, prepare to enter to the pool\\n    uint[] memory tokenAmounts;\\n\\n    (completed, tokenAmounts) = UniswapV3ConverterStrategyLogicLib.withdrawByAggStep(\\n      _csbs,\\n      [tokenToSwap_, aggregator_, controller(), address(_csbs.converter), baseState.splitter],\\n      [amountToSwap_, profitToCover, oldTotalAssets, entryToPool],\\n      swapData,\\n      planEntryData,\\n      state.pair,\\n      liquidationThresholds\\n    );\\n\\n    // enter to the pool\\n    _rebalanceAfter(tokenAmounts);\\n    state.pair.lastRebalanceNoSwap = 0;\\n\\n    if (completed && _isFuseTriggeredOn()) {\\n      // full withdraw was completed, we can exclude next calls of withdrawByAggStep\\n      state.pair.withdrawDone = 1;\\n    }\\n\\n    ConverterStrategyBaseLib2.fixTooHighInvestedAssets(baseState.asset, oldTotalAssets, _csbs);\\n  }\\n\\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\\n  /// @return Proportion of the not-underlying [0...1e18]\\n  function getPropNotUnderlying18() external view override returns (uint) {\\n    return UniswapV3ConverterStrategyLogicLib.getPropNotUnderlying18(state.pair);\\n  }\\n  //endregion ------------------------------------ Withdraw by iterations\\n\\n  //region--------------------------------------------- INTERNAL LOGIC\\n\\n  function _beforeDeposit(\\n    ITetuConverter converter_,\\n    uint amount_,\\n    address[] memory tokens_,\\n    uint /*indexAsset_*/\\n  ) override internal virtual returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    require(!needRebalance(), Uni3StrategyErrors.NEED_REBALANCE);\\n    (uint prop0, uint prop1) = UniswapV3ConverterStrategyLogicLib.getEntryDataProportions(\\n      IUniswapV3Pool(state.pair.pool),\\n      state.pair.lowerTick,\\n      state.pair.upperTick,\\n      state.pair.depositorSwapTokens\\n    );\\n\\n    // get token amounts for token A, token B\\n    address tokenA = state.pair.tokenA;\\n    tokenAmounts = PairBasedStrategyLogicLib._beforeDeposit(\\n      converter_,\\n      amount_,\\n      tokenA,\\n      state.pair.tokenB,\\n      prop0 * 1e18 / (prop0 + prop1),\\n      liquidationThresholds\\n    );\\n\\n    // take into account a possibility that tokens_ can contain [B, A]\\n    if (tokens_[0] != tokenA) {\\n      (tokenAmounts[0], tokenAmounts[1]) = (tokenAmounts[1], tokenAmounts[0]);\\n    }\\n  }\\n\\n  /// @notice Claim rewards, do _processClaims() after claiming, calculate earned and lost amounts\\n  /// @return earned The amount of earned rewards\\n  /// @return lost The amount of lost rewards\\n  /// @return assetBalanceAfterClaim The asset balance after claiming rewards.\\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\\n  function _handleRewards() override internal virtual returns (\\n    uint earned,\\n    uint lost,\\n    uint assetBalanceAfterClaim,\\n    uint paidDebtToInsurance\\n  ) {\\n    (address[] memory rewardTokens, uint[] memory amounts) = _claim();\\n    address asset = baseState.asset;\\n    earned = UniswapV3ConverterStrategyLogicLib.calcEarned(asset, controller(), rewardTokens, amounts);\\n    paidDebtToInsurance = _rewardsLiquidation(rewardTokens, amounts);\\n    lost = 0; // hide warning\\n    assetBalanceAfterClaim = AppLib.balance(asset);\\n  }\\n\\n  /// @notice Deposit given amount to the pool.\\n  /// @param amount_ The amount to be deposited.\\n  /// @param updateTotalAssetsBeforeInvest_ A boolean indicating if the total assets should be updated before investing.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _depositToPool(uint amount_, bool updateTotalAssetsBeforeInvest_) override internal virtual returns (\\n    uint strategyLoss\\n  ) {\\n    if (_isFuseTriggeredOn()) {\\n      uint[] memory tokenAmounts = new uint[](2);\\n      tokenAmounts[0] = amount_;\\n      emit OnDepositorEnter(tokenAmounts, tokenAmounts);\\n      return 0;\\n    } else {\\n      return super._depositToPool(amount_, updateTotalAssetsBeforeInvest_);\\n    }\\n  }\\n\\n  function _beforeWithdraw(uint /*amount*/) internal view override {\\n    require(!needRebalance(), Uni3StrategyErrors.NEED_REBALANCE);\\n  }\\n\\n  /// @notice Check need-rebalance and fuse-ON\\n  /// @return True if the hardwork should be skipped\\n  function _preHardWork(bool reInvest) internal view override returns (bool) {\\n    reInvest; // hide warning\\n    require(!needRebalance(), Uni3StrategyErrors.NEED_REBALANCE);\\n    require(!_isFuseTriggeredOn(), Uni3StrategyErrors.FUSE_IS_ACTIVE);\\n    return false;\\n  }\\n\\n  /// @notice Prepare to rebalance: fix price changes, call depositor exit if totalLiquidity != 0\\n  function _rebalanceBefore() internal returns (uint profitToCover, uint oldTotalAssets) {\\n    (, profitToCover) = _fixPriceChanges(true);\\n    oldTotalAssets = totalAssets() - profitToCover;\\n\\n    // withdraw all liquidity from pool\\n    // after disableFuse() liquidity is zero\\n    uint liquidity = state.pair.totalLiquidity;\\n    if (liquidity != 0) {\\n      _depositorExit(liquidity, false);\\n    }\\n  }\\n\\n  /// @notice Make actions after rebalance: depositor enter, update invested assets\\n  function _rebalanceAfter(uint[] memory tokenAmounts) internal {\\n    if (tokenAmounts.length == 2 && !_isFuseTriggeredOn()) {\\n      _depositorEnter(tokenAmounts);\\n    }\\n    _updateInvestedAssets();\\n  }\\n\\n  function _isFuseTriggeredOn() internal view returns (bool) {\\n    return PairBasedStrategyLib.isFuseTriggeredOn(state.pair.fuseAB.status);\\n  }\\n  //endregion--------------------------------------- INTERNAL LOGIC\\n}\\n\",\"keccak256\":\"0xab7f63e31b3de6f48ad2d2119ff9ab8bdac73d061ef116bce7bffea2d1716e50\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/uniswap/UniswapV3ConverterStrategyLogicLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./UniswapV3Lib.sol\\\";\\nimport \\\"./UniswapV3DebtLib.sol\\\";\\nimport \\\"./Uni3StrategyErrors.sol\\\";\\nimport \\\"../../libs/AppLib.sol\\\";\\nimport \\\"../../libs/AppErrors.sol\\\";\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\nimport \\\"../ConverterStrategyBaseLib2.sol\\\";\\nimport \\\"../pair/PairBasedStrategyLib.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"../pair/PairBasedStrategyLogicLib.sol\\\";\\n\\nlibrary UniswapV3ConverterStrategyLogicLib {\\n  using SafeERC20 for IERC20;\\n\\n  //region ------------------------------------------------ Constants\\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_STABLE = 300;\\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE = 500;\\n  uint internal constant HARD_WORK_USD_FEE_THRESHOLD = 100;\\n  //endregion ------------------------------------------------ Constants\\n\\n  //region ------------------------------------------------ Events\\n  event Rebalanced(uint loss, uint profitToCover, uint coveredByRewards);\\n  event RebalancedDebt(uint loss, uint profitToCover, uint coveredByRewards);\\n  event UniV3FeesClaimed(uint fee0, uint fee1);\\n  //endregion ------------------------------------------------ Events\\n\\n  //region ------------------------------------------------ Data types\\n\\n  struct State {\\n    PairBasedStrategyLogicLib.PairState pair;\\n    // additional (specific) state\\n\\n    /// @dev reserve space for future needs\\n    uint[10] __gap;\\n  }\\n\\n  struct RebalanceLocal {\\n    /// @notice Fuse for token A and token B\\n    PairBasedStrategyLib.FuseStateParams fuseAB;\\n    ITetuConverter converter;\\n    IUniswapV3Pool pool;\\n    address tokenA;\\n    address tokenB;\\n    bool isStablePool;\\n    uint[2] liquidationThresholdsAB;\\n\\n    bool fuseStatusChangedAB;\\n    PairBasedStrategyLib.FuseStatus fuseStatusAB;\\n\\n    uint poolPrice;\\n    uint poolPriceAdjustment;\\n  }\\n  //endregion ------------------------------------------------ Data types\\n\\n  //region ------------------------------------------------ Helpers\\n\\n  /// @dev Gets the liquidator swap slippage based on the pool type (stable or volatile).\\n  /// @param pool The IUniswapV3Pool instance.\\n  /// @return The liquidator swap slippage percentage.\\n  function _getLiquidatorSwapSlippage(IUniswapV3Pool pool) internal view returns (uint) {\\n    return isStablePool(pool) ? LIQUIDATOR_SWAP_SLIPPAGE_STABLE : LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE;\\n  }\\n\\n  /// @notice Check if the given pool is a stable pool.\\n  /// @param pool The Uniswap V3 pool.\\n  /// @return A boolean indicating if the pool is stable.\\n  function isStablePool(IUniswapV3Pool pool) public view returns (bool) {\\n    return pool.fee() == 100;\\n  }\\n\\n  /// @param fuseThresholds Fuse thresholds for tokens (stable pool only)\\n  function initStrategyState(\\n    State storage state,\\n    address controller_,\\n    address pool,\\n    int24 tickRange,\\n    int24 rebalanceTickRange,\\n    address asset_,\\n    uint[4] calldata fuseThresholds\\n  ) external {\\n    require(pool != address(0), AppErrors.ZERO_ADDRESS);\\n    address token0 = IUniswapV3Pool(pool).token0();\\n    address token1 = IUniswapV3Pool(pool).token1();\\n\\n    int24[4] memory tickData;\\n    {\\n      int24 tickSpacing = UniswapV3Lib.getTickSpacing(IUniswapV3Pool(pool).fee());\\n      if (tickRange != 0) {\\n        require(tickRange == tickRange / tickSpacing * tickSpacing, PairBasedStrategyLib.INCORRECT_TICK_RANGE);\\n        require(rebalanceTickRange == rebalanceTickRange / tickSpacing * tickSpacing, PairBasedStrategyLib.INCORRECT_REBALANCE_TICK_RANGE);\\n      }\\n      tickData[0] = tickSpacing;\\n      (tickData[1], tickData[2]) = UniswapV3DebtLib.calcTickRange(pool, tickRange, tickSpacing);\\n      tickData[3] = rebalanceTickRange;\\n    }\\n\\n    PairBasedStrategyLogicLib.setInitialDepositorValues(\\n      state.pair,\\n      [pool, asset_, token0, token1],\\n      tickData,\\n      isStablePool(IUniswapV3Pool(pool)),\\n      fuseThresholds\\n    );\\n\\n    address liquidator = IController(controller_).liquidator();\\n    IERC20(token0).approve(liquidator, type(uint).max);\\n    IERC20(token1).approve(liquidator, type(uint).max);\\n  }\\n\\n  function createSpecificName(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (string memory) {\\n    return string(abi.encodePacked(\\n      \\\"UniV3 \\\",\\n      IERC20Metadata(pairState.tokenA).symbol(),\\n      \\\"/\\\",\\n      IERC20Metadata(pairState.tokenB).symbol(),\\n      \\\"-\\\",\\n      StringLib._toString(IUniswapV3Pool(pairState.pool).fee()))\\n    );\\n  }\\n\\n  /// @notice Calculate proportions of the tokens for entry kind 1\\n  /// @param pool Pool instance.\\n  /// @param lowerTick The lower tick of the pool's main range.\\n  /// @param upperTick The upper tick of the pool's main range.\\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\\n  function getEntryDataProportions(IUniswapV3Pool pool, int24 lowerTick, int24 upperTick, bool depositorSwapTokens) external view returns (uint, uint) {\\n    return UniswapV3DebtLib.getEntryDataProportions(pool, lowerTick, upperTick, depositorSwapTokens);\\n  }\\n  //endregion ------------------------------------------------ Helpers\\n\\n  //region ------------------------------------------------ Pool info\\n  /// @notice Retrieve the reserves of a Uniswap V3 pool managed by this contract.\\n  /// @param pairState The State storage containing the pool's information.\\n  /// @return reserves An array containing the reserve amounts of the contract owned liquidity.\\n  function getPoolReserves(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (\\n    uint[] memory reserves\\n  ) {\\n    reserves = new uint[](2);\\n    (uint160 sqrtRatioX96, , , , , ,) = IUniswapV3Pool(pairState.pool).slot0();\\n\\n    (reserves[0], reserves[1]) = UniswapV3Lib.getAmountsForLiquidity(\\n      sqrtRatioX96,\\n      pairState.lowerTick,\\n      pairState.upperTick,\\n      pairState.totalLiquidity\\n    );\\n\\n    if (pairState.depositorSwapTokens) {\\n      (reserves[0], reserves[1]) = (reserves[1], reserves[0]);\\n    }\\n  }\\n\\n  /// @notice Retrieve the fees generated by a Uniswap V3 pool managed by this contract.\\n  /// @param pairState The State storage containing the pool's information.\\n  /// @return fee0 The fees generated for the first token in the pool.\\n  /// @return fee1 The fees generated for the second token in the pool.\\n  function getFees(PairBasedStrategyLogicLib.PairState storage pairState) public view returns (uint fee0, uint fee1) {\\n    UniswapV3Lib.PoolPosition memory position = UniswapV3Lib.PoolPosition(pairState.pool, pairState.lowerTick, pairState.upperTick, pairState.totalLiquidity, address(this));\\n    (fee0, fee1) = UniswapV3Lib.getFees(position);\\n  }\\n\\n  /// @notice Estimate the exit amounts for a given liquidity amount in a Uniswap V3 pool.\\n  /// @param liquidityAmountToExit The amount of liquidity to exit.\\n  /// @return amountsOut An array containing the estimated exit amounts for each token in the pool.\\n  function quoteExit(\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    uint128 liquidityAmountToExit\\n  ) public view returns (uint[] memory amountsOut) {\\n    amountsOut = new uint[](2);\\n    (uint160 sqrtRatioX96, , , , , ,) = IUniswapV3Pool(pairState.pool).slot0();\\n\\n    (amountsOut[0], amountsOut[1]) = UniswapV3Lib.getAmountsForLiquidity(\\n      sqrtRatioX96,\\n      pairState.lowerTick,\\n      pairState.upperTick,\\n      liquidityAmountToExit\\n    );\\n\\n    if (pairState.depositorSwapTokens) {\\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\\n    }\\n  }\\n  //endregion ------------------------------------------------ Pool info\\n\\n  //region ------------------------------------------------ Join the pool\\n  /// @notice Enter the pool and provide liquidity with desired token amounts.\\n  /// @param pool The Uniswap V3 pool to provide liquidity to.\\n  /// @param lowerTick The lower tick value for the pool.\\n  /// @param upperTick The upper tick value for the pool.\\n  /// @param amountsDesired_ An array containing the desired amounts of tokens to provide liquidity.\\n  /// @param totalLiquidity The current total liquidity in the pool.\\n  /// @param _depositorSwapTokens A boolean indicating if need to use token B instead of token A.\\n  /// @return amountsConsumed An array containing the consumed amounts for each token in the pool.\\n  /// @return liquidityOut The amount of liquidity added to the pool.\\n  /// @return totalLiquidityNew The updated total liquidity after providing liquidity.\\n  function enter(\\n    IUniswapV3Pool pool,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    uint[] memory amountsDesired_,\\n    uint128 totalLiquidity,\\n    bool _depositorSwapTokens\\n  ) external returns (uint[] memory amountsConsumed, uint liquidityOut, uint128 totalLiquidityNew) {\\n    amountsConsumed = new uint[](2);\\n\\n    if (amountsDesired_[1] > 0) {\\n      if (_depositorSwapTokens) {\\n        (amountsDesired_[0], amountsDesired_[1]) = (amountsDesired_[1], amountsDesired_[0]);\\n      }\\n      uint128 newLiquidity;\\n      (amountsConsumed[0], amountsConsumed[1], newLiquidity) = UniswapV3Lib.addLiquidityPreview(address(pool), lowerTick, upperTick, amountsDesired_[0], amountsDesired_[1]);\\n      pool.mint(address(this), lowerTick, upperTick, newLiquidity, \\\"\\\");\\n      liquidityOut = uint(newLiquidity);\\n      totalLiquidityNew = totalLiquidity + newLiquidity;\\n      if (_depositorSwapTokens) {\\n        (amountsConsumed[0], amountsConsumed[1]) = (amountsConsumed[1], amountsConsumed[0]);\\n      }\\n    }\\n\\n    return (amountsConsumed, liquidityOut, totalLiquidityNew);\\n  }\\n\\n  //endregion ------------------------------------------------ Join the pool\\n\\n  //region ------------------------------------------------ Exit from the pool\\n  /// @notice Exit the pool and collect tokens proportional to the liquidity amount to exit.\\n  /// @param pairState The State storage object.\\n  /// @param liquidityAmountToExit The amount of liquidity to exit.\\n  /// @return amountsOut An array containing the collected amounts for each token in the pool.\\n  function exit(\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    uint128 liquidityAmountToExit\\n  ) external returns (uint[] memory amountsOut) {\\n    IUniswapV3Pool pool = IUniswapV3Pool(pairState.pool);\\n    int24 lowerTick = pairState.lowerTick;\\n    int24 upperTick = pairState.upperTick;\\n    uint128 liquidity = pairState.totalLiquidity;\\n    bool _depositorSwapTokens = pairState.depositorSwapTokens;\\n\\n    require(liquidity >= liquidityAmountToExit, Uni3StrategyErrors.WRONG_LIQUIDITY);\\n\\n    amountsOut = new uint[](2);\\n    (amountsOut[0], amountsOut[1]) = pool.burn(lowerTick, upperTick, liquidityAmountToExit);\\n\\n    // all fees will be collected but not returned in amountsOut\\n    pool.collect(address(this), lowerTick, upperTick, type(uint128).max, type(uint128).max);\\n\\n    pairState.totalLiquidity = liquidity - liquidityAmountToExit;\\n\\n    if (_depositorSwapTokens) {\\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\\n    }\\n  }\\n  //endregion ------------------------------------------------ Exit from the pool\\n\\n  //region ------------------------------------------------ Claims\\n  /// @notice Claim rewards from the Uniswap V3 pool.\\n  /// @return tokensOut An array containing tokenA and tokenB.\\n  /// @return amountsOut An array containing the amounts of token0 and token1 claimed as rewards.\\n  function claimRewards(PairBasedStrategyLogicLib.PairState storage pairState) external returns (\\n    address[] memory tokensOut,\\n    uint[] memory amountsOut,\\n    uint[] memory balancesBefore\\n  ) {\\n    address strategyProfitHolder = pairState.strategyProfitHolder;\\n    IUniswapV3Pool pool = IUniswapV3Pool(pairState.pool);\\n    int24 lowerTick = pairState.lowerTick;\\n    int24 upperTick = pairState.upperTick;\\n    tokensOut = new address[](2);\\n    tokensOut[0] = pairState.tokenA;\\n    tokensOut[1] = pairState.tokenB;\\n\\n    balancesBefore = new uint[](2);\\n    for (uint i; i < tokensOut.length; i++) {\\n      balancesBefore[i] = IERC20(tokensOut[i]).balanceOf(address(this));\\n    }\\n\\n    amountsOut = new uint[](2);\\n    if (pairState.totalLiquidity > 0) {\\n      pool.burn(lowerTick, upperTick, 0);\\n      (amountsOut[0], amountsOut[1]) = pool.collect(\\n        address(this),\\n        lowerTick,\\n        upperTick,\\n        type(uint128).max,\\n        type(uint128).max\\n      );\\n    }\\n\\n    emit UniV3FeesClaimed(amountsOut[0], amountsOut[1]);\\n\\n    if (pairState.depositorSwapTokens) {\\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\\n    }\\n\\n    for (uint i; i < tokensOut.length; ++i) {\\n      uint b = IERC20(tokensOut[i]).balanceOf(strategyProfitHolder);\\n      if (b > 0) {\\n        IERC20(tokensOut[i]).transferFrom(strategyProfitHolder, address(this), b);\\n        amountsOut[i] += b;\\n      }\\n    }\\n  }\\n\\n  function isReadyToHardWork(PairBasedStrategyLogicLib.PairState storage pairState, ITetuConverter converter) external view returns (\\n    bool isReady\\n  ) {\\n    // check claimable amounts and compare with thresholds\\n    (uint fee0, uint fee1) = getFees(pairState);\\n\\n    if (pairState.depositorSwapTokens) {\\n      (fee0, fee1) = (fee1, fee0);\\n    }\\n\\n    address tokenA = pairState.tokenA;\\n    address tokenB = pairState.tokenB;\\n    address h = pairState.strategyProfitHolder;\\n\\n    fee0 += IERC20(tokenA).balanceOf(h);\\n    fee1 += IERC20(tokenB).balanceOf(h);\\n\\n    IPriceOracle oracle = AppLib._getPriceOracle(converter);\\n    uint priceA = oracle.getAssetPrice(tokenA);\\n    uint priceB = oracle.getAssetPrice(tokenB);\\n\\n    uint fee0USD = fee0 * priceA / 1e18;\\n    uint fee1USD = fee1 * priceB / 1e18;\\n\\n    return fee0USD > HARD_WORK_USD_FEE_THRESHOLD || fee1USD > HARD_WORK_USD_FEE_THRESHOLD;\\n  }\\n\\n  function sendFeeToProfitHolder(PairBasedStrategyLogicLib.PairState storage pairState, uint fee0, uint fee1) external {\\n    address strategyProfitHolder = pairState.strategyProfitHolder;\\n    require(strategyProfitHolder != address (0), Uni3StrategyErrors.ZERO_PROFIT_HOLDER);\\n    if (pairState.depositorSwapTokens) {\\n      IERC20(pairState.tokenA).safeTransfer(strategyProfitHolder, fee1);\\n      IERC20(pairState.tokenB).safeTransfer(strategyProfitHolder, fee0);\\n    } else {\\n      IERC20(pairState.tokenA).safeTransfer(strategyProfitHolder, fee0);\\n      IERC20(pairState.tokenB).safeTransfer(strategyProfitHolder, fee1);\\n    }\\n    emit UniV3FeesClaimed(fee0, fee1);\\n  }\\n\\n  function calcEarned(address asset, address controller, address[] memory rewardTokens, uint[] memory amounts) external view returns (uint) {\\n    ITetuLiquidator liquidator = ITetuLiquidator(IController(controller).liquidator());\\n    uint len = rewardTokens.length;\\n    uint earned;\\n    for (uint i; i < len; ++i) {\\n      address token = rewardTokens[i];\\n      if (token == asset) {\\n        earned += amounts[i];\\n      } else {\\n        earned += liquidator.getPrice(rewardTokens[i], asset, amounts[i]);\\n      }\\n    }\\n\\n    return earned;\\n  }\\n  //endregion ------------------------------------------------ Claims\\n\\n  //region ------------------------------------------------ Rebalance\\n  /// @notice Determine if the strategy needs to be rebalanced.\\n  /// @return needRebalance A boolean indicating if {rebalanceNoSwaps} should be called\\n  function needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage pairState, ITetuConverter converter_) external view returns (\\n    bool needRebalance\\n  ) {\\n    address pool = pairState.pool;\\n    // poolPrice should have same decimals as a price from oracle == 18\\n    uint poolPriceAdjustment = PairBasedStrategyLib.getPoolPriceAdjustment(IERC20Metadata(pairState.tokenA).decimals());\\n    uint poolPrice = UniswapV3Lib.getPrice(pool, pairState.tokenB) * poolPriceAdjustment;\\n    (needRebalance, , ) = PairBasedStrategyLogicLib.needStrategyRebalance(\\n      pairState,\\n      converter_,\\n      UniswapV3DebtLib.getCurrentTick(IUniswapV3Pool(pool)),\\n      poolPrice\\n    );\\n  }\\n\\n  /// @notice Make rebalance without swaps (using borrowing only).\\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\\n  /// @param totalAssets_ Current value of totalAssets()\\n  /// @param checkNeedRebalance_ True if the function should ensure that the rebalance is required\\n  /// @return tokenAmounts Token amounts for deposit. If length == 0 - rebalance wasn't made and no deposit is required.\\n  function rebalanceNoSwaps(\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    address[2] calldata converterLiquidator,\\n    uint totalAssets_,\\n    uint profitToCover,\\n    address splitter,\\n    bool checkNeedRebalance_,\\n    mapping(address => uint) storage liquidityThresholds_\\n  ) external returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    RebalanceLocal memory v;\\n    _initLocalVars(v, ITetuConverter(converterLiquidator[0]), pairState, liquidityThresholds_);\\n    v.poolPrice = UniswapV3Lib.getPrice(address(v.pool), pairState.tokenB) * v.poolPriceAdjustment;\\n    bool needRebalance;\\n    int24 tick = UniswapV3DebtLib.getCurrentTick(v.pool);\\n    (needRebalance,v.fuseStatusChangedAB, v.fuseStatusAB) = PairBasedStrategyLogicLib.needStrategyRebalance(pairState, v.converter, tick, v.poolPrice);\\n\\n    // update fuse status if necessary\\n    if (needRebalance) {\\n      // we assume here, that needRebalance is true if any fuse has changed state, see needStrategyRebalance impl\\n      PairBasedStrategyLogicLib.updateFuseStatus(pairState, v.fuseStatusChangedAB, v.fuseStatusAB);\\n    }\\n\\n    require(!checkNeedRebalance_ || needRebalance, Uni3StrategyErrors.NO_REBALANCE_NEEDED);\\n\\n    // rebalancing debt, setting new tick range\\n    if (needRebalance) {\\n      UniswapV3DebtLib.rebalanceNoSwaps(converterLiquidator, pairState, profitToCover, totalAssets_, splitter, v.liquidationThresholdsAB, tick);\\n\\n      uint loss;\\n      (loss, tokenAmounts) = ConverterStrategyBaseLib2.getTokenAmountsPair(v.converter, totalAssets_, v.tokenA, v.tokenB, v.liquidationThresholdsAB);\\n      if (loss != 0) {\\n        ConverterStrategyBaseLib2.coverLossAndCheckResults(csbs, splitter, loss);\\n      }\\n      emit Rebalanced(loss, profitToCover, 0);\\n    }\\n\\n    return tokenAmounts;\\n  }\\n\\n  /// @notice Initialize {v} by state values\\n  function _initLocalVars(\\n    RebalanceLocal memory v,\\n    ITetuConverter converter_,\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    mapping(address => uint) storage liquidityThresholds_\\n  ) internal view {\\n    v.pool = IUniswapV3Pool(pairState.pool);\\n    v.fuseAB = pairState.fuseAB;\\n    v.converter = converter_;\\n    v.tokenA = pairState.tokenA;\\n    v.tokenB = pairState.tokenB;\\n    v.isStablePool = pairState.isStablePool;\\n    v.liquidationThresholdsAB[0] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenA]);\\n    v.liquidationThresholdsAB[1] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenB]);\\n    uint poolPriceDecimals = IERC20Metadata(v.tokenA).decimals();\\n    v.poolPriceAdjustment = poolPriceDecimals < 18 ? 10 ** (18 - poolPriceDecimals) : 1;\\n  }\\n\\n  /// @notice Get proportion of not-underlying in the pool, [0...1e18]\\n  ///         prop.underlying : prop.not.underlying = 1e18 - PropNotUnderlying18 : propNotUnderlying18\\n  function getPropNotUnderlying18(PairBasedStrategyLogicLib.PairState storage pairState) view external returns (uint) {\\n    // get pool proportions\\n    IUniswapV3Pool pool = IUniswapV3Pool(pairState.pool);\\n    bool depositorSwapTokens = pairState.depositorSwapTokens;\\n    (int24 newLowerTick, int24 newUpperTick) = UniswapV3DebtLib._calcNewTickRange(pool, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\\n    (uint consumed0, uint consumed1) = UniswapV3DebtLib.getEntryDataProportions(pool, newLowerTick, newUpperTick, depositorSwapTokens);\\n\\n    require(consumed0 + consumed1 > 0, AppErrors.ZERO_VALUE);\\n    return consumed1 * 1e18 / (consumed0 + consumed1);\\n  }\\n  //endregion ------------------------------------------------ Rebalance\\n\\n  //region ------------------------------------------------ WithdrawByAgg\\n  /// @notice Calculate amounts to be deposited to pool, update pairState.lower/upperTick, fix loss / profitToCover\\n  /// @param addr_ [tokenToSwap, aggregator, controller, converter, splitter]\\n  /// @param values_ [amountToSwap_, profitToCover, oldTotalAssets, entryToPool]\\n  /// @return completed All debts were closed, leftovers were swapped to proper proportions\\n  /// @return tokenAmountsOut Amounts to be deposited to pool. This array is empty if no deposit allowed/required.\\n  function withdrawByAggStep(\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\n    address[5] calldata addr_,\\n    uint[4] calldata values_,\\n    bytes memory swapData,\\n    bytes memory planEntryData,\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    mapping(address => uint) storage liquidationThresholds\\n  ) external returns (\\n    bool completed,\\n    uint[] memory tokenAmountsOut\\n  ) {\\n    uint entryToPool = values_[3];\\n    address[2] memory tokens = [pairState.tokenA, pairState.tokenB];\\n\\n    // Calculate amounts to be deposited to pool, calculate loss, fix profitToCover\\n    uint[] memory tokenAmounts;\\n    uint loss;\\n    (completed, tokenAmounts, loss) = PairBasedStrategyLogicLib.withdrawByAggStep(\\n      addr_,\\n      values_,\\n      swapData,\\n      planEntryData,\\n      tokens,\\n      liquidationThresholds\\n    );\\n\\n    // cover loss\\n    if (loss != 0) {\\n      ConverterStrategyBaseLib2.coverLossAndCheckResults(\\n        csbs,\\n        addr_[4],\\n        loss\\n      );\\n    }\\n    emit RebalancedDebt(loss, values_[1], 0);\\n\\n    if (entryToPool == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED\\n      || (entryToPool == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED && completed)\\n    ) {\\n      // We are going to enter to the pool: update lowerTick and upperTick, initialize tokenAmountsOut\\n      (pairState.lowerTick, pairState.upperTick) = UniswapV3DebtLib._calcNewTickRange(\\n        IUniswapV3Pool(pairState.pool),\\n        pairState.lowerTick,\\n        pairState.upperTick,\\n        pairState.tickSpacing\\n      );\\n      tokenAmountsOut = tokenAmounts;\\n    }\\n    return (completed, tokenAmountsOut); // hide warning\\n  }\\n  //endregion ------------------------------------------------ WithdrawByAgg\\n\\n}\\n\",\"keccak256\":\"0x4efaf8876876e751f70751b713bff784b35ce5109c2592392fc6baa3cf624121\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/uniswap/UniswapV3DebtLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"./UniswapV3Lib.sol\\\";\\nimport \\\"./Uni3StrategyErrors.sol\\\";\\nimport \\\"./UniswapV3ConverterStrategyLogicLib.sol\\\";\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\nimport \\\"../ConverterStrategyBaseLib2.sol\\\";\\nimport \\\"../../libs/BorrowLib.sol\\\";\\nimport \\\"../../interfaces/IPairBasedStrategyReaderAccess.sol\\\";\\nimport \\\"../pair/PairBasedStrategyLib.sol\\\";\\nimport \\\"../pair/PairBasedStrategyLogicLib.sol\\\";\\n\\nlibrary UniswapV3DebtLib {\\n  using SafeERC20 for IERC20;\\n\\n//region  -------------------------------------------- Constants\\n  uint public constant SELL_GAP = 100;\\n  /// @dev should be placed local, probably will be adjusted later\\n  uint internal constant BORROW_PERIOD_ESTIMATION = 30 days / 2;\\n//endregion  -------------------------------------------- Constants\\n\\n//region  -------------------------------------------- Entry data\\n  /// @notice Calculate proportions of the tokens for entry kind 1\\n  /// @param pool Pool instance\\n  /// @param lowerTick The lower tick of the pool's main range.\\n  /// @param upperTick The upper tick of the pool's main range.\\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\\n  function getEntryDataProportions(\\n    IUniswapV3Pool pool,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    bool depositorSwapTokens\\n  ) internal view returns (uint, uint) {\\n    address token1 = pool.token1();\\n    uint token1Price = UniswapV3Lib.getPrice(address(pool), token1);\\n\\n    uint token1Decimals = IERC20Metadata(token1).decimals();\\n\\n    uint token0Desired = token1Price;\\n    uint token1Desired = 10 ** token1Decimals;\\n    require(token1Desired != 0, AppErrors.ZERO_VALUE);\\n\\n    // calculate proportions\\n    (uint consumed0, uint consumed1,) = UniswapV3Lib.addLiquidityPreview(address(pool), lowerTick, upperTick, token0Desired, token1Desired);\\n\\n    return depositorSwapTokens\\n      ? (1e18*consumed1 * token1Price / token1Desired, 1e18*consumed0)\\n      : (1e18*consumed0, 1e18*consumed1 * token1Price / token1Desired);\\n  }\\n//endregion  -------------------------------------------- Entry data\\n\\n//region  -------------------------------------------- Calc tick range\\n  function calcTickRange(address pool, int24 tickRange, int24 tickSpacing) public view returns (int24 lowerTick, int24 upperTick) {\\n    return PairBasedStrategyLogicLib.calcTickRange(getCurrentTick(IUniswapV3Pool(pool)), tickRange, tickSpacing);\\n  }\\n\\n  function getCurrentTick(IUniswapV3Pool pool) public view returns(int24 tick) {\\n    (, tick, , , , ,) = IUniswapV3Pool(pool).slot0();\\n  }\\n\\n  /// @notice Calculate the new tick range for a Uniswap V3 pool, the tick is read from the pool.\\n  /// @param pool The Uniswap V3 pool to calculate the new tick range for.\\n  /// @param lowerTick The current lower tick value for the pool.\\n  /// @param upperTick The current upper tick value for the pool.\\n  /// @param tickSpacing The tick spacing for the pool.\\n  /// @return lowerTickNew The new lower tick value for the pool.\\n  /// @return upperTickNew The new upper tick value for the pool.\\n  function _calcNewTickRange(\\n    IUniswapV3Pool pool,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    int24 tickSpacing\\n  ) internal view returns (int24 lowerTickNew, int24 upperTickNew) {\\n    int24 currentTick = getCurrentTick(pool);\\n    return _calcNewTickRangeForTick(currentTick, lowerTick, upperTick, tickSpacing);\\n  }\\n\\n  /// @notice Calculate the new tick range for a Uniswap V3 pool, the tick is known\\n  function _calcNewTickRangeForTick(\\n    int24 currentTick,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    int24 tickSpacing\\n  ) internal pure returns (int24 lowerTickNew, int24 upperTickNew) {\\n    int24 fullTickRange = upperTick - lowerTick;\\n    int24 tickRange = fullTickRange == tickSpacing\\n      ? int24(0)\\n      : fullTickRange / 2;\\n    return PairBasedStrategyLogicLib.calcTickRange(currentTick, tickRange, tickSpacing);\\n  }\\n//endregion  -------------------------------------------- Calc tick range\\n\\n//region  -------------------------------------------- Rebalance\\n  /// @notice Calculate right asset proportions, make rebalance, update lower/upper ticks in {pairState}\\n  /// @param tick Current tick in the pool\\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\\n  function rebalanceNoSwaps(\\n    address[2] calldata converterLiquidator,\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\n    uint profitToCover,\\n    uint totalAssets,\\n    address splitter,\\n    uint[2] calldata liquidationThresholdsAB,\\n    int24 tick\\n  ) external {\\n    (int24 newLowerTick, int24 newUpperTick) = _calcNewTickRangeForTick(tick, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\\n    (uint prop0, uint prop1) = getEntryDataProportions(IUniswapV3Pool(pairState.pool), newLowerTick, newUpperTick, pairState.depositorSwapTokens);\\n    PairBasedStrategyLogicLib._rebalanceNoSwaps(\\n      converterLiquidator,\\n      pairState,\\n      profitToCover,\\n      totalAssets,\\n      splitter,\\n      liquidationThresholdsAB,\\n      prop0 * BorrowLib.SUM_PROPORTIONS / (prop0 + prop1)\\n    );\\n    (pairState.lowerTick, pairState.upperTick) = (newLowerTick, newUpperTick);\\n  }\\n//endregion  -------------------------------------------- Rebalance\\n\\n}\\n\",\"keccak256\":\"0x8d0420ce896eb07bca73907f826495940d4e9e8c89df38208b975ee1309a8e70\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/uniswap/UniswapV3Depositor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\\\";\\nimport \\\"../DepositorBase.sol\\\";\\nimport \\\"./Uni3StrategyErrors.sol\\\";\\nimport \\\"../../integrations/uniswap/IUniswapV3MintCallback.sol\\\";\\nimport \\\"./UniswapV3ConverterStrategyLogicLib.sol\\\";\\n\\n/// @title UniswapV3Depositor\\n/// @dev Abstract contract that is designed to interact with Uniswap V3 pools and manage liquidity.\\n///      Inherits from IUniswapV3MintCallback, DepositorBase, and Initializable.\\nabstract contract UniswapV3Depositor is IUniswapV3MintCallback, DepositorBase, Initializable {\\n  using SafeERC20 for IERC20;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                CONSTANTS\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant UNISWAPV3_DEPOSITOR_VERSION = \\\"1.0.4\\\";\\n\\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A = 0;\\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B = 1;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                VARIABLES\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @dev State variable to store the current state of the whole strategy\\n  UniswapV3ConverterStrategyLogicLib.State internal state;\\n\\n  /// @dev reserve space for future needs\\n  uint[100 - 60] private __gap;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                       View\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @return nums Balances of [tokenA, tokenB] for profit holder\\n  function getSpecificState() external view returns (\\n    uint[] memory nums\\n  ) {\\n    address strategyProfitHolder = state.pair.strategyProfitHolder;\\n    nums = new uint[](2);\\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A] = IERC20(state.pair.tokenA).balanceOf(strategyProfitHolder);\\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B] = IERC20(state.pair.tokenB).balanceOf(strategyProfitHolder);\\n  }\\n\\n  /// @notice Returns the fees for the current state.\\n  /// @return fee0 and fee1.\\n  function getFees() public view returns (uint fee0, uint fee1) {\\n    return UniswapV3ConverterStrategyLogicLib.getFees(state.pair);\\n  }\\n\\n  /// @notice Returns the pool assets.\\n  /// @return poolAssets An array containing the addresses of the pool assets.\\n  function _depositorPoolAssets() override internal virtual view returns (address[] memory poolAssets) {\\n    poolAssets = new address[](2);\\n    poolAssets[0] = state.pair.tokenA;\\n    poolAssets[1] = state.pair.tokenB;\\n  }\\n\\n  /// @notice Returns the pool weights and the total weight.\\n  /// @return weights An array containing the weights of the pool assets, and totalWeight the sum of the weights.\\n  function _depositorPoolWeights() override internal virtual view returns (uint[] memory weights, uint totalWeight) {\\n    weights = new uint[](2);\\n    weights[0] = 1;\\n    weights[1] = 1;\\n    totalWeight = 2;\\n  }\\n\\n  /// @notice Returns the pool reserves.\\n  /// @return reserves An array containing the reserves of the pool assets.\\n  function _depositorPoolReserves() override internal virtual view returns (uint[] memory reserves) {\\n    return UniswapV3ConverterStrategyLogicLib.getPoolReserves(state.pair);\\n  }\\n\\n  /// @notice Returns the current liquidity of the depositor.\\n  /// @return The current liquidity of the depositor.\\n  function _depositorLiquidity() override internal virtual view returns (uint) {\\n    return uint(state.pair.totalLiquidity);\\n  }\\n\\n  /// @notice Returns the total supply of the depositor.\\n  /// @return In UniV3 we can not calculate the total supply of the wgole pool. Return only ourself value.\\n  function _depositorTotalSupply() override internal view virtual returns (uint) {\\n    return uint(state.pair.totalLiquidity);\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                CALLBACK\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Callback function called by Uniswap V3 pool on mint operation.\\n  /// @param amount0Owed The amount of token0 owed to the pool.\\n  /// @param amount1Owed The amount of token1 owed to the pool.\\n  function uniswapV3MintCallback(\\n    uint amount0Owed,\\n    uint amount1Owed,\\n    bytes calldata /*_data*/\\n  ) external override {\\n    require(msg.sender == state.pair.pool, Uni3StrategyErrors.NOT_CALLBACK_CALLER);\\n    if (amount0Owed > 0) IERC20(state.pair.depositorSwapTokens ? state.pair.tokenB : state.pair.tokenA).safeTransfer(msg.sender, amount0Owed);\\n    if (amount1Owed > 0) IERC20(state.pair.depositorSwapTokens ? state.pair.tokenA : state.pair.tokenB).safeTransfer(msg.sender, amount1Owed);\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Enter, exit\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Handles the deposit operation.\\n  function _depositorEnter(uint[] memory amountsDesired_) override internal virtual returns (\\n    uint[] memory amountsConsumed,\\n    uint liquidityOut\\n  ) {\\n    (amountsConsumed, liquidityOut, state.pair.totalLiquidity) = UniswapV3ConverterStrategyLogicLib.enter(\\n      IUniswapV3Pool(state.pair.pool),\\n      state.pair.lowerTick,\\n      state.pair.upperTick,\\n      amountsDesired_,\\n      state.pair.totalLiquidity,\\n      state.pair.depositorSwapTokens\\n    );\\n  }\\n\\n  /// @notice Handles the withdrawal operation.\\n  /// @param liquidityAmount The amount of liquidity to be withdrawn.\\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\\n  /// @return amountsOut The amounts of the tokens withdrawn.\\n  function _depositorExit(uint liquidityAmount, bool emergency) override internal virtual returns (uint[] memory amountsOut) {\\n    uint fee0;\\n    uint fee1;\\n    if (! emergency) {\\n      (fee0, fee1) = getFees();\\n    }\\n    amountsOut = UniswapV3ConverterStrategyLogicLib.exit(state.pair, uint128(liquidityAmount));\\n    if (! emergency) {\\n      UniswapV3ConverterStrategyLogicLib.sendFeeToProfitHolder(state.pair, fee0, fee1);\\n    }\\n  }\\n\\n  /// @notice Returns the amount of tokens that would be withdrawn based on the provided liquidity amount.\\n  /// @param liquidityAmount The amount of liquidity to quote the withdrawal for.\\n  /// @return amountsOut The amounts of the tokens that would be withdrawn, underlying is first\\n  function _depositorQuoteExit(uint liquidityAmount) override internal virtual returns (uint[] memory amountsOut) {\\n    amountsOut = UniswapV3ConverterStrategyLogicLib.quoteExit(state.pair, uint128(liquidityAmount));\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Claim rewards\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Claims all possible rewards.\\n  /// @return tokensOut An array containing the addresses of the reward tokens,\\n  /// @return amountsOut An array containing the amounts of the reward tokens.\\n  function _depositorClaimRewards() override internal virtual returns (\\n    address[] memory tokensOut,\\n    uint[] memory amountsOut,\\n    uint[] memory balancesBefore\\n  ) {\\n    (tokensOut, amountsOut, balancesBefore) = UniswapV3ConverterStrategyLogicLib.claimRewards(state.pair);\\n  }\\n}\\n\",\"keccak256\":\"0x697c48bf2e59d74e52669c9e5ff4422494d72acce8dc5f63e55ec0abd9dd8a00\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/uniswap/UniswapV3Lib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"../../integrations/uniswap/IUniswapV3Pool.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\n/// @title Uniswap V3 liquidity management helper\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary UniswapV3Lib {\\n  uint8 internal constant RESOLUTION = 96;\\n  uint internal constant Q96 = 0x1000000000000000000000000;\\n  uint private constant TWO_96 = 2 ** 96;\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 private constant MIN_SQRT_RATIO = 4295128739 + 1;\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 private constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n  int24 internal constant MIN_TICK = - 887272;\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n  int24 internal constant MAX_TICK = - MIN_TICK;\\n\\n  struct PoolPosition {\\n    address pool;\\n    int24 lowerTick;\\n    int24 upperTick;\\n    uint128 liquidity;\\n    address owner;\\n  }\\n\\n  function getTickSpacing(uint24 fee) external pure returns (int24) {\\n    if (fee == 10000) {\\n      return 200;\\n    }\\n    if (fee == 3000) {\\n      return 60;\\n    }\\n    if (fee == 500) {\\n      return 10;\\n    }\\n    return 1;\\n  }\\n\\n  function getFees(PoolPosition memory position) public view returns (uint fee0, uint fee1) {\\n    bytes32 positionId = _getPositionId(position);\\n    IUniswapV3Pool pool = IUniswapV3Pool(position.pool);\\n    (, int24 tick, , , , ,) = pool.slot0();\\n    (, uint feeGrowthInside0Last, uint feeGrowthInside1Last, uint128 tokensOwed0, uint128 tokensOwed1) = pool.positions(positionId);\\n    fee0 = _computeFeesEarned(position, true, feeGrowthInside0Last, tick) + uint(tokensOwed0);\\n    fee1 = _computeFeesEarned(position, false, feeGrowthInside1Last, tick) + uint(tokensOwed1);\\n  }\\n\\n  function addLiquidityPreview(address pool_, int24 lowerTick_, int24 upperTick_, uint amount0Desired_, uint amount1Desired_) external view returns (uint amount0Consumed, uint amount1Consumed, uint128 liquidityOut) {\\n    IUniswapV3Pool pool = IUniswapV3Pool(pool_);\\n    (uint160 sqrtRatioX96, , , , , ,) = pool.slot0();\\n    liquidityOut = getLiquidityForAmounts(sqrtRatioX96, lowerTick_, upperTick_, amount0Desired_, amount1Desired_);\\n    (amount0Consumed, amount1Consumed) = getAmountsForLiquidity(sqrtRatioX96, lowerTick_, upperTick_, liquidityOut);\\n  }\\n\\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n  /// pool prices and the prices at the tick boundaries\\n  function getLiquidityForAmounts(\\n    uint160 sqrtRatioX96,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    uint amount0,\\n    uint amount1\\n  ) public pure returns (uint128 liquidity) {\\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n\\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\\n      liquidity = _getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n      uint128 liquidity0 = _getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n      uint128 liquidity1 = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n    } else {\\n      liquidity = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n    }\\n  }\\n\\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n  /// pool prices and the prices at the tick boundaries\\n  function getAmountsForLiquidity(\\n    uint160 sqrtRatioX96,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    uint128 liquidity\\n  ) public pure returns (uint amount0, uint amount1) {\\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\\n\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n\\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\\n      amount0 = _getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n      amount0 = _getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n    } else {\\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n    }\\n  }\\n\\n  /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n  function mulDiv(\\n    uint a,\\n    uint b,\\n    uint denominator\\n  ) public pure returns (uint result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = a * b\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\n    // then use the Chinese Remainder Theorem to reconstruct\\n    // the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2**256 + prod0\\n    uint prod0;\\n    // Least significant 256 bits of the product\\n    uint prod1;\\n    // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(a, b, not(0))\\n      prod0 := mul(a, b)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division\\n    if (prod1 == 0) {\\n      require(denominator > 0);\\n      assembly {\\n        result := div(prod0, denominator)\\n      }\\n      return result;\\n    }\\n\\n    // Make sure the result is less than 2**256.\\n    // Also prevents denominator == 0\\n    require(denominator > prod1);\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\n    // Compute remainder using mulmod\\n    uint remainder;\\n    assembly {\\n      remainder := mulmod(a, b, denominator)\\n    }\\n    // Subtract 256 bit number from 512 bit number\\n    assembly {\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator\\n    // Compute largest power of two divisor of denominator.\\n    // Always >= 1.\\n    // EDIT for 0.8 compatibility:\\n    // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint\\n    uint twos = denominator & (~denominator + 1);\\n\\n    // Divide denominator by power of two\\n    assembly {\\n      denominator := div(denominator, twos)\\n    }\\n\\n    // Divide [prod1 prod0] by the factors of two\\n    assembly {\\n      prod0 := div(prod0, twos)\\n    }\\n    // Shift in bits from prod1 into prod0. For this we need\\n    // to flip `twos` such that it is 2**256 / twos.\\n    // If twos is zero, then it becomes one\\n    assembly {\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2**256\\n    // Now that denominator is an odd number, it has an inverse\\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n    // Compute the inverse by starting with a seed that is correct\\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n    uint inv = (3 * denominator) ^ 2;\\n    // Now use Newton-Raphson iteration to improve the precision.\\n    // Thanks to Hensel's lifting lemma, this also works in modular\\n    // arithmetic, doubling the correct bits in each step.\\n    inv *= 2 - denominator * inv;\\n    // inverse mod 2**8\\n    inv *= 2 - denominator * inv;\\n    // inverse mod 2**16\\n    inv *= 2 - denominator * inv;\\n    // inverse mod 2**32\\n    inv *= 2 - denominator * inv;\\n    // inverse mod 2**64\\n    inv *= 2 - denominator * inv;\\n    // inverse mod 2**128\\n    inv *= 2 - denominator * inv;\\n    // inverse mod 2**256\\n\\n    // Because the division is now exact we can divide by multiplying\\n    // with the modular inverse of denominator. This will give us the\\n    // correct result modulo 2**256. Since the precoditions guarantee\\n    // that the outcome is less than 2**256, this is the final result.\\n    // We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inv;\\n    return result;\\n  }\\n  }\\n\\n  /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  function mulDivRoundingUp(\\n    uint a,\\n    uint b,\\n    uint denominator\\n  ) internal pure returns (uint result) {\\n    result = mulDiv(a, b, denominator);\\n    if (mulmod(a, b, denominator) > 0) {\\n      require(result < type(uint).max);\\n      result++;\\n    }\\n  }\\n\\n  /// @notice Calculates price in pool\\n  /// @return price with decimals of paired token\\n  function getPrice(address pool_, address tokenIn) public view returns (uint) {\\n    IUniswapV3Pool pool = IUniswapV3Pool(pool_);\\n    address token0 = pool.token0();\\n    address token1 = pool.token1();\\n\\n    uint tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\\n    uint tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\\n    (uint160 sqrtPriceX96,,,,,,) = pool.slot0();\\n\\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\\n\\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\\n    uint purePrice;\\n    uint precision;\\n    if (tokenIn == token0) {\\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\\n      purePrice = part * part;\\n    } else {\\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\\n      purePrice = part * part;\\n    }\\n    return purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\\n  }\\n\\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param amount0 The amount0 being sent in\\n  /// @return liquidity The amount of returned liquidity\\n  function _getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount0) internal pure returns (uint128 liquidity) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n    uint intermediate = mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\\n    return _toUint128(mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n  }\\n\\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param amount1 The amount1 being sent in\\n  /// @return liquidity The amount of returned liquidity\\n  function _getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount1) internal pure returns (uint128 liquidity) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n    return _toUint128(mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n  }\\n\\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param liquidity The liquidity being valued\\n  /// @return amount0 The amount0\\n  function _getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount0) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n    return mulDivRoundingUp(1, mulDivRoundingUp(uint(liquidity) << RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96), sqrtRatioAX96);\\n  }\\n\\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param liquidity The liquidity being valued\\n  /// @return amount1 The amount1\\n  function _getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount1) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n    return mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\\n  }\\n\\n  function _computeFeesEarned(\\n    PoolPosition memory position,\\n    bool isZero,\\n    uint feeGrowthInsideLast,\\n    int24 tick\\n  ) internal view returns (uint fee) {\\n    IUniswapV3Pool pool = IUniswapV3Pool(position.pool);\\n    uint feeGrowthOutsideLower;\\n    uint feeGrowthOutsideUpper;\\n    uint feeGrowthGlobal;\\n    if (isZero) {\\n      feeGrowthGlobal = pool.feeGrowthGlobal0X128();\\n      (,, feeGrowthOutsideLower,,,,,) = pool.ticks(position.lowerTick);\\n      (,, feeGrowthOutsideUpper,,,,,) = pool.ticks(position.upperTick);\\n    } else {\\n      feeGrowthGlobal = pool.feeGrowthGlobal1X128();\\n      (,,, feeGrowthOutsideLower,,,,) = pool.ticks(position.lowerTick);\\n      (,,, feeGrowthOutsideUpper,,,,) = pool.ticks(position.upperTick);\\n    }\\n\\n  unchecked {\\n    // calculate fee growth below\\n    uint feeGrowthBelow;\\n    if (tick >= position.lowerTick) {\\n      feeGrowthBelow = feeGrowthOutsideLower;\\n    } else {\\n      feeGrowthBelow = feeGrowthGlobal - feeGrowthOutsideLower;\\n    }\\n\\n    // calculate fee growth above\\n    uint feeGrowthAbove;\\n    if (tick < position.upperTick) {\\n      feeGrowthAbove = feeGrowthOutsideUpper;\\n    } else {\\n      feeGrowthAbove = feeGrowthGlobal - feeGrowthOutsideUpper;\\n    }\\n\\n    uint feeGrowthInside =\\n    feeGrowthGlobal - feeGrowthBelow - feeGrowthAbove;\\n    fee = mulDiv(\\n      position.liquidity,\\n      feeGrowthInside - feeGrowthInsideLast,\\n      0x100000000000000000000000000000000\\n    );\\n  }\\n  }\\n\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n  /// @dev Throws if |tick| > max tick\\n  /// @param tick The input tick for the above formula\\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n  /// at the given tick\\n  function _getSqrtRatioAtTick(int24 tick)\\n  internal\\n  pure\\n  returns (uint160 sqrtPriceX96)\\n  {\\n    uint256 absTick =\\n    tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\\n\\n    // EDIT: 0.8 compatibility\\n    require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n    uint256 ratio =\\n    absTick & 0x1 != 0\\n    ? 0xfffcb933bd6fad37aa2d162d1a594001\\n    : 0x100000000000000000000000000000000;\\n    if (absTick & 0x2 != 0)\\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n    if (absTick & 0x4 != 0)\\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n    if (absTick & 0x8 != 0)\\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n    if (absTick & 0x10 != 0)\\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n    if (absTick & 0x20 != 0)\\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n    if (absTick & 0x40 != 0)\\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n    if (absTick & 0x80 != 0)\\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n    if (absTick & 0x100 != 0)\\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n    if (absTick & 0x200 != 0)\\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n    if (absTick & 0x400 != 0)\\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n    if (absTick & 0x800 != 0)\\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n    if (absTick & 0x1000 != 0)\\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n    if (absTick & 0x2000 != 0)\\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n    if (absTick & 0x4000 != 0)\\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n    if (absTick & 0x8000 != 0)\\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n    if (absTick & 0x10000 != 0)\\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n    if (absTick & 0x20000 != 0)\\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n    if (absTick & 0x40000 != 0)\\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n    if (absTick & 0x80000 != 0)\\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n    if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n    sqrtPriceX96 = uint160(\\n      (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n    );\\n  }\\n\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n  /// ever return.\\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n  function _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n    // second inequality must be < because the price can never reach the price at the max tick\\n    require(\\n      sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n      \\\"R\\\"\\n    );\\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n    uint256 r = ratio;\\n    uint256 msb = 0;\\n\\n    assembly {\\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(5, gt(r, 0xFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(4, gt(r, 0xFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(3, gt(r, 0xFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(2, gt(r, 0xF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(1, gt(r, 0x3))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := gt(r, 0x1)\\n      msb := or(msb, f)\\n    }\\n\\n    if (msb >= 128) r = ratio >> (msb - 127);\\n    else r = ratio << (127 - msb);\\n\\n    int256 log_2 = (int256(msb) - 128) << 64;\\n\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(63, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(62, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(61, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(60, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(59, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(58, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(57, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(56, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(55, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(54, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(53, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(52, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(51, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(50, f))\\n    }\\n\\n    tick = _getFinalTick(log_2, sqrtPriceX96);\\n  }\\n\\n  function _getFinalTick(int256 log_2, uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n    // 128.128 number\\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141;\\n\\n    int24 tickLow =\\n    int24(\\n      (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n    );\\n    int24 tickHi =\\n    int24(\\n      (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n    );\\n\\n    tick = (tickLow == tickHi)\\n    ? tickLow\\n    : (_getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\n    ? tickHi\\n    : tickLow);\\n  }\\n\\n  function _getPositionId(PoolPosition memory position) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(position.owner, position.lowerTick, position.upperTick));\\n  }\\n\\n  function _countDigits(uint n) internal pure returns (uint) {\\n    if (n == 0) {\\n      return 0;\\n    }\\n    uint count = 0;\\n    while (n != 0) {\\n      n = n / 10;\\n      ++count;\\n    }\\n    return count;\\n  }\\n\\n  function _min(uint a, uint b) internal pure returns (uint) {\\n    return a < b ? a : b;\\n  }\\n\\n  function _max(uint a, uint b) internal pure returns (uint) {\\n    return a > b ? a : b;\\n  }\\n\\n  function _toUint128(uint x) private pure returns (uint128 y) {\\n    require((y = uint128(x)) == x);\\n  }\\n}\\n\",\"keccak256\":\"0x1908b2b6b6bd75c4cb18f8da98f7f369c9f85fe71ba162fb920a7c09fabf9fbe\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103645760003560e01c806371ee0175116101c9578063b429afeb116100ff578063d3487997116100ad578063dfeb10321161007c578063dfeb103214610795578063e50df07d146107a8578063f77c4791146107bb578063ffb86c6a146107c357600080fd5b8063d348799714610754578063db8d55f114610767578063de3d047c1461076f578063dee1f0e41461078257600080fd5b8063b429afeb146106dd578063b77c975b146106f0578063bd38837b14610722578063cd4c815614610733578063ce2f184214610744578063ceee861d1461050a578063d295ea701461074c57600080fd5b806387c7f770116101775780639d0bcca0116101465780639d0bcca01461067e578063a3f4df7e14610686578063ab9e3eee146106c2578063b2457556146106ca57600080fd5b806387c7f77014610610578063936725ec1461062357806396b7b14e14610647578063996a6c9c1461065a57600080fd5b806371ee01751461057a57806373a50ef51461058257806378327438146105a65780637cc96380146105c65780637eba7ba6146105ce5780637efc77fa146105e0578063877887821461060857600080fd5b80634ba31b011161029e578063546799631161024c57806363e277341161021b57806363e277341461052e5780636b5fba5a146105415780636ffb4c8e146105545780637063a2371461056757600080fd5b806354679963146104e35780635641ec03146104f85780635cfc1a51146105005780636207a0cf1461050a57600080fd5b80634ba31b01146104635780634e71d92d1461046b5780634fa5d854146104735780634fac6ccd1461049057806351e03fbe146104a357806352bbbb74146104b65780635412335d146104cb57600080fd5b8063261efa12116103165780633cd8045e116102e55780633cd8045e1461042f57806342fdb471146104405780634593144c146104535780634ad0b6841461045b57600080fd5b8063261efa12146103fd578063325a19f11461040557806333c5b58e1461040d57806338d52e0f1461041557600080fd5b806301e1d1141461036957806301ffc9a714610384578063066a6fc3146103a75780630acd12c7146103ba5780630e30428d146103c25780631d2dca9e146103d75780632221eb3c146103ea575b600080fd5b6103716107cb565b6040519081526020015b60405180910390f35b610397610392366004614848565b610856565b604051901515815260200161037b565b6103976103b536600461494d565b61089c565b610371610a7b565b6103d56103d03660046149e7565b610b9d565b005b6103d56103e5366004614a21565b610c41565b6103d56103f8366004614a3e565b610daa565b606854610371565b610371610e20565b610371610e50565b6064546001600160a01b03165b60405161037b9190614a57565b6065546001600160a01b0316610422565b6103d561044e366004614a3e565b610ed0565b610371610fbf565b609754610371565b610371610fef565b6103d5611066565b61047b6110e0565b6040805192835260208301919091520161037b565b6103d561049e366004614a6b565b61114e565b6103716104b1366004614a3e565b611280565b6104be611448565b60405161037b9190614ac3565b6104d3611598565b60405161037b9493929190614b08565b6104eb611627565b60405161037b9190614bfc565b6103d56116bc565b600160ff1b610371565b6104eb60405180604001604052806005815260200164332e312e3160d81b81525081565b6103d561053c366004614c50565b611755565b6103d561054f366004614a6b565b611833565b6103d5610562366004614a3e565b6118c4565b6103d5610575366004614c85565b61194c565b609954610371565b6104eb604051806040016040528060058152602001640332e302e360dc1b81525081565b6103716105b4366004614a6b565b60966020526000908152604090205481565b6103716119ea565b6103716105dc366004614a3e565b5490565b6104eb60405180604001604052806009815260200168556e6973776170563360b81b81525081565b606754610371565b61037161061e3660046149e7565b611a1a565b6104eb60405180604001604052806005815260200164332e302e3160d81b81525081565b6103d5610655366004614d46565b611d00565b6104eb604051806040016040528060058152602001640c4b8c0b8d60da1b81525081565b610422611da5565b6104eb6040518060400160405280601c81526020017f556e6973776170563320436f6e7665727465722053747261746567790000000081525081565b610397611dd5565b6103716106d8366004614e07565b611e80565b6103976106eb366004614a6b565b611f2f565b6107036106fe366004614e37565b611f54565b604080516001600160a01b03909316835260208301919091520161037b565b6098546001600160a01b0316610422565b6066546001600160a01b0316610422565b609a54610371565b606954610371565b6103d5610762366004614e6b565b612046565b61047b612137565b6103d561077d366004614a3e565b6121af565b610397610790366004614a6b565b61220c565b6103d56107a3366004614ebd565b612291565b6103d56107b6366004614f49565b612339565b61042261260d565b61039761263d565b60006107d660975490565b6064546040516370a0823160e01b81526001600160a01b03909116906370a0823190610806903090600401614a57565b602060405180830381865afa158015610823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108479190614fe5565b6108519190615014565b905090565b60006001600160e01b03198216631e94dddf60e01b148061088757506001600160e01b0319821663f73147b360e01b145b8061089657506108968261268b565b92915050565b60008060006108a96126b0565b91509150606073__$166cd655d2cd990700b75f7db5b5f84c53$__63911ec05360976040518060a001604052808e6001600160a01b03166001600160a01b031681526020018d6001600160a01b03166001600160a01b0316815260200161090e61260d565b6001600160a01b039081168252609854811660208084019190915260655490911660409283015281516080810183528e8152908101899052808201889052606081018b905290516001600160e01b031960e086901b16815261097f939291908d908d9060019060969060040161504a565b600060405180830381865af415801561099c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c4919081019061512e565b90945090506109d281612702565b60006010558380156109e757506109e7612731565b156109f2576001600f555b606480546040516368f9467b60e01b81526001600160a01b039091166004820152602481018490526097604482015273__$8f1afe7577f9ab973017c74eca19b86f3c$__916368f9467b910160006040518083038186803b158015610a5657600080fd5b505af4158015610a6a573d6000803e3d6000fd5b505050505050509695505050505050565b606554606454604051633e53813360e11b81526000926001600160a01b03908116921690839073__$7dde4232fad0cb3c495beb9e735b7d0c63$__90637ca7026690610acd9086908690600401615174565b602060405180830381865af4158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e9190614fe5565b90506000806000610b1d612743565b92509250925073__$7dde4232fad0cb3c495beb9e735b7d0c63$__639ad00ec2868686868b6040518663ffffffff1660e01b8152600401610b6295949392919061518e565b60006040518083038186803b158015610b7a57600080fd5b505af4158015610b8e573d6000803e3d6000fd5b50929998505050505050505050565b73__$8f1afe7577f9ab973017c74eca19b86f3c$__63142395ef610bbf61260d565b6040516001600160e01b031960e084901b1681526001600160a01b03918216600482015290851660248201526044810184905260640160006040518083038186803b158015610c0d57600080fd5b505af4158015610c21573d6000803e3d6000fd5b5050506001600160a01b0390921660009081526096602052604090205550565b6000610c4b61260d565b60405163124fdbb760e21b815290915073__$7dde4232fad0cb3c495beb9e735b7d0c63$__9063493f6edc90610c85908490600401614a57565b60006040518083038186803b158015610c9d57600080fd5b505af4158015610cb1573d6000803e3d6000fd5b50505050600080610cc06126b0565b604080518082019091526098546001600160a01b03168152919350915060009073__$166cd655d2cd990700b75f7db5b5f84c53$__9063b6fda8139060979060019060208101610d0f8a61275e565b6001600160a01b039081169091526065546040516001600160e01b031960e088901b168152610d4f959493928a928c929116908e906096906004016151be565b600060405180830381865af4158015610d6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d949190810190615237565b9050610d9f81612702565b505042601055505050565b73__$7dde4232fad0cb3c495beb9e735b7d0c63$__63493f6edc610dcc61260d565b6040518263ffffffff1660e01b8152600401610de89190614a57565b60006040518083038186803b158015610e0057600080fd5b505af4158015610e14573d6000803e3d6000fd5b505050600f9190915550565b60006108516105dc60017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b61526b565b600073__$7dde4232fad0cb3c495beb9e735b7d0c63$__63493f6edc610e7461260d565b6040518263ffffffff1660e01b8152600401610e909190614a57565b60006040518083038186803b158015610ea857600080fd5b505af4158015610ebc573d6000803e3d6000fd5b50505050610ec86127c2565b509092915050565b73__$7dde4232fad0cb3c495beb9e735b7d0c63$__63493f6edc610ef261260d565b6040518263ffffffff1660e01b8152600401610f0e9190614a57565b60006040518083038186803b158015610f2657600080fd5b505af4158015610f3a573d6000803e3d6000fd5b5073__$79fe6ec7a3db45dafbed12dca1c6dad764$__9250636bffb346915060069050836003811115610f6f57610f6f61527e565b6040518363ffffffff1660e01b8152600401610f8c929190615294565b60006040518083038186803b158015610fa457600080fd5b505af4158015610fb8573d6000803e3d6000fd5b5050505050565b60006108516105dc60017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f161526b565b604051630a3c2bb160e21b81526001600482015260009073__$166cd655d2cd990700b75f7db5b5f84c53$__906328f0aec490602401602060405180830381865af4158015611042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190614fe5565b73__$7dde4232fad0cb3c495beb9e735b7d0c63$__63d19cc38a61108861260d565b6040518263ffffffff1660e01b81526004016110a49190614a57565b60006040518083038186803b1580156110bc57600080fd5b505af41580156110d0573d6000803e3d6000fd5b505050506110dc612893565b5050565b60655460408051808201909152600a81526914d08e8811195b9a595960b21b60208201526000918291906001600160a01b0316331461113b5760405162461bcd60e51b81526004016111329190614bfc565b60405180910390fd5b50611146600161294f565b915091509091565b33301461119d5760405162461bcd60e51b815260206004820152601b60248201527f496e637265617365207265766973696f6e20666f7262696464656e00000000006044820152606401611132565b60006111cd6105dc60017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd61526b565b6111d8906001615014565b905061120c8161120960017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd61526b565b55565b61123b8261120960017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e461526b565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b606554606454604051633e53813360e11b81526000926001600160a01b03908116921690839073__$7dde4232fad0cb3c495beb9e735b7d0c63$__90637ca70266906112d29086908690600401615174565b602060405180830381865af41580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190614fe5565b9050808511156113bf5760008061133261132d848961526b565b612b30565b604051631594b05b60e01b8152909850919350915073__$7dde4232fad0cb3c495beb9e735b7d0c63$__90631594b05b906113799087908790879087908c9060040161518e565b602060405180830381865af4158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba9190614fe5565b925050505b6040516333bbb20360e11b815260048101869052602481018290526001600160a01b0380841660448301528416606482015273__$7dde4232fad0cb3c495beb9e735b7d0c63$__9063677764069060840160006040518083038186803b15801561142857600080fd5b505af415801561143c573d6000803e3d6000fd5b50505050505050919050565b600280546040805183815260608082018352936001600160a01b0390931692909160208301908036833750506003546040516370a0823160e01b81529294506001600160a01b0316916370a0823191506114a6908490600401614a57565b602060405180830381865afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e79190614fe5565b826000815181106114fa576114fa6152c6565b6020908102919091010152600480546040516370a0823160e01b81526001600160a01b03909116916370a082319161153491859101614a57565b602060405180830381865afa158015611551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115759190614fe5565b82600181518110611588576115886152c6565b6020026020010181815250505090565b604051636e81b62960e01b81526001600482015260609081908190819073__$b1ba452cecccdd06eb05ace2d0a762c7e1$__90636e81b62990602401600060405180830381865af41580156115f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261161991908101906153a4565b935093509350935090919293565b606060646006018054611639906154ae565b80601f0160208091040260200160405190810160405280929190818152602001828054611665906154ae565b80156116b25780601f10611687576101008083540402835291602001916116b2565b820191906000526020600020905b81548152906001019060200180831161169557829003601f168201915b5050505050905090565b6116c4612b61565b73__$7dde4232fad0cb3c495beb9e735b7d0c63$__63bd0206826116e661260d565b6064805460655460405160e086901b6001600160e01b03191681526001600160a01b03948516600482015291841660248301529290921660448301520160006040518083038186803b15801561173b57600080fd5b505af415801561174f573d6000803e3d6000fd5b50505050565b73__$7dde4232fad0cb3c495beb9e735b7d0c63$__63493f6edc61177761260d565b6040518263ffffffff1660e01b81526004016117939190614a57565b60006040518083038186803b1580156117ab57600080fd5b505af41580156117bf573d6000803e3d6000fd5b5050604051637fc1c15b60e01b815273__$7dde4232fad0cb3c495beb9e735b7d0c63$__9250637fc1c15b91506117ff90606490869086906004016154e8565b60006040518083038186803b15801561181757600080fd5b505af415801561182b573d6000803e3d6000fd5b505050505050565b73__$7dde4232fad0cb3c495beb9e735b7d0c63$__63493f6edc61185561260d565b6040518263ffffffff1660e01b81526004016118719190614a57565b60006040518083038186803b15801561188957600080fd5b505af415801561189d573d6000803e3d6000fd5b5050600280546001600160a01b0319166001600160a01b0394909416939093179092555050565b73__$8f1afe7577f9ab973017c74eca19b86f3c$__63d2c3cf256118e661260d565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810184905260440160006040518083038186803b15801561192c57600080fd5b505af4158015611940573d6000803e3d6000fd5b50505060999190915550565b73__$7dde4232fad0cb3c495beb9e735b7d0c63$__63ed6b63c1606485858561197361260d565b6040516001600160e01b031960e088901b168152600481019590955260248501939093526001600160a01b039182166044850152606484015216608482015260a40160006040518083038186803b1580156119cd57600080fd5b505af41580156119e1573d6000803e3d6000fd5b50505050505050565b60006108516105dc60017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd61526b565b6000611a24614800565b611a3084826000612bac565b805160408051808201909152600a81526914d08e8811195b9a595960b21b6020820152906001600160a01b03163314611a7c5760405162461bcd60e51b81526004016111329190614bfc565b5060408051808201909152601081526f54532d3234207a65726f2076616c756560801b602082015283611ac25760405162461bcd60e51b81526004016111329190614bfc565b5060001981606001511415604051806040016040528060118152602001701514cb4c4d081ddc9bdb99c8185cdcd95d607a1b81525090611b155760405162461bcd60e51b81526004016111329190614bfc565b50600080611b236001612c26565b608085015160405163513cfdb360e11b81526001600160a01b038a16600482015260248101919091526044810183905260648181018390526084820152919350915073__$8f1afe7577f9ab973017c74eca19b86f3c$__9063a279fb669060a401602060405180830381865af4158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc59190614fe5565b60808401526000620186a0611bdc6103e882615014565b611be6908861551e565b611bf09190615535565b905080846080015110611c1c578351611c14906001600160a01b0389169088612cf0565b859450611ced565b82600003611c5757611c336103e8620186a0615014565b620186a08560800151611c46919061551e565b611c509190615535565b9450611ced565b6000620186a0611c6a6103e8600261551e565b611c7790620186a0615014565b611c81908961551e565b611c8b9190615535565b9050611ca6856080015182611ca0919061526b565b86612d42565b506000611cb289612fa7565b9050828111611ce657611cca6103e8620186a0615014565b611cd7620186a08361551e565b611ce19190615535565b611ce8565b875b965050505b611cf5613017565b505050505092915050565b60985460408051808201909152600a81526914d08e8811195b9a595960b21b6020820152906001600160a01b03163314611d4d5760405162461bcd60e51b81526004016111329190614bfc565b5080518251146040518060400160405280600d81526020016c54532d3139206c656e6774687360981b81525090611d975760405162461bcd60e51b81526004016111329190614bfc565b50611da0613017565b505050565b60006108516105dc60017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e461526b565b6000611ddf61263d565b158015611df15750611def612731565b155b8015610851575060985460405163119aa29360e11b8152600160048201526001600160a01b03909116602482015273__$166cd655d2cd990700b75f7db5b5f84c53$__906323354526906044015b602060405180830381865af4158015611e5c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190615557565b6065546064546040516001625acc3160e01b03198152600092839273__$7dde4232fad0cb3c495beb9e735b7d0c63$__9263ffa533cf92611ed2926001600160a01b0391821692911690600401615174565b602060405180830381865af4158015611eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f139190614fe5565b90508015611f2857611f25818461302d565b91505b5092915050565b6000611f3961260d565b6001600160a01b0316826001600160a01b0316149050919050565b6005546000908190630100000090046001600160801b0316818115611f8157611f7c826130d1565b611f9f565b60408051600280825260608201835290916020830190803683375050505b905073__$b1ba452cecccdd06eb05ace2d0a762c7e1$__6350d2e0ba60018784611fc761260d565b6098546040516001600160e01b031960e088901b168152611ffb95949392916001600160a01b031690609690600401615574565b6040805180830381865af4158015612017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203b91906155c5565b935093505050915091565b60015460408051808201909152601a81527f5533532d3131204e6f742063616c6c6261636b2063616c6c65720000000000006020820152906001600160a01b031633146120a65760405162461bcd60e51b81526004016111329190614bfc565b5083156120f4576004546120f49033908690600160a81b900460ff166120d7576003546001600160a01b03166120e4565b6004546001600160a01b03165b6001600160a01b03169190612cf0565b821561174f5760045461174f9033908590600160a81b900460ff16612124576004546001600160a01b03166120e4565b6003546001600160a01b03169190612cf0565b604051630ba4ccab60e11b815260016004820152600090819073__$166cd655d2cd990700b75f7db5b5f84c53$__906317499956906024016040805180830381865af415801561218b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114691906155f3565b73__$7dde4232fad0cb3c495beb9e735b7d0c63$__636d51f04360646121d361260d565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260448101849052606401610f8c565b6000816001600160a01b031661222061260d565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561225d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122819190615617565b6001600160a01b03161492915050565b73__$7dde4232fad0cb3c495beb9e735b7d0c63$__63493f6edc6122b361260d565b6040518263ffffffff1660e01b81526004016122cf9190614a57565b60006040518083038186803b1580156122e757600080fd5b505af41580156122fb573d6000803e3d6000fd5b5050604051630593c4c960e01b815273__$79fe6ec7a3db45dafbed12dca1c6dad764$__9250630593c4c99150610f8c906006908590600401615634565b600054610100900460ff16158080156123595750600054600160ff909116105b806123735750303b158015612373575060005460ff166001145b6123d65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611132565b6000805460ff1916600117905580156123f9576000805461ff0019166101001790555b61240488888861315b565b73__$166cd655d2cd990700b75f7db5b5f84c53$__63adc4343460018a8888888d6001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124869190615617565b896040518863ffffffff1660e01b81526004016124a99796959493929190615648565b60006040518083038186803b1580156124c157600080fd5b505af41580156124d5573d6000803e3d6000fd5b505060405163bd85be2960e01b81526001600482015273__$7dde4232fad0cb3c495beb9e735b7d0c63$__9250637fc1c15b915060649073__$166cd655d2cd990700b75f7db5b5f84c53$__9063bd85be2990602401600060405180830381865af4158015612548573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125709190810190615699565b6040518363ffffffff1660e01b815260040161258d92919061570f565b60006040518083038186803b1580156125a557600080fd5b505af41580156125b9573d6000803e3d6000fd5b505050508015612603576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60006108516105dc60017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c361861526b565b609854604051633934e59d60e11b8152600160048201526001600160a01b03909116602482015260009073__$166cd655d2cd990700b75f7db5b5f84c53$__90637269cb3a90604401611e3f565b60006001600160e01b0319821663c19fa56160e01b14806108965750610896826131fd565b6000806126bd6001612c26565b92508290506126ca6107cb565b6126d4919061526b565b600554909150630100000090046001600160801b031680156126fd576126fb816000613232565b505b509091565b805160021480156127185750612716612731565b155b156127295761272681613352565b50505b6110dc613017565b6006546000906108519060ff1661345a565b6000806000612753600019612b30565b925092509250909192565b6000816001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561279e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108969190615617565b6064546000906060908190839081906127e3906001600160a01b0316613477565b9150915073__$8f1afe7577f9ab973017c74eca19b86f3c$__637325f33f8361280b856134e3565b6098546040516001600160e01b031960e086901b16815261284193929187916001600160a01b0390911690600190600401615761565b600060405180830381865af415801561285e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261288691908101906157af565b9450945094505050909192565b60608060008060006128a3613562565b609854929550909350915073__$8f1afe7577f9ab973017c74eca19b86f3c$__9063e99de4da906001600160a01b03166128db6135ed565b8686866040518663ffffffff1660e01b81526004016128fe95949392919061581b565b600060405180830381865af415801561291b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129439190810190615885565b90969095509350505050565b60008060008061295f6001612c26565b9150915061296c85613681565b612aae5760008060008061297e613736565b935093509350935060006129906127c2565b5050905060006129e08b80156129a557508215155b80156129cc5750609954620186a0906129bf90859061551e565b6129c99190615535565b85115b6129d75760006129d9565b845b8884613803565b9150612a2490506129f1858a615014565b6064548390612a08906001600160a01b0316612fa7565b609754612a159190615014565b612a1f9190615014565b613a3e565b909a509850604080518981526020810189905290810187905260608101869052608081018b905260a081018a905260c081018490527f656724ec88ae6e1bb9ef6d699e92c6ad47802c06dffac7423918ef6f8c8f0e6d9060e00160405180910390a1612a99612a93878c615014565b84613a6e565b9950612aa5858a615014565b98505050505050505b6098546064546040516323c1ae5960e11b815273__$8f1afe7577f9ab973017c74eca19b86f3c$__926347835cb292612af9926001600160a01b039283169290911690600401615174565b60006040518083038186803b158015612b1157600080fd5b505af4158015612b25573d6000803e3d6000fd5b505050505050915091565b6000806000806000612b426001612c26565b91509150612b51868284613a88565b5091989097509095509350505050565b6000612b6b613c95565b90507f768a28cb3459382a3d2173feb2dad0235f8de680b109872da581a3aa269fe5f481604051612b9c9190614ac3565b60405180910390a16110dc613017565b612bb46135ed565b604083018190526001600160a01b038085166020850152609854168352612bdb9084613d1c565b6060830152612be983612fa7565b608083015280612c13576040820151606454612c0e91906001600160a01b0316613d1c565b612c19565b81606001515b60a0909201919091525050565b6000808215612ce3576064546000908190612c49906001600160a01b0316613477565b9150915073__$8f1afe7577f9ab973017c74eca19b86f3c$__633643611860976064612c74866134e3565b86866040518663ffffffff1660e01b8152600401612c969594939291906158de565b6040805180830381865af4158015612cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd691906155f3565b9094509250612ceb915050565b505060975460005b915091565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611da0908490613d7a565b600080612d5f6005546001600160801b0363010000009091041690565b90506000612d6c826130d1565b9050600073__$8f1afe7577f9ab973017c74eca19b86f3c$__630252e2c78787604001518860600151896000015187898c60a001516040518863ffffffff1660e01b8152600401612dc39796959493929190615922565b602060405180830381865af4158015612de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e049190614fe5565b90508015612e76576000612e19826000613232565b600554909150630100000090046001600160801b0316612e39908561526b565b91507faebc771af58936b05e89b0be7d3f9761480181abcd4a649fbdd01753fda169708282604051612e6c92919061597a565b60405180910390a1505b600073__$e930d50fb5f4f1298547dbcb2bb0591990$__63c432aee1876040015188606001518960000151612eb1612eac61260d565b61275e565b6000198d14612ecf578c8c60800151612eca9190615014565b612ed1565b8c5b60966040518763ffffffff1660e01b8152600401612ef496959493929190615993565b602060405180830381865af4158015612f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f359190614fe5565b905085608001518110156040518060400160405280601681526020017554532d32302062616c616e636520646563726561736560501b81525090612f8c5760405162461bcd60e51b81526004016111329190614bfc565b506080860151612f9c908261526b565b979650505050505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190612fd6903090600401614a57565b602060405180830381865afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108969190614fe5565b60006130216127c2565b50506097819055919050565b6000613037612731565b156130c0576040805160028082526060820183526000926020830190803683370190505090508381600081518110613071576130716152c6565b6020026020010181815250507f59400c8c523464b521238ea8f50e923f2bc64663557e6afec92a97f7efe92d0581826040516130ae9291906159d6565b60405180910390a16000915050610896565b6130ca8383613e4c565b9050610896565b60405163a7aced0960e01b8152600160048201526001600160801b038216602482015260609073__$166cd655d2cd990700b75f7db5b5f84c53$__9063a7aced0990604401600060405180830381865af4158015613133573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108969190810190615237565b600054610100900460ff166131825760405162461bcd60e51b8152600401611132906159fb565b61318c8383613e73565b609880546001600160a01b0319166001600160a01b0383161790556131b56064620186a0615535565b6099557fe4166dfcf23bbd3e3f764a99dc8fa740554c03c82d6019b81cf265f396f6f2fe6131e76064620186a0615535565b60405190815260200160405180910390a1505050565b60006001600160e01b0319821663b7b79fa960e01b148061089657506301ffc9a760e01b6001600160e01b0319831614610896565b60606000808361324a57613244612137565b90925090505b604051633ae60bcb60e01b8152600160048201526001600160801b038616602482015273__$166cd655d2cd990700b75f7db5b5f84c53$__90633ae60bcb90604401600060405180830381865af41580156132a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132d19190810190615237565b92508361334a57604051632b25a6cf60e01b815260016004820152602481018390526044810182905273__$166cd655d2cd990700b75f7db5b5f84c53$__90632b25a6cf9060640160006040518083038186803b15801561333157600080fd5b505af4158015613345573d6000803e3d6000fd5b505050505b505092915050565b60015460048054600554604051638008936760e01b815260609460009473__$166cd655d2cd990700b75f7db5b5f84c53$__946380089367946133d8946001600160a01b0390941693600160c81b8304600290810b94600160e01b850490910b938c93630100000090046001600160801b031692600160a81b90910460ff169101615a46565b600060405180830381865af41580156133f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261341d9190810190615a9c565b600580546001600160801b0390921663010000000272ffffffffffffffffffffffffffffffff000000199092169190911790559094909350915050565b600060018260038111156134705761347061527e565b1192915050565b606060006134836135ed565b915061348f8284613d1c565b90506000198114156040518060400160405280600f81526020016e53423a2057726f6e672076616c756560881b815250906134dd5760405162461bcd60e51b81526004016111329190614bfc565b50915091565b606060006135016005546001600160801b0363010000009091041690565b9050801561351757613512816130d1565b61355b565b82516001600160401b038111156135305761353061488a565b604051908082528060200260200182016040528015613559578160200160208202803683370190505b505b9392505050565b60405163af31673360e01b8152600160048201526060908190819073__$166cd655d2cd990700b75f7db5b5f84c53$__9063af31673390602401600060405180830381865af41580156135b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135e19190810190615b02565b91959094509092509050565b6040805160028082526060808301845292602083019080368337505060035482519293506001600160a01b03169183915060009061362d5761362d6152c6565b6001600160a01b03928316602091820292909201015260045482519116908290600190811061365e5761365e6152c6565b60200260200101906001600160a01b031690816001600160a01b03168152505090565b600061368b61263d565b15604051806040016040528060148152602001735533532d31204e65656420726562616c616e636560601b815250906136d75760405162461bcd60e51b81526004016111329190614bfc565b506136e0612731565b15604051806040016040528060158152602001745533532d313420467573652069732061637469766560581b8152509061372d5760405162461bcd60e51b81526004016111329190614bfc565b50600092915050565b600080600080600080613747612893565b60645491935091506001600160a01b031673__$166cd655d2cd990700b75f7db5b5f84c53$__6334d2ec3d8261377b61260d565b86866040518563ffffffff1660e01b815260040161379c9493929190615b50565b602060405180830381865af41580156137b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137dd9190614fe5565b96506137e98383613f1c565b9350600095506137f881612fa7565b945050505090919293565b60645460009081906001600160a01b03168185871161382357600061382d565b61382d868861526b565b90506000620186a086609760020154613846919061551e565b6138509190615535565b82119050600061385f84612fa7565b6001600160a01b03851660009081526096602052604090205490915061388490613fbc565b8811156139735781806138975750878110155b1561395f5760655473__$8f1afe7577f9ab973017c74eca19b86f3c$__9063890ffb849086908b906001600160a01b03166138d2868d615014565b6040516001600160e01b031960e087901b1681526001600160a01b03948516600482015260248101939093529216604482015260648101919091526084810184905260a4016040805180830381865af4158015613933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395791906155f3565b509450613973565b61396b60008989613a88565b909850965050505b8115613a325760008061398586613477565b60985491935091506000906139a5906001600160a01b0316878585613fd4565b90506139b08161428c565b6139fd5760006139bf82613352565b5090507f59400c8c523464b521238ea8f50e923f2bc64663557e6afec92a97f7efe92d0582826040516139f39291906159d6565b60405180910390a1505b6000613a07613017565b9050613a2a613a16868d615014565b8a613a208b612fa7565b612a159085615014565b9a5050505050505b50505050935093915050565b60008083831115613a5a57613a53848461526b565b9150613a67565b613a64838561526b565b90505b9250929050565b6000818311613a7e57600061355b565b61355b828461526b565b60008060008060006000198814613acc57620186a0613aa96103e882615014565b613ab3898b615014565b613abd919061551e565b613ac79190615535565b613ace565b875b9050613ad9816142d8565b8015801590613ae757508515155b15613c8b57613af4614800565b606454613b0c906001600160a01b0316826001612bac565b80516020820151604051637a55caf360e01b815273__$8f1afe7577f9ab973017c74eca19b86f3c$__92637a55caf392613b4892600401615174565b602060405180830381865af4158015613b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b899190614fe5565b9450670de0b6b3a764000085613ba8613ba28585612d42565b8b613a6e565b613bb2919061551e565b613bbc9190615535565b6065546020830151608084015192985073__$8f1afe7577f9ab973017c74eca19b86f3c$__92632ce30333926001600160a01b031691908b908d613bfe613017565b6040516001600160e01b031960e089901b1681526001600160a01b03968716600482015295909416602486015260448501929092526064840152608483015260a482015260c4016040805180830381865af4158015613c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8591906155f3565b94509250505b5093509350935093565b60606000613cb36005546001600160801b0363010000009091041690565b90508015613ccb57613cc6816001613232565b613d16565b613cd36135ed565b516001600160401b03811115613ceb57613ceb61488a565b604051908082528060200260200182016040528015613d14578160200160208202803683370190505b505b91505090565b8151600090815b81811015613d6e57836001600160a01b0316858281518110613d4757613d476152c6565b60200260200101516001600160a01b031603613d665791506108969050565b600101613d23565b50600019949350505050565b6000613dcf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661432c9092919063ffffffff16565b805190915015611da05780806020019051810190613ded9190615557565b611da05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611132565b6000806000613e5a84612c26565b91509150613e69858284613803565b5095945050505050565b600054610100900460ff16613e9a5760405162461bcd60e51b8152600401611132906159fb565b613ec4817fd2de0374d4479f33e63ae5ed6ca772a10463dd883a90c612050b51fab6196400614343565b613ecd82614399565b604051631797527d60e01b81526064600482018190526001600160a01b0380851660248401528316604483015273__$7dde4232fad0cb3c495beb9e735b7d0c63$__91631797527d91016117ff565b600082516000146108965773__$e930d50fb5f4f1298547dbcb2bb0591990$__635dcb613060646097613f4d6135ed565b613f5561260d565b609689896040518863ffffffff1660e01b8152600401613f7b9796959493929190615b8e565b602060405180830381865af4158015613f98573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355b9190614fe5565b60008115613fca5781610896565b620186a092915050565b6060613fde61263d565b15604051806040016040528060148152602001735533532d31204e65656420726562616c616e636560601b8152509061402a5760405162461bcd60e51b81526004016111329190614bfc565b5060015460048054604051630dc528a760e01b81526001600160a01b0390931691830191909152600160c81b8104600290810b6024840152600160e01b8204900b6044830152600160a81b900460ff1615156064820152600090819073__$166cd655d2cd990700b75f7db5b5f84c53$__90630dc528a7906084016040805180830381865af41580156140c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e591906155f3565b6003546004549294509092506001600160a01b039081169173__$b1ba452cecccdd06eb05ace2d0a762c7e1$__91631c2040d5918b918b9186911661412a888a615014565b61413c8a670de0b6b3a764000061551e565b6141469190615535565b60405160e087901b6001600160e01b03191681526001600160a01b0395861660048201526024810194909452918416604484015290921660648201526084810191909152609660a482015260c401600060405180830381865af41580156141b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141d99190810190615237565b9350806001600160a01b0316866000815181106141f8576141f86152c6565b60200260200101516001600160a01b0316146142815783600181518110614221576142216152c6565b60200260200101518460008151811061423c5761423c6152c6565b602002602001015185600081518110614257576142576152c6565b6020026020010186600181518110614271576142716152c6565b6020908102919091010191909152525b505050949350505050565b8051600090815b818110156142ce578381815181106142ad576142ad6152c6565b60200260200101516000036142c6575060019392505050565b600101614293565b5060009392505050565b6142e061263d565b15604051806040016040528060148152602001735533532d31204e65656420726562616c616e636560601b815250906110dc5760405162461bcd60e51b81526004016111329190614bfc565b606061433b84846000856145be565b949350505050565b61434d828261468e565b6110dc5760405162461bcd60e51b815260206004820152601a60248201527f496e74657266616365206973206e6f7420737570706f727465640000000000006044820152606401611132565b600054610100900460ff166143c05760405162461bcd60e51b8152600401611132906159fb565b6001600160a01b0381166144085760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b6044820152606401611132565b614432817f4c2403fdcb3cff9b705d96bf0705858e3390412670a62c8bcba611ca7e20ab86614343565b60006001600160a01b0316816001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561447b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061449f9190615617565b6001600160a01b0316036144e75760405162461bcd60e51b815260206004820152600f60248201526e5a65726f20676f7665726e616e636560881b6044820152606401611132565b6145168161120960017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c361861526b565b6145454261120960017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b61526b565b6145744361120960017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f161526b565b604080516001600160a01b0383168152426020820152438183015290517f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe2367134269181900360600190a150565b60608247101561461f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611132565b600080866001600160a01b0316858760405161463b9190615bf7565b60006040518083038185875af1925050503d8060008114614678576040519150601f19603f3d011682016040523d82523d6000602084013e61467d565b606091505b5091509150612f9c87838387614762565b60006001600160a01b0383166146d55760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b6044820152606401611132565b823b60008190036146ea576000915050610896565b6040516301ffc9a760e01b81526001600160e01b0319841660048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa925050508015614754575060408051601f3d908101601f1916820190925261475191810190615557565b60015b156142ce5791506108969050565b606083156147d15782516000036147ca576001600160a01b0385163b6147ca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611132565b508161433b565b61433b83838151156147e65781518083602001fd5b8060405162461bcd60e51b81526004016111329190614bfc565b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001600081525090565b60006020828403121561485a57600080fd5b81356001600160e01b03198116811461355b57600080fd5b6001600160a01b038116811461488757600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156148c8576148c861488a565b604052919050565b60006001600160401b038211156148e9576148e961488a565b50601f01601f191660200190565b600082601f83011261490857600080fd5b813561491b614916826148d0565b6148a0565b81815284602083860101111561493057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561496657600080fd5b863561497181614872565b9550602087013561498181614872565b94506040870135935060608701356001600160401b03808211156149a457600080fd5b6149b08a838b016148f7565b945060808901359150808211156149c657600080fd5b506149d389828a016148f7565b92505060a087013590509295509295509295565b600080604083850312156149fa57600080fd5b8235614a0581614872565b946020939093013593505050565b801515811461488757600080fd5b600060208284031215614a3357600080fd5b813561355b81614a13565b600060208284031215614a5057600080fd5b5035919050565b6001600160a01b0391909116815260200190565b600060208284031215614a7d57600080fd5b813561355b81614872565b600081518084526020808501945080840160005b83811015614ab857815187529582019590820190600101614a9c565b509495945050505050565b60208152600061355b6020830184614a88565b600081518084526020808501945080840160005b83811015614ab8578151151587529582019590820190600101614aea565b6080808252855190820181905260009060209060a0840190828901845b82811015614b4a5781516001600160a01b031684529284019290840190600101614b25565b5050508381038285015286518082528783019183019060005b81811015614b8257835160020b83529284019291840191600101614b63565b50508481036040860152614b968188614a88565b925050508281036060840152612f9c8185614ad6565b60005b83811015614bc7578181015183820152602001614baf565b50506000910152565b60008151808452614be8816020860160208601614bac565b601f01601f19169290920160200192915050565b60208152600061355b6020830184614bd0565b60008083601f840112614c2157600080fd5b5081356001600160401b03811115614c3857600080fd5b602083019150836020828501011115613a6757600080fd5b60008060208385031215614c6357600080fd5b82356001600160401b03811115614c7957600080fd5b61294385828601614c0f565b600080600060608486031215614c9a57600080fd5b833592506020840135614cac81614872565b929592945050506040919091013590565b60006001600160401b03821115614cd657614cd661488a565b5060051b60200190565b600082601f830112614cf157600080fd5b81356020614d0161491683614cbd565b82815260059290921b84018101918181019086841115614d2057600080fd5b8286015b84811015614d3b5780358352918301918301614d24565b509695505050505050565b60008060408385031215614d5957600080fd5b82356001600160401b0380821115614d7057600080fd5b818501915085601f830112614d8457600080fd5b81356020614d9461491683614cbd565b82815260059290921b84018101918181019089841115614db357600080fd5b948201945b83861015614dda578535614dcb81614872565b82529482019490820190614db8565b96505086013592505080821115614df057600080fd5b50614dfd85828601614ce0565b9150509250929050565b60008060408385031215614e1a57600080fd5b823591506020830135614e2c81614a13565b809150509250929050565b600060208284031215614e4957600080fd5b81356001600160401b03811115614e5f57600080fd5b611f25848285016148f7565b60008060008060608587031215614e8157600080fd5b843593506020850135925060408501356001600160401b03811115614ea557600080fd5b614eb187828801614c0f565b95989497509550505050565b600060808284031215614ecf57600080fd5b82601f830112614ede57600080fd5b604051608081018181106001600160401b0382111715614f0057614f0061488a565b604052806080840185811115614f1557600080fd5b845b81811015614f2f578035835260209283019201614f17565b509195945050505050565b8060020b811461488757600080fd5b600080600080600080600061014080898b031215614f6657600080fd5b8835614f7181614872565b97506020890135614f8181614872565b96506040890135614f9181614872565b95506060890135614fa181614872565b94506080890135614fb181614f3a565b935060a0890135614fc181614f3a565b92508881018a1015614fd257600080fd5b5060c08801905092959891949750929550565b600060208284031215614ff757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561089657610896614ffe565b8060005b600481101561174f57815184526020938401939091019060010161502b565b60006101c089835260208084018a60005b60058110156150815781516001600160a01b03168352918301919083019060010161505b565b5050505061509260c0840189615027565b806101408401526150a581840188614bd0565b90508281036101608401526150ba8187614bd0565b61018084019590955250506101a0015295945050505050565b600082601f8301126150e457600080fd5b815160206150f461491683614cbd565b82815260059290921b8401810191818101908684111561511357600080fd5b8286015b84811015614d3b5780518352918301918301615117565b6000806040838503121561514157600080fd5b825161514c81614a13565b60208401519092506001600160401b0381111561516857600080fd5b614dfd858286016150d3565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039586168152602081019490945260408401929092526060830152909116608082015260a00190565b8881526020808201899052610120820190604083018960005b60028110156151fd5781516001600160a01b0316835291830191908301906001016151d7565b50505050608082019690965260a08101949094526001600160a01b039290921660c0840152151560e0830152610100909101529392505050565b60006020828403121561524957600080fd5b81516001600160401b0381111561525f57600080fd5b611f25848285016150d3565b8181038181111561089657610896614ffe565b634e487b7160e01b600052602160045260246000fd5b82815260408101600483106152b957634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b634e487b7160e01b600052603260045260246000fd5b600082601f8301126152ed57600080fd5b815160206152fd61491683614cbd565b82815260059290921b8401810191818101908684111561531c57600080fd5b8286015b84811015614d3b57805161533381614872565b8352918301918301615320565b600082601f83011261535157600080fd5b8151602061536161491683614cbd565b82815260059290921b8401810191818101908684111561538057600080fd5b8286015b84811015614d3b57805161539781614a13565b8352918301918301615384565b600080600080608085870312156153ba57600080fd5b84516001600160401b03808211156153d157600080fd5b6153dd888389016152dc565b95506020915081870151818111156153f457600080fd5b8701601f8101891361540557600080fd5b805161541361491682614cbd565b81815260059190911b8201840190848101908b83111561543257600080fd5b928501925b8284101561545957835161544a81614f3a565b82529285019290850190615437565b60408b015190985094505050508082111561547357600080fd5b61547f888389016150d3565b9350606087015191508082111561549557600080fd5b506154a287828801615340565b91505092959194509250565b600181811c908216806154c257607f821691505b6020821081036154e257634e487b7160e01b600052602260045260246000fd5b50919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b808202811582820484141761089657610896614ffe565b60008261555257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561556957600080fd5b815161355b81614a13565b86815260c06020820152600061558d60c0830188614bd0565b828103604084015261559f8188614a88565b6001600160a01b0396871660608501529490951660808301525060a00152949350505050565b600080604083850312156155d857600080fd5b82516155e381614872565b6020939093015192949293505050565b6000806040838503121561560657600080fd5b505080516020909101519092909150565b60006020828403121561562957600080fd5b815161355b81614872565b82815260a0810161355b6020830184615027565b8781526001600160a01b0387811660208301528681166040830152600286810b606084015285900b60808084019190915290841660a08301526101408201908360c084013798975050505050505050565b6000602082840312156156ab57600080fd5b81516001600160401b038111156156c157600080fd5b8201601f810184136156d257600080fd5b80516156e0614916826148d0565b8181528560208385010111156156f557600080fd5b615706826020830160208601614bac565b95945050505050565b82815260406020820152600061433b6040830184614bd0565b600081518084526020808501945080840160005b83811015614ab85781516001600160a01b03168752958201959082019060010161573c565b60a08152600061577460a0830188615728565b82810360208401526157868188614a88565b604084019690965250506001600160a01b03929092166060830152151560809091015292915050565b6000806000606084860312156157c457600080fd5b8351925060208401516001600160401b03808211156157e257600080fd5b6157ee878388016150d3565b9350604086015191508082111561580457600080fd5b50615811868287016150d3565b9150509250925092565b6001600160a01b038616815260a06020820181905260009061583f90830187615728565b82810360408401526158518187615728565b905082810360608401526158658186614a88565b905082810360808401526158798185614a88565b98975050505050505050565b6000806040838503121561589857600080fd5b82516001600160401b03808211156158af57600080fd5b6158bb868387016152dc565b935060208501519150808211156158d157600080fd5b50614dfd858286016150d3565b85815284602082015260a0604082015260006158fd60a0830186614a88565b828103606084015261590f8186615728565b9150508260808301529695505050505050565b87815260e06020820152600061593b60e0830189615728565b604083018890526001600160a01b038716606084015282810360808401526159638187614a88565b60a0840195909552505060c0015295945050505050565b82815260406020820152600061433b6040830184614a88565b60c0815260006159a660c0830189615728565b6020830197909752506001600160a01b039485166040820152929093166060830152608082015260a00152919050565b6040815260006159e96040830185614a88565b82810360208401526157068185614a88565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60018060a01b03871681528560020b60208201528460020b604082015260c060608201526000615a7960c0830186614a88565b6001600160801b039490941660808301525090151560a090910152949350505050565b600080600060608486031215615ab157600080fd5b83516001600160401b03811115615ac757600080fd5b615ad3868287016150d3565b9350506020840151915060408401516001600160801b0381168114615af757600080fd5b809150509250925092565b600080600060608486031215615b1757600080fd5b83516001600160401b0380821115615b2e57600080fd5b615b3a878388016152dc565b945060208601519150808211156157e257600080fd5b6001600160a01b03858116825284166020820152608060408201819052600090615b7c90830185615728565b8281036060840152612f9c8185614a88565b87815286602082015260e060408201526000615bad60e0830188615728565b6001600160a01b03871660608401526080830186905282810360a0840152615bd58186615728565b905082810360c0840152615be98185614a88565b9a9950505050505050505050565b60008251615c09818460208701614bac565b919091019291505056fea2646970667358221220359e64ae66321416df2a1e1636cfb91b75b85da83bddf6349a586263bff1864a64736f6c63430008110033",
  "libraries": {
    "ConverterStrategyBaseLib": "0x5E427A2BD4Da38234C6EBAD7A64d7d0007D02382",
    "ConverterStrategyBaseLib2": "0x4089B52F777850eBB8e8252055707B7B36817358",
    "StrategyLib2": "0x956D3fed2B1FC3B905C9376b4c5DAAc9ADF999c4",
    "UniswapV3ConverterStrategyLogicLib": "0x631DA2Fb619Fe49E96758A9c15f87f482A31Ec3a",
    "PairBasedStrategyLib": "0x713DF40F222d36d557e1A66f6F79fDbC0a78457D",
    "PairBasedStrategyLogicLib": "0x57D3e8CA53878d6Aa8B1c48Bd8F3e52a3bCeC005"
  },
  "devdoc": {
    "author": "a17",
    "kind": "dev",
    "methods": {
      "claim()": {
        "details": "Manual claim rewards."
      },
      "created()": {
        "returns": {
          "_0": "Creation timestamp"
        }
      },
      "createdBlock()": {
        "returns": {
          "_0": "Creation block number"
        }
      },
      "doHardWork()": {
        "returns": {
          "earned": "Earned amount in terms of {asset}",
          "lost": "Lost amount in terms of {asset}"
        }
      },
      "emergencyExit()": {
        "details": "In case of any issue operator can withdraw all from pool."
      },
      "getDefaultState()": {
        "returns": {
          "addr": "[tokenA, tokenB, pool, profitHolder]",
          "boolValues": "[isStablePool, depositorSwapTokens]",
          "nums": "[totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]",
          "tickData": "[tickSpacing, lowerTick, upperTick, rebalanceTickRange]"
        }
      },
      "getFees()": {
        "returns": {
          "fee0": "and fee1."
        }
      },
      "getPropNotUnderlying18()": {
        "returns": {
          "_0": "Proportion of the not-underlying [0...1e18]"
        }
      },
      "getSlot(uint256)": {
        "details": "Gets a slot as bytes32"
      },
      "getSpecificState()": {
        "returns": {
          "nums": "Balances of [tokenA, tokenB] for profit holder"
        }
      },
      "increaseRevision(address)": {
        "details": "Revision should be increased on each contract upgrade"
      },
      "init(address,address,address,address,int24,int24,uint256[4])": {
        "params": {
          "controller_": "The address of the controller.",
          "converter_": "The address of the converter.",
          "fuseThresholds": "Price thresholds for tokens [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]",
          "pool_": "The address of the pool.",
          "rebalanceTickRange_": "The tick range for rebalancing.",
          "splitter_": "The address of the splitter.",
          "tickRange_": "The tick range for the liquidity position."
        }
      },
      "investAll(uint256,bool)": {
        "params": {
          "updateTotalAssetsBeforeInvest_": "Recalculate total assets amount before depositing.                                       It can be false if we know exactly, that the amount is already actual."
        },
        "returns": {
          "strategyLoss": "Loss should be covered from Insurance"
        }
      },
      "isController(address)": {
        "details": "Return true if given address is controller"
      },
      "isReadyToHardWork()": {
        "returns": {
          "_0": "A boolean indicating if the strategy is ready for hard work."
        }
      },
      "needRebalance()": {
        "returns": {
          "_0": "A boolean indicating if {rebalanceNoSwaps} should be called."
        }
      },
      "onTransferAmounts(address[],uint256[])": {
        "params": {
          "amounts_": "Amount of {asset_} that has been sent to the user's balance",
          "assets_": "Any asset sent to the balance, i.e. inside repayTheBorrow"
        }
      },
      "performanceFee()": {
        "details": "use FEE_DENOMINATOR"
      },
      "previousImplementation()": {
        "details": "Previous logic implementation"
      },
      "rebalanceNoSwaps(bool)": {
        "params": {
          "checkNeedRebalance": "Revert if rebalance is not needed. Pass false to deposit after withdrawByAgg-iterations"
        }
      },
      "requirePayAmountBack(address,uint256)": {
        "params": {
          "amount_": "Required amount of {theAsset_}",
          "theAsset_": "Required asset (either collateral or borrow), it can be NOT underlying"
        },
        "returns": {
          "amountOut": "Amount that was send OR can be claimed on the next call.                   The caller should control own balance to know if the amount was actually send                   (because we need compatibility with exist not-NSR strategies)"
        }
      },
      "revision()": {
        "details": "Contract upgrade counter"
      },
      "setCompoundRatio(uint256)": {
        "details": "PlatformVoter can change compound ratio for some strategies.      A strategy can implement another logic for some uniq cases."
      },
      "setFuseStatus(uint256)": {
        "params": {
          "status": "See PairBasedStrategyLib.FuseStatus enum for possible values"
        }
      },
      "setFuseThresholds(uint256[4])": {
        "params": {
          "values": "Price thresholds: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]"
        }
      },
      "setLiquidationThreshold(address,uint256)": {
        "details": "Liquidation thresholds are used to detect dust in many cases, not only in liquidation case",
        "params": {
          "amount": "Min amount of token allowed to liquidate, token's decimals are used."
        }
      },
      "setReinvestThresholdPercent(uint256)": {
        "params": {
          "percent_": "New value of the percent, decimals = {REINVEST_THRESHOLD_PERCENT_DENOMINATOR}"
        }
      },
      "setStrategyProfitHolder(address)": {
        "details": "Set a dedicated contract for rewards for properly counting.      It is safe to allow change it to operator - we suppose the contract only temporally store the last rewards."
      },
      "setStrategySpecificName(string)": {
        "details": "The name will be used for UI."
      },
      "setWithdrawDone(uint256)": {
        "params": {
          "done": "0 - full withdraw required, 1 - full withdraw was done"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalAssets()": {
        "details": "Total amount of underlying assets under control of this strategy."
      },
      "uniswapV3MintCallback(uint256,uint256,bytes)": {
        "params": {
          "amount0Owed": "The amount of token0 owed to the pool.",
          "amount1Owed": "The amount of token1 owed to the pool."
        }
      },
      "withdrawAllToSplitter()": {
        "details": "Withdraws all underlying assets to the vault",
        "returns": {
          "strategyLoss": "Loss should be covered from Insurance"
        }
      },
      "withdrawByAggStep(address,address,uint256,bytes,bytes,uint256)": {
        "details": "All swap-by-agg data should be prepared using {quoteWithdrawByAgg} off-chain",
        "params": {
          "aggregator_": "Aggregator that should be used on next swap. 0 - use liquidator",
          "amountToSwap_": "Amount that should be swapped. 0 - no swap",
          "entryToPool": "Allow to enter to the pool at the end. Use false if you are going to make several iterations.                    It's possible to enter back to the pool by calling {rebalanceNoSwaps} at any moment                    0 - not allowed, 1 - allowed, 2 - allowed only if completed",
          "planEntryData": "PLAN_XXX + additional data, see IterationPlanKinds",
          "swapData": "Swap rote that was prepared off-chain.",
          "tokenToSwap_": "What token should be swapped to other"
        },
        "returns": {
          "completed": "All debts were closed, leftovers were swapped to the required proportions."
        }
      },
      "withdrawToSplitter(uint256)": {
        "details": "Withdraws some assets to the splitter",
        "returns": {
          "strategyLoss": "Loss should be covered from Insurance"
        }
      }
    },
    "title": "Delta-neutral liquidity hedging converter fill-up/swap rebalancing strategy for UniswapV3",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CONTROLLABLE_VERSION()": {
        "notice": "Version of the contract"
      },
      "capacity()": {
        "notice": "Unlimited capacity by default"
      },
      "controller()": {
        "notice": "Return controller address saved in the contract slot"
      },
      "created()": {
        "notice": "Return creation timestamp"
      },
      "createdBlock()": {
        "notice": "Return creation block number"
      },
      "doHardWork()": {
        "notice": "Do hard work with reinvesting"
      },
      "getDefaultState()": {
        "notice": "Returns the current state of the contract"
      },
      "getFees()": {
        "notice": "Returns the fees for the current state."
      },
      "getPropNotUnderlying18()": {
        "notice": "Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy"
      },
      "init(address,address,address,address,int24,int24,uint256[4])": {
        "notice": "Initialize the strategy with the given parameters."
      },
      "investAll(uint256,bool)": {
        "notice": "Stakes everything the strategy holds into the reward pool. amount_ Amount transferred to the strategy balance just before calling this function"
      },
      "investedAssets()": {
        "notice": "Amount of underlying assets converted to pool assets and invested to the pool."
      },
      "isGovernance(address)": {
        "notice": "Return true if given address is setup as governance in Controller"
      },
      "isReadyToHardWork()": {
        "notice": "Check if the strategy is ready for hard work."
      },
      "liquidationThresholds(address)": {
        "notice": "Minimum token amounts that can be liquidated"
      },
      "needRebalance()": {
        "notice": "Check if the strategy needs rebalancing."
      },
      "onTransferAmounts(address[],uint256[])": {
        "notice": "TetuConverter calls this function when it sends any amount to user's balance"
      },
      "performanceFee()": {
        "notice": "A percent of total profit that is sent to the {performanceReceiver} before compounding"
      },
      "performanceReceiver()": {
        "notice": "{performanceFee}% of total profit is sent to the {performanceReceiver} before compounding"
      },
      "quoteWithdrawByAgg(bytes)": {
        "notice": "Get info about a swap required by next call of {withdrawByAggStep} within the given plan"
      },
      "rebalanceNoSwaps(bool)": {
        "notice": "Rebalance using borrow/repay only, no swaps"
      },
      "requirePayAmountBack(address,uint256)": {
        "notice": "Converters asks to send some amount back.         The results depend on whether the required amount is on the balance:         1. The {amount_} exists on the balance: send the amount to TetuConverter, return {amount_}         2. The {amount_} doesn't exist on the balance. Try to receive the {amount_}.         2.1. if the required amount is received: return {amount_}         2.2. if less amount X (X < {amount_}) is received return X - gap         In the case 2 no amount is send to TetuConverter.         Converter should make second call of requirePayAmountBack({amountOut}) to receive the assets."
      },
      "setFuseStatus(uint256)": {
        "notice": "Manually set status of the fuse"
      },
      "setFuseThresholds(uint256[4])": {
        "notice": "Set thresholds for the fuse: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]         Decimals 18. The thresholds are compared with prices from TetuConverter's price oracle.         Example: [0.9, 0.92, 1.08, 1.1]         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again."
      },
      "setWithdrawDone(uint256)": {
        "notice": "Set withdrawDone value.         When a fuse was triggered ON, all debts should be closed and asset should be converted to underlying.         After completion of the conversion withdrawDone can be set to 1.         So, {getFuseStatus} will return  withdrawDone=1 and you will know, that withdraw is not required"
      },
      "setupPerformanceFee(uint256,address,uint256)": {
        "notice": "Set performance fee, receiver and ratio"
      },
      "uniswapV3MintCallback(uint256,uint256,bytes)": {
        "notice": "Callback function called by Uniswap V3 pool on mint operation."
      },
      "withdrawByAggStep(address,address,uint256,bytes,bytes,uint256)": {
        "notice": "Make withdraw iteration: [exit from the pool], [make 1 swap], [repay a debt], [enter to the pool]         Typical sequence of the actions is: exit from the pool, make 1 swap, repay 1 debt.         You can enter to the pool if you are sure that you won't have borrow + repay on AAVE3 in the same block."
      }
    },
    "notice": "This strategy provides delta-neutral liquidity hedging for Uniswap V3 pools. It rebalances the liquidity         by utilizing fill-up and swap methods depending on the range size of the liquidity provided.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11499,
        "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 11502,
        "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 125271,
        "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
        "label": "state",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(State)123129_storage"
      },
      {
        "astId": 125278,
        "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "60",
        "type": "t_array(t_uint256)40_storage"
      },
      {
        "astId": 16849,
        "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
        "label": "baseState",
        "offset": 0,
        "slot": "100",
        "type": "t_struct(BaseState)5446_storage"
      },
      {
        "astId": 17296,
        "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 94149,
        "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
        "label": "liquidationThresholds",
        "offset": 0,
        "slot": "150",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 94153,
        "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
        "label": "_csbs",
        "offset": 0,
        "slot": "151",
        "type": "t_struct(ConverterStrategyBaseState)90096_storage"
      },
      {
        "astId": 95624,
        "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)46_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_array(t_uint256)40_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[40]",
        "numberOfBytes": "1280"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITetuConverter)51397": {
        "encoding": "inplace",
        "label": "contract ITetuConverter",
        "numberOfBytes": "20"
      },
      "t_enum(FuseStatus)117473": {
        "encoding": "inplace",
        "label": "enum PairBasedStrategyLib.FuseStatus",
        "numberOfBytes": "1"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BaseState)5446_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyV3.BaseState",
        "members": [
          {
            "astId": 5427,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5430,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "splitter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5433,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "performanceReceiver",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5436,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "performanceFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5439,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "performanceFeeRatio",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5442,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "compoundRatio",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5445,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "strategySpecificName",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(ConverterStrategyBaseState)90096_storage": {
        "encoding": "inplace",
        "label": "struct IConverterStrategyBase.ConverterStrategyBaseState",
        "members": [
          {
            "astId": 90078,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "investedAssets",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 90082,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "converter",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ITetuConverter)51397"
          },
          {
            "astId": 90085,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "reinvestThresholdPercent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 90088,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "debtToInsurance",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 90095,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "__gap",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)49_storage"
          }
        ],
        "numberOfBytes": "1696"
      },
      "t_struct(FuseStateParams)117513_storage": {
        "encoding": "inplace",
        "label": "struct PairBasedStrategyLib.FuseStateParams",
        "members": [
          {
            "astId": 117502,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(FuseStatus)117473"
          },
          {
            "astId": 117507,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "thresholds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 117512,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "__gap",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)4_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(PairState)119679_storage": {
        "encoding": "inplace",
        "label": "struct PairBasedStrategyLogicLib.PairState",
        "members": [
          {
            "astId": 119638,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 119640,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "strategyProfitHolder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 119643,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "tokenA",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 119646,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "tokenB",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 119648,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "isStablePool",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 119651,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "depositorSwapTokens",
            "offset": 21,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 119653,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "tickSpacing",
            "offset": 22,
            "slot": "3",
            "type": "t_int24"
          },
          {
            "astId": 119655,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "lowerTick",
            "offset": 25,
            "slot": "3",
            "type": "t_int24"
          },
          {
            "astId": 119657,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "upperTick",
            "offset": 28,
            "slot": "3",
            "type": "t_int24"
          },
          {
            "astId": 119659,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "rebalanceTickRange",
            "offset": 0,
            "slot": "4",
            "type": "t_int24"
          },
          {
            "astId": 119661,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "totalLiquidity",
            "offset": 3,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 119665,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "fuseAB",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(FuseStateParams)117513_storage"
          },
          {
            "astId": 119668,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "withdrawDone",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 119671,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "lastRebalanceNoSwap",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 119678,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "__gap",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_uint256)33_storage"
          }
        ],
        "numberOfBytes": "1568"
      },
      "t_struct(State)123129_storage": {
        "encoding": "inplace",
        "label": "struct UniswapV3ConverterStrategyLogicLib.State",
        "members": [
          {
            "astId": 123123,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "pair",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PairState)119679_storage"
          },
          {
            "astId": 123128,
            "contract": "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol:UniswapV3ConverterStrategy",
            "label": "__gap",
            "offset": 0,
            "slot": "49",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "1888"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}