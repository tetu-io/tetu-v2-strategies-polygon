{
  "address": "0x3e389B4f0691E9DdB597fad8039f7B60d25B3eC1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee1",
          "type": "uint256"
        }
      ],
      "name": "AlgebraFeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusReward",
          "type": "uint256"
        }
      ],
      "name": "AlgebraRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coveredByRewards",
          "type": "uint256"
        }
      ],
      "name": "CoverLoss",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitToCover",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coveredByRewards",
          "type": "uint256"
        }
      ],
      "name": "Rebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitToCover",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coveredByRewards",
          "type": "uint256"
        }
      ],
      "name": "RebalancedDebt",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "calcEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAlgebraPool",
          "name": "pool",
          "type": "IAlgebraPool"
        },
        {
          "internalType": "int24",
          "name": "lowerTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upperTick",
          "type": "int24"
        },
        {
          "internalType": "bool",
          "name": "depositorSwapTokens",
          "type": "bool"
        }
      ],
      "name": "getEntryDataProportions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb0163713860a55d9557be6a7a6d1ec01cdded10d0666f5694f6bd76e0bcaa2d",
  "receipt": {
    "to": null,
    "from": "0xF1dCce3a6c321176C62b71c091E3165CC9C3816E",
    "contractAddress": "0x3e389B4f0691E9DdB597fad8039f7B60d25B3eC1",
    "transactionIndex": 9,
    "gasUsed": "5231706",
    "logsBloom": "0x
    "blockHash": "0xd7a0db9d9aed48c5199c4ee8cef1afb52c497a4c819ea0b987123f7926582d25",
    "transactionHash": "0xcb0163713860a55d9557be6a7a6d1ec01cdded10d0666f5694f6bd76e0bcaa2d",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 50652761,
        "transactionHash": "0xcb0163713860a55d9557be6a7a6d1ec01cdded10d0666f5694f6bd76e0bcaa2d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1dcce3a6c321176c62b71c091e3165cc9c3816e",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003a15671c4f6c800000000000000000000000000000000000000000000000000c86602f5d41e76fd0000000000000000000000000000000000000000000000c00efdbe336e7908b3000000000000000000000000000000000000000000000000c4c4ac840f27aefd0000000000000000000000000000000000000000000000c0129f14a5336fd0b3",
        "logIndex": 65,
        "blockHash": "0xd7a0db9d9aed48c5199c4ee8cef1afb52c497a4c819ea0b987123f7926582d25"
      }
    ],
    "blockNumber": 50652761,
    "cumulativeGasUsed": "6236715",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "beebd18f82b76c6876687623c23a6793",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"name\":\"AlgebraFeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusReward\",\"type\":\"uint256\"}],\"name\":\"AlgebraRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coveredByRewards\",\"type\":\"uint256\"}],\"name\":\"CoverLoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coveredByRewards\",\"type\":\"uint256\"}],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitToCover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coveredByRewards\",\"type\":\"uint256\"}],\"name\":\"RebalancedDebt\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"calcEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAlgebraPool\",\"name\":\"pool\",\"type\":\"IAlgebraPool\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"depositorSwapTokens\",\"type\":\"bool\"}],\"name\":\"getEntryDataProportions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CoverLoss(uint256,uint256)\":{\"params\":{\"coveredByRewards\":\"Part of the loss covered by rewards\",\"loss\":\"Total amount of loss\"}}},\"kind\":\"dev\",\"methods\":{\"exit(AlgebraConverterStrategyLogicLib.State storage,uint128,bool)\":{\"params\":{\"emergency\":\"Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\"}},\"getEntryDataProportions(IAlgebraPool,int24,int24,bool)\":{\"params\":{\"depositorSwapTokens\":\"A boolean indicating if need to use token B instead of token A.\",\"lowerTick\":\"The lower tick of the pool's main range.\",\"pool\":\"Pool instance.\",\"upperTick\":\"The upper tick of the pool's main range.\"},\"returns\":{\"_0\":\"prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\",\"_1\":\"prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\"}},\"initStrategyState(AlgebraConverterStrategyLogicLib.State storage,address[2],int24,int24,address,bool,uint256[4])\":{\"params\":{\"controllerPool\":\"[controller, pool]\",\"fuseThresholds\":\"Fuse thresholds for tokens (stable pool only)\"}},\"needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage,ITetuConverter)\":{\"returns\":{\"needRebalance\":\"A boolean indicating if {rebalanceNoSwaps} should be called\"}},\"rebalanceNoSwaps(IConverterStrategyBase.ConverterStrategyBaseState storage,PairBasedStrategyLogicLib.PairState storage,address[2],uint256,uint256,address,bool,mapping(address => uint256) storage)\":{\"params\":{\"checkNeedRebalance_\":\"True if the function should ensure that the rebalance is required\",\"converterLiquidator\":\"[TetuConverter, TetuLiquidator]\",\"totalAssets_\":\"Current value of totalAssets()\"},\"returns\":{\"tokenAmounts\":\"Token amounts for deposit. If length == 0 - rebalance wasn't made and no deposit is required.\"}},\"withdrawByAggStep(IConverterStrategyBase.ConverterStrategyBaseState storage,address[5],uint256[4],bytes,bytes,PairBasedStrategyLogicLib.PairState storage,mapping(address => uint256) storage)\":{\"params\":{\"addr_\":\"[tokenToSwap, aggregator, controller, converter, splitter]\",\"values_\":\"[amountToSwap_, profitToCover, oldTotalAssets, entryToPool]\"},\"returns\":{\"completed\":\"All debts were closed, leftovers were swapped to proper proportions\",\"tokenAmountsOut\":\"Amounts to be deposited to pool. This array is empty if no deposit allowed/required.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEntryDataProportions(IAlgebraPool,int24,int24,bool)\":{\"notice\":\"Calculate proportions of the tokens for entry kind 1\"},\"getPropNotUnderlying18(PairBasedStrategyLogicLib.PairState storage)\":{\"notice\":\"Get proportion of not-underlying in the pool, [0...1e18]         prop.underlying : prop.not.underlying = 1e18 - PropNotUnderlying18 : propNotUnderlying18\"},\"needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage,ITetuConverter)\":{\"notice\":\"Determine if the strategy needs to be rebalanced.\"},\"rebalanceNoSwaps(IConverterStrategyBase.ConverterStrategyBaseState storage,PairBasedStrategyLogicLib.PairState storage,address[2],uint256,uint256,address,bool,mapping(address => uint256) storage)\":{\"notice\":\"Make rebalance without swaps (using borrowing only).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/algebra/AlgebraConverterStrategyLogicLib.sol\":\"AlgebraConverterStrategyLogicLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0xc2ef11f0141e7e1a5df255be2e1552044deed377349cb886908f3f10ded57fa8\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n\\n  // --- DEPENDENCY ADDRESSES\\n  function governance() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function liquidator() external view returns (address);\\n\\n  function forwarder() external view returns (address);\\n\\n  function investFund() external view returns (address);\\n\\n  function veDistributor() external view returns (address);\\n\\n  function platformVoter() external view returns (address);\\n\\n  // --- VAULTS\\n\\n  function vaults(uint id) external view returns (address);\\n\\n  function vaultsList() external view returns (address[] memory);\\n\\n  function vaultsListLength() external view returns (uint);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  // --- restrictions\\n\\n  function isOperator(address _adr) external view returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0x86716b8a4775605c31b8bb9f90f8f4a18b709ff4435182f3a148803368060a8c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IForwarder {\\n\\n  function tetu() external view returns (address);\\n  function tetuThreshold() external view returns (uint);\\n\\n  function tokenPerDestinationLength(address destination) external view returns (uint);\\n\\n  function tokenPerDestinationAt(address destination, uint i) external view returns (address);\\n\\n  function amountPerDestination(address token, address destination) external view returns (uint amount);\\n\\n  function registerIncome(\\n    address[] memory tokens,\\n    uint[] memory amounts,\\n    address vault,\\n    bool isDistribute\\n  ) external;\\n\\n  function distributeAll(address destination) external;\\n\\n  function distribute(address token) external;\\n\\n  function setInvestFundRatio(uint value) external;\\n\\n  function setGaugesRatio(uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x687c497fc034e8d64bca403bac1bf4cd7bd1f107df414c2657325c1b3ab92822\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISplitter {\\n\\n  function init(address controller_, address _asset, address _vault) external;\\n\\n  // *************** ACTIONS **************\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint256 amount) external;\\n\\n  function coverPossibleStrategyLoss(uint earned, uint lost) external;\\n\\n  function doHardWork() external;\\n\\n  function investAll() external;\\n\\n  // **************** VIEWS ***************\\n\\n  function asset() external view returns (address);\\n\\n  function vault() external view returns (address);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function isHardWorking() external view returns (bool);\\n\\n  function strategies(uint i) external view returns (address);\\n\\n  function strategiesLength() external view returns (uint);\\n\\n  function HARDWORK_DELAY() external view returns (uint);\\n\\n  function lastHardWorks(address strategy) external view returns (uint);\\n\\n  function pausedStrategies(address strategy) external view returns (bool);\\n\\n  function pauseInvesting(address strategy) external;\\n\\n  function continueInvesting(address strategy, uint apr) external;\\n\\n  function rebalance(uint percent, uint lossTolerance) external;\\n\\n  function getStrategyCapacity(address strategy) external view returns (uint capacity);\\n\\n}\\n\",\"keccak256\":\"0x266c43734e3da96d9e5dcdd0f19c6dbd58fdc377c9cd361cb12da3e309fbb4ec\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStrategyV2 {\\n\\n  function NAME() external view returns (string memory);\\n\\n  function strategySpecificName() external view returns (string memory);\\n\\n  function PLATFORM() external view returns (string memory);\\n\\n  function STRATEGY_VERSION() external view returns (string memory);\\n\\n  function asset() external view returns (address);\\n\\n  function splitter() external view returns (address);\\n\\n  function compoundRatio() external view returns (uint);\\n\\n  function totalAssets() external view returns (uint);\\n\\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\\n  function isReadyToHardWork() external view returns (bool);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawAllToSplitter() external returns (uint strategyLoss);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawToSplitter(uint amount) external returns (uint strategyLoss);\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// @param amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function investAll(\\n    uint amount_,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external returns (\\n    uint strategyLoss\\n  );\\n\\n  function doHardWork() external returns (uint earned, uint lost);\\n\\n  function setCompoundRatio(uint value) external;\\n\\n  /// @notice Max amount that can be deposited to the strategy (its internal capacity), see SCB-593.\\n  ///         0 means no deposit is allowed at this moment\\n  function capacity() external view returns (uint);\\n\\n  /// @notice {performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\\n  function performanceReceiver() external view returns (address);\\n\\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n  /// @dev use FEE_DENOMINATOR\\n  function performanceFee() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc7dac6097df7310b510f1027ef9c1bd3ccd6a202ca69582f68233ee798f7c312\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IStrategyV2.sol\\\";\\n\\ninterface IStrategyV3 is IStrategyV2 {\\n  struct BaseState {\\n    /// @dev Underlying asset\\n    address asset;\\n\\n    /// @dev Linked splitter\\n    address splitter;\\n\\n    /// @notice {performanceFee}% of total profit is sent to {performanceReceiver} before compounding\\n    /// @dev governance by default\\n    address performanceReceiver;\\n\\n    /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n    /// @dev {DEFAULT_PERFORMANCE_FEE} by default, FEE_DENOMINATOR is used\\n    uint performanceFee;\\n\\n    /// @notice Ratio to split performance fee on toPerf + toInsurance, [0..100_000]\\n    ///         100_000 - send full amount toPerf, 0 - send full amount toInsurance.\\n    uint performanceFeeRatio;\\n\\n    /// @dev Percent of profit for autocompound inside this strategy.\\n    uint compoundRatio;\\n\\n    /// @dev Represent specific name for this strategy. Should include short strategy name and used assets. Uniq across the vault.\\n    string strategySpecificName;\\n  }\\n}\\n\",\"keccak256\":\"0xe8a0179a82c40ba0c372486c5ebcc7df6431216c8c0d91cc408fb8f881e72f70\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0xd5fe6f3ab750cc2d23f573597db5607c701e74c39e13c20c07a921a26c6d5012\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVaultInsurance.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ISplitter.sol\\\";\\n\\ninterface ITetuVaultV2 {\\n\\n  function splitter() external view returns (ISplitter);\\n\\n  function insurance() external view returns (IVaultInsurance);\\n\\n  function depositFee() external view returns (uint);\\n\\n  function withdrawFee() external view returns (uint);\\n\\n  function init(\\n    address controller_,\\n    IERC20 _asset,\\n    string memory _name,\\n    string memory _symbol,\\n    address _gauge,\\n    uint _buffer\\n  ) external;\\n\\n  function setSplitter(address _splitter) external;\\n\\n  function coverLoss(uint amount) external;\\n\\n  function initInsurance(IVaultInsurance _insurance) external;\\n\\n}\\n\",\"keccak256\":\"0x9e77a10b32a52f826d28d17c420f776fd289e5e4f925ec87f7177a1ce224a412\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IVaultInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVaultInsurance {\\n\\n  function init(address _vault, address _asset) external;\\n\\n  function vault() external view returns (address);\\n\\n  function asset() external view returns (address);\\n\\n  function transferToVault(uint amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6461572763b1f6decec1dee9d2ffe8ca152369bdc68255ec083cb3da3ce507a1\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\n\\nlibrary StringLib {\\n\\n  /// @dev Inspired by OraclizeAPI's implementation - MIT license\\n  ///      https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n  function toString(uint value) external pure returns (string memory) {\\n    return _toString(value);\\n  }\\n\\n  function _toString(uint value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint temp = value;\\n    uint digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toAsciiString(address x) external pure returns (string memory) {\\n    return _toAsciiString(x);\\n  }\\n\\n  function _toAsciiString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = _char(hi);\\n      s[2 * i + 1] = _char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) external pure returns (bytes1 c) {\\n    return _char(b);\\n  }\\n\\n  function _char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xe7fef8dd3d994fd08ac32e3eff07f39546cc58dc0101f5fc7c0efebfb4f3f01a\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\",\"keccak256\":\"0x2c5be0f4a60126b08e20f40586958ec1b76a27b69406c4b0db19e9dc6f771cfc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\n\\nlibrary StrategyLib {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Denominator for fee calculation.\\n  uint internal constant FEE_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CompoundRatioChanged(uint oldValue, uint newValue);\\n  event StrategySpecificNameChanged(string name);\\n  event EmergencyExit(address sender, uint amount);\\n  event ManualClaim(address sender);\\n  event InvestAll(uint balance);\\n  event WithdrawAllToSplitter(uint amount);\\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant WRONG_VALUE = \\\"SB: Wrong value\\\";\\n  /// @dev Denominator for compound ratio\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        CHECKS AND EMITS\\n  // *************************************************************\\n\\n  function _checkCompoundRatioChanged(address controller, uint oldValue, uint newValue) external {\\n    onlyPlatformVoter(controller);\\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\\n    emit CompoundRatioChanged(oldValue, newValue);\\n  }\\n\\n  function _checkStrategySpecificNameChanged(address controller, string calldata newName) external {\\n    onlyOperators(controller);\\n    emit StrategySpecificNameChanged(newName);\\n  }\\n\\n  function _checkManualClaim(address controller) external {\\n    onlyOperators(controller);\\n    emit ManualClaim(msg.sender);\\n  }\\n\\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\\n    onlySplitter(splitter);\\n    assetBalance = IERC20(asset).balanceOf(address(this));\\n    emit InvestAll(assetBalance);\\n  }\\n\\n  // *************************************************************\\n  //                     RESTRICTIONS\\n  // *************************************************************\\n\\n  /// @dev Restrict access only for operators\\n  function onlyOperators(address controller) public view {\\n    require(IController(controller).isOperator(msg.sender), DENIED);\\n  }\\n\\n  /// @dev Restrict access only for governance\\n  function onlyGovernance(address controller) public view {\\n    require(IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for platform voter\\n  function onlyPlatformVoter(address controller) public view {\\n    require(IController(controller).platformVoter() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for splitter\\n  function onlySplitter(address splitter) public view {\\n    require(splitter == msg.sender, DENIED);\\n  }\\n\\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_) external view {\\n    onlyGovernance(controller);\\n    require(fee_ <= 100_000, TOO_HIGH);\\n    require(receiver_ != address(0), WRONG_VALUE);\\n  }\\n\\n  // *************************************************************\\n  //                       HELPERS\\n  // *************************************************************\\n\\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\\n  ///         Revert if the amount is different from expected too much (high price impact)\\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\\n  /// @param assetPrice Price of the asset, decimals 18\\n  /// @return balance Current asset balance of the strategy\\n  function checkWithdrawImpact(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) public view returns (uint balance) {\\n    balance = IERC20(_asset).balanceOf(address(this));\\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\\n\\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\\n    }\\n  }\\n\\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\\n    onlyOperators(controller);\\n\\n    uint balance = IERC20(asset).balanceOf(address(this));\\n    IERC20(asset).safeTransfer(splitter, balance);\\n    emit EmergencyExit(msg.sender, balance);\\n  }\\n\\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\\n    onlySplitter(splitter);\\n    return IERC20(asset).balanceOf(address(this));\\n  }\\n\\n  function _withdrawAllToSplitterPostActions(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) external {\\n    uint balance = checkWithdrawImpact(\\n      _asset,\\n      balanceBefore,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n\\n    if (balance != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, balance);\\n    }\\n    emit WithdrawAllToSplitter(balance);\\n  }\\n\\n  function _withdrawToSplitterPostActions(\\n    uint amount,\\n    uint balance,\\n    address _asset,\\n    address _splitter\\n  ) external {\\n    uint amountAdjusted = Math.min(amount, balance);\\n    if (amountAdjusted != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\\n    }\\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\\n  }\\n}\\n\",\"keccak256\":\"0xa89e85b9acaeb5238c11c864167c152d0c33cf800fa3bb447e0629ed6fbff67c\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\nimport \\\"../interfaces/IStrategyV3.sol\\\";\\n\\nlibrary StrategyLib2 {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Denominator for fee calculation.\\n  uint internal constant FEE_DENOMINATOR = 100_000;\\n  /// @notice 10% of total profit is sent to {performanceReceiver} before compounding\\n  uint internal constant DEFAULT_PERFORMANCE_FEE = 10_000;\\n  address internal constant DEFAULT_PERF_FEE_RECEIVER = 0x9Cc199D4353b5FB3e6C8EEBC99f5139e0d8eA06b;\\n  /// @dev Denominator for compound ratio\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant WRONG_VALUE = \\\"SB: Wrong value\\\";\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CompoundRatioChanged(uint oldValue, uint newValue);\\n  event StrategySpecificNameChanged(string name);\\n  event EmergencyExit(address sender, uint amount);\\n  event ManualClaim(address sender);\\n  event InvestAll(uint balance);\\n  event WithdrawAllToSplitter(uint amount);\\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\\n  event PerformanceFeeChanged(uint fee, address receiver, uint ratio);\\n\\n  // *************************************************************\\n  //                        CHECKS AND EMITS\\n  // *************************************************************\\n\\n  function _checkManualClaim(address controller) external {\\n    onlyOperators(controller);\\n    emit ManualClaim(msg.sender);\\n  }\\n\\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\\n    onlySplitter(splitter);\\n    assetBalance = IERC20(asset).balanceOf(address(this));\\n    emit InvestAll(assetBalance);\\n  }\\n\\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_, uint ratio_) internal {\\n    onlyGovernance(controller);\\n    require(fee_ <= FEE_DENOMINATOR, TOO_HIGH);\\n    require(receiver_ != address(0), WRONG_VALUE);\\n    require(ratio_ <= FEE_DENOMINATOR, TOO_HIGH);\\n    emit PerformanceFeeChanged(fee_, receiver_, ratio_);\\n  }\\n\\n  // *************************************************************\\n  //                        SETTERS\\n  // *************************************************************\\n\\n  function _changeCompoundRatio(IStrategyV3.BaseState storage baseState, address controller, uint newValue) external {\\n    onlyPlatformVoter(controller);\\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\\n\\n    uint oldValue = baseState.compoundRatio;\\n    baseState.compoundRatio = newValue;\\n\\n    emit CompoundRatioChanged(oldValue, newValue);\\n  }\\n\\n  function _changeStrategySpecificName(IStrategyV3.BaseState storage baseState, string calldata newName) external {\\n    baseState.strategySpecificName = newName;\\n    emit StrategySpecificNameChanged(newName);\\n  }\\n\\n  // *************************************************************\\n  //                     RESTRICTIONS\\n  // *************************************************************\\n\\n  /// @dev Restrict access only for operators\\n  function onlyOperators(address controller) public view {\\n    require(IController(controller).isOperator(msg.sender), DENIED);\\n  }\\n\\n  /// @dev Restrict access only for governance\\n  function onlyGovernance(address controller) public view {\\n    require(IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for platform voter\\n  function onlyPlatformVoter(address controller) public view {\\n    require(IController(controller).platformVoter() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for splitter\\n  function onlySplitter(address splitter) public view {\\n    require(splitter == msg.sender, DENIED);\\n  }\\n\\n  // *************************************************************\\n  //                       HELPERS\\n  // *************************************************************\\n\\n  function init(\\n    IStrategyV3.BaseState storage baseState,\\n    address controller_,\\n    address splitter_\\n  ) external {\\n    baseState.asset = ISplitter(splitter_).asset();\\n    baseState.splitter = splitter_;\\n    baseState.performanceReceiver = DEFAULT_PERF_FEE_RECEIVER;\\n    baseState.performanceFee = DEFAULT_PERFORMANCE_FEE;\\n\\n    require(IControllable(splitter_).isController(controller_), WRONG_VALUE);\\n  }\\n\\n  function setupPerformanceFee(IStrategyV3.BaseState storage baseState, uint fee_, address receiver_, uint ratio_, address controller_) external {\\n    _checkSetupPerformanceFee(controller_, fee_, receiver_, ratio_);\\n    baseState.performanceFee = fee_;\\n    baseState.performanceReceiver = receiver_;\\n    baseState.performanceFeeRatio = ratio_;\\n  }\\n\\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\\n  ///         Revert if the amount is different from expected too much (high price impact)\\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\\n  /// @param assetPrice Price of the asset, decimals 18\\n  /// @return balance Current asset balance of the strategy\\n  function checkWithdrawImpact(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) public view returns (uint balance) {\\n    balance = IERC20(_asset).balanceOf(address(this));\\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\\n\\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\\n    }\\n  }\\n\\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\\n    onlyOperators(controller);\\n\\n    uint balance = IERC20(asset).balanceOf(address(this));\\n    IERC20(asset).safeTransfer(splitter, balance);\\n    emit EmergencyExit(msg.sender, balance);\\n  }\\n\\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\\n    onlySplitter(splitter);\\n    return IERC20(asset).balanceOf(address(this));\\n  }\\n\\n  function _withdrawAllToSplitterPostActions(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) external {\\n    uint balance = checkWithdrawImpact(\\n      _asset,\\n      balanceBefore,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n\\n    if (balance != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, balance);\\n    }\\n    emit WithdrawAllToSplitter(balance);\\n  }\\n\\n  function _withdrawToSplitterPostActions(\\n    uint amount,\\n    uint balance,\\n    address _asset,\\n    address _splitter\\n  ) external {\\n    uint amountAdjusted = Math.min(amount, balance);\\n    if (amountAdjusted != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\\n    }\\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\\n  }\\n}\\n\",\"keccak256\":\"0x02ca53b015408479ff049ce8a321a85f238e6b0a2d57f899f21dc9d879fb05cf\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-converter/contracts/interfaces/IBookkeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBookkeeper {\\n  /// @notice Register a new loan\\n  /// @dev This function can be called by a pool adapter only\\n  /// @param collateralAmount Amount of supplied collateral for the new loan\\n  /// @param borrowedAmount Borrowed amount provided for the given {collateralAmount}\\n  function onBorrow(uint collateralAmount, uint borrowedAmount) external;\\n\\n  /// @notice Register loan payment\\n  /// @dev This function can be called by a pool adapter only\\n  /// @param withdrawnCollateral Amount of collateral received by the user during the repaying.\\n  /// @param paidAmount Amount paid by the user during the repaying.\\n  function onRepay(uint withdrawnCollateral, uint paidAmount) external;\\n\\n\\n  /// @notice Save checkpoint for all pool adapters of the given {user_}\\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\\n  function checkpoint(address[] memory tokens_) external returns (\\n    uint[] memory deltaGains,\\n    uint[] memory deltaLosses\\n  );\\n\\n  /// @notice Calculate deltas that user would receive if he creates a checkpoint at the moment\\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\\n  function previewCheckpoint(address user, address[] memory tokens_) external view returns (\\n    uint[] memory deltaGains,\\n    uint[] memory deltaLosses\\n  );\\n\\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the signer\\n  ///         for the current period, start new period.\\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\\n  function startPeriod(address underlying_) external returns (\\n    uint gains,\\n    uint losses\\n  );\\n\\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the {user_}\\n  ///         for the current period, DON'T start new period.\\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\\n  function previewPeriod(address underlying_, address user_) external view returns (uint gains, uint losses);\\n}\",\"keccak256\":\"0x98b7887d604ebcfaf28038c456c6c6893ce10f55b821f4c7c002dbc8055ea388\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Keep and provide addresses of all application contracts\\ninterface IConverterController {\\n  function governance() external view returns (address);\\n\\n  // ********************* Health factor explanation  ****************\\n  // For example, a landing platform has: liquidity threshold = 0.85, LTV=0.8, LTV / LT = 1.0625\\n  // For collateral $100 we can borrow $80. A liquidation happens if the cost of collateral will reduce below $85.\\n  // We set min-health-factor = 1.1, target-health-factor = 1.3\\n  // For collateral 100 we will borrow 100/1.3 = 76.92\\n  //\\n  // Collateral value   100        77            assume that collateral value is decreased at 100/77=1.3 times\\n  // Collateral * LT    85         65.45\\n  // Borrow value       65.38      65.38         but borrow value is the same as before\\n  // Health factor      1.3        1.001         liquidation almost happens here (!)\\n  //\\n  /// So, if we have target factor 1.3, it means, that if collateral amount will decreases at 1.3 times\\n  // and the borrow value won't change at the same time, the liquidation happens at that point.\\n  // Min health factor marks the point at which a rebalancing must be made asap.\\n  // *****************************************************************\\n\\n  //#region ----------------------------------------------------- Configuration\\n\\n  /// @notice min allowed health factor with decimals 2, must be >= 1e2\\n  function minHealthFactor2() external view returns (uint16);\\n  function setMinHealthFactor2(uint16 value_) external;\\n\\n  /// @notice target health factor with decimals 2\\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\\n  ///      or additional borrow and restore the health factor to the given target value\\n  function targetHealthFactor2() external view returns (uint16);\\n  function setTargetHealthFactor2(uint16 value_) external;\\n\\n  /// @notice max allowed health factor with decimals 2\\n  /// @dev For future versions, currently max health factor is not used\\n  function maxHealthFactor2() external view returns (uint16);\\n  /// @dev For future versions, currently max health factor is not used\\n  function setMaxHealthFactor2(uint16 value_) external;\\n\\n  /// @notice get current value of blocks per day. The value is set manually at first and can be auto-updated later\\n  function blocksPerDay() external view returns (uint);\\n  /// @notice set value of blocks per day manually and enable/disable auto update of this value\\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external;\\n  /// @notice Check if it's time to call updateBlocksPerDay()\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view returns (bool);\\n  /// @notice Recalculate blocksPerDay value\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function updateBlocksPerDay(uint periodInSeconds_) external;\\n\\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\\n  function paused() external view returns (bool);\\n\\n  /// @notice the given user is whitelisted and is allowed to make borrow/swap using TetuConverter\\n  function isWhitelisted(address user_) external view returns (bool);\\n\\n  /// @notice The size of the gap by which the debt should be increased upon repayment\\n  ///         Such gaps are required by AAVE pool adapters to workaround dust tokens problem\\n  ///         and be able to make full repayment.\\n  /// @dev Debt gap is applied as following: toPay = debt * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR\\n  function debtGap() external view returns (uint);\\n\\n  /// @notice Allow to rebalance exist debts during burrow, see SCB-708\\n  ///         If the user already has a debt(s) for the given pair of collateral-borrow assets,\\n  ///         new borrow is made using exist pool adapter(s). Exist debt is rebalanced during the borrowing\\n  ///         in both directions, but the rebalancing is asymmetrically limited by thresholds\\n  ///         THRESHOLD_REBALANCE_XXX, see BorrowManager.\\n  function rebalanceOnBorrowEnabled() external view returns (bool);\\n\\n  //#endregion ----------------------------------------------------- Configuration\\n  //#region ----------------------------------------------------- Core application contracts\\n\\n  function tetuConverter() external view returns (address);\\n  function borrowManager() external view returns (address);\\n  function debtMonitor() external view returns (address);\\n  function tetuLiquidator() external view returns (address);\\n  function swapManager() external view returns (address);\\n  function priceOracle() external view returns (address);\\n  function bookkeeper() external view returns (address);\\n  //#endregion ----------------------------------------------------- Core application contracts\\n\\n  //#region ----------------------------------------------------- External contracts\\n  /// @notice A keeper to control health and efficiency of the borrows\\n  function keeper() external view returns (address);\\n  /// @notice Controller of tetu-contracts-v2, that is allowed to update proxy contracts\\n  function proxyUpdater() external view returns (address);\\n  //#endregion ----------------------------------------------------- External contracts\\n}\\n\",\"keccak256\":\"0xff68dab4badf9543c9a0ae5a1314106f0a5b804e8b6669fbea6e2655eb3c741f\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IConverterControllerProvider {\\n  function controller() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71dce61809acb75f9078290e90033ffe816a51f18b7cb296d161e278c36eec86\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPriceOracle {\\n  /// @notice Return asset price in USD, decimals 18\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb11e653eb4d6d7c41f29ee1e3e498253cfa8df1aec3ff31ab527009b79bdb705\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IConverterControllerProvider.sol\\\";\\n\\n/// @notice Main contract of the TetuConverter application\\n/// @dev Borrower (strategy) makes all operations via this contract only.\\ninterface ITetuConverter is IConverterControllerProvider {\\n\\n  /// @notice Find possible borrow strategies and provide \\\"cost of money\\\" as interest for the period for each strategy\\n  ///         Result arrays of the strategy are ordered in ascending order of APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converters Array of available converters ordered in ascending order of APR.\\n  ///                    Each item contains a result contract that should be used for conversion; it supports IConverter\\n  ///                    This address should be passed to borrow-function during conversion.\\n  ///                    The length of array is always equal to the count of available lending platforms.\\n  ///                    Last items in array can contain zero addresses (it means they are not used)\\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\\n  /// @return amountToBorrowsOut Amounts that should be borrowed\\n  ///                            This amount is not zero if corresponded converter is not zero.\\n  /// @return aprs18 Interests on the use of {amountIn_} during the given period, decimals 18\\n  function findBorrowStrategies(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external view returns (\\n    address[] memory converters,\\n    uint[] memory collateralAmountsOut,\\n    uint[] memory amountToBorrowsOut,\\n    int[] memory aprs18\\n  );\\n\\n  /// @notice Find best swap strategy and provide \\\"cost of money\\\" as interest for the period\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow()\\n  /// @return sourceAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                         It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return targetAmountOut Result amount of {targetToken_} after swap\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findSwapStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_\\n  ) external returns (\\n    address converter,\\n    uint sourceAmountOut,\\n    uint targetAmountOut,\\n    int apr18\\n  );\\n\\n  /// @notice Find best conversion strategy (swap or borrow) and provide \\\"cost of money\\\" as interest for the period.\\n  ///         It calls both findBorrowStrategy and findSwapStrategy and selects a best strategy.\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR for swapping.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow().\\n  /// @return collateralAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                             It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return amountToBorrowOut Result amount of {targetToken_} after conversion\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findConversionStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external returns (\\n    address converter,\\n    uint collateralAmountOut,\\n    uint amountToBorrowOut,\\n    int apr18\\n  );\\n\\n  /// @notice Convert {collateralAmount_} to {amountToBorrow_} using {converter_}\\n  ///         Target amount will be transferred to {receiver_}.\\n  ///         Exist debts can be rebalanced fully or partially if {rebalanceOnBorrowEnabled} is ON\\n  /// @dev Transferring of {collateralAmount_} by TetuConverter-contract must be approved by the caller before the call\\n  ///      Only whitelisted users are allowed to make borrows\\n  /// @param converter_ A converter received from findBestConversionStrategy.\\n  /// @param collateralAmount_ Amount of {collateralAsset_} to be converted.\\n  ///                          This amount must be approved to TetuConverter before the call.\\n  /// @param amountToBorrow_ Amount of {borrowAsset_} to be borrowed and sent to {receiver_}\\n  /// @param receiver_ A receiver of borrowed amount\\n  /// @return borrowedAmountOut Exact borrowed amount transferred to {receiver_}\\n  function borrow(\\n    address converter_,\\n    address collateralAsset_,\\n    uint collateralAmount_,\\n    address borrowAsset_,\\n    uint amountToBorrow_,\\n    address receiver_\\n  ) external returns (\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Full or partial repay of the borrow\\n  /// @dev A user should transfer {amountToRepay_} to TetuConverter before calling repay()\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        A user should transfer {amountToRepay_} to TetuConverter before calling repay().\\n  ///        You can know exact total amount of debt using {getStatusCurrent}.\\n  ///        if the amount exceed total amount of the debt:\\n  ///           - the debt will be fully repaid\\n  ///           - remain amount will be swapped from {borrowAsset_} to {collateralAsset_}\\n  ///        This amount should be calculated with taking into account possible debt gap,\\n  ///        You should call getDebtAmountCurrent(debtGap = true) to get this amount.\\n  /// @param receiver_ A receiver of the collateral that will be withdrawn after the repay\\n  ///                  The remained amount of borrow asset will be returned to the {receiver_} too\\n  /// @return collateralAmountOut Exact collateral amount transferred to {collateralReceiver_}\\n  ///         If TetuConverter is not able to make the swap, it reverts\\n  /// @return returnedBorrowAmountOut A part of amount-to-repay that wasn't converted to collateral asset\\n  ///                                 because of any reasons (i.e. there is no available conversion strategy)\\n  ///                                 This amount is returned back to the collateralReceiver_\\n  /// @return swappedLeftoverCollateralOut A part of collateral received through the swapping\\n  /// @return swappedLeftoverBorrowOut A part of amountToRepay_ that was swapped\\n  function repay(\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_,\\n    address receiver_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint returnedBorrowAmountOut,\\n    uint swappedLeftoverCollateralOut,\\n    uint swappedLeftoverBorrowOut\\n  );\\n\\n  /// @notice Estimate result amount after making full or partial repay\\n  /// @dev It works in exactly same way as repay() but don't make actual repay\\n  ///      Anyway, the function is write, not read-only, because it makes updateStatus()\\n  /// @param user_ user whose amount-to-repay will be calculated\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        This amount should be calculated without possible debt gap.\\n  ///        In this way it's differ from {repay}\\n  /// @return collateralAmountOut Total collateral amount to be returned after repay in exchange of {amountToRepay_}\\n  /// @return swappedAmountOut A part of {collateralAmountOut} that were received by direct swap\\n  function quoteRepay(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint swappedAmountOut\\n  );\\n\\n  /// @notice Update status in all opened positions\\n  ///         After this call getDebtAmount will be able to return exact amount to repay\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountCurrent(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice Total amount of borrow tokens that should be repaid to close the borrow completely.\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountStored(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external view returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice User needs to redeem some collateral amount. Calculate an amount of borrow token that should be repaid\\n  /// @param user_ user whose debts will be returned\\n  /// @param collateralAmountRequired_ Amount of collateral required by the user\\n  /// @return borrowAssetAmount Borrowed amount that should be repaid to receive back following amount of collateral:\\n  ///                           amountToReceive = collateralAmountRequired_ - unobtainableCollateralAssetAmount\\n  /// @return unobtainableCollateralAssetAmount A part of collateral that cannot be obtained in any case\\n  ///                                           even if all borrowed amount will be returned.\\n  ///                                           If this amount is not 0, you ask to get too much collateral.\\n  function estimateRepay(\\n    address user_,\\n    address collateralAsset_,\\n    uint collateralAmountRequired_,\\n    address borrowAsset_\\n  ) external view returns (\\n    uint borrowAssetAmount,\\n    uint unobtainableCollateralAssetAmount\\n  );\\n\\n  /// @notice Transfer all reward tokens to {receiver_}\\n  /// @return rewardTokensOut What tokens were transferred. Same reward token can appear in the array several times\\n  /// @return amountsOut Amounts of transferred rewards, the array is synced with {rewardTokens}\\n  function claimRewards(address receiver_) external returns (\\n    address[] memory rewardTokensOut,\\n    uint[] memory amountsOut\\n  );\\n\\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\\n  ///                      It should be transferred on balance of the TetuConverter before the function call\\n  /// @param receiver_ Result amount will be sent to this address\\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\\n  function safeLiquidate(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    address receiver_,\\n    uint priceImpactToleranceSource_,\\n    uint priceImpactToleranceTarget_\\n  ) external returns (\\n    uint amountOut\\n  );\\n\\n  /// @notice Check if {amountOut_} is too different from the value calculated directly using price oracle prices\\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\\n  function isConversionValid(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    uint amountOut_,\\n    uint priceImpactTolerance_\\n  ) external view returns (bool);\\n\\n  /// @notice Close given borrow and return collateral back to the user, governance only\\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\\n  /// @param poolAdapter_ The pool adapter that represents the borrow\\n  /// @param closePosition Close position after repay\\n  ///        Usually it should be true, because the function always tries to repay all debt\\n  ///        false can be used if user doesn't have enough amount to pay full debt\\n  ///              and we are trying to pay \\\"as much as possible\\\"\\n  /// @return collateralAmountOut Amount of collateral returned to the user\\n  /// @return repaidAmountOut Amount of borrow asset paid to the lending platform\\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external returns (\\n    uint collateralAmountOut,\\n    uint repaidAmountOut\\n  );\\n\\n  /// @notice Get active borrows of the user with given collateral/borrowToken\\n  /// @dev Simple access to IDebtMonitor.getPositions\\n  /// @return poolAdaptersOut The instances of IPoolAdapter\\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\\n    address[] memory poolAdaptersOut\\n  );\\n\\n  /// @notice Save token from TC-balance to {receiver}\\n  /// @dev Normally TetuConverter doesn't have any tokens on balance, they can appear there accidentally only\\n  function salvage(address receiver, address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0x87ac3099e1254509929511509c207ecee9a665a3b43d7ee5b98e2ab0d639416d\",\"license\":\"MIT\"},\"contracts/integrations/algebra/AlgebraFeeConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n// coefficients for sigmoids: \\u03b1 / (1 + e^( (\\u03b2-x) / \\u03b3))\\r\\n// alpha1 + alpha2 + baseFee must be <= type(uint16).max\\r\\nstruct AlgebraFeeConfiguration {\\r\\n  uint16 alpha1; // max value of the first sigmoid\\r\\n  uint16 alpha2; // max value of the second sigmoid\\r\\n  uint32 beta1; // shift along the x-axis for the first sigmoid\\r\\n  uint32 beta2; // shift along the x-axis for the second sigmoid\\r\\n  uint16 gamma1; // horizontal stretch factor for the first sigmoid\\r\\n  uint16 gamma2; // horizontal stretch factor for the second sigmoid\\r\\n  uint16 baseFee; // minimum possible fee\\r\\n}\\r\\n\",\"keccak256\":\"0x49cf3f76051c467d50c8640e4be6bf4491469149714d8ab3fda54c7b3dd10c59\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/algebra/IAlgebraEternalFarming.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IncentiveKey.sol\\\";\\r\\n\\r\\ninterface IAlgebraEternalFarming {\\r\\n    /// @notice reward amounts can be outdated, actual amounts could be obtained via static call of `collectRewards` in FarmingCenter\\r\\n    function getRewardInfo(\\r\\n        IncentiveKey memory key,\\r\\n        uint256 tokenId\\r\\n    ) external view returns (uint256 reward, uint256 bonusReward);\\r\\n}\",\"keccak256\":\"0x48f100e8fed01242ec72231b385b82fd1146929630dc73532b21a5a46f841ada\",\"license\":\"MIT\"},\"contracts/integrations/algebra/IAlgebraPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport './pool/IAlgebraPoolImmutables.sol';\\r\\nimport './pool/IAlgebraPoolState.sol';\\r\\nimport './pool/IAlgebraPoolDerivedState.sol';\\r\\nimport './pool/IAlgebraPoolActions.sol';\\r\\nimport './pool/IAlgebraPoolPermissionedActions.sol';\\r\\nimport './pool/IAlgebraPoolEvents.sol';\\r\\n\\r\\n/**\\r\\n * @title The interface for a Algebra Pool\\r\\n * @dev The pool interface is broken up into many smaller pieces.\\r\\n * Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPool is\\r\\nIAlgebraPoolImmutables,\\r\\nIAlgebraPoolState,\\r\\nIAlgebraPoolDerivedState,\\r\\nIAlgebraPoolActions,\\r\\nIAlgebraPoolPermissionedActions,\\r\\nIAlgebraPoolEvents\\r\\n{\\r\\n  // used only for combining interfaces\\r\\n}\\r\\n\",\"keccak256\":\"0xf55d012b8f05dacd31f6a275e5cdb57c231e4ea79dac4010a0a81d38942d04f3\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/algebra/IDataStorageOperator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport './AlgebraFeeConfiguration.sol';\\r\\n\\r\\n/// @title The interface for the DataStorageOperator\\r\\n/// @dev This contract stores timepoints and calculates adaptive fee and statistical averages\\r\\ninterface IDataStorageOperator {\\r\\n  /// @notice Emitted when the fee configuration is changed\\r\\n  /// @param feeConfig The structure with dynamic fee parameters\\r\\n  /// @dev See the AdaptiveFee library for more details\\r\\n  event FeeConfiguration(AlgebraFeeConfiguration feeConfig);\\r\\n\\r\\n  /// @notice Returns data belonging to a certain timepoint\\r\\n  /// @param index The index of timepoint in the array\\r\\n  /// @dev There is more convenient function to fetch a timepoint: getTimepoints(). Which requires not an index but seconds\\r\\n  /// @return initialized Whether the timepoint has been initialized and the values are safe to use\\r\\n  /// @return blockTimestamp The timestamp of the timepoint\\r\\n  /// @return tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp\\r\\n  /// @return volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp\\r\\n  /// @return tick The tick at blockTimestamp\\r\\n  /// @return averageTick Time-weighted average tick\\r\\n  /// @return windowStartIndex Index of closest timepoint >= WINDOW seconds ago\\r\\n  function timepoints(\\r\\n    uint256 index\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      bool initialized,\\r\\n      uint32 blockTimestamp,\\r\\n      int56 tickCumulative,\\r\\n      uint88 volatilityCumulative,\\r\\n      int24 tick,\\r\\n      int24 averageTick,\\r\\n      uint16 windowStartIndex\\r\\n    );\\r\\n\\r\\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\\r\\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\\r\\n  /// @param tick Initial tick\\r\\n  function initialize(uint32 time, int24 tick) external;\\r\\n\\r\\n  /// @dev Reverts if a timepoint at or before the desired timepoint timestamp does not exist.\\r\\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\r\\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\\r\\n  /// at exactly the timestamp between the two timepoints.\\r\\n  /// @param time The current block timestamp\\r\\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return a timepoint\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\\r\\n  function getSingleTimepoint(\\r\\n    uint32 time,\\r\\n    uint32 secondsAgo,\\r\\n    int24 tick,\\r\\n    uint16 index\\r\\n  ) external view returns (int56 tickCumulative, uint112 volatilityCumulative);\\r\\n\\r\\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\r\\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\\r\\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return a timepoint\\r\\n  /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\\r\\n  function getTimepoints(uint32[] memory secondsAgos) external view returns (int56[] memory tickCumulatives, uint112[] memory volatilityCumulatives);\\r\\n\\r\\n  /// @notice Writes a dataStorage timepoint to the array\\r\\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param blockTimestamp The timestamp of the new timepoint\\r\\n  /// @param tick The active tick at the time of the new timepoint\\r\\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\\r\\n  /// @return newFee The fee in hundredths of a bip, i.e. 1e-6\\r\\n  function write(uint16 index, uint32 blockTimestamp, int24 tick) external returns (uint16 indexUpdated, uint16 newFee);\\r\\n\\r\\n  /// @notice Changes fee configuration for the pool\\r\\n  function changeFeeConfiguration(AlgebraFeeConfiguration calldata feeConfig) external;\\r\\n\\r\\n  /// @notice Fills uninitialized timepoints with nonzero value\\r\\n  /// @dev Can be used to reduce the gas cost of future swaps\\r\\n  /// @param startIndex The start index, must be not initialized\\r\\n  /// @param amount of slots to fill, startIndex + amount must be <= type(uint16).max\\r\\n  function prepayTimepointsStorageSlots(uint16 startIndex, uint16 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x758fd0079dd315ce0c5ac9ee1b6bee96ea377b471a22367f6bae10c2b0011713\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/algebra/IFarmingCenter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IAlgebraEternalFarming.sol\\\";\\r\\nimport \\\"./IncentiveKey.sol\\\";\\r\\nimport \\\"./INonfungiblePositionManager.sol\\\";\\r\\n\\r\\ninterface IFarmingCenter {\\r\\n    /// @notice Returns information about a deposited NFT\\r\\n    /// @param tokenId The ID of the deposit (and token) that is being transferred\\r\\n    /// @return L2TokenId The nft layer2 id,\\r\\n    /// numberOfFarms The number of farms,\\r\\n    /// inLimitFarming The parameter showing if the token is in the limit farm,\\r\\n    /// owner The owner of deposit\\r\\n    function deposits(uint256 tokenId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 L2TokenId,\\r\\n        uint32 numberOfFarms,\\r\\n        bool inLimitFarming,\\r\\n        address owner\\r\\n    );\\r\\n\\r\\n    /// @notice Enters in incentive (time-limited or eternal farming) with NFT-position token\\r\\n    /// @dev token must be deposited in FarmingCenter\\r\\n    /// @param key The incentive event key\\r\\n    /// @param tokenId The id of position NFT\\r\\n    /// @param tokensLocked Amount of tokens to lock for liquidity multiplier (if tiers are used)\\r\\n    /// @param isLimit Is incentive time-limited or eternal\\r\\n    function enterFarming(\\r\\n        IncentiveKey memory key,\\r\\n        uint256 tokenId,\\r\\n        uint256 tokensLocked,\\r\\n        bool isLimit\\r\\n    ) external;\\r\\n\\r\\n    function eternalFarming() external view returns (IAlgebraEternalFarming);\\r\\n\\r\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\r\\n    /// @dev \\\"proxies\\\" to NonfungiblePositionManager\\r\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\r\\n    /// recipient The account that should receive the tokens,\\r\\n    /// amount0Max The maximum amount of token0 to collect,\\r\\n    /// amount1Max The maximum amount of token1 to collect\\r\\n    /// @return amount0 The amount of fees collected in token0\\r\\n    /// @return amount1 The amount of fees collected in token1\\r\\n    function collect(INonfungiblePositionManager.CollectParams calldata params)\\r\\n    external\\r\\n    returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /// @notice Used to collect reward from eternal farming. Then reward can be claimed.\\r\\n    /// @param key The incentive event key\\r\\n    /// @param tokenId The id of position NFT\\r\\n    /// @return reward The amount of collected reward\\r\\n    /// @return bonusReward The amount of collected  bonus reward\\r\\n    function collectRewards(IncentiveKey memory key, uint256 tokenId)\\r\\n    external\\r\\n    returns (uint256 reward, uint256 bonusReward);\\r\\n\\r\\n    /// @notice Used to claim and send rewards from farming(s)\\r\\n    /// @dev can be used via static call to get current rewards for user\\r\\n    /// @param rewardToken The token that is a reward\\r\\n    /// @param to The address to be rewarded\\r\\n    /// @param amountRequestedIncentive Amount to claim in incentive (limit) farming\\r\\n    /// @param amountRequestedEternal Amount to claim in eternal farming\\r\\n    /// @return reward The summary amount of claimed rewards\\r\\n    function claimReward(\\r\\n        address rewardToken,\\r\\n        address to,\\r\\n        uint256 amountRequestedIncentive,\\r\\n        uint256 amountRequestedEternal\\r\\n    ) external returns (uint256 reward);\\r\\n\\r\\n    /// @notice Exits from incentive (time-limited or eternal farming) with NFT-position token\\r\\n    /// @param key The incentive event key\\r\\n    /// @param tokenId The id of position NFT\\r\\n    /// @param isLimit Is incentive time-limited or eternal\\r\\n    function exitFarming(\\r\\n        IncentiveKey memory key,\\r\\n        uint256 tokenId,\\r\\n        bool isLimit\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Withdraw Algebra NFT-position token\\r\\n    /// @dev can be used via static call to get current rewards for user\\r\\n    /// @param tokenId The id of position NFT\\r\\n    /// @param to New owner of position NFT\\r\\n    /// @param data The additional data for NonfungiblePositionManager\\r\\n    function withdrawToken(\\r\\n        uint256 tokenId,\\r\\n        address to,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x63723e96d5493b985517506518f62d55619e05a86ce1c03bf2d5e8d4811337ba\",\"license\":\"MIT\"},\"contracts/integrations/algebra/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface INonfungiblePositionManager {\\r\\n    struct MintParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint amount0Desired;\\r\\n        uint amount1Desired;\\r\\n        uint amount0Min;\\r\\n        uint amount1Min;\\r\\n        address recipient;\\r\\n        uint deadline;\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        MintParams calldata params\\r\\n    ) external payable returns (uint tokenId, uint128 liquidity, uint amount0, uint amount1);\\r\\n\\r\\n    struct IncreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    );\\r\\n\\r\\n    struct DecreaseLiquidityParams {\\r\\n        uint tokenId;\\r\\n        uint128 liquidity;\\r\\n        uint amount0Min;\\r\\n        uint amount1Min;\\r\\n        uint deadline;\\r\\n    }\\r\\n\\r\\n    function decreaseLiquidity(\\r\\n        DecreaseLiquidityParams calldata params\\r\\n    ) external payable returns (uint amount0, uint amount1);\\r\\n\\r\\n    struct CollectParams {\\r\\n        uint tokenId;\\r\\n        address recipient;\\r\\n        uint128 amount0Max;\\r\\n        uint128 amount1Max;\\r\\n    }\\r\\n\\r\\n    function collect(CollectParams calldata params) external payable returns (uint amount0, uint amount1);\\r\\n\\r\\n    function burn(uint tokenId) external payable;\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function positions(uint256 tokenId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint96 nonce,\\r\\n        address operator,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 feeGrowthInside0LastX128,\\r\\n        uint256 feeGrowthInside1LastX128,\\r\\n        uint128 tokensOwed0,\\r\\n        uint128 tokensOwed1\\r\\n    );\\r\\n}\",\"keccak256\":\"0x605540fd12c6e7645d7015b0f3303a375a848d028f28ab911d74de6c006e9140\",\"license\":\"MIT\"},\"contracts/integrations/algebra/IncentiveKey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nstruct IncentiveKey {\\r\\n    address rewardToken;\\r\\n    address bonusRewardToken;\\r\\n    address pool;\\r\\n    uint256 startTime;\\r\\n    uint256 endTime;\\r\\n}\",\"keccak256\":\"0x6aa9017a64134f0ffe6b17049b8811c768641c9daf122ded2ecfcf338d13d7d7\",\"license\":\"MIT\"},\"contracts/integrations/algebra/pool/IAlgebraPoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissionless pool actions\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolActions {\\r\\n  /**\\r\\n   * @notice Sets the initial price for the pool\\r\\n   * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\r\\n   * @param price the initial sqrt price of the pool as a Q64.96\\r\\n   */\\r\\n  function initialize(uint160 price) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Adds liquidity for the given recipient/bottomTick/topTick position\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\\r\\n   * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\r\\n   * on bottomTick, topTick, the amount of liquidity, and the current price.\\r\\n   * @param sender The address which will receive potential surplus of paid tokens\\r\\n   * @param recipient The address for which the liquidity will be created\\r\\n   * @param bottomTick The lower tick of the position in which to add liquidity\\r\\n   * @param topTick The upper tick of the position in which to add liquidity\\r\\n   * @param amount The desired amount of liquidity to mint\\r\\n   * @param data Any data that should be passed through to the callback\\r\\n   * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return liquidityActual The actual minted amount of liquidity\\r\\n   */\\r\\n  function mint(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount,\\r\\n    bytes calldata data\\r\\n  )\\r\\n  external\\r\\n  returns (\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    uint128 liquidityActual\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Collects tokens owed to a position\\r\\n   * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\r\\n   * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\r\\n   * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\r\\n   * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\r\\n   * @param recipient The address which should receive the fees collected\\r\\n   * @param bottomTick The lower tick of the position for which to collect fees\\r\\n   * @param topTick The upper tick of the position for which to collect fees\\r\\n   * @param amount0Requested How much token0 should be withdrawn from the fees owed\\r\\n   * @param amount1Requested How much token1 should be withdrawn from the fees owed\\r\\n   * @return amount0 The amount of fees collected in token0\\r\\n   * @return amount1 The amount of fees collected in token1\\r\\n   */\\r\\n  function collect(\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount0Requested,\\r\\n    uint128 amount1Requested\\r\\n  ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\r\\n   * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\r\\n   * @dev Fees must be collected separately via a call to #collect\\r\\n   * @param bottomTick The lower tick of the position for which to burn liquidity\\r\\n   * @param topTick The upper tick of the position for which to burn liquidity\\r\\n   * @param amount How much liquidity to burn\\r\\n   * @return amount0 The amount of token0 sent to the recipient\\r\\n   * @return amount1 The amount of token1 sent to the recipient\\r\\n   */\\r\\n  function burn(\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount\\r\\n  ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swap(\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\\r\\n   * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param sender The address called this function (Comes from the Router)\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swapSupportingFeeOnInputTokens(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback\\r\\n   * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used\\r\\n   * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending\\r\\n   * the donation amount(s) from the callback\\r\\n   * @param recipient The address which will receive the token0 and token1 amounts\\r\\n   * @param amount0 The amount of token0 to send\\r\\n   * @param amount1 The amount of token1 to send\\r\\n   * @param data Any data to be passed through to the callback\\r\\n   */\\r\\n  function flash(\\r\\n    address recipient,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdab29d9ea949c29ef153b523fcd821e93eed2ec4787ed57aec4bb507ef25a1dd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/algebra/pool/IAlgebraPoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Pool state that is not stored\\r\\n * @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\r\\n * blockchain. The functions here may have variable gas costs.\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolDerivedState {\\r\\n  /**\\r\\n   * @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\r\\n   * @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\r\\n   * the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\r\\n   * you must call it with secondsAgos = [3600, 0].\\r\\n   * @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\r\\n   * log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\r\\n   * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\r\\n   * @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\r\\n   * @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`\\r\\n   * from the current block timestamp\\r\\n   * @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`\\r\\n   * @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`\\r\\n   */\\r\\n  function getTimepoints(uint32[] calldata secondsAgos)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    int56[] memory tickCumulatives,\\r\\n    uint160[] memory secondsPerLiquidityCumulatives,\\r\\n    uint112[] memory volatilityCumulatives,\\r\\n    uint256[] memory volumePerAvgLiquiditys\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\r\\n   * @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\r\\n   * I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\r\\n   * snapshot is taken and the second snapshot is taken.\\r\\n   * @param bottomTick The lower tick of the range\\r\\n   * @param topTick The upper tick of the range\\r\\n   * @return innerTickCumulative The snapshot of the tick accumulator for the range\\r\\n   * @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\\r\\n   * @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range\\r\\n   */\\r\\n  function getInnerCumulatives(int24 bottomTick, int24 topTick)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    int56 innerTickCumulative,\\r\\n    uint160 innerSecondsSpentPerLiquidity,\\r\\n    uint32 innerSecondsSpent\\r\\n  );\\r\\n}\\r\\n\",\"keccak256\":\"0x5fee0d693dad3af5000fbc1274faeb53f2903c7de518d570808b8337014d17af\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/algebra/pool/IAlgebraPoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Events emitted by a pool\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolEvents {\\r\\n  /**\\r\\n   * @notice Emitted exactly once by a pool when #initialize is first called on the pool\\r\\n   * @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\r\\n   * @param price The initial sqrt price of the pool, as a Q64.96\\r\\n   * @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\r\\n   */\\r\\n  event Initialize(uint160 price, int24 tick);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when liquidity is minted for a given position\\r\\n   * @param sender The address that minted the liquidity\\r\\n   * @param owner The owner of the position and recipient of any minted liquidity\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param liquidityAmount The amount of liquidity minted to the position range\\r\\n   * @param amount0 How much token0 was required for the minted liquidity\\r\\n   * @param amount1 How much token1 was required for the minted liquidity\\r\\n   */\\r\\n  event Mint(\\r\\n    address sender,\\r\\n    address indexed owner,\\r\\n    int24 indexed bottomTick,\\r\\n    int24 indexed topTick,\\r\\n    uint128 liquidityAmount,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when fees are collected by the owner of a position\\r\\n   * @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\r\\n   * @param owner The owner of the position for which fees are collected\\r\\n   * @param recipient The address that received fees\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param amount0 The amount of token0 fees collected\\r\\n   * @param amount1 The amount of token1 fees collected\\r\\n   */\\r\\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a position's liquidity is removed\\r\\n   * @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\r\\n   * @param owner The owner of the position for which liquidity is removed\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param liquidityAmount The amount of liquidity to remove\\r\\n   * @param amount0 The amount of token0 withdrawn\\r\\n   * @param amount1 The amount of token1 withdrawn\\r\\n   */\\r\\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted by the pool for any swaps between token0 and token1\\r\\n   * @param sender The address that initiated the swap call, and that received the callback\\r\\n   * @param recipient The address that received the output of the swap\\r\\n   * @param amount0 The delta of the token0 balance of the pool\\r\\n   * @param amount1 The delta of the token1 balance of the pool\\r\\n   * @param price The sqrt(price) of the pool after the swap, as a Q64.96\\r\\n   * @param liquidity The liquidity of the pool after the swap\\r\\n   * @param tick The log base 1.0001 of price of the pool after the swap\\r\\n   */\\r\\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted by the pool for any flashes of token0/token1\\r\\n   * @param sender The address that initiated the swap call, and that received the callback\\r\\n   * @param recipient The address that received the tokens from flash\\r\\n   * @param amount0 The amount of token0 that was flashed\\r\\n   * @param amount1 The amount of token1 that was flashed\\r\\n   * @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\r\\n   * @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\r\\n   */\\r\\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the community fee is changed by the pool\\r\\n   * @param communityFee0New The updated value of the token0 community fee percent\\r\\n   * @param communityFee1New The updated value of the token1 community fee percent\\r\\n   */\\r\\n  event CommunityFee(uint8 communityFee0New, uint8 communityFee1New);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when new activeIncentive is set\\r\\n   * @param virtualPoolAddress The address of a virtual pool associated with the current active incentive\\r\\n   */\\r\\n  event Incentive(address indexed virtualPoolAddress);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the fee changes\\r\\n   * @param fee The value of the token fee\\r\\n   */\\r\\n  event Fee(uint16 fee);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the LiquidityCooldown changes\\r\\n   * @param liquidityCooldown The value of locktime for added liquidity\\r\\n   */\\r\\n  event LiquidityCooldown(uint32 liquidityCooldown);\\r\\n}\\r\\n\",\"keccak256\":\"0x8bcfbec86863b5b57cdb0db3b9c24fb7ab496d48af8422dc05556105131fff98\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/algebra/pool/IAlgebraPoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport '../IDataStorageOperator.sol';\\r\\n\\r\\n/// @title Pool state that never changes\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolImmutables {\\r\\n  /**\\r\\n   * @notice The contract that stores all the timepoints and can perform actions with them\\r\\n   * @return The operator address\\r\\n   */\\r\\n  function dataStorageOperator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\\r\\n   * @return The contract address\\r\\n   */\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The first of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The second of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The pool tick spacing\\r\\n   * @dev Ticks can only be used at multiples of this value\\r\\n   * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\r\\n   * This value is an int24 to avoid casting even though it is always positive.\\r\\n   * @return The tick spacing\\r\\n   */\\r\\n  function tickSpacing() external view returns (int24);\\r\\n\\r\\n  /**\\r\\n   * @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n   * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n   * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n   * @return The max amount of liquidity per tick\\r\\n   */\\r\\n  function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\",\"keccak256\":\"0x9a1ad90c7909c3ae47eef7e893f720e9ac4a73fae3d49cb7b12db95865dbb848\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/algebra/pool/IAlgebraPoolPermissionedActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Permissioned pool actions\\r\\n * @notice Contains pool methods that may only be called by the factory owner or tokenomics\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolPermissionedActions {\\r\\n  /**\\r\\n   * @notice Set the community's % share of the fees. Cannot exceed 25% (250)\\r\\n   * @param communityFee0 new community fee percent for token0 of the pool in thousandths (1e-3)\\r\\n   * @param communityFee1 new community fee percent for token1 of the pool in thousandths (1e-3)\\r\\n   */\\r\\n  function setCommunityFee(uint8 communityFee0, uint8 communityFee1) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets an active incentive\\r\\n   * @param virtualPoolAddress The address of a virtual pool associated with the incentive\\r\\n   */\\r\\n  function setIncentive(address virtualPoolAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets new lock time for added liquidity\\r\\n   * @param newLiquidityCooldown The time in seconds\\r\\n   */\\r\\n  function setLiquidityCooldown(uint32 newLiquidityCooldown) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaf4720ba8ac271e56d80b101b051dc4301b60f6fc8004407d9ec714131e200a1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/algebra/pool/IAlgebraPoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that can change\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolState {\\r\\n  /**\\r\\n   * @notice The globalState structure in the pool stores many values but requires only one slot\\r\\n   * and is exposed as a single method to save gas when accessed externally.\\r\\n   * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\r\\n   * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\r\\n   * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\r\\n   * boundary;\\r\\n   * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\r\\n   * Returns timepointIndex The index of the last written timepoint;\\r\\n   * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\r\\n   * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\r\\n   * Returns unlocked Whether the pool is currently locked to reentrancy;\\r\\n   */\\r\\n  function globalState()\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    uint160 price,\\r\\n    int24 tick,\\r\\n    uint16 fee,\\r\\n    uint16 timepointIndex,\\r\\n    uint8 communityFeeToken0,\\r\\n    uint8 communityFeeToken1,\\r\\n    bool unlocked\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n   * @dev This value can overflow the uint256\\r\\n   */\\r\\n  function totalFeeGrowth0Token() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n   * @dev This value can overflow the uint256\\r\\n   */\\r\\n  function totalFeeGrowth1Token() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice The currently in range liquidity available to the pool\\r\\n   * @dev This value has no relationship to the total liquidity across all ticks.\\r\\n   * Returned value cannot exceed type(uint128).max\\r\\n   */\\r\\n  function liquidity() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Look up information about a specific tick in the pool\\r\\n   * @dev This is a public structure, so the `return` natspec tags are omitted.\\r\\n   * @param tick The tick to look up\\r\\n   * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\r\\n   * tick upper;\\r\\n   * Returns liquidityDelta how much liquidity changes when the pool price crosses the tick;\\r\\n   * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\r\\n   * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\r\\n   * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\r\\n   * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\r\\n   * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\r\\n   * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\r\\n   * otherwise equal to false. Outside values can only be used if the tick is initialized.\\r\\n   * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\r\\n   * a specific position.\\r\\n   */\\r\\n  function ticks(int24 tick)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    uint128 liquidityTotal,\\r\\n    int128 liquidityDelta,\\r\\n    uint256 outerFeeGrowth0Token,\\r\\n    uint256 outerFeeGrowth1Token,\\r\\n    int56 outerTickCumulative,\\r\\n    uint160 outerSecondsPerLiquidity,\\r\\n    uint32 outerSecondsSpent,\\r\\n    bool initialized\\r\\n  );\\r\\n\\r\\n  /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\r\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the information about a position by the position's key\\r\\n   * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\r\\n   * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\r\\n   * @return liquidityAmount The amount of liquidity in the position;\\r\\n   * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\r\\n   * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\r\\n   * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\r\\n   * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\r\\n   * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\r\\n   */\\r\\n  function positions(bytes32 key)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    uint128 liquidityAmount,\\r\\n    uint32 lastLiquidityAddTimestamp,\\r\\n    uint256 innerFeeGrowth0Token,\\r\\n    uint256 innerFeeGrowth1Token,\\r\\n    uint128 fees0,\\r\\n    uint128 fees1\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns data about a specific timepoint index\\r\\n   * @param index The element of the timepoints array to fetch\\r\\n   * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time\\r\\n   * ago, rather than at a specific index in the array.\\r\\n   * This is a public mapping of structures, so the `return` natspec tags are omitted.\\r\\n   * @return initialized whether the timepoint has been initialized and the values are safe to use;\\r\\n   * Returns blockTimestamp The timestamp of the timepoint;\\r\\n   * Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp;\\r\\n   * Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp;\\r\\n   * Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp;\\r\\n   * Returns averageTick Time-weighted average tick;\\r\\n   * Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;\\r\\n   */\\r\\n  function timepoints(uint256 index)\\r\\n  external\\r\\n  view\\r\\n  returns (\\r\\n    bool initialized,\\r\\n    uint32 blockTimestamp,\\r\\n    int56 tickCumulative,\\r\\n    uint160 secondsPerLiquidityCumulative,\\r\\n    uint88 volatilityCumulative,\\r\\n    int24 averageTick,\\r\\n    uint144 volumePerLiquidityCumulative\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the information about active incentive\\r\\n   * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\\r\\n   * @return virtualPool The address of a virtual pool associated with the current active incentive\\r\\n   */\\r\\n  function activeIncentive() external view returns (address virtualPool);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the lock time for added liquidity\\r\\n   */\\r\\n  function liquidityCooldown() external view returns (uint32 cooldownInSeconds);\\r\\n}\\r\\n\",\"keccak256\":\"0x6570bab323c67435efdf1558466d3e9d3862631554cd199c8c0148afa04afa83\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IConverterStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\n\\r\\n/// @notice Allow to share declaration of ConverterStrategyBaseState with libraries\\r\\ninterface IConverterStrategyBase {\\r\\n  struct ConverterStrategyBaseState {\\r\\n    /// @dev Amount of underlying assets invested to the pool.\\r\\n    uint investedAssets;\\r\\n\\r\\n    /// @dev Linked Tetu Converter\\r\\n    ITetuConverter converter;\\r\\n\\r\\n    /// @notice Percent of asset amount that can be not invested, it's allowed to just keep it on balance\\r\\n    ///         decimals = {DENOMINATOR}\\r\\n    /// @dev We need this threshold to avoid numerous conversions of small amounts\\r\\n    uint reinvestThresholdPercent;\\r\\n\\r\\n    /// @notice Current debt to the insurance.\\r\\n    ///         It's increased when insurance covers any losses related to swapping and borrow-debts-paying.\\r\\n    ///         It's not changed when insurance covers losses/receives profit that appeared after price changing.\\r\\n    ///         The strategy covers this debt on each hardwork using the profit (rewards, fees)\\r\\n    int debtToInsurance;\\r\\n\\r\\n    /// @notice reserve space for future needs\\r\\n    uint[50-1] __gap;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x0be4f2ba25d955dfa6c9f821ecb466c3ae78f025ad2a85d83d11e22d850047ea\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolProportionsProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IPoolProportionsProvider {\\r\\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\\r\\n  /// @return Proportion of the not-underlying [0...1e18]\\r\\n  function getPropNotUnderlying18() external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x6722552632531ac63c23ddc5a3a104647a3e4a0d4c417ab9051c47ed49bc826c\",\"license\":\"MIT\"},\"contracts/libs/AppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice List of all errors generated by the application\\r\\n///         Each error should have unique code TS-XXX and descriptive comment\\r\\nlibrary AppErrors {\\r\\n  /// @notice Provided address should be not zero\\r\\n  string public constant ZERO_ADDRESS = \\\"TS-1 zero address\\\";\\r\\n\\r\\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\\r\\n  string public constant UNISWAP_PAIR_NOT_FOUND = \\\"TS-2 pair not found\\\";\\r\\n\\r\\n  /// @notice Lengths not matched\\r\\n  string public constant WRONG_LENGTHS = \\\"TS-4 wrong lengths\\\";\\r\\n\\r\\n  /// @notice Unexpected zero balance\\r\\n  string public constant ZERO_BALANCE = \\\"TS-5 zero balance\\\";\\r\\n\\r\\n  string public constant ITEM_NOT_FOUND = \\\"TS-6 not found\\\";\\r\\n\\r\\n  string public constant NOT_ENOUGH_BALANCE = \\\"TS-7 not enough balance\\\";\\r\\n\\r\\n  /// @notice Price oracle returns zero price\\r\\n  string public constant ZERO_PRICE = \\\"TS-8 zero price\\\";\\r\\n\\r\\n  string public constant WRONG_VALUE = \\\"TS-9 wrong value\\\";\\r\\n\\r\\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\\r\\n  string public constant ZERO_AMOUNT_BORROWED = \\\"TS-10 zero borrowed amount\\\";\\r\\n\\r\\n  string public constant WITHDRAW_TOO_MUCH = \\\"TS-11 try to withdraw too much\\\";\\r\\n\\r\\n  string public constant UNKNOWN_ENTRY_KIND = \\\"TS-12 unknown entry kind\\\";\\r\\n\\r\\n  string public constant ONLY_TETU_CONVERTER = \\\"TS-13 only TetuConverter\\\";\\r\\n\\r\\n  string public constant WRONG_ASSET = \\\"TS-14 wrong asset\\\";\\r\\n\\r\\n  string public constant NO_LIQUIDATION_ROUTE = \\\"TS-15 No liquidation route\\\";\\r\\n\\r\\n  string public constant PRICE_IMPACT = \\\"TS-16 price impact\\\";\\r\\n\\r\\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\\r\\n  string public constant REPAY_MAKES_SWAP = \\\"TS-17 can not convert back\\\";\\r\\n\\r\\n  string public constant NO_INVESTMENTS = \\\"TS-18 no investments\\\";\\r\\n\\r\\n  string public constant INCORRECT_LENGTHS = \\\"TS-19 lengths\\\";\\r\\n\\r\\n  /// @notice We expect increasing of the balance, but it was decreased\\r\\n  string public constant BALANCE_DECREASE = \\\"TS-20 balance decrease\\\";\\r\\n\\r\\n  /// @notice Prices changed and invested assets amount was increased on S, value of S is too high\\r\\n  string public constant EARNED_AMOUNT_TOO_HIGH = \\\"TS-21 earned too high\\\";\\r\\n\\r\\n  string public constant GOVERNANCE_ONLY = \\\"TS-22 governance only\\\";\\r\\n\\r\\n  string public constant ZERO_VALUE = \\\"TS-24 zero value\\\";\\r\\n\\r\\n  string public constant INCORRECT_SWAP_BY_AGG_PARAM = \\\"TS-25 swap by agg\\\";\\r\\n\\r\\n  string public constant OVER_COLLATERAL_DETECTED = \\\"TS-27 over-collateral\\\";\\r\\n\\r\\n  string public constant NOT_IMPLEMENTED = \\\"TS-28 not implemented\\\";\\r\\n\\r\\n  /// @notice You are not allowed to make direct debt if a NOT-DUST reverse debt exists and visa verse.\\r\\n  string public constant OPPOSITE_DEBT_EXISTS = \\\"TS-29 opposite debt exists\\\";\\r\\n\\r\\n  string public constant INVALID_VALUE = \\\"TS-30 invalid value\\\";\\r\\n\\r\\n  string public constant TOO_HIGH = \\\"TS-32 too high value\\\";\\r\\n\\r\\n  /// @notice BorrowLib has recursive call, sub-calls are not allowed\\r\\n  ///         This error can happen if allowed proportion is too small, i.e. 0.0004 : (1-0.0004)\\r\\n  ///         Such situation can happen if amount to swap is almost equal to the amount of the token in the current tick,\\r\\n  ///         so swap will move us close to the border between ticks.\\r\\n  ///         It was decided, that it's ok to have revert in that case\\r\\n  ///         We can change this behavior by changing BorrowLib.rebalanceRepayBorrow implementation:\\r\\n  ///             if amount-to-repay passed to _repayDebt is too small to be used,\\r\\n  ///             we should increase it min amount required to make repay successfully (amount must be > threshold)\\r\\n  ///         Previously it was error NOT_ALLOWED = \\\"TS23: not allowed\\\", see issues SCB-777, SCB-818\\r\\n  string public constant TOO_DEEP_RECURSION_BORROW_LIB = \\\"TS-33 too deep recursion\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x1400c631697434c991de2bfadcac7a0164a87be41a2cb683ed7f4fc75798d3e8\",\"license\":\"BUSL-1.1\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\\\";\\r\\n\\r\\n/// @notice Common internal utils\\r\\nlibrary AppLib {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// @notice 1% gap to cover possible liquidation inefficiency\\r\\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\\r\\n  uint internal constant GAP_CONVERSION = 1_000;\\r\\n  /// @dev Absolute value for any token\\r\\n  uint internal constant DEFAULT_LIQUIDATION_THRESHOLD = 100_000;\\r\\n  uint internal constant DENOMINATOR = 100_000;\\r\\n\\r\\n  /// @notice Any amount less than the following is dust\\r\\n  uint public constant DUST_AMOUNT_TOKENS = 100;\\r\\n\\r\\n  /// @notice Unchecked increment for for-cycles\\r\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\r\\n    unchecked {\\r\\n      return i + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\r\\n  /// @dev Should NOT be used for third-party pools\\r\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\r\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\r\\n      IERC20(token).safeApprove(spender, 0);\\r\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\r\\n      IERC20(token).safeApprove(spender, 2 ** 255);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function balance(address token) internal view returns (uint) {\\r\\n    return IERC20(token).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /// @return prices Asset prices in USD, decimals 18\\r\\n  /// @return decs 10**decimals\\r\\n  function _getPricesAndDecs(IPriceOracle priceOracle, address[] memory tokens_, uint len) internal view returns (\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs\\r\\n  ) {\\r\\n    prices = new uint[](len);\\r\\n    decs = new uint[](len);\\r\\n    {\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\\r\\n        prices[i] = priceOracle.getAssetPrice(tokens_[i]);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\\r\\n  function getAssetIndex(address[] memory tokens_, address asset_) internal pure returns (uint) {\\r\\n    uint len = tokens_.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (tokens_[i] == asset_) {\\r\\n        return i;\\r\\n      }\\r\\n    }\\r\\n    return type(uint).max;\\r\\n  }\\r\\n\\r\\n  function _getLiquidator(address controller_) internal view returns (ITetuLiquidator) {\\r\\n    return ITetuLiquidator(IController(controller_).liquidator());\\r\\n  }\\r\\n\\r\\n  function _getPriceOracle(ITetuConverter converter_) internal view returns (IPriceOracle) {\\r\\n    return IPriceOracle(IConverterController(converter_.controller()).priceOracle());\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate liquidation threshold, use default value if the threshold is not set\\r\\n  ///         It's allowed to set any not-zero threshold, it this case default value is not used\\r\\n  /// @dev This function should be applied to the threshold at the moment of the reading its value from the storage.\\r\\n  ///      So, if we pass {mapping(address => uint) storage liquidationThresholds}, the threshold can be zero\\r\\n  ///      bug if we pass {uint liquidationThreshold} to a function, the threshold should be not zero\\r\\n  function _getLiquidationThreshold(uint threshold) internal pure returns (uint) {\\r\\n    return threshold == 0\\r\\n      ? AppLib.DEFAULT_LIQUIDATION_THRESHOLD\\r\\n      : threshold;\\r\\n  }\\r\\n\\r\\n  /// @notice Return a-b OR zero if a < b\\r\\n  function sub0(uint a, uint b) internal pure returns (uint) {\\r\\n    return a > b ? a - b : 0;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x9ed14dbb815e8db52864ff1002f877e3b496c9dcb2ac1dccc220c510da203022\",\"license\":\"BUSL-1.1\"},\"contracts/libs/BorrowLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"../strategies/ConverterStrategyBaseLib.sol\\\";\\r\\n\\r\\n/// @notice Library to make new borrow, extend/reduce exist borrows and repay to keep proper assets proportions\\r\\n/// @dev Swap through liquidator is still allowed to be able to get required profitToCover, but this amount is small\\r\\nlibrary BorrowLib {\\r\\n  /// @notice prop0 + prop1\\r\\n  uint constant public SUM_PROPORTIONS = 1e18;\\r\\n\\r\\n  /// @notice Function {_rebalanceAssets} cannot be called recursively more than twice.\\r\\n  /// Normally one call is enough.\\r\\n  /// Firstly repay(requiredAmount0) is called below. There are two possible results:\\r\\n  /// 1) requiredCost0 <= cost0\\r\\n  /// 2) v.directDebt == 0\\r\\n  /// There is SCB-818: there are two debts (big and small), on the first cycle we get amount less than expected\\r\\n  /// because of debt gap. So, we need second cycle.\\r\\n  uint constant public MAX_DEEP_RECURSION = 2;\\r\\n\\r\\n  //region -------------------------------------------------- Data types\\r\\n  struct PricesDecs {\\r\\n    /// @notice Asset prices in USD, decimals 18\\r\\n    uint[] prices;\\r\\n    /// @notice decs 10**decimals\\r\\n    uint[] decs;\\r\\n  }\\r\\n\\r\\n  struct ConverterLiquidator {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n  }\\r\\n\\r\\n  struct RebalanceAssetsLocal {\\r\\n    // ------- constant values\\r\\n    address asset0;\\r\\n    address asset1;\\r\\n    /// @notice Proportion of {asset0}, > 0; proportion of {asset1} is SUM_PROPORTIONS - prop0\\r\\n    uint prop0;\\r\\n    /// @notice Min allowed amount of {asset0}-collateral, 0 - use default min value\\r\\n    uint threshold0;\\r\\n    /// @ntoice Min allowed amount of {asset1}-collateral, 0 - use default min value\\r\\n    uint threshold1;\\r\\n\\r\\n    PricesDecs pd;\\r\\n    // ------- refreshable values\\r\\n\\r\\n    // @notice Current balance of {asset0}\\r\\n    uint amount0;\\r\\n    // @notice Current balance of {asset1}\\r\\n    uint amount1;\\r\\n\\r\\n    /// @notice Borrowed amount of not-underlying\\r\\n    uint directDebt;\\r\\n    /// @notice Borrowed amount of underlying\\r\\n    uint reverseDebt;\\r\\n\\r\\n    uint addition0;\\r\\n  }\\r\\n\\r\\n  /// @notice Params required to borrow {assetB} under {assetA}\\r\\n  struct RebalanceAssetsCore {\\r\\n    ConverterLiquidator converterLiquidator;\\r\\n    address assetA;\\r\\n    address assetB;\\r\\n    uint propA;\\r\\n    uint propB;\\r\\n    /// @notice {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\\r\\n    uint alpha18;\\r\\n    /// @notice Min allowed amount of {assetA}-collateral, 0 - use default min value\\r\\n    uint thresholdA;\\r\\n\\r\\n    uint addonA;\\r\\n    uint addonB;\\r\\n\\r\\n    /// @notice Index of {assetA} in {prices} and {decs}\\r\\n    uint indexA;\\r\\n    /// @notice Index of {assetB} in {prices} and {decs}\\r\\n    uint indexB;\\r\\n  }\\r\\n\\r\\n  struct OpenPosition2Local {\\r\\n    uint collateral;\\r\\n    uint toBorrow;\\r\\n    uint cc;\\r\\n    uint cb;\\r\\n    uint c0;\\r\\n    uint cb2;\\r\\n    uint ca0;\\r\\n    uint gamma18;\\r\\n    uint pa2;\\r\\n    uint pb2;\\r\\n    bytes entryData;\\r\\n    uint alpha18;\\r\\n  }\\r\\n\\r\\n  struct MakeBorrowToDepositLocal {\\r\\n    uint[] prices;\\r\\n    uint[] decs;\\r\\n    uint cost0;\\r\\n    uint cost1;\\r\\n    uint prop1;\\r\\n    bytes entryData;\\r\\n  }\\r\\n  //endregion -------------------------------------------------- Data types\\r\\n\\r\\n  //region -------------------------------------------------- External functions\\r\\n  /// @notice Set balances of {asset0} and {asset1} in proportions {prop0}:{prop1} using borrow/repay (no swaps)\\r\\n  /// @param prop0 Proportion of {asset0}, > 0. Proportion of {asset1} is calculates as 1e18 - prop0\\r\\n  /// @param threshold0 Min allowed amount of {asset0}-collateral, 0 - use default min value\\r\\n  /// @param threshold1 Min allowed amount of {asset1}-collateral, 0 - use default min value\\r\\n  /// @param addition0 Additional amount A0 of {asset0}.\\r\\n  ///                  Balance0 = A0 + B0\\r\\n  ///                  We need following balances in results: B0 : Balance1 === {proportion}:{100_000-proportion}\\r\\n  function rebalanceAssets(\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    address asset0,\\r\\n    address asset1,\\r\\n    uint prop0,\\r\\n    uint threshold0,\\r\\n    uint threshold1,\\r\\n    uint addition0\\r\\n  ) external {\\r\\n    // pool always have TWO assets, it's not allowed ot have only one asset\\r\\n    // so, we assume that the proportions are in the range (0...1e18)\\r\\n    require(prop0 != 0, AppErrors.ZERO_VALUE);\\r\\n    require(prop0 < SUM_PROPORTIONS, AppErrors.TOO_HIGH);\\r\\n\\r\\n    RebalanceAssetsLocal memory v;\\r\\n    v.asset0 = asset0;\\r\\n    v.asset1 = asset1;\\r\\n    v.prop0 = prop0;\\r\\n    v.threshold0 = threshold0;\\r\\n    v.threshold1 = threshold1;\\r\\n    v.addition0 = addition0;\\r\\n\\r\\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\r\\n    address[] memory tokens = new address[](2);\\r\\n    tokens[0] = asset0;\\r\\n    tokens[1] = asset1;\\r\\n    (v.pd.prices, v.pd.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\\r\\n\\r\\n    _refreshRebalance(v, ConverterLiquidator(converter_, liquidator_), MAX_DEEP_RECURSION);\\r\\n  }\\r\\n\\r\\n  /// @notice Convert {amount_} of underlying to two amounts: A0 (underlying) and A1 (not-underlying)\\r\\n  ///         Result proportions of A0 and A1 should match to {prop0} : 1e18-{prop0}\\r\\n  ///         The function is able to make new borrowing and/or close exist debts.\\r\\n  /// @param amount_ Amount of underlying that is going to be deposited\\r\\n  ///                We assume here, that current balance >= the {amount_}\\r\\n  /// @param tokens_ [Underlying, not underlying]\\r\\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\\r\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\r\\n  /// @return tokenAmounts Result amounts [A0 (underlying), A1 (not-underlying)]\\r\\n  function prepareToDeposit(\\r\\n    ITetuConverter converter_,\\r\\n    uint amount_,\\r\\n    address[2] memory tokens_,\\r\\n    uint[2] memory thresholds_,\\r\\n    uint prop0\\r\\n  ) external returns (\\r\\n    uint[] memory tokenAmounts\\r\\n  ) {\\r\\n    uint[2] memory amountsToDeposit;\\r\\n    uint[2] memory balances = [\\r\\n      AppLib.sub0(AppLib.balance(tokens_[0]), amount_), // We assume here, that current balance >= the {amount_}\\r\\n      AppLib.balance(tokens_[1])\\r\\n    ];\\r\\n\\r\\n    // we assume here, that either direct OR reverse debts (amount > threshold) are possible but not both at the same time\\r\\n    (uint debtReverse, ) = converter_.getDebtAmountCurrent(address(this), tokens_[1], tokens_[0], true);\\r\\n    if (debtReverse > thresholds_[0]) {\\r\\n      // case 1: reverse debt exists\\r\\n      // case 1.1: amount to deposit exceeds exist debt.\\r\\n      //    Close the debt completely and than make either new direct OR reverse debt\\r\\n      // case 1.2: amount to deposit is less than the exist debt.\\r\\n      //    Close the debt partially and make new reverse debt\\r\\n      uint amountToRepay = amount_ > debtReverse ? debtReverse : amount_;\\r\\n      ConverterStrategyBaseLib.closePosition(converter_, tokens_[1], tokens_[0], amountToRepay);\\r\\n      amountsToDeposit = [\\r\\n        AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]),\\r\\n        AppLib.sub0(AppLib.balance(tokens_[1]), balances[1])\\r\\n      ];\\r\\n    } else {\\r\\n      // case 2: no debts OR direct debt exists\\r\\n      amountsToDeposit = [amount_, 0];\\r\\n    }\\r\\n\\r\\n    _makeBorrowToDeposit(converter_, amountsToDeposit, tokens_, thresholds_, prop0);\\r\\n\\r\\n    tokenAmounts = new uint[](2);\\r\\n    tokenAmounts[0] = AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]);\\r\\n    tokenAmounts[1] = AppLib.sub0(AppLib.balance(tokens_[1]), balances[1]);\\r\\n  }\\r\\n  //endregion -------------------------------------------------- External functions\\r\\n\\r\\n  //region -------------------------------------------------- Implementation of prepareToDeposit\\r\\n  /// @notice Make a direct or reverse borrow to make amounts_ fit to the given proportions.\\r\\n  /// If one of available amounts is zero, we just need to make a borrow using second amount as amountIn.\\r\\n  /// Otherwise, we need to calculate amountIn at first.\\r\\n  /// @dev The purpose is to get the amounts in proper proportions: A:B = prop0:prop1.\\r\\n  /// Suppose, amounts_[1] is not enough:\\r\\n  ///   [A1, B1] => [A2 + A3, B1], A2:B1 = prop0:prop1, A3 is amountIn for new borrow.\\r\\n  /// Suppose, amounts_[0] is not enough:\\r\\n  ///   [A1, B1] => [A1, B2 + B3], A1:B2 = prop0:prop1, B3 is amountIn for new borrow.\\r\\n  /// @param amounts_ Available amounts\\r\\n  /// @param tokens_ [Underlying, not underlying]\\r\\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\\r\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\r\\n  function _makeBorrowToDeposit(\\r\\n    ITetuConverter converter_,\\r\\n    uint[2] memory amounts_,\\r\\n    address[2] memory tokens_,\\r\\n    uint[2] memory thresholds_,\\r\\n    uint prop0\\r\\n  ) internal {\\r\\n    MakeBorrowToDepositLocal memory v;\\r\\n\\r\\n    {\\r\\n      IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\r\\n      address[] memory tokens = new address[](2);\\r\\n      tokens[0] = tokens_[0];\\r\\n      tokens[1] = tokens_[1];\\r\\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\\r\\n    }\\r\\n\\r\\n    v.cost0 = amounts_[0] * v.prices[0] / v.decs[0];\\r\\n    v.cost1 = amounts_[1] * v.prices[1] / v.decs[1];\\r\\n    // we need: cost0/cost1 = prop0/prop1, and so cost0 * prop1 = cost1 * prop0\\r\\n    v.prop1 = SUM_PROPORTIONS - prop0;\\r\\n\\r\\n    if (v.cost0 * v.prop1 > v.cost1 * prop0) {\\r\\n      // we need to make direct borrow\\r\\n      uint cost0for1 = v.cost1 * prop0 / v.prop1; // a part of cost0 that is matched to cost1\\r\\n      uint amountIn = (v.cost0 - cost0for1) * v.decs[0] / v.prices[0];\\r\\n\\r\\n      AppLib.approveIfNeeded(tokens_[0], amountIn, address(converter_));\\r\\n      v.entryData = abi.encode(1, prop0, v.prop1); // ENTRY_KIND_EXACT_PROPORTION_1\\r\\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[0], tokens_[1], amountIn, thresholds_[0]);\\r\\n    } else if (v.cost0 * v.prop1 < v.cost1 * prop0) {\\r\\n      // we need to make reverse borrow\\r\\n      uint cost1for0 = v.cost0 * v.prop1 / prop0; // a part of cost1 that is matched to cost0\\r\\n      uint amountIn = (v.cost1 - cost1for0) * v.decs[1] / v.prices[1];\\r\\n\\r\\n      AppLib.approveIfNeeded(tokens_[1], amountIn, address(converter_));\\r\\n      v.entryData = abi.encode(1, v.prop1, prop0); // ENTRY_KIND_EXACT_PROPORTION_1\\r\\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[1], tokens_[0], amountIn, thresholds_[1]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  //endregion -------------------------------------------------- Implementation of prepareToDeposit\\r\\n\\r\\n  //region -------------------------------------------------- Internal helper functions\\r\\n\\r\\n  /// @notice refresh state in {v} and call _rebalanceAssets()\\r\\n  function _refreshRebalance(\\r\\n    RebalanceAssetsLocal memory v,\\r\\n    ConverterLiquidator memory converterLiquidator,\\r\\n    uint repayAllowed\\r\\n  ) internal {\\r\\n    v.amount0 = IERC20(v.asset0).balanceOf(address(this));\\r\\n    v.amount1 = IERC20(v.asset1).balanceOf(address(this));\\r\\n\\r\\n    (v.directDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset0, v.asset1, true);\\r\\n    (v.reverseDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset1, v.asset0, true);\\r\\n\\r\\n    _rebalanceAssets(v, converterLiquidator, repayAllowed);\\r\\n  }\\r\\n\\r\\n  /// @param repayAllowed Protection against recursion\\r\\n  ///                     Assets can be rebalanced in two ways:\\r\\n  ///                     1) openPosition\\r\\n  ///                     2) repay + openPosition\\r\\n  ///                     Only one repay is allowed.\\r\\n  function _rebalanceAssets(\\r\\n    RebalanceAssetsLocal memory v,\\r\\n    ConverterLiquidator memory converterLiquidator,\\r\\n    uint repayAllowed\\r\\n  ) internal {\\r\\n    uint cost0 = v.amount0 * v.pd.prices[0] / v.pd.decs[0];\\r\\n    uint cost1 = v.amount1 * v.pd.prices[1] / v.pd.decs[1];\\r\\n    uint costAddition0 = v.addition0 * v.pd.prices[0] / v.pd.decs[0];\\r\\n\\r\\n    if (cost0 + cost1 > costAddition0) {\\r\\n      uint totalCost = cost0 + cost1 - costAddition0;\\r\\n\\r\\n      uint requiredCost0 = totalCost * v.prop0 / SUM_PROPORTIONS + costAddition0;\\r\\n      uint requiredCost1 = totalCost * (SUM_PROPORTIONS - v.prop0) / SUM_PROPORTIONS;\\r\\n\\r\\n      if (requiredCost0 > cost0) {\\r\\n        // we need to increase amount of asset 0 and decrease amount of asset 1, so we need to borrow asset 0 (reverse)\\r\\n        RebalanceAssetsCore memory c10 = RebalanceAssetsCore({\\r\\n          converterLiquidator: converterLiquidator,\\r\\n          assetA: v.asset1,\\r\\n          assetB: v.asset0,\\r\\n          propA: SUM_PROPORTIONS - v.prop0,\\r\\n          propB: v.prop0,\\r\\n          alpha18: 1e18 * v.pd.prices[0] * v.pd.decs[1] / v.pd.prices[1] / v.pd.decs[0],\\r\\n          thresholdA: v.threshold1,\\r\\n          addonA: 0,\\r\\n          addonB: v.addition0,\\r\\n          indexA: 1,\\r\\n          indexB: 0\\r\\n        });\\r\\n\\r\\n        if (v.directDebt >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\r\\n\\r\\n          // repay of v.asset1 is required\\r\\n          uint requiredAmount0 = (requiredCost0 - cost0) * v.pd.decs[0] / v.pd.prices[0];\\r\\n          rebalanceRepayBorrow(v, c10, requiredAmount0, v.directDebt, repayAllowed);\\r\\n        } else {\\r\\n          // new (or additional) borrow of asset 0 under asset 1 is required\\r\\n          openPosition(c10, v.pd, v.amount1, v.amount0);\\r\\n        }\\r\\n      } else if (requiredCost0 < cost0) {\\r\\n        RebalanceAssetsCore memory c01 = RebalanceAssetsCore({\\r\\n          converterLiquidator: converterLiquidator,\\r\\n          assetA: v.asset0,\\r\\n          assetB: v.asset1,\\r\\n          propA: v.prop0,\\r\\n          propB: SUM_PROPORTIONS - v.prop0,\\r\\n          alpha18: 1e18 * v.pd.prices[1] * v.pd.decs[0] / v.pd.prices[0] / v.pd.decs[1],\\r\\n          thresholdA: v.threshold0,\\r\\n          addonA: v.addition0,\\r\\n          addonB: 0,\\r\\n          indexA: 0,\\r\\n          indexB: 1\\r\\n        });\\r\\n        // we need to decrease amount of asset 0 and increase amount of asset 1, so we need to borrow asset 1 (direct)\\r\\n        if (v.reverseDebt >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\r\\n\\r\\n          // repay of v.asset0 is required\\r\\n          // requiredCost0 < cost0 => requiredCost1 > cost1\\r\\n          uint requiredAmount1 = (requiredCost1 - cost1) * v.pd.decs[1] / v.pd.prices[1];\\r\\n          rebalanceRepayBorrow(v, c01, requiredAmount1, v.reverseDebt, repayAllowed);\\r\\n        } else {\\r\\n          // new or additional borrow of asset 1 under asset 0 is required\\r\\n          openPosition(c01, v.pd, v.amount0, v.amount1);\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      // if costAddition0 exceeds cost0 + cost1, all amounts should be converted to asset 0\\r\\n      // for simplicity, we don't make any swaps or borrows (amount addition0 is assumed to be small)\\r\\n      // and just leave balances as is\\r\\n      // as result, profit-to-cover will be reduced from costAddition0 to v.amount0\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Repay {amountDebtA} fully or partially to get at least {requiredAmountB} of collateral\\r\\n  ///         then try to rebalance once more\\r\\n  /// @param requiredAmountB Amount of collateral that we need to receive after repay\\r\\n  /// @param amountDebtA Total amount that is required to pay to close the debt\\r\\n  function rebalanceRepayBorrow(\\r\\n    RebalanceAssetsLocal memory v,\\r\\n    RebalanceAssetsCore memory c,\\r\\n    uint requiredAmountB,\\r\\n    uint amountDebtA,\\r\\n    uint repayAllowed\\r\\n  ) internal {\\r\\n    // repayAllowed cannot be zero here because of requires in _rebalanceAssets, but it's safer to check it once more\\r\\n    require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\r\\n\\r\\n    // we need to get {requiredAmountB}\\r\\n    // we don't know exact amount to repay\\r\\n    // but we are sure that amount {requiredAmountB ===> requiredAmountA} would be more than required\\r\\n    uint capRequiredAmountA = requiredAmountB * c.alpha18 / 1e18;\\r\\n    uint amountToRepay = Math.min(capRequiredAmountA, amountDebtA);\\r\\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n      ConverterStrategyBaseLib._repayDebt(c.converterLiquidator.converter, c.assetB, c.assetA, amountToRepay);\\r\\n      _refreshRebalance(v, c.converterLiquidator, repayAllowed - 1);\\r\\n    } // else the assets are already in proper proportions\\r\\n  }\\r\\n\\r\\n  //endregion -------------------------------------------------- Internal helper functions\\r\\n\\r\\n  //region -------------------------------------------------- Open position\\r\\n  /// @notice borrow asset B under asset A. Result balances should be A0 + A1, B0 + B1\\r\\n  ///         Where (A1 : B1) == (propA : propB), A0 and B0 are equal to {c.addonA} and {c.addonB}\\r\\n  /// @param balanceA_ Current balance of the collateral\\r\\n  /// @param balanceB_ Current balance of the borrow asset\\r\\n  function openPosition(\\r\\n    RebalanceAssetsCore memory c,\\r\\n    PricesDecs memory pd,\\r\\n    uint balanceA_,\\r\\n    uint balanceB_\\r\\n  ) internal returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    // if there are two not-zero addons, the caller should reduce balances before the call\\r\\n    require(c.addonA == 0 || c.addonB == 0, AppErrors.INVALID_VALUE);\\r\\n\\r\\n    // we are going to borrow B under A\\r\\n    if (c.addonB != 0) {\\r\\n      // B is underlying, so we are going to borrow underlying\\r\\n      if (balanceB_ >= c.addonB) {\\r\\n        // simple case - we already have required addon on the balance. Just keep it unused\\r\\n        return _openPosition(c, balanceA_, balanceB_ - c.addonB);\\r\\n      } else {\\r\\n        // we need to get 1) (c.addonB + balanceB_) amount, so we will have required c.addonB\\r\\n        //                2) leftovers of A and B should be allocated in required proportions\\r\\n        // it's too hard to calculate correctly required to borrow amount in this case without changing TetuConverter\\r\\n        // but we can assume here, that amount (c.addonB - balanceB_) is pretty small (it's profitToCover)\\r\\n        // so, we can swap this required amount through liquidator at first\\r\\n        // then use _openPosition to re-allocated rest amounts to proper proportions\\r\\n        (uint decA,) = _makeLittleSwap(c, pd, balanceA_, c.addonB - balanceB_);\\r\\n        return _openPosition(c, balanceA_ - decA, balanceB_);\\r\\n      }\\r\\n    } else if (c.addonA != 0) {\\r\\n      // A is underlying, we need to put aside c.addonA and allocate leftovers in right proportions.\\r\\n      // we are going to borrow B under asset A, so the case (balanceA_ < c.addonA) is not valid here\\r\\n      require(balanceA_ >= c.addonA, AppErrors.NOT_ENOUGH_BALANCE);\\r\\n      return _openPosition(c, balanceA_ - c.addonA, balanceB_);\\r\\n    } else {\\r\\n      // simple logic, no addons\\r\\n      return _openPosition(c, balanceA_, balanceB_);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice borrow asset B under asset A, result balances should have proportions: (propA : propB)\\r\\n  function _openPosition(RebalanceAssetsCore memory c, uint balanceA_, uint balanceB_) internal returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    uint untouchedAmountA;\\r\\n    bytes memory entryData = abi.encode(1, c.propA, c.propB);\\r\\n\\r\\n    if (balanceB_ != 0) {\\r\\n      // we are going to use {balanceA_} as collateral\\r\\n      // but there is some amount on {balanceB_}, so we need to keep corresponded part of {balanceA_} untouched\\r\\n      untouchedAmountA = balanceB_ * c.alpha18 * c.propA / c.propB / 1e18;\\r\\n\\r\\n      // we are going to borrow B under A, so balance A must be greater then balance B\\r\\n      // otherwise the function is called incorrectly - probably we need to borrow A under B\\r\\n      require(untouchedAmountA <= balanceA_, AppErrors.WRONG_VALUE);\\r\\n    }\\r\\n\\r\\n    AppLib.approveIfNeeded(c.assetA, balanceA_ - untouchedAmountA, address(c.converterLiquidator.converter));\\r\\n\\r\\n    return ConverterStrategyBaseLib.openPosition(\\r\\n      c.converterLiquidator.converter,\\r\\n      entryData,\\r\\n      c.assetA,\\r\\n      c.assetB,\\r\\n      balanceA_ - untouchedAmountA,\\r\\n      c.thresholdA\\r\\n    );\\r\\n  }\\r\\n\\r\\n  //endregion -------------------------------------------------- Open position\\r\\n\\r\\n  //region -------------------------------------------------- Little swap\\r\\n  /// @notice Swap min amount of A to get {requiredAmountB}\\r\\n  /// @return spentAmountIn how much the balance A has decreased\\r\\n  /// @return receivedAmountOut how much the balance B has increased\\r\\n  function _makeLittleSwap(\\r\\n    RebalanceAssetsCore memory c,\\r\\n    PricesDecs memory pd,\\r\\n    uint balanceA_,\\r\\n    uint requiredAmountB\\r\\n  ) internal returns (\\r\\n    uint spentAmountIn,\\r\\n    uint receivedAmountOut\\r\\n  ) {\\r\\n    uint amountInA = requiredAmountB * pd.prices[c.indexB] * pd.decs[c.indexA] / pd.prices[c.indexA] / pd.decs[c.indexB];\\r\\n    // we can have some loss because of slippage\\r\\n    // so, let's increase input amount a bit\\r\\n    amountInA = amountInA * (100_000 + ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE) / 100_000;\\r\\n\\r\\n    // in practice the addition is required to pay ProfitToCover\\r\\n    // we assume, that total addition amount is small enough, much smaller then the total balance\\r\\n    // otherwise something is wrong: we are going to pay ProfitToCover, but we don't have enough amount on the balances.\\r\\n    require(balanceA_ > amountInA, AppErrors.NOT_ENOUGH_BALANCE);\\r\\n\\r\\n    (spentAmountIn, receivedAmountOut) = ConverterStrategyBaseLib.liquidate(\\r\\n      c.converterLiquidator.converter,\\r\\n      c.converterLiquidator.liquidator,\\r\\n      c.assetA,\\r\\n      c.assetB,\\r\\n      amountInA,\\r\\n      ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE,\\r\\n      c.thresholdA,\\r\\n      false\\r\\n    );\\r\\n  }\\r\\n\\r\\n  //endregion -------------------------------------------------- Little swap\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5a94be3da8739c31b91b0e4c6ca7860e96d052ef2d1975b63983e33eed33a8a8\",\"license\":\"BUSL-1.1\"},\"contracts/libs/ConverterEntryKinds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice Utils and constants related to entryKind param of ITetuConverter.findBorrowStrategy\\r\\nlibrary ConverterEntryKinds {\\r\\n  /// @notice Amount of collateral is fixed. Amount of borrow should be max possible.\\r\\n  uint constant public ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0 = 0;\\r\\n\\r\\n  /// @notice Split provided source amount S on two parts: C1 and C2 (C1 + C2 = S)\\r\\n  ///         C2 should be used as collateral to make a borrow B.\\r\\n  ///         Results amounts of C1 and B (both in terms of USD) must be in the given proportion\\r\\n  uint constant public ENTRY_KIND_EXACT_PROPORTION_1 = 1;\\r\\n\\r\\n  /// @notice Borrow given amount using min possible collateral\\r\\n  uint constant public ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2 = 2;\\r\\n\\r\\n  /// @notice Decode entryData, extract first uint - entry kind\\r\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\r\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\r\\n    if (entryData_.length == 0) {\\r\\n      return ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0;\\r\\n    }\\r\\n    return abi.decode(entryData_, (uint));\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x4f4332c8be1be5fd85fef7c06795fc19957b35a4f2e3735fdd89c0906ddc923b\",\"license\":\"BUSL-1.1\"},\"contracts/libs/IterationPlanLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"./AppErrors.sol\\\";\\r\\nimport \\\"./AppLib.sol\\\";\\r\\n\\r\\n/// @notice Support of withdraw iteration plans\\r\\nlibrary IterationPlanLib {\\r\\n\\r\\n//region ------------------------------------------------ Constants\\r\\n  /// @notice Swap collateral asset to get required amount-to-repay, then repay and get more collateral back.\\r\\n  ///         It tries to minimizes count of repay-operations.\\r\\n  ///         If there are no debts, swap leftovers to get required proportions of the asset.\\r\\n  ///         This mode is intended i.e. for \\\"withdraw all\\\"\\r\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\r\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                     The assets should be swapped to get following result proportions:\\r\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\r\\n  ///                     Pass type(uint).max to read proportions from the pool.\\r\\n  uint constant public PLAN_SWAP_REPAY = 0;\\r\\n\\r\\n  /// @notice Repay available amount-to-repay, swap all or part of collateral to borrowed-asset, make one repay if needed.\\r\\n  ///         Swap + second repay tries to make asset balances to proportions required by the pool.\\r\\n  ///         Proportions are read from pool through IPoolProportionsProvider(this) and re-read after swapping.\\r\\n  ///         This mode is intended i.e. for rebalancing debts using single iteration.\\r\\n  ///         (uint256, uint256, uint256) - (entry kind, propNotUnderlying18, required-amount-to-reduce-the-debt)\\r\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                     The assets should be swapped to get following result proportions:\\r\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\r\\n  ///                     Pass type(uint).max to read proportions from the pool.\\r\\n  uint constant public PLAN_REPAY_SWAP_REPAY = 1;\\r\\n\\r\\n  /// @notice Swap leftovers to required proportions, don't repay any debts\\r\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\r\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                     The assets should be swapped to get following result proportions:\\r\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\r\\n  ///                     Pass type(uint).max to read proportions from the pool.\\r\\n  uint constant public PLAN_SWAP_ONLY = 2;\\r\\n//endregion ------------------------------------------------ Constants\\r\\n\\r\\n//region ------------------------------------------------ Data types\\r\\n  /// @notice Set of parameters required to liquidation through aggregators\\r\\n  struct SwapRepayPlanParams {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n\\r\\n    /// @notice Assets used by depositor stored as following way: [underlying, not-underlying]\\r\\n    address[] tokens;\\r\\n\\r\\n    /// @notice Liquidation thresholds for the {tokens}\\r\\n    uint[] liquidationThresholds;\\r\\n\\r\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\r\\n    uint[] prices;\\r\\n    /// @notice 10**decimal for the assets\\r\\n    uint[] decs;\\r\\n\\r\\n    /// @notice Amounts that will be received on balance before execution of the plan.\\r\\n    uint[] balanceAdditions;\\r\\n\\r\\n    /// @notice Plan kind extracted from entry data, see {IterationPlanKinds}\\r\\n    uint planKind;\\r\\n\\r\\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n    ///         The leftovers should be swapped to get following result proportions of the assets:\\r\\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\r\\n    uint propNotUnderlying18;\\r\\n\\r\\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\\r\\n    bool usePoolProportions;\\r\\n\\r\\n    /// @notice \\\"required-amount-to-reduce-debt\\\" in the case of REPAY-SWAP-REPAY, zero in other cases\\r\\n    uint entryDataParam;\\r\\n  }\\r\\n\\r\\n  struct GetIterationPlanLocal {\\r\\n    /// @notice Underlying balance\\r\\n    uint assetBalance;\\r\\n    /// @notice Not-underlying balance\\r\\n    uint tokenBalance;\\r\\n\\r\\n    uint totalDebt;\\r\\n    uint totalCollateral;\\r\\n\\r\\n    uint debtReverse;\\r\\n    uint collateralReverse;\\r\\n\\r\\n    address asset;\\r\\n    address token;\\r\\n\\r\\n    bool swapLeftoversNeeded;\\r\\n  }\\r\\n\\r\\n  struct EstimateSwapAmountForRepaySwapRepayLocal {\\r\\n    uint x;\\r\\n    uint y;\\r\\n    uint bA1;\\r\\n    uint bB1;\\r\\n    uint alpha;\\r\\n    uint swapRatio;\\r\\n    uint aB3;\\r\\n    uint cA1;\\r\\n    uint cB1;\\r\\n    uint aA2;\\r\\n  }\\r\\n//endregion ------------------------------------------------ Data types\\r\\n\\r\\n  /// @notice Decode entryData, extract first uint - entry kind\\r\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\r\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\r\\n    if (entryData_.length == 0) {\\r\\n      return PLAN_SWAP_REPAY;\\r\\n    }\\r\\n    return abi.decode(entryData_, (uint));\\r\\n  }\\r\\n\\r\\n//region ------------------------------------------------ Build plan\\r\\n  /// @notice Build plan to make single iteration of withdraw according to the selected plan\\r\\n  ///         The goal is to withdraw {requestedAmount} and receive {asset}:{token} in proper proportions on the balance\\r\\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\\r\\n  /// @param tokens List of the pool tokens. One of them is underlying and one of then is not-underlying\\r\\n  ///               that we are going to withdraw\\r\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}. If amount is less then the threshold,\\r\\n  ///                              we cannot swap it.\\r\\n  /// @param prices Prices of the {tokens}, decimals 18, [$/token]\\r\\n  /// @param decs 10**decimal for each token of the {tokens}\\r\\n  /// @param balanceAdditions Amounts that will be added to the current balances of the {tokens}\\r\\n  ///                         to the moment of the plan execution\\r\\n  /// @param packedData Several values packed to fixed-size array (to reduce number of params)\\r\\n  ///    0: usePoolProportions: 1 - read proportions from the pool through IPoolProportionsProvider(this)\\r\\n  ///    1: planKind: selected plan, one of PLAN_XXX\\r\\n  ///    2: propNotUnderlying18: value of not-underlying proportion [0..1e18] if usePoolProportions == 0\\r\\n  ///    3: requestedBalance: total amount that should be withdrawn, it can be type(uint).max\\r\\n  ///    4: indexAsset: index of the underlying in {tokens} array\\r\\n  ///    5: indexToken: index of the token in {tokens} array. We are going to withdraw the token and convert it to the asset\\r\\n  ///    6: entryDataParam: required-amount-to-reduce-debt in REPAY-SWAP-REPAY case; zero in other cases\\r\\n  function buildIterationPlan(\\r\\n    address[2] memory converterLiquidator,\\r\\n    address[] memory tokens,\\r\\n    uint[] memory liquidationThresholds,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    uint[] memory balanceAdditions,\\r\\n    uint[7] memory packedData\\r\\n  ) external returns (\\r\\n    uint indexToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexToRepayPlus1\\r\\n  ) {\\r\\n    return _buildIterationPlan(\\r\\n      SwapRepayPlanParams({\\r\\n        converter: ITetuConverter(converterLiquidator[0]),\\r\\n        liquidator: ITetuLiquidator(converterLiquidator[1]),\\r\\n        tokens: tokens,\\r\\n        liquidationThresholds: liquidationThresholds,\\r\\n        prices: prices,\\r\\n        decs: decs,\\r\\n        balanceAdditions: balanceAdditions,\\r\\n        planKind: packedData[1],\\r\\n        propNotUnderlying18: packedData[2],\\r\\n        usePoolProportions: packedData[0] != 0,\\r\\n        entryDataParam: packedData[6]\\r\\n      }),\\r\\n      packedData[3],\\r\\n      packedData[4],\\r\\n      packedData[5]\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Generate plan for next withdraw iteration. We can do only one swap per iteration.\\r\\n  ///         In general, we cam make 1) single swap (direct or reverse) and 2) repay\\r\\n  ///         Swap is required to get required repay-amount OR to swap leftovers on final iteration.\\r\\n  /// @param requestedBalance Amount of underlying that we need to have on balance after executing the plan.\\r\\n  /// @param indexAsset Index of the underlying in {p.tokens} array\\r\\n  /// @param indexToken Index of the not-underlying in {p.tokens} array\\r\\n  /// @return indexToSwapPlus1 1-based index of the token to be swapped; 0 means swap is not required.\\r\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap\\r\\n  /// @return indexToRepayPlus1 1-based index of the token that should be used to repay borrow in converter.\\r\\n  ///                            0 - no repay is required - it means that this is a last step with swapping leftovers.\\r\\n  function _buildIterationPlan(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint requestedBalance,\\r\\n    uint indexAsset,\\r\\n    uint indexToken\\r\\n  ) internal returns (\\r\\n    uint indexToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexToRepayPlus1\\r\\n  ) {\\r\\n    GetIterationPlanLocal memory v;\\r\\n    v.asset = p.tokens[indexAsset];\\r\\n    v.token = p.tokens[indexToken];\\r\\n\\r\\n    v.assetBalance = IERC20(v.asset).balanceOf(address(this)) + p.balanceAdditions[indexAsset];\\r\\n    v.tokenBalance = IERC20(p.tokens[indexToken]).balanceOf(address(this)) + p.balanceAdditions[indexToken];\\r\\n\\r\\n    if (p.planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\\r\\n      v.swapLeftoversNeeded = true;\\r\\n    } else {\\r\\n      uint requestedAmount = requestedBalance == type(uint).max\\r\\n        ? type(uint).max\\r\\n        : AppLib.sub0(requestedBalance, v.assetBalance);\\r\\n\\r\\n      if (requestedAmount < p.liquidationThresholds[indexAsset]) {\\r\\n        // we don't need to repay any debts anymore, but we should swap leftovers\\r\\n        v.swapLeftoversNeeded = true;\\r\\n      } else {\\r\\n        // we need to increase balance on the following amount: requestedAmount - v.balance;\\r\\n        // we can have two possible borrows:\\r\\n        // 1) direct (p.tokens[INDEX_ASSET] => tokens[i]) and 2) reverse (tokens[i] => p.tokens[INDEX_ASSET])\\r\\n        // normally we can have only one of them, not both..\\r\\n        // but better to take into account possibility to have two debts simultaneously\\r\\n\\r\\n        // reverse debt\\r\\n        (v.debtReverse, v.collateralReverse) = p.converter.getDebtAmountCurrent(address(this), v.token, v.asset, true);\\r\\n        if (v.debtReverse < AppLib.DUST_AMOUNT_TOKENS) { // there is reverse debt or the reverse debt is dust debt\\r\\n          // direct debt\\r\\n          (v.totalDebt, v.totalCollateral) = p.converter.getDebtAmountCurrent(address(this), v.asset, v.token, true);\\r\\n\\r\\n          if (v.totalDebt < AppLib.DUST_AMOUNT_TOKENS) { // there is direct debt or the direct debt is dust debt\\r\\n            // This is final iteration - we need to swap leftovers and get amounts on balance in proper proportions.\\r\\n            // The leftovers should be swapped to get following result proportions of the assets:\\r\\n            //      underlying : not-underlying === 1e18 - propNotUnderlying18 : propNotUnderlying18\\r\\n            v.swapLeftoversNeeded = true;\\r\\n          } else {\\r\\n            // repay direct debt\\r\\n            if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\r\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\r\\n                p,\\r\\n                [v.assetBalance, v.tokenBalance],\\r\\n                [indexAsset, indexToken],\\r\\n                p.propNotUnderlying18,\\r\\n                [v.totalCollateral, v.totalDebt],\\r\\n                p.entryDataParam\\r\\n              );\\r\\n            } else {\\r\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\r\\n                requestedAmount,\\r\\n                p,\\r\\n                v.totalCollateral,\\r\\n                v.totalDebt,\\r\\n                indexAsset,\\r\\n                indexToken,\\r\\n                v.assetBalance,\\r\\n                v.tokenBalance\\r\\n              );\\r\\n            }\\r\\n          }\\r\\n        } else {\\r\\n          // repay reverse debt\\r\\n          if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\r\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\r\\n              p,\\r\\n              [v.tokenBalance, v.assetBalance],\\r\\n              [indexToken, indexAsset],\\r\\n              1e18 - p.propNotUnderlying18,\\r\\n              [v.collateralReverse, v.debtReverse],\\r\\n              p.entryDataParam\\r\\n            );\\r\\n          } else {\\r\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\r\\n              requestedAmount == type(uint).max\\r\\n                ? type(uint).max\\r\\n                : requestedAmount * p.prices[indexAsset] * p.decs[indexToken] / p.prices[indexToken] / p.decs[indexAsset],\\r\\n              p,\\r\\n              v.collateralReverse,\\r\\n              v.debtReverse,\\r\\n              indexToken,\\r\\n              indexAsset,\\r\\n              v.tokenBalance,\\r\\n              v.assetBalance\\r\\n            );\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (v.swapLeftoversNeeded) {\\r\\n      (indexToSwapPlus1, amountToSwap) = _buildPlanForLeftovers(p, v.assetBalance, v.tokenBalance, indexAsset, indexToken, p.propNotUnderlying18);\\r\\n    }\\r\\n\\r\\n    return (indexToSwapPlus1, amountToSwap, indexToRepayPlus1);\\r\\n  }\\r\\n\\r\\n  /// @notice Repay B, get collateral A, then swap A => B, [make one more repay B] => get A:B in required proportions\\r\\n  /// @param balancesAB [balanceA, balanceB]\\r\\n  /// @param idxAB [indexA, indexB]\\r\\n  /// @param totalAB [totalCollateralA, totalBorrowB]\\r\\n  /// @param requiredAmountToReduceDebt If not zero: we are going to make repay-swap-repay to reduce total\\r\\n  ///        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce\\r\\n  ///        the amount of debt by the given amount.\\r\\n  function _buildPlanRepaySwapRepay(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint[2] memory balancesAB,\\r\\n    uint[2] memory idxAB,\\r\\n    uint propB,\\r\\n    uint[2] memory totalAB,\\r\\n    uint requiredAmountToReduceDebt\\r\\n  ) internal returns (\\r\\n    uint indexToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexToRepayPlus1\\r\\n  ) {\\r\\n    // use all available tokenB to repay debt and receive as much as possible tokenA\\r\\n    uint amountToRepay = Math.min(balancesAB[1], totalAB[1]);\\r\\n\\r\\n    uint collateralAmount;\\r\\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n      uint swappedAmountOut;\\r\\n      //\\r\\n      (collateralAmount, swappedAmountOut) = p.converter.quoteRepay(address(this), p.tokens[idxAB[0]], p.tokens[idxAB[1]], amountToRepay);\\r\\n      if (collateralAmount > swappedAmountOut) { // SCB-789\\r\\n        collateralAmount -= swappedAmountOut;\\r\\n      }\\r\\n    } else {\\r\\n      amountToRepay = 0;\\r\\n    }\\r\\n\\r\\n    // swap A to B: full or partial\\r\\n    amountToSwap = estimateSwapAmountForRepaySwapRepay(\\r\\n      p,\\r\\n      balancesAB[0],\\r\\n      balancesAB[1],\\r\\n      idxAB[0],\\r\\n      idxAB[1],\\r\\n      propB,\\r\\n      totalAB[0],\\r\\n      totalAB[1],\\r\\n      collateralAmount,\\r\\n      amountToRepay\\r\\n    );\\r\\n\\r\\n    if (requiredAmountToReduceDebt != 0) {\\r\\n      // probably it worth to increase amount to swap?\\r\\n      uint requiredAmountToSwap = requiredAmountToReduceDebt * p.prices[idxAB[1]] * p.decs[idxAB[0]] / p.prices[idxAB[0]] / p.decs[idxAB[1]];\\r\\n      amountToSwap = Math.max(amountToSwap, requiredAmountToSwap);\\r\\n      amountToSwap = Math.min(amountToSwap, balancesAB[0] + collateralAmount);\\r\\n    }\\r\\n\\r\\n    return (idxAB[0] + 1, amountToSwap, idxAB[1] + 1);\\r\\n  }\\r\\n\\r\\n  /// @notice Estimate swap amount for iteration \\\"repay-swap-repay\\\"\\r\\n  ///         The iteration should give us amounts of assets in required proportions.\\r\\n  ///         There are two cases here: full swap and partial swap. Second repay is not required if the swap is partial.\\r\\n  /// @param collateralA Estimated value of collateral A received after repay balanceB\\r\\n  /// @return amount of token A to be swapped\\r\\n  function estimateSwapAmountForRepaySwapRepay(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint balanceA,\\r\\n    uint balanceB,\\r\\n    uint indexA,\\r\\n    uint indexB,\\r\\n    uint propB,\\r\\n    uint totalCollateralA,\\r\\n    uint totalBorrowB,\\r\\n    uint collateralA,\\r\\n    uint amountToRepayB\\r\\n  ) internal pure returns(uint) {\\r\\n    // N - number of the state\\r\\n    // bAN, bBN - balances of A and B; aAN, aBN - amounts of A and B; cAN, cBN - collateral/borrow amounts of A/B\\r\\n    // alpha ~ cAN/cBN - estimated ratio of collateral/borrow\\r\\n    // s = swap ratio, aA is swapped to aB, so aA = s * aB\\r\\n    // g = split ratio, bA1 is divided on two parts: bA1 * gamma, bA1 * (1 - gamma). First part is swapped.\\r\\n    // X = proportion of A, Y = proportion of B\\r\\n\\r\\n    // Formulas\\r\\n    // aB3 = (x * bB2 - y * bA2) / (alpha * y + x)\\r\\n    // gamma = (y * bA1 - x * bB1) / (bA1 * (x * s + y))\\r\\n\\r\\n    // There are following stages:\\r\\n    // 0. init (we have at least not zero amount of B and not zero debt of B)\\r\\n    // 1. repay 1 (repay all available amount of B OR all available debt)\\r\\n    // 2. swap (swap A fully or partially to B)\\r\\n    // 3. repay 2 (optional: we need this stage if full swap produces amount of B that is <= available debt)\\r\\n    // 4. final (we have assets in right proportion on the balance)\\r\\n    EstimateSwapAmountForRepaySwapRepayLocal memory v;\\r\\n    v.x = 1e18 - propB;\\r\\n    v.y = propB;\\r\\n\\r\\n// 1. repay 1\\r\\n    // convert amounts A, amounts B to cost A, cost B in USD\\r\\n    v.bA1 = (balanceA + collateralA) * p.prices[indexA] / p.decs[indexA];\\r\\n    v.bB1 = (balanceB - amountToRepayB) * p.prices[indexB] / p.decs[indexB];\\r\\n    v.cB1 = (totalBorrowB - amountToRepayB) * p.prices[indexB] / p.decs[indexB];\\r\\n    v.alpha = 1e18 * totalCollateralA * p.prices[indexA] * p.decs[indexB]\\r\\n      / p.decs[indexA] / p.prices[indexB] / totalBorrowB; // (!) approx estimation\\r\\n\\r\\n// 2. full swap\\r\\n    v.aA2 = v.bA1;\\r\\n    v.swapRatio = 1e18; // we assume swap ratio 1:1\\r\\n\\r\\n// 3. repay 2\\r\\n    // aB3 = (x * bB2 - Y * bA2) / (alpha * y + x)\\r\\n    v.aB3 = (\\r\\n      v.x * (v.bB1 + v.aA2 * v.swapRatio / 1e18)    // bB2 = v.bB1 + v.aA2 * v.s / 1e18\\r\\n      - v.y * (v.bA1 - v.aA2)                       // bA2 = v.bA1 - v.aA2;\\r\\n    ) / (v.y * v.alpha / 1e18 + v.x);\\r\\n\\r\\n    if (v.aB3 > v.cB1) {\\r\\n      // there is not enough debt to make second repay\\r\\n      // we need to make partial swap and receive assets in right proportions in result\\r\\n      // v.gamma = 1e18 * (v.y * v.bA1 - v.x * v.bB1) / (v.bA1 * (v.x * v.s / 1e18 + v.y));\\r\\n      v.aA2 = v.bA1 * (v.y * v.bA1 - v.x * v.bB1) / (v.bA1 * (v.x * v.swapRatio / 1e18 + v.y));\\r\\n    }\\r\\n\\r\\n    return v.aA2 * p.decs[indexA] / p.prices[indexA];\\r\\n  }\\r\\n\\r\\n  /// @notice Prepare a plan to swap leftovers to required proportion\\r\\n  /// @param balanceA Balance of token A, i.e. underlying\\r\\n  /// @param balanceB Balance of token B, i.e. not-underlying\\r\\n  /// @param indexA Index of the token A, i.e. underlying, in {p.prices} and {p.decs}\\r\\n  /// @param indexB Index of the token B, i.e. not-underlying, in {p.prices} and {p.decs}\\r\\n  /// @param propB Required proportion of TokenB [0..1e18]. Proportion of token A is (1e18-propB)\\r\\n  /// @return indexTokenToSwapPlus1 Index of the token to be swapped. 0 - no swap is required\\r\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap is required\\r\\n  function _buildPlanForLeftovers(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint balanceA,\\r\\n    uint balanceB,\\r\\n    uint indexA,\\r\\n    uint indexB,\\r\\n    uint propB\\r\\n  ) internal pure returns (\\r\\n    uint indexTokenToSwapPlus1,\\r\\n    uint amountToSwap\\r\\n  ) {\\r\\n    (uint targetA, uint targetB) = _getTargetAmounts(p.prices, p.decs, balanceA, balanceB, propB, indexA, indexB);\\r\\n    if (balanceA < targetA) {\\r\\n      // we need to swap not-underlying to underlying\\r\\n      if (balanceB - targetB > p.liquidationThresholds[indexB]) {\\r\\n        amountToSwap = balanceB - targetB;\\r\\n        indexTokenToSwapPlus1 = indexB + 1;\\r\\n      }\\r\\n    } else {\\r\\n      // we need to swap underlying to not-underlying\\r\\n      if (balanceA - targetA > p.liquidationThresholds[indexA]) {\\r\\n        amountToSwap = balanceA - targetA;\\r\\n        indexTokenToSwapPlus1 = indexA + 1;\\r\\n      }\\r\\n    }\\r\\n    return (indexTokenToSwapPlus1, amountToSwap);\\r\\n  }\\r\\n\\r\\n  /// @notice Prepare a plan to swap some amount of collateral to get required repay-amount and make repaying\\r\\n  ///         1) Sell collateral-asset to get missed amount-to-repay 2) make repay and get more collateral back\\r\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount.\\r\\n  /// @param totalCollateral Total amount of collateral used in the borrow\\r\\n  /// @param totalDebt Total amount of debt that should be repaid to receive {totalCollateral}\\r\\n  /// @param indexCollateral Index of collateral asset in {p.prices}, {p.decs}\\r\\n  /// @param indexBorrow Index of borrow asset in {p.prices}, {p.decs}\\r\\n  /// @param balanceCollateral Current balance of the collateral asset\\r\\n  /// @param balanceBorrow Current balance of the borrowed asset\\r\\n  /// @param indexTokenToSwapPlus1 1-based index of the token to be swapped. Swap of amount of collateral asset can be required\\r\\n  ///                              to receive missed amount-to-repay. 0 - no swap is required\\r\\n  /// @param amountToSwap Amount to be swapped. 0 - no swap is required\\r\\n  /// @param indexRepayTokenPlus1 1-based index of the token to be repaied. 0 - no repaying is required\\r\\n  function _buildPlanForSellAndRepay(\\r\\n    uint requestedAmount,\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint totalCollateral,\\r\\n    uint totalDebt,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow,\\r\\n    uint balanceCollateral,\\r\\n    uint balanceBorrow\\r\\n  ) internal pure returns (\\r\\n    uint indexTokenToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexRepayTokenPlus1\\r\\n  ) {\\r\\n    // what amount of collateral we should sell to get required amount-to-pay to pay the debt\\r\\n    uint toSell = _getAmountToSell(\\r\\n      requestedAmount,\\r\\n      totalDebt,\\r\\n      totalCollateral,\\r\\n      p.prices,\\r\\n      p.decs,\\r\\n      indexCollateral,\\r\\n      indexBorrow,\\r\\n      balanceBorrow\\r\\n    );\\r\\n\\r\\n    // convert {toSell} amount of underlying to token\\r\\n    if (toSell != 0 && balanceCollateral != 0) {\\r\\n      toSell = Math.min(toSell, balanceCollateral);\\r\\n      uint threshold = p.liquidationThresholds[indexCollateral];\\r\\n      if (toSell > threshold) {\\r\\n        amountToSwap = toSell;\\r\\n        indexTokenToSwapPlus1 = indexCollateral + 1;\\r\\n      } else {\\r\\n        // we need to sell amount less than the threshold, it's not allowed\\r\\n        // but it's dangerous to just ignore the selling because there is a chance to have error 35\\r\\n        // (There is a debt $3.29, we make repay $3.27 => error 35)\\r\\n        // it would be safer to sell a bit more amount if it's possible\\r\\n        if (balanceCollateral >= threshold + 1) {\\r\\n          amountToSwap = threshold + 1;\\r\\n          indexTokenToSwapPlus1 = indexCollateral + 1;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (indexTokenToSwapPlus1, amountToSwap, indexBorrow + 1);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate what balances of underlying and not-underlying we need to fit {propNotUnderlying18}\\r\\n  /// @param prices Prices of underlying and not underlying\\r\\n  /// @param decs 10**decimals for underlying and not underlying\\r\\n  /// @param assetBalance Current balance of underlying\\r\\n  /// @param tokenBalance Current balance of not-underlying\\r\\n  /// @param propNotUnderlying18 Required proportion of not-underlying [0..1e18]\\r\\n  ///                            Proportion of underlying would be (1e18 - propNotUnderlying18)\\r\\n  /// @param targetAssets What result balance of underlying is required to fit to required proportions\\r\\n  /// @param targetTokens What result balance of not-underlying is required to fit to required proportions\\r\\n  function _getTargetAmounts(\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    uint assetBalance,\\r\\n    uint tokenBalance,\\r\\n    uint propNotUnderlying18,\\r\\n    uint indexAsset,\\r\\n    uint indexToken\\r\\n  ) internal pure returns (\\r\\n    uint targetAssets,\\r\\n    uint targetTokens\\r\\n  ) {\\r\\n    uint costAssets = assetBalance * prices[indexAsset] / decs[indexAsset];\\r\\n    uint costTokens = tokenBalance * prices[indexToken] / decs[indexToken];\\r\\n    targetTokens = propNotUnderlying18 == 0\\r\\n      ? 0\\r\\n      : ((costAssets + costTokens) * propNotUnderlying18 / 1e18);\\r\\n    targetAssets = ((costAssets + costTokens) - targetTokens) * decs[indexAsset] / prices[indexAsset];\\r\\n    targetTokens = targetTokens * decs[indexToken] / prices[indexToken];\\r\\n  }\\r\\n\\r\\n  /// @notice What amount of collateral should be sold to pay the debt and receive {requestedAmount}\\r\\n  /// @dev It doesn't allow to sell more than the amount of total debt in the borrow\\r\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount\\r\\n  /// @param totalDebt Total debt of the borrow in terms of borrow asset\\r\\n  /// @param totalCollateral Total collateral of the borrow in terms of collateral asset\\r\\n  /// @param prices Cost of $1 in terms of the asset, decimals 18\\r\\n  /// @param decs 10**decimals for each asset\\r\\n  /// @param indexCollateral Index of the collateral asset in {prices} and {decs}\\r\\n  /// @param indexBorrowAsset Index of the borrow asset in {prices} and {decs}\\r\\n  /// @param balanceBorrowAsset Available balance of the borrow asset, it will be used to cover the debt\\r\\n  /// @return amountOut Amount of collateral-asset that should be sold\\r\\n  function _getAmountToSell(\\r\\n    uint requestedAmount,\\r\\n    uint totalDebt,\\r\\n    uint totalCollateral,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrowAsset,\\r\\n    uint balanceBorrowAsset\\r\\n  ) internal pure returns (\\r\\n    uint amountOut\\r\\n  ) {\\r\\n    if (totalDebt != 0) {\\r\\n      if (balanceBorrowAsset != 0) {\\r\\n        // there is some borrow asset on balance\\r\\n        // it will be used to cover the debt\\r\\n        // let's reduce the size of totalDebt/Collateral to exclude balanceBorrowAsset\\r\\n        uint sub = Math.min(balanceBorrowAsset, totalDebt);\\r\\n        totalCollateral -= totalCollateral * sub / totalDebt;\\r\\n        totalDebt -= sub;\\r\\n      }\\r\\n\\r\\n      // for definiteness: usdc - collateral asset, dai - borrow asset\\r\\n      // Pc = price of the USDC, Pb = price of the DAI, alpha = Pc / Pb [DAI / USDC]\\r\\n      // S [USDC] - amount to sell, R [DAI] = alpha * S - amount to repay\\r\\n      // After repaying R we get: alpha * S * C / R\\r\\n      // Balance should be increased on: requestedAmount = alpha * S * C / R - S\\r\\n      // So, we should sell: S = requestedAmount / (alpha * C / R - 1))\\r\\n      // We can lost some amount on liquidation of S => R, so we need to use some gap = {GAP_AMOUNT_TO_SELL}\\r\\n      // Same formula: S * h = S + requestedAmount, where h = health factor => s = requestedAmount / (h - 1)\\r\\n      // h = alpha * C / R\\r\\n      uint alpha18 = prices[indexCollateral] * decs[indexBorrowAsset] * 1e18\\r\\n        / prices[indexBorrowAsset] / decs[indexCollateral];\\r\\n\\r\\n      // if totalCollateral is zero (liquidation happens) we will have zero amount (the debt shouldn't be paid)\\r\\n      amountOut = totalDebt != 0 && alpha18 * totalCollateral / totalDebt > 1e18\\r\\n        ? Math.min(requestedAmount, totalCollateral) * 1e18 / (alpha18 * totalCollateral / totalDebt - 1e18)\\r\\n        : 0;\\r\\n\\r\\n      if (amountOut != 0) {\\r\\n        // we shouldn't try to sell amount greater than amount of totalDebt in terms of collateral asset\\r\\n        // but we always asks +1% because liquidation results can be different a bit from expected\\r\\n        amountOut = (AppLib.GAP_CONVERSION + AppLib.DENOMINATOR) * Math.min(amountOut, totalDebt * 1e18 / alpha18) / AppLib.DENOMINATOR;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return amountOut;\\r\\n  }\\r\\n//endregion ------------------------------------------------ Build plan\\r\\n}\\r\\n\",\"keccak256\":\"0x7f4bcb29e74bf70a8a6e786635b689bb7457a8dc41d0ce42c63bd4e5c34616ef\",\"license\":\"BUSL-1.1\"},\"contracts/libs/TokenAmountsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./AppErrors.sol\\\";\\r\\n\\r\\n/// @title Library for clearing / joining token addresses & amounts arrays\\r\\n/// @author bogdoslav\\r\\nlibrary TokenAmountsLib {\\r\\n  /// @notice Version of the contract\\r\\n  /// @dev Should be incremented when contract changed\\r\\n  string internal constant TOKEN_AMOUNTS_LIB_VERSION = \\\"1.0.1\\\";\\r\\n\\r\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\r\\n    unchecked {\\r\\n      return i + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function filterZeroAmounts(\\r\\n    address[] memory tokens,\\r\\n    uint[] memory amounts\\r\\n  ) internal pure returns (\\r\\n    address[] memory t,\\r\\n    uint[] memory a\\r\\n  ) {\\r\\n    require(tokens.length == amounts.length, AppErrors.INCORRECT_LENGTHS);\\r\\n    uint len2 = 0;\\r\\n    uint len = tokens.length;\\r\\n    for (uint i = 0; i < len; i++) {\\r\\n      if (amounts[i] != 0) len2++;\\r\\n    }\\r\\n\\r\\n    t = new address[](len2);\\r\\n    a = new uint[](len2);\\r\\n\\r\\n    uint j = 0;\\r\\n    for (uint i = 0; i < len; i++) {\\r\\n      uint amount = amounts[i];\\r\\n      if (amount != 0) {\\r\\n        t[j] = tokens[i];\\r\\n        a[j] = amount;\\r\\n        j++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice unites three arrays to single array without duplicates, amounts are sum, zero amounts are allowed\\r\\n  function combineArrays(\\r\\n    address[] memory tokens0,\\r\\n    uint[] memory amounts0,\\r\\n    address[] memory tokens1,\\r\\n    uint[] memory amounts1,\\r\\n    address[] memory tokens2,\\r\\n    uint[] memory amounts2\\r\\n  ) internal pure returns (\\r\\n    address[] memory allTokens,\\r\\n    uint[] memory allAmounts\\r\\n  ) {\\r\\n    uint[] memory lens = new uint[](3);\\r\\n    lens[0] = tokens0.length;\\r\\n    lens[1] = tokens1.length;\\r\\n    lens[2] = tokens2.length;\\r\\n\\r\\n    require(\\r\\n      lens[0] == amounts0.length && lens[1] == amounts1.length && lens[2] == amounts2.length,\\r\\n      AppErrors.INCORRECT_LENGTHS\\r\\n    );\\r\\n\\r\\n    uint maxLength = lens[0] + lens[1] + lens[2];\\r\\n    address[] memory tokensOut = new address[](maxLength);\\r\\n    uint[] memory amountsOut = new uint[](maxLength);\\r\\n    uint unitedLength;\\r\\n\\r\\n    for (uint step; step < 3; ++step) {\\r\\n      uint[] memory amounts = step == 0\\r\\n        ? amounts0\\r\\n        : (step == 1\\r\\n          ? amounts1\\r\\n          : amounts2);\\r\\n      address[] memory tokens = step == 0\\r\\n        ? tokens0\\r\\n        : (step == 1\\r\\n          ? tokens1\\r\\n          : tokens2);\\r\\n      for (uint i1 = 0; i1 < lens[step]; i1++) {\\r\\n        uint amount1 = amounts[i1];\\r\\n        address token1 = tokens[i1];\\r\\n        bool united = false;\\r\\n\\r\\n        for (uint i = 0; i < unitedLength; i++) {\\r\\n          if (token1 == tokensOut[i]) {\\r\\n            amountsOut[i] += amount1;\\r\\n            united = true;\\r\\n            break;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        if (!united) {\\r\\n          tokensOut[unitedLength] = token1;\\r\\n          amountsOut[unitedLength] = amount1;\\r\\n          unitedLength++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // copy united tokens to result array\\r\\n    allTokens = new address[](unitedLength);\\r\\n    allAmounts = new uint[](unitedLength);\\r\\n    for (uint i; i < unitedLength; i++) {\\r\\n      allTokens[i] = tokensOut[i];\\r\\n      allAmounts[i] = amountsOut[i];\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3adb8a53441362b47b3bf5c0c7181f7c1652de7dde3df4fb765e8484447d074\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/ConverterStrategyBaseLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"../libs/AppErrors.sol\\\";\\r\\nimport \\\"../libs/AppLib.sol\\\";\\r\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\r\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\r\\nimport \\\"../libs/IterationPlanLib.sol\\\";\\r\\nimport \\\"../interfaces/IConverterStrategyBase.sol\\\";\\r\\n\\r\\nlibrary ConverterStrategyBaseLib {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n//region--------------------------------------------------- Data types\\r\\n\\r\\n  /// @notice Local vars for {_recycle}, workaround for stack too deep\\r\\n  struct RecycleLocalParams {\\r\\n    /// @notice Compound amount + Performance amount\\r\\n    uint amountCP;\\r\\n    /// @notice Amount to compound\\r\\n    uint amountC;\\r\\n    /// @notice Amount to send to performance and insurance\\r\\n    uint amountP;\\r\\n    /// @notice Amount to forwarder + amount to compound\\r\\n    uint amountFC;\\r\\n    address rewardToken;\\r\\n    uint len;\\r\\n    uint receivedAmountOut;\\r\\n  }\\r\\n\\r\\n  struct OpenPositionLocal {\\r\\n    uint entryKind;\\r\\n    address[] converters;\\r\\n    uint[] collateralsRequired;\\r\\n    uint[] amountsToBorrow;\\r\\n    uint collateral;\\r\\n    uint amountToBorrow;\\r\\n  }\\r\\n\\r\\n  struct OpenPositionEntryKind1Local {\\r\\n    address[] converters;\\r\\n    uint[] collateralsRequired;\\r\\n    uint[] amountsToBorrow;\\r\\n    uint collateral;\\r\\n    uint amountToBorrow;\\r\\n    uint c1;\\r\\n    uint c3;\\r\\n    uint alpha;\\r\\n  }\\r\\n\\r\\n  struct SwapToGetAmountLocal {\\r\\n    uint len;\\r\\n    uint[] prices;\\r\\n    uint[] decs;\\r\\n  }\\r\\n\\r\\n  struct ConvertAfterWithdrawLocal {\\r\\n    address asset;\\r\\n    uint spent;\\r\\n    uint received;\\r\\n    uint balance;\\r\\n    uint balanceBefore;\\r\\n    uint len;\\r\\n  }\\r\\n\\r\\n  struct SwapToGivenAmountInputParams {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n    uint targetAmount;\\r\\n    address[] tokens;\\r\\n    uint[] amounts;\\r\\n    /// @notice liquidationThresholds for the {tokens}\\r\\n    uint[] liquidationThresholds;\\r\\n    uint indexTargetAsset;\\r\\n    address underlying;\\r\\n    /// @notice Allow to swap more then required (i.e. 1_000 => +1%)\\r\\n    ///         to avoid additional swap if the swap return amount a bit less than we expected\\r\\n    uint overswap;\\r\\n  }\\r\\n\\r\\n  struct SwapToGivenAmountLocal {\\r\\n    uint len;\\r\\n    uint[] availableAmounts;\\r\\n    uint i;\\r\\n  }\\r\\n\\r\\n  struct CloseDebtsForRequiredAmountLocal {\\r\\n    address asset;\\r\\n    uint balanceAsset;\\r\\n    uint balanceToken;\\r\\n\\r\\n    uint newBalanceAsset;\\r\\n    uint newBalanceToken;\\r\\n\\r\\n    uint idxToSwap1;\\r\\n    uint amountToSwap;\\r\\n    uint idxToRepay1;\\r\\n\\r\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\r\\n    uint[] prices;\\r\\n    /// @notice 10**decimal for the assets\\r\\n    uint[] decs;\\r\\n\\r\\n    /// @notice Amounts that will be received on balance before execution of the plan.\\r\\n    uint[] balanceAdditions;\\r\\n\\r\\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n    ///         The leftovers should be swapped to get following result proportions of the assets:\\r\\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\r\\n    uint propNotUnderlying18;\\r\\n\\r\\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\\r\\n    bool usePoolProportions;\\r\\n\\r\\n    bool exitLoop;\\r\\n  }\\r\\n\\r\\n  struct DataSetLocal {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n    /// @notice Tokens received from {_depositorPoolAssets}\\r\\n    address[] tokens;\\r\\n    /// @notice Index of the main asset in {tokens}\\r\\n    uint indexAsset;\\r\\n    /// @notice Length of {tokens}\\r\\n    uint len;\\r\\n  }\\r\\n\\r\\n  struct RecycleLocal {\\r\\n    address asset;\\r\\n    uint compoundRatio;\\r\\n    uint performanceFee;\\r\\n    /// @notice // total amount for the performance receiver and insurance\\r\\n    uint amountPerf;\\r\\n    uint toPerf;\\r\\n    uint toInsurance;\\r\\n    uint[] amountsToForward;\\r\\n    uint[] thresholds;\\r\\n    int debtToInsuranceCurrent;\\r\\n    int debtToInsuranceUpdated;\\r\\n    address splitter;\\r\\n  }\\r\\n\\r\\n  /// @notice Input params for _recycle\\r\\n  struct RecycleParams {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n    address splitter;\\r\\n\\r\\n    /// @notice Underlying asset\\r\\n    address asset;\\r\\n    /// @notice Compound ration in the range [0...COMPOUND_DENOMINATOR]\\r\\n    uint compoundRatio;\\r\\n    /// @notice tokens received from {_depositorPoolAssets}\\r\\n    address[] tokens;\\r\\n    /// @notice Liquidation thresholds for rewards tokens\\r\\n    uint[] thresholds;\\r\\n    /// @notice Full list of reward tokens received from tetuConverter and depositor\\r\\n    address[] rewardTokens;\\r\\n    /// @notice Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\r\\n    uint[] rewardAmounts;\\r\\n    /// @notice Performance fee in the range [0...FEE_DENOMINATOR]\\r\\n    uint performanceFee;\\r\\n    /// @notice Current debt to the insurance [in underlying]\\r\\n    int debtToInsurance;\\r\\n    /// @notice Liquidation threshold for the {asset}\\r\\n    uint assetThreshold;\\r\\n  }\\r\\n//endregion--------------------------------------------------- Data types\\r\\n\\r\\n//region--------------------------------------------------- Constants\\r\\n\\r\\n  /// @notice approx one month for average block time 2 sec\\r\\n  uint internal constant _LOAN_PERIOD_IN_BLOCKS = 30 days / 2;\\r\\n  uint internal constant _REWARD_LIQUIDATION_SLIPPAGE = 5_000; // 5%\\r\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\r\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\r\\n  uint internal constant PRICE_IMPACT_TOLERANCE = 300;\\r\\n  /// @notice borrow/collateral amount cannot be less than given number of tokens\\r\\n  uint internal constant DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD = 10;\\r\\n  /// @notice Allow to swap more then required (i.e. 1_000 => +1%) inside {swapToGivenAmount}\\r\\n  ///         to avoid additional swap if the swap will return amount a bit less than we expected\\r\\n  uint internal constant OVERSWAP = PRICE_IMPACT_TOLERANCE + _ASSET_LIQUIDATION_SLIPPAGE;\\r\\n  /// @notice During SWAP-REPAY cycle we can receive requested amount after SWAP, so, following REPAY will be skipped.\\r\\n  ///         But we should prevent situation \\\"zero balance, not zero debts\\\".\\r\\n  ///         So, it worth to request amount higher (on the given gap) than it's really requested.\\r\\n  uint internal constant REQUESTED_BALANCE_GAP = 5_000; // 5%\\r\\n//endregion--------------------------------------------------- Constants\\r\\n\\r\\n//region--------------------------------------------------- Events\\r\\n  /// @notice A borrow was made\\r\\n  event OpenPosition(\\r\\n    address converter,\\r\\n    address collateralAsset,\\r\\n    uint collateralAmount,\\r\\n    address borrowAsset,\\r\\n    uint borrowedAmount,\\r\\n    address recepient\\r\\n  );\\r\\n\\r\\n  /// @notice Some borrow(s) was/were repaid\\r\\n  event ClosePosition(\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountRepay,\\r\\n    address recepient,\\r\\n    uint returnedAssetAmountOut,\\r\\n    uint returnedBorrowAmountOut\\r\\n  );\\r\\n\\r\\n  /// @notice A liquidation was made\\r\\n  event Liquidation(\\r\\n    address tokenIn,\\r\\n    address tokenOut,\\r\\n    uint amountIn,\\r\\n    uint spentAmountIn,\\r\\n    uint receivedAmountOut\\r\\n  );\\r\\n\\r\\n  event ReturnAssetToConverter(address asset, uint amount);\\r\\n\\r\\n  /// @notice Recycle was made\\r\\n  /// @param rewardTokens Full list of reward tokens received from tetuConverter and depositor\\r\\n  /// @param amountsToForward Amounts to be sent to forwarder\\r\\n  event Recycle(\\r\\n    address[] rewardTokens,\\r\\n    uint[] amountsToForward,\\r\\n    uint toPerf,\\r\\n    uint toInsurance\\r\\n  );\\r\\n\\r\\n  /// @notice Debt to insurance was paid by rewards\\r\\n  /// @param debtToInsuranceBefore Initial amount of debts to the insurance, in underlying\\r\\n  /// @param debtToInsuranceBefore Final amount of debts to the insurance, in underlying\\r\\n  event OnPayDebtToInsurance(\\r\\n    int debtToInsuranceBefore,\\r\\n    int debtToInsuraneAfter\\r\\n  );\\r\\n\\r\\n  /// @notice Debt to insurance was paid by a reward token\\r\\n  /// @param debtToCover Initial amount of debt that should be covered, in underlying\\r\\n  /// @param debtLeftovers Final amount of debt that should be covered, in underlying\\r\\n  /// It can be negative if we paid more than required\\r\\n  event OnCoverDebtToInsurance(\\r\\n    address rewardToken,\\r\\n    uint rewardAmount,\\r\\n    uint debtToCover,\\r\\n    int debtLeftovers\\r\\n  );\\r\\n//endregion---------------------------------------------------  Events\\r\\n\\r\\n//region--------------------------------------------------- Borrow and close positions\\r\\n\\r\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\r\\n  ///         Max possible collateral should be approved before calling of this function.\\r\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\r\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\r\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\r\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\r\\n  function openPosition(\\r\\n    ITetuConverter tetuConverter_,\\r\\n    bytes memory entryData_,\\r\\n    address collateralAsset_,\\r\\n    address borrowAsset_,\\r\\n    uint amountIn_,\\r\\n    uint thresholdAmountIn_\\r\\n  ) external returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    return _openPosition(tetuConverter_, entryData_, collateralAsset_, borrowAsset_, amountIn_, thresholdAmountIn_);\\r\\n  }\\r\\n\\r\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\r\\n  ///         Max possible collateral should be approved before calling of this function.\\r\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\r\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\r\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\r\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\r\\n  /// @param thresholdAmountIn_ Min value of amountIn allowed for the second and subsequent conversions.\\r\\n  ///        0 - use default min value\\r\\n  ///        If amountIn becomes too low, no additional borrows are possible, so\\r\\n  ///        the rest amountIn is just added to collateral/borrow amount of previous conversion.\\r\\n  function _openPosition(\\r\\n    ITetuConverter tetuConverter_,\\r\\n    bytes memory entryData_,\\r\\n    address collateralAsset_,\\r\\n    address borrowAsset_,\\r\\n    uint amountIn_,\\r\\n    uint thresholdAmountIn_\\r\\n  ) internal returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    if (thresholdAmountIn_ == 0) {\\r\\n      // zero threshold is not allowed because round-issues are possible, see openPosition.dust test\\r\\n      // we assume here, that it's useless to borrow amount using collateral/borrow amount\\r\\n      // less than given number of tokens (event for BTC)\\r\\n      thresholdAmountIn_ = DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD;\\r\\n    }\\r\\n    if (amountIn_ <= thresholdAmountIn_) {\\r\\n      return (0, 0);\\r\\n    }\\r\\n\\r\\n    OpenPositionLocal memory vars;\\r\\n    // we assume here, that max possible collateral amount is already approved (as it's required by TetuConverter)\\r\\n    vars.entryKind = ConverterEntryKinds.getEntryKind(entryData_);\\r\\n    if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\\r\\n      return openPositionEntryKind1(\\r\\n        tetuConverter_,\\r\\n        entryData_,\\r\\n        collateralAsset_,\\r\\n        borrowAsset_,\\r\\n        amountIn_,\\r\\n        thresholdAmountIn_\\r\\n      );\\r\\n    } else {\\r\\n      (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\r\\n        entryData_,\\r\\n        collateralAsset_,\\r\\n        amountIn_,\\r\\n        borrowAsset_,\\r\\n        _LOAN_PERIOD_IN_BLOCKS\\r\\n      );\\r\\n\\r\\n      uint len = vars.converters.length;\\r\\n      if (len > 0) {\\r\\n        for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n          // we need to approve collateralAmount before the borrow-call but it's already approved, see above comments\\r\\n          vars.collateral;\\r\\n          vars.amountToBorrow;\\r\\n          if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\\r\\n            // we have exact amount of total collateral amount\\r\\n            // Case ENTRY_KIND_EXACT_PROPORTION_1 is here too because we consider first platform only\\r\\n            vars.collateral = amountIn_ < vars.collateralsRequired[i]\\r\\n              ? amountIn_\\r\\n              : vars.collateralsRequired[i];\\r\\n            vars.amountToBorrow = amountIn_ < vars.collateralsRequired[i]\\r\\n              ? vars.amountsToBorrow[i] * amountIn_ / vars.collateralsRequired[i]\\r\\n              : vars.amountsToBorrow[i];\\r\\n            amountIn_ -= vars.collateral;\\r\\n          } else {\\r\\n            // assume here that entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2\\r\\n            // we have exact amount of total amount-to-borrow\\r\\n            vars.amountToBorrow = amountIn_ < vars.amountsToBorrow[i]\\r\\n              ? amountIn_\\r\\n              : vars.amountsToBorrow[i];\\r\\n            vars.collateral = amountIn_ < vars.amountsToBorrow[i]\\r\\n              ? vars.collateralsRequired[i] * amountIn_ / vars.amountsToBorrow[i]\\r\\n              : vars.collateralsRequired[i];\\r\\n            amountIn_ -= vars.amountToBorrow;\\r\\n          }\\r\\n\\r\\n          if (amountIn_ < thresholdAmountIn_ && amountIn_ != 0) {\\r\\n            // dust amount is left, just leave it unused\\r\\n            // we cannot add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\r\\n            amountIn_ = 0;\\r\\n          }\\r\\n\\r\\n          if (vars.amountToBorrow != 0) {\\r\\n            borrowedAmountOut += tetuConverter_.borrow(\\r\\n              vars.converters[i],\\r\\n              collateralAsset_,\\r\\n              vars.collateral,\\r\\n              borrowAsset_,\\r\\n              vars.amountToBorrow,\\r\\n              address(this)\\r\\n            );\\r\\n            collateralAmountOut += vars.collateral;\\r\\n            emit OpenPosition(\\r\\n              vars.converters[i],\\r\\n              collateralAsset_,\\r\\n              vars.collateral,\\r\\n              borrowAsset_,\\r\\n              vars.amountToBorrow,\\r\\n              address(this)\\r\\n            );\\r\\n          }\\r\\n\\r\\n          if (amountIn_ == 0) break;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return (collateralAmountOut, borrowedAmountOut);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Open position using entry kind 1 - split provided amount on two parts according provided proportions\\r\\n  /// @param amountIn_ Amount of collateral to be divided on parts. We assume {amountIn_} > 0\\r\\n  /// @param collateralThreshold_ Min allowed collateral amount to be used for new borrow, > 0\\r\\n  /// @return collateralAmountOut Total collateral used to borrow {borrowedAmountOut}\\r\\n  /// @return borrowedAmountOut Total borrowed amount\\r\\n  function openPositionEntryKind1(\\r\\n    ITetuConverter tetuConverter_,\\r\\n    bytes memory entryData_,\\r\\n    address collateralAsset_,\\r\\n    address borrowAsset_,\\r\\n    uint amountIn_,\\r\\n    uint collateralThreshold_\\r\\n  ) internal returns (\\r\\n    uint collateralAmountOut,\\r\\n    uint borrowedAmountOut\\r\\n  ) {\\r\\n    OpenPositionEntryKind1Local memory vars;\\r\\n    (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\r\\n      entryData_,\\r\\n      collateralAsset_,\\r\\n      amountIn_,\\r\\n      borrowAsset_,\\r\\n      _LOAN_PERIOD_IN_BLOCKS\\r\\n    );\\r\\n\\r\\n    uint len = vars.converters.length;\\r\\n    if (len > 0) {\\r\\n      // we should split amountIn on two amounts with proportions x:y\\r\\n      (, uint x, uint y) = abi.decode(entryData_, (uint, uint, uint));\\r\\n      // calculate prices conversion ratio using price oracle, decimals 18\\r\\n      // i.e. alpha = 1e18 * 75e6 usdc / 25e18 matic = 3e6 usdc/matic\\r\\n      vars.alpha = _getCollateralToBorrowRatio(tetuConverter_, collateralAsset_, borrowAsset_);\\r\\n\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        // the lending platform allows to convert {collateralsRequired[i]} to {amountsToBorrow[i]}\\r\\n        // and give us required proportions in result\\r\\n        // C = C1 + C2, C2 => B2, B2 * alpha = C3, C1/C3 must be equal to x/y\\r\\n        // C1 is collateral amount left untouched (x)\\r\\n        // C2 is collateral amount converted to B2 (y)\\r\\n        // but if lending platform doesn't have enough liquidity\\r\\n        // it reduces {collateralsRequired[i]} and {amountsToBorrow[i]} proportionally to fit the limits\\r\\n        // as result, remaining C1 will be too big after conversion and we need to make another borrow\\r\\n        vars.c3 = vars.alpha * vars.amountsToBorrow[i] / 1e18;\\r\\n        vars.c1 = x * vars.c3 / y;\\r\\n\\r\\n        // we doesn't calculate an intermediate ratio cR/(cR+c1) to avoid lost of precision\\r\\n        if ((vars.collateralsRequired[i] + vars.c1) > amountIn_) {\\r\\n          vars.collateral = vars.collateralsRequired[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\\r\\n          vars.amountToBorrow = vars.amountsToBorrow[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\\r\\n        } else {\\r\\n          vars.collateral = vars.collateralsRequired[i];\\r\\n          vars.amountToBorrow = vars.amountsToBorrow[i];\\r\\n        }\\r\\n\\r\\n        // skip any attempts to borrow zero amount or use too little collateral\\r\\n        if (vars.collateral < collateralThreshold_ || vars.amountToBorrow == 0) {\\r\\n          if (vars.collateralsRequired[i] + vars.c1 + collateralThreshold_ > amountIn_) {\\r\\n            // The lending platform has enough resources to make the borrow but amount of the borrow is too low\\r\\n            // Skip the borrow, leave leftover of collateral untouched\\r\\n            break;\\r\\n          } else {\\r\\n            // The lending platform doesn't have enough resources to make the borrow.\\r\\n            // We should try to make borrow on the next platform (if any)\\r\\n            continue;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        require(\\r\\n          tetuConverter_.borrow(\\r\\n            vars.converters[i],\\r\\n            collateralAsset_,\\r\\n            vars.collateral,\\r\\n            borrowAsset_,\\r\\n            vars.amountToBorrow,\\r\\n            address(this)\\r\\n          ) == vars.amountToBorrow,\\r\\n          StrategyLib2.WRONG_VALUE\\r\\n        );\\r\\n        emit OpenPosition(\\r\\n          vars.converters[i],\\r\\n          collateralAsset_,\\r\\n          vars.collateral,\\r\\n          borrowAsset_,\\r\\n          vars.amountToBorrow,\\r\\n          address(this)\\r\\n        );\\r\\n\\r\\n        borrowedAmountOut += vars.amountToBorrow;\\r\\n        collateralAmountOut += vars.collateral;\\r\\n\\r\\n        // calculate amount to be borrowed in the next converter\\r\\n        vars.c3 = vars.alpha * vars.amountToBorrow / 1e18;\\r\\n        vars.c1 = x * vars.c3 / y;\\r\\n        amountIn_ = (amountIn_ > vars.c1 + vars.collateral)\\r\\n          ? amountIn_ - (vars.c1 + vars.collateral)\\r\\n          : 0;\\r\\n\\r\\n        // protection against dust amounts, see \\\"openPosition.dust\\\", just leave dust amount unused\\r\\n        // we CAN NOT add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\r\\n        // we assume here, that collateralThreshold_ != 0, so check amountIn_ != 0 is not required\\r\\n        if (amountIn_ < collateralThreshold_) break;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (collateralAmountOut, borrowedAmountOut);\\r\\n  }\\r\\n\\r\\n  /// @notice Get ratio18 = collateral / borrow\\r\\n  function _getCollateralToBorrowRatio(\\r\\n    ITetuConverter converter_,\\r\\n    address collateralAsset_,\\r\\n    address borrowAsset_\\r\\n  ) internal view returns (uint){\\r\\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\r\\n    uint priceCollateral = priceOracle.getAssetPrice(collateralAsset_);\\r\\n    uint priceBorrow = priceOracle.getAssetPrice(borrowAsset_);\\r\\n    return 1e18 * priceBorrow * 10 ** IERC20Metadata(collateralAsset_).decimals()\\r\\n    / priceCollateral / 10 ** IERC20Metadata(borrowAsset_).decimals();\\r\\n  }\\r\\n\\r\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\r\\n  ///         It doesn't repay more than the actual amount of the debt, so it can use less amount than {amountToRepay}\\r\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\r\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\r\\n  /// @return repaidAmountOut Amount that was actually repaid\\r\\n  function _closePosition(\\r\\n    ITetuConverter converter_,\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountToRepay\\r\\n  ) internal returns (\\r\\n    uint returnedAssetAmountOut,\\r\\n    uint repaidAmountOut\\r\\n  ) {\\r\\n\\r\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\r\\n\\r\\n    // We shouldn't try to pay more than we actually need to repay\\r\\n    // The leftover will be swapped inside TetuConverter, it's inefficient.\\r\\n    // Let's limit amountToRepay by needToRepay-amount\\r\\n    (uint needToRepay,) = converter_.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\r\\n    uint amountRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\r\\n\\r\\n    return _closePositionExact(converter_, collateralAsset, borrowAsset, amountRepay, balanceBefore);\\r\\n  }\\r\\n\\r\\n  /// @notice Close the given position, pay {amountRepay} exactly and ensure that all amount was accepted,\\r\\n  /// @param amountRepay Amount to repay in terms of {borrowAsset}\\r\\n  /// @param balanceBorrowAsset Current balance of the borrow asset\\r\\n  /// @return collateralOut Amount of collateral received back after repaying\\r\\n  /// @return repaidAmountOut Amount that was actually repaid\\r\\n  function _closePositionExact(\\r\\n    ITetuConverter converter_,\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountRepay,\\r\\n    uint balanceBorrowAsset\\r\\n  ) internal returns (\\r\\n    uint collateralOut,\\r\\n    uint repaidAmountOut\\r\\n  ) {\\r\\n    if (amountRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n      // Make full/partial repayment\\r\\n      IERC20(borrowAsset).safeTransfer(address(converter_), amountRepay);\\r\\n\\r\\n      uint notUsedAmount;\\r\\n      (collateralOut, notUsedAmount,,) = converter_.repay(collateralAsset, borrowAsset, amountRepay, address(this));\\r\\n\\r\\n      emit ClosePosition(collateralAsset, borrowAsset, amountRepay, address(this), collateralOut, notUsedAmount);\\r\\n      uint balanceAfter = IERC20(borrowAsset).balanceOf(address(this));\\r\\n\\r\\n      // we cannot use amountRepay here because AAVE pool adapter is able to send tiny amount back (debt-gap)\\r\\n      repaidAmountOut = balanceBorrowAsset > balanceAfter\\r\\n        ? balanceBorrowAsset - balanceAfter\\r\\n        : 0;\\r\\n      require(notUsedAmount == 0, StrategyLib2.WRONG_VALUE);\\r\\n    }\\r\\n\\r\\n    return (collateralOut, repaidAmountOut);\\r\\n  }\\r\\n\\r\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\r\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\r\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\r\\n  /// @return repaidAmountOut Amount that was actually repaid\\r\\n  function closePosition(\\r\\n    ITetuConverter tetuConverter_,\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountToRepay\\r\\n  ) external returns (\\r\\n    uint returnedAssetAmountOut,\\r\\n    uint repaidAmountOut\\r\\n  ) {\\r\\n    return _closePosition(tetuConverter_, collateralAsset, borrowAsset, amountToRepay);\\r\\n  }\\r\\n//endregion--------------------------------------------------- Borrow and close positions\\r\\n\\r\\n//region--------------------------------------------------- Liquidation\\r\\n\\r\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\r\\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\\r\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\r\\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator\\r\\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\r\\n  function liquidate(\\r\\n    ITetuConverter converter,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    address tokenIn_,\\r\\n    address tokenOut_,\\r\\n    uint amountIn_,\\r\\n    uint slippage_,\\r\\n    uint liquidationThresholdForTokenIn_,\\r\\n    bool skipValidation\\r\\n  ) external returns (\\r\\n    uint spentAmountIn,\\r\\n    uint receivedAmountOut\\r\\n  ) {\\r\\n    return _liquidate(converter, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, liquidationThresholdForTokenIn_, skipValidation);\\r\\n  }\\r\\n\\r\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\r\\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\\r\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\r\\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator (== 0 | amountIn_)\\r\\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\r\\n  function _liquidate(\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    address tokenIn_,\\r\\n    address tokenOut_,\\r\\n    uint amountIn_,\\r\\n    uint slippage_,\\r\\n    uint liquidationThresholdForTokenIn_,\\r\\n    bool skipValidation\\r\\n  ) internal returns (\\r\\n    uint spentAmountIn,\\r\\n    uint receivedAmountOut\\r\\n  ) {\\r\\n    // we check amountIn by threshold, not amountOut\\r\\n    // because {_closePositionsToGetAmount} is implemented in {get plan, make action}-way\\r\\n    // {_closePositionsToGetAmount} can be used with swap by aggregators, where amountOut cannot be calculate\\r\\n    // at the moment of plan building. So, for uniformity, only amountIn is checked everywhere\\r\\n\\r\\n    if (amountIn_ <= liquidationThresholdForTokenIn_) {\\r\\n      return (0, 0);\\r\\n    }\\r\\n\\r\\n    (ITetuLiquidator.PoolData[] memory route,) = liquidator_.buildRoute(tokenIn_, tokenOut_);\\r\\n\\r\\n    require(route.length != 0, AppErrors.NO_LIQUIDATION_ROUTE);\\r\\n\\r\\n    // if the expected value is higher than threshold distribute to destinations\\r\\n    return (amountIn_, _liquidateWithRoute(converter_, route, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, skipValidation));\\r\\n  }\\r\\n\\r\\n  /// @notice Make liquidation using given route and check correctness using TetuConverter's price oracle\\r\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\r\\n  function _liquidateWithRoute(\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator.PoolData[] memory route,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    address tokenIn_,\\r\\n    address tokenOut_,\\r\\n    uint amountIn_,\\r\\n    uint slippage_,\\r\\n    bool skipValidation\\r\\n  ) internal returns (\\r\\n    uint receivedAmountOut\\r\\n  ) {\\r\\n    // we need to approve each time, liquidator address can be changed in controller\\r\\n    AppLib.approveIfNeeded(tokenIn_, amountIn_, address(liquidator_));\\r\\n\\r\\n    uint balanceBefore = IERC20(tokenOut_).balanceOf(address(this));\\r\\n    liquidator_.liquidateWithRoute(route, amountIn_, slippage_);\\r\\n    uint balanceAfter = IERC20(tokenOut_).balanceOf(address(this));\\r\\n\\r\\n    require(balanceAfter > balanceBefore, AppErrors.BALANCE_DECREASE);\\r\\n    receivedAmountOut = balanceAfter - balanceBefore;\\r\\n\\r\\n    // Oracle in TetuConverter \\\"knows\\\" only limited number of the assets\\r\\n    // It may not know prices for reward assets, so for rewards this validation should be skipped to avoid TC-4 error\\r\\n    require(skipValidation || converter_.isConversionValid(tokenIn_, amountIn_, tokenOut_, receivedAmountOut, slippage_), AppErrors.PRICE_IMPACT);\\r\\n    emit Liquidation(tokenIn_, tokenOut_, amountIn_, amountIn_, receivedAmountOut);\\r\\n  }\\r\\n//endregion--------------------------------------------------- Liquidation\\r\\n\\r\\n//region--------------------------------------------------- Recycle rewards\\r\\n\\r\\n  /// @notice Recycle the amounts: liquidate a part of each amount, send the other part to the forwarder.\\r\\n  /// We have two kinds of rewards:\\r\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\r\\n  /// 2) any other rewards\\r\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\r\\n  ///   Compound-part of Rewards-2 can be liquidated\\r\\n  ///   Compound part of Rewards-1 should be just left on the balance\\r\\n  ///   Performance amounts should be liquidate, result underlying should be sent to performance receiver and insurance.\\r\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\r\\n  /// @dev {_recycle} is implemented as separate (inline) function to simplify unit testing\\r\\n  /// @param rewardTokens_ Full list of reward tokens received from tetuConverter and depositor\\r\\n  /// @param rewardAmounts_ Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\r\\n  function recycle(\\r\\n    IStrategyV3.BaseState storage baseState,\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    address[] memory tokens,\\r\\n    address controller,\\r\\n    mapping(address => uint) storage liquidationThresholds,\\r\\n    address[] memory rewardTokens_,\\r\\n    uint[] memory rewardAmounts_\\r\\n  ) external {\\r\\n    RecycleLocal memory v;\\r\\n    v.asset = baseState.asset;\\r\\n    v.compoundRatio = baseState.compoundRatio;\\r\\n    v.performanceFee = baseState.performanceFee;\\r\\n    v.thresholds = _getLiquidationThresholds(liquidationThresholds, rewardTokens_, rewardTokens_.length);\\r\\n    v.debtToInsuranceCurrent = csbs.debtToInsurance;\\r\\n    v.splitter = baseState.splitter;\\r\\n\\r\\n    (v.amountsToForward, v.amountPerf, v.debtToInsuranceUpdated) = _recycle(RecycleParams({\\r\\n      converter: csbs.converter,\\r\\n      liquidator: AppLib._getLiquidator(controller),\\r\\n      asset: v.asset,\\r\\n      compoundRatio: v.compoundRatio,\\r\\n      tokens: tokens,\\r\\n      thresholds: v.thresholds,\\r\\n      rewardTokens: rewardTokens_,\\r\\n      rewardAmounts: rewardAmounts_,\\r\\n      performanceFee: v.performanceFee,\\r\\n      debtToInsurance: v.debtToInsuranceCurrent,\\r\\n      splitter: v.splitter,\\r\\n      assetThreshold: AppLib._getLiquidationThreshold(liquidationThresholds[v.asset])\\r\\n    }));\\r\\n\\r\\n    if (v.debtToInsuranceCurrent != v.debtToInsuranceUpdated) {\\r\\n      csbs.debtToInsurance = v.debtToInsuranceUpdated;\\r\\n      emit OnPayDebtToInsurance(v.debtToInsuranceCurrent, v.debtToInsuranceUpdated);\\r\\n    }\\r\\n\\r\\n    // send performance-part of the underlying to the performance receiver and insurance\\r\\n    (v.toPerf, v.toInsurance) = _sendPerformanceFee(\\r\\n      v.asset,\\r\\n      v.amountPerf,\\r\\n      v.splitter,\\r\\n      baseState.performanceReceiver,\\r\\n      baseState.performanceFeeRatio\\r\\n    );\\r\\n\\r\\n    // override rewardTokens_, v.amountsToForward by the values actually sent to the forwarder\\r\\n    (rewardTokens_, v.amountsToForward) = _sendTokensToForwarder(controller, v.splitter, rewardTokens_, v.amountsToForward, v.thresholds);\\r\\n\\r\\n    emit Recycle(rewardTokens_, v.amountsToForward, v.toPerf, v.toInsurance);\\r\\n  }\\r\\n\\r\\n  /// @notice Send {amount_} of {asset_} to {receiver_} and insurance\\r\\n  /// @param asset_ Underlying asset\\r\\n  /// @param amount_ Amount of underlying asset to be sent to\\r\\n  /// @param receiver_ Performance receiver\\r\\n  /// @param ratio [0..100_000], 100_000 - send full amount to perf, 0 - send full amount to the insurance.\\r\\n  function _sendPerformanceFee(address asset_, uint amount_, address splitter, address receiver_, uint ratio) internal returns (\\r\\n    uint toPerf,\\r\\n    uint toInsurance\\r\\n  ) {\\r\\n    // read inside lib for reduce contract space in the main contract\\r\\n    address insurance = address(ITetuVaultV2(ISplitter(splitter).vault()).insurance());\\r\\n\\r\\n    toPerf = amount_ * ratio / AppLib.DENOMINATOR;\\r\\n    toInsurance = amount_ - toPerf;\\r\\n\\r\\n    if (toPerf != 0) {\\r\\n      IERC20(asset_).safeTransfer(receiver_, toPerf);\\r\\n    }\\r\\n    if (toInsurance != 0) {\\r\\n      IERC20(asset_).safeTransfer(insurance, toInsurance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Send {amounts_} to forwarder, skip amounts < thresholds (see SCB-812)\\r\\n  /// @return tokensOut Tokens sent to the forwarder\\r\\n  /// @return amountsOut Amounts sent to the forwarder\\r\\n  function _sendTokensToForwarder(\\r\\n    address controller_,\\r\\n    address splitter_,\\r\\n    address[] memory tokens_,\\r\\n    uint[] memory amounts_,\\r\\n    uint[] memory thresholds_\\r\\n  ) internal returns (\\r\\n    address[] memory tokensOut,\\r\\n    uint[] memory amountsOut\\r\\n  ) {\\r\\n    uint len = tokens_.length;\\r\\n    IForwarder forwarder = IForwarder(IController(controller_).forwarder());\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (thresholds_[i] > amounts_[i]) {\\r\\n        amounts_[i] = 0; // it will be excluded in filterZeroAmounts() below\\r\\n      } else {\\r\\n        AppLib.approveIfNeeded(tokens_[i], amounts_[i], address(forwarder));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokens_, amounts_);\\r\\n    if (tokensOut.length != 0) {\\r\\n      forwarder.registerIncome(tokensOut, amountsOut, ISplitter(splitter_).vault(), true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Recycle the amounts: split each amount on tree parts: performance+insurance (P), forwarder (F), compound (C)\\r\\n  ///         Liquidate P+C, send F to the forwarder.\\r\\n  /// We have two kinds of rewards:\\r\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\r\\n  /// 2) any other rewards\\r\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\r\\n  ///   Compound-part of Rewards-2 can be liquidated\\r\\n  ///   Compound part of Rewards-1 should be just left on the balance\\r\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\r\\n  ///   Performance amounts are liquidated, result amount of underlying is returned in {amountToPerformanceAndInsurance}\\r\\n  /// @return amountsToForward Amounts of {rewardTokens} to be sent to forwarder, zero amounts are allowed here\\r\\n  /// @return amountToPerformanceAndInsurance Amount of underlying to be sent to performance receiver and insurance\\r\\n  /// @return debtToInsuranceOut Remain debt to the insurance [in underlying]\\r\\n  function _recycle(RecycleParams memory p) internal returns (\\r\\n    uint[] memory amountsToForward,\\r\\n    uint amountToPerformanceAndInsurance,\\r\\n    int debtToInsuranceOut\\r\\n  ) {\\r\\n    RecycleLocalParams memory v;\\r\\n\\r\\n    v.len = p.rewardTokens.length;\\r\\n    require(v.len == p.rewardAmounts.length, AppErrors.WRONG_LENGTHS);\\r\\n\\r\\n    amountsToForward = new uint[](v.len);\\r\\n\\r\\n    // rewardAmounts => P + F + C, where P - performance + insurance, F - forwarder, C - compound\\r\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\r\\n      // if we have a debt-to-insurance we should firstly cover the debt using all available rewards\\r\\n      // and only then we can use leftovers of the rewards for other needs\\r\\n      if (p.debtToInsurance > int(p.assetThreshold)) {\\r\\n        (p.rewardAmounts[i], p.debtToInsurance) = _coverDebtToInsuranceFromRewards(p, i, uint(p.debtToInsurance));\\r\\n        if (p.rewardAmounts[i] < p.thresholds[i]) continue;\\r\\n      }\\r\\n\\r\\n      v.amountFC = p.rewardAmounts[i] * (COMPOUND_DENOMINATOR - p.performanceFee) / COMPOUND_DENOMINATOR;\\r\\n      v.amountC = v.amountFC * p.compoundRatio / COMPOUND_DENOMINATOR;\\r\\n      v.amountP = p.rewardAmounts[i] - v.amountFC;\\r\\n      v.rewardToken = p.rewardTokens[i];\\r\\n      v.amountCP = v.amountC + v.amountP;\\r\\n\\r\\n      if (v.amountCP > 0) {\\r\\n        if (AppLib.getAssetIndex(p.tokens, v.rewardToken) != type(uint).max) {\\r\\n          if (v.rewardToken == p.asset) {\\r\\n            // This is underlying, liquidation of compound part is not allowed; just keep on the balance, should be handled later\\r\\n            amountToPerformanceAndInsurance += v.amountP;\\r\\n          } else {\\r\\n            // This is secondary asset, Liquidation of compound part is not allowed, we should liquidate performance part only\\r\\n            // If the performance amount is too small, liquidation will not happen and we will just keep that dust tokens on balance forever\\r\\n            (, v.receivedAmountOut) = _liquidate(\\r\\n              p.converter,\\r\\n              p.liquidator,\\r\\n              v.rewardToken,\\r\\n              p.asset,\\r\\n              v.amountP,\\r\\n              _REWARD_LIQUIDATION_SLIPPAGE,\\r\\n              p.thresholds[i],\\r\\n              false // use conversion validation for these rewards\\r\\n            );\\r\\n            amountToPerformanceAndInsurance += v.receivedAmountOut;\\r\\n          }\\r\\n        } else {\\r\\n          // If amount is too small, the liquidation won't be allowed and we will just keep that dust tokens on balance forever\\r\\n          // The asset is not in the list of depositor's assets, its amount is big enough and should be liquidated\\r\\n          // We assume here, that {token} cannot be equal to {_asset}\\r\\n          // because the {_asset} is always included to the list of depositor's assets\\r\\n          (, v.receivedAmountOut) = _liquidate(\\r\\n            p.converter,\\r\\n            p.liquidator,\\r\\n            v.rewardToken,\\r\\n            p.asset,\\r\\n            v.amountCP,\\r\\n            _REWARD_LIQUIDATION_SLIPPAGE,\\r\\n            p.thresholds[i],\\r\\n            true // skip conversion validation for rewards because we can have arbitrary assets here\\r\\n          );\\r\\n          amountToPerformanceAndInsurance += v.receivedAmountOut * (p.rewardAmounts[i] - v.amountFC) / v.amountCP;\\r\\n        }\\r\\n      }\\r\\n      amountsToForward[i] = v.amountFC - v.amountC;\\r\\n    }\\r\\n    return (amountsToForward, amountToPerformanceAndInsurance, p.debtToInsurance);\\r\\n  }\\r\\n\\r\\n  /// @notice Try to cover {p.debtToInsurance} using available rewards of {p.rewardTokens[index]}\\r\\n  /// @param index Index of the reward token in {p.rewardTokens}\\r\\n  /// @param debtAmount Debt to insurance that should be covered by the reward tokens\\r\\n  /// @return rewardsLeftovers Amount of unused reward tokens (it can be used for other needs)\\r\\n  /// @return debtToInsuranceOut New value of the debt to the insurance\\r\\n  function _coverDebtToInsuranceFromRewards(RecycleParams memory p, uint index, uint debtAmount) internal returns (\\r\\n    uint rewardsLeftovers,\\r\\n    int debtToInsuranceOut\\r\\n  ) {\\r\\n    uint spentAmount;\\r\\n    uint amountToSend;\\r\\n\\r\\n    if (p.asset == p.rewardTokens[index]) {\\r\\n      // assume p.debtToInsurance > 0 here\\r\\n      spentAmount = Math.min(debtAmount, p.rewardAmounts[index]);\\r\\n      amountToSend = spentAmount;\\r\\n    } else {\\r\\n      // estimate amount of underlying that we can receive for the available amount of the reward tokens\\r\\n      uint amountAsset = p.rewardAmounts[index] > p.assetThreshold\\r\\n        ? p.liquidator.getPrice(p.rewardTokens[index], p.asset, p.rewardAmounts[index])\\r\\n        : 0;\\r\\n      uint amountIn;\\r\\n\\r\\n      if (amountAsset > debtAmount + p.assetThreshold) {\\r\\n        // pay a part of the rewards to cover the debt completely\\r\\n        amountIn = p.rewardAmounts[index] * debtAmount / amountAsset;\\r\\n      } else {\\r\\n        // pay all available rewards to cover a part of the debt\\r\\n        amountIn = p.rewardAmounts[index];\\r\\n      }\\r\\n\\r\\n      (spentAmount, amountToSend) = _liquidate(\\r\\n        p.converter,\\r\\n        p.liquidator,\\r\\n        p.rewardTokens[index],\\r\\n        p.asset,\\r\\n        amountIn,\\r\\n        _REWARD_LIQUIDATION_SLIPPAGE,\\r\\n        p.thresholds[index],\\r\\n        true // skip conversion validation for rewards because we can have arbitrary assets here\\r\\n      );\\r\\n    }\\r\\n\\r\\n    IERC20(p.asset).safeTransfer(address(ITetuVaultV2(ISplitter(p.splitter).vault()).insurance()), amountToSend);\\r\\n\\r\\n    rewardsLeftovers = AppLib.sub0(p.rewardAmounts[index], spentAmount);\\r\\n    debtToInsuranceOut = int(debtAmount) - int(amountToSend);\\r\\n\\r\\n    emit OnCoverDebtToInsurance(p.rewardTokens[index], spentAmount, debtAmount, debtToInsuranceOut);\\r\\n  }\\r\\n//endregion----------------------------------------------- Recycle rewards\\r\\n\\r\\n//region--------------------------------------------------- Before deposit\\r\\n  /// @notice Default implementation of ConverterStrategyBase.beforeDeposit\\r\\n  /// @param amount_ Amount of underlying to be deposited\\r\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\r\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\r\\n  /// @param weights_ Depositor pool weights\\r\\n  /// @param totalWeight_ Sum of {weights_}\\r\\n  function beforeDeposit(\\r\\n    ITetuConverter converter_,\\r\\n    uint amount_,\\r\\n    address[] memory tokens_,\\r\\n    uint indexAsset_,\\r\\n    uint[] memory weights_,\\r\\n    uint totalWeight_,\\r\\n    mapping(address => uint) storage liquidationThresholds\\r\\n  ) external returns (\\r\\n    uint[] memory tokenAmounts\\r\\n  ) {\\r\\n    // temporary save collateral to tokensAmounts\\r\\n    tokenAmounts = _getCollaterals(amount_, tokens_, weights_, totalWeight_, indexAsset_, AppLib._getPriceOracle(converter_));\\r\\n\\r\\n    // make borrow and save amounts of tokens available for deposit to tokenAmounts, zero result amounts are possible\\r\\n    tokenAmounts = _getTokenAmounts(\\r\\n      converter_,\\r\\n      tokens_,\\r\\n      indexAsset_,\\r\\n      tokenAmounts,\\r\\n      AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[indexAsset_]])\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice For each {token_} calculate a part of {amount_} to be used as collateral according to the weights.\\r\\n  ///         I.e. we have 300 USDC, we need to split it on 100 USDC, 100 USDT, 100 DAI\\r\\n  ///         USDC is main asset, USDT and DAI should be borrowed. We check amounts of USDT and DAI on the balance\\r\\n  ///         and return collaterals reduced on that amounts. For main asset, we return full amount always (100 USDC).\\r\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\r\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\r\\n  /// @return tokenAmountsOut Length of the array is equal to the length of {tokens_}\\r\\n  function _getCollaterals(\\r\\n    uint amount_,\\r\\n    address[] memory tokens_,\\r\\n    uint[] memory weights_,\\r\\n    uint totalWeight_,\\r\\n    uint indexAsset_,\\r\\n    IPriceOracle priceOracle\\r\\n  ) internal view returns (\\r\\n    uint[] memory tokenAmountsOut\\r\\n  ) {\\r\\n    uint len = tokens_.length;\\r\\n    tokenAmountsOut = new uint[](len);\\r\\n\\r\\n    // get token prices and decimals\\r\\n    (uint[] memory prices, uint[] memory decs) = AppLib._getPricesAndDecs(priceOracle, tokens_, len);\\r\\n\\r\\n    // split the amount on tokens proportionally to the weights\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      uint amountAssetForToken = amount_ * weights_[i] / totalWeight_;\\r\\n\\r\\n      if (i == indexAsset_) {\\r\\n        tokenAmountsOut[i] = amountAssetForToken;\\r\\n      } else {\\r\\n        // if we have some tokens on balance then we need to use only a part of the collateral\\r\\n        uint tokenAmountToBeBorrowed = amountAssetForToken\\r\\n          * prices[indexAsset_]\\r\\n          * decs[i]\\r\\n          / prices[i]\\r\\n          / decs[indexAsset_];\\r\\n\\r\\n        uint tokenBalance = IERC20(tokens_[i]).balanceOf(address(this));\\r\\n        if (tokenBalance < tokenAmountToBeBorrowed) {\\r\\n          tokenAmountsOut[i] = amountAssetForToken * (tokenAmountToBeBorrowed - tokenBalance) / tokenAmountToBeBorrowed;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Make borrow and return amounts of {tokens} available to deposit\\r\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\r\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\r\\n  /// @param collaterals_ Amounts of main asset that can be used as collateral to borrow {tokens_}\\r\\n  /// @param thresholdAsset_ Value of liquidation threshold for the main (collateral) asset\\r\\n  /// @return tokenAmountsOut Amounts of {tokens}  available to deposit\\r\\n  function _getTokenAmounts(\\r\\n    ITetuConverter converter_,\\r\\n    address[] memory tokens_,\\r\\n    uint indexAsset_,\\r\\n    uint[] memory collaterals_,\\r\\n    uint thresholdAsset_\\r\\n  ) internal returns (\\r\\n    uint[] memory tokenAmountsOut\\r\\n  ) {\\r\\n    // content of tokenAmounts will be modified in place\\r\\n    uint len = tokens_.length;\\r\\n    tokenAmountsOut = new uint[](len);\\r\\n    address asset = tokens_[indexAsset_];\\r\\n\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i != indexAsset_) {\\r\\n        address token = tokens_[i];\\r\\n        if (collaterals_[i] != 0) {\\r\\n          AppLib.approveIfNeeded(asset, collaterals_[i], address(converter_));\\r\\n          _openPosition(\\r\\n            converter_,\\r\\n            \\\"\\\", // entry kind = 0: fixed collateral amount, max possible borrow amount\\r\\n            asset,\\r\\n            token,\\r\\n            collaterals_[i],\\r\\n            thresholdAsset_\\r\\n          );\\r\\n\\r\\n          // zero borrowed amount is possible here (conversion is not available)\\r\\n          // if it's not suitable for depositor, the depositor should check zero amount in other places\\r\\n        }\\r\\n        tokenAmountsOut[i] = IERC20(token).balanceOf(address(this));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    tokenAmountsOut[indexAsset_] = Math.min(\\r\\n      collaterals_[indexAsset_],\\r\\n      IERC20(asset).balanceOf(address(this))\\r\\n    );\\r\\n  }\\r\\n//endregion--------------------------------------------------- Before deposit\\r\\n\\r\\n//region--------------------------------------------------- Make requested amount\\r\\n\\r\\n  /// @notice Convert {amountsToConvert_} to the given {asset}\\r\\n  ///         Swap leftovers (if any) to the given asset.\\r\\n  ///         If result amount is less than expected, try to close any other available debts (1 repay per block only)\\r\\n  /// @param tokens_ Results of _depositorPoolAssets() call (list of depositor's asset in proper order)\\r\\n  /// @param indexAsset_ Index of the given {asset} in {tokens}\\r\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\r\\n  ///                         Max uint means attempt to withdraw all possible amount.\\r\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\r\\n  function makeRequestedAmount(\\r\\n    address[] memory tokens_,\\r\\n    uint indexAsset_,\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator liquidator_,\\r\\n    uint requestedBalance,\\r\\n    mapping(address => uint) storage liquidationThresholds_\\r\\n  ) external returns (uint expectedBalance) {\\r\\n    DataSetLocal memory v = DataSetLocal({\\r\\n      len: tokens_.length,\\r\\n      converter: converter_,\\r\\n      tokens: tokens_,\\r\\n      indexAsset: indexAsset_,\\r\\n      liquidator: liquidator_\\r\\n    });\\r\\n    uint[] memory _liquidationThresholds = _getLiquidationThresholds(liquidationThresholds_, v.tokens, v.len);\\r\\n    expectedBalance = _closePositionsToGetAmount(v, _liquidationThresholds, requestedBalance);\\r\\n  }\\r\\n  //endregion-------------------------------------------- Make requested amount\\r\\n\\r\\n//region ------------------------------------------------ Close position\\r\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\r\\n  /// @dev We assume here that this function is called before closing any positions in the current block\\r\\n  /// @param liquidationThresholds Min allowed amounts-out for liquidations\\r\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\r\\n  ///                         Max uint means attempt to withdraw all possible amount.\\r\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\r\\n  function closePositionsToGetAmount(\\r\\n    ITetuConverter converter_,\\r\\n    ITetuLiquidator liquidator,\\r\\n    uint indexAsset,\\r\\n    mapping(address => uint) storage liquidationThresholds,\\r\\n    uint requestedBalance,\\r\\n    address[] memory tokens\\r\\n  ) external returns (\\r\\n    uint expectedBalance\\r\\n  ) {\\r\\n    uint len = tokens.length;\\r\\n    return _closePositionsToGetAmount(\\r\\n      DataSetLocal({\\r\\n        len: len,\\r\\n        converter: converter_,\\r\\n        tokens: tokens,\\r\\n        indexAsset: indexAsset,\\r\\n        liquidator: liquidator\\r\\n      }),\\r\\n      _getLiquidationThresholds(liquidationThresholds, tokens, len),\\r\\n      requestedBalance\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\r\\n  /// @dev Implements {IterationPlanLib.PLAN_SWAP_REPAY} only\\r\\n  ///      Note: AAVE3 allows to make two repays in a single block, see Aave3SingleBlockTest in TetuConverter\\r\\n  ///      but it doesn't allow to make borrow and repay in a single block.\\r\\n  /// @param liquidationThresholds_ Min allowed amounts-out for liquidations\\r\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\r\\n  ///                         Max uint means attempt to withdraw all possible amount.\\r\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\r\\n  function _closePositionsToGetAmount(\\r\\n    DataSetLocal memory d_,\\r\\n    uint[] memory liquidationThresholds_,\\r\\n    uint requestedBalance\\r\\n  ) internal returns (\\r\\n    uint expectedBalance\\r\\n  ) {\\r\\n    if (requestedBalance != 0) {\\r\\n      //let's get a bit more amount on balance to prevent situation \\\"zero balance, not-zero debts\\\"\\r\\n      requestedBalance = applyRequestedBalanceGap(requestedBalance);\\r\\n      CloseDebtsForRequiredAmountLocal memory v;\\r\\n      v.asset = d_.tokens[d_.indexAsset];\\r\\n\\r\\n      // v.planKind = IterationPlanLib.PLAN_SWAP_REPAY; // PLAN_SWAP_REPAY == 0, so we don't need this line\\r\\n      v.balanceAdditions = new uint[](d_.len);\\r\\n      expectedBalance = IERC20(v.asset).balanceOf(address(this));\\r\\n\\r\\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(d_.converter), d_.tokens, d_.len);\\r\\n\\r\\n      for (uint i; i < d_.len; i = AppLib.uncheckedInc(i)) {\\r\\n        if (i == d_.indexAsset) continue;\\r\\n\\r\\n        v.balanceAsset = IERC20(v.asset).balanceOf(address(this));\\r\\n        v.balanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\\r\\n\\r\\n        // Make one or several iterations. Do single swap and single repaying (both are optional) on each iteration.\\r\\n        // Calculate expectedAmount of received underlying. Swap leftovers at the end even if requestedAmount is 0 at that moment.\\r\\n        do {\\r\\n          // generate iteration plan: [swap], [repay]\\r\\n          (v.idxToSwap1, v.amountToSwap, v.idxToRepay1) = IterationPlanLib.buildIterationPlan(\\r\\n            [address(d_.converter), address(d_.liquidator)],\\r\\n            d_.tokens,\\r\\n            liquidationThresholds_,\\r\\n            v.prices,\\r\\n            v.decs,\\r\\n            v.balanceAdditions,\\r\\n            [0, IterationPlanLib.PLAN_SWAP_REPAY, 0, requestedBalance, d_.indexAsset, i, 0]\\r\\n          );\\r\\n          if (v.idxToSwap1 == 0 && v.idxToRepay1 == 0) break;\\r\\n\\r\\n          // make swap if necessary\\r\\n          uint spentAmountIn;\\r\\n          if (v.idxToSwap1 != 0) {\\r\\n            uint indexIn = v.idxToSwap1 - 1;\\r\\n            uint indexOut = indexIn == d_.indexAsset ? i : d_.indexAsset;\\r\\n            (spentAmountIn,) = _liquidate(\\r\\n              d_.converter,\\r\\n              d_.liquidator,\\r\\n              d_.tokens[indexIn],\\r\\n              d_.tokens[indexOut],\\r\\n              v.amountToSwap,\\r\\n              _ASSET_LIQUIDATION_SLIPPAGE,\\r\\n              liquidationThresholds_[indexIn],\\r\\n              false\\r\\n            );\\r\\n\\r\\n            if (indexIn == d_.indexAsset) {\\r\\n              expectedBalance = AppLib.sub0(expectedBalance, spentAmountIn);\\r\\n            } else if (indexOut == d_.indexAsset) {\\r\\n              expectedBalance += spentAmountIn * v.prices[i] * v.decs[d_.indexAsset] / v.prices[d_.indexAsset] / v.decs[i];\\r\\n\\r\\n              // if we already received enough amount on balance, we can avoid additional actions\\r\\n              // to avoid high gas consumption in the cases like SCB-787\\r\\n              uint balanceAsset = IERC20(v.asset).balanceOf(address(this));\\r\\n              if (balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) {\\r\\n                v.balanceAsset = balanceAsset;\\r\\n                break;\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n\\r\\n          // repay a debt if necessary\\r\\n          if (v.idxToRepay1 != 0) {\\r\\n            uint indexBorrow = v.idxToRepay1 - 1;\\r\\n            uint indexCollateral = indexBorrow == d_.indexAsset ? i : d_.indexAsset;\\r\\n            uint amountToRepay = IERC20(d_.tokens[indexBorrow]).balanceOf(address(this));\\r\\n\\r\\n            (uint expectedAmountOut, uint repaidAmountOut, uint amountSendToRepay) = _repayDebt(\\r\\n              d_.converter,\\r\\n              d_.tokens[indexCollateral],\\r\\n              d_.tokens[indexBorrow],\\r\\n              amountToRepay\\r\\n            );\\r\\n\\r\\n            if (indexBorrow == d_.indexAsset) {\\r\\n              expectedBalance = expectedBalance > amountSendToRepay\\r\\n                ? expectedBalance - amountSendToRepay\\r\\n                : 0;\\r\\n            } else if (indexCollateral == d_.indexAsset) {\\r\\n              require(expectedAmountOut >= spentAmountIn, AppErrors.BALANCE_DECREASE);\\r\\n              if (repaidAmountOut < amountSendToRepay) {\\r\\n                // SCB-779: expectedAmountOut was estimated for amountToRepay, but we have paid repaidAmountOut only\\r\\n                expectedBalance += expectedAmountOut * repaidAmountOut / amountSendToRepay;\\r\\n              } else {\\r\\n                expectedBalance += expectedAmountOut;\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n\\r\\n          // update balances\\r\\n          v.newBalanceAsset = IERC20(v.asset).balanceOf(address(this));\\r\\n          v.newBalanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\\r\\n\\r\\n          v.exitLoop = (v.balanceAsset == v.newBalanceAsset && v.balanceToken == v.newBalanceToken);\\r\\n          v.balanceAsset = v.newBalanceAsset;\\r\\n          v.balanceToken = v.newBalanceToken;\\r\\n        } while (!v.exitLoop);\\r\\n\\r\\n        if (v.balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) break;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return expectedBalance;\\r\\n  }\\r\\n//endregion ------------------------------------------------ Close position\\r\\n\\r\\n//region ------------------------------------------------ Repay debts\\r\\n  /// @notice Repay {amountIn} and get collateral in return, calculate expected amount\\r\\n  ///         Take into account possible debt-gap and the fact that the amount of debt may be less than {amountIn}\\r\\n  /// @param amountToRepay Max available amount of borrow asset that we can repay\\r\\n  /// @return expectedAmountOut Estimated amount of main asset that should be added to balance = collateral - {toSell}\\r\\n  /// @return repaidAmountOut Actually paid amount\\r\\n  /// @return amountSendToRepay Amount send to repay\\r\\n  function _repayDebt(\\r\\n    ITetuConverter converter,\\r\\n    address collateralAsset,\\r\\n    address borrowAsset,\\r\\n    uint amountToRepay\\r\\n  ) internal returns (\\r\\n    uint expectedAmountOut,\\r\\n    uint repaidAmountOut,\\r\\n    uint amountSendToRepay\\r\\n  ) {\\r\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\r\\n\\r\\n    // get amount of debt with debt-gap\\r\\n    (uint needToRepay,) = converter.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\r\\n    amountSendToRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\r\\n\\r\\n    // get expected amount without debt-gap\\r\\n    uint swappedAmountOut;\\r\\n    (expectedAmountOut, swappedAmountOut) = converter.quoteRepay(address(this), collateralAsset, borrowAsset, amountSendToRepay);\\r\\n\\r\\n    if (expectedAmountOut > swappedAmountOut) {\\r\\n      // SCB-789 Following situation is possible\\r\\n      //    needToRepay = 100, needToRepayExact = 90 (debt gap is 10)\\r\\n      //    1) amountRepay = 80\\r\\n      //       expectedAmountOut is calculated for 80, no problems\\r\\n      //    2) amountRepay = 99,\\r\\n      //       expectedAmountOut is calculated for 90 + 9 (90 - repay, 9 - direct swap)\\r\\n      //       expectedAmountOut must be reduced on 9 here (!)\\r\\n      expectedAmountOut -= swappedAmountOut;\\r\\n    }\\r\\n\\r\\n    // close the debt\\r\\n    (, repaidAmountOut) = _closePositionExact(converter, collateralAsset, borrowAsset, amountSendToRepay, balanceBefore);\\r\\n\\r\\n    return (expectedAmountOut, repaidAmountOut, amountSendToRepay);\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Repay debts\\r\\n\\r\\n//region------------------------------------------------ Other helpers\\r\\n\\r\\n  /// @return liquidationThresholdsOut Liquidation thresholds of the {tokens_}, result values > 0\\r\\n  function _getLiquidationThresholds(\\r\\n    mapping(address => uint) storage liquidationThresholds,\\r\\n    address[] memory tokens_,\\r\\n    uint len\\r\\n  ) internal view returns (\\r\\n    uint[] memory liquidationThresholdsOut\\r\\n  ) {\\r\\n    liquidationThresholdsOut = new uint[](len);\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      liquidationThresholdsOut[i] = AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[i]]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function applyRequestedBalanceGap(uint amount_) internal pure returns (uint) {\\r\\n    return amount_ == type(uint).max\\r\\n      ? amount_\\r\\n      : amount_ * (COMPOUND_DENOMINATOR + REQUESTED_BALANCE_GAP) / COMPOUND_DENOMINATOR;\\r\\n  }\\r\\n//endregion--------------------------------------------- Other helpers\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x16389df1a6afe915da264e33522940a9d9272cce6f0a6a487743ea2cc66ae2f3\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/ConverterStrategyBaseLib2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IBookkeeper.sol\\\";\\r\\nimport \\\"../libs/AppErrors.sol\\\";\\r\\nimport \\\"../libs/AppLib.sol\\\";\\r\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\r\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\r\\nimport \\\"../interfaces/IConverterStrategyBase.sol\\\";\\r\\n\\r\\n/// @notice Continuation of ConverterStrategyBaseLib (workaround for size limits)\\r\\nlibrary ConverterStrategyBaseLib2 {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n//region --------------------------------------- Data types\\r\\n  struct CalcInvestedAssetsLocal {\\r\\n    uint len;\\r\\n    uint[] debts;\\r\\n    address asset;\\r\\n    address token;\\r\\n  }\\r\\n//endregion --------------------------------------- Data types\\r\\n\\r\\n//region --------------------------------------- CONSTANTS\\r\\n  uint internal constant DENOMINATOR = 100_000;\\r\\n\\r\\n  /// @dev 0.5% of max loss for strategy TVL\\r\\n  /// @notice Same value as StrategySplitterV2.HARDWORK_LOSS_TOLERANCE\\r\\n  uint public constant HARDWORK_LOSS_TOLERANCE = 500;\\r\\n\\r\\n  /// @dev 0.5% of max profit for strategy TVL\\r\\n  /// @notice Limit max amount of profit that can be send to insurance after price changing\\r\\n  uint public constant PRICE_CHANGE_PROFIT_TOLERANCE = HARDWORK_LOSS_TOLERANCE;\\r\\n\\r\\n//endregion --------------------------------------- CONSTANTS\\r\\n\\r\\n//region----------------------------------------- EVENTS\\r\\n  event LiquidationThresholdChanged(address token, uint amount);\\r\\n  event ReinvestThresholdPercentChanged(uint amount);\\r\\n  event SendToInsurance(uint sentAmount, uint unsentAmount);\\r\\n\\r\\n  /// @notice Increase to debts between new and previous checkpoints.\\r\\n  /// @param tokens List of possible collateral/borrow assets. One of the is unerlying.\\r\\n  /// @param deltaGains Amounts by which the debt has reduced (supply profit) [sync with {tokens}]\\r\\n  /// @param deltaLosses Amounts by which the debt has increased (increase of amount-to-pay) [sync with {tokens}]\\r\\n  /// @param prices Prices of the {tokens}\\r\\n  /// @param increaseToDebt Total amount of increasing of the debt to the insurance in underlying\\r\\n  event OnIncreaseDebtToInsurance(\\r\\n    address[] tokens,\\r\\n    uint[] deltaGains,\\r\\n    uint[] deltaLosses,\\r\\n    uint[] prices,\\r\\n    int increaseToDebt\\r\\n  );\\r\\n\\r\\n  /// @param increaseToDebt The value on which the debt to insurance was increased\\r\\n  /// @param debtToInsuranceBefore Value of the debt to insurance before fix price change\\r\\n  /// @param debtToInsuranceAfter New value of the debt to insurance\\r\\n  /// @param increaseToDebt Amount on which debt was increased.\\r\\n  /// Actual value {debtToInsuranceAfter}-{debtToInsuranceBefore} can be less than increaseToDebt\\r\\n  /// because some amount can be left uncovered.\\r\\n  event FixPriceChanges(\\r\\n    uint investedAssetsBefore,\\r\\n    uint investedAssetsOut,\\r\\n    int debtToInsuranceBefore,\\r\\n    int debtToInsuranceAfter,\\r\\n    int increaseToDebt\\r\\n  );\\r\\n\\r\\n  /// @param lossToCover Amount of loss that should be covered (it fits to allowed limits, no revert)\\r\\n  /// @param debtToInsuranceInc The amount by which the debt to insurance increases\\r\\n  /// @param amountCovered Actually covered amount of loss. If amountCovered < lossToCover => the insurance is not enough\\r\\n  /// @param lossUncovered Amount of uncovered losses (not enough insurance)\\r\\n  event OnCoverLoss(\\r\\n    uint lossToCover,\\r\\n    int debtToInsuranceInc,\\r\\n    uint amountCovered,\\r\\n    uint lossUncovered\\r\\n  );\\r\\n\\r\\n  /// @notice Value of {debtToInsurance} was increased on {increaseToDebt} inside fix-price-change\\r\\n  /// in the case when invested-asset amounts were increased.\\r\\n  /// @dev See comments in {_coverLossAfterPriceChanging}: actual profit-to-cover amount can be less than {increaseToDebt}\\r\\n  /// @param debtToInsuranceBefore Value of debtToInsurance before fix-price-change\\r\\n  /// @param increaseToDebt Value on which {debtToInsuranceBefore} was incremented\\r\\n  event ChangeDebtToInsuranceOnProfit(\\r\\n    int debtToInsuranceBefore,\\r\\n    int increaseToDebt\\r\\n  );\\r\\n\\r\\n  /// @notice Amount {lossCovered}+{lossUncovered} should be covered, but it's too high and will produce revert\\r\\n  /// on the splitter side. So, only {lossCovered} can be covered, {lossUncovered} are not covered\\r\\n  event UncoveredLoss(uint lossCovered, uint lossUncovered, uint investedAssetsBefore, uint investedAssetsAfter);\\r\\n\\r\\n  /// @notice Register amounts received for supplying collaterals and amount paid for the debts\\r\\n  /// @param gains Amount received by all pool adapters for the provided collateral, in underlying\\r\\n  /// @param losses Amount paid by all pool adapters for the debts, in underlying\\r\\n  event BorrowResults(uint gains, uint losses);\\r\\n//endregion----------------------------------------- EVENTS\\r\\n\\r\\n//region----------------------------------------- MAIN LOGIC\\r\\n  /// @notice Get balances of the {tokens_} except balance of the token at {indexAsset} position\\r\\n  function getAvailableBalances(\\r\\n    address[] memory tokens_,\\r\\n    uint indexAsset\\r\\n  ) external view returns (uint[] memory) {\\r\\n    uint len = tokens_.length;\\r\\n    uint[] memory amountsToConvert = new uint[](len);\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i == indexAsset) continue;\\r\\n      amountsToConvert[i] = IERC20(tokens_[i]).balanceOf(address(this));\\r\\n    }\\r\\n    return amountsToConvert;\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice Calculate amount of liquidity that should be withdrawn from the pool to get {targetAmount_}\\r\\n  ///               liquidityAmount = _depositorLiquidity() * {liquidityRatioOut} / 1e18\\r\\n  ///         User needs to withdraw {targetAmount_} in some asset.\\r\\n  ///         There are three kinds of available liquidity:\\r\\n  ///         1) liquidity in the pool - {depositorLiquidity_}\\r\\n  ///         2) Converted amounts on balance of the strategy - {baseAmounts_}\\r\\n  ///         3) Liquidity locked in the debts.\\r\\n  /// @param targetAmount Required amount of main asset to be withdrawn from the strategy; type(uint).max - withdraw all\\r\\n  /// @param quoteAmounts Results of _depositorQuoteExit(depositorLiquidity)\\r\\n  /// @return resultAmount Amount of liquidity that should be withdrawn from the pool, cannot exceed depositorLiquidity\\r\\n  function getLiquidityAmount(\\r\\n    uint targetAmount,\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n    ITetuConverter converter,\\r\\n    uint[] memory quoteAmounts,\\r\\n    uint depositorLiquidity,\\r\\n    uint indexUnderlying\\r\\n  ) external view returns (\\r\\n    uint resultAmount\\r\\n  ) {\\r\\n    // total amount of assetsInPool recalculated to the underlying\\r\\n    // we need to calculate this value in the case of partial withdraw only\\r\\n    // so we assume below that it is equal to 0 if full withdraw is required\\r\\n    uint totalUnderlying;\\r\\n\\r\\n    if (targetAmount != type(uint).max) {\\r\\n      // reduce targetAmount_ on the amounts of not-underlying assets available on the balance\\r\\n      uint len = tokens.length;\\r\\n      (uint[] memory prices, uint[] memory decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(converter), tokens, len);\\r\\n\\r\\n      // calculate total amount of assets invested to the pool\\r\\n      for (uint i; i < tokens.length; i = AppLib.uncheckedInc(i)) {\\r\\n        totalUnderlying += (indexAsset == i)\\r\\n          ? quoteAmounts[i]\\r\\n          : quoteAmounts[i] * prices[i] * decs[indexUnderlying] / prices[indexUnderlying] / decs[i];\\r\\n      }\\r\\n\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        // assume here that the targetAmount_ is already reduced on available balance of the target asset\\r\\n        if (indexAsset == i) continue;\\r\\n\\r\\n        uint tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\r\\n        if (tokenBalance != 0) {\\r\\n          uint tokenBalanceInAsset = tokenBalance * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\\r\\n\\r\\n          targetAmount = targetAmount > tokenBalanceInAsset\\r\\n            ? targetAmount - tokenBalanceInAsset\\r\\n            : 0;\\r\\n\\r\\n          uint tokenBalanceInUnderlying = indexUnderlying == indexAsset\\r\\n            ? tokenBalanceInAsset\\r\\n            : tokenBalance * prices[i] * decs[indexUnderlying] / prices[indexUnderlying] / decs[i];\\r\\n\\r\\n          totalUnderlying = totalUnderlying > tokenBalanceInUnderlying\\r\\n            ? totalUnderlying - tokenBalanceInUnderlying\\r\\n            : 0;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (indexAsset != indexUnderlying) {\\r\\n        // convert targetAmount_ to underlying\\r\\n        targetAmount =  targetAmount * prices[indexAsset] * decs[indexUnderlying] / prices[indexUnderlying] / decs[indexAsset];\\r\\n      }\\r\\n    }\\r\\n\\r\\n    uint liquidityRatioOut = totalUnderlying == 0\\r\\n      ? 1e18\\r\\n      : ((targetAmount == 0)\\r\\n        ? 0\\r\\n        : 1e18 * 101 * targetAmount / totalUnderlying / 100 // a part of amount that we are going to withdraw + 1% on top\\r\\n      );\\r\\n\\r\\n    resultAmount = liquidityRatioOut == 0\\r\\n      ? 0\\r\\n      : Math.min(liquidityRatioOut * depositorLiquidity / 1e18, depositorLiquidity);\\r\\n  }\\r\\n\\r\\n  /// @notice Claim rewards from tetuConverter, generate result list of all available rewards and airdrops\\r\\n  /// @dev The post-processing is rewards conversion to the main asset\\r\\n  /// @param tokens_ tokens received from {_depositorPoolAssets}\\r\\n  /// @param rewardTokens_ List of rewards claimed from the internal pool\\r\\n  /// @param rewardTokens_ Amounts of rewards claimed from the internal pool\\r\\n  /// @param tokensOut List of available rewards - not zero amounts, reward tokens don't repeat\\r\\n  /// @param amountsOut Amounts of available rewards\\r\\n  function claimConverterRewards(\\r\\n    ITetuConverter converter_,\\r\\n    address[] memory tokens_,\\r\\n    address[] memory rewardTokens_,\\r\\n    uint[] memory rewardAmounts_,\\r\\n    uint[] memory balancesBefore\\r\\n  ) external returns (\\r\\n    address[] memory tokensOut,\\r\\n    uint[] memory amountsOut\\r\\n  ) {\\r\\n    // Rewards from TetuConverter\\r\\n    (address[] memory tokensTC, uint[] memory amountsTC) = converter_.claimRewards(address(this));\\r\\n\\r\\n    // Join arrays and recycle tokens\\r\\n    (tokensOut, amountsOut) = TokenAmountsLib.combineArrays(\\r\\n      rewardTokens_, rewardAmounts_,\\r\\n      tokensTC, amountsTC,\\r\\n      // by default, depositor assets have zero amounts here\\r\\n      tokens_, new uint[](tokens_.length)\\r\\n    );\\r\\n\\r\\n    // set fresh balances for depositor tokens\\r\\n    uint len = tokensOut.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      for (uint j; j < tokens_.length; j = AppLib.uncheckedInc(j)) {\\r\\n        if (tokensOut[i] == tokens_[j]) {\\r\\n          amountsOut[i] = IERC20(tokens_[j]).balanceOf(address(this)) - balancesBefore[j];\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // filter zero amounts out\\r\\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokensOut, amountsOut);\\r\\n  }\\r\\n\\r\\n  /// @notice Get price of {tokenB} in term of {tokenA} with 18 decimals\\r\\n  function getOracleAssetsPrice(ITetuConverter converter, address tokenA, address tokenB) external view returns (\\r\\n    uint price\\r\\n  ) {\\r\\n    IPriceOracle oracle = AppLib._getPriceOracle(converter);\\r\\n    uint priceA = oracle.getAssetPrice(tokenA);\\r\\n    uint priceB = oracle.getAssetPrice(tokenB);\\r\\n    price = priceA > 0 ? 1e18 * priceB / priceA : type(uint).max;\\r\\n  }\\r\\n\\r\\n  function getAssetPriceFromConverter(ITetuConverter converter, address token) external view returns (uint) {\\r\\n    return AppLib._getPriceOracle(converter).getAssetPrice(token);\\r\\n  }\\r\\n\\r\\n  /// @notice Try to find zero amount\\r\\n  /// @return True if {amounts_} array contains zero amount\\r\\n  function findZeroAmount(uint[] memory amounts_) internal pure returns (bool) {\\r\\n    uint len = amounts_.length;\\r\\n    for (uint i = 0; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (amounts_[i] == 0) return true;\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n//endregion ----------------------------------------- MAIN LOGIC\\r\\n\\r\\n//region -------------------------------------------- Cover loss, send profit to insurance\\r\\n  /// @notice Send given {amount} of {asset} (== underlying) to the insurance\\r\\n  /// @param totalAssets_ Total strategy balance = balance of underlying + current invested assets amount\\r\\n  /// @param balance Current balance of the underlying\\r\\n  /// @return sentAmount Amount of underlying sent to the insurance\\r\\n  /// @return unsentAmount Missed part of the {amount} that were not sent to the insurance\\r\\n  function sendToInsurance(address asset, uint amount, address splitter, uint totalAssets_, uint balance) external returns (\\r\\n    uint sentAmount,\\r\\n    uint unsentAmount\\r\\n  ) {\\r\\n    return _sendToInsurance(asset, amount, splitter, totalAssets_, balance);\\r\\n  }\\r\\n\\r\\n  function _sendToInsurance(address asset, uint amount, address splitter, uint totalAssets_, uint balance) internal returns (\\r\\n    uint sentAmount,\\r\\n    uint unsentAmount\\r\\n  ) {\\r\\n    uint amountToSend = Math.min(amount, balance);\\r\\n    if (amountToSend != 0) {\\r\\n      // max amount that can be send to insurance is limited by PRICE_CHANGE_PROFIT_TOLERANCE\\r\\n\\r\\n      // Amount limitation should be implemented in the same way as in StrategySplitterV2._coverLoss\\r\\n      // Revert or cut amount in both cases\\r\\n\\r\\n      require(totalAssets_ != 0, AppErrors.ZERO_BALANCE);\\r\\n      amountToSend = Math.min(amountToSend, PRICE_CHANGE_PROFIT_TOLERANCE * totalAssets_ / 100_000);\\r\\n      //require(amountToSend <= PRICE_CHANGE_PROFIT_TOLERANCE * strategyBalance / 100_000, AppErrors.EARNED_AMOUNT_TOO_HIGH);\\r\\n\\r\\n      IERC20(asset).safeTransfer(address(ITetuVaultV2(ISplitter(splitter).vault()).insurance()), amountToSend);\\r\\n    }\\r\\n\\r\\n    sentAmount = amountToSend;\\r\\n    unsentAmount = amount > amountToSend\\r\\n      ? amount - amountToSend\\r\\n      : 0;\\r\\n\\r\\n    emit SendToInsurance(sentAmount, unsentAmount);\\r\\n  }\\r\\n\\r\\n  function _registerIncome(uint assetBefore, uint assetAfter) internal pure returns (uint earned, uint lost) {\\r\\n    if (assetAfter > assetBefore) {\\r\\n      earned = assetAfter - assetBefore;\\r\\n    } else {\\r\\n      lost = assetBefore - assetAfter;\\r\\n    }\\r\\n    return (earned, lost);\\r\\n  }\\r\\n\\r\\n  /// @notice Send ProfitToCover to insurance - code fragment of the requirePayAmountBack()\\r\\n  ///         moved here to reduce size of requirePayAmountBack()\\r\\n  /// @param theAsset_ The asset passed from Converter\\r\\n  /// @param balanceTheAsset_ Current balance of {theAsset_}\\r\\n  /// @param investedAssets_ Value of investedAssets after call fixPriceChange()\\r\\n  /// @param earnedByPrices_ ProfitToCover received from fixPriceChange()\\r\\n  /// @return balanceTheAssetOut Final balance of {theAsset_} (after sending profit-to-cover to the insurance)\\r\\n  function sendProfitGetAssetBalance(\\r\\n    address theAsset_,\\r\\n    uint balanceTheAsset_,\\r\\n    uint investedAssets_,\\r\\n    uint earnedByPrices_,\\r\\n    IStrategyV3.BaseState storage baseState_\\r\\n  ) external returns (\\r\\n    uint balanceTheAssetOut\\r\\n  ) {\\r\\n    balanceTheAssetOut = balanceTheAsset_;\\r\\n    if (earnedByPrices_ != 0) {\\r\\n      address underlying = baseState_.asset;\\r\\n      uint balanceUnderlying = theAsset_ == underlying\\r\\n        ? balanceTheAsset_\\r\\n        : AppLib.balance(underlying);\\r\\n\\r\\n      _sendToInsurance(underlying, earnedByPrices_, baseState_.splitter, investedAssets_ + balanceUnderlying, balanceUnderlying);\\r\\n\\r\\n      if (theAsset_ == underlying) {\\r\\n        balanceTheAssetOut = AppLib.balance(theAsset_);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n//endregion -------------------------------------------- Cover loss, send profit to insurance\\r\\n\\r\\n//region ---------------------------------------- Setters\\r\\n  function checkReinvestThresholdPercentChanged(address controller, uint percent_) external {\\r\\n    StrategyLib.onlyOperators(controller);\\r\\n    require(percent_ <= DENOMINATOR, StrategyLib.WRONG_VALUE);\\r\\n    emit ReinvestThresholdPercentChanged(percent_);\\r\\n  }\\r\\n\\r\\n  function checkLiquidationThresholdChanged(address controller, address token, uint amount) external {\\r\\n    StrategyLib.onlyOperators(controller);\\r\\n    emit LiquidationThresholdChanged(token, amount);\\r\\n  }\\r\\n//endregion ---------------------------------------- Setters\\r\\n\\r\\n//region ---------------------------------------- Withdraw helpers\\r\\n  /// @notice Get amount of assets that we expect to receive after withdrawing\\r\\n  ///         ratio = amount-LP-tokens-to-withdraw / total-amount-LP-tokens-in-pool\\r\\n  /// @param reserves_ Reserves of the {poolAssets_}, same order, same length (we don't check it)\\r\\n  ///                  The order of tokens should be same as in {_depositorPoolAssets()},\\r\\n  ///                  one of assets must be {asset_}\\r\\n  /// @param liquidityAmount_ Amount of LP tokens that we are going to withdraw\\r\\n  /// @param totalSupply_ Total amount of LP tokens in the depositor\\r\\n  /// @return withdrawnAmountsOut Expected withdrawn amounts (decimals == decimals of the tokens)\\r\\n  function getExpectedWithdrawnAmounts(\\r\\n    uint[] memory reserves_,\\r\\n    uint liquidityAmount_,\\r\\n    uint totalSupply_\\r\\n  ) internal pure returns (\\r\\n    uint[] memory withdrawnAmountsOut\\r\\n  ) {\\r\\n    uint ratio = totalSupply_ == 0\\r\\n      ? 0\\r\\n      : (liquidityAmount_ >= totalSupply_\\r\\n        ? 1e18\\r\\n        : 1e18 * liquidityAmount_ / totalSupply_\\r\\n      );\\r\\n\\r\\n    uint len = reserves_.length;\\r\\n    withdrawnAmountsOut = new uint[](len);\\r\\n\\r\\n    if (ratio != 0) {\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        withdrawnAmountsOut[i] = reserves_[i] * ratio / 1e18;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate expected amount of the main asset after withdrawing\\r\\n  /// @param withdrawnAmounts_ Expected amounts to be withdrawn from the pool\\r\\n  /// @param amountsToConvert_ Amounts on balance initially available for the conversion\\r\\n  /// @return amountsOut Expected amounts of the main asset received after conversion withdrawnAmounts+amountsToConvert\\r\\n  function getExpectedAmountMainAsset(\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n    ITetuConverter converter,\\r\\n    uint[] memory withdrawnAmounts_,\\r\\n    uint[] memory amountsToConvert_\\r\\n  ) internal returns (\\r\\n    uint[] memory amountsOut\\r\\n  ) {\\r\\n    uint len = tokens.length;\\r\\n    amountsOut = new uint[](len);\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i == indexAsset) {\\r\\n        amountsOut[i] = withdrawnAmounts_[i];\\r\\n      } else {\\r\\n        uint amount = withdrawnAmounts_[i] + amountsToConvert_[i];\\r\\n        if (amount != 0) {\\r\\n          (amountsOut[i],) = converter.quoteRepay(address(this), tokens[indexAsset], tokens[i], amount);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return amountsOut;\\r\\n  }\\r\\n\\r\\n  /// @notice Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}\\r\\n  /// @param amountsToConvert Amounts of {tokens} to be converted, they are located on the balance before withdraw\\r\\n  /// @param withdrawnAmounts Amounts of {tokens} that were withdrew from the pool\\r\\n  function postWithdrawActions(\\r\\n    ITetuConverter converter,\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n\\r\\n    uint[] memory reservesBeforeWithdraw,\\r\\n    uint liquidityAmountWithdrew,\\r\\n    uint totalSupplyBeforeWithdraw,\\r\\n\\r\\n    uint[] memory amountsToConvert,\\r\\n    uint[] memory withdrawnAmounts\\r\\n  ) external returns (\\r\\n    uint[] memory expectedMainAssetAmounts,\\r\\n    uint[] memory _amountsToConvert\\r\\n  ) {\\r\\n    // estimate expected amount of assets to be withdrawn\\r\\n    uint[] memory expectedWithdrawAmounts = getExpectedWithdrawnAmounts(\\r\\n      reservesBeforeWithdraw,\\r\\n      liquidityAmountWithdrew,\\r\\n      totalSupplyBeforeWithdraw\\r\\n    );\\r\\n\\r\\n    // from received amounts after withdraw calculate how much we receive from converter for them in terms of the underlying asset\\r\\n    expectedMainAssetAmounts = getExpectedAmountMainAsset(\\r\\n      tokens,\\r\\n      indexAsset,\\r\\n      converter,\\r\\n      expectedWithdrawAmounts,\\r\\n      amountsToConvert\\r\\n    );\\r\\n\\r\\n    uint len = tokens.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      amountsToConvert[i] += withdrawnAmounts[i];\\r\\n    }\\r\\n\\r\\n    return (expectedMainAssetAmounts, amountsToConvert);\\r\\n  }\\r\\n\\r\\n  /// @notice return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}\\r\\n  function postWithdrawActionsEmpty(\\r\\n    ITetuConverter converter,\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n    uint[] memory amountsToConvert_\\r\\n  ) external returns (\\r\\n    uint[] memory expectedAmountsMainAsset\\r\\n  ) {\\r\\n    expectedAmountsMainAsset = getExpectedAmountMainAsset(\\r\\n      tokens,\\r\\n      indexAsset,\\r\\n      converter,\\r\\n      // there are no withdrawn amounts\\r\\n      new uint[](tokens.length), // array with all zero values\\r\\n      amountsToConvert_\\r\\n    );\\r\\n  }\\r\\n//endregion ------------------------------------- Withdraw helpers\\r\\n\\r\\n//region---------------------------------------- calcInvestedAssets\\r\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\r\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\r\\n  /// @param indexAsset Index of the underlying (main asset) in {tokens}\\r\\n  /// @param makeCheckpoint_ True - call IBookkeeper.checkpoint in the converter\\r\\n  /// @return amountOut Invested asset amount under control (in terms of underlying)\\r\\n  /// @return prices Asset prices in USD, decimals 18\\r\\n  /// @return decs 10**decimals\\r\\n  function calcInvestedAssets(\\r\\n    address[] memory tokens,\\r\\n    uint[] memory depositorQuoteExitAmountsOut,\\r\\n    uint indexAsset,\\r\\n    ITetuConverter converter_,\\r\\n    bool makeCheckpoint_\\r\\n  ) external returns (\\r\\n    uint amountOut,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs\\r\\n  ) {\\r\\n    return _calcInvestedAssets(tokens, depositorQuoteExitAmountsOut, indexAsset, converter_, makeCheckpoint_);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\r\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\r\\n  /// @param indexAsset Index of the underlying (main asset) in {tokens}\\r\\n  /// @param makeCheckpoint_ True - call IBookkeeper.checkpoint in the converter\\r\\n  /// @return amountOut Invested asset amount under control (in terms of underlying)\\r\\n  /// @return prices Asset prices in USD, decimals 18\\r\\n  /// @return decs 10**decimals\\r\\n  function _calcInvestedAssets(\\r\\n    address[] memory tokens,\\r\\n    uint[] memory depositorQuoteExitAmountsOut,\\r\\n    uint indexAsset,\\r\\n    ITetuConverter converter_,\\r\\n    bool makeCheckpoint_\\r\\n  ) internal returns (\\r\\n    uint amountOut,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs\\r\\n  ) {\\r\\n    CalcInvestedAssetsLocal memory v;\\r\\n    v.len = tokens.length;\\r\\n    v.asset = tokens[indexAsset];\\r\\n\\r\\n    // calculate prices, decimals\\r\\n    (prices, decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(converter_), tokens, v.len);\\r\\n\\r\\n    // A debt is registered below if we have X amount of asset, need to pay Y amount of the asset and X < Y\\r\\n    // In this case: debt = Y - X, the order of tokens is the same as in {tokens} array\\r\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i == indexAsset) {\\r\\n        // Current strategy balance of main asset is not taken into account here because it's add by splitter\\r\\n        amountOut += depositorQuoteExitAmountsOut[i];\\r\\n      } else {\\r\\n        v.token = tokens[i];\\r\\n        // possible reverse debt: collateralAsset = tokens[i], borrowAsset = underlying\\r\\n        // investedAssets is calculated using exact debts, debt-gaps are not taken into account\\r\\n        (uint toPay, uint collateral) = converter_.getDebtAmountCurrent(address(this), v.token, v.asset, false);\\r\\n        if (amountOut < toPay) {\\r\\n          setDebt(v, indexAsset, toPay);\\r\\n        } else {\\r\\n          amountOut -= toPay;\\r\\n        }\\r\\n\\r\\n        // available amount to repay\\r\\n        uint toRepay = collateral + IERC20(v.token).balanceOf(address(this)) + depositorQuoteExitAmountsOut[i];\\r\\n\\r\\n        // direct debt: collateralAsset = underlying, borrowAsset = tokens[i]\\r\\n        // investedAssets is calculated using exact debts, debt-gaps are not taken into account\\r\\n        (toPay, collateral) = converter_.getDebtAmountCurrent(address(this), v.asset, v.token, false);\\r\\n        amountOut += collateral;\\r\\n\\r\\n        if (toRepay >= toPay) {\\r\\n          amountOut += (toRepay - toPay) * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\\r\\n        } else {\\r\\n          // there is not enough amount to pay the debt\\r\\n          // let's register a debt and try to resolve it later below\\r\\n          setDebt(v, i, toPay - toRepay);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    if (v.debts.length == v.len) {\\r\\n      // we assume here, that it would be always profitable to save collateral\\r\\n      // f.e. if there is not enough amount of USDT on our balance and we have a debt in USDT,\\r\\n      // it's profitable to change any available asset to USDT, pay the debt and return the collateral back\\r\\n      for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\r\\n        if (v.debts[i] == 0) continue;\\r\\n\\r\\n        // estimatedAssets should be reduced on the debt-value\\r\\n        // this estimation is approx and do not count price impact on the liquidation\\r\\n        // we will able to count the real output only after withdraw process\\r\\n        uint debtInAsset = v.debts[i] * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\\r\\n        if (debtInAsset > amountOut) {\\r\\n          // The debt is greater than we can pay. We shouldn't try to pay the debt in this case\\r\\n          amountOut = 0;\\r\\n        } else {\\r\\n          amountOut -= debtInAsset;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (makeCheckpoint_) {\\r\\n      _callCheckpoint(tokens, converter_);\\r\\n    }\\r\\n\\r\\n    return (amountOut, prices, decs);\\r\\n  }\\r\\n\\r\\n  /// @notice Make new checkpoint in converter's bookkeeper\\r\\n  /// As results, a next call of checkpoint will return amount of increases to debts (\\\"deltas\\\")\\r\\n  /// since current moment up to the moment of the next call (we need such deltas in _fixPriceChanges only)\\r\\n  function _callCheckpoint(address[] memory tokens, ITetuConverter converter_) internal returns (\\r\\n    uint[] memory deltaGains,\\r\\n    uint[] memory deltaLosses\\r\\n  ) {\\r\\n    IBookkeeper a = IBookkeeper(IConverterController(converter_.controller()).bookkeeper());\\r\\n    return a.checkpoint(tokens);\\r\\n  }\\r\\n\\r\\n  /// @notice Lazy initialization of v.debts, add {value} to {v.debts[index]}\\r\\n  function setDebt(CalcInvestedAssetsLocal memory v, uint index, uint value) pure internal {\\r\\n    if (v.debts.length == 0) {\\r\\n      // lazy initialization\\r\\n      v.debts = new uint[](v.len);\\r\\n    }\\r\\n\\r\\n    // to pay the following amount we need to swap some other asset at first\\r\\n    v.debts[index] += value;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate the token amounts for deposit and amount of loss (as old-total-asset - new-total-asset)\\r\\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\\r\\n  /// @return loss New total assets - old total assets\\r\\n  /// @return tokenAmounts Balances of the token A and token B.\\r\\n  ///                     If any balance is zero it's not possible to enter to the pool, so return empty array (len 0)\\r\\n  function getTokenAmountsPair(\\r\\n    ITetuConverter converter,\\r\\n    uint totalAssets,\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint[2] calldata liquidationThresholdsAB\\r\\n  ) external returns (\\r\\n    uint loss,\\r\\n    uint[] memory tokenAmounts\\r\\n  ) {\\r\\n    tokenAmounts = new uint[](2);\\r\\n    tokenAmounts[0] = AppLib.balance(tokenA);\\r\\n    tokenAmounts[1] = AppLib.balance(tokenB);\\r\\n\\r\\n    address[] memory tokens = new address[](2);\\r\\n    tokens[0] = tokenA;\\r\\n    tokens[1] = tokenB;\\r\\n\\r\\n    uint[] memory amounts = new uint[](2);\\r\\n    amounts[0] = tokenAmounts[0];\\r\\n\\r\\n    (uint newTotalAssets,,) = _calcInvestedAssets(tokens, amounts, 0, converter, true);\\r\\n    return (\\r\\n      newTotalAssets < totalAssets\\r\\n        ? totalAssets - newTotalAssets\\r\\n        : 0,\\r\\n      (tokenAmounts[0] < liquidationThresholdsAB[0] || tokenAmounts[1] < liquidationThresholdsAB[1])\\r\\n        ? new uint[](0)\\r\\n        : tokenAmounts\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Swap can give us more amount out than expected, so we will receive increasing of share price.\\r\\n  ///         To prevent it, we need to send exceeded amount to insurance,\\r\\n  ///         but it's too expensive to make such transfer at the end of withdrawAggByStep.\\r\\n  ///         So, we postpone sending the profit until the next call of fixPriceChange\\r\\n  ///         by manually setting investedAssets equal to the oldTotalAssets\\r\\n  /// @dev If profitToCover was sent only partly, we will postpone sending of remain amount up to the next call\\r\\n  ///      of fixPriceChange in same manner\\r\\n  /// @param oldTotalAssets Total asset at the moment after last call of fixPriceChange,\\r\\n  ///                       decreased on the value of profitToCover.\\r\\n  function fixTooHighInvestedAssets(\\r\\n    address asset_,\\r\\n    uint oldTotalAssets,\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs_\\r\\n  ) external {\\r\\n    uint balance = IERC20(asset_).balanceOf(address(this));\\r\\n    uint newTotalAssets = csbs_.investedAssets + balance;\\r\\n\\r\\n    if (oldTotalAssets < newTotalAssets) {\\r\\n      // total asset was increased (i.e. because of too profitable swaps)\\r\\n      // this increment will increase share price\\r\\n      // we should send added amount to insurance to avoid share price change\\r\\n      // anyway, it's too expensive to do it here\\r\\n      // so, we postpone sending the profit until the next call of fixPriceChange\\r\\n      if (oldTotalAssets > balance) {\\r\\n        csbs_.investedAssets = oldTotalAssets - balance;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n//endregion------------------------------------- calcInvestedAssets\\r\\n\\r\\n//region ------------------------------------------------------- Bookkeeper logic\\r\\n  /// @notice Make checkpoint (it's writable function) and calculate total cost of the deltas in terms of the {asset}\\r\\n  /// @param tokens Full list of tokens that can be used as collateral/borrow asset by the current strategy\\r\\n  /// @param indexAsset Index of the underlying in {tokens}\\r\\n  /// @return increaseToDebt Total increase-to-debt since previous checkpoint [in underlying]\\r\\n  function _getIncreaseToDebt(\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    ITetuConverter converter\\r\\n  ) internal returns (\\r\\n    int increaseToDebt\\r\\n  ) {\\r\\n    IBookkeeper a = IBookkeeper(IConverterController(converter.controller()).bookkeeper());\\r\\n    (uint[] memory deltaGains, uint[] memory deltaLosses) = a.checkpoint(tokens);\\r\\n\\r\\n    uint len = tokens.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (i == indexAsset) {\\r\\n        increaseToDebt -= int(deltaGains[i]);\\r\\n        increaseToDebt += int(deltaLosses[i]);\\r\\n      } else {\\r\\n        increaseToDebt += (int(deltaLosses[i]) - int(deltaGains[i]))\\r\\n          * int(prices[i]) * int(decs[indexAsset]) / int(prices[indexAsset]) / int(decs[i]);\\r\\n      }\\r\\n    }\\r\\n    emit OnIncreaseDebtToInsurance(tokens, deltaGains, deltaLosses, prices, increaseToDebt);\\r\\n\\r\\n    return increaseToDebt;\\r\\n  }\\r\\n\\r\\n  /// @notice Register income and cover possible loss after price changing, emit FixPriceChanges\\r\\n  /// @param investedAssetsBefore Currently stored value of _csbs.investedAssets\\r\\n  /// @param investedAssetsAfter Actual value of invested assets calculated at the current moment\\r\\n  /// @param increaseToDebt The amount by which the total loan debts increased for the selected period\\r\\n  /// @return earned Amount earned because of price changing\\r\\n  function _coverLossAfterPriceChanging(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    uint investedAssetsBefore,\\r\\n    uint investedAssetsAfter,\\r\\n    int increaseToDebt,\\r\\n    IStrategyV3.BaseState storage baseState\\r\\n  ) internal returns (uint earned) {\\r\\n    int debtToInsurance0 = csbs.debtToInsurance;\\r\\n    if (investedAssetsAfter > investedAssetsBefore) {\\r\\n      earned = investedAssetsAfter - investedAssetsBefore;\\r\\n      if (increaseToDebt != 0) {\\r\\n        // Earned amount will be send to the insurance later.\\r\\n        // Probably it can be reduced by same limitations as {lost} amount below\\r\\n        // and so, it will be necessary to decrease increaseToDebt proportionally.\\r\\n        // For simplicity, we increase debtToInsurance on full increaseToDebt always\\r\\n        // in assumption, that such profits are always low.\\r\\n        csbs.debtToInsurance += increaseToDebt;\\r\\n        emit ChangeDebtToInsuranceOnProfit(debtToInsurance0, increaseToDebt);\\r\\n      }\\r\\n    } else {\\r\\n      uint lost = investedAssetsBefore - investedAssetsAfter;\\r\\n      if (lost != 0) {\\r\\n        uint totalAsset = investedAssetsAfter + IERC20(baseState.asset).balanceOf(address(this));\\r\\n        (uint lossToCover, uint lossUncovered) = _getSafeLossToCover(lost, totalAsset);\\r\\n\\r\\n        if (lossUncovered != 0) {\\r\\n          // we need to cover lost-amount, but this amount is too high and will produce revert in the splitter\\r\\n          // so, we will cover only part of {lost} and leave other part uncovered.\\r\\n          emit UncoveredLoss(lossToCover, lossUncovered, investedAssetsBefore, investedAssetsAfter);\\r\\n        }\\r\\n\\r\\n        // if we compensate lost only partially, we reduce both amounts \\\"from prices\\\" and \\\"from debts\\\" proportionally\\r\\n        _coverLossAndCheckResults(csbs, baseState.splitter, lossToCover, increaseToDebt * int(lossToCover) / int(lost));\\r\\n\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit FixPriceChanges(\\r\\n      investedAssetsBefore,\\r\\n      investedAssetsAfter,\\r\\n      debtToInsurance0,\\r\\n      csbs.debtToInsurance,\\r\\n      increaseToDebt\\r\\n    );\\r\\n    return earned;\\r\\n  }\\r\\n\\r\\n  /// @notice Call coverPossibleStrategyLoss, covered loss will be sent to vault.\\r\\n  ///         If the loss were covered only partially, emit {NotEnoughInsurance}\\r\\n  function coverLossAndCheckResults(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    address splitter,\\r\\n    uint lossToCover\\r\\n  ) external {\\r\\n    _coverLossAndCheckResults(csbs, splitter, lossToCover, int(lossToCover));\\r\\n  }\\r\\n\\r\\n  /// @notice Call coverPossibleStrategyLoss, covered loss will be sent to vault.\\r\\n  function _coverLossAndCheckResults(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    address splitter,\\r\\n    uint lossToCover,\\r\\n    int debtToInsuranceInc\\r\\n  ) internal {\\r\\n    address asset = ISplitter(splitter).asset();\\r\\n    address vault = ISplitter(splitter).vault();\\r\\n\\r\\n    uint balanceBefore = IERC20(asset).balanceOf(vault);\\r\\n    ISplitter(splitter).coverPossibleStrategyLoss(0, lossToCover);\\r\\n    uint balanceAfter = IERC20(asset).balanceOf(vault);\\r\\n\\r\\n    if (debtToInsuranceInc != 0) {\\r\\n      csbs.debtToInsurance += debtToInsuranceInc;\\r\\n    }\\r\\n\\r\\n    uint delta = AppLib.sub0(balanceAfter, balanceBefore);\\r\\n    uint uncovered = AppLib.sub0(lossToCover, delta);\\r\\n\\r\\n    // we don't add uncovered amount to the debts to the insurance\\r\\n    emit OnCoverLoss(\\r\\n      lossToCover,\\r\\n      lossToCover == 0\\r\\n        ? int(0)\\r\\n        : debtToInsuranceInc * int(lossToCover - uncovered) / int(lossToCover),\\r\\n      delta,\\r\\n      uncovered\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Cut loss-value to safe value that doesn't produce revert inside splitter\\r\\n  function _getSafeLossToCover(uint loss, uint totalAssets_) internal pure returns (\\r\\n    uint lossToCover,\\r\\n    uint lossUncovered\\r\\n  ) {\\r\\n    // see StrategySplitterV2._declareStrategyIncomeAndCoverLoss, _coverLoss implementations\\r\\n    lossToCover = Math.min(loss, ConverterStrategyBaseLib2.HARDWORK_LOSS_TOLERANCE * totalAssets_ / 100_000);\\r\\n    lossUncovered = AppLib.sub0(loss, lossToCover);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate profit/loss happened because of price changing.\\r\\n  /// Try to cover the loss, send the profit to the insurance.\\r\\n  /// Increment debt to insurance on amount of increase of the debts.\\r\\n  /// @param amountsInPool Amount of tokens that can be received from the pool after withdrawing all liquidity.\\r\\n  /// The order of tokens is same as in the {tokens}\\r\\n  /// @param tokens Result of {_depositorPoolAssets}\\r\\n  /// @param indexAsset Index of the underlying in {tokens}\\r\\n  /// @return investedAssetsOut Updated value of {csbs.investedAssets}\\r\\n  /// @return earnedOut Profit that was received because of price changes. It should be sent back to insurance.\\r\\n  function fixPriceChanges(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    IStrategyV3.BaseState storage baseState,\\r\\n    uint[] memory amountsInPool,\\r\\n    address[] memory tokens,\\r\\n    uint indexAsset\\r\\n  ) external returns (\\r\\n    uint investedAssetsOut,\\r\\n    uint earnedOut\\r\\n  ) {\\r\\n    ITetuConverter converter = csbs.converter;\\r\\n    uint investedAssetsBefore = csbs.investedAssets;\\r\\n\\r\\n    uint[] memory prices;\\r\\n    uint[] memory decs;\\r\\n\\r\\n    (investedAssetsOut, prices, decs) = _calcInvestedAssets(tokens, amountsInPool, indexAsset, converter, false);\\r\\n    csbs.investedAssets = investedAssetsOut;\\r\\n\\r\\n    int increaseToDebt = _getIncreaseToDebt(tokens, indexAsset, prices, decs, converter);\\r\\n    earnedOut = _coverLossAfterPriceChanging(csbs, investedAssetsBefore, investedAssetsOut, increaseToDebt, baseState);\\r\\n  }\\r\\n\\r\\n  /// @notice Register amounts received for supplying collaterals and amount paid for the debts\\r\\n  ///         for the current period (a new period is started after each hardwork operation)\\r\\n  function registerBorrowResults(ITetuConverter converter, address asset) external {\\r\\n    IBookkeeper a = IBookkeeper(IConverterController(converter.controller()).bookkeeper());\\r\\n    (uint gains, uint losses) = a.startPeriod(asset);\\r\\n    if (gains != 0 && losses != 0) {\\r\\n      emit BorrowResults(gains, losses);\\r\\n    }\\r\\n  }\\r\\n//endregion ------------------------------------------------------- Bookkeeper logic\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xe17e08619f632fa8f9580d655c7c0aac9dbcaf03464adc6dea6b70d2027f1edb\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/algebra/AlgebraConverterStrategyLogicLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./AlgebraLib.sol\\\";\\r\\nimport \\\"./AlgebraDebtLib.sol\\\";\\r\\nimport \\\"./AlgebraStrategyErrors.sol\\\";\\r\\nimport \\\"../../libs/AppLib.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"../pair/PairBasedStrategyLogicLib.sol\\\";\\r\\n\\r\\nlibrary AlgebraConverterStrategyLogicLib {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  //region ------------------------------------------------ Constants\\r\\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_STABLE = 300;\\r\\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE = 500;\\r\\n  uint internal constant HARD_WORK_USD_FEE_THRESHOLD = 100;\\r\\n\\r\\n  INonfungiblePositionManager internal constant ALGEBRA_NFT = INonfungiblePositionManager(0x8eF88E4c7CfbbaC1C163f7eddd4B578792201de6);\\r\\n  IFarmingCenter internal constant FARMING_CENTER = IFarmingCenter(0x7F281A8cdF66eF5e9db8434Ec6D97acc1bc01E78);\\r\\n  //endregion ------------------------------------------------ Constants\\r\\n\\r\\n  //region ------------------------------------------------ Events\\r\\n  event Rebalanced(uint loss, uint profitToCover, uint coveredByRewards);\\r\\n  event RebalancedDebt(uint loss, uint profitToCover, uint coveredByRewards);\\r\\n  event AlgebraFeesClaimed(uint fee0, uint fee1);\\r\\n  event AlgebraRewardsClaimed(uint reward, uint bonusReward);\\r\\n  /// @param loss Total amount of loss\\r\\n  /// @param coveredByRewards Part of the loss covered by rewards\\r\\n  event CoverLoss(uint loss, uint coveredByRewards);\\r\\n  //endregion ------------------------------------------------ Events\\r\\n\\r\\n  //region ------------------------------------------------ Data types\\r\\n\\r\\n  struct State {\\r\\n    PairBasedStrategyLogicLib.PairState pair;\\r\\n    // additional (specific) state\\r\\n\\r\\n    uint tokenId;\\r\\n    // farming\\r\\n    address rewardToken;\\r\\n    address bonusRewardToken;\\r\\n    uint256 startTime;\\r\\n    uint256 endTime;\\r\\n\\r\\n    /// @notice reserve space for future needs\\r\\n    uint[10] __gap;\\r\\n  }\\r\\n\\r\\n  struct RebalanceLocal {\\r\\n    /// @notice Fuse for token A and token B\\r\\n    PairBasedStrategyLib.FuseStateParams fuseAB;\\r\\n    ITetuConverter converter;\\r\\n    IAlgebraPool pool;\\r\\n    address tokenA;\\r\\n    address tokenB;\\r\\n    bool isStablePool;\\r\\n    uint[2] liquidationThresholdsAB;\\r\\n\\r\\n    bool fuseStatusChangedAB;\\r\\n    PairBasedStrategyLib.FuseStatus fuseStatusAB;\\r\\n\\r\\n    uint poolPrice;\\r\\n    uint poolPriceAdjustment;\\r\\n  }\\r\\n\\r\\n  struct EnterLocalVariables {\\r\\n    bool depositorSwapTokens;\\r\\n    uint128 liquidity;\\r\\n    uint tokenId;\\r\\n    int24 lowerTick;\\r\\n    int24 upperTick;\\r\\n  }\\r\\n\\r\\n  struct IsReadyToHardWorkLocal {\\r\\n    address tokenA;\\r\\n    address tokenB;\\r\\n    uint rewardInTermOfTokenA;\\r\\n    uint bonusRewardInTermOfTokenA;\\r\\n    uint fee0;\\r\\n    uint fee1;\\r\\n  }\\r\\n\\r\\n  struct ExitLocal {\\r\\n    address strategyProfitHolder;\\r\\n    uint128 liquidity;\\r\\n    uint reward;\\r\\n    uint bonusReward;\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Data types\\r\\n\\r\\n  //region ------------------------------------------------ Helpers\\r\\n\\r\\n  /// @param controllerPool [controller, pool]\\r\\n  /// @param fuseThresholds Fuse thresholds for tokens (stable pool only)\\r\\n  function initStrategyState(\\r\\n    State storage state,\\r\\n    address[2] calldata controllerPool,\\r\\n    int24 tickRange,\\r\\n    int24 rebalanceTickRange,\\r\\n    address asset_,\\r\\n    bool isStablePool,\\r\\n    uint[4] calldata fuseThresholds\\r\\n  ) external {\\r\\n    require(controllerPool[1] != address(0), AppErrors.ZERO_ADDRESS);\\r\\n    address token0 = IAlgebraPool(controllerPool[1]).token0();\\r\\n    address token1 = IAlgebraPool(controllerPool[1]).token1();\\r\\n\\r\\n    int24[4] memory tickData;\\r\\n    {\\r\\n      int24 tickSpacing = AlgebraLib.tickSpacing();\\r\\n      if (tickRange != 0) {\\r\\n        require(tickRange == tickRange / tickSpacing * tickSpacing, AlgebraStrategyErrors.INCORRECT_TICK_RANGE);\\r\\n        require(rebalanceTickRange == rebalanceTickRange / tickSpacing * tickSpacing, AlgebraStrategyErrors.INCORRECT_REBALANCE_TICK_RANGE);\\r\\n      }\\r\\n      tickData[0] = tickSpacing;\\r\\n      (tickData[1], tickData[2]) = AlgebraDebtLib.calcTickRange(IAlgebraPool(controllerPool[1]), tickRange, tickSpacing);\\r\\n      tickData[3] = rebalanceTickRange;\\r\\n    }\\r\\n\\r\\n    PairBasedStrategyLogicLib.setInitialDepositorValues(\\r\\n      state.pair,\\r\\n      [controllerPool[1], asset_, token0, token1],\\r\\n      tickData,\\r\\n      isStablePool,\\r\\n      fuseThresholds\\r\\n    );\\r\\n\\r\\n    address liquidator = IController(controllerPool[0]).liquidator();\\r\\n    IERC20(token0).approve(liquidator, type(uint).max);\\r\\n    IERC20(token1).approve(liquidator, type(uint).max);\\r\\n    IERC20(token0).approve(address(ALGEBRA_NFT), type(uint).max);\\r\\n    IERC20(token1).approve(address(ALGEBRA_NFT), type(uint).max);\\r\\n  }\\r\\n\\r\\n  function initFarmingState(\\r\\n    State storage state,\\r\\n    IncentiveKey calldata key\\r\\n  ) external {\\r\\n    state.rewardToken = key.rewardToken;\\r\\n    state.bonusRewardToken = key.bonusRewardToken;\\r\\n    state.startTime = key.startTime;\\r\\n    state.endTime = key.endTime;\\r\\n  }\\r\\n\\r\\n  function createSpecificName(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (string memory) {\\r\\n    return string(abi.encodePacked(\\\"Algebra \\\", IERC20Metadata(pairState.tokenA).symbol(), \\\"/\\\", IERC20Metadata(pairState.tokenB).symbol()));\\r\\n  }\\r\\n\\r\\n  function getIncentiveKey(State storage state) internal view returns (IncentiveKey memory) {\\r\\n    return IncentiveKey(state.rewardToken, state.bonusRewardToken, state.pair.pool, state.startTime, state.endTime);\\r\\n  }\\r\\n\\r\\n  function getFees(State storage state) public view returns (uint fee0, uint fee1) {\\r\\n    (fee0, fee1) = AlgebraLib.getFees(IAlgebraPool(state.pair.pool), ALGEBRA_NFT, state.tokenId);\\r\\n  }\\r\\n\\r\\n  function getPoolReserves(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (\\r\\n    uint[] memory reserves\\r\\n  ) {\\r\\n    reserves = new uint[](2);\\r\\n    (uint160 sqrtRatioX96, , , , , ,) = IAlgebraPool(pairState.pool).globalState();\\r\\n\\r\\n    (reserves[0], reserves[1]) = AlgebraLib.getAmountsForLiquidity(\\r\\n      sqrtRatioX96,\\r\\n      pairState.lowerTick,\\r\\n      pairState.upperTick,\\r\\n      pairState.totalLiquidity\\r\\n    );\\r\\n\\r\\n    if (pairState.depositorSwapTokens) {\\r\\n      (reserves[0], reserves[1]) = (reserves[1], reserves[0]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the liquidator swap slippage based on the pool type (stable or volatile).\\r\\n  /// @return The liquidator swap slippage percentage.\\r\\n  function _getLiquidatorSwapSlippage(bool isStablePool) internal pure returns (uint) {\\r\\n    return isStablePool ? LIQUIDATOR_SWAP_SLIPPAGE_STABLE : LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate proportions of the tokens for entry kind 1\\r\\n  /// @param pool Pool instance.\\r\\n  /// @param lowerTick The lower tick of the pool's main range.\\r\\n  /// @param upperTick The upper tick of the pool's main range.\\r\\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\\r\\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\\r\\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\\r\\n  function getEntryDataProportions(IAlgebraPool pool, int24 lowerTick, int24 upperTick, bool depositorSwapTokens) external view returns (uint, uint) {\\r\\n    return AlgebraDebtLib.getEntryDataProportions(pool, lowerTick, upperTick, depositorSwapTokens);\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Helpers\\r\\n\\r\\n  //region ------------------------------------------------ Join the pool\\r\\n\\r\\n  function enter(\\r\\n    State storage state,\\r\\n    uint[] memory amountsDesired_\\r\\n  ) external returns (uint[] memory amountsConsumed, uint liquidityOut) {\\r\\n    EnterLocalVariables memory vars = EnterLocalVariables({\\r\\n      depositorSwapTokens : state.pair.depositorSwapTokens,\\r\\n      liquidity : 0,\\r\\n      tokenId : state.tokenId,\\r\\n      lowerTick : state.pair.lowerTick,\\r\\n      upperTick : state.pair.upperTick\\r\\n    });\\r\\n\\r\\n    (address token0, address token1) = vars.depositorSwapTokens\\r\\n      ? (state.pair.tokenB, state.pair.tokenA)\\r\\n      : (state.pair.tokenA, state.pair.tokenB);\\r\\n    if (vars.depositorSwapTokens) {\\r\\n      (amountsDesired_[0], amountsDesired_[1]) = (amountsDesired_[1], amountsDesired_[0]);\\r\\n    }\\r\\n\\r\\n    amountsConsumed = new uint[](2);\\r\\n\\r\\n    if (vars.tokenId > 0) {\\r\\n      (,,,,int24 nftLowerTick, int24 nftUpperTick,,,,,) = ALGEBRA_NFT.positions(vars.tokenId);\\r\\n      if (nftLowerTick != vars.lowerTick || nftUpperTick != vars.upperTick) {\\r\\n        ALGEBRA_NFT.burn(vars.tokenId);\\r\\n        vars.tokenId = 0;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    IncentiveKey memory key = getIncentiveKey(state);\\r\\n\\r\\n    if (vars.tokenId == 0) {\\r\\n      (vars.tokenId, vars.liquidity, amountsConsumed[0], amountsConsumed[1]) = ALGEBRA_NFT.mint(INonfungiblePositionManager.MintParams(\\r\\n        token0,\\r\\n        token1,\\r\\n        vars.lowerTick,\\r\\n        vars.upperTick,\\r\\n        amountsDesired_[0],\\r\\n        amountsDesired_[1],\\r\\n        0,\\r\\n        0,\\r\\n        address(this),\\r\\n        block.timestamp\\r\\n      ));\\r\\n\\r\\n      state.tokenId = vars.tokenId;\\r\\n\\r\\n      ALGEBRA_NFT.safeTransferFrom(address(this), address(FARMING_CENTER), vars.tokenId);\\r\\n    } else {\\r\\n      (vars.liquidity, amountsConsumed[0], amountsConsumed[1]) = ALGEBRA_NFT.increaseLiquidity(INonfungiblePositionManager.IncreaseLiquidityParams(\\r\\n        vars.tokenId,\\r\\n        amountsDesired_[0],\\r\\n        amountsDesired_[1],\\r\\n        0,\\r\\n        0,\\r\\n        block.timestamp\\r\\n      ));\\r\\n\\r\\n      if (state.pair.totalLiquidity > 0) {\\r\\n        // get reward amounts\\r\\n        (uint reward, uint bonusReward) = FARMING_CENTER.collectRewards(key, vars.tokenId);\\r\\n\\r\\n        // exit farming (undeposit)\\r\\n        FARMING_CENTER.exitFarming(key, vars.tokenId, false);\\r\\n\\r\\n        // claim rewards and send to profit holder\\r\\n        {\\r\\n          address strategyProfitHolder = state.pair.strategyProfitHolder;\\r\\n\\r\\n          if (reward > 0) {\\r\\n            address token = state.rewardToken;\\r\\n            reward = FARMING_CENTER.claimReward(token, address(this), 0, reward);\\r\\n            IERC20(token).safeTransfer(strategyProfitHolder, reward);\\r\\n          }\\r\\n          if (bonusReward > 0) {\\r\\n            address token = state.bonusRewardToken;\\r\\n            bonusReward = FARMING_CENTER.claimReward(token, address(this), 0, bonusReward);\\r\\n            IERC20(token).safeTransfer(strategyProfitHolder, bonusReward);\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        ALGEBRA_NFT.safeTransferFrom(address(this), address(FARMING_CENTER), vars.tokenId);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    FARMING_CENTER.enterFarming(key, vars.tokenId, 0, false);\\r\\n\\r\\n    state.pair.totalLiquidity += vars.liquidity;\\r\\n    liquidityOut = uint(vars.liquidity);\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Join the pool\\r\\n\\r\\n  //region ------------------------------------------------ Exit the pool\\r\\n\\r\\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\\r\\n  function exit(\\r\\n    State storage state,\\r\\n    uint128 liquidityAmountToExit,\\r\\n    bool emergency\\r\\n  ) external returns (uint[] memory amountsOut) {\\r\\n    ExitLocal memory v;\\r\\n\\r\\n    amountsOut = new uint[](2);\\r\\n    v.strategyProfitHolder = state.pair.strategyProfitHolder;\\r\\n    IncentiveKey memory key = getIncentiveKey(state);\\r\\n\\r\\n    v.liquidity = state.pair.totalLiquidity;\\r\\n\\r\\n    require(v.liquidity >= liquidityAmountToExit, AlgebraStrategyErrors.WRONG_LIQUIDITY);\\r\\n\\r\\n    // we assume here, that liquidity is not zero (otherwise it doesn't worth to call exit)\\r\\n    uint tokenId = state.tokenId;\\r\\n\\r\\n    // get reward amounts\\r\\n    if (! emergency) {\\r\\n      (v.reward, v.bonusReward) = FARMING_CENTER.collectRewards(key, tokenId);\\r\\n    }\\r\\n\\r\\n    // exit farming (undeposit)\\r\\n    FARMING_CENTER.exitFarming(getIncentiveKey(state), state.tokenId, false);\\r\\n\\r\\n    // claim rewards and send to profit holder\\r\\n    if (! emergency) {\\r\\n      if (v.reward > 0) {\\r\\n        address token = state.rewardToken;\\r\\n        v.reward = FARMING_CENTER.claimReward(token, address(this), 0, v.reward);\\r\\n        IERC20(token).safeTransfer(v.strategyProfitHolder, v.reward);\\r\\n      }\\r\\n      if (v.bonusReward > 0) {\\r\\n        address token = state.bonusRewardToken;\\r\\n        v.bonusReward = FARMING_CENTER.claimReward(token, address(this), 0, v.bonusReward);\\r\\n        IERC20(token).safeTransfer(v.strategyProfitHolder, v.bonusReward);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // withdraw nft\\r\\n    FARMING_CENTER.withdrawToken(tokenId, address(this), '');\\r\\n\\r\\n    // burn liquidity\\r\\n    (amountsOut[0], amountsOut[1]) = ALGEBRA_NFT.decreaseLiquidity(INonfungiblePositionManager.DecreaseLiquidityParams(tokenId, liquidityAmountToExit, 0, 0, block.timestamp));\\r\\n\\r\\n    {\\r\\n      // collect tokens and fee\\r\\n      (uint collected0, uint collected1) = ALGEBRA_NFT.collect(INonfungiblePositionManager.CollectParams(tokenId, address(this), type(uint128).max, type(uint128).max));\\r\\n\\r\\n      uint fee0 = collected0 > amountsOut[0] ? (collected0 - amountsOut[0]) : 0;\\r\\n      uint fee1 = collected1 > amountsOut[1] ? (collected1 - amountsOut[1]) : 0;\\r\\n\\r\\n      emit AlgebraFeesClaimed(fee0, fee1);\\r\\n\\r\\n      if (state.pair.depositorSwapTokens) {\\r\\n        (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\\r\\n        (fee0, fee1) = (fee1, fee0);\\r\\n      }\\r\\n\\r\\n      // send fees to profit holder\\r\\n      if (fee0 > 0) {\\r\\n        IERC20(state.pair.tokenA).safeTransfer(v.strategyProfitHolder, fee0);\\r\\n      }\\r\\n      if (fee1 > 0) {\\r\\n        IERC20(state.pair.tokenB).safeTransfer(v.strategyProfitHolder, fee1);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    v.liquidity -= liquidityAmountToExit;\\r\\n    state.pair.totalLiquidity = v.liquidity;\\r\\n\\r\\n    if (v.liquidity != 0) {\\r\\n      ALGEBRA_NFT.safeTransferFrom(address(this), address(FARMING_CENTER), tokenId);\\r\\n      FARMING_CENTER.enterFarming(key, tokenId, 0, false);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function quoteExit(\\r\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\r\\n    uint128 liquidityAmountToExit\\r\\n  ) public view returns (uint[] memory amountsOut) {\\r\\n    (uint160 sqrtRatioX96, , , , , ,) = IAlgebraPool(pairState.pool).globalState();\\r\\n    amountsOut = new uint[](2);\\r\\n    (amountsOut[0], amountsOut[1]) = AlgebraLib.getAmountsForLiquidity(\\r\\n      sqrtRatioX96,\\r\\n      pairState.lowerTick,\\r\\n      pairState.upperTick,\\r\\n      liquidityAmountToExit\\r\\n    );\\r\\n    if (pairState.depositorSwapTokens) {\\r\\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\\r\\n    }\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Exit the pool\\r\\n\\r\\n  //region ------------------------------------------------ Rewards\\r\\n\\r\\n  function isReadyToHardWork(State storage state, ITetuConverter converter, address controller) external view returns (bool isReady) {\\r\\n    IsReadyToHardWorkLocal memory v;\\r\\n    v.tokenA = state.pair.tokenA;\\r\\n    v.tokenB = state.pair.tokenB;\\r\\n    address h = state.pair.strategyProfitHolder;\\r\\n\\r\\n    if (state.pair.totalLiquidity != 0) {\\r\\n      address rewardToken = state.rewardToken;\\r\\n      address bonusRewardToken = state.bonusRewardToken;\\r\\n      IncentiveKey memory key = getIncentiveKey(state);\\r\\n      (uint reward, uint bonusReward) = FARMING_CENTER.eternalFarming().getRewardInfo(key, state.tokenId);\\r\\n      reward += IERC20(rewardToken).balanceOf(h);\\r\\n      bonusReward += IERC20(bonusRewardToken).balanceOf(h);\\r\\n      ITetuLiquidator liquidator = ITetuLiquidator(IController(controller).liquidator());\\r\\n      if (reward > 0) {\\r\\n        v.rewardInTermOfTokenA = liquidator.getPrice(rewardToken, v.tokenA, reward);\\r\\n      }\\r\\n      if (v.bonusRewardInTermOfTokenA > 0) {\\r\\n        v.bonusRewardInTermOfTokenA = liquidator.getPrice(bonusRewardToken, v.tokenA, bonusReward);\\r\\n      }\\r\\n      (v.fee0, v.fee1) = getFees(state);\\r\\n    }\\r\\n\\r\\n    // check claimable amounts and compare with thresholds\\r\\n    if (state.pair.depositorSwapTokens) {\\r\\n      (v.fee0, v.fee1) = (v.fee1, v.fee0);\\r\\n    }\\r\\n\\r\\n    v.fee0 += IERC20(v.tokenA).balanceOf(h);\\r\\n    v.fee1 += IERC20(v.tokenB).balanceOf(h);\\r\\n\\r\\n    IPriceOracle oracle = AppLib._getPriceOracle(converter);\\r\\n    uint priceA = oracle.getAssetPrice(v.tokenA);\\r\\n    uint priceB = oracle.getAssetPrice(v.tokenB);\\r\\n\\r\\n    uint fee0USD = v.fee0 * priceA / 1e18;\\r\\n    uint fee1USD = v.fee1 * priceB / 1e18;\\r\\n\\r\\n    return\\r\\n      fee0USD > HARD_WORK_USD_FEE_THRESHOLD\\r\\n      || fee1USD > HARD_WORK_USD_FEE_THRESHOLD\\r\\n      || v.rewardInTermOfTokenA * priceA / 1e18 > HARD_WORK_USD_FEE_THRESHOLD\\r\\n      || v.bonusRewardInTermOfTokenA * priceA / 1e18 > HARD_WORK_USD_FEE_THRESHOLD\\r\\n    ;\\r\\n  }\\r\\n\\r\\n  function claimRewards(State storage state) external returns (\\r\\n    address[] memory tokensOut,\\r\\n    uint[] memory amountsOut,\\r\\n    uint[] memory balancesBefore\\r\\n  ) {\\r\\n    address strategyProfitHolder = state.pair.strategyProfitHolder;\\r\\n    uint tokenId = state.tokenId;\\r\\n    tokensOut = new address[](4);\\r\\n    tokensOut[0] = state.pair.tokenA;\\r\\n    tokensOut[1] = state.pair.tokenB;\\r\\n    tokensOut[2] = state.rewardToken;\\r\\n    tokensOut[3] = state.bonusRewardToken;\\r\\n\\r\\n    balancesBefore = new uint[](4);\\r\\n    for (uint i; i < tokensOut.length; i++) {\\r\\n      balancesBefore[i] = IERC20(tokensOut[i]).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    amountsOut = new uint[](4);\\r\\n    if (tokenId > 0 && state.pair.totalLiquidity > 0) {\\r\\n      (amountsOut[0], amountsOut[1]) = FARMING_CENTER.collect(INonfungiblePositionManager.CollectParams(tokenId, address(this), type(uint128).max, type(uint128).max));\\r\\n\\r\\n      emit AlgebraFeesClaimed(amountsOut[0], amountsOut[1]);\\r\\n\\r\\n      if (state.pair.depositorSwapTokens) {\\r\\n        (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\\r\\n      }\\r\\n\\r\\n      (amountsOut[2], amountsOut[3]) = FARMING_CENTER.collectRewards(getIncentiveKey(state), tokenId);\\r\\n\\r\\n      if (amountsOut[2] > 0) {\\r\\n        amountsOut[2] = FARMING_CENTER.claimReward(tokensOut[2], address(this), 0, amountsOut[2]);\\r\\n      }\\r\\n\\r\\n      if (amountsOut[3] > 0) {\\r\\n        amountsOut[3] = FARMING_CENTER.claimReward(tokensOut[3], address(this), 0, amountsOut[3]);\\r\\n      }\\r\\n\\r\\n      emit AlgebraRewardsClaimed(amountsOut[2], amountsOut[3]);\\r\\n    }\\r\\n\\r\\n    for (uint i; i < tokensOut.length; ++i) {\\r\\n      uint b = IERC20(tokensOut[i]).balanceOf(strategyProfitHolder);\\r\\n      if (b > 0) {\\r\\n        IERC20(tokensOut[i]).transferFrom(strategyProfitHolder, address(this), b);\\r\\n        amountsOut[i] += b;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function calcEarned(address asset, address controller, address[] memory rewardTokens, uint[] memory amounts) external view returns (uint) {\\r\\n    ITetuLiquidator liquidator = ITetuLiquidator(IController(controller).liquidator());\\r\\n    uint len = rewardTokens.length;\\r\\n    uint earned;\\r\\n    for (uint i; i < len; ++i) {\\r\\n      address token = rewardTokens[i];\\r\\n      if (token == asset) {\\r\\n        earned += amounts[i];\\r\\n      } else {\\r\\n        earned += liquidator.getPrice(rewardTokens[i], asset, amounts[i]);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return earned;\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Rewards\\r\\n\\r\\n  //region ------------------------------------------------ Rebalance\\r\\n\\r\\n  /// @notice Determine if the strategy needs to be rebalanced.\\r\\n  /// @return needRebalance A boolean indicating if {rebalanceNoSwaps} should be called\\r\\n  function needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage pairState, ITetuConverter converter_) external view returns (\\r\\n    bool needRebalance\\r\\n  ) {\\r\\n    address pool = pairState.pool;\\r\\n    // poolPrice should have same decimals as a price from oracle == 18\\r\\n    uint poolPriceAdjustment = PairBasedStrategyLib.getPoolPriceAdjustment(IERC20Metadata(pairState.tokenA).decimals());\\r\\n    uint poolPrice = AlgebraLib.getPrice(pool, pairState.tokenB) * poolPriceAdjustment;\\r\\n    (needRebalance, , ) = PairBasedStrategyLogicLib.needStrategyRebalance(\\r\\n      pairState,\\r\\n      converter_,\\r\\n      AlgebraDebtLib.getCurrentTick(IAlgebraPool(pool)),\\r\\n      poolPrice\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Make rebalance without swaps (using borrowing only).\\r\\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\\r\\n  /// @param checkNeedRebalance_ True if the function should ensure that the rebalance is required\\r\\n  /// @param totalAssets_ Current value of totalAssets()\\r\\n  /// @return tokenAmounts Token amounts for deposit. If length == 0 - rebalance wasn't made and no deposit is required.\\r\\n  function rebalanceNoSwaps(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\r\\n    address[2] calldata converterLiquidator,\\r\\n    uint totalAssets_,\\r\\n    uint profitToCover,\\r\\n    address splitter,\\r\\n    bool checkNeedRebalance_,\\r\\n    mapping(address => uint) storage liquidityThresholds_\\r\\n  ) external returns (\\r\\n    uint[] memory tokenAmounts\\r\\n  ) {\\r\\n    RebalanceLocal memory v;\\r\\n    _initLocalVars(v, ITetuConverter(converterLiquidator[0]), pairState, liquidityThresholds_);\\r\\n    v.poolPrice = AlgebraLib.getPrice(address(v.pool), pairState.tokenB) * v.poolPriceAdjustment;\\r\\n    bool needRebalance;\\r\\n    int24 tick = AlgebraDebtLib.getCurrentTick(v.pool);\\r\\n    (needRebalance, v.fuseStatusChangedAB, v.fuseStatusAB) = PairBasedStrategyLogicLib.needStrategyRebalance(\\r\\n      pairState,\\r\\n      v.converter,\\r\\n      tick,\\r\\n      v.poolPrice\\r\\n    );\\r\\n\\r\\n    // update fuse status if necessary\\r\\n    if (needRebalance) {\\r\\n      // we assume here, that needRebalance is true if any fuse has changed state, see needStrategyRebalance impl\\r\\n      PairBasedStrategyLogicLib.updateFuseStatus(pairState, v.fuseStatusChangedAB, v.fuseStatusAB);\\r\\n    }\\r\\n\\r\\n    require(!checkNeedRebalance_ || needRebalance, AlgebraStrategyErrors.NO_REBALANCE_NEEDED);\\r\\n\\r\\n    // rebalancing debt, setting new tick range\\r\\n    if (needRebalance) {\\r\\n      AlgebraDebtLib.rebalanceNoSwaps(converterLiquidator, pairState, profitToCover, totalAssets_, splitter, v.liquidationThresholdsAB, tick);\\r\\n\\r\\n      uint loss;\\r\\n      (loss, tokenAmounts) = ConverterStrategyBaseLib2.getTokenAmountsPair(v.converter, totalAssets_, v.tokenA, v.tokenB, v.liquidationThresholdsAB);\\r\\n\\r\\n      if (loss != 0) {\\r\\n        ConverterStrategyBaseLib2.coverLossAndCheckResults(csbs, splitter, loss);\\r\\n      }\\r\\n      emit Rebalanced(loss, profitToCover, 0);\\r\\n    }\\r\\n\\r\\n    return tokenAmounts;\\r\\n  }\\r\\n\\r\\n  /// @notice Initialize {v} by state values\\r\\n  function _initLocalVars(\\r\\n    RebalanceLocal memory v,\\r\\n    ITetuConverter converter_,\\r\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\r\\n    mapping(address => uint) storage liquidityThresholds_\\r\\n  ) internal view {\\r\\n    v.pool = IAlgebraPool(pairState.pool);\\r\\n    v.fuseAB = pairState.fuseAB;\\r\\n    v.converter = converter_;\\r\\n    v.tokenA = pairState.tokenA;\\r\\n    v.tokenB = pairState.tokenB;\\r\\n    v.isStablePool = pairState.isStablePool;\\r\\n    v.liquidationThresholdsAB[0] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenA]);\\r\\n    v.liquidationThresholdsAB[1] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenB]);\\r\\n    uint poolPriceDecimals = IERC20Metadata(v.tokenA).decimals();\\r\\n    v.poolPriceAdjustment = poolPriceDecimals < 18 ? 10**(18 - poolPriceDecimals) : 1;\\r\\n  }\\r\\n\\r\\n  /// @notice Get proportion of not-underlying in the pool, [0...1e18]\\r\\n  ///         prop.underlying : prop.not.underlying = 1e18 - PropNotUnderlying18 : propNotUnderlying18\\r\\n  function getPropNotUnderlying18(PairBasedStrategyLogicLib.PairState storage pairState) view external returns (uint) {\\r\\n    // get pool proportions\\r\\n    IAlgebraPool pool = IAlgebraPool(pairState.pool);\\r\\n    bool depositorSwapTokens = pairState.depositorSwapTokens;\\r\\n    (int24 newLowerTick, int24 newUpperTick) = AlgebraDebtLib._calcNewTickRange(pool, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\\r\\n    (uint consumed0, uint consumed1) = AlgebraDebtLib.getEntryDataProportions(pool, newLowerTick, newUpperTick, depositorSwapTokens);\\r\\n\\r\\n    require(consumed0 + consumed1 > 0, AppErrors.ZERO_VALUE);\\r\\n    return consumed1 * 1e18 / (consumed0 + consumed1);\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Rebalance\\r\\n\\r\\n  //region ------------------------------------------------ WithdrawByAgg\\r\\n  /// @param addr_ [tokenToSwap, aggregator, controller, converter, splitter]\\r\\n  /// @param values_ [amountToSwap_, profitToCover, oldTotalAssets, entryToPool]\\r\\n  /// @return completed All debts were closed, leftovers were swapped to proper proportions\\r\\n  /// @return tokenAmountsOut Amounts to be deposited to pool. This array is empty if no deposit allowed/required.\\r\\n  function withdrawByAggStep(\\r\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\r\\n    address[5] calldata addr_,\\r\\n    uint[4] calldata values_,\\r\\n    bytes memory swapData,\\r\\n    bytes memory planEntryData,\\r\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\r\\n    mapping(address => uint) storage liquidationThresholds\\r\\n  ) external returns (\\r\\n    bool completed,\\r\\n    uint[] memory tokenAmountsOut\\r\\n  ) {\\r\\n    address[2] memory tokens = [pairState.tokenA, pairState.tokenB];\\r\\n\\r\\n    // Calculate amounts to be deposited to pool, calculate loss, fix profitToCover\\r\\n    uint[] memory tokenAmounts;\\r\\n    uint loss;\\r\\n    (completed, tokenAmounts, loss) = PairBasedStrategyLogicLib.withdrawByAggStep(addr_, values_, swapData, planEntryData, tokens, liquidationThresholds);\\r\\n\\r\\n    // cover loss\\r\\n    if (loss != 0) {\\r\\n      ConverterStrategyBaseLib2.coverLossAndCheckResults(\\r\\n        csbs,\\r\\n        addr_[4], // splitter\\r\\n        loss\\r\\n      );\\r\\n    }\\r\\n    emit RebalancedDebt(loss, values_[1], 0);\\r\\n\\r\\n    // uint entryToPool = values_[3];\\r\\n    if (values_[3] == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED\\r\\n      || (values_[3] == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED && completed)\\r\\n    ) {\\r\\n      // We are going to enter to the pool: update lowerTick and upperTick, initialize tokenAmountsOut\\r\\n      (pairState.lowerTick, pairState.upperTick) = AlgebraDebtLib._calcNewTickRange(\\r\\n        IAlgebraPool(pairState.pool),\\r\\n        pairState.lowerTick,\\r\\n        pairState.upperTick,\\r\\n        pairState.tickSpacing\\r\\n      );\\r\\n      tokenAmountsOut = tokenAmounts;\\r\\n    }\\r\\n\\r\\n    return (completed, tokenAmountsOut); // hide warning\\r\\n  }\\r\\n  //endregion ------------------------------------------------ WithdrawByAgg\\r\\n\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x15e61ce419f96e32db1513af8e09fbcb9fe03c4c047e3c40cfb7d2317e4ef819\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/algebra/AlgebraDebtLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\r\\nimport \\\"../ConverterStrategyBaseLib2.sol\\\";\\r\\nimport \\\"./AlgebraLib.sol\\\";\\r\\nimport \\\"./AlgebraStrategyErrors.sol\\\";\\r\\nimport \\\"./AlgebraConverterStrategyLogicLib.sol\\\";\\r\\nimport \\\"../../libs/BorrowLib.sol\\\";\\r\\nimport \\\"../pair/PairBasedStrategyLib.sol\\\";\\r\\nimport \\\"../pair/PairBasedStrategyLogicLib.sol\\\";\\r\\n\\r\\nlibrary AlgebraDebtLib {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n//region  -------------------------------------------- Constants\\r\\n  uint public constant SELL_GAP = 100;\\r\\n  address internal constant ONEINCH = 0x1111111254EEB25477B68fb85Ed929f73A960582; // 1inch router V5\\r\\n  address internal constant OPENOCEAN = 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64; // OpenOceanExchangeProxy\\r\\n//endregion  -------------------------------------------- Constants\\r\\n\\r\\n//region  -------------------------------------------- Entry data\\r\\n  /// @notice Calculate proportions of the tokens for entry kind 1\\r\\n  /// @param pool Pool instance.\\r\\n  /// @param lowerTick The lower tick of the pool's main range.\\r\\n  /// @param upperTick The upper tick of the pool's main range.\\r\\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\\r\\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\\r\\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\\r\\n  function getEntryDataProportions(\\r\\n    IAlgebraPool pool,\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick,\\r\\n    bool depositorSwapTokens\\r\\n  ) internal view returns (uint, uint) {\\r\\n    address token1 = pool.token1();\\r\\n    uint token1Price = AlgebraLib.getPrice(address(pool), token1);\\r\\n\\r\\n    uint token1Decimals = IERC20Metadata(token1).decimals();\\r\\n\\r\\n    uint token0Desired = token1Price;\\r\\n    uint token1Desired = 10 ** token1Decimals;\\r\\n    require(token1Desired != 0, AppErrors.ZERO_VALUE);\\r\\n\\r\\n    // calculate proportions\\r\\n    (uint consumed0, uint consumed1,) = AlgebraLib.addLiquidityPreview(address(pool), lowerTick, upperTick, token0Desired, token1Desired);\\r\\n    return depositorSwapTokens\\r\\n      ? (1e18*consumed1 * token1Price / token1Desired, 1e18*consumed0)\\r\\n      : (1e18*consumed0, 1e18*consumed1 * token1Price / token1Desired);\\r\\n  }\\r\\n\\r\\n//endregion  -------------------------------------------- Entry data\\r\\n\\r\\n//region  -------------------------------------------- Calc tick range\\r\\n  function calcTickRange(IAlgebraPool pool, int24 tickRange, int24 tickSpacing) public view returns (int24 lowerTick, int24 upperTick) {\\r\\n    return PairBasedStrategyLogicLib.calcTickRange(getCurrentTick(pool), tickRange, tickSpacing);\\r\\n  }\\r\\n\\r\\n  function getCurrentTick(IAlgebraPool pool) public view returns(int24 tick) {\\r\\n    (, tick, , , , ,) = pool.globalState();\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate the new tick range for a Algebra pool, the tick is read from the pool.\\r\\n  /// @param pool The Algebra pool to calculate the new tick range for.\\r\\n  /// @param lowerTick The current lower tick value for the pool.\\r\\n  /// @param upperTick The current upper tick value for the pool.\\r\\n  /// @param tickSpacing The tick spacing for the pool.\\r\\n  /// @return lowerTickNew The new lower tick value for the pool.\\r\\n  /// @return upperTickNew The new upper tick value for the pool.\\r\\n  function _calcNewTickRange(\\r\\n    IAlgebraPool pool,\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick,\\r\\n    int24 tickSpacing\\r\\n  ) internal view returns (int24 lowerTickNew, int24 upperTickNew) {\\r\\n    int24 currentTick = getCurrentTick(pool);\\r\\n    return _calcNewTickRangeForTick(currentTick, lowerTick, upperTick, tickSpacing);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate the new tick range for a Algebra pool, the tick is known.\\r\\n  function _calcNewTickRangeForTick(\\r\\n    int24 currentTick,\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick,\\r\\n    int24 tickSpacing\\r\\n  ) internal pure returns (int24 lowerTickNew, int24 upperTickNew) {\\r\\n    int24 fullTickRange = upperTick - lowerTick;\\r\\n    int24 tickRange = fullTickRange == tickSpacing\\r\\n      ? int24(0)\\r\\n      : fullTickRange / 2;\\r\\n    return PairBasedStrategyLogicLib.calcTickRange(currentTick, tickRange, tickSpacing);\\r\\n  }\\r\\n//endregion  -------------------------------------------- Calc tick range\\r\\n\\r\\n//region  -------------------------------------------- Rebalance\\r\\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\\r\\n  function rebalanceNoSwaps(\\r\\n    address[2] calldata converterLiquidator,\\r\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\r\\n    uint profitToCover,\\r\\n    uint totalAssets,\\r\\n    address splitter,\\r\\n    uint[2] calldata liquidationThresholdsAB,\\r\\n    int24 tick\\r\\n  ) external {\\r\\n    (int24 newLowerTick, int24 newUpperTick) = _calcNewTickRangeForTick(tick, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\\r\\n    (uint prop0, uint prop1) = getEntryDataProportions(IAlgebraPool(pairState.pool), newLowerTick, newUpperTick, pairState.depositorSwapTokens);\\r\\n    PairBasedStrategyLogicLib._rebalanceNoSwaps(\\r\\n      converterLiquidator,\\r\\n      pairState,\\r\\n      profitToCover,\\r\\n      totalAssets,\\r\\n      splitter,\\r\\n  liquidationThresholdsAB,\\r\\n      prop0 * BorrowLib.SUM_PROPORTIONS / (prop0 + prop1)\\r\\n    );\\r\\n    (pairState.lowerTick, pairState.upperTick) = (newLowerTick, newUpperTick);\\r\\n  }\\r\\n//endregion  -------------------------------------------- Rebalance\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x04ee317df73487f4c1df5ba540da896f91640c42df8aa86ef4ed14d2a3832837\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/algebra/AlgebraLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../../integrations/algebra/IAlgebraPool.sol\\\";\\r\\nimport \\\"../../integrations/algebra/INonfungiblePositionManager.sol\\\";\\r\\nimport \\\"../../integrations/algebra/IFarmingCenter.sol\\\";\\r\\nimport \\\"../../integrations/algebra/IncentiveKey.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\n\\r\\nlibrary AlgebraLib {\\r\\n  int24 internal constant TICKSPACING = 60;\\r\\n  uint8 internal constant RESOLUTION = 96;\\r\\n  uint internal constant Q96 = 0x1000000000000000000000000;\\r\\n  uint private constant TWO_96 = 2 ** 96;\\r\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n  uint160 private constant MIN_SQRT_RATIO = 4295128739 + 1;\\r\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n  uint160 private constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\\r\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n  int24 internal constant MIN_TICK = - 887272;\\r\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n  int24 internal constant MAX_TICK = - MIN_TICK;\\r\\n\\r\\n  function tickSpacing() external pure returns (int24) {\\r\\n    return TICKSPACING;\\r\\n  }\\r\\n\\r\\n  function addLiquidityPreview(address pool_, int24 lowerTick_, int24 upperTick_, uint amount0Desired_, uint amount1Desired_) external view returns (uint amount0Consumed, uint amount1Consumed, uint128 liquidityOut) {\\r\\n    IAlgebraPool pool = IAlgebraPool(pool_);\\r\\n    (uint160 sqrtRatioX96, , , , , ,) = pool.globalState();\\r\\n    liquidityOut = getLiquidityForAmounts(sqrtRatioX96, lowerTick_, upperTick_, amount0Desired_, amount1Desired_);\\r\\n    (amount0Consumed, amount1Consumed) = getAmountsForLiquidity(sqrtRatioX96, lowerTick_, upperTick_, liquidityOut);\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\r\\n  /// pool prices and the prices at the tick boundaries\\r\\n  function getLiquidityForAmounts(\\r\\n    uint160 sqrtRatioX96,\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick,\\r\\n    uint amount0,\\r\\n    uint amount1\\r\\n  ) public pure returns (uint128 liquidity) {\\r\\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\\r\\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n\\r\\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n      liquidity = _getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\r\\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n      uint128 liquidity0 = _getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\r\\n      uint128 liquidity1 = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\r\\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\r\\n    } else {\\r\\n      liquidity = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\r\\n  /// pool prices and the prices at the tick boundaries\\r\\n  function getAmountsForLiquidity(\\r\\n    uint160 sqrtRatioX96,\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick,\\r\\n    uint128 liquidity\\r\\n  ) public pure returns (uint amount0, uint amount1) {\\r\\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\\r\\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\\r\\n\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n\\r\\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n      amount0 = _getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n      amount0 = _getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\r\\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\r\\n    } else {\\r\\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(\\r\\n    uint a,\\r\\n    uint b,\\r\\n    uint denominator\\r\\n  ) public pure returns (uint result) {\\r\\n    unchecked {\\r\\n      // 512-bit multiply [prod1 prod0] = a * b\\r\\n      // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n      // then use the Chinese Remainder Theorem to reconstruct\\r\\n      // the 512 bit result. The result is stored in two 256\\r\\n      // variables such that product = prod1 * 2**256 + prod0\\r\\n      uint prod0;\\r\\n      // Least significant 256 bits of the product\\r\\n      uint prod1;\\r\\n      // Most significant 256 bits of the product\\r\\n      assembly {\\r\\n        let mm := mulmod(a, b, not(0))\\r\\n        prod0 := mul(a, b)\\r\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n      }\\r\\n\\r\\n      // Handle non-overflow cases, 256 by 256 division\\r\\n      if (prod1 == 0) {\\r\\n        require(denominator > 0);\\r\\n        assembly {\\r\\n          result := div(prod0, denominator)\\r\\n        }\\r\\n        return result;\\r\\n      }\\r\\n\\r\\n      // Make sure the result is less than 2**256.\\r\\n      // Also prevents denominator == 0\\r\\n      require(denominator > prod1);\\r\\n\\r\\n      ///////////////////////////////////////////////\\r\\n      // 512 by 256 division.\\r\\n      ///////////////////////////////////////////////\\r\\n\\r\\n      // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n      // Compute remainder using mulmod\\r\\n      uint remainder;\\r\\n      assembly {\\r\\n        remainder := mulmod(a, b, denominator)\\r\\n      }\\r\\n      // Subtract 256 bit number from 512 bit number\\r\\n      assembly {\\r\\n        prod1 := sub(prod1, gt(remainder, prod0))\\r\\n        prod0 := sub(prod0, remainder)\\r\\n      }\\r\\n\\r\\n      // Factor powers of two out of denominator\\r\\n      // Compute largest power of two divisor of denominator.\\r\\n      // Always >= 1.\\r\\n      // EDIT for 0.8 compatibility:\\r\\n      // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint\\r\\n      uint twos = denominator & (~denominator + 1);\\r\\n\\r\\n      // Divide denominator by power of two\\r\\n      assembly {\\r\\n        denominator := div(denominator, twos)\\r\\n      }\\r\\n\\r\\n      // Divide [prod1 prod0] by the factors of two\\r\\n      assembly {\\r\\n        prod0 := div(prod0, twos)\\r\\n      }\\r\\n      // Shift in bits from prod1 into prod0. For this we need\\r\\n      // to flip `twos` such that it is 2**256 / twos.\\r\\n      // If twos is zero, then it becomes one\\r\\n      assembly {\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2**256\\r\\n      // Now that denominator is an odd number, it has an inverse\\r\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n      // Compute the inverse by starting with a seed that is correct\\r\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n      uint inv = (3 * denominator) ^ 2;\\r\\n      // Now use Newton-Raphson iteration to improve the precision.\\r\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n      // arithmetic, doubling the correct bits in each step.\\r\\n      inv *= 2 - denominator * inv;\\r\\n      // inverse mod 2**8\\r\\n      inv *= 2 - denominator * inv;\\r\\n      // inverse mod 2**16\\r\\n      inv *= 2 - denominator * inv;\\r\\n      // inverse mod 2**32\\r\\n      inv *= 2 - denominator * inv;\\r\\n      // inverse mod 2**64\\r\\n      inv *= 2 - denominator * inv;\\r\\n      // inverse mod 2**128\\r\\n      inv *= 2 - denominator * inv;\\r\\n      // inverse mod 2**256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying\\r\\n      // with the modular inverse of denominator. This will give us the\\r\\n      // correct result modulo 2**256. Since the precoditions guarantee\\r\\n      // that the outcome is less than 2**256, this is the final result.\\r\\n      // We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inv;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(\\r\\n    uint a,\\r\\n    uint b,\\r\\n    uint denominator\\r\\n  ) internal pure returns (uint result) {\\r\\n    result = mulDiv(a, b, denominator);\\r\\n    if (mulmod(a, b, denominator) > 0) {\\r\\n      require(result < type(uint).max);\\r\\n      result++;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates price in pool\\r\\n  /// @return price with decimals of paired token\\r\\n  function getPrice(address pool_, address tokenIn) public view returns (uint) {\\r\\n    IAlgebraPool pool = IAlgebraPool(pool_);\\r\\n    address token0 = pool.token0();\\r\\n    address token1 = pool.token1();\\r\\n\\r\\n    uint tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\\r\\n    uint tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\\r\\n    (uint160 sqrtPriceX96,,,,,,) = pool.globalState();\\r\\n\\r\\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\\r\\n\\r\\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\\r\\n    uint purePrice;\\r\\n    uint precision;\\r\\n    if (tokenIn == token0) {\\r\\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\\r\\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\\r\\n      purePrice = part * part;\\r\\n    } else {\\r\\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\\r\\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\\r\\n      purePrice = part * part;\\r\\n    }\\r\\n    return purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\\r\\n  }\\r\\n\\r\\n  function getFees(IAlgebraPool pool, INonfungiblePositionManager nft, uint tokenId) public view returns (uint fee0, uint fee1) {\\r\\n    (, int24 tick, , , , ,) = pool.globalState();\\r\\n    (,,,,int24 lowerTick,int24 upperTick,uint128 liquidity,uint feeGrowthInside0Last, uint feeGrowthInside1Last, uint128 tokensOwed0, uint128 tokensOwed1) = nft.positions(tokenId);\\r\\n    fee0 = _computeFeesEarned(pool, lowerTick, upperTick, liquidity, true, feeGrowthInside0Last, tick) + uint(tokensOwed0);\\r\\n    fee1 = _computeFeesEarned(pool, lowerTick, upperTick, liquidity, false, feeGrowthInside1Last, tick) + uint(tokensOwed1);\\r\\n  }\\r\\n\\r\\n  function _computeFeesEarned(\\r\\n    IAlgebraPool pool,\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick,\\r\\n    uint128 liquidity,\\r\\n    bool isZero,\\r\\n    uint feeGrowthInsideLast,\\r\\n    int24 tick\\r\\n  ) internal view returns (uint fee) {\\r\\n    uint feeGrowthOutsideLower;\\r\\n    uint feeGrowthOutsideUpper;\\r\\n    uint feeGrowthGlobal;\\r\\n    if (isZero) {\\r\\n      feeGrowthGlobal = pool.totalFeeGrowth0Token();\\r\\n      (,, feeGrowthOutsideLower,,,,,) = pool.ticks(lowerTick);\\r\\n      (,, feeGrowthOutsideUpper,,,,,) = pool.ticks(upperTick);\\r\\n    } else {\\r\\n      feeGrowthGlobal = pool.totalFeeGrowth1Token();\\r\\n      (,,, feeGrowthOutsideLower,,,,) = pool.ticks(lowerTick);\\r\\n      (,,, feeGrowthOutsideUpper,,,,) = pool.ticks(upperTick);\\r\\n    }\\r\\n\\r\\n    unchecked {\\r\\n      // calculate fee growth below\\r\\n      uint feeGrowthBelow;\\r\\n      if (tick >= lowerTick) {\\r\\n        feeGrowthBelow = feeGrowthOutsideLower;\\r\\n      } else {\\r\\n        feeGrowthBelow = feeGrowthGlobal - feeGrowthOutsideLower;\\r\\n      }\\r\\n      // calculate fee growth above\\r\\n      uint feeGrowthAbove;\\r\\n      if (tick < upperTick) {\\r\\n        feeGrowthAbove = feeGrowthOutsideUpper;\\r\\n      } else {\\r\\n        feeGrowthAbove = feeGrowthGlobal - feeGrowthOutsideUpper;\\r\\n      }\\r\\n\\r\\n      uint feeGrowthInside = feeGrowthGlobal - feeGrowthBelow - feeGrowthAbove;\\r\\n      fee = mulDiv(\\r\\n        liquidity,\\r\\n        feeGrowthInside - feeGrowthInsideLast,\\r\\n        0x100000000000000000000000000000000\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\r\\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\\r\\n  /// @param sqrtRatioAX96 A sqrt price\\r\\n  /// @param sqrtRatioBX96 Another sqrt price\\r\\n  /// @param amount0 The amount0 being sent in\\r\\n  /// @return liquidity The amount of returned liquidity\\r\\n  function _getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount0) internal pure returns (uint128 liquidity) {\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n    uint intermediate = mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\\r\\n    return _toUint128(mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\r\\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\r\\n  /// @param sqrtRatioAX96 A sqrt price\\r\\n  /// @param sqrtRatioBX96 Another sqrt price\\r\\n  /// @param amount1 The amount1 being sent in\\r\\n  /// @return liquidity The amount of returned liquidity\\r\\n  function _getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount1) internal pure returns (uint128 liquidity) {\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n    return _toUint128(mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\r\\n  /// @param sqrtRatioAX96 A sqrt price\\r\\n  /// @param sqrtRatioBX96 Another sqrt price\\r\\n  /// @param liquidity The liquidity being valued\\r\\n  /// @return amount0 The amount0\\r\\n  function _getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount0) {\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n    return mulDivRoundingUp(1, mulDivRoundingUp(uint(liquidity) << RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96), sqrtRatioAX96);\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\r\\n  /// @param sqrtRatioAX96 A sqrt price\\r\\n  /// @param sqrtRatioBX96 Another sqrt price\\r\\n  /// @param liquidity The liquidity being valued\\r\\n  /// @return amount1 The amount1\\r\\n  function _getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount1) {\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n    return mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\\r\\n  }\\r\\n\\r\\n  function _countDigits(uint n) internal pure returns (uint) {\\r\\n    if (n == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint count = 0;\\r\\n    while (n != 0) {\\r\\n      n = n / 10;\\r\\n      ++count;\\r\\n    }\\r\\n    return count;\\r\\n  }\\r\\n\\r\\n  function _min(uint a, uint b) internal pure returns (uint) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  function _max(uint a, uint b) internal pure returns (uint) {\\r\\n    return a > b ? a : b;\\r\\n  }\\r\\n\\r\\n  function _toUint128(uint x) private pure returns (uint128 y) {\\r\\n    require((y = uint128(x)) == x);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n  /// @dev Throws if |tick| > max tick\\r\\n  /// @param tick The input tick for the above formula\\r\\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n  /// at the given tick\\r\\n  function _getSqrtRatioAtTick(int24 tick)\\r\\n  internal\\r\\n  pure\\r\\n  returns (uint160 sqrtPriceX96)\\r\\n  {\\r\\n    uint256 absTick =\\r\\n      tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\\r\\n\\r\\n    // EDIT: 0.8 compatibility\\r\\n    require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\r\\n\\r\\n    uint256 ratio =\\r\\n      absTick & 0x1 != 0\\r\\n        ? 0xfffcb933bd6fad37aa2d162d1a594001\\r\\n        : 0x100000000000000000000000000000000;\\r\\n    if (absTick & 0x2 != 0)\\r\\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n    if (absTick & 0x4 != 0)\\r\\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n    if (absTick & 0x8 != 0)\\r\\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n    if (absTick & 0x10 != 0)\\r\\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n    if (absTick & 0x20 != 0)\\r\\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n    if (absTick & 0x40 != 0)\\r\\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n    if (absTick & 0x80 != 0)\\r\\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n    if (absTick & 0x100 != 0)\\r\\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n    if (absTick & 0x200 != 0)\\r\\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n    if (absTick & 0x400 != 0)\\r\\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n    if (absTick & 0x800 != 0)\\r\\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n    if (absTick & 0x1000 != 0)\\r\\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n    if (absTick & 0x2000 != 0)\\r\\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n    if (absTick & 0x4000 != 0)\\r\\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n    if (absTick & 0x8000 != 0)\\r\\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n    if (absTick & 0x10000 != 0)\\r\\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n    if (absTick & 0x20000 != 0)\\r\\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n    if (absTick & 0x40000 != 0)\\r\\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n    if (absTick & 0x80000 != 0)\\r\\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n    if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n    sqrtPriceX96 = uint160(\\r\\n      (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n  /// ever return.\\r\\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\r\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n  function _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\r\\n    // second inequality must be < because the price can never reach the price at the max tick\\r\\n    require(\\r\\n      sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\r\\n      \\\"R\\\"\\r\\n    );\\r\\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\\r\\n\\r\\n    uint256 r = ratio;\\r\\n    uint256 msb = 0;\\r\\n\\r\\n    assembly {\\r\\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(4, gt(r, 0xFFFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(3, gt(r, 0xFF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(2, gt(r, 0xF))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := shl(1, gt(r, 0x3))\\r\\n      msb := or(msb, f)\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      let f := gt(r, 0x1)\\r\\n      msb := or(msb, f)\\r\\n    }\\r\\n\\r\\n    if (msb >= 128) r = ratio >> (msb - 127);\\r\\n    else r = ratio << (127 - msb);\\r\\n\\r\\n    int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(63, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(62, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(61, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(60, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(59, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(58, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(57, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(56, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(55, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(54, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(53, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(52, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(51, f))\\r\\n      r := shr(f, r)\\r\\n    }\\r\\n    assembly {\\r\\n      r := shr(127, mul(r, r))\\r\\n      let f := shr(128, r)\\r\\n      log_2 := or(log_2, shl(50, f))\\r\\n    }\\r\\n\\r\\n    tick = _getFinalTick(log_2, sqrtPriceX96);\\r\\n  }\\r\\n\\r\\n  function _getFinalTick(int256 log_2, uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\r\\n    // 128.128 number\\r\\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141;\\r\\n\\r\\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n    tick = (tickLow == tickHi)\\r\\n      ? tickLow\\r\\n      : (_getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x177e22910ca9ac7f1cec711cf1acc69590ec263756b1f9659734fbc0a0a1f744\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/algebra/AlgebraStrategyErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary AlgebraStrategyErrors {\\r\\n\\r\\n  string public constant NEED_REBALANCE = \\\"AS-1 Need rebalance\\\";\\r\\n  string public constant WRONG_BALANCE = \\\"AS-2 Wrong balance\\\";\\r\\n  string public constant INCORRECT_TICK_RANGE = \\\"AS-3 Incorrect tickRange\\\";\\r\\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \\\"AS-4 Incorrect rebalanceTickRange\\\";\\r\\n  string public constant INCORRECT_ASSET = \\\"AS-5 Incorrect asset\\\";\\r\\n  string public constant WRONG_FEE = \\\"AS-6 Wrong fee\\\";\\r\\n  string public constant WRONG_LIQUIDITY = \\\"AS-7 Wrong liquidity\\\";\\r\\n  string public constant NO_REBALANCE_NEEDED = \\\"AS-9 No rebalance needed\\\";\\r\\n  string public constant BALANCE_LOWER_THAN_FEE = \\\"AS-10 Balance lower than fee\\\";\\r\\n  string public constant NOT_CALLBACK_CALLER = \\\"AS-11 Not callback caller\\\";\\r\\n  string public constant ZERO_PROFIT_HOLDER = \\\"AS-13 Zero strategy profit holder\\\";\\r\\n  string public constant FUSE_IS_ACTIVE = \\\"AS-14 Fuse is active\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x203fb059702ec39aa716497f14e292a6082b3ac810af7415e449c3c1da5ca258\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/pair/PairBasedStrategyLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\r\\nimport \\\"../../interfaces/IPoolProportionsProvider.sol\\\";\\r\\nimport \\\"../../libs/BorrowLib.sol\\\";\\r\\n\\r\\n/// @notice Library for the UniV3-like strategies with two tokens in the pool\\r\\n/// @dev The library contains quoteWithdrawStep/withdrawStep-related logic\\r\\nlibrary PairBasedStrategyLib {\\r\\n  //region ------------------------------------------------ Constants\\r\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\r\\n  /// @notice In all functions below array {token} contains underlying at the first position\\r\\n  uint internal constant IDX_ASSET = 0;\\r\\n  /// @notice In all functions below array {token} contains not-underlying at the second position\\r\\n  uint internal constant IDX_TOKEN = 1;\\r\\n\\r\\n  uint internal constant IDX_SWAP_1 = 0;\\r\\n  uint internal constant IDX_REPAY_1 = 1;\\r\\n  uint internal constant IDX_SWAP_2 = 2;\\r\\n  uint internal constant IDX_REPAY_2 = 3;\\r\\n\\r\\n  /// @notice A gap to reduce AmountToSwap calculated inside quoteWithdrawByAgg, [0...100_000]\\r\\n  uint public constant GAP_AMOUNT_TO_SWAP = 100;\\r\\n\\r\\n  /// @notice Enter to the pool at the end of withdrawByAggStep\\r\\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED = 1;\\r\\n  /// @notice Enter to the pool at the end of withdrawByAggStep only if full withdrawing has been completed\\r\\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED = 2;\\r\\n\\r\\n  /// @notice Fuse thresholds are set as array: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\r\\n  ///         If the price falls below LOWER_LIMIT_ON the fuse is turned ON\\r\\n  ///         When the prices raises back and reaches LOWER_LIMIT_OFF, the fuse is turned OFF\\r\\n  ///         In the same way, if the price raises above UPPER_LIMIT_ON the fuse is turned ON\\r\\n  ///         When the prices falls back and reaches UPPER_LIMIT_OFF, the fuse is turned OFF\\r\\n  ///\\r\\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\\r\\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\\r\\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\\r\\n  uint public constant FUSE_IDX_LOWER_LIMIT_ON = 0;\\r\\n  uint public constant FUSE_IDX_LOWER_LIMIT_OFF = 1;\\r\\n  uint public constant FUSE_IDX_UPPER_LIMIT_ON = 2;\\r\\n  uint public constant FUSE_IDX_UPPER_LIMIT_OFF = 3;\\r\\n\\r\\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_A = 0;\\r\\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_B = 1;\\r\\n  uint public constant IDX_ADDR_DEFAULT_STATE_POOL = 2;\\r\\n  uint public constant IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER = 3;\\r\\n\\r\\n  uint public constant IDX_TICK_DEFAULT_STATE_TICK_SPACING = 0;\\r\\n  uint public constant IDX_TICK_DEFAULT_STATE_LOWER_TICK = 1;\\r\\n  uint public constant IDX_TICK_DEFAULT_STATE_UPPER_TICK = 2;\\r\\n  uint public constant IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE = 3;\\r\\n\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY = 0;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_FUSE_STATUS = 1;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_0 = 2;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE = 3;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_0 = 4;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_1 = 5;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_2 = 6;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_3 = 7;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_1 = 8;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_2 = 9;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_3 = 10;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_4 = 11;\\r\\n  uint public constant IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP = 12;\\r\\n\\r\\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL = 0;\\r\\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS = 1;\\r\\n\\r\\n  /// @notice 1inch router V5\\r\\n  address internal constant ONEINCH = 0x1111111254EEB25477B68fb85Ed929f73A960582;\\r\\n  /// @notice OpenOceanExchangeProxy\\r\\n  address internal constant OPENOCEAN = 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64;\\r\\n\\r\\n  string public constant UNKNOWN_SWAP_ROUTER = \\\"PBS-1 Unknown router\\\";\\r\\n  string public constant INCORRECT_TICK_RANGE = \\\"PBS-3 Incorrect tickRange\\\";\\r\\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \\\"PBS-4 Incorrect rebalanceTickRange\\\";\\r\\n  string public constant INCORRECT_ASSET = \\\"PBS-5 Incorrect asset\\\";\\r\\n\\r\\n  //endregion ------------------------------------------------ Constants\\r\\n\\r\\n  //region ------------------------------------------------ Data types\\r\\n  /// @notice The fuse is triggered when the price rises above or falls below the limit 1.\\r\\n  ///         If the fuse was triggered, all assets are withdrawn from the pool on the strategy balance.\\r\\n  ///         Then all debts should be closed and all assets should be converted to underlying.\\r\\n  ///         The fuse is turned off automatically when the price falls below or rises above the limit 2\\r\\n  ///         and all assets are deposited back to the pool.\\r\\n  enum FuseStatus {\\r\\n    /// @notice Fuse is not used at all\\r\\n    FUSE_DISABLED_0,\\r\\n    /// @notice Fuse is not triggered, assets are deposited to the pool\\r\\n    FUSE_OFF_1,\\r\\n    /// @notice Fuse was triggered by lower limit, assets was withdrawn from the pool, but active debts can exist\\r\\n    FUSE_ON_LOWER_LIMIT_2,\\r\\n    /// @notice Fuse was triggered by upper limit, assets was withdrawn from the pool, but active debts can exist\\r\\n    FUSE_ON_UPPER_LIMIT_3\\r\\n  }\\r\\n\\r\\n  struct SwapByAggParams {\\r\\n    bool useLiquidator;\\r\\n    address tokenToSwap;\\r\\n    /// @notice Aggregator to make swap\\r\\n    ///         It is 0 if useLiquidator is true\\r\\n    ///         It can be equal to address of liquidator if we use liquidator as aggregator (in tests)\\r\\n    address aggregator;\\r\\n    uint amountToSwap;\\r\\n    /// @notice Swap-data prepared off-chain (route, amounts, etc). 0 - use liquidator to make swap\\r\\n    bytes swapData;\\r\\n  }\\r\\n\\r\\n  struct GetAmountToRepay2Local {\\r\\n    uint x;\\r\\n    uint y;\\r\\n    uint c0;\\r\\n    uint b0;\\r\\n    uint alpha;\\r\\n    int b;\\r\\n  }\\r\\n\\r\\n  struct FuseStateParams {\\r\\n    FuseStatus status;\\r\\n    /// @notice Price thresholds [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\r\\n    /// @dev see PairBasedStrategyLib.FUSE_IDX_XXX\\r\\n    uint[4] thresholds;\\r\\n\\r\\n    /// @notice reserve space for future needs\\r\\n    uint[4] __gap;\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Data types\\r\\n\\r\\n  //region ------------------------------------------------ Events\\r\\n  event FuseStatusChanged(uint fuseStatus);\\r\\n  event NewFuseThresholds(uint[4] newFuseThresholds);\\r\\n  event SwapByAgg(\\r\\n    uint amountToSwap,\\r\\n    uint amountIn,\\r\\n    uint amountOut,\\r\\n    uint expectedAmountOut,\\r\\n    address aggregator,\\r\\n    address assetIn,\\r\\n    address assetOut\\r\\n  );\\r\\n  //endregion ------------------------------------------------ Events\\r\\n\\r\\n  //region ------------------------------------------------ External withdraw functions\\r\\n\\r\\n  /// @notice Get info for the swap that will be made on the next call of {withdrawStep}\\r\\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\\r\\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\\r\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\\r\\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\\r\\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\\r\\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\r\\n  ///                            Value type(uint).max means that the proportions should be read from the pool.\\r\\n  ///     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\\r\\n  /// @param amountsFromPool Amounts of {tokens} that will be received from the pool before calling withdraw\\r\\n  /// @return tokenToSwap Address of the token that will be swapped on the next swap. 0 - no swap\\r\\n  /// @return amountToSwap Amount that will be swapped on the next swap. 0 - no swap\\r\\n  ///                      This amount is NOT reduced on {GAP_AMOUNT_TO_SWAP}, it should be reduced after the call if necessary.\\r\\n  function quoteWithdrawStep(\\r\\n    address[2] memory converterLiquidator_,\\r\\n    address[] memory tokens,\\r\\n    uint[] memory liquidationThresholds,\\r\\n    uint[] memory amountsFromPool,\\r\\n    uint planKind,\\r\\n    uint[2] memory entryDataValues\\r\\n  ) external returns (\\r\\n    address tokenToSwap,\\r\\n    uint amountToSwap\\r\\n  ){\\r\\n    (uint[] memory prices,\\r\\n      uint[] memory decs\\r\\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\\r\\n      converter: ITetuConverter(converterLiquidator_[0]),\\r\\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\\r\\n      tokens: tokens,\\r\\n      liquidationThresholds: liquidationThresholds,\\r\\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\\r\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\r\\n        : entryDataValues[0],\\r\\n      prices: prices,\\r\\n      decs: decs,\\r\\n      balanceAdditions: amountsFromPool,\\r\\n      planKind: planKind,\\r\\n      usePoolProportions: entryDataValues[0] == type(uint).max,\\r\\n      entryDataParam: entryDataValues[1]\\r\\n    });\\r\\n    return _quoteWithdrawStep(p);\\r\\n  }\\r\\n\\r\\n  /// @notice Make withdraw step with 0 or 1 swap only. The step can make one of the following actions:\\r\\n  ///         1) repay direct debt 2) repay reverse debt 3) final swap leftovers of not-underlying asset\\r\\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\\r\\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\\r\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\\r\\n  /// @param tokenToSwap_ Address of the token that will be swapped on the next swap. 0 - no swap\\r\\n  /// @param amountToSwap_ Amount that will be swapped on the next swap. 0 - no swap\\r\\n  /// @param aggregator_ Aggregator that should be used for the next swap. 0 - no swap\\r\\n  /// @param swapData_ Swap data to be passed to the aggregator on the next swap.\\r\\n  ///                  Swap data contains swap-route, amount and all other required info for the swap.\\r\\n  ///                  Swap data should be prepared on-chain on the base of data received by {quoteWithdrawStep}\\r\\n  /// @param useLiquidator_ Use liquidator instead of aggregator.\\r\\n  ///                       Aggregator swaps amount reduced on {GAP_AMOUNT_TO_SWAP}.\\r\\n  ///                       Liquidator doesn't use {GAP_AMOUNT_TO_SWAP}.\\r\\n  ///                       It's allowed to pass liquidator address in {aggregator_} and set {useLiquidator_} to false -\\r\\n  ///                       the liquidator will be used in same way as aggregator in this case.\\r\\n  /// @param planKind One of IterationPlanLib.PLAN_XXX\\r\\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\\r\\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\\r\\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\r\\n  ///     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\\r\\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions\\r\\n  function withdrawStep(\\r\\n    address[2] memory converterLiquidator_,\\r\\n    address[] memory tokens,\\r\\n    uint[] memory liquidationThresholds,\\r\\n    address tokenToSwap_,\\r\\n    uint amountToSwap_,\\r\\n    address aggregator_,\\r\\n    bytes memory swapData_,\\r\\n    bool useLiquidator_,\\r\\n    uint planKind,\\r\\n    uint[2] memory entryDataValues\\r\\n  ) external returns (\\r\\n    bool completed\\r\\n  ){\\r\\n    (uint[] memory prices,\\r\\n      uint[] memory decs\\r\\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\\r\\n\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\\r\\n      converter: ITetuConverter(converterLiquidator_[0]),\\r\\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\\r\\n      tokens: tokens,\\r\\n      liquidationThresholds: liquidationThresholds,\\r\\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\\r\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\r\\n        : entryDataValues[0],\\r\\n      prices: prices,\\r\\n      decs: decs,\\r\\n      balanceAdditions: new uint[](2), // 2 = tokens.length\\r\\n      planKind: planKind,\\r\\n      usePoolProportions: entryDataValues[0] == type(uint).max,\\r\\n      entryDataParam: entryDataValues[1]\\r\\n    });\\r\\n    SwapByAggParams memory aggParams = SwapByAggParams({\\r\\n      tokenToSwap: tokenToSwap_,\\r\\n      amountToSwap: amountToSwap_,\\r\\n      useLiquidator: useLiquidator_,\\r\\n      aggregator: aggregator_,\\r\\n      swapData: swapData_\\r\\n    });\\r\\n    return _withdrawStep(p, aggParams);\\r\\n  }\\r\\n  //endregion ------------------------------------------------ External withdraw functions\\r\\n\\r\\n  //region ------------------------------------------------ Fuse functions\\r\\n  function setFuseStatus(FuseStateParams storage fuse, FuseStatus status) external {\\r\\n    fuse.status = status;\\r\\n    emit FuseStatusChanged(uint(status));\\r\\n  }\\r\\n\\r\\n  function setFuseThresholds(FuseStateParams storage state, uint[4] memory values) external {\\r\\n    require(\\r\\n      (values[FUSE_IDX_LOWER_LIMIT_ON] == 0 && values[FUSE_IDX_LOWER_LIMIT_OFF] == 0)\\r\\n      || (values[FUSE_IDX_LOWER_LIMIT_ON] <= values[FUSE_IDX_LOWER_LIMIT_OFF]),\\r\\n      AppErrors.INVALID_VALUE\\r\\n    );\\r\\n    require(\\r\\n      (values[FUSE_IDX_UPPER_LIMIT_ON] == 0 && values[FUSE_IDX_UPPER_LIMIT_OFF] == 0)\\r\\n      || (values[FUSE_IDX_UPPER_LIMIT_ON] >= values[FUSE_IDX_UPPER_LIMIT_OFF]),\\r\\n      AppErrors.INVALID_VALUE\\r\\n    );\\r\\n    if (values[FUSE_IDX_LOWER_LIMIT_ON] != 0 && values[FUSE_IDX_UPPER_LIMIT_ON] != 0) {\\r\\n      require(\\r\\n        values[FUSE_IDX_UPPER_LIMIT_ON] > values[FUSE_IDX_LOWER_LIMIT_ON],\\r\\n        AppErrors.INVALID_VALUE\\r\\n      );\\r\\n    }\\r\\n    state.thresholds = values;\\r\\n    emit NewFuseThresholds(values);\\r\\n  }\\r\\n\\r\\n  function isFuseTriggeredOn(PairBasedStrategyLib.FuseStatus fuseStatus) internal pure returns (bool) {\\r\\n    return uint(fuseStatus) > uint(PairBasedStrategyLib.FuseStatus.FUSE_OFF_1);\\r\\n  }\\r\\n\\r\\n  /// @notice Check if the fuse should be turned ON/OFF\\r\\n  /// @param price Current price in the oracle\\r\\n  /// @param poolPrice Current price in the pool\\r\\n  /// @return needToChange A boolean indicating if the fuse status should be changed\\r\\n  /// @return status Exist fuse status or new fuse status (if needToChange is true)\\r\\n  function needChangeFuseStatus(FuseStateParams memory fuse, uint price, uint poolPrice) internal pure returns (\\r\\n    bool needToChange,\\r\\n    FuseStatus status\\r\\n  ) {\\r\\n    if (fuse.status != FuseStatus.FUSE_DISABLED_0) {\\r\\n      if (fuse.status == FuseStatus.FUSE_OFF_1) {\\r\\n        // currently fuse is OFF\\r\\n        if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON]) {\\r\\n          needToChange = true;\\r\\n          status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\\r\\n        } else if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\\r\\n          needToChange = true;\\r\\n          status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\\r\\n        }\\r\\n      } else {\\r\\n        if (fuse.status == FuseStatus.FUSE_ON_LOWER_LIMIT_2) {\\r\\n          // currently fuse is triggered ON by lower limit\\r\\n          if (price >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] && poolPrice >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\\r\\n            needToChange = true;\\r\\n            if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\\r\\n              status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\\r\\n            } else {\\r\\n              status = FuseStatus.FUSE_OFF_1;\\r\\n            }\\r\\n          }\\r\\n        } else {\\r\\n          // currently fuse is triggered ON by upper limit\\r\\n          if (price <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF] && poolPrice <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF]) {\\r\\n            needToChange = true;\\r\\n            if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\\r\\n              status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\\r\\n            } else {\\r\\n              status = FuseStatus.FUSE_OFF_1;\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (needToChange, needToChange ? status : fuse.status);\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Fuse functions\\r\\n\\r\\n  //region ------------------------------------------------ Internal helper functions\\r\\n  /// @notice Quote amount of the next swap if any.\\r\\n  ///         Swaps are required if direct-borrow exists OR reverse-borrow exists or not underlying leftovers exist\\r\\n  ///         Function returns info for first swap only.\\r\\n  /// @return tokenToSwap What token should be swapped. Zero address if no swap is required\\r\\n  /// @return amountToSwap Amount to swap. Zero if no swap is required.\\r\\n  function _quoteWithdrawStep(IterationPlanLib.SwapRepayPlanParams memory p) internal returns (\\r\\n    address tokenToSwap,\\r\\n    uint amountToSwap\\r\\n  ) {\\r\\n    uint indexTokenToSwapPlus1;\\r\\n    (indexTokenToSwapPlus1, amountToSwap,) = IterationPlanLib.buildIterationPlan(\\r\\n      [address(p.converter), address(p.liquidator)],\\r\\n      p.tokens,\\r\\n      p.liquidationThresholds,\\r\\n      p.prices,\\r\\n      p.decs,\\r\\n      p.balanceAdditions,\\r\\n      [\\r\\n        p.usePoolProportions ? 1 : 0,\\r\\n        p.planKind,\\r\\n        p.propNotUnderlying18,\\r\\n        type(uint).max,\\r\\n        IDX_ASSET,\\r\\n        IDX_TOKEN,\\r\\n        p.entryDataParam\\r\\n      ]\\r\\n    );\\r\\n    if (indexTokenToSwapPlus1 != 0) {\\r\\n      tokenToSwap = p.tokens[indexTokenToSwapPlus1 - 1];\\r\\n    }\\r\\n    return (tokenToSwap, amountToSwap);\\r\\n  }\\r\\n\\r\\n  /// @notice Make one iteration of withdraw. Each iteration can make 0 or 1 swap only\\r\\n  ///         We can make only 1 of the following 3 operations per single call:\\r\\n  ///         1) repay direct debt 2) repay reverse debt 3) swap leftovers to underlying\\r\\n  function _withdrawStep(IterationPlanLib.SwapRepayPlanParams memory p, SwapByAggParams memory aggParams) internal returns (\\r\\n    bool completed\\r\\n  ) {\\r\\n    (uint idxToSwap1, uint amountToSwap, uint idxToRepay1) = IterationPlanLib.buildIterationPlan(\\r\\n      [address(p.converter), address(p.liquidator)],\\r\\n      p.tokens,\\r\\n      p.liquidationThresholds,\\r\\n      p.prices,\\r\\n      p.decs,\\r\\n      p.balanceAdditions,\\r\\n      [\\r\\n        p.usePoolProportions ? 1 : 0,\\r\\n        p.planKind,\\r\\n        p.propNotUnderlying18,\\r\\n        type(uint).max,\\r\\n        IDX_ASSET,\\r\\n        IDX_TOKEN,\\r\\n        p.entryDataParam\\r\\n      ]\\r\\n    );\\r\\n\\r\\n    bool[4] memory actions = [\\r\\n      p.planKind == IterationPlanLib.PLAN_SWAP_ONLY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // swap 1\\r\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // repay 1\\r\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, // swap 2\\r\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY // repay 2\\r\\n      ];\\r\\n\\r\\n    if (idxToSwap1 != 0 && actions[IDX_SWAP_1]) {\\r\\n      (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\\r\\n    }\\r\\n\\r\\n    if (idxToRepay1 != 0 && actions[IDX_REPAY_1]) {\\r\\n      ConverterStrategyBaseLib._repayDebt(\\r\\n        p.converter,\\r\\n        p.tokens[idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET],\\r\\n        p.tokens[idxToRepay1 - 1],\\r\\n        IERC20(p.tokens[idxToRepay1 - 1]).balanceOf(address(this))\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if (idxToSwap1 != 0) {\\r\\n      if (actions[IDX_SWAP_2]) {\\r\\n        (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\\r\\n\\r\\n        if (actions[IDX_REPAY_2] && idxToRepay1 != 0) {\\r\\n          // see calculations inside estimateSwapAmountForRepaySwapRepay\\r\\n          // There are two possibilities here:\\r\\n          // 1) All collateral asset available on balance was swapped. We need additional repay to get assets in right proportions\\r\\n          // 2) Only part of collateral asset was swapped, so assets are already in right proportions. Repay 2 is not needed\\r\\n          (uint amountToRepay2, bool borrowInsteadRepay) = _getAmountToRepay2(\\r\\n            p,\\r\\n            idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET,\\r\\n            idxToRepay1 - 1\\r\\n          );\\r\\n\\r\\n          if (borrowInsteadRepay) {\\r\\n            _borrowToProportions(p, idxToRepay1 - 1, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, true);\\r\\n\\r\\n          } else if (amountToRepay2 > p.liquidationThresholds[idxToRepay1 - 1]) {\\r\\n            _secondRepay(p, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, idxToRepay1 - 1, amountToRepay2, type(uint).max);\\r\\n          }\\r\\n        }\\r\\n      } else {\\r\\n        // leftovers were swapped, there are no debts anymore\\r\\n        // the swap can change pool proportions, so probably it's necessary to make additional borrow here\\r\\n        if (\\r\\n          idxToRepay1 == 0 // there are no debts anymore\\r\\n          && p.usePoolProportions  // we use proportions from the pool\\r\\n          && p.propNotUnderlying18 != 0 && p.propNotUnderlying18 != 1e18 // BorrowLib doesn't allow prop=0\\r\\n        ) {\\r\\n          _fixLeftoversProportions(p);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // Withdraw is completed on last iteration (no debts, swapping leftovers)\\r\\n    return idxToRepay1 == 0;\\r\\n  }\\r\\n\\r\\n  /// @notice Make final repay in the scheme REPAY-SWAP-REPAY\\r\\n  ///         Depending on condition the final repay can be made several times or additional borrow can be made\\r\\n  /// @param amountToRepay Amount of {indexBorrow} asset that should be repaid\\r\\n  /// @param needToRepayPrev Amount-to-repay on previous call of the {_secondRepay}\\r\\n  ///                        This amount should decrease on each step of recursion.\\r\\n  ///                        if it doesn't decrease repay is not successfull and it's useless to continue to call repays\\r\\n  ///                        It can happen if liquidationThreshold has incorrect value (i.t. it's too low or zero)\\r\\n  function _secondRepay(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow,\\r\\n    uint amountToRepay,\\r\\n    uint needToRepayPrev\\r\\n  ) internal {\\r\\n    // we need to know repaidAmount\\r\\n    // we cannot relay on the value returned by _repayDebt because of SCB-710, we need to check balances\\r\\n    uint balanceBefore = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\\r\\n    ConverterStrategyBaseLib._repayDebt(p.converter, p.tokens[indexCollateral], p.tokens[indexBorrow], amountToRepay);\\r\\n    uint balanceAfter = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\\r\\n\\r\\n    uint repaidAmount = balanceBefore > balanceAfter\\r\\n      ? balanceBefore - balanceAfter\\r\\n      : 0;\\r\\n\\r\\n    if (repaidAmount < amountToRepay && amountToRepay - repaidAmount > p.liquidationThresholds[indexBorrow]) {\\r\\n      // repaidAmount is less than expected\\r\\n      // we need to make additional borrow OR probably make one more repay\\r\\n      // repaidAmount can be less amountToRepay2 even if there is still opened debt, see SCB-777\\r\\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexCollateral], p.tokens[indexBorrow], true);\\r\\n      if (\\r\\n        needToRepay > p.liquidationThresholds[indexBorrow]\\r\\n        && needToRepay < needToRepayPrev // amount of debt was reduced on prev iteration of recursion\\r\\n      ) {\\r\\n        // more repays are required\\r\\n        _secondRepay(p, indexCollateral, indexBorrow, amountToRepay - repaidAmount, needToRepay);\\r\\n      } else {\\r\\n        _borrowToProportions(p, indexBorrow, indexCollateral, false);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Set balances to right proportions using borrow\\r\\n  ///         (it can be necessary if propNotUnderlying18 was changed after swap)\\r\\n  function _fixLeftoversProportions(IterationPlanLib.SwapRepayPlanParams memory p) internal {\\r\\n    uint balanceAsset = IERC20(p.tokens[IDX_ASSET]).balanceOf(address(this));\\r\\n    uint balanceToken = IERC20(p.tokens[IDX_TOKEN]).balanceOf(address(this));\\r\\n    (uint targetAssets,\\r\\n      uint targetTokens\\r\\n    ) = IterationPlanLib._getTargetAmounts(p.prices, p.decs, balanceAsset, balanceToken, p.propNotUnderlying18, IDX_ASSET, IDX_TOKEN);\\r\\n\\r\\n    if (balanceAsset > targetAssets) {\\r\\n      if (balanceAsset - targetAssets > p.liquidationThresholds[IDX_ASSET]) {\\r\\n        _borrowToProportions(p, IDX_ASSET, IDX_TOKEN, balanceAsset, balanceToken, true);\\r\\n      }\\r\\n    } else if (balanceToken > targetTokens) {\\r\\n      if (balanceToken - targetTokens > p.liquidationThresholds[IDX_ASSET]) {\\r\\n        _borrowToProportions(p, IDX_TOKEN, IDX_ASSET, balanceToken, balanceAsset, true);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\\r\\n  function _borrowToProportions(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow,\\r\\n    bool checkOppositDebtDoesntExist\\r\\n  ) internal {\\r\\n    _borrowToProportions(\\r\\n      p,\\r\\n      indexCollateral,\\r\\n      indexBorrow,\\r\\n      IERC20(p.tokens[indexCollateral]).balanceOf(address(this)),\\r\\n      IERC20(p.tokens[indexBorrow]).balanceOf(address(this)),\\r\\n      checkOppositDebtDoesntExist\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\\r\\n  function _borrowToProportions(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow,\\r\\n    uint balanceCollateral,\\r\\n    uint balanceBorrow,\\r\\n    bool checkOppositDebtDoesntExist\\r\\n  ) internal {\\r\\n    // we are going to change direction of the borrow\\r\\n    // let's ensure that there is no debt in opposite direction\\r\\n    if (checkOppositDebtDoesntExist) {\\r\\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexBorrow], p.tokens[indexCollateral], false);\\r\\n      require(needToRepay < AppLib.DUST_AMOUNT_TOKENS, AppErrors.OPPOSITE_DEBT_EXISTS);\\r\\n    }\\r\\n\\r\\n    BorrowLib.RebalanceAssetsCore memory cac = BorrowLib.RebalanceAssetsCore({\\r\\n      converterLiquidator: BorrowLib.ConverterLiquidator(p.converter, p.liquidator),\\r\\n      assetA: p.tokens[indexCollateral],\\r\\n      assetB: p.tokens[indexBorrow],\\r\\n      propA: indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18,\\r\\n      propB: indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18,\\r\\n    // {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\\r\\n      alpha18: 1e18 * p.prices[indexBorrow] * p.decs[indexCollateral] / p.prices[indexCollateral] / p.decs[indexBorrow],\\r\\n      thresholdA: p.liquidationThresholds[indexCollateral],\\r\\n      addonA: 0,\\r\\n      addonB: 0,\\r\\n      indexA: indexCollateral,\\r\\n      indexB: indexBorrow\\r\\n    });\\r\\n\\r\\n    BorrowLib.openPosition(\\r\\n      cac,\\r\\n      BorrowLib.PricesDecs({\\r\\n        prices: p.prices,\\r\\n        decs: p.decs\\r\\n      }),\\r\\n      balanceCollateral,\\r\\n      balanceBorrow\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate amount that should be repaid to get right proportions of assets on balance\\r\\n  ///         Analyse only single borrow-direction: indexCollateral => indexBorrow\\r\\n  /// @return amountToRepay Amount that should be repaid\\r\\n  /// @return borrowInsteadRepay true if repay is not necessary at all and borrow is required instead\\r\\n  ///                            if we need both repay and borrow then false is returned\\r\\n  function _getAmountToRepay2(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow\\r\\n  ) internal view returns (\\r\\n    uint amountToRepay,\\r\\n    bool borrowInsteadRepay\\r\\n  ) {\\r\\n    GetAmountToRepay2Local memory v;\\r\\n    v.c0 = IERC20(p.tokens[indexCollateral]).balanceOf(address(this)) * p.prices[indexCollateral] / p.decs[indexCollateral];\\r\\n    v.b0 = IERC20(p.tokens[indexBorrow]).balanceOf(address(this)) * p.prices[indexBorrow] / p.decs[indexBorrow];\\r\\n\\r\\n    v.x = indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18;\\r\\n    v.y = indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18;\\r\\n    v.alpha = p.prices[indexCollateral] * p.decs[indexBorrow] * 1e18 / p.prices[indexBorrow] / p.decs[indexCollateral];\\r\\n\\r\\n    (uint needToRepay, uint collateralAmountOut) = p.converter.getDebtAmountStored(\\r\\n      address(this),\\r\\n      p.tokens[indexCollateral],\\r\\n      p.tokens[indexBorrow],\\r\\n      true\\r\\n    );\\r\\n\\r\\n    if (needToRepay == 0) {\\r\\n      // check if we need to make reverse borrow to fit to proportions: borrow collateral-asset under borrow-asset\\r\\n      uint targetCollateral = (v.c0 + v.b0) * v.x / (v.x + v.y);\\r\\n      borrowInsteadRepay = targetCollateral > v.c0\\r\\n        && targetCollateral - v.c0\\r\\n        > (p.liquidationThresholds[indexCollateral] * p.prices[indexCollateral] / p.decs[indexCollateral]);\\r\\n    } else {\\r\\n      // initial balances: c0, b0\\r\\n      // we are going to repay amount b and receive (betta * b, b), where betta ~ alpha * totalCollateral / totalBorrow\\r\\n      // we should have x/y = (c0 + betta * b) / (b0 - b)\\r\\n      // so b = (x * b0 - y * c0) / (betta * y + x)\\r\\n      v.b = (int(v.x * v.b0) - int(v.y * v.c0)) / (int(v.y * v.alpha * collateralAmountOut / needToRepay / 1e18) + int(v.x));\\r\\n      if (v.b > 0) {\\r\\n        amountToRepay = uint(v.b);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (amountToRepay * p.decs[indexBorrow] / p.prices[indexBorrow], borrowInsteadRepay);\\r\\n  }\\r\\n\\r\\n  /// @notice Swap {aggParams.amountToSwap} using either liquidator or aggregator\\r\\n  /// @dev You can use liquidator as aggregator, so aggregator's logic will be used for the liquidator\\r\\n  /// @param amountIn Calculated amount to be swapped. It can be different from {aggParams.amountToSwap} a bit,\\r\\n  ///                 but aggregators require exact value {aggParams.amountToSwap}, so amountIn is not used with agg.\\r\\n  function _swap(\\r\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\r\\n    SwapByAggParams memory aggParams,\\r\\n    uint indexIn,\\r\\n    uint indexOut,\\r\\n    uint amountIn\\r\\n  ) internal returns (\\r\\n    uint spentAmountIn,\\r\\n    uint updatedPropNotUnderlying18\\r\\n  ) {\\r\\n    // liquidator and aggregator have different logic here:\\r\\n    // - liquidator uses amountIn to swap\\r\\n    // - Aggregator uses amountToSwap for which a route was built off-chain before the call of the swap()\\r\\n    // It's allowed to use aggregator == liquidator, so in this way liquidator will use aggregator's logic (for tests)\\r\\n\\r\\n    if (!aggParams.useLiquidator) {\\r\\n      // aggregator requires exact input amount - aggParams.amountToSwap\\r\\n      // actual amount can be a bit different because the quote function was called in different block\\r\\n      amountIn = aggParams.amountToSwap;\\r\\n    }\\r\\n    address aggregator = aggParams.useLiquidator\\r\\n      ? address(p.liquidator)\\r\\n      : aggParams.aggregator;\\r\\n\\r\\n    require(amountIn <= IERC20(p.tokens[indexIn]).balanceOf(address(this)), AppErrors.NOT_ENOUGH_BALANCE);\\r\\n    // let's ensure that \\\"next swap\\\" is made using correct token\\r\\n    require(aggParams.tokenToSwap == p.tokens[indexIn], AppErrors.INCORRECT_SWAP_BY_AGG_PARAM);\\r\\n\\r\\n    if (amountIn > p.liquidationThresholds[indexIn]) {\\r\\n      AppLib.approveIfNeeded(p.tokens[indexIn], amountIn, aggregator);\\r\\n\\r\\n      uint balanceTokenOutBefore = AppLib.balance(p.tokens[indexOut]);\\r\\n\\r\\n      if (aggParams.useLiquidator) {\\r\\n\\r\\n        (spentAmountIn,) = ConverterStrategyBaseLib._liquidate(\\r\\n          p.converter,\\r\\n          ITetuLiquidator(aggregator),\\r\\n          p.tokens[indexIn],\\r\\n          p.tokens[indexOut],\\r\\n          amountIn,\\r\\n          _ASSET_LIQUIDATION_SLIPPAGE,\\r\\n          p.liquidationThresholds[indexIn],\\r\\n          true\\r\\n        );\\r\\n      } else {\\r\\n        if (aggregator != address(p.liquidator)) {\\r\\n          _checkSwapRouter(aggregator);\\r\\n        }\\r\\n\\r\\n        (bool success, bytes memory result) = aggregator.call(aggParams.swapData);\\r\\n        require(success, string(result));\\r\\n\\r\\n        spentAmountIn = amountIn;\\r\\n      }\\r\\n\\r\\n      require(\\r\\n        p.converter.isConversionValid(\\r\\n          p.tokens[indexIn],\\r\\n          amountIn,\\r\\n          p.tokens[indexOut],\\r\\n          AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\\r\\n          _ASSET_LIQUIDATION_SLIPPAGE\\r\\n        ), AppErrors.PRICE_IMPACT);\\r\\n\\r\\n      emit SwapByAgg(\\r\\n        aggParams.amountToSwap,\\r\\n        amountIn,\\r\\n        AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\\r\\n        amountIn * p.prices[indexIn] * p.decs[indexOut] / p.prices[indexOut] / p.decs[indexIn],\\r\\n        aggregator,\\r\\n        p.tokens[indexIn],\\r\\n        p.tokens[indexOut]\\r\\n      );\\r\\n    }\\r\\n\\r\\n    return (\\r\\n      spentAmountIn,\\r\\n    // p.propNotUnderlying18 contains original proportions that were valid before the swap\\r\\n    // after swap() we need to re-read new values from the pool\\r\\n      p.usePoolProportions\\r\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\r\\n        : p.propNotUnderlying18\\r\\n    );\\r\\n  }\\r\\n  //endregion ------------------------------------------------ Internal helper functions\\r\\n\\r\\n  //region ----------------------------------------- Utils\\r\\n  function getPoolPriceAdjustment(uint poolPriceDecimals) external pure returns (uint adjustment) {\\r\\n    // we assume that decimals never higher than 18\\r\\n    adjustment = poolPriceDecimals < 18 ? 10 ** (18 - poolPriceDecimals) : 1;\\r\\n  }\\r\\n\\r\\n  function _checkSwapRouter(address router) internal pure {\\r\\n    require(router == ONEINCH || router == OPENOCEAN, UNKNOWN_SWAP_ROUTER);\\r\\n  }\\r\\n\\r\\n  /// @notice Extract propNotUnderlying18 from {planEntryData} of the given {planKind}\\r\\n  function _extractProp(uint planKind, bytes memory planEntryData) internal pure returns (\\r\\n    uint propNotUnderlying18,\\r\\n    uint entryDataParamValue\\r\\n  ) {\\r\\n    if (planKind == IterationPlanLib.PLAN_SWAP_REPAY || planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\\r\\n      (, propNotUnderlying18) = abi.decode(planEntryData, (uint, uint));\\r\\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\\r\\n    } else {\\r\\n      require(planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, AppErrors.WRONG_VALUE);\\r\\n      // save \\\"required-amount-to-reduce-debt\\\" to entryDataParamValue\\r\\n      (, propNotUnderlying18, entryDataParamValue) = abi.decode(planEntryData, (uint, uint, uint));\\r\\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\\r\\n    }\\r\\n    return (propNotUnderlying18, entryDataParamValue);\\r\\n  }\\r\\n  //endregion ------------------------------------------ Utils\\r\\n}\\r\\n\",\"keccak256\":\"0x3ed4f959984fa8276d707dde1a4db18c85a818059d3596dde75be9928b9b8126\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/pair/PairBasedStrategyLogicLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\r\\nimport \\\"./PairBasedStrategyLib.sol\\\";\\r\\nimport \\\"../ConverterStrategyBaseLib2.sol\\\";\\r\\n\\r\\n/// @notice Library for the UniV3-like strategies with two tokens in the pool\\r\\nlibrary PairBasedStrategyLogicLib {\\r\\n  //region ------------------------------------------------------- Data types\\r\\n  /// @notice Local variables required inside withdrawByAggStep and quoteWithdrawByAgg\\r\\n  struct WithdrawLocal {\\r\\n    /// @notice [underlying, not-underlying]\\r\\n    address[] tokens;\\r\\n    address controller;\\r\\n    /// @notice liquidationThresholds for the {tokens}, greater or equal to {DEFAULT_LIQUIDATION_THRESHOLD}\\r\\n    uint[] liquidationThresholds;\\r\\n    uint planKind;\\r\\n    uint propNotUnderlying18;\\r\\n    uint entryDataParam;\\r\\n  }\\r\\n\\r\\n  /// @notice Common part of all XXXXConverterStrategyLogicLib.State\\r\\n  struct PairState {\\r\\n    address pool;\\r\\n    address strategyProfitHolder;\\r\\n    /// @notice This is underlying\\r\\n    address tokenA;\\r\\n    /// @notice This is not underlying\\r\\n    address tokenB;\\r\\n\\r\\n    bool isStablePool;\\r\\n    /// @notice Tokens are swapped in the pool (pool.tokenB is underlying, pool.tokenA is not-underlying)\\r\\n    bool depositorSwapTokens;\\r\\n\\r\\n    int24 tickSpacing;\\r\\n    int24 lowerTick;\\r\\n    int24 upperTick;\\r\\n    int24 rebalanceTickRange;\\r\\n    uint128 totalLiquidity;\\r\\n\\r\\n    /// @notice Fuse for tokens\\r\\n    PairBasedStrategyLib.FuseStateParams fuseAB;\\r\\n\\r\\n    /// @notice 1 means that the fuse was triggered ON and then all debts were closed\\r\\n    ///         and assets were converter to underlying using withdrawStepByAgg.\\r\\n    ///         This flag is automatically cleared to 0 if fuse is triggered OFF.\\r\\n    uint withdrawDone;\\r\\n\\r\\n    /// @notice Timestamp of last call of rebalanceNoSwaps() or zero if withdrawByAggStep() was called last\\r\\n    uint lastRebalanceNoSwap;\\r\\n\\r\\n    /// @notice reserve space for future needs\\r\\n    uint[50 - 17] __gap;\\r\\n  }\\r\\n\\r\\n  struct RebalanceNoSwapsLocal {\\r\\n    address tokenA;\\r\\n    address tokenB;\\r\\n    bool depositorSwapTokens;\\r\\n    int24 newLowerTick;\\r\\n    int24 newUpperTick;\\r\\n    uint prop0;\\r\\n    uint prop1;\\r\\n  }\\r\\n\\r\\n  struct WithdrawByAggStepLocal {\\r\\n    PairBasedStrategyLogicLib.WithdrawLocal w;\\r\\n    address tokenToSwap;\\r\\n    address aggregator;\\r\\n    address controller;\\r\\n    address converter;\\r\\n    address splitter;\\r\\n    uint amountToSwap;\\r\\n    uint profitToCover;\\r\\n    uint oldTotalAssets;\\r\\n    uint entryToPool;\\r\\n  }\\r\\n  //endregion ------------------------------------------------------- Data types\\r\\n\\r\\n  //region ------------------------------------------------------- Events\\r\\n  //endregion ------------------------------------------------------- Events\\r\\n\\r\\n  //region ------------------------------------------------------- Helpers\\r\\n  /// @notice Prepare array of amounts ready to deposit, borrow missed amounts\\r\\n  /// @param amount_ Amount of tokenA\\r\\n  /// @param tokenA Underlying\\r\\n  /// @param tokenB Not-underlying\\r\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\r\\n  /// @param liquidationThresholds Dust-thresholds for the tokens A and B\\r\\n  /// @return tokenAmounts Amounts of token A and B to be deposited, [A, B]\\r\\n  function _beforeDeposit(\\r\\n    ITetuConverter tetuConverter_,\\r\\n    uint amount_,\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint prop0,\\r\\n    mapping(address => uint) storage liquidationThresholds\\r\\n  ) external returns (\\r\\n    uint[] memory tokenAmounts\\r\\n  ) {\\r\\n    return BorrowLib.prepareToDeposit(\\r\\n      tetuConverter_,\\r\\n      amount_,\\r\\n      [tokenA, tokenB],\\r\\n      [\\r\\n        AppLib._getLiquidationThreshold(liquidationThresholds[tokenA]),\\r\\n        AppLib._getLiquidationThreshold(liquidationThresholds[tokenB])\\r\\n      ],\\r\\n      prop0\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Initialize {dest} in place. Underlying is always first in {dest.tokens}.\\r\\n  /// @param tokens_ [underlying, not-underlying]\\r\\n  function initWithdrawLocal(\\r\\n    WithdrawLocal memory dest,\\r\\n    address[2] memory tokens_,\\r\\n    mapping(address => uint) storage liquidationThresholds,\\r\\n    bytes memory planEntryData,\\r\\n    address controller\\r\\n  ) internal view { // it's internal because it initializes {dest}\\r\\n    dest.controller = controller;\\r\\n    StrategyLib2.onlyOperators(dest.controller);\\r\\n\\r\\n    dest.planKind = IterationPlanLib.getEntryKind(planEntryData);\\r\\n    (dest.propNotUnderlying18, dest.entryDataParam)  = PairBasedStrategyLib._extractProp(dest.planKind, planEntryData);\\r\\n\\r\\n    dest.tokens = new address[](2);\\r\\n    (dest.tokens[0], dest.tokens[1]) = (tokens_[0], tokens_[1]);\\r\\n\\r\\n    dest.liquidationThresholds = new uint[](2);\\r\\n    dest.liquidationThresholds[0] = AppLib._getLiquidationThreshold(liquidationThresholds[dest.tokens[0]]);\\r\\n    dest.liquidationThresholds[1] = AppLib._getLiquidationThreshold(liquidationThresholds[dest.tokens[1]]);\\r\\n  }\\r\\n\\r\\n  function calcTickRange(int24 tick, int24 tickRange, int24 tickSpacing) public pure returns (\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick\\r\\n  ) {\\r\\n    if (tick < 0 && tick / tickSpacing * tickSpacing != tick) {\\r\\n      lowerTick = ((tick - tickRange) / tickSpacing - 1) * tickSpacing;\\r\\n    } else {\\r\\n      lowerTick = (tick - tickRange) / tickSpacing * tickSpacing;\\r\\n    }\\r\\n    upperTick = tickRange == 0 ? lowerTick + tickSpacing : lowerTick + tickRange * 2;\\r\\n  }\\r\\n  //endregion ------------------------------------------------------- Helpers\\r\\n\\r\\n  //region ------------------------------------------------------- PairState-helpers\\r\\n  /// @notice Set the initial values to PairState instance\\r\\n  /// @param pairState Depositor storage state struct to be initialized\\r\\n  /// @param addr [pool, asset, pool.token0(), pool.token1()]\\r\\n  ///        asset: Underlying asset of the depositor.\\r\\n  /// @param tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\\r\\n  /// @param fuseThresholds Fuse thresholds for tokens (stable pool only)\\r\\n  function setInitialDepositorValues(\\r\\n    PairState storage pairState,\\r\\n    address[4] calldata addr,\\r\\n    int24[4] calldata tickData,\\r\\n    bool isStablePool_,\\r\\n    uint[4] calldata fuseThresholds\\r\\n  ) external {\\r\\n    pairState.pool = addr[0];\\r\\n    address asset = addr[1];\\r\\n    address token0 = addr[2];\\r\\n    address token1 = addr[3];\\r\\n\\r\\n    pairState.tickSpacing = tickData[0];\\r\\n    pairState.lowerTick = tickData[1];\\r\\n    pairState.upperTick = tickData[2];\\r\\n    pairState.rebalanceTickRange = tickData[3];\\r\\n\\r\\n    require(asset == token0 || asset == token1, PairBasedStrategyLib.INCORRECT_ASSET);\\r\\n    if (asset == token0) {\\r\\n      pairState.tokenA = token0;\\r\\n      pairState.tokenB = token1;\\r\\n      pairState.depositorSwapTokens = false;\\r\\n    } else {\\r\\n      pairState.tokenA = token1;\\r\\n      pairState.tokenB = token0;\\r\\n      pairState.depositorSwapTokens = true;\\r\\n    }\\r\\n\\r\\n    if (isStablePool_) {\\r\\n      /// for stable pools fuse can be enabled\\r\\n      pairState.isStablePool = true;\\r\\n      PairBasedStrategyLib.setFuseStatus(pairState.fuseAB, PairBasedStrategyLib.FuseStatus.FUSE_OFF_1);\\r\\n      PairBasedStrategyLib.setFuseThresholds(pairState.fuseAB, fuseThresholds);\\r\\n    }\\r\\n\\r\\n    // totalLiquidity is 0, no need to initialize\\r\\n    // withdrawDone is 0, no need to initialize\\r\\n  }\\r\\n\\r\\n  function updateFuseStatus(\\r\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\r\\n    bool fuseStatusChangedAB,\\r\\n    PairBasedStrategyLib.FuseStatus fuseStatusAB\\r\\n  ) external {\\r\\n    bool updated;\\r\\n    if (fuseStatusChangedAB) {\\r\\n      PairBasedStrategyLib.setFuseStatus(pairState.fuseAB, fuseStatusAB);\\r\\n      updated = true;\\r\\n    }\\r\\n\\r\\n    if (updated) {\\r\\n      // if fuse is triggered ON, full-withdraw is required\\r\\n      // if fuse is triggered OFF, the assets will be deposited back to pool\\r\\n      // in both cases withdrawDone should be reset\\r\\n      pairState.withdrawDone = 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns the current state of the contract\\r\\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\\r\\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\\r\\n  /// @return nums [totalLiquidity, fuse-status-tokenA, withdrawDone, 4 thresholds of token A, lastRebalanceNoSwap, 5 reserved values]\\r\\n  /// @return boolValues [isStablePool, depositorSwapTokens]\\r\\n  function getDefaultState(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (\\r\\n    address[] memory addr,\\r\\n    int24[] memory tickData,\\r\\n    uint[] memory nums,\\r\\n    bool[] memory boolValues\\r\\n  ) {\\r\\n    addr = new address[](4);\\r\\n    tickData = new int24[](4);\\r\\n    nums = new uint[](13);\\r\\n    boolValues = new bool[](2);\\r\\n\\r\\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_A] = pairState.tokenA;\\r\\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_B] = pairState.tokenB;\\r\\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_POOL] = pairState.pool;\\r\\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER] = pairState.strategyProfitHolder;\\r\\n\\r\\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_TICK_SPACING] = pairState.tickSpacing;\\r\\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_LOWER_TICK] = pairState.lowerTick;\\r\\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_UPPER_TICK] = pairState.upperTick;\\r\\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE] = pairState.rebalanceTickRange;\\r\\n\\r\\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY] = uint(pairState.totalLiquidity);\\r\\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_FUSE_STATUS] = uint(pairState.fuseAB.status);\\r\\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE] = pairState.withdrawDone;\\r\\n    for (uint i = 0; i < 4; ++i) {\\r\\n      nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_THRESHOLD_0 + i] = pairState.fuseAB.thresholds[i];\\r\\n    }\\r\\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP] = pairState.lastRebalanceNoSwap;\\r\\n\\r\\n    boolValues[PairBasedStrategyLib.IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL] = pairState.isStablePool;\\r\\n    boolValues[PairBasedStrategyLib.IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS] = pairState.depositorSwapTokens;\\r\\n  }\\r\\n\\r\\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\\r\\n  /// @param amounts_ Amounts of [underlying, not-underlying] that will be received from the pool before withdrawing\\r\\n  function quoteWithdrawByAgg(\\r\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\r\\n    bytes memory planEntryData,\\r\\n    uint[] memory amounts_,\\r\\n    address controller_,\\r\\n    ITetuConverter converter_,\\r\\n    mapping(address => uint) storage liquidationThresholds\\r\\n  ) external returns (\\r\\n    address tokenToSwap,\\r\\n    uint amountToSwap\\r\\n  ) {\\r\\n    // check operator-only, initialize w\\r\\n    WithdrawLocal memory w;\\r\\n    initWithdrawLocal(\\r\\n      w,\\r\\n      [pairState.tokenA, pairState.tokenB],\\r\\n      liquidationThresholds,\\r\\n      planEntryData,\\r\\n      controller_\\r\\n    );\\r\\n\\r\\n    (tokenToSwap, amountToSwap) = PairBasedStrategyLib.quoteWithdrawStep(\\r\\n      [address(converter_), address(AppLib._getLiquidator(w.controller))],\\r\\n      w.tokens,\\r\\n      w.liquidationThresholds,\\r\\n      amounts_,\\r\\n      w.planKind,\\r\\n      [w.propNotUnderlying18, w.entryDataParam]\\r\\n    );\\r\\n\\r\\n    if (amountToSwap != 0) {\\r\\n      // withdrawByAggStep will execute REPAY1 - SWAP - REPAY2\\r\\n      // but quoteWithdrawByAgg and withdrawByAggStep are executed in different blocks\\r\\n      // so, REPAY1 can return less collateral than quoteWithdrawByAgg expected\\r\\n      // As result, we can have less amount on balance than required amountToSwap\\r\\n      // So, we need to reduce amountToSwap on small gap amount\\r\\n      amountToSwap -= amountToSwap * PairBasedStrategyLib.GAP_AMOUNT_TO_SWAP / 100_000;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate amounts to be deposited to pool, calculate loss, fix profitToCover\\r\\n  /// @param addr_ [tokenToSwap, aggregator, controller, converter, splitter]\\r\\n  /// @param values_ [amountToSwap_, profitToCover, oldTotalAssets, not used here]\\r\\n  /// @param tokens [underlying, not-underlying] (values been read from pairBase)\\r\\n  /// @return completed All debts were closed, leftovers were swapped to proper proportions\\r\\n  /// @return tokenAmounts Amounts to be deposited to pool. If {tokenAmounts} contains zero amount return empty array.\\r\\n  function withdrawByAggStep(\\r\\n    address[5] calldata addr_,\\r\\n    uint[4] calldata values_,\\r\\n    bytes memory swapData,\\r\\n    bytes memory planEntryData,\\r\\n    address[2] memory tokens,\\r\\n    mapping(address => uint) storage liquidationThresholds\\r\\n  ) external returns (\\r\\n    bool completed,\\r\\n    uint[] memory tokenAmounts,\\r\\n    uint loss\\r\\n  ) {\\r\\n    WithdrawByAggStepLocal memory v;\\r\\n\\r\\n    v.tokenToSwap = addr_[0];\\r\\n    v.aggregator = addr_[1];\\r\\n    v.controller = addr_[2];\\r\\n    v.converter = addr_[3];\\r\\n    v.splitter = addr_[4];\\r\\n\\r\\n    v.amountToSwap = values_[0];\\r\\n    v.profitToCover = values_[1];\\r\\n    v.oldTotalAssets = values_[2];\\r\\n\\r\\n    // initialize v\\r\\n    PairBasedStrategyLogicLib.initWithdrawLocal(v.w, tokens, liquidationThresholds, planEntryData, v.controller);\\r\\n\\r\\n    // make withdraw iteration according to the selected plan\\r\\n    completed = PairBasedStrategyLib.withdrawStep(\\r\\n      [v.converter, address(AppLib._getLiquidator(v.w.controller))],\\r\\n      v.w.tokens,\\r\\n      v.w.liquidationThresholds,\\r\\n      v.tokenToSwap,\\r\\n      v.amountToSwap,\\r\\n      v.aggregator,\\r\\n      swapData,\\r\\n      v.aggregator == address(0),\\r\\n      v.w.planKind,\\r\\n      [v.w.propNotUnderlying18, v.w.entryDataParam]\\r\\n    );\\r\\n\\r\\n    // fix loss / profitToCover\\r\\n    if (v.profitToCover != 0) {\\r\\n      ConverterStrategyBaseLib2.sendToInsurance(\\r\\n        v.w.tokens[0],\\r\\n        v.profitToCover,\\r\\n        v.splitter,\\r\\n        v.oldTotalAssets,\\r\\n        IERC20(v.w.tokens[0]).balanceOf(address(this))\\r\\n      );\\r\\n    }\\r\\n\\r\\n    (loss, tokenAmounts) = ConverterStrategyBaseLib2.getTokenAmountsPair(\\r\\n      ITetuConverter(v.converter),\\r\\n      v.oldTotalAssets,\\r\\n      v.w.tokens[0],\\r\\n      v.w.tokens[1],\\r\\n      [v.w.liquidationThresholds[0], v.w.liquidationThresholds[1]]\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Rebalance asset to proportions {propTokenA}:{1e18-propTokenA}, fix profitToCover\\r\\n  /// @param propTokenA Proportion of {tokenA}, > 0. Proportion of {tokenB} is calculates as 1e18 - prop0\\r\\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\\r\\n  function _rebalanceNoSwaps(\\r\\n    address[2] calldata converterLiquidator,\\r\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\r\\n    uint profitToCover,\\r\\n    uint totalAssets,\\r\\n    address splitter,\\r\\n    uint[2] calldata liquidationThresholdsAB,\\r\\n    uint propTokenA\\r\\n  ) internal {\\r\\n    address tokenA = pairState.tokenA;\\r\\n    address tokenB = pairState.tokenB;\\r\\n\\r\\n    BorrowLib.rebalanceAssets(\\r\\n      ITetuConverter(converterLiquidator[0]),\\r\\n      ITetuLiquidator(converterLiquidator[1]),\\r\\n      tokenA,\\r\\n      tokenB,\\r\\n      propTokenA,\\r\\n      liquidationThresholdsAB[0], // liquidityThreshold of token A\\r\\n      liquidationThresholdsAB[1], // liquidityThreshold of token B\\r\\n      profitToCover\\r\\n    );\\r\\n\\r\\n    // we assume here, that rebalanceAssets provides profitToCover on balance and set leftovers to right proportions\\r\\n    if (profitToCover != 0) {\\r\\n      ConverterStrategyBaseLib2.sendToInsurance(tokenA, profitToCover, splitter, totalAssets, IERC20(tokenA).balanceOf(address(this)));\\r\\n    }\\r\\n  }\\r\\n  //endregion ------------------------------------------------------- PairState-helpers\\r\\n\\r\\n  //region ------------------------------------------------------- needStrategyRebalance\\r\\n  /// @notice Determine if the strategy needs to be rebalanced.\\r\\n  /// @return needRebalance A boolean indicating if {rebalanceNoSwaps} should be called\\r\\n  function needStrategyRebalance(\\r\\n    PairBasedStrategyLogicLib.PairState storage pairState,\\r\\n    ITetuConverter converter_,\\r\\n    int24 tick,\\r\\n    uint poolPrice\\r\\n  ) external view returns (\\r\\n    bool needRebalance,\\r\\n    bool fuseStatusChangedAB,\\r\\n    PairBasedStrategyLib.FuseStatus fuseStatusAB\\r\\n  ) {\\r\\n    if (pairState.isStablePool) {\\r\\n      uint price = ConverterStrategyBaseLib2.getOracleAssetsPrice(\\r\\n        converter_,\\r\\n        pairState.tokenA,\\r\\n        pairState.tokenB\\r\\n      );\\r\\n      (fuseStatusChangedAB, fuseStatusAB) = PairBasedStrategyLib.needChangeFuseStatus(pairState.fuseAB, price, poolPrice);\\r\\n      needRebalance = fuseStatusChangedAB\\r\\n        || (\\r\\n          !PairBasedStrategyLib.isFuseTriggeredOn(fuseStatusAB)\\r\\n          && _needPoolRebalance(pairState, tick)\\r\\n        );\\r\\n    } else {\\r\\n      needRebalance = _needPoolRebalance(pairState, tick);\\r\\n    }\\r\\n\\r\\n    return (needRebalance, fuseStatusChangedAB, fuseStatusAB); // hide warning\\r\\n  }\\r\\n\\r\\n  /// @notice Determine if the pool needs to be rebalanced.\\r\\n  /// @return A boolean indicating if the pool needs to be rebalanced.\\r\\n  function _needPoolRebalance(\\r\\n    int24 tick,\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick,\\r\\n    int24 tickSpacing,\\r\\n    int24 rebalanceTickRange\\r\\n  ) internal pure returns (bool) {\\r\\n    if (upperTick - lowerTick == tickSpacing) {\\r\\n      return tick < lowerTick || tick >= upperTick;\\r\\n    } else {\\r\\n      int24 halfRange = (upperTick - lowerTick) / 2;\\r\\n      int24 oldMedianTick = lowerTick + halfRange;\\r\\n      return (tick > oldMedianTick)\\r\\n        ? tick - oldMedianTick >= rebalanceTickRange\\r\\n        : oldMedianTick - tick > rebalanceTickRange;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _needPoolRebalance(PairBasedStrategyLogicLib.PairState storage pairState, int24 tick) internal view returns (bool) {\\r\\n    return _needPoolRebalance(\\r\\n      tick,\\r\\n      pairState.lowerTick,\\r\\n      pairState.upperTick,\\r\\n      pairState.tickSpacing,\\r\\n      pairState.rebalanceTickRange\\r\\n    );\\r\\n  }\\r\\n  //endregion ------------------------------------------------------- needStrategyRebalance\\r\\n}\\r\\n\",\"keccak256\":\"0xa1de412c47d5ef698afdb1fe0afe130a9b66dae28ef90aaec4349ca482f24863\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101095760003560e01c8063a7aced09116100a1578063bd85be2911610070578063bd85be2914610296578063c3724a89146102b6578063d1585fc4146102d6578063f6e26117146102e957600080fd5b8063a7aced0914610215578063b63cd90214610228578063b676262114610248578063b6fda8131461027657600080fd5b806334d2ec3d116100dd57806334d2ec3d146101915780637269cb3a146101a45780638fb5468e146101c7578063911ec053146101e757600080fd5b8062438b7e1461010e57806328f0aec41461013b5780632cc58ef91461015c5780632df3c9a91461016f575b600080fd5b61012161011c366004614949565b610318565b604080519283526020830191909152015b60405180910390f35b61014e6101493660046149a5565b610334565b604051908152602001610132565b61012161016a3660046149a5565b61042b565b81801561017b57600080fd5b5061018f61018a3660046149e0565b6104d3565b005b61014e61019f366004614b40565b610bb9565b6101b76101b2366004614c29565b610d61565b6040519015158152602001610132565b6101da6101d53660046149a5565b611018565b6040516101329190614c94565b8180156101f357600080fd5b50610207610202366004614d27565b611222565b604051610132929190614dd6565b6101da610223366004614e06565b61146a565b81801561023457600080fd5b506101da610243366004614e2b565b611686565b81801561025457600080fd5b50610268610263366004614e6d565b611ed7565b604051610132929190614eb4565b81801561028257600080fd5b506101da610291366004614ed6565b612873565b6102a96102a43660046149a5565b612d4f565b6040516101329190614fa2565b8180156102c257600080fd5b5061018f6102d1366004614fb5565b612e67565b6101b76102e4366004614fed565b612ede565b8180156102f557600080fd5b506103096103043660046149a5565b6135b0565b60405161013293929190615024565b60008061032786868686613e55565b9150915094509492505050565b805460038201546000916001600160a01b03169060ff600160a81b8204169083908190610383908590600160c81b8104600290810b91600160e01b8104820b91600160b01b909104900b614140565b9150915060008061039686858588613e55565b909250905060006103a782846150af565b116040518060400160405280601081526020016f54532d3234207a65726f2076616c756560801b815250906103f85760405162461bcd60e51b81526004016103ef9190614fa2565b60405180910390fd5b5061040381836150af565b61041582670de0b6b3a76400006150c2565b61041f91906150ef565b98975050505050505050565b805460318201546040516308aaf22f60e31b8152600092839273__$5ce7b97fe3b9dad27bffcf1c56869f0b10$__92634557917892610489926001600160a01b0390911691600080516020615d118339815191529190600401615103565b6040805180830381865af41580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c99190615127565b9094909350915050565b60006104e56040880160208901615161565b6001600160a01b031614156040518060400160405280601181526020017054532d31207a65726f206164647265737360781b815250906105385760405162461bcd60e51b81526004016103ef9190614fa2565b50600061054b6040880160208901615161565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac919061518e565b905060006105c06040890160208a01615161565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610621919061518e565b905061062b614845565b600073__$5ce7b97fe3b9dad27bffcf1c56869f0b10$__63d0c93a7c6040518163ffffffff1660e01b8152600401602060405180830381865af4158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a91906151b6565b90508860020b60001461076a57806106b2818b6151d3565b6106bc919061520d565b60020b8960020b146040518060400160405280601881526020017741532d3320496e636f7272656374207469636b52616e676560401b815250906107135760405162461bcd60e51b81526004016103ef9190614fa2565b508061071f818a6151d3565b610729919061520d565b60020b8860020b14604051806060016040528060218152602001615d5160219139906107685760405162461bcd60e51b81526004016103ef9190614fa2565b505b600281900b825273__$461d2a13b6c4ece874725da1f5491a2777$__6358817a9861079b60408d0160208e01615161565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260028c810b602483015284900b60448201526064016040805180830381865af41580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610814919061522d565b836001602002018460028093840b602091909102919091015291900b90528782600360029290920b6020909202015250604080516080810190915273__$b1ba452cecccdd06eb05ace2d0a762c7e1$__9063b8b4a449908c90808d60016020020160208101906108849190615161565b6001600160a01b03166001600160a01b031681526020018a6001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b03168152508489896040518663ffffffff1660e01b8152600401610904959493929190615265565b60006040518083038186803b15801561091c57600080fd5b505af4158015610930573d6000803e3d6000fd5b505050506000896000600281106109495761094961514b565b60200201602081019061095c9190615161565b6001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd919061518e565b60405163095ea7b360e01b81529091506001600160a01b0385169063095ea7b3906109f0908490600019906004016152e2565b6020604051808303816000875af1158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3391906152fb565b5060405163095ea7b360e01b81526001600160a01b0384169063095ea7b390610a64908490600019906004016152e2565b6020604051808303816000875af1158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa791906152fb565b5060405163095ea7b360e01b81526001600160a01b0385169063095ea7b390610ae690600080516020615d1183398151915290600019906004016152e2565b6020604051808303816000875af1158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2991906152fb565b5060405163095ea7b360e01b81526001600160a01b0384169063095ea7b390610b6890600080516020615d1183398151915290600019906004016152e2565b6020604051808303816000875af1158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab91906152fb565b505050505050505050505050565b600080846001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e919061518e565b84519091506000805b82811015610d53576000878281518110610c4357610c4361514b565b60200260200101519050896001600160a01b0316816001600160a01b031603610c9257868281518110610c7857610c7861514b565b602002602001015183610c8b91906150af565b9250610d42565b846001600160a01b031663a9dd14d6898481518110610cb357610cb361514b565b60200260200101518c8a8681518110610cce57610cce61514b565b60200260200101516040518463ffffffff1660e01b8152600401610cf493929190615103565b602060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d359190615318565b610d3f90846150af565b92505b50610d4c81615331565b9050610c27565b50925050505b949350505050565b815460028301546040805163313ce56760e01b815290516000936001600160a01b0390811693859373__$79fe6ec7a3db45dafbed12dca1c6dad764$__9363556ce728939092169163313ce567916004808201926020929091908290030181865afa158015610dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df8919061535b565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401602060405180830381865af4158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a9190615318565b6003860154604051635620c32d60e11b81526001600160a01b0380861660048301529091166024820152909150600090829073__$5ce7b97fe3b9dad27bffcf1c56869f0b10$__9063ac41865a90604401602060405180830381865af4158015610ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eec9190615318565b610ef691906150c2565b905073__$b1ba452cecccdd06eb05ace2d0a762c7e1$__6351265e89878773__$461d2a13b6c4ece874725da1f5491a2777$__63ecc89419886040518263ffffffff1660e01b8152600401610f4b9190615376565b602060405180830381865af4158015610f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8c91906151b6565b6040516001600160e01b031960e086901b16815260048101939093526001600160a01b03909116602483015260020b604482015260648101849052608401606060405180830381865af4158015610fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100b919061538a565b5090979650505050505050565b604080516002808252606080830184529260208301908036833750508354604080516339db007960e21b815290519394506000936001600160a01b03909216925063e76c01e49160048083019260e09291908290030181865afa158015611083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a791906153e2565b505050506003860154600480880154604051630544f36560e31b815295965073__$5ce7b97fe3b9dad27bffcf1c56869f0b10$__95632a279b28955061111994508793600160c81b8104600290810b94600160e01b909204900b92630100000090046001600160801b03169101615471565b6040805180830381865af4158015611135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111599190615127565b8360008151811061116c5761116c61514b565b60200260200101846001815181106111865761118661514b565b6020908102919091010191909152526003830154600160a81b900460ff161561121c57816001815181106111bc576111bc61514b565b6020026020010151826000815181106111d7576111d761514b565b6020026020010151836000815181106111f2576111f261514b565b602002602001018460018151811061120c5761120c61514b565b6020908102919091010191909152525b50919050565b60408051808201825260028401546001600160a01b0390811682526003850154166020820152905163bd13c52960e01b81526000916060918290849073__$b1ba452cecccdd06eb05ace2d0a762c7e1$__9063bd13c52990611292908e908e908e908e908a908e906004016154a4565b600060405180830381865af41580156112af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112d791908101906155b6565b91965092509050801561137a5773__$8f1afe7577f9ab973017c74eca19b86f3c$__6326eadaa38d8d60046020020160208101906113159190615161565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044810184905260640160006040518083038186803b15801561136157600080fd5b505af4158015611375573d6000803e3d6000fd5b505050505b6040805182815260208c8101359082015260008183015290517f3715d08a7dcc9d792a5a426f62429b9f889a7b140004f9f85190a48485695cf19181900360600190a160608a0135600114806113dc575060608a013560021480156113dc5750845b1561145b578654600388015461141c916001600160a01b031690600160c81b8104600290810b91600160e01b8104820b91600160b01b909104900b614140565b60038901805465ffffffffffff60c81b1916600160e01b62ffffff9384160262ffffff60c81b191617600160c81b939092169290920217905590925082905b50505097509795505050505050565b606060008360000160009054906101000a90046001600160a01b03166001600160a01b031663e76c01e46040518163ffffffff1660e01b815260040160e060405180830381865afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e791906153e2565b50949550600294506114f99350505050565b604051908082528060200260200182016040528015611522578160200160208202803683370190505b506003850154604051630544f36560e31b815291935073__$5ce7b97fe3b9dad27bffcf1c56869f0b10$__91632a279b289161157c918591600160c81b8104600290810b92600160e01b909204900b908990600401615471565b6040805180830381865af4158015611598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bc9190615127565b836000815181106115cf576115cf61514b565b60200260200101846001815181106115e9576115e961514b565b6020908102919091010191909152526003840154600160a81b900460ff161561167f578160018151811061161f5761161f61514b565b60200260200101518260008151811061163a5761163a61514b565b6020026020010151836000815181106116555761165561514b565b602002602001018460018151811061166f5761166f61514b565b6020908102919091010191909152525b5092915050565b6040805160808101825260008082526020820181905281830181905260608083019190915282516002808252818301909452909281602001602082028036833750505060018601546001600160a01b03168252915060006116e68661416a565b60048701546001600160801b0363010000009091048116602080860182905260408051808201909152601481527341532d372057726f6e67206c697175696469747960601b9181019190915292935090871611156117575760405162461bcd60e51b81526004016103ef9190614fa2565b506031860154846117e2576040516307cf0b0f60e31b8152600080516020615d3183398151915290633e78587890611795908590859060040161564d565b60408051808303816000875af11580156117b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d79190615127565b606085015260408401525b600080516020615d318339815191526334267cbc6117ff8961416a565b896031015460006040518463ffffffff1660e01b815260040161182493929190615668565b600060405180830381600087803b15801561183e57600080fd5b505af1158015611852573d6000803e3d6000fd5b50505050846119cd576040830151156119145760328701546040808501519051633f46232960e21b81526001600160a01b0390921691600080516020615d318339815191529163fd188ca4916118b1918591309160009160040161568c565b6020604051808303816000875af11580156118d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f49190615318565b604085018190528451611912916001600160a01b03841691906141e0565b505b6060830151156119cd5760338701546060840151604051633f46232960e21b81526001600160a01b0390921691600080516020615d318339815191529163fd188ca49161196a918591309160009160040161568c565b6020604051808303816000875af1158015611989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ad9190615318565b6060850181905284516119cb916001600160a01b03841691906141e0565b505b604051633c423f0b60e01b8152600481018290523060248201526060604482015260006064820152600080516020615d3183398151915290633c423f0b90608401600060405180830381600087803b158015611a2857600080fd5b505af1158015611a3c573d6000803e3d6000fd5b50506040805160a0810182528481526001600160801b038a81166020830190815260008385018181526060850191825242608086019081529551630624e65f60e11b8152945160048601529151909216602484015251604483015251606482015290516084820152600080516020615d118339815191529250630c49ccbe915060a40160408051808303816000875af1158015611add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b019190615127565b85600081518110611b1457611b1461514b565b6020026020010186600181518110611b2e57611b2e61514b565b602090810291909101810192909252919091526040805160808101825283815230928101929092526001600160801b0382820181905260608301525163fc6f786560e01b81526000918291600080516020615d118339815191529163fc6f786591611b9c91906004016156b5565b60408051808303816000875af1158015611bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bde9190615127565b91509150600086600081518110611bf757611bf761514b565b60200260200101518311611c0c576000611c32565b86600081518110611c1f57611c1f61514b565b602002602001015183611c3291906156f8565b9050600087600181518110611c4957611c4961514b565b60200260200101518311611c5e576000611c84565b87600181518110611c7157611c7161514b565b602002602001015183611c8491906156f8565b60408051848152602081018390529192507f15097721483fb2e62f76b9953e3601b26e7cc79208a0191df6fa701c6148744d910160405180910390a160038b0154600160a81b900460ff1615611d485787600181518110611ce757611ce761514b565b602002602001015188600081518110611d0257611d0261514b565b602002602001015189600081518110611d1d57611d1d61514b565b602002602001018a600181518110611d3757611d3761514b565b602090810291909101019190915252905b8115611d6b57865160028c0154611d6b916001600160a01b0390911690846141e0565b8015611d8e57865160038c0154611d8e916001600160a01b0390911690836141e0565b505050508583602001818151611da4919061570b565b6001600160801b03908116909152602085015160048a01805472ffffffffffffffffffffffffffffffff000000191663010000009290931691820292909217909155159050611ecd57604051632142170760e11b8152600080516020615d11833981519152906342842e0e90611e30903090600080516020615d31833981519152908690600401615103565b600060405180830381600087803b158015611e4a57600080fd5b505af1158015611e5e573d6000803e3d6000fd5b5050604051631143967160e11b8152600080516020615d3183398151915292506322872ce29150611e9a9085908590600090819060040161572b565b600060405180830381600087803b158015611eb457600080fd5b505af1158015611ec8573d6000803e3d6000fd5b505050505b5050509392505050565b6040805160a081018252600384015460ff600160a81b8204161515808352600060208401819052603187015494840194909452600160c81b8204600290810b606085810191909152600160e01b909304900b60808401529092919082908190611f5657600287015460038801546001600160a01b039182169116611f6e565b600387015460028801546001600160a01b0391821691165b8451919350915015611fed5785600181518110611f8d57611f8d61514b565b602002602001015186600081518110611fa857611fa861514b565b602002602001015187600081518110611fc357611fc361514b565b6020026020010188600181518110611fdd57611fdd61514b565b6020908102919091010191909152525b604080516002808252606082018352909160208301908036833750505060408401519095501561213657604083810151905163133f757160e31b815260048101919091526000908190600080516020615d11833981519152906399fbab889060240161016060405180830381865afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190615762565b50505050509550955050505050846060015160020b8260020b1415806120c15750846080015160020b8160020b14155b15612133576040858101519051630852cd8d60e31b81526004810191909152600080516020615d11833981519152906342966c6890602401600060405180830381600087803b15801561211357600080fd5b505af1158015612127573d6000803e3d6000fd5b50506000604088015250505b50505b60006121418861416a565b9050836040015160000361234a57600080516020615d118339815191526001600160a01b0316639cc1a283604051806101400160405280866001600160a01b03168152602001856001600160a01b03168152602001876060015160020b8152602001876080015160020b81526020018a6000815181106121c3576121c361514b565b602002602001015181526020018a6001815181106121e3576121e361514b565b602002602001015181526020016000815260200160008152602001306001600160a01b03168152602001428152506040518263ffffffff1660e01b815260040161222d9190615839565b6080604051808303816000875af115801561224c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227091906158e4565b87604001886020018b60008151811061228b5761228b61514b565b602002602001018c6001815181106122a5576122a561514b565b6020908102919091010193909352929091526001600160801b0390921690525260408085015160318a018190559051632142170760e11b8152600080516020615d11833981519152916342842e0e91612313913091600080516020615d318339815191529190600401615103565b600060405180830381600087803b15801561232d57600080fd5b505af1158015612341573d6000803e3d6000fd5b5050505061279e565b600080516020615d118339815191526001600160a01b031663219f5d176040518060c00160405280876040015181526020018a60008151811061238f5761238f61514b565b602002602001015181526020018a6001815181106123af576123af61514b565b602002602001015181526020016000815260200160008152602001428152506040518263ffffffff1660e01b81526004016124299190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6060604051808303816000875af1158015612448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246c9190615922565b86602001896000815181106124835761248361514b565b602002602001018a60018151811061249d5761249d61514b565b60209081029190910101929092529190526001600160801b03918216905260048901546301000000900416156127245760408085015190516307cf0b0f60e31b81526000918291600080516020615d3183398151915291633e7858789161250891879160040161564d565b60408051808303816000875af1158015612526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254a9190615127565b6040808901519051630d099f2f60e21b8152929450909250600080516020615d31833981519152916334267cbc9161258a91879190600090600401615668565b600060405180830381600087803b1580156125a457600080fd5b505af11580156125b8573d6000803e3d6000fd5b5050505060018a01546001600160a01b031682156126745760328b0154604051633f46232960e21b81526001600160a01b0390911690600080516020615d318339815191529063fd188ca49061261990849030906000908a9060040161568c565b6020604051808303816000875af1158015612638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265c9190615318565b93506126726001600160a01b03821683866141e0565b505b811561271c5760338b0154604051633f46232960e21b81526001600160a01b0390911690600080516020615d318339815191529063fd188ca4906126c39084903090600090899060040161568c565b6020604051808303816000875af11580156126e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127069190615318565b92506123416001600160a01b03821683856141e0565b50505061279e565b6040808501519051632142170760e11b8152600080516020615d11833981519152916342842e0e9161276b913091600080516020615d318339815191529190600401615103565b600060405180830381600087803b15801561278557600080fd5b505af1158015612799573d6000803e3d6000fd5b505050505b6040808501519051631143967160e11b8152600080516020615d31833981519152916322872ce2916127d9918591600090819060040161572b565b600060405180830381600087803b1580156127f357600080fd5b505af1158015612807573d6000803e3d6000fd5b505050506020840151600489018054600390612834908490630100000090046001600160801b0316615959565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555083602001516001600160801b03169450505050509250929050565b606061287d614863565b6128958161288e60208b018b615161565b8b8661423b565b61014081015160408083015160038c01549151635620c32d60e11b81526001600160a01b0391821660048201529116602482015273__$5ce7b97fe3b9dad27bffcf1c56869f0b10$__9063ac41865a90604401602060405180830381865af4158015612905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129299190615318565b61293391906150c2565b610120820152604080820151905163ecc8941960e01b8152600091829173__$461d2a13b6c4ece874725da1f5491a2777$__9163ecc89419916129799190600401615376565b602060405180830381865af4158015612996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ba91906151b6565b60208401516101208501516040516351265e8960e01b8152600481018f90526001600160a01b039092166024830152600283900b6044830152606482015290915073__$b1ba452cecccdd06eb05ace2d0a762c7e1$__906351265e8990608401606060405180830381865af4158015612a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5b919061538a565b8560e0018661010001826003811115612a7657612a76615979565b6003811115612a8757612a87615979565b90529115159091525091508115612b0d5773__$b1ba452cecccdd06eb05ace2d0a762c7e1$__634aa009158c8560e001518661010001516040518463ffffffff1660e01b8152600401612adc9392919061598f565b60006040518083038186803b158015612af457600080fd5b505af4158015612b08573d6000803e3d6000fd5b505050505b851580612b175750815b604051806040016040528060188152602001771054cb4e48139bc81c9958985b185b98d9481b995959195960421b81525090612b665760405162461bcd60e51b81526004016103ef9190614fa2565b508115612d405773__$461d2a13b6c4ece874725da1f5491a2777$__63e4ee4bf78b8d8b8d8c8960c00151886040518863ffffffff1660e01b8152600401612bb497969594939291906159f3565b60006040518083038186803b158015612bcc57600080fd5b505af4158015612be0573d6000803e3d6000fd5b50505050600073__$8f1afe7577f9ab973017c74eca19b86f3c$__63ac2a37d685602001518c876060015188608001518960c001516040518663ffffffff1660e01b8152600401612c35959493929190615a79565b600060405180830381865af4158015612c52573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c7a9190810190615aad565b955090508015612cfe576040516326eadaa360e01b8152600481018e90526001600160a01b03891660248201526044810182905273__$8f1afe7577f9ab973017c74eca19b86f3c$__906326eadaa39060640160006040518083038186803b158015612ce557600080fd5b505af4158015612cf9573d6000803e3d6000fd5b505050505b60408051828152602081018b905260008183015290517f83387a3342ff1ebc5e437dc9ae0f98274afda12a11cf547eebec05a3e0b8f8a79181900360600190a1505b50505098975050505050505050565b6002810154604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b419160048083019260009291908290030181865afa158015612d9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612dc39190810190615aea565b8260030160009054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015612e18573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e409190810190615aea565b604051602001612e51929190615b61565b6040516020818303038152906040529050919050565b612e746020820182615161565b6032830180546001600160a01b0319166001600160a01b0392909216919091179055612ea66040820160208301615161565b6033830180546001600160a01b0319166001600160a01b03929092169190911790556060810135603483015560800135603590910155565b6040805160c0810182526000918101829052606081018290526080810182905260a0810182905260028501546001600160a01b03908116825260038601548116602083015260018601546004870154911690630100000090046001600160801b0316156132c357603286015460338701546001600160a01b0391821691166000612f678961416a565b9050600080600080516020615d318339815191526001600160a01b031663de2356d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fdc919061518e565b6001600160a01b031663704972f4848d603101546040518363ffffffff1660e01b815260040161300d92919061564d565b6040805180830381865afa158015613029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304d9190615127565b6040516370a0823160e01b815291935091506001600160a01b038616906370a082319061307e908990600401615376565b602060405180830381865afa15801561309b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130bf9190615318565b6130c990836150af565b6040516370a0823160e01b81529092506001600160a01b038516906370a08231906130f8908990600401615376565b602060405180830381865afa158015613115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131399190615318565b61314390826150af565b90506000896001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a9919061518e565b905082156132285787516040516354ee8a6b60e11b81526001600160a01b0383169163a9dd14d6916131e1918a918890600401615103565b602060405180830381865afa1580156131fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132229190615318565b60408901525b6060880151156132a95787516040516354ee8a6b60e11b81526001600160a01b0383169163a9dd14d6916132629189918790600401615103565b602060405180830381865afa15801561327f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a39190615318565b60608901525b6132b28c61042b565b60a08a015260808901525050505050505b6003860154600160a81b900460ff16156132e95760a08201805160808401805190925290525b81516040516370a0823160e01b81526001600160a01b03909116906370a0823190613318908490600401615376565b602060405180830381865afa158015613335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133599190615318565b8260800181815161336a91906150af565b90525060208201516040516370a0823160e01b81526001600160a01b03909116906370a082319061339f908490600401615376565b602060405180830381865afa1580156133bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e09190615318565b8260a0018181516133f191906150af565b90525060006133ff86614432565b835160405163b3596f0760e01b81529192506000916001600160a01b0384169163b3596f07916134329190600401615376565b602060405180830381865afa15801561344f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134739190615318565b90506000826001600160a01b031663b3596f0786602001516040518263ffffffff1660e01b81526004016134a79190615376565b602060405180830381865afa1580156134c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e89190615318565b90506000670de0b6b3a764000083876080015161350591906150c2565b61350f91906150ef565b90506000670de0b6b3a7640000838860a0015161352c91906150c2565b61353691906150ef565b905060648211806135475750606481115b8061357457506064670de0b6b3a764000085896040015161356891906150c2565b61357291906150ef565b115b806135a157506064670de0b6b3a764000085896060015161359591906150c2565b61359f91906150ef565b115b9b9a5050505050505050505050565b6001810154603182015460408051600480825260a08201909252606093849384936001600160a01b0390921692909160208201608080368337505050600287015481519196506001600160a01b03169086906000906136115761361161514b565b6001600160a01b03928316602091820292909201015260038701548651911690869060019081106136445761364461514b565b6001600160a01b03928316602091820292909201015260328701548651911690869060029081106136775761367761514b565b6001600160a01b03928316602091820292909201015260338701548651911690869060039081106136aa576136aa61514b565b6001600160a01b039290921660209283029190910182015260408051600480825260a0820190925291820160808036833701905050925060005b85518110156137a2578581815181106136ff576136ff61514b565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016137329190615376565b602060405180830381865afa15801561374f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137739190615318565b8482815181106137855761378561514b565b60209081029190910101528061379a81615331565b9150506136e4565b5060408051600480825260a0820190925290602082016080803683370190505093506000811180156137e757506004860154630100000090046001600160801b031615155b15613ce657604080516080810182528281523060208201526001600160801b038183018190526060820152905163fc6f786560e01b8152600080516020615d318339815191529163fc6f78659161384191906004016156b5565b60408051808303816000875af115801561385f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138839190615127565b856000815181106138965761389661514b565b60200260200101866001815181106138b0576138b061514b565b60200260200101828152508281525050507f15097721483fb2e62f76b9953e3601b26e7cc79208a0191df6fa701c6148744d846000815181106138f5576138f561514b565b6020026020010151856001815181106139105761391061514b565b602002602001015160405161392f929190918252602082015260400190565b60405180910390a16003860154600160a81b900460ff16156139be578360018151811061395e5761395e61514b565b6020026020010151846000815181106139795761397961514b565b6020026020010151856000815181106139945761399461514b565b60200260200101866001815181106139ae576139ae61514b565b6020908102919091010191909152525b600080516020615d31833981519152633e7858786139db8861416a565b836040518363ffffffff1660e01b81526004016139f992919061564d565b60408051808303816000875af1158015613a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3b9190615127565b85600281518110613a4e57613a4e61514b565b6020026020010186600381518110613a6857613a6861514b565b6020026020010182815250828152505050600084600281518110613a8e57613a8e61514b565b60200260200101511115613b7457600080516020615d318339815191526001600160a01b031663fd188ca486600281518110613acc57613acc61514b565b602002602001015130600088600281518110613aea57613aea61514b565b60200260200101516040518563ffffffff1660e01b8152600401613b11949392919061568c565b6020604051808303816000875af1158015613b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b549190615318565b84600281518110613b6757613b6761514b565b6020026020010181815250505b600084600381518110613b8957613b8961514b565b60200260200101511115613c6f57600080516020615d318339815191526001600160a01b031663fd188ca486600381518110613bc757613bc761514b565b602002602001015130600088600381518110613be557613be561514b565b60200260200101516040518563ffffffff1660e01b8152600401613c0c949392919061568c565b6020604051808303816000875af1158015613c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4f9190615318565b84600381518110613c6257613c6261514b565b6020026020010181815250505b7f2f1396dffa36013d7e1df1ec39cb355b5ff604d56e817a88ed2a0d40995adcb884600281518110613ca357613ca361514b565b602002602001015185600381518110613cbe57613cbe61514b565b6020026020010151604051613cdd929190918252602082015260400190565b60405180910390a15b60005b8551811015613e4b576000868281518110613d0657613d0661514b565b60200260200101516001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401613d399190615376565b602060405180830381865afa158015613d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d7a9190615318565b90508015613e3a57868281518110613d9457613d9461514b565b60200260200101516001600160a01b03166323b872dd8530846040518463ffffffff1660e01b8152600401613dcb93929190615103565b6020604051808303816000875af1158015613dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e0e91906152fb565b5080868381518110613e2257613e2261514b565b60200260200101818151613e3691906150af565b9052505b50613e4481615331565b9050613ce9565b5050509193909250565b6000806000866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ebc919061518e565b604051635620c32d60e11b81526001600160a01b03808a1660048301528216602482015290915060009073__$5ce7b97fe3b9dad27bffcf1c56869f0b10$__9063ac41865a90604401602060405180830381865af4158015613f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f469190615318565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fac919061535b565b60ff169050816000613fbf83600a615c95565b60408051808201909152601081526f54532d3234207a65726f2076616c756560801b6020820152909150816140075760405162461bcd60e51b81526004016103ef9190614fa2565b506040516305f08b0f60e21b81526001600160a01b038c16600482015260028b810b60248301528a900b60448201526064810183905260848101829052600090819073__$5ce7b97fe3b9dad27bffcf1c56869f0b10$__906317c22c3c9060a401606060405180830381865af4158015614085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a99190615ca1565b5091509150896140f2576140c582670de0b6b3a76400006150c2565b83876140d984670de0b6b3a76400006150c2565b6140e391906150c2565b6140ed91906150ef565b61412c565b828661410683670de0b6b3a76400006150c2565b61411091906150c2565b61411a91906150ef565b61412c83670de0b6b3a76400006150c2565b985098505050505050505094509492505050565b600080600061414e876144fd565b905061415c8187878761456e565b925092505094509492505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506040805160a08101825260328301546001600160a01b0390811682526033840154811660208301528354169181019190915260348201546060820152603590910154608082015290565b6142368363a9059cbb60e01b84846040516024016141ff9291906152e2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614638565b505050565b81546001600160a01b0316604080860191909152805160608101909152600583018054829060ff16600381111561427457614274615979565b600381111561428557614285615979565b815260408051608081019182905260209092019190600184019060049082845b8154815260200190600101908083116142a557505050918352505060408051608081019182905260209092019190600584019060049082845b8154815260200190600101908083116142de575050509190925250505084526001600160a01b03838116602080870191909152600284015482166060870181905260038501549283166080880152600160a01b90920460ff16151560a0870152600091825282905260409020546143549061470a565b60c08501515260808401516001600160a01b03166000908152602082905260409020546143809061470a565b60c08501516001602002018181525050600084606001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156143d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143f8919061535b565b60ff1690506012811061440c576001614422565b6144178160126156f8565b61442290600a615c95565b6101409095019490945250505050565b6000816001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa158015614472573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614496919061518e565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144f7919061518e565b92915050565b6000816001600160a01b031663e76c01e46040518163ffffffff1660e01b815260040160e060405180830381865afa15801561453d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061456191906153e2565b5093979650505050505050565b6000808061457c8686615ccf565b905060008460020b8260020b1461459d576145986002836151d3565b6145a0565b60005b60405163cd8e20e760e01b815260028a810b600483015282810b602483015287900b604482015290915073__$b1ba452cecccdd06eb05ace2d0a762c7e1$__9063cd8e20e7906064016040805180830381865af4158015614605573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614629919061522d565b93509350505094509492505050565b600061468d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147229092919063ffffffff16565b80519091501561423657808060200190518101906146ab91906152fb565b6142365760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ef565b6000811561471857816144f7565b620186a092915050565b6060610d59848460008585600080866001600160a01b031685876040516147499190615cf4565b60006040518083038185875af1925050503d8060008114614786576040519150601f19603f3d011682016040523d82523d6000602084013e61478b565b606091505b509150915061479c878383876147a7565b979650505050505050565b6060831561481657825160000361480f576001600160a01b0385163b61480f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ef565b5081610d59565b610d59838381511561482b5781518083602001fd5b8060405162461bcd60e51b81526004016103ef9190614fa2565b60405180608001604052806004906020820280368337509192915050565b6040518061016001604052806148776148c9565b815260006020820181905260408201819052606082018190526080820181905260a082015260c0016148a76148f6565b8152600060208201819052604082018190526060820181905260809091015290565b604080516060810190915280600081526020016148e4614845565b81526020016148f1614845565b905290565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b038116811461492957600080fd5b50565b8060020b811461492957600080fd5b801515811461492957600080fd5b6000806000806080858703121561495f57600080fd5b843561496a81614914565b9350602085013561497a8161492c565b9250604085013561498a8161492c565b9150606085013561499a8161493b565b939692955090935050565b6000602082840312156149b757600080fd5b5035919050565b80604081018310156144f757600080fd5b80608081018310156144f757600080fd5b6000806000806000806000610160888a0312156149fc57600080fd5b87359650614a0d8960208a016149be565b95506060880135614a1d8161492c565b94506080880135614a2d8161492c565b935060a0880135614a3d81614914565b925060c0880135614a4d8161493b565b9150614a5c8960e08a016149cf565b905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614aa957614aa9614a6a565b604052919050565b600067ffffffffffffffff821115614acb57614acb614a6a565b5060051b60200190565b600082601f830112614ae657600080fd5b81356020614afb614af683614ab1565b614a80565b82815260059290921b84018101918181019086841115614b1a57600080fd5b8286015b84811015614b355780358352918301918301614b1e565b509695505050505050565b60008060008060808587031215614b5657600080fd5b8435614b6181614914565b9350602085810135614b7281614914565b9350604086013567ffffffffffffffff80821115614b8f57600080fd5b818801915088601f830112614ba357600080fd5b8135614bb1614af682614ab1565b81815260059190911b8301840190848101908b831115614bd057600080fd5b938501935b82851015614bf7578435614be881614914565b82529385019390850190614bd5565b965050506060880135925080831115614c0f57600080fd5b5050614c1d87828801614ad5565b91505092959194509250565b60008060408385031215614c3c57600080fd5b823591506020830135614c4e81614914565b809150509250929050565b600081518084526020808501945080840160005b83811015614c8957815187529582019590820190600101614c6d565b509495945050505050565b602081526000614ca76020830184614c59565b9392505050565b600067ffffffffffffffff821115614cc857614cc8614a6a565b50601f01601f191660200190565b600082601f830112614ce757600080fd5b8135614cf5614af682614cae565b818152846020838601011115614d0a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060006101c0888a031215614d4357600080fd5b8735965060c0880189811115614d5857600080fd5b602089019650614d688a826149cf565b95505061014088013567ffffffffffffffff80821115614d8757600080fd5b614d938b838c01614cd6565b95506101608a0135915080821115614daa57600080fd5b50614db78a828b01614cd6565b93505061018088013591506101a0880135905092959891949750929550565b8215158152604060208201526000610d596040830184614c59565b6001600160801b038116811461492957600080fd5b60008060408385031215614e1957600080fd5b823591506020830135614c4e81614df1565b600080600060608486031215614e4057600080fd5b833592506020840135614e5281614df1565b91506040840135614e628161493b565b809150509250925092565b60008060408385031215614e8057600080fd5b82359150602083013567ffffffffffffffff811115614e9e57600080fd5b614eaa85828601614ad5565b9150509250929050565b604081526000614ec76040830185614c59565b90508260208301529392505050565b600080600080600080600080610120898b031215614ef357600080fd5b8835975060208901359650614f0b8a60408b016149be565b95506080890135945060a0890135935060c0890135614f2981614914565b925060e0890135614f398161493b565b8092505061010089013590509295985092959890939650565b60005b83811015614f6d578181015183820152602001614f55565b50506000910152565b60008151808452614f8e816020860160208601614f52565b601f01601f19169290920160200192915050565b602081526000614ca76020830184614f76565b60008082840360c0811215614fc957600080fd5b8335925060a0601f1982011215614fdf57600080fd5b506020830190509250929050565b60008060006060848603121561500257600080fd5b83359250602084013561501481614914565b91506040840135614e6281614914565b606080825284519082018190526000906020906080840190828801845b828110156150665781516001600160a01b031684529284019290840190600101615041565b5050508381038285015261507a8187614c59565b915050828103604084015261508f8185614c59565b9695505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156144f7576144f7615099565b80820281158282048414176144f7576144f7615099565b634e487b7160e01b600052601260045260246000fd5b6000826150fe576150fe6150d9565b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000806040838503121561513a57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561517357600080fd5b8135614ca781614914565b805161518981614914565b919050565b6000602082840312156151a057600080fd5b8151614ca781614914565b80516151898161492c565b6000602082840312156151c857600080fd5b8151614ca78161492c565b60008160020b8360020b806151ea576151ea6150d9565b627fffff1982146000198214161561520457615204615099565b90059392505050565b60008260020b8260020b028060020b915080821461167f5761167f615099565b6000806040838503121561524057600080fd5b825161524b8161492c565b6020840151909250614c4e8161492c565b60808183375050565b8581526101c0810160208083018760005b600481101561529c5781516001600160a01b031683529183019190830190600101615276565b50505060a083018660005b60048110156152c757815160020b835291830191908301906001016152a7565b5050505083151561012083015261508f61014083018461525c565b6001600160a01b03929092168252602082015260400190565b60006020828403121561530d57600080fd5b8151614ca78161493b565b60006020828403121561532a57600080fd5b5051919050565b60006001820161534357615343615099565b5060010190565b805160ff8116811461518957600080fd5b60006020828403121561536d57600080fd5b614ca78261534a565b6001600160a01b0391909116815260200190565b60008060006060848603121561539f57600080fd5b83516153aa8161493b565b60208501519093506153bb8161493b565b604085015190925060048110614e6257600080fd5b805161ffff8116811461518957600080fd5b600080600080600080600060e0888a0312156153fd57600080fd5b875161540881614914565b60208901519097506154198161492c565b9550615427604089016153d0565b9450615435606089016153d0565b93506154436080890161534a565b925061545160a0890161534a565b915060c08801516154618161493b565b8091505092959891949750929550565b6001600160a01b03949094168452600292830b6020850152910b60408301526001600160801b0316606082015260800190565b60006101c08289835b60058110156154df5781356154c181614914565b6001600160a01b0316835260209283019291909101906001016154ad565b50505060808860a0850137806101208401526154fd81840188614f76565b90508281036101408401526155128187614f76565b91505061016082018460005b60028110156155465781516001600160a01b031683526020928301929091019060010161551e565b505050826101a0830152979650505050505050565b600082601f83011261556c57600080fd5b8151602061557c614af683614ab1565b82815260059290921b8401810191818101908684111561559b57600080fd5b8286015b84811015614b35578051835291830191830161559f565b6000806000606084860312156155cb57600080fd5b83516155d68161493b565b602085015190935067ffffffffffffffff8111156155f357600080fd5b6155ff8682870161555b565b925050604084015190509250925092565b80516001600160a01b0390811683526020808301518216908401526040808301519091169083015260608082015190830152608090810151910152565b60c0810161565b8285615610565b8260a08301529392505050565b60e081016156768286615610565b8360a083015282151560c0830152949350505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b818103818111156144f7576144f7615099565b6001600160801b0382811682821603908082111561167f5761167f615099565b610100810161573a8287615610565b8460a08301528360c083015282151560e083015295945050505050565b805161518981614df1565b60008060008060008060008060008060006101608c8e03121561578457600080fd5b8b516bffffffffffffffffffffffff811681146157a057600080fd5b60208d0151909b506157b181614914565b60408d0151909a506157c281614914565b98506157d060608d0161517e565b97506157de60808d016151ab565b96506157ec60a08d016151ab565b95506157fa60c08d01615757565b945060e08c015193506101008c015192506158186101208d01615757565b91506158276101408d01615757565b90509295989b509295989b9093969950565b81516001600160a01b031681526101408101602083015161586560208401826001600160a01b03169052565b50604083015161587a604084018260020b9052565b50606083015161588f606084018260020b9052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401516158d3828501826001600160a01b03169052565b505061012092830151919092015290565b600080600080608085870312156158fa57600080fd5b84519350602085015161590c81614df1565b6040860151606090960151949790965092505050565b60008060006060848603121561593757600080fd5b835161594281614df1565b602085015160409095015190969495509392505050565b6001600160801b0381811683821601908082111561167f5761167f615099565b634e487b7160e01b600052602160045260246000fd5b838152821515602082015260608101600483106159bc57634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b8060005b60028110156159ed5781518452602093840193909101906001016159ce565b50505050565b6101208101818960005b6002811015615a2f578135615a1181614914565b6001600160a01b0316835260209283019291909101906001016159fd565b5050506040820188905260608201879052608082018690526001600160a01b03851660a0830152615a6360c08301856159ca565b8260020b61010083015298975050505050505050565b6001600160a01b0386811682526020820186905284811660408301528316606082015260c0810161508f60808301846159ca565b60008060408385031215615ac057600080fd5b82519150602083015167ffffffffffffffff811115615ade57600080fd5b614eaa8582860161555b565b600060208284031215615afc57600080fd5b815167ffffffffffffffff811115615b1357600080fd5b8201601f81018413615b2457600080fd5b8051615b32614af682614cae565b818152856020838501011115615b4757600080fd5b615b58826020830160208601614f52565b95945050505050565b67020b633b2b13930960c51b815260008351615b84816008850160208801614f52565b602f60f81b6008918401918201528351615ba5816009840160208801614f52565b01600901949350505050565b600181815b80851115615bec578160001904821115615bd257615bd2615099565b80851615615bdf57918102915b93841c9390800290615bb6565b509250929050565b600082615c03575060016144f7565b81615c10575060006144f7565b8160018114615c265760028114615c3057615c4c565b60019150506144f7565b60ff841115615c4157615c41615099565b50506001821b6144f7565b5060208310610133831016604e8410600b8410161715615c6f575081810a6144f7565b615c798383615bb1565b8060001904821115615c8d57615c8d615099565b029392505050565b6000614ca78383615bf4565b600080600060608486031215615cb657600080fd5b83519250602084015191506040840151614e6281614df1565b600282810b9082900b03627fffff198112627fffff821317156144f7576144f7615099565b60008251615d06818460208701614f52565b919091019291505056fe0000000000000000000000008ef88e4c7cfbbac1c163f7eddd4b578792201de60000000000000000000000007f281a8cdf66ef5e9db8434ec6d97acc1bc01e7841532d3420496e636f727265637420726562616c616e63655469636b52616e6765a264697066735822122081ad29c2d1b23e254268c2db4657c737d0b9242ee549ccae05b9c56895520bdb64736f6c63430008110033",
  "libraries": {
    "AlgebraLib": "0x5649FE92EF79Ad84cE87905e10eBaabD5b1575C8",
    "AlgebraDebtLib": "0xAf7EA067dc73a59D909ebEb5Fc8fF58b7EfEE763",
    "ConverterStrategyBaseLib2": "0xd046d0428bDD6D5cCf67fE2cbC8d5039c24A8f6a",
    "PairBasedStrategyLogicLib": "0xF9a2e80F33DCd31D67afa675b6A31af09cd9430d",
    "PairBasedStrategyLib": "0xDAFAF8466Da28008b20C244f3242B0439922F018"
  },
  "devdoc": {
    "events": {
      "CoverLoss(uint256,uint256)": {
        "params": {
          "coveredByRewards": "Part of the loss covered by rewards",
          "loss": "Total amount of loss"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "exit(AlgebraConverterStrategyLogicLib.State storage,uint128,bool)": {
        "params": {
          "emergency": "Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)"
        }
      },
      "getEntryDataProportions(IAlgebraPool,int24,int24,bool)": {
        "params": {
          "depositorSwapTokens": "A boolean indicating if need to use token B instead of token A.",
          "lowerTick": "The lower tick of the pool's main range.",
          "pool": "Pool instance.",
          "upperTick": "The upper tick of the pool's main range."
        },
        "returns": {
          "_0": "prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only",
          "_1": "prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only"
        }
      },
      "initStrategyState(AlgebraConverterStrategyLogicLib.State storage,address[2],int24,int24,address,bool,uint256[4])": {
        "params": {
          "controllerPool": "[controller, pool]",
          "fuseThresholds": "Fuse thresholds for tokens (stable pool only)"
        }
      },
      "needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage,ITetuConverter)": {
        "returns": {
          "needRebalance": "A boolean indicating if {rebalanceNoSwaps} should be called"
        }
      },
      "rebalanceNoSwaps(IConverterStrategyBase.ConverterStrategyBaseState storage,PairBasedStrategyLogicLib.PairState storage,address[2],uint256,uint256,address,bool,mapping(address => uint256) storage)": {
        "params": {
          "checkNeedRebalance_": "True if the function should ensure that the rebalance is required",
          "converterLiquidator": "[TetuConverter, TetuLiquidator]",
          "totalAssets_": "Current value of totalAssets()"
        },
        "returns": {
          "tokenAmounts": "Token amounts for deposit. If length == 0 - rebalance wasn't made and no deposit is required."
        }
      },
      "withdrawByAggStep(IConverterStrategyBase.ConverterStrategyBaseState storage,address[5],uint256[4],bytes,bytes,PairBasedStrategyLogicLib.PairState storage,mapping(address => uint256) storage)": {
        "params": {
          "addr_": "[tokenToSwap, aggregator, controller, converter, splitter]",
          "values_": "[amountToSwap_, profitToCover, oldTotalAssets, entryToPool]"
        },
        "returns": {
          "completed": "All debts were closed, leftovers were swapped to proper proportions",
          "tokenAmountsOut": "Amounts to be deposited to pool. This array is empty if no deposit allowed/required."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getEntryDataProportions(IAlgebraPool,int24,int24,bool)": {
        "notice": "Calculate proportions of the tokens for entry kind 1"
      },
      "getPropNotUnderlying18(PairBasedStrategyLogicLib.PairState storage)": {
        "notice": "Get proportion of not-underlying in the pool, [0...1e18]         prop.underlying : prop.not.underlying = 1e18 - PropNotUnderlying18 : propNotUnderlying18"
      },
      "needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage,ITetuConverter)": {
        "notice": "Determine if the strategy needs to be rebalanced."
      },
      "rebalanceNoSwaps(IConverterStrategyBase.ConverterStrategyBaseState storage,PairBasedStrategyLogicLib.PairState storage,address[2],uint256,uint256,address,bool,mapping(address => uint256) storage)": {
        "notice": "Make rebalance without swaps (using borrowing only)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}