{
  "address": "0x609865Ff47DAFC5345fb6Dd3fBa973a3FD8f716D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "createSpecificName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBVault",
          "name": "vault_",
          "type": "IBVault"
        },
        {
          "internalType": "bytes32",
          "name": "poolId_",
          "type": "bytes32"
        }
      ],
      "name": "depositorPoolAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "poolAssets",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBVault",
          "name": "vault_",
          "type": "IBVault"
        },
        {
          "internalType": "bytes32",
          "name": "poolId_",
          "type": "bytes32"
        }
      ],
      "name": "depositorPoolReserves",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "reservesOut",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBVault",
          "name": "vault_",
          "type": "IBVault"
        },
        {
          "internalType": "bytes32",
          "name": "poolId_",
          "type": "bytes32"
        }
      ],
      "name": "depositorPoolWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc430ce7cc40d97b71f533f0fe8d6bd03c2ac999bdd91c718c3b509fb562982d",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0x609865Ff47DAFC5345fb6Dd3fBa973a3FD8f716D",
    "transactionIndex": 36,
    "gasUsed": "4103698",
    "logsBloom": "0x
    "blockHash": "0x7dc4bd060addd40e4da292f7b22343aa9106c95918a9e12b5fa67077f58ff46e",
    "transactionHash": "0xfc430ce7cc40d97b71f533f0fe8d6bd03c2ac999bdd91c718c3b509fb562982d",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 44009417,
        "transactionHash": "0xfc430ce7cc40d97b71f533f0fe8d6bd03c2ac999bdd91c718c3b509fb562982d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bbbbb8c4364ec2ce52c59d2ed3e56f307e529a94",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001c3f50a0c384c000000000000000000000000000000000000000000000000024f7b4515462f806e0000000000000000000000000000000000000000000002222e04fdc7fb841f790000000000000000000000000000000000000000000000024db7500b39f7346e0000000000000000000000000000000000000000000002222fc8f2d207bc6b79",
        "logIndex": 133,
        "blockHash": "0x7dc4bd060addd40e4da292f7b22343aa9106c95918a9e12b5fa67077f58ff46e"
      }
    ],
    "blockNumber": 44009417,
    "cumulativeGasUsed": "9731995",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "da7663c7a5124ff56d6132b7a2200099",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"createSpecificName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"vault_\",\"type\":\"IBVault\"},{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"}],\"name\":\"depositorPoolAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAssets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"vault_\",\"type\":\"IBVault\"},{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"}],\"name\":\"depositorPoolReserves\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"reservesOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBVault\",\"name\":\"vault_\",\"type\":\"IBVault\"},{\"internalType\":\"bytes32\",\"name\":\"poolId_\",\"type\":\"bytes32\"}],\"name\":\"depositorPoolWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Many of functions are declared as external to reduce contract size\",\"kind\":\"dev\",\"methods\":{\"depositorEnter(IBVault,bytes32,uint256[])\":{\"params\":{\"amountsDesired_\":\"Amounts of assets on the balance of the depositor         The order of assets is the same as in getPoolTokens, but there is no pool-bpt         i.e. for \\\"Balancer Boosted Aave USD\\\" we have DAI, USDC, USDT\"},\"returns\":{\"amountsConsumedOut\":\"Amounts of assets deposited to balanceR pool         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\",\"liquidityOut\":\"Total amount of liquidity added to balanceR pool in terms of pool-bpt tokens\"}},\"depositorExit(IBVault,bytes32,uint256)\":{\"params\":{\"liquidityAmount_\":\"Amount to withdraw in bpt\"},\"returns\":{\"amountsOut\":\"Result amounts of underlying (DAI, USDC..) that will be received from BalanceR         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\"}},\"depositorExitFull(IBVault,bytes32)\":{\"details\":\"We make at most N attempts to withdraw (not more, each attempt takes a lot of gas).      Each attempt reduces available balance at ~1e4 times.\",\"returns\":{\"amountsOut\":\"Result amounts of underlying (DAI, USDC..) that will be received from BalanceR                    The order of assets is the same as in getPoolTokens, but there is no pool-bpt\"}},\"depositorPoolReserves(IBVault,bytes32)\":{\"returns\":{\"reservesOut\":\"Total amounts of embedded assets, i.e. for \\\"Balancer Boosted Tetu USD\\\" we return:                     0: balance USDT + (tUSDT recalculated to USDT)                     1: balance USDC + (tUSDC recalculated to USDC)                     2: balance DAI + (balance tDAI recalculated to DAI)\"}},\"depositorPoolWeights(IBVault,bytes32)\":{\"returns\":{\"totalWeight\":\"Total sum of all items of {weights}\",\"weights\":\"Array with weights, length = getPoolTokens.tokens - 1 (all assets except BPT)\"}},\"depositorQuoteExit(IBVault,IBalancerHelper,bytes32,uint256)\":{\"returns\":{\"amountsOut\":\"Result amounts of underlying (DAI, USDC..) that will be received from BalanceR         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createSpecificName(address)\":{\"notice\":\"Utils\"},\"depositorClaimRewards(IBalancerGauge,address[],address[])\":{\"notice\":\"Rewards\"},\"depositorEnter(IBVault,bytes32,uint256[])\":{\"notice\":\"Deposit given amount to the pool.\"},\"depositorExit(IBVault,bytes32,uint256)\":{\"notice\":\"Withdraw given amount of LP-tokens from the pool.\"},\"depositorExitFull(IBVault,bytes32)\":{\"notice\":\"Withdraw all available amount of LP-tokens from the pool         BalanceR doesn't allow to withdraw exact amount, so it's allowed to leave dust amount on the balance\"},\"depositorPoolAssets(IBVault,bytes32)\":{\"notice\":\"Returns pool assets, same as getPoolTokens but without pool-bpt\"},\"depositorPoolReserves(IBVault,bytes32)\":{\"notice\":\"Total amounts of the main assets under control of the pool, i.e amounts of USDT, USDC, DAI\"},\"depositorPoolWeights(IBVault,bytes32)\":{\"notice\":\"Returns pool weights\"},\"depositorQuoteExit(IBVault,IBalancerHelper,bytes32,uint256)\":{\"notice\":\"Quotes output for given amount of LP-tokens from the pool.\"}},\"notice\":\"Functions of BalancerBoostedDepositor\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/balancer/BalancerLogicLib.sol\":\"BalancerLogicLib\"},\"evmVersion\":\"london\",\"libraries\":{\"contracts/strategies/algebra/AlgebraDebtLib.sol:AlgebraDebtLib\":\"0x40817a86549a2d5893d9c0f5e9fef55e08ebc4fd\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"contracts/integrations/balancer/IBVault.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IAsset {\\n}\\n\\ninterface IBVault {\\n  // Internal Balance\\n  //\\n  // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n  // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n  // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n  // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n  //\\n  // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n  // operations of different kinds, with different senders and recipients, at once.\\n\\n  /**\\n   * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n  function getInternalBalance(address user, IERC20[] calldata tokens) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n  function manageUserBalance(UserBalanceOp[] calldata ops) external payable;\\n\\n  /**\\n   * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n  struct UserBalanceOp {\\n    UserBalanceOpKind kind;\\n    IAsset asset;\\n    uint256 amount;\\n    address sender;\\n    address payable recipient;\\n  }\\n\\n  // There are four possible operations in `manageUserBalance`:\\n  //\\n  // - DEPOSIT_INTERNAL\\n  // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n  // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n  //\\n  // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n  // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n  // relevant for relayers).\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - WITHDRAW_INTERNAL\\n  // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n  //\\n  // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n  // it to the recipient as ETH.\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - TRANSFER_INTERNAL\\n  // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n  //\\n  // Reverts if the ETH sentinel value is passed.\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - TRANSFER_EXTERNAL\\n  // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n  // relayers, as it lets them reuse a user's Vault allowance.\\n  //\\n  // Reverts if the ETH sentinel value is passed.\\n  //\\n  // Emits an `ExternalBalanceTransfer` event.\\n\\n  enum UserBalanceOpKind {DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL}\\n\\n  /**\\n   * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n  event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n  /**\\n   * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n  event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n  // Pools\\n  //\\n  // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n  // functionality:\\n  //\\n  //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n  // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n  // which increase with the number of registered tokens.\\n  //\\n  //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n  // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n  // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n  // independent of the number of registered tokens.\\n  //\\n  //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n  // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n  enum PoolSpecialization {GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN}\\n\\n  /**\\n   * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n  function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n  /**\\n   * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n  event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n  /**\\n   * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n  function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n  /**\\n   * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n  function registerTokens(\\n    bytes32 poolId,\\n    IERC20[] calldata tokens,\\n    address[] calldata assetManagers\\n  ) external;\\n\\n  /**\\n   * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n  event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n  /**\\n   * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n  function deregisterTokens(bytes32 poolId, IERC20[] calldata tokens) external;\\n\\n  /**\\n   * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n  event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n  /**\\n   * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n  function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n  external\\n  view\\n  returns (\\n    uint256 cash,\\n    uint256 managed,\\n    uint256 lastChangeBlock,\\n    address assetManager\\n  );\\n\\n  /**\\n   * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n  function getPoolTokens(bytes32 poolId)\\n  external\\n  view\\n  returns (\\n    IERC20[] memory tokens,\\n    uint256[] memory balances,\\n    uint256 lastChangeBlock\\n  );\\n\\n  /**\\n   * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     *\\n     * See https://dev.balancer.fi/resources/joins-and-exits/pool-joins\\n     */\\n  function joinPool(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    JoinPoolRequest calldata request\\n  ) external payable;\\n\\n  enum JoinKind {INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT}\\n\\n  /// @notice WeightedPool ExitKinds\\n  enum ExitKind {EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT}\\n  /// @notice Composable Stable V2 ExitKinds\\n  enum ExitKindComposableStable {EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT, EXACT_BPT_IN_FOR_ALL_TOKENS_OUT}\\n\\n\\n  struct JoinPoolRequest {\\n    IAsset[] assets;\\n    uint256[] maxAmountsIn;\\n    bytes userData;\\n    bool fromInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n  function exitPool(\\n    bytes32 poolId,\\n    address sender,\\n    address payable recipient,\\n    ExitPoolRequest calldata request\\n  ) external;\\n\\n  struct ExitPoolRequest {\\n    IAsset[] assets;\\n    uint256[] minAmountsOut;\\n    bytes userData;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n  event PoolBalanceChanged(\\n    bytes32 indexed poolId,\\n    address indexed liquidityProvider,\\n    IERC20[] tokens,\\n    int256[] deltas,\\n    uint256[] protocolFeeAmounts\\n  );\\n\\n  enum PoolBalanceChangeKind {JOIN, EXIT}\\n\\n  // Swaps\\n  //\\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n  //\\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n  // individual swaps.\\n  //\\n  // There are two swap kinds:\\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n  //\\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n  // the final intended token.\\n  //\\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n  // much less gas than they would otherwise.\\n  //\\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n  // updating the Pool's internal accounting).\\n  //\\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\\n  //\\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n  //\\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n  //\\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n  enum SwapKind {GIVEN_IN, GIVEN_OUT}\\n\\n  /**\\n   * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n  function swap(\\n    SingleSwap calldata singleSwap,\\n    FundManagement calldata funds,\\n    uint256 limit,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n  struct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    IAsset assetIn;\\n    IAsset assetOut;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n  function batchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] calldata swaps,\\n    IAsset[] calldata assets,\\n    FundManagement calldata funds,\\n    int256[] calldata limits,\\n    uint256 deadline\\n  ) external payable returns (int256[] memory);\\n\\n  /**\\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n  event Swap(\\n    bytes32 indexed poolId,\\n    IERC20 indexed tokenIn,\\n    IERC20 indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  /**\\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n  function queryBatchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] calldata swaps,\\n    IAsset[] calldata assets,\\n    FundManagement calldata funds\\n  ) external returns (int256[] memory assetDeltas);\\n\\n  // BasePool.sol\\n\\n  /**\\n* @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n  function queryExit(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    uint256[] memory balances,\\n    uint256 lastChangeBlock,\\n    uint256 protocolSwapFeePercentage,\\n    bytes memory userData\\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n\\n\\n}\\n\",\"keccak256\":\"0x2b2e887f0da61add43d50ec2fec09e2c4efa10f2c0bf230e4918b82a61a4b8a0\",\"license\":\"ISC\"},\"contracts/integrations/balancer/IBalancerGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice gauge-v2, see 0xc9b36096f5201ea332Db35d6D195774ea0D5988f\\n/// @dev see 20230316-child-chain-gauge-factory-v2 in balancer-deployments repository\\ninterface IBalancerGauge {\\n  event Approval(\\n    address indexed _owner,\\n    address indexed _spender,\\n    uint256 _value\\n  );\\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n  event Deposit(address indexed _user, uint256 _value);\\n  event Withdraw(address indexed _user, uint256 _value);\\n  event UpdateLiquidityLimit(\\n    address indexed _user,\\n    uint256 _original_balance,\\n    uint256 _original_supply,\\n    uint256 _working_balance,\\n    uint256 _working_supply\\n  );\\n\\n  function deposit(uint256 _value) external;\\n\\n  function deposit(uint256 _value, address _user) external;\\n\\n  function withdraw(uint256 _value) external;\\n\\n  function withdraw(uint256 _value, address _user) external;\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) external returns (bool);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool);\\n\\n  function permit(\\n    address _owner,\\n    address _spender,\\n    uint256 _value,\\n    uint256 _deadline,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external returns (bool);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool);\\n\\n  function increaseAllowance(address _spender, uint256 _added_value)\\n  external\\n  returns (bool);\\n\\n  function decreaseAllowance(address _spender, uint256 _subtracted_value)\\n  external\\n  returns (bool);\\n\\n  function user_checkpoint(address addr) external returns (bool);\\n\\n  function claimable_tokens(address addr) external returns (uint256);\\n\\n  function claimed_reward(address _addr, address _token)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function claimable_reward(address _user, address _reward_token)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function set_rewards_receiver(address _receiver) external;\\n\\n  function claim_rewards() external;\\n\\n  function claim_rewards(address _addr) external;\\n\\n  function claim_rewards(address _addr, address _receiver) external;\\n\\n  function claim_rewards(\\n    address _addr,\\n    address _receiver,\\n    uint256[] memory _reward_indexes\\n  ) external;\\n\\n  function add_reward(address _reward_token, address _distributor) external;\\n\\n  function set_reward_distributor(address _reward_token, address _distributor)\\n  external;\\n\\n  function deposit_reward_token(address _reward_token, uint256 _amount)\\n  external;\\n\\n  function killGauge() external;\\n\\n  function unkillGauge() external;\\n\\n  function decimals() external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function integrate_checkpoint() external view returns (uint256);\\n\\n  function bal_token() external view returns (address);\\n\\n  function bal_pseudo_minter() external view returns (address);\\n\\n  function voting_escrow_delegation_proxy() external view returns (address);\\n\\n  function authorizer_adaptor() external view returns (address);\\n\\n  function initialize(address _lp_token, string memory _version) external;\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function nonces(address arg0) external view returns (uint256);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function balanceOf(address arg0) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function lp_token() external view returns (address);\\n\\n  function version() external view returns (string memory);\\n\\n  function factory() external view returns (address);\\n\\n  function working_balances(address arg0) external view returns (uint256);\\n\\n  function working_supply() external view returns (uint256);\\n\\n  function period() external view returns (uint256);\\n\\n  function period_timestamp(uint256 arg0) external view returns (uint256);\\n\\n  function integrate_checkpoint_of(address arg0)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function integrate_fraction(address arg0) external view returns (uint256);\\n\\n  function integrate_inv_supply(uint256 arg0) external view returns (uint256);\\n\\n  function integrate_inv_supply_of(address arg0)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function reward_count() external view returns (uint256);\\n\\n  function reward_tokens(uint256 arg0) external view returns (address);\\n\\n  function reward_data(address arg0) external view returns (S_0 memory);\\n\\n  function rewards_receiver(address arg0) external view returns (address);\\n\\n  function reward_integral_for(address arg0, address arg1)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function is_killed() external view returns (bool);\\n\\n  function inflation_rate(uint256 arg0) external view returns (uint256);\\n}\\n\\n  struct S_0 {\\n    address distributor;\\n    uint256 period_finish;\\n    uint256 rate;\\n    uint256 last_update;\\n    uint256 integral;\\n  }\\n\",\"keccak256\":\"0xed9a9e050627145dbd6095b6aa68fea2fc6b540e44dcf15e472ac43fdf673e46\",\"license\":\"MIT\"},\"contracts/integrations/balancer/IBalancerHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IBVault.sol\\\";\\n\\ninterface IBalancerHelper {\\n  function queryExit(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    IBVault.ExitPoolRequest memory request\\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n\\n  function queryJoin(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    IBVault.JoinPoolRequest memory request\\n  ) external returns (uint256 bptOut, uint256[] memory amountsIn);\\n\\n  function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x96bc57bb3b52f36aebaf700f2a5fa44bcc3222b70c2d19c59213dd3bd96b9b3e\",\"license\":\"MIT\"},\"contracts/integrations/balancer/IBalancerMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBalancerMinter {\\n  event Minted(address indexed recipient, address gauge, uint256 minted);\\n  event MinterApprovalSet(\\n    address indexed user,\\n    address indexed minter,\\n    bool approval\\n  );\\n\\n  function allowed_to_mint_for(address minter, address user)\\n  external\\n  view\\n  returns (bool);\\n\\n  function getBalancerToken() external view returns (address);\\n\\n  function getBalancerTokenAdmin() external view returns (address);\\n\\n  function getDomainSeparator() external view returns (bytes32);\\n\\n  function getGaugeController() external view returns (address);\\n\\n  function getMinterApproval(address minter, address user)\\n  external\\n  view\\n  returns (bool);\\n\\n  function getNextNonce(address user) external view returns (uint256);\\n\\n  function mint(address gauge) external returns (uint256);\\n\\n  function mintFor(address gauge, address user) external returns (uint256);\\n\\n  function mintMany(address[] memory gauges) external returns (uint256);\\n\\n  function mintManyFor(address[] memory gauges, address user)\\n  external\\n  returns (uint256);\\n\\n  function mint_for(address gauge, address user) external;\\n\\n  function mint_many(address[8] memory gauges) external;\\n\\n  function minted(address user, address gauge)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function setMinterApproval(address minter, bool approval) external;\\n\\n  function setMinterApprovalWithSignature(\\n    address minter,\\n    bool approval,\\n    address user,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function toggle_approve_mint(address minter) external;\\n}\\n\",\"keccak256\":\"0xa940d697a95472dfd55c9aace9d2d76bdacf6a3036bc0ab883ee14ed1b398083\",\"license\":\"MIT\"},\"contracts/integrations/balancer/IComposableStablePool.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity 0.8.17;\\n\\ninterface IComposableStablePool {\\n  function balanceOf(address account) external view returns (uint256);\\n  function getActualSupply() external view returns (uint256);\\n  function getPoolId() external view returns (bytes32);\\n  function getBptIndex() external view returns (uint256);\\n  function updateTokenRateCache(address token) external;\\n}\",\"keccak256\":\"0xfdbd081e55daeb69baa5889d77a842f44ea8502537aea0a73befabf386a33e97\",\"license\":\"ISC\"},\"contracts/integrations/balancer/ILinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity 0.8.17;\\n\\ninterface ILinearPool {\\n  function getPoolId() external view returns (bytes32);\\n\\n  function getMainIndex() external view returns (uint);\\n\\n  function getMainToken() external view returns (address);\\n\\n  function getWrappedIndex() external view returns (uint);\\n\\n  function getWrappedToken() external view returns (address);\\n\\n  function getWrappedTokenRate() external view returns (uint);\\n\\n  function getRate() external view returns (uint);\\n\\n  function getBptIndex() external pure returns (uint);\\n\\n  function getVirtualSupply() external view returns (uint);\\n\\n  function getSwapFeePercentage() external view returns (uint);\\n\\n  function getTargets() external view returns (uint lowerTarget, uint upperTarget);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function getScalingFactors() external view returns (uint[] memory);\\n}\",\"keccak256\":\"0x4561203c56e362b2dd3618624bb2a49193379cc465460eabc0dfdd9bb363b2da\",\"license\":\"ISC\"},\"contracts/libs/AppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice List of all errors generated by the application\\n///         Each error should have unique code TS-XXX and descriptive comment\\nlibrary AppErrors {\\n  /// @notice Provided address should be not zero\\n  string public constant ZERO_ADDRESS = \\\"TS-1 zero address\\\";\\n\\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\\n  string public constant UNISWAP_PAIR_NOT_FOUND = \\\"TS-2 pair not found\\\";\\n\\n  /// @notice Lengths not matched\\n  string public constant WRONG_LENGTHS = \\\"TS-4 wrong lengths\\\";\\n\\n  /// @notice Unexpected zero balance\\n  string public constant ZERO_BALANCE = \\\"TS-5 zero balance\\\";\\n\\n  string public constant ITEM_NOT_FOUND = \\\"TS-6 not found\\\";\\n\\n  string public constant NOT_ENOUGH_BALANCE = \\\"TS-7 not enough balance\\\";\\n\\n  /// @notice Price oracle returns zero price\\n  string public constant ZERO_PRICE = \\\"TS-8 zero price\\\";\\n\\n  string public constant WRONG_VALUE = \\\"TS-9 wrong value\\\";\\n\\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\\n  string public constant ZERO_AMOUNT_BORROWED = \\\"TS-10 zero borrowed amount\\\";\\n\\n  string public constant WITHDRAW_TOO_MUCH = \\\"TS-11 try to withdraw too much\\\";\\n\\n  string public constant UNKNOWN_ENTRY_KIND = \\\"TS-12 unknown entry kind\\\";\\n\\n  string public constant ONLY_TETU_CONVERTER = \\\"TS-13 only TetuConverter\\\";\\n\\n  string public constant WRONG_ASSET = \\\"TS-14 wrong asset\\\";\\n\\n  string public constant NO_LIQUIDATION_ROUTE = \\\"TS-15 No liquidation route\\\";\\n\\n  string public constant PRICE_IMPACT = \\\"TS-16 price impact\\\";\\n\\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\\n  string public constant REPAY_MAKES_SWAP = \\\"TS-17 can not convert back\\\";\\n\\n  string public constant NO_INVESTMENTS = \\\"TS-18 no investments\\\";\\n\\n  string public constant INCORRECT_LENGTHS = \\\"TS-19 lengths\\\";\\n\\n  /// @notice We expect increasing of the balance, but it was decreased\\n  string public constant BALANCE_DECREASE = \\\"TS-20 balance decrease\\\";\\n\\n  /// @notice Prices changed and invested assets amount was increased on S, value of S is too high\\n  string public constant EARNED_AMOUNT_TOO_HIGH = \\\"TS-21 earned too high\\\";\\n\\n  string public constant GOVERNANCE_ONLY = \\\"TS-22 governance only\\\";\\n}\\n\",\"keccak256\":\"0xc723cb16fc5a3e054ebd5f1597da4b092efec3041a87a6d3a816246721437042\",\"license\":\"MIT\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\n/// @notice Common internal utils\\nlibrary AppLib {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Unchecked increment for for-cycles\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n    unchecked {\\n      return i + 1;\\n    }\\n  }\\n\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\n  /// @dev Should NOT be used for third-party pools\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\n      IERC20(token).safeApprove(spender, 0);\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\n      IERC20(token).safeApprove(spender, 2 ** 255);\\n    }\\n  }\\n\\n  function balance(address token) internal view returns (uint) {\\n    return IERC20(token).balanceOf(address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xfab865a9b68066722b1ffea0123683a3a0515bc4cfa03c067c93d191a625e63d\",\"license\":\"MIT\"},\"contracts/libs/TokenAmountsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./AppErrors.sol\\\";\\n\\n/// @title Library for clearing / joining token addresses & amounts arrays\\n/// @author bogdoslav\\nlibrary TokenAmountsLib {\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string internal constant TOKEN_AMOUNTS_LIB_VERSION = \\\"1.0.1\\\";\\n\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n    unchecked {\\n      return i + 1;\\n    }\\n  }\\n\\n  function filterZeroAmounts(\\n    address[] memory tokens,\\n    uint[] memory amounts\\n  ) internal pure returns (\\n    address[] memory t,\\n    uint[] memory a\\n  ) {\\n    require(tokens.length == amounts.length, AppErrors.INCORRECT_LENGTHS);\\n    uint len2 = 0;\\n    uint len = tokens.length;\\n    for (uint i = 0; i < len; i++) {\\n      if (amounts[i] != 0) len2++;\\n    }\\n\\n    t = new address[](len2);\\n    a = new uint[](len2);\\n\\n    uint j = 0;\\n    for (uint i = 0; i < len; i++) {\\n      uint amount = amounts[i];\\n      if (amount != 0) {\\n        t[j] = tokens[i];\\n        a[j] = amount;\\n        j++;\\n      }\\n    }\\n  }\\n\\n  /// @notice unites three arrays to single array without duplicates, amounts are sum, zero amounts are allowed\\n  function combineArrays(\\n    address[] memory tokens0,\\n    uint[] memory amounts0,\\n    address[] memory tokens1,\\n    uint[] memory amounts1,\\n    address[] memory tokens2,\\n    uint[] memory amounts2\\n  ) internal pure returns (\\n    address[] memory allTokens,\\n    uint[] memory allAmounts\\n  ) {\\n    uint[] memory lens = new uint[](3);\\n    lens[0] = tokens0.length;\\n    lens[1] = tokens1.length;\\n    lens[2] = tokens2.length;\\n\\n    require(\\n      lens[0] == amounts0.length && lens[1] == amounts1.length && lens[2] == amounts2.length,\\n      AppErrors.INCORRECT_LENGTHS\\n    );\\n\\n    uint maxLength = lens[0] + lens[1] + lens[2];\\n    address[] memory tokensOut = new address[](maxLength);\\n    uint[] memory amountsOut = new uint[](maxLength);\\n    uint unitedLength;\\n\\n    for (uint step; step < 3; ++step) {\\n      uint[] memory amounts = step == 0\\n        ? amounts0\\n        : (step == 1\\n          ? amounts1\\n          : amounts2);\\n      address[] memory tokens = step == 0\\n        ? tokens0\\n        : (step == 1\\n          ? tokens1\\n          : tokens2);\\n      for (uint i1 = 0; i1 < lens[step]; i1++) {\\n        uint amount1 = amounts[i1];\\n        address token1 = tokens[i1];\\n        bool united = false;\\n\\n        for (uint i = 0; i < unitedLength; i++) {\\n          if (token1 == tokensOut[i]) {\\n            amountsOut[i] += amount1;\\n            united = true;\\n            break;\\n          }\\n        }\\n\\n        if (!united) {\\n          tokensOut[unitedLength] = token1;\\n          amountsOut[unitedLength] = amount1;\\n          unitedLength++;\\n        }\\n      }\\n    }\\n\\n    // copy united tokens to result array\\n    allTokens = new address[](unitedLength);\\n    allAmounts = new uint[](unitedLength);\\n    for (uint i; i < unitedLength; i++) {\\n      allTokens[i] = tokensOut[i];\\n      allAmounts[i] = amountsOut[i];\\n    }\\n\\n  }\\n}\\n\",\"keccak256\":\"0x6be459b8106584d7f9d3ad9f7a9fe6afa86bc41c5915c2d708715dba75c6174a\",\"license\":\"MIT\"},\"contracts/strategies/balancer/BalancerLogicLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../../libs/AppErrors.sol\\\";\\nimport \\\"../../libs/AppLib.sol\\\";\\nimport \\\"../../libs/TokenAmountsLib.sol\\\";\\nimport \\\"../../integrations/balancer/IComposableStablePool.sol\\\";\\nimport \\\"../../integrations/balancer/ILinearPool.sol\\\";\\nimport \\\"../../integrations/balancer/IBVault.sol\\\";\\nimport \\\"../../integrations/balancer/IBalancerHelper.sol\\\";\\nimport \\\"../../integrations/balancer/IBalancerGauge.sol\\\";\\nimport \\\"../../integrations/balancer/IBalancerMinter.sol\\\";\\n\\n/// @notice Functions of BalancerBoostedDepositor\\n/// @dev Many of functions are declared as external to reduce contract size\\nlibrary BalancerLogicLib {\\n  using SafeERC20 for IERC20;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Types\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @dev local vars in getAmountsToDeposit to avoid stack too deep\\n  struct LocalGetAmountsToDeposit {\\n    /// @notice Decimals of {tokens_}, 0 for BPT\\n    uint[] decimals;\\n    /// @notice Length of {tokens_} array\\n    uint len;\\n    /// @notice amountBPT / underlyingAmount, decimals 18, 0 for BPT\\n    uint[] rates;\\n  }\\n\\n  /// @notice Local variables required inside _depositorEnter/Exit/QuoteExit, avoid stack too deep\\n  struct DepositorLocal {\\n    uint bptIndex;\\n    uint len;\\n    IERC20[] tokens;\\n    uint[] balances;\\n  }\\n\\n  /// @notice Used in linear pool quote swap math logic\\n  struct LinearPoolParams {\\n    uint fee;\\n    uint lowerTarget;\\n    uint upperTarget;\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Asset related utils\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Calculate amounts of {tokens} to be deposited to POOL_ID in proportions according to the {balances}\\n  /// @param amountsDesired_ Desired amounts of tokens. The order of the tokens is exactly the same as in {tokens}.\\n  ///                        But the array has length 3, not 4, because there is no amount for bb-am-USD here.\\n  /// @param tokens_ All bb-am-* tokens (including bb-am-USD) received through getPoolTokens\\n  ///                           The order of the tokens is exactly the same as in getPoolTokens-results\\n  /// @param balances_ Balances of bb-am-* pools in terms of bb-am-USD tokens (received through getPoolTokens)\\n  ///                           The order of the tokens is exactly the same as in {tokens}\\n  /// @param totalUnderlying_ Total amounts of underlying assets (DAI, USDC, etc) in embedded linear pools.\\n  ///                         The array should have same order of tokens as {tokens_}, value for BPT token is not used\\n  /// @param indexBpt_ Index of BPT token inside {balances_}, {tokens_} and {totalUnderlying_} arrays\\n  /// @return amountsOut Desired amounts in proper proportions for depositing.\\n  ///         The order of the tokens is exactly the same as in results of getPoolTokens, 0 for BPT\\n  ///         i.e. DAI, BB-AM-USD, USDC, USDT\\n  function getAmountsToDeposit(\\n    uint[] memory amountsDesired_,\\n    IERC20[] memory tokens_,\\n    uint[] memory balances_,\\n    uint[] memory totalUnderlying_,\\n    uint indexBpt_\\n  ) internal view returns (\\n    uint[] memory amountsOut\\n  ) {\\n    LocalGetAmountsToDeposit memory p;\\n    // check not zero balances, cache index of bbAmUSD, save 10**decimals to array\\n    p.len = tokens_.length;\\n    require(p.len == balances_.length, AppErrors.WRONG_LENGTHS);\\n    require(p.len == amountsDesired_.length || p.len - 1 == amountsDesired_.length, AppErrors.WRONG_LENGTHS);\\n\\n    p.decimals = new uint[](p.len);\\n    p.rates = new uint[](p.len);\\n    for (uint i = 0; i < p.len; i = AppLib.uncheckedInc(i)) {\\n      if (i != indexBpt_) {\\n        require(balances_[i] != 0, AppErrors.ZERO_BALANCE);\\n        p.decimals[i] = 10 ** IERC20Metadata(address(tokens_[i])).decimals();\\n\\n        // Let's calculate a rate: amountBPT / underlyingAmount, decimals 18\\n        p.rates[i] = balances_[i] * 1e18 / totalUnderlying_[i];\\n      }\\n    }\\n\\n    amountsOut = new uint[](p.len - 1);\\n\\n    // The balances set proportions of underlying-bpt, i.e. bb-am-DAI : bb-am-USDC : bb-am-USDT\\n    // Our task is find amounts of DAI : USDC : USDT that won't change that proportions after deposit.\\n    // We have arbitrary desired amounts, i.e. DAI = X, USDC = Y, USDT = Z\\n    // For each token: assume that it can be used in full.\\n    // If so, what amounts will have other tokens in this case according to the given proportions?\\n    // i.e. DAI = X = 100.0 => USDC = 200.0, USDT = 400.0. We need: Y >= 200, Z >= 400\\n    // or   USDC = Y = 100.0 => DAI = 50.0, USDT = 200.0. We need: X >= 50, Z >= 200\\n    // If any amount is less then expected, the token cannot be used in full.\\n    // A token with min amount can be used in full, let's try to find its index.\\n    // [0 : len - 1]\\n    uint i3;\\n    for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\\n      if (indexBpt_ == i) continue;\\n\\n      uint amountInBpt18 = amountsDesired_[i3] * p.rates[i];\\n\\n      // [0 : len]\\n      uint j;\\n      // [0 : len - 1]\\n      uint j3;\\n      for (; j < p.len; j = AppLib.uncheckedInc(j)) {\\n        if (indexBpt_ == j) continue;\\n\\n        // alpha = balancesDAI / balancesUSDC * decimalsDAI / decimalsUSDC\\n        // amountDAI = amountUSDC * alpha * rateUSDC / rateDAI\\n        amountsOut[j3] = amountInBpt18 * balances_[j] / p.rates[j] * p.decimals[j] / balances_[i] / p.decimals[i];\\n        if (amountsOut[j3] > amountsDesired_[j3]) break;\\n        j3++;\\n      }\\n\\n      if (j == p.len) break;\\n      i3++;\\n    }\\n  }\\n\\n  /// @notice Calculate total amount of underlying asset for each token except BPT\\n  /// @dev Amount is calculated as MainTokenAmount + WrappedTokenAmount * WrappedTokenRate, see AaveLinearPool src\\n  function getTotalAssetAmounts(IBVault vault_, IERC20[] memory tokens_, uint indexBpt_) internal view returns (\\n    uint[] memory amountsOut\\n  ) {\\n    uint len = tokens_.length;\\n    amountsOut = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i != indexBpt_) {\\n        ILinearPool linearPool = ILinearPool(address(tokens_[i]));\\n        (, uint[] memory balances,) = vault_.getPoolTokens(linearPool.getPoolId());\\n\\n        amountsOut[i] =\\n          balances[linearPool.getMainIndex()]\\n          + balances[linearPool.getWrappedIndex()] * linearPool.getWrappedTokenRate() / 1e18;\\n      }\\n    }\\n  }\\n\\n  /// @notice Split {liquidityAmount_} by assets according to proportions of their total balances\\n  /// @param liquidityAmount_ Amount to withdraw in bpt\\n  /// @param balances_ Balances received from getPoolTokens\\n  /// @param bptIndex_ Index of pool-pbt inside {balances_}\\n  /// @return bptAmountsOut Amounts of underlying-BPT. The array doesn't include an amount for pool-bpt\\n  ///         Total amount of {bptAmountsOut}-items is equal to {liquidityAmount_}\\n  function getBtpAmountsOut(\\n    uint liquidityAmount_,\\n    uint[] memory balances_,\\n    uint bptIndex_\\n  ) internal pure returns (uint[] memory bptAmountsOut) {\\n    // we assume here, that len >= 2\\n    // we don't check it because StableMath.sol in balancer has _MIN_TOKENS = 2;\\n    uint len = balances_.length;\\n    bptAmountsOut = new uint[](len - 1);\\n\\n    // compute total balance, skip pool-bpt\\n    uint totalBalances;\\n    uint k;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == bptIndex_) continue;\\n      totalBalances += balances_[i];\\n      // temporary save incomplete amounts to bptAmountsOut\\n      bptAmountsOut[k] = liquidityAmount_ * balances_[i];\\n      ++k;\\n    }\\n\\n    // finalize computation of bptAmountsOut using known totalBalances\\n    uint total;\\n    for (k = 0; k < len - 1; k = AppLib.uncheckedInc(k)) {\\n      if (k == len - 2) {\\n        // leftovers => last item\\n        bptAmountsOut[k] = total > liquidityAmount_\\n          ? 0\\n          : liquidityAmount_ - total;\\n      } else {\\n        bptAmountsOut[k] /= totalBalances;\\n        total += bptAmountsOut[k];\\n      }\\n    }\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Depositor view logic\\n  /////////////////////////////////////////////////////////////////////\\n  /// @notice Total amounts of the main assets under control of the pool, i.e amounts of USDT, USDC, DAI\\n  /// @return reservesOut Total amounts of embedded assets, i.e. for \\\"Balancer Boosted Tetu USD\\\" we return:\\n  ///                     0: balance USDT + (tUSDT recalculated to USDT)\\n  ///                     1: balance USDC + (tUSDC recalculated to USDC)\\n  ///                     2: balance DAI + (balance tDAI recalculated to DAI)\\n  function depositorPoolReserves(IBVault vault_, bytes32 poolId_) external view returns (uint[] memory reservesOut) {\\n    (IERC20[] memory tokens,,) = vault_.getPoolTokens(poolId_);\\n    uint bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\\n    uint len = tokens.length;\\n    // exclude pool-BPT\\n    reservesOut = new uint[](len - 1);\\n\\n    uint k;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == bptIndex) continue;\\n      ILinearPool linearPool = ILinearPool(address(tokens[i]));\\n\\n      // Each bb-t-* returns (main-token, wrapped-token, bb-t-itself), the order of tokens is arbitrary\\n      // i.e. (DAI + tDAI + bb-t-DAI) or (bb-t-USDC, tUSDC, USDC)\\n\\n      // get balances of all tokens of bb-am-XXX token, i.e. balances of (DAI, amDAI, bb-am-DAI)\\n      (, uint[] memory balances,) = vault_.getPoolTokens(linearPool.getPoolId());\\n      // DAI\\n      uint mainIndex = linearPool.getMainIndex();\\n      // tDAI\\n      uint wrappedIndex = linearPool.getWrappedIndex();\\n\\n      reservesOut[k] = balances[mainIndex] + balances[wrappedIndex] * linearPool.getWrappedTokenRate() / 1e18;\\n      ++k;\\n    }\\n  }\\n\\n  /// @notice Returns pool assets, same as getPoolTokens but without pool-bpt\\n  function depositorPoolAssets(IBVault vault_, bytes32 poolId_) external view returns (address[] memory poolAssets) {\\n    (IERC20[] memory tokens,,) = vault_.getPoolTokens(poolId_);\\n    uint bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\\n    uint len = tokens.length;\\n\\n    poolAssets = new address[](len - 1);\\n    uint k;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == bptIndex) continue;\\n\\n      poolAssets[k] = ILinearPool(address(tokens[i])).getMainToken();\\n      ++k;\\n    }\\n  }\\n\\n  /// @notice Returns pool weights\\n  /// @return weights Array with weights, length = getPoolTokens.tokens - 1 (all assets except BPT)\\n  /// @return totalWeight Total sum of all items of {weights}\\n  function depositorPoolWeights(IBVault vault_, bytes32 poolId_) external view returns (\\n    uint[] memory weights,\\n    uint totalWeight\\n  ) {\\n    (IERC20[] memory tokens,uint[] memory balances,) = vault_.getPoolTokens(poolId_);\\n    uint len = tokens.length;\\n    uint bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\\n    weights = new uint[](len - 1);\\n    uint j;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i != bptIndex) {\\n        totalWeight += balances[i];\\n        weights[j] = balances[i];\\n        j = AppLib.uncheckedInc(j);\\n      }\\n    }\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Depositor enter, exit logic\\n  /////////////////////////////////////////////////////////////////////\\n  /// @notice Deposit given amount to the pool.\\n  /// @param amountsDesired_ Amounts of assets on the balance of the depositor\\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\\n  ///         i.e. for \\\"Balancer Boosted Aave USD\\\" we have DAI, USDC, USDT\\n  /// @return amountsConsumedOut Amounts of assets deposited to balanceR pool\\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\\n  /// @return liquidityOut Total amount of liquidity added to balanceR pool in terms of pool-bpt tokens\\n  function depositorEnter(IBVault vault_, bytes32 poolId_, uint[] memory amountsDesired_) external returns (\\n    uint[] memory amountsConsumedOut,\\n    uint liquidityOut\\n  ) {\\n    DepositorLocal memory p;\\n\\n    // The implementation below assumes, that getPoolTokens returns the assets in following order:\\n    //    bb-am-dai, bb-am-usd, bb-am-usdc, bb-am-usdt\\n    (p.tokens, p.balances,) = vault_.getPoolTokens(poolId_);\\n    p.len = p.tokens.length;\\n    p.bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\\n\\n    // temporary save current liquidity\\n    liquidityOut = IComposableStablePool(address(p.tokens[p.bptIndex])).balanceOf(address(this));\\n\\n    // Original amounts can have any values.\\n    // But we need amounts in such proportions that won't move the current balances\\n    {\\n      uint[] memory underlying = BalancerLogicLib.getTotalAssetAmounts(vault_, p.tokens, p.bptIndex);\\n      amountsConsumedOut = BalancerLogicLib.getAmountsToDeposit(amountsDesired_, p.tokens, p.balances, underlying, p.bptIndex);\\n    }\\n\\n    // we can create funds_ once and use it several times\\n    IBVault.FundManagement memory funds = IBVault.FundManagement({\\n      sender: address(this),\\n      fromInternalBalance: false,\\n      recipient: payable(address(this)),\\n      toInternalBalance: false\\n    });\\n\\n    // swap all tokens XX => bb-am-XX\\n    // we need two arrays with same amounts: amountsToDeposit (with 0 for BB-AM-USD) and userDataAmounts (no BB-AM-USD)\\n    uint[] memory amountsToDeposit = new uint[](p.len);\\n    // no bpt\\n    uint[] memory userDataAmounts = new uint[](p.len - 1);\\n    uint k;\\n    for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == p.bptIndex) continue;\\n      amountsToDeposit[i] = BalancerLogicLib.swap(\\n        vault_,\\n        ILinearPool(address(p.tokens[i])).getPoolId(),\\n        ILinearPool(address(p.tokens[i])).getMainToken(),\\n        address(p.tokens[i]),\\n        amountsConsumedOut[k],\\n        funds\\n      );\\n      userDataAmounts[k] = amountsToDeposit[i];\\n      AppLib.approveIfNeeded(address(p.tokens[i]), amountsToDeposit[i], address(vault_));\\n      ++k;\\n    }\\n\\n    // add liquidity to balancer\\n    vault_.joinPool(\\n      poolId_,\\n      address(this),\\n      address(this),\\n      IBVault.JoinPoolRequest({\\n        assets: asIAsset(p.tokens), // must have the same length and order as the array returned by `getPoolTokens`\\n        maxAmountsIn: amountsToDeposit,\\n        userData: abi.encode(IBVault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, userDataAmounts, 0),\\n        fromInternalBalance: false\\n      })\\n    );\\n\\n    uint liquidityAfter = IERC20(address(p.tokens[p.bptIndex])).balanceOf(address(this));\\n\\n    liquidityOut = liquidityAfter > liquidityOut\\n      ? liquidityAfter - liquidityOut\\n      : 0;\\n  }\\n\\n  /// @notice Withdraw given amount of LP-tokens from the pool.\\n  /// @param liquidityAmount_ Amount to withdraw in bpt\\n  /// @return amountsOut Result amounts of underlying (DAI, USDC..) that will be received from BalanceR\\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\\n  function depositorExit(IBVault vault_, bytes32 poolId_, uint liquidityAmount_) external returns (\\n    uint[] memory amountsOut\\n  ) {\\n    DepositorLocal memory p;\\n\\n    p.bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\\n    (p.tokens, p.balances,) = vault_.getPoolTokens(poolId_);\\n    p.len = p.tokens.length;\\n\\n    require(liquidityAmount_ <= p.tokens[p.bptIndex].balanceOf(address(this)), AppErrors.NOT_ENOUGH_BALANCE);\\n\\n    // BalancerR can spend a bit less amount of liquidity than {liquidityAmount_}\\n    // i.e. we if liquidityAmount_ = 2875841, we can have leftovers = 494 after exit\\n    vault_.exitPool(\\n      poolId_,\\n      address(this),\\n      payable(address(this)),\\n      IBVault.ExitPoolRequest({\\n        assets: asIAsset(p.tokens), // must have the same length and order as the array returned by `getPoolTokens`\\n        minAmountsOut: new uint[](p.len), // no limits\\n        userData: abi.encode(IBVault.ExitKindComposableStable.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT, liquidityAmount_),\\n        toInternalBalance: false\\n      })\\n    );\\n\\n    // now we have amBbXXX tokens; swap them to XXX assets\\n\\n    // we can create funds_ once and use it several times\\n    IBVault.FundManagement memory funds = IBVault.FundManagement({\\n      sender: address(this),\\n      fromInternalBalance: false,\\n      recipient: payable(address(this)),\\n      toInternalBalance: false\\n    });\\n\\n    amountsOut = new uint[](p.len - 1);\\n    uint k;\\n    for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == p.bptIndex) continue;\\n      uint amountIn = p.tokens[i].balanceOf(address(this));\\n      if (amountIn != 0) {\\n        amountsOut[k] = swap(\\n          vault_,\\n          ILinearPool(address(p.tokens[i])).getPoolId(),\\n          address(p.tokens[i]),\\n          ILinearPool(address(p.tokens[i])).getMainToken(),\\n          amountIn,\\n          funds\\n        );\\n      }\\n      ++k;\\n    }\\n  }\\n\\n  /// @notice Withdraw all available amount of LP-tokens from the pool\\n  ///         BalanceR doesn't allow to withdraw exact amount, so it's allowed to leave dust amount on the balance\\n  /// @dev We make at most N attempts to withdraw (not more, each attempt takes a lot of gas).\\n  ///      Each attempt reduces available balance at ~1e4 times.\\n  /// @return amountsOut Result amounts of underlying (DAI, USDC..) that will be received from BalanceR\\n  ///                    The order of assets is the same as in getPoolTokens, but there is no pool-bpt\\n  function depositorExitFull(IBVault vault_, bytes32 poolId_) external returns (\\n    uint[] memory amountsOut\\n  ) {\\n    DepositorLocal memory p;\\n\\n    p.bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\\n    (p.tokens, p.balances,) = vault_.getPoolTokens(poolId_);\\n    p.len = p.tokens.length;\\n    amountsOut = new uint[](p.len - 1);\\n\\n    // we can create funds_ once and use it several times\\n    IBVault.FundManagement memory funds = IBVault.FundManagement({\\n      sender: address(this),\\n      fromInternalBalance: false,\\n      recipient: payable(address(this)),\\n      toInternalBalance: false\\n    });\\n\\n    uint liquidityAmount = p.tokens[p.bptIndex].balanceOf(address(this));\\n    if (liquidityAmount > 0) {\\n      uint liquidityThreshold = 10 ** IERC20Metadata(address(p.tokens[p.bptIndex])).decimals() / 100;\\n\\n      // we can make at most N attempts to withdraw amounts from the balanceR pool\\n      for (uint i = 0; i < 2; ++i) {\\n        vault_.exitPool(\\n          poolId_,\\n          address(this),\\n          payable(address(this)),\\n          IBVault.ExitPoolRequest({\\n            assets: asIAsset(p.tokens),\\n            minAmountsOut: new uint[](p.len), // no limits\\n            userData: abi.encode(IBVault.ExitKindComposableStable.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT, liquidityAmount),\\n            toInternalBalance: false\\n          })\\n        );\\n        liquidityAmount = p.tokens[p.bptIndex].balanceOf(address(this));\\n        if (liquidityAmount < liquidityThreshold || i == 1) {\\n          break;\\n        }\\n        (, p.balances,) = vault_.getPoolTokens(poolId_);\\n      }\\n\\n      // now we have amBbXXX tokens; swap them to XXX assets\\n      uint k;\\n      for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\\n        if (i == p.bptIndex) continue;\\n\\n        uint amountIn = p.tokens[i].balanceOf(address(this));\\n        if (amountIn != 0) {\\n          amountsOut[k] = swap(\\n            vault_,\\n            ILinearPool(address(p.tokens[i])).getPoolId(),\\n            address(p.tokens[i]),\\n            ILinearPool(address(p.tokens[i])).getMainToken(),\\n            amountIn,\\n            funds\\n          );\\n        }\\n        ++k;\\n      }\\n    }\\n\\n    uint depositorBalance = p.tokens[p.bptIndex].balanceOf(address(this));\\n    if (depositorBalance > 0) {\\n      uint k = 0;\\n      for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\\n        if (i == p.bptIndex) continue;\\n\\n        // we assume here, that the depositorBalance is small\\n        // so we can directly swap it to any single asset without changing of pool resources proportions\\n        amountsOut[k] += _convertSmallBptRemainder(vault_, poolId_, p, funds, depositorBalance, i);\\n        break;\\n      }\\n    }\\n\\n    return amountsOut;\\n  }\\n\\n  /// @notice convert remained SMALL amount of bpt => am-bpt => main token of the am-bpt\\n  /// @return amountOut Received amount of am-bpt's main token\\n  function _convertSmallBptRemainder(\\n    IBVault vault_,\\n    bytes32 poolId_,\\n    DepositorLocal memory p,\\n    IBVault.FundManagement memory funds,\\n    uint bptAmountIn_,\\n    uint indexTargetAmBpt_\\n  ) internal returns (uint amountOut) {\\n    uint amountAmBpt = BalancerLogicLib.swap(\\n      vault_,\\n      poolId_,\\n      address(p.tokens[p.bptIndex]),\\n      address(p.tokens[indexTargetAmBpt_]),\\n      bptAmountIn_,\\n      funds\\n    );\\n    amountOut = swap(\\n      vault_,\\n      ILinearPool(address(p.tokens[indexTargetAmBpt_])).getPoolId(),\\n      address(p.tokens[indexTargetAmBpt_]),\\n      ILinearPool(address(p.tokens[indexTargetAmBpt_])).getMainToken(),\\n      amountAmBpt,\\n      funds\\n    );\\n  }\\n\\n  /// @notice Quotes output for given amount of LP-tokens from the pool.\\n  /// @return amountsOut Result amounts of underlying (DAI, USDC..) that will be received from BalanceR\\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\\n  function depositorQuoteExit(\\n    IBVault vault_,\\n    IBalancerHelper helper_,\\n    bytes32 poolId_,\\n    uint liquidityAmount_\\n  ) external returns (\\n    uint[] memory amountsOut\\n  ) {\\n    DepositorLocal memory p;\\n\\n    p.bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\\n    (p.tokens, p.balances,) = vault_.getPoolTokens(poolId_);\\n    p.len = p.tokens.length;\\n\\n    (, uint[] memory amountsBpt) = helper_.queryExit(\\n      poolId_,\\n      address(this),\\n      payable(address(this)),\\n      IBVault.ExitPoolRequest({\\n        assets: asIAsset(p.tokens),\\n        minAmountsOut: new uint[](p.len), // no limits\\n        userData: abi.encode(\\n          IBVault.ExitKindComposableStable.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT,\\n          liquidityAmount_\\n        ),\\n        toInternalBalance: false\\n      })\\n    );\\n\\n    uint k;\\n    amountsOut = new uint[](p.len - 1);\\n    for (uint i = 0; i < p.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == p.bptIndex) continue;\\n      ILinearPool linearPool = ILinearPool(address(p.tokens[i]));\\n      amountsOut[k] = _calcLinearMainOutPerBptIn(vault_, linearPool, amountsBpt[i]);\\n      ++k;\\n    }\\n  }\\n\\n  /// @notice Swap given {amountIn_} of {assetIn_} to {assetOut_} using the given BalanceR pool\\n  function swap(\\n    IBVault vault_,\\n    bytes32 poolId_,\\n    address assetIn_,\\n    address assetOut_,\\n    uint amountIn_,\\n    IBVault.FundManagement memory funds_\\n  ) internal returns (uint amountOut) {\\n    uint balanceBefore = IERC20(assetOut_).balanceOf(address(this));\\n\\n    IERC20(assetIn_).approve(address(vault_), amountIn_);\\n    vault_.swap(\\n      IBVault.SingleSwap({\\n        poolId: poolId_,\\n        kind: IBVault.SwapKind.GIVEN_IN,\\n        assetIn: IAsset(assetIn_),\\n        assetOut: IAsset(assetOut_),\\n        amount: amountIn_,\\n        userData: bytes(\\\"\\\")\\n      }),\\n      funds_,\\n      1,\\n      block.timestamp\\n    );\\n\\n    // we assume here, that the balance cannot be decreased\\n    amountOut = IERC20(assetOut_).balanceOf(address(this)) - balanceBefore;\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Rewards\\n  /////////////////////////////////////////////////////////////////////\\n\\n  function depositorClaimRewards(IBalancerGauge gauge_, address[] memory tokens_, address[] memory rewardTokens_) external returns (\\n    address[] memory tokensOut,\\n    uint[] memory amountsOut,\\n    uint[] memory depositorBalancesBefore\\n  ) {\\n    uint tokensLen = tokens_.length;\\n    uint rewardTokensLen = rewardTokens_.length;\\n\\n    tokensOut = new address[](rewardTokensLen);\\n    amountsOut = new uint[](rewardTokensLen);\\n    depositorBalancesBefore = new uint[](tokensLen);\\n\\n    for (uint i; i < tokensLen; i = AppLib.uncheckedInc(i)) {\\n      depositorBalancesBefore[i] = IERC20(tokens_[i]).balanceOf(address(this));\\n    }\\n\\n    for (uint i; i < rewardTokensLen; i = AppLib.uncheckedInc(i)) {\\n      tokensOut[i] = rewardTokens_[i];\\n\\n      // temporary store current reward balance\\n      amountsOut[i] = IERC20(rewardTokens_[i]).balanceOf(address(this));\\n    }\\n\\n    // claim BAL tokens\\n    IBalancerMinter(gauge_.bal_pseudo_minter()).mint(address(gauge_));\\n\\n    // claim other rewards\\n    gauge_.claim_rewards();\\n\\n    for (uint i; i < rewardTokensLen; i = AppLib.uncheckedInc(i)) {\\n      amountsOut[i] = IERC20(rewardTokens_[i]).balanceOf(address(this)) - amountsOut[i];\\n    }\\n\\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokensOut, amountsOut);\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Utils\\n  /////////////////////////////////////////////////////////////////////\\n\\n  function createSpecificName(address pool_) external view returns (string memory) {\\n    return string(abi.encodePacked(\\\"Balancer \\\", IERC20Metadata(pool_).symbol()));\\n  }\\n\\n  /// @dev Returns the address of a Pool's contract.\\n  ///      Due to how Pool IDs are created, this is done with no storage accesses and costs little gas.\\n  function getPoolAddress(bytes32 id) internal pure returns (address) {\\n    // 12 byte logical shift left to remove the nonce and specialization setting. We don't need to mask,\\n    // since the logical shift already sets the upper bits to zero.\\n    return address(uint160(uint(id) >> (12 * 8)));\\n  }\\n\\n  /// @dev see balancer-labs, ERC20Helpers.sol\\n  function asIAsset(IERC20[] memory tokens) internal pure returns (IAsset[] memory assets) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      assets := tokens\\n    }\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Linear pool quote swap math logic\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @dev This logic is needed for hardworks in conditions of lack of funds in linear pools.\\n  ///      The lack of funds in linear pools is a typical situation caused by pool rebalancing after deposits from the strategy.\\n  ///      Main tokens are leaving linear pools to mint wrapped tokens.\\n  function _calcLinearMainOutPerBptIn(IBVault vault, ILinearPool pool, uint amount) internal view returns (uint) {\\n    (uint lowerTarget, uint upperTarget) = pool.getTargets();\\n    LinearPoolParams memory params = LinearPoolParams(pool.getSwapFeePercentage(), lowerTarget, upperTarget);\\n    (,uint[] memory balances,) = vault.getPoolTokens(pool.getPoolId());\\n    uint[] memory scalingFactors = pool.getScalingFactors();\\n    _upscaleArray(balances, scalingFactors);\\n    amount *= scalingFactors[0] / 1e18;\\n    uint mainIndex = pool.getMainIndex();\\n    uint mainBalance = balances[mainIndex];\\n    uint bptSupply = pool.totalSupply() - balances[0];\\n    uint previousNominalMain = _toNominal(mainBalance, params);\\n    uint invariant = previousNominalMain + balances[pool.getWrappedIndex()];\\n    uint deltaNominalMain = invariant * amount / bptSupply;\\n    uint afterNominalMain = previousNominalMain > deltaNominalMain ? previousNominalMain - deltaNominalMain : 0;\\n    uint newMainBalance = _fromNominal(afterNominalMain, params);\\n    return (mainBalance - newMainBalance) * 1e18 / scalingFactors[mainIndex];\\n  }\\n\\n  function _toNominal(uint real, LinearPoolParams memory params) internal pure returns (uint) {\\n    if (real < params.lowerTarget) {\\n      uint fees = (params.lowerTarget - real) * params.fee / 1e18;\\n      return real - fees;\\n    } else if (real <= params.upperTarget) {\\n      return real;\\n    } else {\\n      uint fees = (real - params.upperTarget) * params.fee / 1e18;\\n      return real - fees;\\n    }\\n  }\\n\\n  function _fromNominal(uint nominal, LinearPoolParams memory params) internal pure returns (uint) {\\n    if (nominal < params.lowerTarget) {\\n      return (nominal + (params.fee * params.lowerTarget / 1e18)) * 1e18 / (1e18 + params.fee);\\n    } else if (nominal <= params.upperTarget) {\\n      return nominal;\\n    } else {\\n      return (nominal - (params.fee * params.upperTarget / 1e18)) * 1e18 / (1e18 - params.fee);\\n    }\\n  }\\n\\n  function _upscaleArray(uint[] memory amounts, uint[] memory scalingFactors) internal pure {\\n    uint length = amounts.length;\\n    for (uint i; i < length; ++i) {\\n      amounts[i] = amounts[i] * scalingFactors[i] / 1e18;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8487ab3ce57807735aa8939b2c40e7df7db497861197fc9d0c0d40bbe0724e42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Many of functions are declared as external to reduce contract size",
    "kind": "dev",
    "methods": {
      "depositorEnter(IBVault,bytes32,uint256[])": {
        "params": {
          "amountsDesired_": "Amounts of assets on the balance of the depositor         The order of assets is the same as in getPoolTokens, but there is no pool-bpt         i.e. for \"Balancer Boosted Aave USD\" we have DAI, USDC, USDT"
        },
        "returns": {
          "amountsConsumedOut": "Amounts of assets deposited to balanceR pool         The order of assets is the same as in getPoolTokens, but there is no pool-bpt",
          "liquidityOut": "Total amount of liquidity added to balanceR pool in terms of pool-bpt tokens"
        }
      },
      "depositorExit(IBVault,bytes32,uint256)": {
        "params": {
          "liquidityAmount_": "Amount to withdraw in bpt"
        },
        "returns": {
          "amountsOut": "Result amounts of underlying (DAI, USDC..) that will be received from BalanceR         The order of assets is the same as in getPoolTokens, but there is no pool-bpt"
        }
      },
      "depositorExitFull(IBVault,bytes32)": {
        "details": "We make at most N attempts to withdraw (not more, each attempt takes a lot of gas).      Each attempt reduces available balance at ~1e4 times.",
        "returns": {
          "amountsOut": "Result amounts of underlying (DAI, USDC..) that will be received from BalanceR                    The order of assets is the same as in getPoolTokens, but there is no pool-bpt"
        }
      },
      "depositorPoolReserves(IBVault,bytes32)": {
        "returns": {
          "reservesOut": "Total amounts of embedded assets, i.e. for \"Balancer Boosted Tetu USD\" we return:                     0: balance USDT + (tUSDT recalculated to USDT)                     1: balance USDC + (tUSDC recalculated to USDC)                     2: balance DAI + (balance tDAI recalculated to DAI)"
        }
      },
      "depositorPoolWeights(IBVault,bytes32)": {
        "returns": {
          "totalWeight": "Total sum of all items of {weights}",
          "weights": "Array with weights, length = getPoolTokens.tokens - 1 (all assets except BPT)"
        }
      },
      "depositorQuoteExit(IBVault,IBalancerHelper,bytes32,uint256)": {
        "returns": {
          "amountsOut": "Result amounts of underlying (DAI, USDC..) that will be received from BalanceR         The order of assets is the same as in getPoolTokens, but there is no pool-bpt"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createSpecificName(address)": {
        "notice": "Utils"
      },
      "depositorClaimRewards(IBalancerGauge,address[],address[])": {
        "notice": "Rewards"
      },
      "depositorEnter(IBVault,bytes32,uint256[])": {
        "notice": "Deposit given amount to the pool."
      },
      "depositorExit(IBVault,bytes32,uint256)": {
        "notice": "Withdraw given amount of LP-tokens from the pool."
      },
      "depositorExitFull(IBVault,bytes32)": {
        "notice": "Withdraw all available amount of LP-tokens from the pool         BalanceR doesn't allow to withdraw exact amount, so it's allowed to leave dust amount on the balance"
      },
      "depositorPoolAssets(IBVault,bytes32)": {
        "notice": "Returns pool assets, same as getPoolTokens but without pool-bpt"
      },
      "depositorPoolReserves(IBVault,bytes32)": {
        "notice": "Total amounts of the main assets under control of the pool, i.e amounts of USDT, USDC, DAI"
      },
      "depositorPoolWeights(IBVault,bytes32)": {
        "notice": "Returns pool weights"
      },
      "depositorQuoteExit(IBVault,IBalancerHelper,bytes32,uint256)": {
        "notice": "Quotes output for given amount of LP-tokens from the pool."
      }
    },
    "notice": "Functions of BalancerBoostedDepositor",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}