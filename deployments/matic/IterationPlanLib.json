{
  "address": "0x0118015B5D5F7f104292DB79Ae47AA0e962A09be",
  "abi": [
    {
      "inputs": [],
      "name": "PLAN_REPAY_SWAP_REPAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLAN_SWAP_ONLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLAN_SWAP_REPAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x874d4d70ff0db6e7c8d72bb18cdb4d11f52f314e1962cbbbd30cdb9e32a8af2f",
  "receipt": {
    "to": null,
    "from": "0xF1dCce3a6c321176C62b71c091E3165CC9C3816E",
    "contractAddress": "0x0118015B5D5F7f104292DB79Ae47AA0e962A09be",
    "transactionIndex": 66,
    "gasUsed": "1513503",
    "logsBloom": "0x
    "blockHash": "0x0835677bb389596df67c44bb5704a9b50ff699b792d3a94bac86c85cb6413821",
    "transactionHash": "0x874d4d70ff0db6e7c8d72bb18cdb4d11f52f314e1962cbbbd30cdb9e32a8af2f",
    "logs": [
      {
        "transactionIndex": 66,
        "blockNumber": 54801598,
        "transactionHash": "0x874d4d70ff0db6e7c8d72bb18cdb4d11f52f314e1962cbbbd30cdb9e32a8af2f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1dcce3a6c321176c62b71c091e3165cc9c3816e",
          "0x000000000000000000000000048cfedf907c4c9ddd11ff882380906e78e84bbe"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000810c8d105b100000000000000000000000000000000000000000000000002721ebabea4a1e56b000000000000000000000000000000000000000000002431a0f509e2c2ea3b7b0000000000000000000000000000000000000000000000027216a9f5d39c346b000000000000000000000000000000000000000000002431a0fd1aab93efec7b",
        "logIndex": 418,
        "blockHash": "0x0835677bb389596df67c44bb5704a9b50ff699b792d3a94bac86c85cb6413821"
      }
    ],
    "blockNumber": 54801598,
    "cumulativeGasUsed": "10887168",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 13,
  "solcInputHash": "a408f1fd06b60723e7f996d4b67ed7ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PLAN_REPAY_SWAP_REPAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLAN_SWAP_ONLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLAN_SWAP_REPAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buildIterationPlan(address[2],address[],uint256[],uint256[],uint256[],uint256[],uint256[7])\":{\"params\":{\"balanceAdditions\":\"Amounts that will be added to the current balances of the {tokens}                         to the moment of the plan execution\",\"converterLiquidator\":\"[TetuConverter, TetuLiquidator]\",\"decs\":\"10**decimal for each token of the {tokens}\",\"liquidationThresholds\":\"Liquidation thresholds for the {tokens}. If amount is less then the threshold,                              we cannot swap it.\",\"packedData\":\"Several values packed to fixed-size array (to reduce number of params)    0: usePoolProportions: 1 - read proportions from the pool through IPoolProportionsProvider(this)    1: planKind: selected plan, one of PLAN_XXX    2: propNotUnderlying18: value of not-underlying proportion [0..1e18] if usePoolProportions == 0    3: requestedBalance: total amount that should be withdrawn, it can be type(uint).max    4: indexAsset: index of the underlying in {tokens} array    5: indexToken: index of the token in {tokens} array. We are going to withdraw the token and convert it to the asset    6: entryDataParam: required-amount-to-reduce-debt in REPAY-SWAP-REPAY case; zero in other cases\",\"prices\":\"Prices of the {tokens}, decimals 18, [$/token]\",\"tokens\":\"List of the pool tokens. One of them is underlying and one of then is not-underlying               that we are going to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PLAN_REPAY_SWAP_REPAY()\":{\"notice\":\"Repay available amount-to-repay, swap all or part of collateral to borrowed-asset, make one repay if needed.         Swap + second repay tries to make asset balances to proportions required by the pool.         Proportions are read from pool through IPoolProportionsProvider(this) and re-read after swapping.         This mode is intended i.e. for rebalancing debts using single iteration.         (uint256, uint256, uint256) - (entry kind, propNotUnderlying18, required-amount-to-reduce-the-debt) propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                     The assets should be swapped to get following result proportions:                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)                     Pass type(uint).max to read proportions from the pool.\"},\"PLAN_SWAP_ONLY()\":{\"notice\":\"Swap leftovers to required proportions, don't repay any debts         (uint256, uint256) - (entry kind, propNotUnderlying18) propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                     The assets should be swapped to get following result proportions:                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)                     Pass type(uint).max to read proportions from the pool.\"},\"PLAN_SWAP_REPAY()\":{\"notice\":\"Swap collateral asset to get required amount-to-repay, then repay and get more collateral back.         It tries to minimizes count of repay-operations.         If there are no debts, swap leftovers to get required proportions of the asset.         This mode is intended i.e. for \\\"withdraw all\\\"         (uint256, uint256) - (entry kind, propNotUnderlying18) propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                     The assets should be swapped to get following result proportions:                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)                     Pass type(uint).max to read proportions from the pool.\"},\"buildIterationPlan(address[2],address[],uint256[],uint256[],uint256[],uint256[],uint256[7])\":{\"notice\":\"Build plan to make single iteration of withdraw according to the selected plan         The goal is to withdraw {requestedAmount} and receive {asset}:{token} in proper proportions on the balance\"}},\"notice\":\"Support of withdraw iteration plans\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libs/IterationPlanLib.sol\":\"IterationPlanLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n\\n  // --- DEPENDENCY ADDRESSES\\n  function governance() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function liquidator() external view returns (address);\\n\\n  function forwarder() external view returns (address);\\n\\n  function investFund() external view returns (address);\\n\\n  function veDistributor() external view returns (address);\\n\\n  function platformVoter() external view returns (address);\\n\\n  // --- VAULTS\\n\\n  function vaults(uint id) external view returns (address);\\n\\n  function vaultsList() external view returns (address[] memory);\\n\\n  function vaultsListLength() external view returns (uint);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  // --- restrictions\\n\\n  function isOperator(address _adr) external view returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0x86716b8a4775605c31b8bb9f90f8f4a18b709ff4435182f3a148803368060a8c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0xd5fe6f3ab750cc2d23f573597db5607c701e74c39e13c20c07a921a26c6d5012\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\",\"keccak256\":\"0x2c5be0f4a60126b08e20f40586958ec1b76a27b69406c4b0db19e9dc6f771cfc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Keep and provide addresses of all application contracts\\ninterface IConverterController {\\n  function governance() external view returns (address);\\n\\n  // ********************* Health factor explanation  ****************\\n  // For example, a landing platform has: liquidity threshold = 0.85, LTV=0.8, LTV / LT = 1.0625\\n  // For collateral $100 we can borrow $80. A liquidation happens if the cost of collateral will reduce below $85.\\n  // We set min-health-factor = 1.1, target-health-factor = 1.3\\n  // For collateral 100 we will borrow 100/1.3 = 76.92\\n  //\\n  // Collateral value   100        77            assume that collateral value is decreased at 100/77=1.3 times\\n  // Collateral * LT    85         65.45\\n  // Borrow value       65.38      65.38         but borrow value is the same as before\\n  // Health factor      1.3        1.001         liquidation almost happens here (!)\\n  //\\n  /// So, if we have target factor 1.3, it means, that if collateral amount will decreases at 1.3 times\\n  // and the borrow value won't change at the same time, the liquidation happens at that point.\\n  // Min health factor marks the point at which a rebalancing must be made asap.\\n  // *****************************************************************\\n\\n  //#region ----------------------------------------------------- Configuration\\n\\n  /// @notice min allowed health factor with decimals 2, must be >= 1e2\\n  function minHealthFactor2() external view returns (uint16);\\n  function setMinHealthFactor2(uint16 value_) external;\\n\\n  /// @notice target health factor with decimals 2\\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\\n  ///      or additional borrow and restore the health factor to the given target value\\n  function targetHealthFactor2() external view returns (uint16);\\n  function setTargetHealthFactor2(uint16 value_) external;\\n\\n  /// @notice max allowed health factor with decimals 2\\n  /// @dev For future versions, currently max health factor is not used\\n  function maxHealthFactor2() external view returns (uint16);\\n  /// @dev For future versions, currently max health factor is not used\\n  function setMaxHealthFactor2(uint16 value_) external;\\n\\n  /// @notice get current value of blocks per day. The value is set manually at first and can be auto-updated later\\n  function blocksPerDay() external view returns (uint);\\n  /// @notice set value of blocks per day manually and enable/disable auto update of this value\\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external;\\n  /// @notice Check if it's time to call updateBlocksPerDay()\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view returns (bool);\\n  /// @notice Recalculate blocksPerDay value\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function updateBlocksPerDay(uint periodInSeconds_) external;\\n\\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\\n  function paused() external view returns (bool);\\n\\n  /// @notice the given user is whitelisted and is allowed to make borrow/swap using TetuConverter\\n  function isWhitelisted(address user_) external view returns (bool);\\n\\n  /// @notice The size of the gap by which the debt should be increased upon repayment\\n  ///         Such gaps are required by AAVE pool adapters to workaround dust tokens problem\\n  ///         and be able to make full repayment.\\n  /// @dev Debt gap is applied as following: toPay = debt * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR\\n  function debtGap() external view returns (uint);\\n\\n  /// @notice Allow to rebalance exist debts during burrow, see SCB-708\\n  ///         If the user already has a debt(s) for the given pair of collateral-borrow assets,\\n  ///         new borrow is made using exist pool adapter(s). Exist debt is rebalanced during the borrowing\\n  ///         in both directions, but the rebalancing is asymmetrically limited by thresholds\\n  ///         THRESHOLD_REBALANCE_XXX, see BorrowManager.\\n  function rebalanceOnBorrowEnabled() external view returns (bool);\\n\\n  //#endregion ----------------------------------------------------- Configuration\\n  //#region ----------------------------------------------------- Core application contracts\\n\\n  function tetuConverter() external view returns (address);\\n  function borrowManager() external view returns (address);\\n  function debtMonitor() external view returns (address);\\n  function tetuLiquidator() external view returns (address);\\n  function swapManager() external view returns (address);\\n  function priceOracle() external view returns (address);\\n  function bookkeeper() external view returns (address);\\n  //#endregion ----------------------------------------------------- Core application contracts\\n\\n  //#region ----------------------------------------------------- External contracts\\n  /// @notice A keeper to control health and efficiency of the borrows\\n  function keeper() external view returns (address);\\n  /// @notice Controller of tetu-contracts-v2, that is allowed to update proxy contracts\\n  function proxyUpdater() external view returns (address);\\n  //#endregion ----------------------------------------------------- External contracts\\n}\\n\",\"keccak256\":\"0xff68dab4badf9543c9a0ae5a1314106f0a5b804e8b6669fbea6e2655eb3c741f\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IConverterControllerProvider {\\n  function controller() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71dce61809acb75f9078290e90033ffe816a51f18b7cb296d161e278c36eec86\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPriceOracle {\\n  /// @notice Return asset price in USD, decimals 18\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb11e653eb4d6d7c41f29ee1e3e498253cfa8df1aec3ff31ab527009b79bdb705\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IConverterControllerProvider.sol\\\";\\n\\n/// @notice Main contract of the TetuConverter application\\n/// @dev Borrower (strategy) makes all operations via this contract only.\\ninterface ITetuConverter is IConverterControllerProvider {\\n\\n  /// @notice Find possible borrow strategies and provide \\\"cost of money\\\" as interest for the period for each strategy\\n  ///         Result arrays of the strategy are ordered in ascending order of APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converters Array of available converters ordered in ascending order of APR.\\n  ///                    Each item contains a result contract that should be used for conversion; it supports IConverter\\n  ///                    This address should be passed to borrow-function during conversion.\\n  ///                    The length of array is always equal to the count of available lending platforms.\\n  ///                    Last items in array can contain zero addresses (it means they are not used)\\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\\n  /// @return amountToBorrowsOut Amounts that should be borrowed\\n  ///                            This amount is not zero if corresponded converter is not zero.\\n  /// @return aprs18 Interests on the use of {amountIn_} during the given period, decimals 18\\n  function findBorrowStrategies(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external view returns (\\n    address[] memory converters,\\n    uint[] memory collateralAmountsOut,\\n    uint[] memory amountToBorrowsOut,\\n    int[] memory aprs18\\n  );\\n\\n  /// @notice Find best swap strategy and provide \\\"cost of money\\\" as interest for the period\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow()\\n  /// @return sourceAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                         It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return targetAmountOut Result amount of {targetToken_} after swap\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findSwapStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_\\n  ) external returns (\\n    address converter,\\n    uint sourceAmountOut,\\n    uint targetAmountOut,\\n    int apr18\\n  );\\n\\n  /// @notice Find best conversion strategy (swap or borrow) and provide \\\"cost of money\\\" as interest for the period.\\n  ///         It calls both findBorrowStrategy and findSwapStrategy and selects a best strategy.\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR for swapping.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow().\\n  /// @return collateralAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                             It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return amountToBorrowOut Result amount of {targetToken_} after conversion\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findConversionStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external returns (\\n    address converter,\\n    uint collateralAmountOut,\\n    uint amountToBorrowOut,\\n    int apr18\\n  );\\n\\n  /// @notice Convert {collateralAmount_} to {amountToBorrow_} using {converter_}\\n  ///         Target amount will be transferred to {receiver_}.\\n  ///         Exist debts can be rebalanced fully or partially if {rebalanceOnBorrowEnabled} is ON\\n  /// @dev Transferring of {collateralAmount_} by TetuConverter-contract must be approved by the caller before the call\\n  ///      Only whitelisted users are allowed to make borrows\\n  /// @param converter_ A converter received from findBestConversionStrategy.\\n  /// @param collateralAmount_ Amount of {collateralAsset_} to be converted.\\n  ///                          This amount must be approved to TetuConverter before the call.\\n  /// @param amountToBorrow_ Amount of {borrowAsset_} to be borrowed and sent to {receiver_}\\n  /// @param receiver_ A receiver of borrowed amount\\n  /// @return borrowedAmountOut Exact borrowed amount transferred to {receiver_}\\n  function borrow(\\n    address converter_,\\n    address collateralAsset_,\\n    uint collateralAmount_,\\n    address borrowAsset_,\\n    uint amountToBorrow_,\\n    address receiver_\\n  ) external returns (\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Full or partial repay of the borrow\\n  /// @dev A user should transfer {amountToRepay_} to TetuConverter before calling repay()\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        A user should transfer {amountToRepay_} to TetuConverter before calling repay().\\n  ///        You can know exact total amount of debt using {getStatusCurrent}.\\n  ///        if the amount exceed total amount of the debt:\\n  ///           - the debt will be fully repaid\\n  ///           - remain amount will be swapped from {borrowAsset_} to {collateralAsset_}\\n  ///        This amount should be calculated with taking into account possible debt gap,\\n  ///        You should call getDebtAmountCurrent(debtGap = true) to get this amount.\\n  /// @param receiver_ A receiver of the collateral that will be withdrawn after the repay\\n  ///                  The remained amount of borrow asset will be returned to the {receiver_} too\\n  /// @return collateralAmountOut Exact collateral amount transferred to {collateralReceiver_}\\n  ///         If TetuConverter is not able to make the swap, it reverts\\n  /// @return returnedBorrowAmountOut A part of amount-to-repay that wasn't converted to collateral asset\\n  ///                                 because of any reasons (i.e. there is no available conversion strategy)\\n  ///                                 This amount is returned back to the collateralReceiver_\\n  /// @return swappedLeftoverCollateralOut A part of collateral received through the swapping\\n  /// @return swappedLeftoverBorrowOut A part of amountToRepay_ that was swapped\\n  function repay(\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_,\\n    address receiver_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint returnedBorrowAmountOut,\\n    uint swappedLeftoverCollateralOut,\\n    uint swappedLeftoverBorrowOut\\n  );\\n\\n  /// @notice Estimate result amount after making full or partial repay\\n  /// @dev It works in exactly same way as repay() but don't make actual repay\\n  ///      Anyway, the function is write, not read-only, because it makes updateStatus()\\n  /// @param user_ user whose amount-to-repay will be calculated\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        This amount should be calculated without possible debt gap.\\n  ///        In this way it's differ from {repay}\\n  /// @return collateralAmountOut Total collateral amount to be returned after repay in exchange of {amountToRepay_}\\n  /// @return swappedAmountOut A part of {collateralAmountOut} that were received by direct swap\\n  function quoteRepay(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint swappedAmountOut\\n  );\\n\\n  /// @notice Update status in all opened positions\\n  ///         After this call getDebtAmount will be able to return exact amount to repay\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountCurrent(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice Total amount of borrow tokens that should be repaid to close the borrow completely.\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountStored(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external view returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice User needs to redeem some collateral amount. Calculate an amount of borrow token that should be repaid\\n  /// @param user_ user whose debts will be returned\\n  /// @param collateralAmountRequired_ Amount of collateral required by the user\\n  /// @return borrowAssetAmount Borrowed amount that should be repaid to receive back following amount of collateral:\\n  ///                           amountToReceive = collateralAmountRequired_ - unobtainableCollateralAssetAmount\\n  /// @return unobtainableCollateralAssetAmount A part of collateral that cannot be obtained in any case\\n  ///                                           even if all borrowed amount will be returned.\\n  ///                                           If this amount is not 0, you ask to get too much collateral.\\n  function estimateRepay(\\n    address user_,\\n    address collateralAsset_,\\n    uint collateralAmountRequired_,\\n    address borrowAsset_\\n  ) external view returns (\\n    uint borrowAssetAmount,\\n    uint unobtainableCollateralAssetAmount\\n  );\\n\\n  /// @notice Transfer all reward tokens to {receiver_}\\n  /// @return rewardTokensOut What tokens were transferred. Same reward token can appear in the array several times\\n  /// @return amountsOut Amounts of transferred rewards, the array is synced with {rewardTokens}\\n  function claimRewards(address receiver_) external returns (\\n    address[] memory rewardTokensOut,\\n    uint[] memory amountsOut\\n  );\\n\\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\\n  ///                      It should be transferred on balance of the TetuConverter before the function call\\n  /// @param receiver_ Result amount will be sent to this address\\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\\n  function safeLiquidate(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    address receiver_,\\n    uint priceImpactToleranceSource_,\\n    uint priceImpactToleranceTarget_\\n  ) external returns (\\n    uint amountOut\\n  );\\n\\n  /// @notice Check if {amountOut_} is too different from the value calculated directly using price oracle prices\\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\\n  function isConversionValid(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    uint amountOut_,\\n    uint priceImpactTolerance_\\n  ) external view returns (bool);\\n\\n  /// @notice Close given borrow and return collateral back to the user, governance only\\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\\n  /// @param poolAdapter_ The pool adapter that represents the borrow\\n  /// @param closePosition Close position after repay\\n  ///        Usually it should be true, because the function always tries to repay all debt\\n  ///        false can be used if user doesn't have enough amount to pay full debt\\n  ///              and we are trying to pay \\\"as much as possible\\\"\\n  /// @return collateralAmountOut Amount of collateral returned to the user\\n  /// @return repaidAmountOut Amount of borrow asset paid to the lending platform\\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external returns (\\n    uint collateralAmountOut,\\n    uint repaidAmountOut\\n  );\\n\\n  /// @notice Get active borrows of the user with given collateral/borrowToken\\n  /// @dev Simple access to IDebtMonitor.getPositions\\n  /// @return poolAdaptersOut The instances of IPoolAdapter\\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\\n    address[] memory poolAdaptersOut\\n  );\\n\\n  /// @notice Save token from TC-balance to {receiver}\\n  /// @dev Normally TetuConverter doesn't have any tokens on balance, they can appear there accidentally only\\n  function salvage(address receiver, address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0x87ac3099e1254509929511509c207ecee9a665a3b43d7ee5b98e2ab0d639416d\",\"license\":\"MIT\"},\"contracts/libs/AppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice List of all errors generated by the application\\r\\n///         Each error should have unique code TS-XXX and descriptive comment\\r\\nlibrary AppErrors {\\r\\n  /// @notice Provided address should be not zero\\r\\n  string public constant ZERO_ADDRESS = \\\"TS-1 zero address\\\";\\r\\n\\r\\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\\r\\n  string public constant UNISWAP_PAIR_NOT_FOUND = \\\"TS-2 pair not found\\\";\\r\\n\\r\\n  /// @notice Lengths not matched\\r\\n  string public constant WRONG_LENGTHS = \\\"TS-4 wrong lengths\\\";\\r\\n\\r\\n  /// @notice Unexpected zero balance\\r\\n  string public constant ZERO_BALANCE = \\\"TS-5 zero balance\\\";\\r\\n\\r\\n  string public constant ITEM_NOT_FOUND = \\\"TS-6 not found\\\";\\r\\n\\r\\n  string public constant NOT_ENOUGH_BALANCE = \\\"TS-7 not enough balance\\\";\\r\\n\\r\\n  /// @notice Price oracle returns zero price\\r\\n  string public constant ZERO_PRICE = \\\"TS-8 zero price\\\";\\r\\n\\r\\n  string public constant WRONG_VALUE = \\\"TS-9 wrong value\\\";\\r\\n\\r\\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\\r\\n  string public constant ZERO_AMOUNT_BORROWED = \\\"TS-10 zero borrowed amount\\\";\\r\\n\\r\\n  string public constant WITHDRAW_TOO_MUCH = \\\"TS-11 try to withdraw too much\\\";\\r\\n\\r\\n  string public constant UNKNOWN_ENTRY_KIND = \\\"TS-12 unknown entry kind\\\";\\r\\n\\r\\n  string public constant ONLY_TETU_CONVERTER = \\\"TS-13 only TetuConverter\\\";\\r\\n\\r\\n  string public constant WRONG_ASSET = \\\"TS-14 wrong asset\\\";\\r\\n\\r\\n  string public constant NO_LIQUIDATION_ROUTE = \\\"TS-15 No liquidation route\\\";\\r\\n\\r\\n  string public constant PRICE_IMPACT = \\\"TS-16 price impact\\\";\\r\\n\\r\\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\\r\\n  string public constant REPAY_MAKES_SWAP = \\\"TS-17 can not convert back\\\";\\r\\n\\r\\n  string public constant NO_INVESTMENTS = \\\"TS-18 no investments\\\";\\r\\n\\r\\n  string public constant INCORRECT_LENGTHS = \\\"TS-19 lengths\\\";\\r\\n\\r\\n  /// @notice We expect increasing of the balance, but it was decreased\\r\\n  string public constant BALANCE_DECREASE = \\\"TS-20 balance decrease\\\";\\r\\n\\r\\n  /// @notice Prices changed and invested assets amount was increased on S, value of S is too high\\r\\n  string public constant EARNED_AMOUNT_TOO_HIGH = \\\"TS-21 earned too high\\\";\\r\\n\\r\\n  string public constant GOVERNANCE_ONLY = \\\"TS-22 governance only\\\";\\r\\n\\r\\n  string public constant ZERO_VALUE = \\\"TS-24 zero value\\\";\\r\\n\\r\\n  string public constant INCORRECT_SWAP_BY_AGG_PARAM = \\\"TS-25 swap by agg\\\";\\r\\n\\r\\n  string public constant OVER_COLLATERAL_DETECTED = \\\"TS-27 over-collateral\\\";\\r\\n\\r\\n  string public constant NOT_IMPLEMENTED = \\\"TS-28 not implemented\\\";\\r\\n\\r\\n  /// @notice You are not allowed to make direct debt if a NOT-DUST reverse debt exists and visa verse.\\r\\n  string public constant OPPOSITE_DEBT_EXISTS = \\\"TS-29 opposite debt exists\\\";\\r\\n\\r\\n  string public constant INVALID_VALUE = \\\"TS-30 invalid value\\\";\\r\\n\\r\\n  string public constant TOO_HIGH = \\\"TS-32 too high value\\\";\\r\\n\\r\\n  /// @notice BorrowLib has recursive call, sub-calls are not allowed\\r\\n  ///         This error can happen if allowed proportion is too small, i.e. 0.0004 : (1-0.0004)\\r\\n  ///         Such situation can happen if amount to swap is almost equal to the amount of the token in the current tick,\\r\\n  ///         so swap will move us close to the border between ticks.\\r\\n  ///         It was decided, that it's ok to have revert in that case\\r\\n  ///         We can change this behavior by changing BorrowLib.rebalanceRepayBorrow implementation:\\r\\n  ///             if amount-to-repay passed to _repayDebt is too small to be used,\\r\\n  ///             we should increase it min amount required to make repay successfully (amount must be > threshold)\\r\\n  ///         Previously it was error NOT_ALLOWED = \\\"TS23: not allowed\\\", see issues SCB-777, SCB-818\\r\\n  string public constant TOO_DEEP_RECURSION_BORROW_LIB = \\\"TS-33 too deep recursion\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x1400c631697434c991de2bfadcac7a0164a87be41a2cb683ed7f4fc75798d3e8\",\"license\":\"BUSL-1.1\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\\\";\\r\\n\\r\\n/// @notice Common internal utils\\r\\nlibrary AppLib {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// @notice 1% gap to cover possible liquidation inefficiency\\r\\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\\r\\n  uint internal constant GAP_CONVERSION = 1_000;\\r\\n  /// @dev Absolute value for any token\\r\\n  uint internal constant DEFAULT_LIQUIDATION_THRESHOLD = 100_000;\\r\\n  uint internal constant DENOMINATOR = 100_000;\\r\\n\\r\\n  /// @notice Any amount less than the following is dust\\r\\n  uint public constant DUST_AMOUNT_TOKENS = 100;\\r\\n\\r\\n  /// @notice Unchecked increment for for-cycles\\r\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\r\\n    unchecked {\\r\\n      return i + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\r\\n  /// @dev Should NOT be used for third-party pools\\r\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\r\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\r\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\r\\n      IERC20(token).approve(spender, 2 ** 255);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Make approve of {token} to unsafe {spender} (like an aggregator) for fixed {amount}\\r\\n  function approveForced(address token, uint amount, address spender) internal {\\r\\n    IERC20(token).approve(spender, amount);\\r\\n  }\\r\\n\\r\\n  function balance(address token) internal view returns (uint) {\\r\\n    return IERC20(token).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /// @return prices Asset prices in USD, decimals 18\\r\\n  /// @return decs 10**decimals\\r\\n  function _getPricesAndDecs(IPriceOracle priceOracle, address[] memory tokens_, uint len) internal view returns (\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs\\r\\n  ) {\\r\\n    prices = new uint[](len);\\r\\n    decs = new uint[](len);\\r\\n    {\\r\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n        decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\\r\\n        prices[i] = priceOracle.getAssetPrice(tokens_[i]);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\\r\\n  function getAssetIndex(address[] memory tokens_, address asset_) internal pure returns (uint) {\\r\\n    uint len = tokens_.length;\\r\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\r\\n      if (tokens_[i] == asset_) {\\r\\n        return i;\\r\\n      }\\r\\n    }\\r\\n    return type(uint).max;\\r\\n  }\\r\\n\\r\\n  function _getLiquidator(address controller_) internal view returns (ITetuLiquidator) {\\r\\n    return ITetuLiquidator(IController(controller_).liquidator());\\r\\n  }\\r\\n\\r\\n  function _getPriceOracle(ITetuConverter converter_) internal view returns (IPriceOracle) {\\r\\n    return IPriceOracle(IConverterController(converter_.controller()).priceOracle());\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate liquidation threshold, use default value if the threshold is not set\\r\\n  ///         It's allowed to set any not-zero threshold, it this case default value is not used\\r\\n  /// @dev This function should be applied to the threshold at the moment of the reading its value from the storage.\\r\\n  ///      So, if we pass {mapping(address => uint) storage liquidationThresholds}, the threshold can be zero\\r\\n  ///      bug if we pass {uint liquidationThreshold} to a function, the threshold should be not zero\\r\\n  function _getLiquidationThreshold(uint threshold) internal pure returns (uint) {\\r\\n    return threshold == 0\\r\\n      ? AppLib.DEFAULT_LIQUIDATION_THRESHOLD\\r\\n      : threshold;\\r\\n  }\\r\\n\\r\\n  /// @notice Return a-b OR zero if a < b\\r\\n  function sub0(uint a, uint b) internal pure returns (uint) {\\r\\n    return a > b ? a - b : 0;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7dc2bddc5940fbdc22a6eb59637a71345999fead987b7e5dec86d3e64fb85dd4\",\"license\":\"BUSL-1.1\"},\"contracts/libs/IterationPlanLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\r\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\r\\nimport \\\"./AppErrors.sol\\\";\\r\\nimport \\\"./AppLib.sol\\\";\\r\\n\\r\\n/// @notice Support of withdraw iteration plans\\r\\nlibrary IterationPlanLib {\\r\\n\\r\\n//region ------------------------------------------------ Constants\\r\\n  /// @notice Swap collateral asset to get required amount-to-repay, then repay and get more collateral back.\\r\\n  ///         It tries to minimizes count of repay-operations.\\r\\n  ///         If there are no debts, swap leftovers to get required proportions of the asset.\\r\\n  ///         This mode is intended i.e. for \\\"withdraw all\\\"\\r\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\r\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                     The assets should be swapped to get following result proportions:\\r\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\r\\n  ///                     Pass type(uint).max to read proportions from the pool.\\r\\n  uint constant public PLAN_SWAP_REPAY = 0;\\r\\n\\r\\n  /// @notice Repay available amount-to-repay, swap all or part of collateral to borrowed-asset, make one repay if needed.\\r\\n  ///         Swap + second repay tries to make asset balances to proportions required by the pool.\\r\\n  ///         Proportions are read from pool through IPoolProportionsProvider(this) and re-read after swapping.\\r\\n  ///         This mode is intended i.e. for rebalancing debts using single iteration.\\r\\n  ///         (uint256, uint256, uint256) - (entry kind, propNotUnderlying18, required-amount-to-reduce-the-debt)\\r\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                     The assets should be swapped to get following result proportions:\\r\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\r\\n  ///                     Pass type(uint).max to read proportions from the pool.\\r\\n  uint constant public PLAN_REPAY_SWAP_REPAY = 1;\\r\\n\\r\\n  /// @notice Swap leftovers to required proportions, don't repay any debts\\r\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\r\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n  ///                     The assets should be swapped to get following result proportions:\\r\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\r\\n  ///                     Pass type(uint).max to read proportions from the pool.\\r\\n  uint constant public PLAN_SWAP_ONLY = 2;\\r\\n//endregion ------------------------------------------------ Constants\\r\\n\\r\\n//region ------------------------------------------------ Data types\\r\\n  /// @notice Set of parameters required to liquidation through aggregators\\r\\n  struct SwapRepayPlanParams {\\r\\n    ITetuConverter converter;\\r\\n    ITetuLiquidator liquidator;\\r\\n\\r\\n    /// @notice Assets used by depositor stored as following way: [underlying, not-underlying]\\r\\n    address[] tokens;\\r\\n\\r\\n    /// @notice Liquidation thresholds for the {tokens}\\r\\n    uint[] liquidationThresholds;\\r\\n\\r\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\r\\n    uint[] prices;\\r\\n    /// @notice 10**decimal for the assets\\r\\n    uint[] decs;\\r\\n\\r\\n    /// @notice Amounts that will be received on balance before execution of the plan.\\r\\n    uint[] balanceAdditions;\\r\\n\\r\\n    /// @notice Plan kind extracted from entry data, see {IterationPlanKinds}\\r\\n    uint planKind;\\r\\n\\r\\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\r\\n    ///         The leftovers should be swapped to get following result proportions of the assets:\\r\\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\r\\n    uint propNotUnderlying18;\\r\\n\\r\\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\\r\\n    bool usePoolProportions;\\r\\n\\r\\n    /// @notice \\\"required-amount-to-reduce-debt\\\" in the case of REPAY-SWAP-REPAY, zero in other cases\\r\\n    uint entryDataParam;\\r\\n  }\\r\\n\\r\\n  struct GetIterationPlanLocal {\\r\\n    /// @notice Underlying balance\\r\\n    uint assetBalance;\\r\\n    /// @notice Not-underlying balance\\r\\n    uint tokenBalance;\\r\\n\\r\\n    uint totalDebt;\\r\\n    uint totalCollateral;\\r\\n\\r\\n    uint debtReverse;\\r\\n    uint collateralReverse;\\r\\n\\r\\n    address asset;\\r\\n    address token;\\r\\n\\r\\n    bool swapLeftoversNeeded;\\r\\n  }\\r\\n\\r\\n  struct EstimateSwapAmountForRepaySwapRepayLocal {\\r\\n    uint x;\\r\\n    uint y;\\r\\n    uint bA1;\\r\\n    uint bB1;\\r\\n    uint alpha;\\r\\n    uint swapRatio;\\r\\n    uint aB3;\\r\\n    uint cA1;\\r\\n    uint cB1;\\r\\n    uint aA2;\\r\\n    uint aB2;\\r\\n  }\\r\\n//endregion ------------------------------------------------ Data types\\r\\n\\r\\n  /// @notice Decode entryData, extract first uint - entry kind\\r\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\r\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\r\\n    if (entryData_.length == 0) {\\r\\n      return PLAN_SWAP_REPAY;\\r\\n    }\\r\\n    return abi.decode(entryData_, (uint));\\r\\n  }\\r\\n\\r\\n//region ------------------------------------------------ Build plan\\r\\n  /// @notice Build plan to make single iteration of withdraw according to the selected plan\\r\\n  ///         The goal is to withdraw {requestedAmount} and receive {asset}:{token} in proper proportions on the balance\\r\\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\\r\\n  /// @param tokens List of the pool tokens. One of them is underlying and one of then is not-underlying\\r\\n  ///               that we are going to withdraw\\r\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}. If amount is less then the threshold,\\r\\n  ///                              we cannot swap it.\\r\\n  /// @param prices Prices of the {tokens}, decimals 18, [$/token]\\r\\n  /// @param decs 10**decimal for each token of the {tokens}\\r\\n  /// @param balanceAdditions Amounts that will be added to the current balances of the {tokens}\\r\\n  ///                         to the moment of the plan execution\\r\\n  /// @param packedData Several values packed to fixed-size array (to reduce number of params)\\r\\n  ///    0: usePoolProportions: 1 - read proportions from the pool through IPoolProportionsProvider(this)\\r\\n  ///    1: planKind: selected plan, one of PLAN_XXX\\r\\n  ///    2: propNotUnderlying18: value of not-underlying proportion [0..1e18] if usePoolProportions == 0\\r\\n  ///    3: requestedBalance: total amount that should be withdrawn, it can be type(uint).max\\r\\n  ///    4: indexAsset: index of the underlying in {tokens} array\\r\\n  ///    5: indexToken: index of the token in {tokens} array. We are going to withdraw the token and convert it to the asset\\r\\n  ///    6: entryDataParam: required-amount-to-reduce-debt in REPAY-SWAP-REPAY case; zero in other cases\\r\\n  function buildIterationPlan(\\r\\n    address[2] memory converterLiquidator,\\r\\n    address[] memory tokens,\\r\\n    uint[] memory liquidationThresholds,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    uint[] memory balanceAdditions,\\r\\n    uint[7] memory packedData\\r\\n  ) external returns (\\r\\n    uint indexToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexToRepayPlus1\\r\\n  ) {\\r\\n    return _buildIterationPlan(\\r\\n      SwapRepayPlanParams({\\r\\n        converter: ITetuConverter(converterLiquidator[0]),\\r\\n        liquidator: ITetuLiquidator(converterLiquidator[1]),\\r\\n        tokens: tokens,\\r\\n        liquidationThresholds: liquidationThresholds,\\r\\n        prices: prices,\\r\\n        decs: decs,\\r\\n        balanceAdditions: balanceAdditions,\\r\\n        planKind: packedData[1],\\r\\n        propNotUnderlying18: packedData[2],\\r\\n        usePoolProportions: packedData[0] != 0,\\r\\n        entryDataParam: packedData[6]\\r\\n      }),\\r\\n      packedData[3],\\r\\n      packedData[4],\\r\\n      packedData[5]\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Generate plan for next withdraw iteration. We can do only one swap per iteration.\\r\\n  ///         In general, we cam make 1) single swap (direct or reverse) and 2) repay\\r\\n  ///         Swap is required to get required repay-amount OR to swap leftovers on final iteration.\\r\\n  /// @param requestedBalance Amount of underlying that we need to have on balance after executing the plan.\\r\\n  /// @param indexAsset Index of the underlying in {p.tokens} array\\r\\n  /// @param indexToken Index of the not-underlying in {p.tokens} array\\r\\n  /// @return indexToSwapPlus1 1-based index of the token to be swapped; 0 means swap is not required.\\r\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap\\r\\n  /// @return indexToRepayPlus1 1-based index of the token that should be used to repay borrow in converter.\\r\\n  ///                            0 - no repay is required - it means that this is a last step with swapping leftovers.\\r\\n  function _buildIterationPlan(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint requestedBalance,\\r\\n    uint indexAsset,\\r\\n    uint indexToken\\r\\n  ) internal returns (\\r\\n    uint indexToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexToRepayPlus1\\r\\n  ) {\\r\\n    GetIterationPlanLocal memory v;\\r\\n    v.asset = p.tokens[indexAsset];\\r\\n    v.token = p.tokens[indexToken];\\r\\n\\r\\n    v.assetBalance = IERC20(v.asset).balanceOf(address(this)) + p.balanceAdditions[indexAsset];\\r\\n    v.tokenBalance = IERC20(p.tokens[indexToken]).balanceOf(address(this)) + p.balanceAdditions[indexToken];\\r\\n\\r\\n    if (p.planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\\r\\n      v.swapLeftoversNeeded = true;\\r\\n    } else {\\r\\n      uint requestedAmount = requestedBalance == type(uint).max\\r\\n        ? type(uint).max\\r\\n        : AppLib.sub0(requestedBalance, v.assetBalance);\\r\\n\\r\\n      if (requestedAmount < p.liquidationThresholds[indexAsset]) {\\r\\n        // we don't need to repay any debts anymore, but we should swap leftovers\\r\\n        v.swapLeftoversNeeded = true;\\r\\n      } else {\\r\\n        // we need to increase balance on the following amount: requestedAmount - v.balance;\\r\\n        // we can have two possible borrows:\\r\\n        // 1) direct (p.tokens[INDEX_ASSET] => tokens[i]) and 2) reverse (tokens[i] => p.tokens[INDEX_ASSET])\\r\\n        // normally we can have only one of them, not both..\\r\\n        // but better to take into account possibility to have two debts simultaneously\\r\\n\\r\\n        // reverse debt\\r\\n        (v.debtReverse, v.collateralReverse) = p.converter.getDebtAmountCurrent(address(this), v.token, v.asset, true);\\r\\n        if (v.debtReverse < AppLib.DUST_AMOUNT_TOKENS) { // there is reverse debt or the reverse debt is dust debt\\r\\n          // direct debt\\r\\n          (v.totalDebt, v.totalCollateral) = p.converter.getDebtAmountCurrent(address(this), v.asset, v.token, true);\\r\\n\\r\\n          if (v.totalDebt < AppLib.DUST_AMOUNT_TOKENS) { // there is direct debt or the direct debt is dust debt\\r\\n            // This is final iteration - we need to swap leftovers and get amounts on balance in proper proportions.\\r\\n            // The leftovers should be swapped to get following result proportions of the assets:\\r\\n            //      underlying : not-underlying === 1e18 - propNotUnderlying18 : propNotUnderlying18\\r\\n            v.swapLeftoversNeeded = true;\\r\\n          } else {\\r\\n            // repay direct debt\\r\\n            if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\r\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\r\\n                p,\\r\\n                [v.assetBalance, v.tokenBalance],\\r\\n                [indexAsset, indexToken],\\r\\n                p.propNotUnderlying18,\\r\\n                [v.totalCollateral, v.totalDebt],\\r\\n                p.entryDataParam\\r\\n              );\\r\\n            } else {\\r\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\r\\n                requestedAmount,\\r\\n                p,\\r\\n                v.totalCollateral,\\r\\n                v.totalDebt,\\r\\n                indexAsset,\\r\\n                indexToken,\\r\\n                v.assetBalance,\\r\\n                v.tokenBalance\\r\\n              );\\r\\n            }\\r\\n          }\\r\\n        } else {\\r\\n          // repay reverse debt\\r\\n          if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\r\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\r\\n              p,\\r\\n              [v.tokenBalance, v.assetBalance],\\r\\n              [indexToken, indexAsset],\\r\\n              1e18 - p.propNotUnderlying18,\\r\\n              [v.collateralReverse, v.debtReverse],\\r\\n              p.entryDataParam\\r\\n            );\\r\\n          } else {\\r\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\r\\n              requestedAmount == type(uint).max\\r\\n                ? type(uint).max\\r\\n                : requestedAmount * p.prices[indexAsset] * p.decs[indexToken] / p.prices[indexToken] / p.decs[indexAsset],\\r\\n              p,\\r\\n              v.collateralReverse,\\r\\n              v.debtReverse,\\r\\n              indexToken,\\r\\n              indexAsset,\\r\\n              v.tokenBalance,\\r\\n              v.assetBalance\\r\\n            );\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (v.swapLeftoversNeeded) {\\r\\n      (indexToSwapPlus1, amountToSwap) = _buildPlanForLeftovers(p, v.assetBalance, v.tokenBalance, indexAsset, indexToken, p.propNotUnderlying18);\\r\\n    }\\r\\n\\r\\n    return (indexToSwapPlus1, amountToSwap, indexToRepayPlus1);\\r\\n  }\\r\\n\\r\\n  /// @notice Repay B, get collateral A, then swap A => B, [make one more repay B] => get A:B in required proportions\\r\\n  /// @param balancesAB [balanceA, balanceB]\\r\\n  /// @param idxAB [indexA, indexB]\\r\\n  /// @param totalAB [totalCollateralA, totalBorrowB]\\r\\n  /// @param requiredAmountToReduceDebt If not zero: we are going to make repay-swap-repay to reduce total\\r\\n  ///        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce\\r\\n  ///        the amount of debt by the given amount.\\r\\n  function _buildPlanRepaySwapRepay(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint[2] memory balancesAB,\\r\\n    uint[2] memory idxAB,\\r\\n    uint propB,\\r\\n    uint[2] memory totalAB,\\r\\n    uint requiredAmountToReduceDebt\\r\\n  ) internal returns (\\r\\n    uint indexToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexToRepayPlus1\\r\\n  ) {\\r\\n    // use all available tokenB to repay debt and receive as much as possible tokenA\\r\\n    uint amountToRepay = Math.min(balancesAB[1], totalAB[1]);\\r\\n\\r\\n    uint collateralAmount;\\r\\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\r\\n      uint swappedAmountOut;\\r\\n      //\\r\\n      (collateralAmount, swappedAmountOut) = p.converter.quoteRepay(address(this), p.tokens[idxAB[0]], p.tokens[idxAB[1]], amountToRepay);\\r\\n      if (collateralAmount > swappedAmountOut) { // SCB-789\\r\\n        collateralAmount -= swappedAmountOut;\\r\\n      }\\r\\n    } else {\\r\\n      amountToRepay = 0;\\r\\n    }\\r\\n\\r\\n    // swap A to B: full or partial\\r\\n    // SCB-876: swap B to A are also possible here\\r\\n    bool swapB;\\r\\n    (amountToSwap, swapB) = estimateSwapAmountForRepaySwapRepay(\\r\\n      p,\\r\\n      [balancesAB[0], balancesAB[1]],\\r\\n      [idxAB[0], idxAB[1]],\\r\\n      propB,\\r\\n      totalAB[0],\\r\\n      totalAB[1],\\r\\n      collateralAmount,\\r\\n      amountToRepay\\r\\n    );\\r\\n\\r\\n    if (swapB) {\\r\\n      // edge case: swap B => A; for simplicity, we don't take into account requiredAmountToReduceDebt\\r\\n      return (idxAB[1] + 1, amountToSwap, idxAB[1] + 1);\\r\\n    } else {\\r\\n      // swap A => B\\r\\n      if (requiredAmountToReduceDebt != 0) {\\r\\n        // probably it worth to increase amount to swap?\\r\\n        uint requiredAmountToSwap = requiredAmountToReduceDebt * p.prices[idxAB[1]] * p.decs[idxAB[0]] / p.prices[idxAB[0]] / p.decs[idxAB[1]];\\r\\n        amountToSwap = Math.max(amountToSwap, requiredAmountToSwap);\\r\\n        amountToSwap = Math.min(amountToSwap, balancesAB[0] + collateralAmount);\\r\\n      }\\r\\n\\r\\n      return (idxAB[0] + 1, amountToSwap, idxAB[1] + 1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Estimate swap amount for iteration \\\"repay-swap-repay\\\"\\r\\n  ///         The iteration should give us amounts of assets in required proportions.\\r\\n  ///         There are two cases here: full swap and partial swap. Second repay is not required if the swap is partial.\\r\\n  /// @param collateralA Estimated value of collateral A received after repay balanceB\\r\\n  /// @return amountToSwap Amount to be swapped\\r\\n  /// @return swapB False: swap A => B; True: swap B => A\\r\\n  function estimateSwapAmountForRepaySwapRepay(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint[2] memory balancesAB,\\r\\n    uint[2] memory indicesAB,\\r\\n    uint propB,\\r\\n    uint totalCollateralA,\\r\\n    uint totalBorrowB,\\r\\n    uint collateralA,\\r\\n    uint amountToRepayB\\r\\n  ) internal pure returns(uint amountToSwap, bool swapB) {\\r\\n    // N - number of the state\\r\\n    // bAN, bBN - balances of A and B; aAN, aBN - amounts of A and B; cAN, cBN - collateral/borrow amounts of A/B\\r\\n    // alpha ~ cAN/cBN - estimated ratio of collateral/borrow\\r\\n    // s = swap ratio, aA is swapped to aB, so aA = s * aB\\r\\n    // g = split ratio, bA1 is divided on two parts: bA1 * gamma, bA1 * (1 - gamma). First part is swapped.\\r\\n    // X = proportion of A, Y = proportion of B\\r\\n\\r\\n    // Formulas\\r\\n    // aB3 = (x * bB2 - y * bA2) / (alpha * y + x)\\r\\n    // gamma = (y * bA1 - x * bB1) / (bA1 * (x * s + y))\\r\\n\\r\\n    // There are following stages:\\r\\n    // 0. init (we have at least not zero amount of B and not zero debt of B)\\r\\n    // 1. repay 1 (repay all available amount of B OR all available debt)\\r\\n    // 2. swap (swap A fully or partially to B)\\r\\n    // 3. repay 2 (optional: we need this stage if full swap produces amount of B that is <= available debt)\\r\\n    // 4. final (we have assets in right proportion on the balance)\\r\\n    EstimateSwapAmountForRepaySwapRepayLocal memory v;\\r\\n    v.x = 1e18 - propB;\\r\\n    v.y = propB;\\r\\n// 1. repay 1\\r\\n    // convert amounts A, amounts B to cost A, cost B in USD\\r\\n    v.bA1 = (balancesAB[0] + collateralA) * p.prices[indicesAB[0]] / p.decs[indicesAB[0]];\\r\\n    v.bB1 = (balancesAB[1] - amountToRepayB) * p.prices[indicesAB[1]] / p.decs[indicesAB[1]];\\r\\n    v.cB1 = (totalBorrowB - amountToRepayB) * p.prices[indicesAB[1]] / p.decs[indicesAB[1]];\\r\\n    v.alpha = 1e18 * totalCollateralA * p.prices[indicesAB[0]] * p.decs[indicesAB[1]]\\r\\n      / p.decs[indicesAB[0]] / p.prices[indicesAB[1]] / totalBorrowB; // (!) approx estimation\\r\\n\\r\\n// 2. full swap\\r\\n    v.aA2 = v.bA1;\\r\\n    v.swapRatio = 1e18; // we assume swap ratio 1:1\\r\\n\\r\\n// 3. repay 2\\r\\n    // aB3 = (x * bB2 - Y * bA2) / (alpha * y + x)\\r\\n    v.aB3 = (\\r\\n      v.x * (v.bB1 + v.aA2 * v.swapRatio / 1e18)    // bB2 = v.bB1 + v.aA2 * v.s / 1e18\\r\\n      - v.y * (v.bA1 - v.aA2)                       // bA2 = v.bA1 - v.aA2;\\r\\n    ) / (v.y * v.alpha / 1e18 + v.x);\\r\\n\\r\\n    if (v.aB3 > v.cB1) {\\r\\n      if (v.y * v.bA1 >= v.x * v.bB1) {\\r\\n        // there is not enough debt to make second repay\\r\\n        // we need to make partial swap and receive assets in right proportions in result\\r\\n        // v.gamma = 1e18 * (v.y * v.bA1 - v.x * v.bB1) / (v.bA1 * (v.x * v.s / 1e18 + v.y));\\r\\n        v.aA2 = (v.y * v.bA1 - v.x * v.bB1) / (v.x * v.swapRatio / 1e18 + v.y);\\r\\n      } else {\\r\\n        // scb-867: edge case, we need to make swap B => A\\r\\n        v.aB2 = (v.x * v.bB1 - v.y * v.bA1) / (v.x * v.swapRatio / 1e18 + v.y) /* * 1e18 / v.swapRatio */ ;\\r\\n        swapB = true;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return swapB\\r\\n      ? (v.aB2 * p.decs[indicesAB[1]] / p.prices[indicesAB[1]], true) // edge case: swap B => A\\r\\n      : (v.aA2 * p.decs[indicesAB[0]] / p.prices[indicesAB[0]], false); // normal case: swap A => B\\r\\n  }\\r\\n\\r\\n  /// @notice Prepare a plan to swap leftovers to required proportion\\r\\n  /// @param balanceA Balance of token A, i.e. underlying\\r\\n  /// @param balanceB Balance of token B, i.e. not-underlying\\r\\n  /// @param indexA Index of the token A, i.e. underlying, in {p.prices} and {p.decs}\\r\\n  /// @param indexB Index of the token B, i.e. not-underlying, in {p.prices} and {p.decs}\\r\\n  /// @param propB Required proportion of TokenB [0..1e18]. Proportion of token A is (1e18-propB)\\r\\n  /// @return indexTokenToSwapPlus1 Index of the token to be swapped. 0 - no swap is required\\r\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap is required\\r\\n  function _buildPlanForLeftovers(\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint balanceA,\\r\\n    uint balanceB,\\r\\n    uint indexA,\\r\\n    uint indexB,\\r\\n    uint propB\\r\\n  ) internal pure returns (\\r\\n    uint indexTokenToSwapPlus1,\\r\\n    uint amountToSwap\\r\\n  ) {\\r\\n    (uint targetA, uint targetB) = _getTargetAmounts(p.prices, p.decs, balanceA, balanceB, propB, indexA, indexB);\\r\\n    if (balanceA < targetA) {\\r\\n      // we need to swap not-underlying to underlying\\r\\n      if (balanceB - targetB > p.liquidationThresholds[indexB]) {\\r\\n        amountToSwap = balanceB - targetB;\\r\\n        indexTokenToSwapPlus1 = indexB + 1;\\r\\n      }\\r\\n    } else {\\r\\n      // we need to swap underlying to not-underlying\\r\\n      if (balanceA - targetA > p.liquidationThresholds[indexA]) {\\r\\n        amountToSwap = balanceA - targetA;\\r\\n        indexTokenToSwapPlus1 = indexA + 1;\\r\\n      }\\r\\n    }\\r\\n    return (indexTokenToSwapPlus1, amountToSwap);\\r\\n  }\\r\\n\\r\\n  /// @notice Prepare a plan to swap some amount of collateral to get required repay-amount and make repaying\\r\\n  ///         1) Sell collateral-asset to get missed amount-to-repay 2) make repay and get more collateral back\\r\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount.\\r\\n  /// @param totalCollateral Total amount of collateral used in the borrow\\r\\n  /// @param totalDebt Total amount of debt that should be repaid to receive {totalCollateral}\\r\\n  /// @param indexCollateral Index of collateral asset in {p.prices}, {p.decs}\\r\\n  /// @param indexBorrow Index of borrow asset in {p.prices}, {p.decs}\\r\\n  /// @param balanceCollateral Current balance of the collateral asset\\r\\n  /// @param balanceBorrow Current balance of the borrowed asset\\r\\n  /// @param indexTokenToSwapPlus1 1-based index of the token to be swapped. Swap of amount of collateral asset can be required\\r\\n  ///                              to receive missed amount-to-repay. 0 - no swap is required\\r\\n  /// @param amountToSwap Amount to be swapped. 0 - no swap is required\\r\\n  /// @param indexRepayTokenPlus1 1-based index of the token to be repaied. 0 - no repaying is required\\r\\n  function _buildPlanForSellAndRepay(\\r\\n    uint requestedAmount,\\r\\n    SwapRepayPlanParams memory p,\\r\\n    uint totalCollateral,\\r\\n    uint totalDebt,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrow,\\r\\n    uint balanceCollateral,\\r\\n    uint balanceBorrow\\r\\n  ) internal pure returns (\\r\\n    uint indexTokenToSwapPlus1,\\r\\n    uint amountToSwap,\\r\\n    uint indexRepayTokenPlus1\\r\\n  ) {\\r\\n    // what amount of collateral we should sell to get required amount-to-pay to pay the debt\\r\\n    uint toSell = _getAmountToSell(\\r\\n      requestedAmount,\\r\\n      totalDebt,\\r\\n      totalCollateral,\\r\\n      p.prices,\\r\\n      p.decs,\\r\\n      indexCollateral,\\r\\n      indexBorrow,\\r\\n      balanceBorrow\\r\\n    );\\r\\n\\r\\n    // convert {toSell} amount of underlying to token\\r\\n    if (toSell != 0 && balanceCollateral != 0) {\\r\\n      toSell = Math.min(toSell, balanceCollateral);\\r\\n      uint threshold = p.liquidationThresholds[indexCollateral];\\r\\n      if (toSell > threshold) {\\r\\n        amountToSwap = toSell;\\r\\n        indexTokenToSwapPlus1 = indexCollateral + 1;\\r\\n      } else {\\r\\n        // we need to sell amount less than the threshold, it's not allowed\\r\\n        // but it's dangerous to just ignore the selling because there is a chance to have error 35\\r\\n        // (There is a debt $3.29, we make repay $3.27 => error 35)\\r\\n        // it would be safer to sell a bit more amount if it's possible\\r\\n        if (balanceCollateral >= threshold + 1) {\\r\\n          amountToSwap = threshold + 1;\\r\\n          indexTokenToSwapPlus1 = indexCollateral + 1;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return (indexTokenToSwapPlus1, amountToSwap, indexBorrow + 1);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculate what balances of underlying and not-underlying we need to fit {propNotUnderlying18}\\r\\n  /// @param prices Prices of underlying and not underlying\\r\\n  /// @param decs 10**decimals for underlying and not underlying\\r\\n  /// @param assetBalance Current balance of underlying\\r\\n  /// @param tokenBalance Current balance of not-underlying\\r\\n  /// @param propNotUnderlying18 Required proportion of not-underlying [0..1e18]\\r\\n  ///                            Proportion of underlying would be (1e18 - propNotUnderlying18)\\r\\n  /// @param targetAssets What result balance of underlying is required to fit to required proportions\\r\\n  /// @param targetTokens What result balance of not-underlying is required to fit to required proportions\\r\\n  function _getTargetAmounts(\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    uint assetBalance,\\r\\n    uint tokenBalance,\\r\\n    uint propNotUnderlying18,\\r\\n    uint indexAsset,\\r\\n    uint indexToken\\r\\n  ) internal pure returns (\\r\\n    uint targetAssets,\\r\\n    uint targetTokens\\r\\n  ) {\\r\\n    uint costAssets = assetBalance * prices[indexAsset] / decs[indexAsset];\\r\\n    uint costTokens = tokenBalance * prices[indexToken] / decs[indexToken];\\r\\n    targetTokens = propNotUnderlying18 == 0\\r\\n      ? 0\\r\\n      : ((costAssets + costTokens) * propNotUnderlying18 / 1e18);\\r\\n    targetAssets = ((costAssets + costTokens) - targetTokens) * decs[indexAsset] / prices[indexAsset];\\r\\n    targetTokens = targetTokens * decs[indexToken] / prices[indexToken];\\r\\n  }\\r\\n\\r\\n  /// @notice What amount of collateral should be sold to pay the debt and receive {requestedAmount}\\r\\n  /// @dev It doesn't allow to sell more than the amount of total debt in the borrow\\r\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount\\r\\n  /// @param totalDebt Total debt of the borrow in terms of borrow asset\\r\\n  /// @param totalCollateral Total collateral of the borrow in terms of collateral asset\\r\\n  /// @param prices Cost of $1 in terms of the asset, decimals 18\\r\\n  /// @param decs 10**decimals for each asset\\r\\n  /// @param indexCollateral Index of the collateral asset in {prices} and {decs}\\r\\n  /// @param indexBorrowAsset Index of the borrow asset in {prices} and {decs}\\r\\n  /// @param balanceBorrowAsset Available balance of the borrow asset, it will be used to cover the debt\\r\\n  /// @return amountOut Amount of collateral-asset that should be sold\\r\\n  function _getAmountToSell(\\r\\n    uint requestedAmount,\\r\\n    uint totalDebt,\\r\\n    uint totalCollateral,\\r\\n    uint[] memory prices,\\r\\n    uint[] memory decs,\\r\\n    uint indexCollateral,\\r\\n    uint indexBorrowAsset,\\r\\n    uint balanceBorrowAsset\\r\\n  ) internal pure returns (\\r\\n    uint amountOut\\r\\n  ) {\\r\\n    if (totalDebt != 0) {\\r\\n      if (balanceBorrowAsset != 0) {\\r\\n        // there is some borrow asset on balance\\r\\n        // it will be used to cover the debt\\r\\n        // let's reduce the size of totalDebt/Collateral to exclude balanceBorrowAsset\\r\\n        uint sub = Math.min(balanceBorrowAsset, totalDebt);\\r\\n        totalCollateral -= totalCollateral * sub / totalDebt;\\r\\n        totalDebt -= sub;\\r\\n      }\\r\\n\\r\\n      // for definiteness: usdc - collateral asset, dai - borrow asset\\r\\n      // Pc = price of the USDC, Pb = price of the DAI, alpha = Pc / Pb [DAI / USDC]\\r\\n      // S [USDC] - amount to sell, R [DAI] = alpha * S - amount to repay\\r\\n      // After repaying R we get: alpha * S * C / R\\r\\n      // Balance should be increased on: requestedAmount = alpha * S * C / R - S\\r\\n      // So, we should sell: S = requestedAmount / (alpha * C / R - 1))\\r\\n      // We can lost some amount on liquidation of S => R, so we need to use some gap = {GAP_AMOUNT_TO_SELL}\\r\\n      // Same formula: S * h = S + requestedAmount, where h = health factor => s = requestedAmount / (h - 1)\\r\\n      // h = alpha * C / R\\r\\n      uint alpha18 = prices[indexCollateral] * decs[indexBorrowAsset] * 1e18\\r\\n        / prices[indexBorrowAsset] / decs[indexCollateral];\\r\\n\\r\\n      // if totalCollateral is zero (liquidation happens) we will have zero amount (the debt shouldn't be paid)\\r\\n      amountOut = totalDebt != 0 && alpha18 * totalCollateral / totalDebt > 1e18\\r\\n        ? Math.min(requestedAmount, totalCollateral) * 1e18 / (alpha18 * totalCollateral / totalDebt - 1e18)\\r\\n        : 0;\\r\\n\\r\\n      if (amountOut != 0) {\\r\\n        // we shouldn't try to sell amount greater than amount of totalDebt in terms of collateral asset\\r\\n        // but we always asks +1% because liquidation results can be different a bit from expected\\r\\n        amountOut = (AppLib.GAP_CONVERSION + AppLib.DENOMINATOR) * Math.min(amountOut, totalDebt * 1e18 / alpha18) / AppLib.DENOMINATOR;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return amountOut;\\r\\n  }\\r\\n//endregion ------------------------------------------------ Build plan\\r\\n}\\r\\n\",\"keccak256\":\"0xbe94b0f9bfed116a0dd0fe1c212203b58d40d9a81416116d63fd07669f708596\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80631b3c6d411461005b5780632be98102146100765780636221aa71146100b1578063c153a359146100b9575b600080fd5b610063600081565b6040519081526020015b60405180910390f35b81801561008257600080fd5b50610096610091366004611874565b6100c1565b6040805193845260208401929092529082015260600161006d565b610063600181565b610063600281565b60008060006101b66040518061016001604052808c6000600281106100e8576100e861196a565b60200201516001600160a01b031681526020018c60016002811061010e5761010e61196a565b60200201516001600160a01b031681526020018b81526020018a8152602001898152602001888152602001878152602001866001600781106101525761015261196a565b602002015181526020018660026007811061016f5761016f61196a565b602002015181526020018660006007811061018c5761018c61196a565b602090810291909101511515825260c08801519101526060860151608087015160a08801516101c9565b9250925092509750975097945050505050565b600080600061023160405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b876040015186815181106102475761024761196a565b60209081029190910101516001600160a01b031660c082015260408801518051869081106102775761027761196a565b60209081029190910101516001600160a01b031660e082015260c08801518051879081106102a7576102a761196a565b602090810291909101015160c08201516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103209190611980565b61032a91906119af565b815260c08801518051869081106103435761034361196a565b6020026020010151886040015186815181106103615761036161196a565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d59190611980565b6103df91906119af565b602082015260e0880151600119016103fe576001610100820152610793565b6000600019881461041c576104178883600001516107ca565b610420565b6000195b9050886060015187815181106104385761043861196a565b6020026020010151811015610454576001610100830152610791565b885160e083015160c084015160405163dd27ede760e01b81523060048201526001600160a01b03928316602482015290821660448201526001606482015291169063dd27ede79060840160408051808303816000875af11580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906119c2565b60a0840152608083018190526064111561063d57885160c083015160e084015160405163dd27ede760e01b81523060048201526001600160a01b03928316602482015290821660448201526001606482015291169063dd27ede79060840160408051808303816000875af115801561055c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058091906119c2565b606084015260408301819052606411156105a1576001610100830152610791565b60018960e001510361061d5761061189604051806040016040528085600001518152602001856020015181525060405180604001604052808b81526020018a8152508c610100015160405180604001604052808860600151815260200188604001518152508e61014001516107ed565b91965094509250610791565b610611818a846060015185604001518b8b88600001518960200151610b13565b60018960e00151036106b7576040805180820182526020808501518252845181830152825180840190935288835282018990526101008b0151610611928c929161068f90670de0b6b3a76400006119e6565b60405180604001604052808860a00151815260200188608001518152508e61014001516107ed565b6107896000198214610769578960a0015188815181106106d9576106d961196a565b60200260200101518a6080015188815181106106f7576106f761196a565b60200260200101518b60a0015189815181106107155761071561196a565b60200260200101518c608001518b815181106107335761073361196a565b60200260200101518561074691906119f9565b61075091906119f9565b61075a9190611a10565b6107649190611a10565b61076d565b6000195b8a8460a0015185608001518a8c88602001518960000151610b13565b919650945092505b505b806101000151156107bf576107b9888260000151836020015189898d6101000151610be3565b90945092505b509450945094915050565b60008183116107da5760006107e4565b6107e482846119e6565b90505b92915050565b600080808061080a89600160200201518760016020020151610cb2565b9050600060648210610925578a5160408c01518a5181516000936001600160a01b03169263667df24992309281106108445761084461196a565b60200260200101518f604001518e6001600281106108645761086461196a565b6020020151815181106108795761087961196a565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291831660248301529190911660448201526064810186905260840160408051808303816000875af11580156108e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090591906119c2565b90925090508082111561091f5761091c81836119e6565b91505b5061092a565b600091505b600061099f8c60405180604001604052808e60006002811061094e5761094e61196a565b602002015181526020018e60016002811061096b5761096b61196a565b60209081029190910151909152604080518082019091528e5181528e820151818301528c51918d015190918e91888a610cc8565b909550905080156109de578960015b60200201516109be9060016119af565b60208b015186906109d09060016119af565b955095509550505050610b07565b8615610aff5760a08c01516000908b6001602002015181518110610a0457610a0461196a565b60200260200101518d608001518c600060028110610a2457610a2461196a565b602002015181518110610a3957610a3961196a565b60200260200101518e60a001518d600060028110610a5957610a5961196a565b602002015181518110610a6e57610a6e61196a565b60200260200101518f608001518e600160028110610a8e57610a8e61196a565b602002015181518110610aa357610aa361196a565b60200260200101518b610ab691906119f9565b610ac091906119f9565b610aca9190611a10565b610ad49190611a10565b9050610ae086826112dd565b8c51909650610afb908790610af69086906119af565b610cb2565b9550505b8960006109ae565b96509650969350505050565b600080600080610b318c8a8c8e608001518f60a001518d8d8c6112ec565b90508015801590610b4157508515155b15610bc157610b508187610cb2565b905060008b606001518981518110610b6a57610b6a61196a565b6020026020010151905080821115610b9357819350886001610b8c91906119af565b9450610bbf565b610b9e8160016119af565b8710610bbf57610baf8160016119af565b9350610bbc8960016119af565b94505b505b8383610bce8960016119af565b93509350935050985098509895505050505050565b600080600080610c008a608001518b60a001518b8b898c8c6114b7565b9150915081891015610c5b5789606001518681518110610c2257610c2261196a565b60200260200101518189610c3691906119e6565b1115610c5657610c4681896119e6565b9250610c538660016119af565b93505b610ca5565b89606001518781518110610c7157610c7161196a565b6020026020010151828a610c8591906119e6565b1115610ca557610c95828a6119e6565b9250610ca28760016119af565b93505b5050965096945050505050565b6000818310610cc157816107e4565b5090919050565b600080610d2860405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b610d3a88670de0b6b3a76400006119e6565b81526020810188905260a08b0151895181518110610d5a57610d5a61196a565b60200260200101518b608001518a600060028110610d7a57610d7a61196a565b602002015181518110610d8f57610d8f61196a565b6020026020010151868c600060028110610dab57610dab61196a565b6020020151610dba91906119af565b610dc491906119f9565b610dce9190611a10565b604082015260a08b015160208a015181518110610ded57610ded61196a565b60200260200101518b608001518a600160028110610e0d57610e0d61196a565b602002015181518110610e2257610e2261196a565b6020026020010151858c600160028110610e3e57610e3e61196a565b6020020151610e4d91906119e6565b610e5791906119f9565b610e619190611a10565b606082015260a08b015160208a015181518110610e8057610e8061196a565b60200260200101518b608001518a600160028110610ea057610ea061196a565b602002015181518110610eb557610eb561196a565b60200260200101518588610ec991906119e6565b610ed391906119f9565b610edd9190611a10565b61010082015260808b015186908a6001602002015181518110610f0257610f0261196a565b60200260200101518c60a001518b600060028110610f2257610f2261196a565b602002015181518110610f3757610f3761196a565b60200260200101518d60a001518c600160028110610f5757610f5761196a565b602002015181518110610f6c57610f6c61196a565b60200260200101518e608001518d600060028110610f8c57610f8c61196a565b602002015181518110610fa157610fa161196a565b60200260200101518b670de0b6b3a7640000610fbd91906119f9565b610fc791906119f9565b610fd191906119f9565b610fdb9190611a10565b610fe59190611a10565b610fef9190611a10565b608082018190526040820151610120830152670de0b6b3a764000060a08301819052825160208401519092611023916119f9565b61102d9190611a10565b61103791906119af565b816101200151826040015161104c91906119e6565b826020015161105b91906119f9565b670de0b6b3a76400008360a0015184610120015161107991906119f9565b6110839190611a10565b836060015161109291906119af565b835161109e91906119f9565b6110a891906119e6565b6110b29190611a10565b60c0820181905261010082015110156111dd57606081015181516110d691906119f9565b816040015182602001516110ea91906119f9565b1061116657602081015160a08201518251670de0b6b3a76400009161110e916119f9565b6111189190611a10565b61112291906119af565b6060820151825161113391906119f9565b8260400151836020015161114791906119f9565b61115191906119e6565b61115b9190611a10565b6101208201526111dd565b602081015160a08201518251670de0b6b3a764000091611185916119f9565b61118f9190611a10565b61119991906119af565b816040015182602001516111ad91906119f9565b606083015183516111be91906119f9565b6111c891906119e6565b6111d29190611a10565b610140820152600191505b816112575760808b01518951815181106111f9576111f961196a565b60200260200101518b60a001518a6000600281106112195761121961196a565b60200201518151811061122e5761122e61196a565b602002602001015182610120015161124691906119f9565b6112509190611a10565b60006112cb565b60808b015160208a0151815181106112715761127161196a565b60200260200101518b60a001518a6001600281106112915761129161196a565b6020020151815181106112a6576112a661196a565b60200260200101518261014001516112be91906119f9565b6112c89190611a10565b60015b92509250509850989650505050505050565b6000818311610cc157816107e4565b600087156114ab578115611337576000611306838a610cb2565b905088611313828a6119f9565b61131d9190611a10565b61132790896119e6565b9750611333818a6119e6565b9850505b600085858151811061134b5761134b61196a565b60200260200101518785815181106113655761136561196a565b602002602001015187868151811061137f5761137f61196a565b60200260200101518988815181106113995761139961196a565b60200260200101516113ab91906119f9565b6113bd90670de0b6b3a76400006119f9565b6113c79190611a10565b6113d19190611a10565b905088158015906113fd5750670de0b6b3a7640000896113f18a846119f9565b6113fb9190611a10565b115b611408576000611456565b670de0b6b3a76400008961141c8a846119f9565b6114269190611a10565b61143091906119e6565b61143a8b8a610cb2565b61144c90670de0b6b3a76400006119f9565b6114569190611a10565b915081156114a957620186a061148383836114798d670de0b6b3a76400006119f9565b610af69190611a10565b611492620186a06103e86119af565b61149c91906119f9565b6114a69190611a10565b91505b505b98975050505050505050565b60008060008885815181106114ce576114ce61196a565b60200260200101518a86815181106114e8576114e861196a565b6020026020010151896114fb91906119f9565b6115059190611a10565b9050600089858151811061151b5761151b61196a565b60200260200101518b86815181106115355761153561196a565b60200260200101518961154891906119f9565b6115529190611a10565b9050861561158757670de0b6b3a76400008761156e83856119af565b61157891906119f9565b6115829190611a10565b61158a565b60005b92508a868151811061159e5761159e61196a565b60200260200101518a87815181106115b8576115b861196a565b60200260200101518483856115cd91906119af565b6115d791906119e6565b6115e191906119f9565b6115eb9190611a10565b93508a85815181106115ff576115ff61196a565b60200260200101518a86815181106116195761161961196a565b60200260200101518461162c91906119f9565b6116369190611a10565b9250505097509795505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561168557611685611646565b604052919050565b80356001600160a01b03811681146116a457600080fd5b919050565b600082601f8301126116ba57600080fd5b6040516040810181811067ffffffffffffffff821117156116dd576116dd611646565b80604052508060408401858111156116f457600080fd5b845b81811015611715576117078161168d565b8352602092830192016116f6565b509195945050505050565b600067ffffffffffffffff82111561173a5761173a611646565b5060051b60200190565b600082601f83011261175557600080fd5b8135602061176a61176583611720565b61165c565b82815260059290921b8401810191818101908684111561178957600080fd5b8286015b848110156117ab5761179e8161168d565b835291830191830161178d565b509695505050505050565b600082601f8301126117c757600080fd5b813560206117d761176583611720565b82815260059290921b840181019181810190868411156117f657600080fd5b8286015b848110156117ab57803583529183019183016117fa565b600082601f83011261182257600080fd5b60405160e0810181811067ffffffffffffffff8211171561184557611845611646565b6040528060e084018581111561185a57600080fd5b845b8181101561171557803583526020928301920161185c565b60008060008060008060006101c0888a03121561189057600080fd5b61189a89896116a9565b9650604088013567ffffffffffffffff808211156118b757600080fd5b6118c38b838c01611744565b975060608a01359150808211156118d957600080fd5b6118e58b838c016117b6565b965060808a01359150808211156118fb57600080fd5b6119078b838c016117b6565b955060a08a013591508082111561191d57600080fd5b6119298b838c016117b6565b945060c08a013591508082111561193f57600080fd5b5061194c8a828b016117b6565b92505061195c8960e08a01611811565b905092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561199257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107e7576107e7611999565b600080604083850312156119d557600080fd5b505080516020909101519092909150565b818103818111156107e7576107e7611999565b80820281158282048414176107e7576107e7611999565b600082611a2d57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220e33b10677f7f59e8a79e988c3b563f6f88944f6270b5e80badec209594cbd21764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buildIterationPlan(address[2],address[],uint256[],uint256[],uint256[],uint256[],uint256[7])": {
        "params": {
          "balanceAdditions": "Amounts that will be added to the current balances of the {tokens}                         to the moment of the plan execution",
          "converterLiquidator": "[TetuConverter, TetuLiquidator]",
          "decs": "10**decimal for each token of the {tokens}",
          "liquidationThresholds": "Liquidation thresholds for the {tokens}. If amount is less then the threshold,                              we cannot swap it.",
          "packedData": "Several values packed to fixed-size array (to reduce number of params)    0: usePoolProportions: 1 - read proportions from the pool through IPoolProportionsProvider(this)    1: planKind: selected plan, one of PLAN_XXX    2: propNotUnderlying18: value of not-underlying proportion [0..1e18] if usePoolProportions == 0    3: requestedBalance: total amount that should be withdrawn, it can be type(uint).max    4: indexAsset: index of the underlying in {tokens} array    5: indexToken: index of the token in {tokens} array. We are going to withdraw the token and convert it to the asset    6: entryDataParam: required-amount-to-reduce-debt in REPAY-SWAP-REPAY case; zero in other cases",
          "prices": "Prices of the {tokens}, decimals 18, [$/token]",
          "tokens": "List of the pool tokens. One of them is underlying and one of then is not-underlying               that we are going to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PLAN_REPAY_SWAP_REPAY()": {
        "notice": "Repay available amount-to-repay, swap all or part of collateral to borrowed-asset, make one repay if needed.         Swap + second repay tries to make asset balances to proportions required by the pool.         Proportions are read from pool through IPoolProportionsProvider(this) and re-read after swapping.         This mode is intended i.e. for rebalancing debts using single iteration.         (uint256, uint256, uint256) - (entry kind, propNotUnderlying18, required-amount-to-reduce-the-debt) propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                     The assets should be swapped to get following result proportions:                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)                     Pass type(uint).max to read proportions from the pool."
      },
      "PLAN_SWAP_ONLY()": {
        "notice": "Swap leftovers to required proportions, don't repay any debts         (uint256, uint256) - (entry kind, propNotUnderlying18) propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                     The assets should be swapped to get following result proportions:                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)                     Pass type(uint).max to read proportions from the pool."
      },
      "PLAN_SWAP_REPAY()": {
        "notice": "Swap collateral asset to get required amount-to-repay, then repay and get more collateral back.         It tries to minimizes count of repay-operations.         If there are no debts, swap leftovers to get required proportions of the asset.         This mode is intended i.e. for \"withdraw all\"         (uint256, uint256) - (entry kind, propNotUnderlying18) propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                     The assets should be swapped to get following result proportions:                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)                     Pass type(uint).max to read proportions from the pool."
      },
      "buildIterationPlan(address[2],address[],uint256[],uint256[],uint256[],uint256[],uint256[7])": {
        "notice": "Build plan to make single iteration of withdraw according to the selected plan         The goal is to withdraw {requestedAmount} and receive {asset}:{token} in proper proportions on the balance"
      }
    },
    "notice": "Support of withdraw iteration plans",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}