{
  "address": "0xEBc10a9491d1d868d20875c77cd59945382E195E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRepay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returnedAssetAmountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returnedBorrowAmountOut",
          "type": "uint256"
        }
      ],
      "name": "ClosePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spentAmountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmountOut",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "converter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "OpenPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReturnAssetToConverter",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITetuConverter",
          "name": "converter",
          "type": "ITetuConverter"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getAssetPriceFromConverter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x75d76273870a961fd67cc86f25f3a77e7d2c3b82f7d71f78f075c906315a8b2b",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0xEBc10a9491d1d868d20875c77cd59945382E195E",
    "transactionIndex": 54,
    "gasUsed": "4810457",
    "logsBloom": "0x
    "blockHash": "0x667400f5384d59bc13bde7d2b6c43f2e087c56171206ca6f74f1923e7585d1b4",
    "transactionHash": "0x75d76273870a961fd67cc86f25f3a77e7d2c3b82f7d71f78f075c906315a8b2b",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 41909460,
        "transactionHash": "0x75d76273870a961fd67cc86f25f3a77e7d2c3b82f7d71f78f075c906315a8b2b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bbbbb8c4364ec2ce52c59d2ed3e56f307e529a94",
          "0x000000000000000000000000c35649ae99be820c7b200a0add09b96d7032d232"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000211cba3c976060000000000000000000000000000000000000000000000000c8b6a116bc0dcbcaf00000000000000000000000000000000000000000000019e0f3ceb4caf78476300000000000000000000000000000000000000000000000c895845c7f766b6af00000000000000000000000000000000000000000000019e114eb6f078ee4d63",
        "logIndex": 243,
        "blockHash": "0x667400f5384d59bc13bde7d2b6c43f2e087c56171206ca6f74f1923e7585d1b4"
      }
    ],
    "blockNumber": 41909460,
    "cumulativeGasUsed": "13565801",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "70b8d8149359f1f5ee24b2fc01ec0f79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedAssetAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedBorrowAmountOut\",\"type\":\"uint256\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmountOut\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReturnAssetToConverter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ITetuConverter\",\"name\":\"converter\",\"type\":\"ITetuConverter\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAssetPriceFromConverter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calcInvestedAssets(address[],uint256[],uint256,ITetuConverter)\":{\"details\":\"This is writable function because we need to update current balances in the internal protocols.\",\"returns\":{\"amountOut\":\"Invested asset amount under control (in terms of {asset})\"}},\"closePosition(ITetuConverter,address,address,uint256)\":{\"params\":{\"amountToRepay\":\"Amount to repay in terms of {borrowAsset}\"},\"returns\":{\"repaidAmountOut\":\"Amount that was actually repaid\",\"returnedAssetAmountOut\":\"Amount of collateral received back after repaying\"}},\"closePositionsToGetAmount(ITetuConverter,ITetuLiquidator,uint256,mapping(address => uint256) storage,uint256,address[])\":{\"details\":\"We assume here that this function is called before closing any positions in the current block\",\"params\":{\"liquidationThresholds\":\"Min allowed amounts-out for liquidations\",\"requestedAmount\":\"Requested amount of main asset that should be added to the current balance\"},\"returns\":{\"expectedAmount\":\"Main asset amount expected to be received on balance after all conversions and swaps\"}},\"convertAfterWithdraw(ITetuConverter,ITetuLiquidator,uint256,uint256,address[],uint256[])\":{\"params\":{\"amountsToConvert\":\"Amounts to convert, the order of asset is same as in {tokens}\",\"indexAsset\":\"Index of the main asset in {tokens}\",\"liquidationThreshold\":\"Min allowed amount of main asset to be liquidated in {liquidator}\",\"tokens\":\"Tokens received from {_depositorPoolAssets}\"},\"returns\":{\"collateralOut\":\"Total amount of main asset returned after closing positions\",\"repaidAmountsOut\":\"What amounts were spent in exchange of the {collateralOut}\"}},\"getTokenAmounts(ITetuConverter,address[],uint256,uint256[],uint256)\":{\"params\":{\"collaterals_\":\"Amounts of main asset that can be used as collateral to borrow {tokens_}\",\"thresholdMainAsset_\":\"Value of liquidation threshold for the main (collateral) asset\",\"tokens_\":\"Tokens received from {_depositorPoolAssets}\"},\"returns\":{\"tokenAmountsOut\":\"Amounts available for deposit\"}},\"liquidate(ITetuConverter,ITetuLiquidator,address,address,uint256,uint256,uint256)\":{\"params\":{\"receivedAmountOut\":\"Amount of {tokenOut_} has been returned by the liquidator\",\"spentAmountIn\":\"Amount of {tokenIn} has been consumed by the liquidator\"}},\"openPosition(ITetuConverter,bytes,address,address,uint256,uint256)\":{\"params\":{\"amountIn_\":\"Meaning depends on {entryData_}.\",\"entryData_\":\"Encoded entry kind and additional params if necessary (set of params depends on the kind)                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\"}},\"postWithdrawActions(ITetuConverter,address[],uint256,uint256[],uint256,uint256,uint256[],uint256[])\":{\"params\":{\"amountsToConvert\":\"Amounts of {tokens} to be converted, they are located on the balance before withdraw\",\"withdrawnAmounts\":\"Amounts of {tokens} that were withdrew from the pool\"}},\"recycle(ITetuConverter,address,uint256,address[],ITetuLiquidator,mapping(address => uint256) storage,address[],uint256[])\":{\"params\":{\"liquidationThresholds\":\"Liquidation thresholds for rewards tokens\",\"rewardAmounts\":\"Amounts of {rewardTokens_}; we assume, there are no zero amounts here\",\"rewardTokens\":\"Full list of reward tokens received from tetuConverter and depositor\",\"tokens\":\"tokens received from {_depositorPoolAssets}\"},\"returns\":{\"amountsToForward\":\"Amounts of {rewardTokens} to be sent to forwarder, zero amounts are allowed here\"}},\"swapToGivenAmountAndSendToConverter(uint256,uint256,address[],address,address,address,mapping(address => uint256) storage)\":{\"params\":{\"amountOut\":\"Amount of the main asset requested by converter\",\"asset\":\"Main asset or underlying (it can be different from tokens[indexTheAsset])\",\"indexTheAsset\":\"Index of the asset required by converter in the {tokens}\"},\"returns\":{\"amountOut\":\"Amount of the main asset sent to converter\"}}},\"stateVariables\":{\"DEFAULT_LIQUIDATION_THRESHOLD\":{\"details\":\"Absolute value for any token\"},\"GAP_AMOUNT_TO_SELL\":{\"details\":\"1% gap in calculation of amount-to-sell in {closePositionsToGetAmount}\"}},\"version\":1},\"userdoc\":{\"events\":{\"ClosePosition(address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Some borrow(s) was/were repaid\"},\"Liquidation(address,address,uint256,uint256,uint256)\":{\"notice\":\"A liquidation was made\"},\"OpenPosition(address,address,uint256,address,uint256,address)\":{\"notice\":\"A borrow was made\"}},\"kind\":\"user\",\"methods\":{\"calcInvestedAssets(address[],uint256[],uint256,ITetuConverter)\":{\"notice\":\"Calculate amount we will receive when we withdraw all from pool\"},\"closePosition(ITetuConverter,address,address,uint256)\":{\"notice\":\"Close the given position, pay {amountToRepay}, return collateral amount in result\"},\"closePositionsToGetAmount(ITetuConverter,ITetuLiquidator,uint256,mapping(address => uint256) storage,uint256,address[])\":{\"notice\":\"Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\"},\"convertAfterWithdraw(ITetuConverter,ITetuLiquidator,uint256,uint256,address[],uint256[])\":{\"notice\":\"Convert {amountsToConvert_} (available on balance) to the main asset         Swap leftovers if any.         Result amount can be less than requested one, we don't try to close any other debts here\"},\"getTokenAmounts(ITetuConverter,address[],uint256,uint256[],uint256)\":{\"notice\":\"Make borrow and save amounts of tokens available for deposit to tokenAmounts\"},\"liquidate(ITetuConverter,ITetuLiquidator,address,address,uint256,uint256,uint256)\":{\"notice\":\"Make liquidation if estimated amountOut exceeds the given threshold\"},\"openPosition(ITetuConverter,bytes,address,address,uint256,uint256)\":{\"notice\":\"Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}         Max possible collateral should be approved before calling of this function.\"},\"postWithdrawActions(ITetuConverter,address[],uint256,uint256[],uint256,uint256,uint256[],uint256[])\":{\"notice\":\"Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}\"},\"postWithdrawActionsEmpty(ITetuConverter,address[],uint256,uint256[])\":{\"notice\":\"return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}\"},\"recycle(ITetuConverter,address,uint256,address[],ITetuLiquidator,mapping(address => uint256) storage,address[],uint256[])\":{\"notice\":\"Recycle the amounts: liquidate a part of each amount, send the other part to the forwarder. We have two kinds of rewards: 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets) 2) any other rewards All received rewards are immediately \\\"recycled\\\". It means, they are divided on two parts: to forwarder, to compound   Compound-part of Rewards-2 can be liquidated   Compound part of Rewards-1 should be just added to baseAmounts All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/ConverterStrategyBaseLib.sol\":\"ConverterStrategyBaseLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n\\n  // --- DEPENDENCY ADDRESSES\\n  function governance() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function liquidator() external view returns (address);\\n\\n  function forwarder() external view returns (address);\\n\\n  function investFund() external view returns (address);\\n\\n  function veDistributor() external view returns (address);\\n\\n  function platformVoter() external view returns (address);\\n\\n  // --- VAULTS\\n\\n  function vaults(uint id) external view returns (address);\\n\\n  function vaultsList() external view returns (address[] memory);\\n\\n  function vaultsListLength() external view returns (uint);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  // --- restrictions\\n\\n  function isOperator(address _adr) external view returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0x86716b8a4775605c31b8bb9f90f8f4a18b709ff4435182f3a148803368060a8c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IForwarder {\\n\\n  function tetu() external view returns (address);\\n  function tetuThreshold() external view returns (uint);\\n\\n  function tokenPerDestinationLength(address destination) external view returns (uint);\\n\\n  function tokenPerDestinationAt(address destination, uint i) external view returns (address);\\n\\n  function amountPerDestination(address token, address destination) external view returns (uint amount);\\n\\n  function registerIncome(\\n    address[] memory tokens,\\n    uint[] memory amounts,\\n    address vault,\\n    bool isDistribute\\n  ) external;\\n\\n  function distributeAll(address destination) external;\\n\\n  function distribute(address token) external;\\n\\n  function setInvestFundRatio(uint value) external;\\n\\n  function setGaugesRatio(uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x687c497fc034e8d64bca403bac1bf4cd7bd1f107df414c2657325c1b3ab92822\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISplitter {\\n\\n  function init(address controller_, address _asset, address _vault) external;\\n\\n  // *************** ACTIONS **************\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint256 amount) external;\\n\\n  function doHardWork() external;\\n\\n  function investAll() external;\\n\\n  // **************** VIEWS ***************\\n\\n  function asset() external view returns (address);\\n\\n  function vault() external view returns (address);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function isHardWorking() external view returns (bool);\\n\\n  function strategies(uint i) external view returns (address);\\n\\n  function strategiesLength() external view returns (uint);\\n\\n  function HARDWORK_DELAY() external view returns(uint);\\n\\n  function lastHardWorks(address strategy) external view returns(uint);\\n\\n  function pausedStrategies(address strategy) external view returns(bool);\\n\\n  function pauseInvesting(address strategy) external;\\n\\n  function continueInvesting(address strategy, uint apr) external;\\n\\n}\\n\",\"keccak256\":\"0xe17d9fdda78f8cda2b199640a129876efc9532be4542cbd1eacdbdeb5c3ca1e4\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0xd5fe6f3ab750cc2d23f573597db5607c701e74c39e13c20c07a921a26c6d5012\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVaultInsurance.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ISplitter.sol\\\";\\n\\ninterface ITetuVaultV2 {\\n\\n  function splitter() external view returns (ISplitter);\\n\\n  function insurance() external view returns (IVaultInsurance);\\n\\n  function depositFee() external view returns (uint);\\n\\n  function withdrawFee() external view returns (uint);\\n\\n  function init(\\n    address controller_,\\n    IERC20 _asset,\\n    string memory _name,\\n    string memory _symbol,\\n    address _gauge,\\n    uint _buffer\\n  ) external;\\n\\n  function setSplitter(address _splitter) external;\\n\\n  function coverLoss(uint amount) external;\\n\\n  function initInsurance(IVaultInsurance _insurance) external;\\n\\n}\\n\",\"keccak256\":\"0x9e77a10b32a52f826d28d17c420f776fd289e5e4f925ec87f7177a1ce224a412\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IVaultInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVaultInsurance {\\n\\n  function init(address _vault, address _asset) external;\\n\\n  function vault() external view returns (address);\\n\\n  function asset() external view returns (address);\\n\\n  function transferToVault(uint amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6461572763b1f6decec1dee9d2ffe8ca152369bdc68255ec083cb3da3ce507a1\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\",\"keccak256\":\"0x2c5be0f4a60126b08e20f40586958ec1b76a27b69406c4b0db19e9dc6f771cfc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\n\\nlibrary StrategyLib {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Denominator for fee calculation.\\n  uint internal constant FEE_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant WRONG_VALUE = \\\"SB: Wrong value\\\";\\n\\n  // *************************************************************\\n  //                     RESTRICTIONS\\n  // *************************************************************\\n\\n  /// @dev Restrict access only for operators\\n  function onlyOperators(address controller) external view {\\n    require(IController(controller).isOperator(msg.sender), DENIED);\\n  }\\n\\n  /// @dev Restrict access only for governance\\n  function onlyGovernance(address controller) external view {\\n    require(IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for platform voter\\n  function onlyPlatformVoter(address controller) external view {\\n    require(IController(controller).platformVoter() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for splitter\\n  function onlySplitter(address splitter) external view {\\n    require(splitter == msg.sender, DENIED);\\n  }\\n\\n  // *************************************************************\\n  //                       HELPERS\\n  // *************************************************************\\n\\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\\n  ///         Revert if the amount is different from expected too much (high price impact)\\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\\n  /// @param assetPrice Price of the asset, decimals 18\\n  /// @return balance Current asset balance of the strategy\\n  function checkWithdrawImpact(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) external view returns (uint balance) {\\n    balance = IERC20(_asset).balanceOf(address(this));\\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\\n\\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x2aabb98bea07ad1f50905b09628a934bcfe703a4b03fcca0255e4604afc1ea2e\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../libs/AppDataTypes.sol\\\";\\n\\ninterface IConverter {\\n  function getConversionKind() external pure returns (\\n    AppDataTypes.ConversionKind\\n  );\\n}\\n\",\"keccak256\":\"0x284b9816c313548ab0c97bef391eea91b501a6720cf2ba27b4fe6da2d9a76667\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Keep and provide addresses of all application contracts\\ninterface IConverterController {\\n  function governance() external view returns (address);\\n\\n  // ********************* Health factor explanation  ****************\\n  // For example, a landing platform has: liquidity threshold = 0.85, LTV=0.8, LTV / LT = 1.0625\\n  // For collateral $100 we can borrow $80. A liquidation happens if the cost of collateral will reduce below $85.\\n  // We set min-health-factor = 1.1, target-health-factor = 1.3\\n  // For collateral 100 we will borrow 100/1.3 = 76.92\\n  //\\n  // Collateral value   100        77            assume that collateral value is decreased at 100/77=1.3 times\\n  // Collateral * LT    85         65.45\\n  // Borrow value       65.38      65.38         but borrow value is the same as before\\n  // Health factor      1.3        1.001         liquidation almost happens here (!)\\n  //\\n  /// So, if we have target factor 1.3, it means, that if collateral amount will decreases at 1.3 times\\n  // and the borrow value won't change at the same time, the liquidation happens at that point.\\n  // Min health factor marks the point at which a rebalancing must be made asap.\\n  // *****************************************************************\\n\\n  /// @notice min allowed health factor with decimals 2, must be >= 1e2\\n  function minHealthFactor2() external view returns (uint16);\\n  function setMinHealthFactor2(uint16 value_) external;\\n\\n  /// @notice target health factor with decimals 2\\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\\n  ///      or additional borrow and restore the health factor to the given target value\\n  function targetHealthFactor2() external view returns (uint16);\\n  function setTargetHealthFactor2(uint16 value_) external;\\n\\n  /// @notice max allowed health factor with decimals 2\\n  /// @dev For future versions, currently max health factor is not used\\n  function maxHealthFactor2() external view returns (uint16);\\n  /// @dev For future versions, currently max health factor is not used\\n  function setMaxHealthFactor2(uint16 value_) external;\\n\\n  /// @notice get current value of blocks per day. The value is set manually at first and can be auto-updated later\\n  function blocksPerDay() external view returns (uint);\\n  /// @notice set value of blocks per day manually and enable/disable auto update of this value\\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external;\\n  /// @notice Check if it's time to call updateBlocksPerDay()\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view returns (bool);\\n  /// @notice Recalculate blocksPerDay value\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function updateBlocksPerDay(uint periodInSeconds_) external;\\n\\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\\n  function paused() external view returns (bool);\\n\\n  /// @notice the given user is whitelisted and is allowed to make borrow/swap using TetuConverter\\n  function isWhitelisted(address user_) external view returns (bool);\\n\\n  /// @notice The size of the gap by which the debt should be increased upon repayment\\n  ///         Such gaps are required by AAVE pool adapters to workaround dust tokens problem\\n  ///         and be able to make full repayment.\\n  /// @dev Debt gap is applied as following: toPay = debt * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR\\n  function debtGap() external view returns (uint);\\n\\n  //-----------------------------------------------------\\n  ///        Core application contracts\\n  //-----------------------------------------------------\\n\\n  function tetuConverter() external view returns (address);\\n  function borrowManager() external view returns (address);\\n  function debtMonitor() external view returns (address);\\n  function tetuLiquidator() external view returns (address);\\n  function swapManager() external view returns (address);\\n  function priceOracle() external view returns (address);\\n\\n  //-----------------------------------------------------\\n  ///        External contracts\\n  //-----------------------------------------------------\\n  /// @notice A keeper to control health and efficiency of the borrows\\n  function keeper() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0xc66d61c417a7136cdd6d872d73865d26c23c70a249c9ad917821748a3259042a\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IPoolAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IConverter.sol\\\";\\n\\n/// @notice Allow to borrow given asset from the given pool using given asset as collateral.\\n///         There is Template-Pool-Adapter contract for each platform (AAVE, HF, etc).\\n/// @dev Terms: \\\"pool adapter\\\" is an instance of \\\"converter\\\" created using minimal-proxy-pattern\\ninterface IPoolAdapter is IConverter {\\n  /// @notice Update all interests, recalculate borrowed amount;\\n  ///         After this call, getStatus will return exact amount-to-repay\\n  function updateStatus() external;\\n\\n  /// @notice Supply collateral to the pool and borrow specified amount\\n  /// @dev No re-balancing here; Collateral amount must be approved to the pool adapter before the call of this function\\n  /// @param collateralAmount_ Amount of collateral, must be approved to the pool adapter before the call of borrow()\\n  /// @param borrowAmount_ Amount that should be borrowed in result\\n  /// @param receiver_ Receiver of the borrowed amount\\n  /// @return borrowedAmountOut Result borrowed amount sent to the {receiver_}\\n  function borrow(uint collateralAmount_, uint borrowAmount_, address receiver_) external returns (\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Borrow additional amount {borrowAmount_} using exist collateral and send it to {receiver_}\\n  /// @dev Re-balance: too big health factor => target health factor\\n  /// @return resultHealthFactor18 Result health factor after borrow\\n  /// @return borrowedAmountOut Exact amount sent to the borrower\\n  function borrowToRebalance(uint borrowAmount_, address receiver_) external returns (\\n    uint resultHealthFactor18,\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Repay borrowed amount, return collateral to the user\\n  /// @param amountToRepay_ Exact amount of borrow asset that should be repaid\\n  ///                       The amount should be approved for the pool adapter before the call of repay()\\n  /// @param closePosition_ true to pay full borrowed amount\\n  /// @param receiver_ Receiver of withdrawn collateral\\n  /// @return collateralAmountOut Amount of collateral asset sent to the {receiver_}\\n  function repay(uint amountToRepay_, address receiver_, bool closePosition_) external returns (\\n    uint collateralAmountOut\\n  );\\n\\n  /// @notice Repay with rebalancing. Send amount of collateral/borrow asset to the pool adapter\\n  ///         to recover the health factor to target state.\\n  /// @dev It's not allowed to close position here (pay full debt) because no collateral will be returned.\\n  /// @param amount_ Exact amount of asset that is transferred to the balance of the pool adapter.\\n  ///                It can be amount of collateral asset or borrow asset depended on {isCollateral_}\\n  ///                It must be stronger less then total borrow debt.\\n  ///                The amount should be approved for the pool adapter before the call.\\n  /// @param isCollateral_ true/false indicates that {amount_} is the amount of collateral/borrow asset\\n  /// @return resultHealthFactor18 Result health factor after repay, decimals 18\\n  function repayToRebalance(uint amount_, bool isCollateral_) external returns (\\n    uint resultHealthFactor18\\n  );\\n\\n  /// @return originConverter Address of original PoolAdapter contract that was cloned to make the instance of the pool adapter\\n  /// @return user User of the pool adapter\\n  /// @return collateralAsset Asset used as collateral by the pool adapter\\n  /// @return borrowAsset Asset borrowed by the pool adapter\\n  function getConfig() external view returns (\\n    address originConverter,\\n    address user,\\n    address collateralAsset,\\n    address borrowAsset\\n  );\\n\\n  /// @notice Get current status of the borrow position\\n  /// @dev It returns STORED status. To get current status it's necessary to call updateStatus\\n  ///      at first to update interest and recalculate status.\\n  /// @return collateralAmount Total amount of provided collateral, collateral currency\\n  /// @return amountToPay Total amount of borrowed debt in [borrow asset]. 0 - for closed borrow positions.\\n  /// @return healthFactor18 Current health factor, decimals 18\\n  /// @return opened The position is opened (there is not empty collateral/borrow balance)\\n  /// @return collateralAmountLiquidated How much collateral was liquidated\\n  /// @return debtGapRequired When paying off a debt, the amount of the payment must be greater\\n  ///         than the amount of the debt by a small amount (debt gap, see IConverterController.debtGap)\\n  ///         getStatus returns it (same as getConfig) to exclude additional call of getConfig by the caller\\n  function getStatus() external view returns (\\n    uint collateralAmount,\\n    uint amountToPay,\\n    uint healthFactor18,\\n    bool opened,\\n    uint collateralAmountLiquidated,\\n    bool debtGapRequired\\n  );\\n\\n  /// @notice Check if any reward tokens exist on the balance of the pool adapter, transfer reward tokens to {receiver_}\\n  /// @return rewardToken Address of the transferred reward token\\n  /// @return amount Amount of the transferred reward token\\n  function claimRewards(address receiver_) external returns (address rewardToken, uint amount);\\n\\n  /// @notice If we paid {amountToRepay_}, how much collateral would we receive?\\n  function getCollateralAmountToReturn(uint amountToRepay_, bool closePosition_) external view returns (uint);\\n\\n//  /// @notice Compute current APR value, decimals 18\\n//  /// @return Interest * 1e18, i.e. 2.25e18 means APR=2.25%\\n//  function getAPR18() external view returns (int);\\n}\\n\",\"keccak256\":\"0x6cc87bf41a8be0c6924f833f1d1ecb14bdc9bf7076bf84351300e0a3697d660c\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPriceOracle {\\n  /// @notice Return asset price in USD, decimals 18\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb11e653eb4d6d7c41f29ee1e3e498253cfa8df1aec3ff31ab527009b79bdb705\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IConverterController.sol\\\";\\n\\n/// @notice Main contract of the TetuConverter application\\n/// @dev Borrower (strategy) makes all operations via this contract only.\\ninterface ITetuConverter {\\n\\n  function controller() external view returns (IConverterController);\\n\\n  /// @notice Find possible borrow strategies and provide \\\"cost of money\\\" as interest for the period for each strategy\\n  ///         Result arrays of the strategy are ordered in ascending order of APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converters Array of available converters ordered in ascending order of APR.\\n  ///                    Each item contains a result contract that should be used for conversion; it supports IConverter\\n  ///                    This address should be passed to borrow-function during conversion.\\n  ///                    The length of array is always equal to the count of available lending platforms.\\n  ///                    Last items in array can contain zero addresses (it means they are not used)\\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\\n  /// @return amountToBorrowsOut Amounts that should be borrowed\\n  ///                            This amount is not zero if corresponded converter is not zero.\\n  /// @return aprs18 Interests on the use of {amountIn_} during the given period, decimals 18\\n  function findBorrowStrategies(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external view returns (\\n    address[] memory converters,\\n    uint[] memory collateralAmountsOut,\\n    uint[] memory amountToBorrowsOut,\\n    int[] memory aprs18\\n  );\\n\\n  /// @notice Find best swap strategy and provide \\\"cost of money\\\" as interest for the period\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow()\\n  /// @return sourceAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                         It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return targetAmountOut Result amount of {targetToken_} after swap\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findSwapStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_\\n  ) external returns (\\n    address converter,\\n    uint sourceAmountOut,\\n    uint targetAmountOut,\\n    int apr18\\n  );\\n\\n  /// @notice Find best conversion strategy (swap or borrow) and provide \\\"cost of money\\\" as interest for the period.\\n  ///         It calls both findBorrowStrategy and findSwapStrategy and selects a best strategy.\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR for swapping.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow().\\n  /// @return collateralAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                             It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return amountToBorrowOut Result amount of {targetToken_} after conversion\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findConversionStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external returns (\\n    address converter,\\n    uint collateralAmountOut,\\n    uint amountToBorrowOut,\\n    int apr18\\n  );\\n\\n  /// @notice Convert {collateralAmount_} to {amountToBorrow_} using {converter_}\\n  ///         Target amount will be transferred to {receiver_}. No re-balancing here.\\n  /// @dev Transferring of {collateralAmount_} by TetuConverter-contract must be approved by the caller before the call\\n  ///      Only whitelisted users are allowed to make borrows\\n  /// @param converter_ A converter received from findBestConversionStrategy.\\n  /// @param collateralAmount_ Amount of {collateralAsset_} to be converted.\\n  ///                          This amount must be approved to TetuConverter before the call.\\n  /// @param amountToBorrow_ Amount of {borrowAsset_} to be borrowed and sent to {receiver_}\\n  /// @param receiver_ A receiver of borrowed amount\\n  /// @return borrowedAmountOut Exact borrowed amount transferred to {receiver_}\\n  function borrow(\\n    address converter_,\\n    address collateralAsset_,\\n    uint collateralAmount_,\\n    address borrowAsset_,\\n    uint amountToBorrow_,\\n    address receiver_\\n  ) external returns (\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Full or partial repay of the borrow\\n  /// @dev A user should transfer {amountToRepay_} to TetuConverter before calling repay()\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        You can know exact total amount of debt using {getStatusCurrent}.\\n  ///        if the amount exceed total amount of the debt:\\n  ///           - the debt will be fully repaid\\n  ///           - remain amount will be swapped from {borrowAsset_} to {collateralAsset_}\\n  ///        This amount should be calculated with taking into account possible debt gap,\\n  ///        You should call getDebtAmountCurrent(debtGap = true) to get this amount.\\n  /// @param receiver_ A receiver of the collateral that will be withdrawn after the repay\\n  ///                  The remained amount of borrow asset will be returned to the {receiver_} too\\n  /// @return collateralAmountOut Exact collateral amount transferred to {collateralReceiver_}\\n  ///         If TetuConverter is not able to make the swap, it reverts\\n  /// @return returnedBorrowAmountOut A part of amount-to-repay that wasn't converted to collateral asset\\n  ///                                 because of any reasons (i.e. there is no available conversion strategy)\\n  ///                                 This amount is returned back to the collateralReceiver_\\n  /// @return swappedLeftoverCollateralOut A part of collateral received through the swapping\\n  /// @return swappedLeftoverBorrowOut A part of amountToRepay_ that was swapped\\n  function repay(\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_,\\n    address receiver_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint returnedBorrowAmountOut,\\n    uint swappedLeftoverCollateralOut,\\n    uint swappedLeftoverBorrowOut\\n  );\\n\\n  /// @notice Estimate result amount after making full or partial repay\\n  /// @dev It works in exactly same way as repay() but don't make actual repay\\n  ///      Anyway, the function is write, not read-only, because it makes updateStatus()\\n  /// @param user_ user whose amount-to-repay will be calculated\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        This amount should be calculated without possible debt gap.\\n  ///        In this way it's differ from {repay}\\n  /// @return collateralAmountOut Total collateral amount to be returned after repay in exchange of {amountToRepay_}\\n  /// @return swappedAmountOut A part of {collateralAmountOut} that were received by direct swap\\n  function quoteRepay(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint swappedAmountOut\\n  );\\n\\n  /// @notice Update status in all opened positions\\n  ///         After this call getDebtAmount will be able to return exact amount to repay\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountCurrent(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice Total amount of borrow tokens that should be repaid to close the borrow completely.\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountStored(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external view returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice User needs to redeem some collateral amount. Calculate an amount of borrow token that should be repaid\\n  /// @param user_ user whose debts will be returned\\n  /// @param collateralAmountRequired_ Amount of collateral required by the user\\n  /// @return borrowAssetAmount Borrowed amount that should be repaid to receive back following amount of collateral:\\n  ///                           amountToReceive = collateralAmountRequired_ - unobtainableCollateralAssetAmount\\n  /// @return unobtainableCollateralAssetAmount A part of collateral that cannot be obtained in any case\\n  ///                                           even if all borrowed amount will be returned.\\n  ///                                           If this amount is not 0, you ask to get too much collateral.\\n  function estimateRepay(\\n    address user_,\\n    address collateralAsset_,\\n    uint collateralAmountRequired_,\\n    address borrowAsset_\\n  ) external view returns (\\n    uint borrowAssetAmount,\\n    uint unobtainableCollateralAssetAmount\\n  );\\n\\n  /// @notice Transfer all reward tokens to {receiver_}\\n  /// @return rewardTokensOut What tokens were transferred. Same reward token can appear in the array several times\\n  /// @return amountsOut Amounts of transferred rewards, the array is synced with {rewardTokens}\\n  function claimRewards(address receiver_) external returns (\\n    address[] memory rewardTokensOut,\\n    uint[] memory amountsOut\\n  );\\n\\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\\n  ///                      It should be transferred on balance of the TetuConverter before the function call\\n  /// @param receiver_ Result amount will be sent to this address\\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\\n  function safeLiquidate(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    address receiver_,\\n    uint priceImpactToleranceSource_,\\n    uint priceImpactToleranceTarget_\\n  ) external returns (\\n    uint amountOut\\n  );\\n\\n  /// @notice Check if {amountOut_} is too different from the value calculated directly using price oracle prices\\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\\n  function isConversionValid(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    uint amountOut_,\\n    uint priceImpactTolerance_\\n  ) external view returns (bool);\\n\\n  /// @notice Close given borrow and return collateral back to the user, governance only\\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\\n  /// @param poolAdapter_ The pool adapter that represents the borrow\\n  /// @param closePosition Close position after repay\\n  ///        Usually it should be true, because the function always tries to repay all debt\\n  ///        false can be used if user doesn't have enough amount to pay full debt\\n  ///              and we are trying to pay \\\"as much as possible\\\"\\n  /// @return collateralAmountOut Amount of collateral returned to the user\\n  /// @return repaidAmountOut Amount of borrow asset repaid to the lending platform\\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external returns (\\n    uint collateralAmountOut,\\n    uint repaidAmountOut\\n  );\\n\\n  /// @notice Get active borrows of the user with given collateral/borrowToken\\n  /// @dev Simple access to IDebtMonitor.getPositions\\n  /// @return poolAdaptersOut The instances of IPoolAdapter\\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\\n    address[] memory poolAdaptersOut\\n  );\\n}\\n\",\"keccak256\":\"0x1611b469ae1c1b25db2d4295307b3e2adb3b2290f9a3e6c4d68f5c04853dc776\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/libs/AppDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary AppDataTypes {\\n\\n  enum ConversionKind {\\n    UNKNOWN_0,\\n    SWAP_1,\\n    BORROW_2\\n  }\\n\\n  /// @notice Input params for BorrowManager.findPool (stack is too deep problem)\\n  struct InputConversionParams {\\n    address collateralAsset;\\n    address borrowAsset;\\n\\n    /// @notice Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n    ///         See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n    bytes entryData;\\n\\n    uint countBlocks;\\n\\n    /// @notice The meaning depends on entryData kind, see EntryKinds library for details.\\n    ///         For entry kind = 0: Amount of {sourceToken} to be converted to {targetToken}\\n    ///         For entry kind = 1: Available amount of {sourceToken}\\n    ///         For entry kind = 2: Amount of {targetToken} that should be received after conversion\\n    uint amountIn;\\n  }\\n\\n  /// @notice Explain how a given lending pool can make specified conversion\\n  struct ConversionPlan {\\n    /// @notice Template adapter contract that implements required strategy.\\n    address converter;\\n    /// @notice Current collateral factor [0..1e18], where 1e18 is corresponded to CF=1\\n    uint liquidationThreshold18;\\n\\n    /// @notice Amount to borrow in terms of borrow asset\\n    uint amountToBorrow;\\n    /// @notice Amount to be used as collateral in terms of collateral asset\\n    uint collateralAmount;\\n\\n    /// @notice Cost for the period calculated using borrow rate in terms of borrow tokens, decimals 36\\n    /// @dev It doesn't take into account supply increment and rewards\\n    uint borrowCost36;\\n    /// @notice Potential supply increment after borrow period recalculated to Borrow Token, decimals 36\\n    uint supplyIncomeInBorrowAsset36;\\n    /// @notice Potential rewards amount after borrow period in terms of Borrow Tokens, decimals 36\\n    uint rewardsAmountInBorrowAsset36;\\n    /// @notice Amount of collateral in terms of borrow asset, decimals 36\\n    uint amountCollateralInBorrowAsset36;\\n\\n    /// @notice Loan-to-value, decimals = 18 (wad)\\n    uint ltv18;\\n    /// @notice How much borrow asset we can borrow in the pool (in borrow tokens)\\n    uint maxAmountToBorrow;\\n    /// @notice How much collateral asset can be supplied (in collateral tokens).\\n    ///         type(uint).max - unlimited, 0 - no supply is possible\\n    uint maxAmountToSupply;\\n  }\\n\\n  struct PricesAndDecimals {\\n    /// @notice Price of the collateral asset (decimals same as the decimals of {priceBorrow})\\n    uint priceCollateral;\\n    /// @notice Price of the borrow asset (decimals same as the decimals of {priceCollateral})\\n    uint priceBorrow;\\n    /// @notice 10**{decimals of the collateral asset}\\n    uint rc10powDec;\\n    /// @notice 10**{decimals of the borrow asset}\\n    uint rb10powDec;\\n  }\\n}\\n\",\"keccak256\":\"0xa74ac3301c0a4eaff233401f50a855031d20a514e9a853d7614ed96b7a24cef4\",\"license\":\"MIT\"},\"contracts/libs/AppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice List of all errors generated by the application\\n///         Each error should have unique code TS-XXX and descriptive comment\\nlibrary AppErrors {\\n  /// @notice Provided address should be not zero\\n  string public constant ZERO_ADDRESS = \\\"TS-1 zero address\\\";\\n\\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\\n  string public constant UNISWAP_PAIR_NOT_FOUND = \\\"TS-2 pair not found\\\";\\n\\n  /// @notice Lengths not matched\\n  string public constant WRONG_LENGTHS = \\\"TS-4 wrong lengths\\\";\\n\\n  /// @notice Unexpected zero balance\\n  string public constant ZERO_BALANCE = \\\"TS-5 zero balance\\\";\\n\\n  string public constant ITEM_NOT_FOUND = \\\"TS-6 not found\\\";\\n\\n  string public constant NOT_ENOUGH_BALANCE = \\\"TS-7 not enough balance\\\";\\n\\n  /// @notice Price oracle returns zero price\\n  string public constant ZERO_PRICE = \\\"TS-8 zero price\\\";\\n\\n  string public constant WRONG_VALUE = \\\"TS-9 wrong value\\\";\\n\\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\\n  string public constant ZERO_AMOUNT_BORROWED = \\\"TS-10 zero borrowed amount\\\";\\n\\n  string public constant WITHDRAW_TOO_MUCH = \\\"TS-11 try to withdraw too much\\\";\\n\\n  string public constant UNKNOWN_ENTRY_KIND = \\\"TS-12 unknown entry kind\\\";\\n\\n  string public constant ONLY_TETU_CONVERTER = \\\"TS-13 only TetuConverter\\\";\\n\\n  string public constant WRONG_ASSET = \\\"TS-14 wrong asset\\\";\\n\\n  string public constant NO_LIQUIDATION_ROUTE = \\\"TS-15 No liquidation route\\\";\\n\\n  string public constant PRICE_IMPACT = \\\"TS-16 price impact\\\";\\n\\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\\n  string public constant REPAY_MAKES_SWAP = \\\"TS-17 can not convert back\\\";\\n\\n  string public constant NO_INVESTMENTS = \\\"TS-18 no investments\\\";\\n\\n  string public constant INCORRECT_LENGTHS = \\\"TS-19 lengths\\\";\\n\\n  /// @notice We expect increasing of the balance, but it was decreased\\n  string public constant BALANCE_DECREASE = \\\"TS-20 balance decrease\\\";\\n}\\n\",\"keccak256\":\"0xad80735298b1caef0700ea0f059790aeef6eae848b0a4c02c2614c0bc7dc1f81\",\"license\":\"MIT\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\n/// @notice Common internal utils\\nlibrary AppLib {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Unchecked increment for for-cycles\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n  unchecked {\\n    return i + 1;\\n  }\\n  }\\n\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\n  /// @dev Should NOT be used for third-party pools\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\n      IERC20(token).safeApprove(spender, 0);\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\n      IERC20(token).safeApprove(spender, 2 ** 255);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb1933003632a71f0545ba76959b0dcbb3a3f60043149c456d33e52e46649ee7e\",\"license\":\"MIT\"},\"contracts/libs/ConverterEntryKinds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice Utils and constants related to entryKind param of ITetuConverter.findBorrowStrategy\\nlibrary ConverterEntryKinds {\\n  /// @notice Amount of collateral is fixed. Amount of borrow should be max possible.\\n  uint constant public ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0 = 0;\\n\\n  /// @notice Split provided source amount S on two parts: C1 and C2 (C1 + C2 = S)\\n  ///         C2 should be used as collateral to make a borrow B.\\n  ///         Results amounts of C1 and B (both in terms of USD) must be in the given proportion\\n  uint constant public ENTRY_KIND_EXACT_PROPORTION_1 = 1;\\n\\n  /// @notice Borrow given amount using min possible collateral\\n  uint constant public ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2 = 2;\\n\\n  /// @notice Decode entryData, extract first uint - entry kind\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\n    if (entryData_.length == 0) {\\n      return ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0;\\n    }\\n    return abi.decode(entryData_, (uint));\\n  }\\n}\\n\",\"keccak256\":\"0x42e53e67f20fe11a5f5209e21f2d9b2ebeacdb197ae506ac796920907ea679a2\",\"license\":\"MIT\"},\"contracts/libs/TokenAmountsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./AppErrors.sol\\\";\\n\\n/// @title Library for clearing / joining token addresses & amounts arrays\\n/// @author bogdoslav\\nlibrary TokenAmountsLib {\\n\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n  unchecked {\\n    return i + 1;\\n  }\\n  }\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string internal constant TOKEN_AMOUNTS_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  function filterZeroAmounts(\\n    address[] memory tokens,\\n    uint[] memory amounts\\n  ) internal pure returns (\\n    address[] memory t,\\n    uint[] memory a\\n  ) {\\n    require(tokens.length == amounts.length, 'TAL: Arrays mismatch');\\n    uint len2 = 0;\\n    uint len = tokens.length;\\n    for (uint i = 0; i < len; i++) {\\n      if (amounts[i] != 0) len2++;\\n    }\\n\\n    t = new address[](len2);\\n    a = new uint[](len2);\\n\\n    uint j = 0;\\n    for (uint i = 0; i < len; i++) {\\n      uint amount = amounts[i];\\n      if (amount != 0) {\\n        t[j] = tokens[i];\\n        a[j] = amount;\\n        j++;\\n      }\\n    }\\n  }\\n\\n  /// @notice unites three arrays to single array without duplicates, amounts are sum, zero amounts are allowed\\n  function combineArrays(\\n    address[] memory tokens0,\\n    uint[] memory amounts0,\\n    address[] memory tokens1,\\n    uint[] memory amounts1,\\n    address[] memory tokens2,\\n    uint[] memory amounts2\\n  ) internal pure returns (\\n    address[] memory allTokens,\\n    uint[] memory allAmounts\\n  ) {\\n    uint[] memory lens = new uint[](3);\\n    lens[0] = tokens0.length;\\n    lens[1] = tokens1.length;\\n    lens[2] = tokens2.length;\\n\\n    require(\\n      lens[0] == amounts0.length && lens[1] == amounts1.length && lens[2] == amounts2.length,\\n      AppErrors.INCORRECT_LENGTHS\\n    );\\n\\n    uint maxLength = lens[0] + lens[1] + lens[2];\\n    address[] memory tokensOut = new address[](maxLength);\\n    uint[] memory amountsOut = new uint[](maxLength);\\n    uint unitedLength;\\n\\n    for (uint step; step < 3; ++step) {\\n      uint[] memory amounts = step == 0\\n        ? amounts0\\n        : (step == 1\\n          ? amounts1\\n          : amounts2);\\n      address[] memory tokens = step == 0\\n        ? tokens0\\n        : (step == 1\\n          ? tokens1\\n          : tokens2);\\n      for (uint i1 = 0; i1 < lens[step]; i1++) {\\n        uint amount1 = amounts[i1];\\n        address token1 = tokens[i1];\\n        bool united = false;\\n\\n        for (uint i = 0; i < unitedLength; i++) {\\n          if (token1 == tokensOut[i]) {\\n            amountsOut[i] += amount1;\\n            united = true;\\n            break;\\n          }\\n        }\\n\\n        if (!united) {\\n          tokensOut[unitedLength] = token1;\\n          amountsOut[unitedLength] = amount1;\\n          unitedLength++;\\n        }\\n      }\\n    }\\n\\n    // copy united tokens to result array\\n    allTokens = new address[](unitedLength);\\n    allAmounts = new uint[](unitedLength);\\n    for (uint i; i < unitedLength; i++) {\\n      allTokens[i] = tokensOut[i];\\n      allAmounts[i] = amountsOut[i];\\n    }\\n\\n  }\\n}\\n\",\"keccak256\":\"0x7f27b301b1970af72102f64eaa3b9d5a8416dc4ea04417964832d52943a70ab9\",\"license\":\"MIT\"},\"contracts/strategies/ConverterStrategyBaseLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPoolAdapter.sol\\\";\\nimport \\\"../libs/AppErrors.sol\\\";\\nimport \\\"../libs/AppLib.sol\\\";\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\n\\nlibrary ConverterStrategyBaseLib {\\n  using SafeERC20 for IERC20;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Data types\\n  /////////////////////////////////////////////////////////////////////\\n  /// @notice Local vars for {_recycle}, workaround for stack too deep\\n  struct RecycleLocalParams {\\n    uint amountToCompound;\\n    address rewardToken;\\n    uint liquidationThresholdAsset;\\n    uint len;\\n    uint spentAmountIn;\\n    uint receivedAmountOut;\\n  }\\n\\n  struct OpenPositionLocal {\\n    uint entryKind;\\n    address[] converters;\\n    uint[] collateralsRequired;\\n    uint[] amountsToBorrow;\\n    uint collateral;\\n    uint amountToBorrow;\\n  }\\n\\n  struct OpenPositionEntryKind1Local {\\n    address[] converters;\\n    uint[] collateralsRequired;\\n    uint[] amountsToBorrow;\\n    uint collateral;\\n    uint amountToBorrow;\\n    uint c1;\\n    uint c3;\\n    uint ratio;\\n    uint alpha;\\n  }\\n\\n  struct CalcInvestedAssetsLocal {\\n    uint len;\\n    uint[] prices;\\n    uint[] decs;\\n    uint[] debts;\\n  }\\n\\n  struct ConvertAfterWithdrawLocal {\\n    address asset;\\n    uint collateral;\\n    uint spent;\\n    uint received;\\n    uint balance;\\n    uint balanceBefore;\\n    uint len;\\n  }\\n\\n  struct SwapToGivenAmountInputParams {\\n    uint targetAmount;\\n    address[] tokens;\\n    uint indexTargetAsset;\\n    address underlying;\\n    uint[] amounts;\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n    uint liquidationThresholdForTargetAsset;\\n    /// @notice Allow to swap more then required (i.e. 1_000 => +1%)\\n    ///         to avoid additional swap if the swap return amount a bit less than we expected\\n    uint overswap;\\n  }\\n\\n  struct SwapToGivenAmountLocal {\\n    uint len;\\n    uint[] availableAmounts;\\n    uint i;\\n  }\\n\\n  struct CloseDebtsForRequiredAmountLocal {\\n    uint len;\\n    address asset;\\n    uint collateral;\\n    uint spentAmountIn;\\n    uint receivedAmount;\\n    uint balance;\\n    uint[] tokensBalancesBefore;\\n\\n    uint totalDebt;\\n    uint totalCollateral;\\n\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\n    uint[] prices;\\n    /// @notice 10**decimal for the assets\\n    uint[] decs;\\n\\n    uint newBalance;\\n  }\\n  //endregion Data types\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Constants\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice approx one month for average block time 2 sec\\n  uint internal constant _LOAN_PERIOD_IN_BLOCKS = 30 days / 2;\\n  uint internal constant _REWARD_LIQUIDATION_SLIPPAGE = 5_000; // 5%\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n  uint internal constant DENOMINATOR = 100_000;\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\n  uint internal constant PRICE_IMPACT_TOLERANCE = 300;\\n  /// @notice borrow/collateral amount cannot be less than given number of tokens\\n  uint internal constant DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD = 10;\\n  /// @notice Allow to swap more then required (i.e. 1_000 => +1%) inside {swapToGivenAmount}\\n  ///         to avoid additional swap if the swap will return amount a bit less than we expected\\n  uint internal constant OVERSWAP = PRICE_IMPACT_TOLERANCE + _ASSET_LIQUIDATION_SLIPPAGE;\\n  /// @dev Absolute value for any token\\n  uint internal constant DEFAULT_LIQUIDATION_THRESHOLD = 100_000;\\n  /// @dev 1% gap in calculation of amount-to-sell in {closePositionsToGetAmount}\\n  uint internal constant GAP_AMOUNT_TO_SELL = 1_000;\\n  //endregion Constants\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Events\\n  /////////////////////////////////////////////////////////////////////\\n  /// @notice A borrow was made\\n  event OpenPosition(\\n    address converter,\\n    address collateralAsset,\\n    uint collateralAmount,\\n    address borrowAsset,\\n    uint borrowedAmount,\\n    address recepient\\n  );\\n\\n  /// @notice Some borrow(s) was/were repaid\\n  event ClosePosition(\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountRepay,\\n    address recepient,\\n    uint returnedAssetAmountOut,\\n    uint returnedBorrowAmountOut\\n  );\\n\\n  /// @notice A liquidation was made\\n  event Liquidation(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amountIn,\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  );\\n\\n  event ReturnAssetToConverter(address asset, uint amount);\\n  //endregion Events\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region View functions\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Get amount of assets that we expect to receive after withdrawing\\n  ///         ratio = amount-LP-tokens-to-withdraw / total-amount-LP-tokens-in-pool\\n  /// @param reserves_ Reserves of the {poolAssets_}, same order, same length (we don't check it)\\n  ///                  The order of tokens should be same as in {_depositorPoolAssets()},\\n  ///                  one of assets must be {asset_}\\n  /// @param liquidityAmount_ Amount of LP tokens that we are going to withdraw\\n  /// @param totalSupply_ Total amount of LP tokens in the depositor\\n  /// @return withdrawnAmountsOut Expected withdrawn amounts (decimals == decimals of the tokens)\\n  function getExpectedWithdrawnAmounts(\\n    uint[] memory reserves_,\\n    uint liquidityAmount_,\\n    uint totalSupply_\\n  ) internal pure returns (\\n    uint[] memory withdrawnAmountsOut\\n  ) {\\n    uint ratio = totalSupply_ == 0\\n      ? 0\\n      : (liquidityAmount_ >= totalSupply_\\n        ? 1e18\\n        : 1e18 * liquidityAmount_ / totalSupply_\\n      );\\n\\n    uint len = reserves_.length;\\n    withdrawnAmountsOut = new uint[](len);\\n\\n    if (ratio != 0) {\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        withdrawnAmountsOut[i] = reserves_[i] * ratio / 1e18;\\n      }\\n    }\\n  }\\n\\n  /// @return prices Asset prices in USD, decimals 18\\n  /// @return decs 10**decimals\\n  function _getPricesAndDecs(IPriceOracle priceOracle, address[] memory tokens_, uint len) internal view returns (\\n    uint[] memory prices,\\n    uint[] memory decs\\n  ) {\\n    prices = new uint[](len);\\n    decs = new uint[](len);\\n    {\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\\n        prices[i] = priceOracle.getAssetPrice(tokens_[i]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\\n  function getAssetIndex(address[] memory tokens_, address asset_) internal pure returns (uint) {\\n    uint len = tokens_.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (tokens_[i] == asset_) {\\n        return i;\\n      }\\n    }\\n    return type(uint).max;\\n  }\\n  //endregion View functions\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Borrow and close positions\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\n  ///         Max possible collateral should be approved before calling of this function.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\n  function openPosition(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint thresholdAmountIn_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    return _openPosition(tetuConverter_, entryData_, collateralAsset_, borrowAsset_, amountIn_, thresholdAmountIn_);\\n  }\\n\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\n  ///         Max possible collateral should be approved before calling of this function.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\n  /// @param thresholdAmountIn_ Min value of amountIn allowed for the second and subsequent conversions.\\n  ///        0 - use default min value\\n  ///        If amountIn becomes too low, no additional borrows are possible, so\\n  ///        the rest amountIn is just added to collateral/borrow amount of previous conversion.\\n  function _openPosition(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint thresholdAmountIn_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    if (thresholdAmountIn_ == 0) {\\n      // zero threshold is not allowed because round-issues are possible, see openPosition.dust test\\n      // we assume here, that it's useless to borrow amount using collateral/borrow amount\\n      // less than given number of tokens (event for BTC)\\n      thresholdAmountIn_ = DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD;\\n    }\\n    if (amountIn_ <= thresholdAmountIn_) {\\n      return (0, 0);\\n    }\\n\\n    OpenPositionLocal memory vars;\\n    // we assume here, that max possible collateral amount is already approved (as it's required by TetuConverter)\\n    vars.entryKind = ConverterEntryKinds.getEntryKind(entryData_);\\n    if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\\n      return openPositionEntryKind1(\\n        tetuConverter_,\\n        entryData_,\\n        collateralAsset_,\\n        borrowAsset_,\\n        amountIn_,\\n        thresholdAmountIn_\\n      );\\n    } else {\\n      (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\n        entryData_,\\n        collateralAsset_,\\n        amountIn_,\\n        borrowAsset_,\\n        _LOAN_PERIOD_IN_BLOCKS\\n      );\\n\\n      uint len = vars.converters.length;\\n      if (len > 0) {\\n        for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n          // we need to approve collateralAmount before the borrow-call but it's already approved, see above comments\\n          vars.collateral;\\n          vars.amountToBorrow;\\n          if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\\n            // we have exact amount of total collateral amount\\n            // Case ENTRY_KIND_EXACT_PROPORTION_1 is here too because we consider first platform only\\n            vars.collateral = amountIn_ < vars.collateralsRequired[i]\\n              ? amountIn_\\n              : vars.collateralsRequired[i];\\n            vars.amountToBorrow = amountIn_ < vars.collateralsRequired[i]\\n              ? vars.amountsToBorrow[i] * amountIn_ / vars.collateralsRequired[i]\\n              : vars.amountsToBorrow[i];\\n            amountIn_ -= vars.collateral;\\n          } else {\\n            // assume here that entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2\\n            // we have exact amount of total amount-to-borrow\\n            vars.amountToBorrow = amountIn_ < vars.amountsToBorrow[i]\\n              ? amountIn_\\n              : vars.amountsToBorrow[i];\\n            vars.collateral = amountIn_ < vars.amountsToBorrow[i]\\n              ? vars.collateralsRequired[i] * amountIn_ / vars.amountsToBorrow[i]\\n              : vars.collateralsRequired[i];\\n            amountIn_ -= vars.amountToBorrow;\\n          }\\n\\n          if (amountIn_ < thresholdAmountIn_ && amountIn_ != 0) {\\n            // dust amount is left, just leave it unused\\n            // we cannot add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\n            amountIn_ = 0;\\n          }\\n\\n          if (vars.amountToBorrow != 0) {\\n            borrowedAmountOut += tetuConverter_.borrow(\\n              vars.converters[i],\\n              collateralAsset_,\\n              vars.collateral,\\n              borrowAsset_,\\n              vars.amountToBorrow,\\n              address(this)\\n            );\\n            collateralAmountOut += vars.collateral;\\n            emit OpenPosition(\\n              vars.converters[i],\\n              collateralAsset_,\\n              vars.collateral,\\n              borrowAsset_,\\n              vars.amountToBorrow,\\n              address(this)\\n            );\\n          }\\n\\n          if (amountIn_ == 0) break;\\n        }\\n      }\\n\\n      return (collateralAmountOut, borrowedAmountOut);\\n    }\\n  }\\n\\n  /// @notice Open position using entry kind 1 - split provided amount on two parts according provided proportions\\n  /// @param amountIn_ Amount of collateral to be divided on parts. We assume {amountIn_} > 0\\n  /// @return collateralAmountOut Total collateral used to borrow {borrowedAmountOut}\\n  /// @return borrowedAmountOut Total borrowed amount\\n  function openPositionEntryKind1(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint collateralThreshold_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    OpenPositionEntryKind1Local memory vars;\\n    (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\n      entryData_,\\n      collateralAsset_,\\n      amountIn_,\\n      borrowAsset_,\\n      _LOAN_PERIOD_IN_BLOCKS\\n    );\\n\\n    uint len = vars.converters.length;\\n    if (len > 0) {\\n      // we should split amountIn on two amounts with proportions x:y\\n      (, uint x, uint y) = abi.decode(entryData_, (uint, uint, uint));\\n      // calculate prices conversion ratio using price oracle, decimals 18\\n      // i.e. alpha = 1e18 * 75e6 usdc / 25e18 matic = 3e6 usdc/matic\\n      vars.alpha = _getCollateralToBorrowRatio(tetuConverter_, collateralAsset_, borrowAsset_);\\n\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        // the lending platform allows to convert {collateralsRequired[i]} to {amountsToBorrow[i]}\\n        // and give us required proportions in result\\n        // C = C1 + C2, C2 => B2, B2 * alpha = C3, C1/C3 must be equal to x/y\\n        // C1 is collateral amount left untouched (x)\\n        // C2 is collateral amount converted to B2 (y)\\n        // but if lending platform doesn't have enough liquidity\\n        // it reduces {collateralsRequired[i]} and {amountsToBorrow[i]} proportionally to fit the limits\\n        // as result, remaining C1 will be too big after conversion and we need to make another borrow\\n        vars.c3 = vars.alpha * vars.amountsToBorrow[i] / 1e18;\\n        vars.c1 = x * vars.c3 / y;\\n        vars.ratio = (vars.collateralsRequired[i] + vars.c1) > amountIn_\\n          ? 1e18 * amountIn_ / (vars.collateralsRequired[i] + vars.c1)\\n          : 1e18;\\n\\n        vars.collateral = vars.collateralsRequired[i] * vars.ratio / 1e18;\\n        vars.amountToBorrow = vars.amountsToBorrow[i] * vars.ratio / 1e18;\\n\\n        // skip any attempts to borrow zero amount or use too little collateral\\n        if (vars.collateral < collateralThreshold_ || vars.amountToBorrow == 0) {\\n          if (vars.collateralsRequired[i] + vars.c1 + collateralThreshold_ > amountIn_) {\\n            // The lending platform has enough resources to make the borrow but amount of the borrow is too low\\n            // Skip the borrow, leave leftover of collateral untouched\\n            break;\\n          } else {\\n            // The lending platform doesn't have enough resources to make the borrow.\\n            // We should try to make borrow on the next platform (if any)\\n            continue;\\n          }\\n        }\\n\\n        require(\\n          tetuConverter_.borrow(\\n            vars.converters[i],\\n            collateralAsset_,\\n            vars.collateral,\\n            borrowAsset_,\\n            vars.amountToBorrow,\\n            address(this)\\n          ) == vars.amountToBorrow,\\n          StrategyLib.WRONG_VALUE\\n        );\\n        emit OpenPosition(\\n          vars.converters[i],\\n          collateralAsset_,\\n          vars.collateral,\\n          borrowAsset_,\\n          vars.amountToBorrow,\\n          address(this)\\n        );\\n\\n        borrowedAmountOut += vars.amountToBorrow;\\n        collateralAmountOut += vars.collateral;\\n\\n        // calculate amount to be borrowed in the next converter\\n        vars.c3 = vars.alpha * vars.amountToBorrow / 1e18;\\n        vars.c1 = x * vars.c3 / y;\\n        amountIn_ = (amountIn_ > vars.c1 + vars.collateral)\\n          ? amountIn_ - (vars.c1 + vars.collateral)\\n          : 0;\\n\\n        // protection against dust amounts, see \\\"openPosition.dust\\\", just leave dust amount unused\\n        // we CAN NOT add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\n        if (amountIn_ < collateralThreshold_ || amountIn_ == 0) break;\\n      }\\n    }\\n\\n    return (collateralAmountOut, borrowedAmountOut);\\n  }\\n\\n  /// @notice Get ratio18 = collateral / borrow\\n  function _getCollateralToBorrowRatio(\\n    ITetuConverter tetuConverter_,\\n    address collateralAsset_,\\n    address borrowAsset_\\n  ) internal view returns (uint){\\n    IPriceOracle priceOracle = IPriceOracle(IConverterController(tetuConverter_.controller()).priceOracle());\\n    uint priceCollateral = priceOracle.getAssetPrice(collateralAsset_);\\n    uint priceBorrow = priceOracle.getAssetPrice(borrowAsset_);\\n    return 1e18 * priceBorrow * 10 ** IERC20Metadata(collateralAsset_).decimals()\\n    / priceCollateral / 10 ** IERC20Metadata(borrowAsset_).decimals();\\n  }\\n\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\n  ///         It doesn't repay more than the actual amount of the debt, so it can use less amount than {amountToRepay}\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function _closePosition(\\n    ITetuConverter converter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) internal returns (\\n    uint returnedAssetAmountOut,\\n    uint repaidAmountOut\\n  ) {\\n\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // We shouldn't try to pay more than we actually need to repay\\n    // The leftover will be swapped inside TetuConverter, it's inefficient.\\n    // Let's limit amountToRepay by needToRepay-amount\\n    (uint needToRepay,) = converter_.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\n    uint amountRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\n\\n    return _closePositionExact(converter_, collateralAsset, borrowAsset, amountRepay, balanceBefore);\\n  }\\n\\n  /// @notice Close the given position, pay {amountRepay} exactly and ensure that all amount was accepted,\\n  /// @param amountRepay Amount to repay in terms of {borrowAsset}\\n  /// @param balanceBorrowAsset Current balance of the borrow asset\\n  /// @return collateralOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function _closePositionExact(\\n    ITetuConverter converter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountRepay,\\n    uint balanceBorrowAsset\\n  ) internal returns (\\n    uint collateralOut,\\n    uint repaidAmountOut\\n  ) {\\n    // Make full/partial repayment\\n    IERC20(borrowAsset).safeTransfer(address(converter_), amountRepay);\\n\\n    uint notUsedAmount;\\n    (collateralOut, notUsedAmount,,) = converter_.repay(collateralAsset, borrowAsset, amountRepay, address(this));\\n\\n    emit ClosePosition(collateralAsset, borrowAsset, amountRepay, address(this), collateralOut, notUsedAmount);\\n    uint balanceAfter = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // we cannot use amountRepay here because AAVE pool adapter is able to send tiny amount back (debt-gap)\\n    repaidAmountOut = balanceBorrowAsset > balanceAfter\\n      ? balanceBorrowAsset - balanceAfter\\n      : 0;\\n\\n    require(notUsedAmount == 0, StrategyLib.WRONG_VALUE);\\n  }\\n\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function closePosition(\\n    ITetuConverter tetuConverter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) external returns (\\n    uint returnedAssetAmountOut,\\n    uint repaidAmountOut\\n  ) {\\n    return _closePosition(tetuConverter_, collateralAsset, borrowAsset, amountToRepay);\\n  }\\n  //endregion Borrow and close positions\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Liquidation\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\n  /// @param spentAmountIn Amount of {tokenIn} has been consumed by the liquidator\\n  /// @param receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\n  function liquidate(\\n    ITetuConverter converter,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    uint liquidationThresholdTokenOut_\\n  ) external returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    return _liquidate(converter, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, liquidationThresholdTokenOut_);\\n  }\\n\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\n  /// @param spentAmountIn Amount of {tokenIn} has been consumed by the liquidator\\n  /// @param receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\n  function _liquidate(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    uint liquidationThresholdForTokenOut_\\n  ) internal returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    (ITetuLiquidator.PoolData[] memory route,) = liquidator_.buildRoute(tokenIn_, tokenOut_);\\n\\n    require(route.length != 0, AppErrors.NO_LIQUIDATION_ROUTE);\\n\\n    // calculate balance in out value for check threshold\\n    uint amountOut = liquidator_.getPriceForRoute(route, amountIn_);\\n\\n    // if the expected value is higher than threshold distribute to destinations\\n    return amountOut > liquidationThresholdForTokenOut_\\n      ? _liquidateWithRoute(converter_, route, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_)\\n      : (0, 0);\\n  }\\n\\n  function _liquidateWithRoute(\\n    ITetuConverter converter_,\\n    ITetuLiquidator.PoolData[] memory route,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_\\n  ) internal returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    // we need to approve each time, liquidator address can be changed in controller\\n    AppLib.approveIfNeeded(tokenIn_, amountIn_, address(liquidator_));\\n\\n    uint balanceBefore = IERC20(tokenOut_).balanceOf(address(this));\\n\\n    liquidator_.liquidateWithRoute(route, amountIn_, slippage_);\\n\\n    // temporary save balance of token out after  liquidation to spentAmountIn\\n    uint balanceAfter = IERC20(tokenOut_).balanceOf(address(this));\\n\\n    // assign correct values to\\n    receivedAmountOut = balanceAfter > balanceBefore\\n      ? balanceAfter - balanceBefore\\n      : 0;\\n    spentAmountIn = amountIn_;\\n\\n    require(\\n      converter_.isConversionValid(\\n        tokenIn_,\\n        amountIn_,\\n        tokenOut_,\\n        receivedAmountOut,\\n        slippage_\\n      ),\\n      AppErrors.PRICE_IMPACT\\n    );\\n\\n    emit Liquidation(\\n      tokenIn_,\\n      tokenOut_,\\n      amountIn_,\\n      spentAmountIn,\\n      receivedAmountOut\\n    );\\n  }\\n  //endregion Liquidation\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region requirePayAmountBack\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @param amountOut Amount of the main asset requested by converter\\n  /// @param indexTheAsset Index of the asset required by converter in the {tokens}\\n  /// @param asset Main asset or underlying (it can be different from tokens[indexTheAsset])\\n  /// @return amountOut Amount of the main asset sent to converter\\n  function swapToGivenAmountAndSendToConverter(\\n    uint amount_,\\n    uint indexTheAsset,\\n    address[] memory tokens,\\n    address converter,\\n    address controller,\\n    address asset,\\n    mapping(address => uint) storage liquidationThresholds\\n  ) external returns (\\n    uint amountOut\\n  ) {\\n    require(msg.sender == converter, StrategyLib.DENIED);\\n    address theAsset = tokens[indexTheAsset];\\n\\n    amountOut = IERC20(theAsset).balanceOf(address(this));\\n\\n    // convert withdrawn assets to the target asset if not enough\\n    if (amountOut < amount_) {\\n      ConverterStrategyBaseLib.swapToGivenAmount(\\n        amount_ - amountOut,\\n        tokens,\\n        indexTheAsset,\\n        asset, // underlying === main asset\\n        ITetuConverter(converter),\\n        ITetuLiquidator(IController(controller).liquidator()),\\n        liquidationThresholds[theAsset],\\n        OVERSWAP\\n      );\\n      amountOut = IERC20(theAsset).balanceOf(address(this));\\n    }\\n\\n    // we should send the asset as is even if it is lower than requested\\n    // but shouldn't sent more amount than requested\\n    amountOut = Math.min(amount_, amountOut);\\n    if (amountOut != 0) {\\n      IERC20(theAsset).safeTransfer(converter, amountOut);\\n    }\\n\\n    // There are two cases of calling requirePayAmountBack by converter:\\n    // 1) close a borrow: we will receive collateral back and amount of investedAssets almost won't change\\n    // 2) rebalancing: we have real loss, it will be taken into account at next hard work\\n    emit ReturnAssetToConverter(theAsset, amountOut);\\n\\n    // let's leave any leftovers un-invested, they will be reinvested at next hardwork\\n  }\\n\\n  /// @notice Swap available amounts of {tokens_} to receive {targetAmount_} of {tokens[indexTheAsset_]}\\n  /// @param targetAmount_ Required amount of tokens[indexTheAsset_] that should be received by swap(s)\\n  /// @param tokens_ tokens received from {_depositorPoolAssets}\\n  /// @param indexTargetAsset_ Index of target asset in tokens_ array\\n  /// @param underlying_ Index of underlying\\n  /// @param liquidationThresholdForTargetAsset_ Liquidation thresholds for the target asset\\n  /// @param overswap_ Allow to swap more then required (i.e. 1_000 => +1%)\\n  ///                  to avoid additional swap if the swap return amount a bit less than we expected\\n  /// @return spentAmounts Any amounts spent during the swaps\\n  function swapToGivenAmount(\\n    uint targetAmount_,\\n    address[] memory tokens_,\\n    uint indexTargetAsset_,\\n    address underlying_,\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    uint liquidationThresholdForTargetAsset_,\\n    uint overswap_\\n  ) internal returns (\\n    uint[] memory spentAmounts,\\n    uint[] memory receivedAmounts\\n  ) {\\n    SwapToGivenAmountLocal memory v;\\n    v.len = tokens_.length;\\n\\n    v.availableAmounts = new uint[](v.len);\\n    for (; v.i < v.len; v.i = AppLib.uncheckedInc(v.i)) {\\n      v.availableAmounts[v.i] = IERC20(tokens_[v.i]).balanceOf(address(this));\\n    }\\n\\n    (spentAmounts, receivedAmounts) = _swapToGivenAmount(\\n      SwapToGivenAmountInputParams({\\n        targetAmount: targetAmount_,\\n        tokens: tokens_,\\n        indexTargetAsset: indexTargetAsset_,\\n        underlying: underlying_,\\n        amounts: v.availableAmounts,\\n        converter: converter_,\\n        liquidator: liquidator_,\\n        liquidationThresholdForTargetAsset: Math.max(liquidationThresholdForTargetAsset_, DEFAULT_LIQUIDATION_THRESHOLD),\\n        overswap: overswap_\\n      })\\n    );\\n  }\\n\\n  /// @notice Swap available {amounts_} of {tokens_} to receive {targetAmount_} of {tokens[indexTheAsset_]}\\n  /// @return spentAmounts Any amounts spent during the swaps\\n  /// @return receivedAmounts Any amounts received during the swaps\\n  function _swapToGivenAmount(SwapToGivenAmountInputParams memory p) internal returns (\\n    uint[] memory spentAmounts,\\n    uint[] memory receivedAmounts\\n  ) {\\n    CalcInvestedAssetsLocal memory v;\\n    v.len = p.tokens.length;\\n    receivedAmounts = new uint[](v.len);\\n    spentAmounts = new uint[](v.len);\\n\\n    // calculate prices, decimals\\n    (v.prices, v.decs) = _getPricesAndDecs(\\n      IPriceOracle(IConverterController(p.converter.controller()).priceOracle()),\\n      p.tokens,\\n      v.len\\n    );\\n\\n    // we need to swap other assets to the asset\\n    // at first we should swap NOT underlying.\\n    // if it would be not enough, we can swap underlying too.\\n\\n    // swap NOT underlying, initialize {indexUnderlying}\\n    uint indexUnderlying;\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      if (p.underlying == p.tokens[i]) {\\n        indexUnderlying = i;\\n        continue;\\n      }\\n      if (p.indexTargetAsset == i) continue;\\n\\n      (uint spent, uint received) = _swapToGetAmount(receivedAmounts[p.indexTargetAsset], p, v, i);\\n      spentAmounts[i] += spent;\\n      receivedAmounts[p.indexTargetAsset] += received;\\n\\n      if (receivedAmounts[p.indexTargetAsset] >= p.targetAmount) break;\\n    }\\n\\n    // swap underlying\\n    if (receivedAmounts[p.indexTargetAsset] < p.targetAmount && p.indexTargetAsset != indexUnderlying) {\\n      (uint spent, uint received) = _swapToGetAmount(receivedAmounts[p.indexTargetAsset], p, v, indexUnderlying);\\n      spentAmounts[indexUnderlying] += spent;\\n      receivedAmounts[p.indexTargetAsset] += received;\\n    }\\n  }\\n\\n  /// @notice Swap a part of amount of asset {tokens[indexTokenIn]} to {targetAsset} to get {targetAmount} in result\\n  /// @param receivedTargetAmount Already received amount of {targetAsset} in previous swaps\\n  /// @param indexTokenIn Index of the tokenIn in p.tokens\\n  function _swapToGetAmount(\\n    uint receivedTargetAmount,\\n    SwapToGivenAmountInputParams memory p,\\n    CalcInvestedAssetsLocal memory v,\\n    uint indexTokenIn\\n  ) internal returns (\\n    uint amountSpent,\\n    uint amountReceived\\n  ) {\\n    if (p.amounts[indexTokenIn] != 0) {\\n      // we assume here, that p.targetAmount > receivedTargetAmount, see _swapToGivenAmount implementation\\n\\n      // calculate amount that should be swapped\\n      // {overswap} allows to swap a bit more\\n      // to avoid additional swaps if the swap will give us a bit less amount than expected\\n      uint amountIn = (\\n        (p.targetAmount - receivedTargetAmount)\\n        * v.prices[p.indexTargetAsset] * v.decs[indexTokenIn]\\n        / v.prices[indexTokenIn] / v.decs[p.indexTargetAsset]\\n      ) * (p.overswap + DENOMINATOR) / DENOMINATOR;\\n\\n      (amountSpent, amountReceived) = _liquidate(\\n        p.converter,\\n        p.liquidator,\\n        p.tokens[indexTokenIn],\\n        p.tokens[p.indexTargetAsset],\\n        Math.min(amountIn, p.amounts[indexTokenIn]),\\n        _ASSET_LIQUIDATION_SLIPPAGE,\\n        p.liquidationThresholdForTargetAsset\\n      );\\n    }\\n\\n    return (amountSpent, amountReceived);\\n  }\\n  //endregion requirePayAmountBack\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Recycle rewards\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Recycle the amounts: liquidate a part of each amount, send the other part to the forwarder.\\n  /// We have two kinds of rewards:\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\n  /// 2) any other rewards\\n  /// All received rewards are immediately \\\"recycled\\\".\\n  /// It means, they are divided on two parts: to forwarder, to compound\\n  ///   Compound-part of Rewards-2 can be liquidated\\n  ///   Compound part of Rewards-1 should be just added to baseAmounts\\n  /// All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder.\\n  /// @param tokens tokens received from {_depositorPoolAssets}\\n  /// @param rewardTokens Full list of reward tokens received from tetuConverter and depositor\\n  /// @param rewardAmounts Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\n  /// @param liquidationThresholds Liquidation thresholds for rewards tokens\\n  /// @return amountsToForward Amounts of {rewardTokens} to be sent to forwarder, zero amounts are allowed here\\n  function recycle(\\n    ITetuConverter converter_,\\n    address asset,\\n    uint compoundRatio,\\n    address[] memory tokens,\\n    ITetuLiquidator liquidator,\\n    mapping(address => uint) storage liquidationThresholds,\\n    address[] memory rewardTokens,\\n    uint[] memory rewardAmounts\\n  ) external returns (\\n    uint[] memory amountsToForward\\n  ) {\\n    RecycleLocalParams memory p;\\n\\n    p.len = rewardTokens.length;\\n    require(p.len == rewardAmounts.length, AppErrors.WRONG_LENGTHS);\\n\\n    p.liquidationThresholdAsset = Math.max(liquidationThresholds[asset], DEFAULT_LIQUIDATION_THRESHOLD);\\n\\n    amountsToForward = new uint[](p.len);\\n\\n    // split each amount on two parts: a part-to-compound and a part-to-transfer-to-the-forwarder\\n    for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\\n      p.rewardToken = rewardTokens[i];\\n      p.amountToCompound = rewardAmounts[i] * compoundRatio / COMPOUND_DENOMINATOR;\\n\\n      if (p.amountToCompound > 0) {\\n        if (ConverterStrategyBaseLib.getAssetIndex(tokens, p.rewardToken) != type(uint).max) {\\n          // The asset is in the list of depositor's assets, liquidation is not allowed\\n          // just keep on the balance, should be handled later\\n        } else {\\n          if (p.amountToCompound < Math.max(liquidationThresholds[p.rewardToken], DEFAULT_LIQUIDATION_THRESHOLD)) {\\n            // amount is too small, liquidation is not allowed\\n            // we keep that dust tokens on balance forever\\n          } else {\\n            // The asset is not in the list of depositor's assets, its amount is big enough and should be liquidated\\n            // We assume here, that {token} cannot be equal to {_asset}\\n            // because the {_asset} is always included to the list of depositor's assets\\n            (p.spentAmountIn, p.receivedAmountOut) = _liquidate(\\n              converter_,\\n              liquidator,\\n              p.rewardToken,\\n              asset,\\n              p.amountToCompound,\\n              _REWARD_LIQUIDATION_SLIPPAGE,\\n              p.liquidationThresholdAsset\\n            );\\n          }\\n        }\\n      }\\n      amountsToForward[i] = rewardAmounts[i] - p.amountToCompound;\\n    }\\n  }\\n  //endregion Recycle rewards\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region calcInvestedAssets\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\n  /// @return amountOut Invested asset amount under control (in terms of {asset})\\n  function calcInvestedAssets(\\n    address[] memory tokens,\\n    uint[] memory depositorQuoteExitAmountsOut,\\n    uint indexAsset,\\n    ITetuConverter converter_\\n  ) external returns (\\n    uint amountOut\\n  ) {\\n    CalcInvestedAssetsLocal memory v;\\n    v.len = tokens.length;\\n\\n    // calculate prices, decimals\\n    (v.prices, v.decs) = _getPricesAndDecs(\\n      IPriceOracle(IConverterController(converter_.controller()).priceOracle()),\\n      tokens,\\n      v.len\\n    );\\n\\n    // A debt is registered below if we have X amount of asset, need to pay Y amount of the asset and X < Y\\n    // In this case: debt = Y - X, the order of tokens is the same as in {tokens} array\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) {\\n        // Current strategy balance of main asset is not taken into account here because it's add by splitter\\n        amountOut += depositorQuoteExitAmountsOut[i];\\n      } else {\\n        // available amount to repay\\n        uint toRepay = IERC20(tokens[i]).balanceOf(address(this)) + depositorQuoteExitAmountsOut[i];\\n\\n        (uint toPay, uint collateral) = converter_.getDebtAmountCurrent(\\n          address(this),\\n          tokens[indexAsset],\\n          tokens[i],\\n          // investedAssets is calculated using exact debts, debt-gaps are not taken into account\\n          false\\n        );\\n        amountOut += collateral;\\n        if (toRepay >= toPay) {\\n          amountOut += (toRepay - toPay) * v.prices[i] * v.decs[indexAsset] / v.prices[indexAsset] / v.decs[i];\\n        } else {\\n          // there is not enough amount to pay the debt\\n          // let's register a debt and try to resolve it later below\\n          if (v.debts.length == 0) {\\n            // lazy initialization\\n            v.debts = new uint[](v.len);\\n          }\\n          // to pay the following amount we need to swap some other asset at first\\n          v.debts[i] = toPay - toRepay;\\n        }\\n      }\\n    }\\n\\n    if (v.debts.length == v.len) {\\n      // we assume here, that it would be always profitable to save collateral\\n      // f.e. if there is not enough amount of USDT on our balance and we have a debt in USDT,\\n      // it's profitable to change any available asset to USDT, pay the debt and return the collateral back\\n      for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n        if (v.debts[i] == 0) continue;\\n\\n        // estimatedAssets should be reduced on the debt-value\\n        // this estimation is approx and do not count price impact on the liquidation\\n        // we will able to count the real output only after withdraw process\\n        uint debtInAsset = v.debts[i] * v.prices[i] * v.decs[indexAsset] / v.prices[indexAsset] / v.decs[i];\\n        if (debtInAsset > amountOut) {\\n          // The debt is greater than we can pay. We shouldn't try to pay the debt in this case\\n          amountOut = 0;\\n        } else {\\n          amountOut -= debtInAsset;\\n        }\\n      }\\n    }\\n\\n    return amountOut;\\n  }\\n  //endregion calcInvestedAssets\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region getExpectedAmountMainAsset\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Calculate expected amount of the main asset after withdrawing\\n  /// @param withdrawnAmounts_ Expected amounts to be withdrawn from the pool\\n  /// @param amountsToConvert_ Amounts on balance initially available for the conversion\\n  /// @return amountsOut Expected amounts of the main asset received after conversion withdrawnAmounts+amountsToConvert\\n  function getExpectedAmountMainAsset(\\n    address[] memory tokens,\\n    uint indexAsset,\\n    ITetuConverter converter,\\n    uint[] memory withdrawnAmounts_,\\n    uint[] memory amountsToConvert_\\n  ) internal returns (\\n    uint[] memory amountsOut\\n  ) {\\n    uint len = tokens.length;\\n    amountsOut = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) {\\n        amountsOut[i] = withdrawnAmounts_[i];\\n      } else {\\n        uint amount = withdrawnAmounts_[i] + amountsToConvert_[i];\\n        if (amount != 0) {\\n          (amountsOut[i],) = converter.quoteRepay(address(this), tokens[indexAsset], tokens[i], amount);\\n        }\\n      }\\n    }\\n\\n    // todo make integral tests for the following cases:\\n    //  1) we will withdraw not enough\\n    //  2) a rare case when user exit from the vault before rebalance\\n    //  3) however, if user will exit between rebalances and the gap will be lower than withdraw fee, we will put the fee to vault balance and increase share price\\n    return amountsOut;\\n  }\\n  //endregion getExpectedAmountMainAsset\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Reduce size of ConverterStrategyBase\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Make borrow and save amounts of tokens available for deposit to tokenAmounts\\n  /// @param thresholdMainAsset_ Min allowed value of collateral in terms of main asset, 0 - use default min value\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\n  /// @param collaterals_ Amounts of main asset that can be used as collateral to borrow {tokens_}\\n  /// @param thresholdMainAsset_ Value of liquidation threshold for the main (collateral) asset\\n  /// @return tokenAmountsOut Amounts available for deposit\\n  function getTokenAmounts(\\n    ITetuConverter tetuConverter_,\\n    address[] memory tokens_,\\n    uint indexAsset_,\\n    uint[] memory collaterals_,\\n    uint thresholdMainAsset_\\n  ) external returns (\\n    uint[] memory tokenAmountsOut\\n  ) {\\n    // content of tokenAmounts will be modified in place\\n    uint len = tokens_.length;\\n    tokenAmountsOut = new uint[](len);\\n\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i != indexAsset_) {\\n        if (collaterals_[i] != 0) {\\n          AppLib.approveIfNeeded(tokens_[indexAsset_], collaterals_[i], address(tetuConverter_));\\n          (, uint borrowedAmount) = _openPosition(\\n            tetuConverter_,\\n            \\\"\\\", // entry kind = 0: fixed collateral amount, max possible borrow amount\\n            tokens_[indexAsset_],\\n            tokens_[i],\\n            collaterals_[i],\\n            Math.max(thresholdMainAsset_, DEFAULT_LIQUIDATION_THRESHOLD)\\n          );\\n\\n          // zero amount are possible (conversion is not available) but it's not suitable for depositor\\n          require(borrowedAmount != 0, AppErrors.ZERO_AMOUNT_BORROWED);\\n        }\\n        tokenAmountsOut[i] = IERC20(tokens_[i]).balanceOf(address(this));\\n      }\\n    }\\n\\n    tokenAmountsOut[indexAsset_] = Math.min(\\n      collaterals_[indexAsset_],\\n      IERC20(tokens_[indexAsset_]).balanceOf(address(this))\\n    );\\n  }\\n  //endregion Reduce size of ConverterStrategyBase\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Withdraw helpers\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}\\n  /// @param amountsToConvert Amounts of {tokens} to be converted, they are located on the balance before withdraw\\n  /// @param withdrawnAmounts Amounts of {tokens} that were withdrew from the pool\\n  function postWithdrawActions(\\n    ITetuConverter converter,\\n    address[] memory tokens,\\n    uint indexAsset,\\n\\n    uint[] memory reservesBeforeWithdraw,\\n    uint liquidityAmountWithdrew,\\n    uint totalSupplyBeforeWithdraw,\\n\\n    uint[] memory amountsToConvert,\\n    uint[] memory withdrawnAmounts\\n  ) external returns (\\n    uint[] memory expectedMainAssetAmounts,\\n    uint[] memory _amountsToConvert\\n  ) {\\n    // estimate expected amount of assets to be withdrawn\\n    uint[] memory expectedWithdrawAmounts = getExpectedWithdrawnAmounts(\\n      reservesBeforeWithdraw,\\n      liquidityAmountWithdrew,\\n      totalSupplyBeforeWithdraw\\n    );\\n\\n    // from received amounts after withdraw calculate how much we receive from converter for them in terms of the underlying asset\\n    expectedMainAssetAmounts = getExpectedAmountMainAsset(\\n      tokens,\\n      indexAsset,\\n      converter,\\n      expectedWithdrawAmounts,\\n      amountsToConvert\\n    );\\n\\n    uint len = tokens.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      amountsToConvert[i] += withdrawnAmounts[i];\\n    }\\n\\n    return (expectedMainAssetAmounts, amountsToConvert);\\n  }\\n\\n  /// @notice return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}\\n  function postWithdrawActionsEmpty(\\n    ITetuConverter converter,\\n    address[] memory tokens,\\n    uint indexAsset,\\n    uint[] memory amountsToConvert_\\n  ) external returns (\\n    uint[] memory expectedAmountsMainAsset\\n  ) {\\n    expectedAmountsMainAsset = getExpectedAmountMainAsset(\\n      tokens,\\n      indexAsset,\\n      converter,\\n      // there are no withdrawn amounts\\n      new uint[](tokens.length), // array with all zero values\\n      amountsToConvert_\\n    );\\n  }\\n\\n  //endregion Withdraw helpers\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region convertAfterWithdraw\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Convert {amountsToConvert_} (available on balance) to the main asset\\n  ///         Swap leftovers if any.\\n  ///         Result amount can be less than requested one, we don't try to close any other debts here\\n  /// @param indexAsset Index of the main asset in {tokens}\\n  /// @param liquidationThreshold Min allowed amount of main asset to be liquidated in {liquidator}\\n  /// @param tokens Tokens received from {_depositorPoolAssets}\\n  /// @param amountsToConvert Amounts to convert, the order of asset is same as in {tokens}\\n  /// @return collateralOut Total amount of main asset returned after closing positions\\n  /// @return repaidAmountsOut What amounts were spent in exchange of the {collateralOut}\\n  function convertAfterWithdraw(\\n    ITetuConverter tetuConverter,\\n    ITetuLiquidator liquidator,\\n    uint indexAsset,\\n    uint liquidationThreshold,\\n    address[] memory tokens,\\n    uint[] memory amountsToConvert\\n  ) external returns (\\n    uint collateralOut,\\n    uint[] memory repaidAmountsOut\\n  ) {\\n    ConvertAfterWithdrawLocal memory v;\\n    v.asset = tokens[indexAsset];\\n    v.balanceBefore = IERC20(v.asset).balanceOf(address(this));\\n    v.len = tokens.length;\\n\\n    // Close positions to convert all required amountsToConvert\\n    repaidAmountsOut = new uint[](tokens.length);\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset || amountsToConvert[i] == 0) continue;\\n      (, repaidAmountsOut[i]) = _closePosition(tetuConverter, v.asset, tokens[i], amountsToConvert[i]);\\n    }\\n\\n    // Manually swap remain leftovers\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset || amountsToConvert[i] == 0) continue;\\n      if (amountsToConvert[i] > repaidAmountsOut[i]) {\\n        (v.spent, v.received) = _liquidate(\\n          tetuConverter,\\n          liquidator,\\n          tokens[i],\\n          v.asset,\\n          amountsToConvert[i] - repaidAmountsOut[i],\\n          _ASSET_LIQUIDATION_SLIPPAGE,\\n          liquidationThreshold\\n        );\\n        collateralOut += v.received;\\n        if (v.spent != 0) {\\n          repaidAmountsOut[i] += v.spent;\\n          require(\\n            tetuConverter.isConversionValid(tokens[i], v.spent, v.asset, v.received, PRICE_IMPACT_TOLERANCE),\\n            AppErrors.PRICE_IMPACT\\n          );\\n        }\\n      }\\n    }\\n\\n    // Calculate amount of received collateral\\n    v.balance = IERC20(v.asset).balanceOf(address(this));\\n    collateralOut = v.balance > v.balanceBefore\\n      ? v.balance - v.balanceBefore\\n      : 0;\\n\\n    return (collateralOut, repaidAmountsOut);\\n  }\\n\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\n  /// @dev We assume here that this function is called before closing any positions in the current block\\n  /// @param liquidationThresholds Min allowed amounts-out for liquidations\\n  /// @param requestedAmount Requested amount of main asset that should be added to the current balance\\n  /// @return expectedAmount Main asset amount expected to be received on balance after all conversions and swaps\\n  function closePositionsToGetAmount(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator,\\n    uint indexAsset,\\n    mapping(address => uint) storage liquidationThresholds,\\n    uint requestedAmount,\\n    address[] memory tokens\\n  ) external returns (\\n    uint expectedAmount\\n  ) {\\n    if (requestedAmount != 0) {\\n      CloseDebtsForRequiredAmountLocal memory v;\\n      v.asset = tokens[indexAsset];\\n      v.len = tokens.length;\\n      v.balance = IERC20(v.asset).balanceOf(address(this));\\n\\n      for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n        if (i == indexAsset) continue;\\n\\n        // we need to increase balance on the following amount: requestedAmount - v.balance;\\n        // we have following borrow: amount-to-pay and corresponded collateral\\n        (v.totalDebt, v.totalCollateral) = converter_.getDebtAmountCurrent(address(this), v.asset, tokens[i], true);\\n\\n        uint tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\n\\n        if (v.totalDebt != 0 || tokenBalance != 0) {\\n          //lazy initialization of the prices and decs\\n          if (v.prices.length == 0) {\\n            (v.prices, v.decs) = _getPricesAndDecs(\\n              IPriceOracle(IConverterController(converter_.controller()).priceOracle()),\\n              tokens,\\n              v.len\\n            );\\n          }\\n\\n          // repay the debt if any\\n          if (v.totalDebt != 0) {\\n            // what amount of main asset we should sell to pay the debt\\n            uint toSell = _getAmountToSell(\\n              requestedAmount,\\n              v.totalDebt,\\n              v.totalCollateral,\\n              v.prices,\\n              v.decs,\\n              indexAsset,\\n              i,\\n              tokenBalance\\n            );\\n\\n            // convert {toSell} amount of main asset to tokens[i]\\n            if (toSell != 0 && v.balance != 0) {\\n              toSell = Math.min(toSell, v.balance);\\n              (toSell, ) = _liquidate(\\n                converter_,\\n                liquidator,\\n                v.asset,\\n                tokens[i],\\n                toSell,\\n                _ASSET_LIQUIDATION_SLIPPAGE,\\n                liquidationThresholds[tokens[i]]\\n              );\\n              tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\n            }\\n\\n            // sell {toSell}, repay the debt, return collateral back; we should receive amount > toSell\\n            expectedAmount += _repayDebt(converter_, v.asset, tokens[i], tokenBalance) - toSell;\\n\\n            // we can have some leftovers after closing the debt\\n            tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\n          }\\n\\n          // directly swap leftovers\\n          if (tokenBalance != 0) {\\n            (uint spentAmountIn,) = _liquidate(\\n              converter_,\\n              liquidator,\\n              tokens[i],\\n              v.asset,\\n              tokenBalance,\\n              _ASSET_LIQUIDATION_SLIPPAGE,\\n              liquidationThresholds[v.asset]\\n            );\\n            if (spentAmountIn != 0) {\\n              // spentAmountIn can be zero if token balance is less than liquidationThreshold\\n              expectedAmount += tokenBalance * v.prices[i] * v.decs[indexAsset] / v.prices[indexAsset] / v.decs[i];\\n            }\\n          }\\n\\n          // reduce of requestedAmount on the balance increment\\n          v.newBalance = IERC20(v.asset).balanceOf(address(this));\\n          require(v.newBalance >= v.balance, AppErrors.BALANCE_DECREASE);\\n\\n          if (requestedAmount > v.newBalance - v.balance) {\\n            requestedAmount -= (v.newBalance - v.balance);\\n            v.balance = v.newBalance;\\n          } else {\\n            // we get requestedAmount on the balance and don't need to make any other conversions\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    return expectedAmount;\\n  }\\n\\n  /// @notice What amount of collateral should be sold to pay the debt and receive {requestedAmount}\\n  /// @dev It doesn't allow to sell more than the amount of total debt in the borrow\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount\\n  /// @param totalDebt Total debt of the borrow in terms of borrow asset\\n  /// @param totalCollateral Total collateral of the borrow in terms of collateral asset\\n  /// @param prices Cost of $1 in terms of the asset, decimals 18\\n  /// @param decs 10**decimals for each asset\\n  /// @param indexCollateral Index of the collateral asset in {prices} and {decs}\\n  /// @param indexBorrowAsset Index of the borrow asset in {prices} and {decs}\\n  /// @param balanceBorrowAsset Available balance of the borrow asset, it will be used to cover the debt\\n  function _getAmountToSell(\\n    uint requestedAmount,\\n    uint totalDebt,\\n    uint totalCollateral,\\n    uint[] memory prices,\\n    uint[] memory decs,\\n    uint indexCollateral,\\n    uint indexBorrowAsset,\\n    uint balanceBorrowAsset\\n  ) internal pure returns (\\n    uint amountOut\\n  ) {\\n    if (totalDebt != 0) {\\n      if (balanceBorrowAsset != 0) {\\n        // there is some borrow asset on balance\\n        // it will be used to cover the debt\\n        // let's reduce the size of totalDebt/Collateral to exclude balanceBorrowAsset\\n        uint sub = Math.min(balanceBorrowAsset, totalDebt);\\n        totalCollateral -= totalCollateral * sub / totalDebt;\\n        totalDebt -= sub;\\n      }\\n\\n      // for definiteness: usdc - collateral asset, dai - borrow asset\\n      // Pc = price of the USDC, Pb = price of the DAI, alpha = Pc / Pb [DAI / USDC]\\n      // S [USDC] - amount to sell, R [DAI] = alpha * S - amount to repay\\n      // After repaying R we get: alpha * S * C / R\\n      // Balance should be increased on: requestedAmount = alpha * S * C / R - S\\n      // So, we should sell: S = requestedAmount / (alpha * C / R - 1))\\n      // We can lost some amount on liquidation of S => R, so we need to use some gap = {GAP_AMOUNT_TO_SELL}\\n      // Same formula: S * h = S + requestedAmount, where h = health factor => s = requestedAmount / (h - 1)\\n      // h = alpha * C / R\\n      uint alpha18 = prices[indexCollateral] * decs[indexBorrowAsset] * 1e18\\n      / prices[indexBorrowAsset] / decs[indexCollateral];\\n\\n      // if totalCollateral is zero (liquidation happens) we will have zero amount (the debt shouldn't be paid)\\n      amountOut = totalDebt != 0 && alpha18 * totalCollateral / totalDebt > 1e18\\n        ? (GAP_AMOUNT_TO_SELL + DENOMINATOR)\\n          * Math.min(requestedAmount, totalCollateral) * 1e18\\n          / (alpha18 * totalCollateral / totalDebt - 1e18)\\n          / DENOMINATOR\\n        : 0;\\n\\n      // we shouldn't try to sell amount greater than amount of totalDebt in terms of collateral asset\\n      if (amountOut != 0) {\\n        amountOut = Math.min(amountOut, totalDebt * 1e18 / alpha18);\\n      }\\n    }\\n\\n    return amountOut;\\n  }\\n\\n  /// @notice Repay {amountIn} and get collateral in return, calculate expected amount\\n  ///         Take into account possible debt-gap and the fact that the amount of debt may be less than {amountIn}\\n  /// @param amountToRepay Max available amount of borrow asset that we can repay\\n  /// @return expectedAmountOut Estimated amount of main asset that should be added to balance = collateral - {toSell}\\n  function _repayDebt(\\n    ITetuConverter converter,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) internal returns (\\n    uint expectedAmountOut\\n  ) {\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // get amount of debt with debt-gap\\n    (uint needToRepay,) = converter.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\n    uint amountRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\n\\n    // get expected amount without debt-gap\\n    uint swappedAmountOut;\\n    (expectedAmountOut, swappedAmountOut) = converter.quoteRepay(address(this), collateralAsset, borrowAsset, amountRepay);\\n\\n    if (expectedAmountOut > swappedAmountOut) {\\n      // Following situation is possible\\n      //    needToRepay = 100, needToRepayExact = 90 (debt gap is 10)\\n      //    1) amountRepay = 80\\n      //       expectedAmountOut is calculated for 80, no problems\\n      //    2) amountRepay = 99,\\n      //       expectedAmountOut is calculated for 90 + 9 (90 - repay, 9 - direct swap)\\n      //       expectedAmountOut must be reduced on 9 here (!)\\n      expectedAmountOut -= swappedAmountOut;\\n    }\\n\\n    // close the debt\\n    _closePositionExact(converter, collateralAsset, borrowAsset, amountRepay, balanceBefore);\\n\\n    return expectedAmountOut;\\n  }\\n  //endregion convertAfterWithdraw\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Other helpers\\n  /////////////////////////////////////////////////////////////////////\\n\\n  function getAssetPriceFromConverter(ITetuConverter converter, address token) external view returns (uint) {\\n    return IPriceOracle(IConverterController(converter.controller()).priceOracle()).getAssetPrice(token);\\n  }\\n\\n  function registerIncome(uint assetBefore, uint assetAfter, uint earned, uint lost) internal pure returns (\\n    uint _earned,\\n    uint _lost\\n  ) {\\n    if (assetAfter > assetBefore) {\\n      earned += assetAfter - assetBefore;\\n    } else {\\n      lost += assetBefore - assetAfter;\\n    }\\n    return (earned, lost);\\n  }\\n  //endregion Other helpers\\n\\n}\\n\\n\",\"keccak256\":\"0x07cdbc72fbc434763129805c07115ee9c5e3c1ec4d99cc683ea16439d8e07ed6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61560b6200003b600b82828239805160001a60731461002e57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80637a9a23e51161007b5780637a9a23e5146101b9578063954d7e73146101e757806399c1fde414610207578063c9bce69014610227578063ca27d10d14610247578063cc3f9e6a1461026757600080fd5b80630f6e647a146100c35780631a2221c7146100fd5780632c4cf7a31461012a57806358b54f16146101585780636138ea85146101865780637a55caf3146101a6575b600080fd5b8180156100cf57600080fd5b506100e36100de366004614618565b610287565b604080519283526020830191909152015b60405180910390f35b81801561010957600080fd5b5061011d6101183660046147ef565b6102a9565b6040516100f491906148b1565b81801561013657600080fd5b5061014a6101453660046148c4565b6105be565b6040516100f492919061495e565b81801561016457600080fd5b50610178610173366004614977565b610a60565b6040519081526020016100f4565b81801561019257600080fd5b5061011d6101a13660046149e7565b611218565b6101786101b4366004614a66565b611272565b8180156101c557600080fd5b506101d96101d4366004614a9f565b6113ac565b6040516100f4929190614b79565b8180156101f357600080fd5b506100e3610202366004614b9e565b611439565b81801561021357600080fd5b50610178610222366004614bef565b611456565b81801561023357600080fd5b50610178610242366004614c82565b6116bc565b81801561025357600080fd5b506100e3610262366004614d28565b611bfe565b81801561027357600080fd5b5061011d610282366004614de8565b611c1e565b60008061029989898989898989611e75565b9150915097509795505050505050565b8351606090806001600160401b038111156102c6576102c661468f565b6040519080825280602002602001820160405280156102ef578160200160208202803683370190505b50915060005b818110156104ed578581146104e55784818151811061031657610316614e82565b60200260200101516000146104405761036287878151811061033a5761033a614e82565b602002602001015186838151811061035457610354614e82565b60200260200101518a611fef565b60006103d889604051806020016040528060008152508a8a8151811061038a5761038a614e82565b60200260200101518b86815181106103a4576103a4614e82565b60200260200101518a87815181106103be576103be614e82565b60200260200101516103d38b620186a061209a565b6120b0565b91505080600014156040518060400160405280601a81526020017f54532d3130207a65726f20626f72726f77656420616d6f756e740000000000008152509061043d5760405162461bcd60e51b81526004016104349190614ee8565b60405180910390fd5b50505b86818151811061045257610452614e82565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016104859190614efb565b602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190614f0f565b8382815181106104d8576104d8614e82565b6020026020010181815250505b6001016102f5565b5061059684868151811061050357610503614e82565b602002602001015187878151811061051d5761051d614e82565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016105509190614efb565b602060405180830381865afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105919190614f0f565b612539565b8286815181106105a8576105a8614e82565b6020026020010181815250505095945050505050565b6000606061060b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b84878151811061061d5761061d614e82565b60209081029190910101516001600160a01b03168082526040516370a0823160e01b81526370a0823190610655903090600401614efb565b602060405180830381865afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190614f0f565b60a0820152845160c082015284516001600160401b038111156106bb576106bb61468f565b6040519080825280602002602001820160405280156106e4578160200160208202803683370190505b50915060005b8160c0015181101561078c578781148061071d575084818151811061071157610711614e82565b60200260200101516000145b610784576107638a836000015188848151811061073c5761073c614e82565b602002602001015188858151811061075657610756614e82565b6020026020010151612548565b905083828151811061077757610777614e82565b6020026020010181815250505b6001016106ea565b5060005b8160c001518110156109b457878114806107c357508481815181106107b7576107b7614e82565b60200260200101516000145b6109ac578281815181106107d9576107d9614e82565b60200260200101518582815181106107f3576107f3614e82565b602002602001015111156109ac5761086c8a8a88848151811061081857610818614e82565b6020026020010151856000015187868151811061083757610837614e82565b60200260200101518a878151811061085157610851614e82565b60200260200101516108639190614f3e565b61012c8d611e75565b6060840181905260408401919091526108859085614f51565b935081604001516000146109ac5781604001518382815181106108aa576108aa614e82565b602002602001018181516108be9190614f51565b91508181525050896001600160a01b031663291f89c48783815181106108e6576108e6614e82565b602002602001015184604001518560000151866060015161012c6040518663ffffffff1660e01b8152600401610920959493929190614f64565b602060405180830381865afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190614f98565b604051806040016040528060128152602001711514cb4c4d881c1c9a58d9481a5b5c1858dd60721b815250906109aa5760405162461bcd60e51b81526004016104349190614ee8565b505b600101610790565b5080516040516370a0823160e01b81526001600160a01b03909116906370a08231906109e4903090600401614efb565b602060405180830381865afa158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a259190614f0f565b6080820181905260a082015110610a3d576000610a51565b8060a001518160800151610a519190614f3e565b9250505b965096945050505050565b6000821561120e57610ad56040518061018001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160008152602001600081526020016060815260200160608152602001600081525090565b828681518110610ae757610ae7614e82565b6020908102919091018101516001600160a01b0316908201819052835182526040516370a0823160e01b81526370a0823190610b27903090600401614efb565b602060405180830381865afa158015610b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b689190614f0f565b60a082015260005b815181101561120b5780871461120357886001600160a01b031663dd27ede7308460200151878581518110610ba757610ba7614e82565b602002602001015160016040518563ffffffff1660e01b8152600401610bd09493929190614fc1565b60408051808303816000875af1158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c129190614feb565b61010084015260e08301528351600090859083908110610c3457610c34614e82565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c679190614efb565b602060405180830381865afa158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca89190614f0f565b90508260e001516000141580610cbd57508015155b156112015782610120015151600003610dac57610d9f8a6001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d35919061500f565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d96919061500f565b8451879061266f565b6101408501526101208401525b60e083015115610fc7576000610ddb878560e001518661010001518761012001518861014001518e898961285d565b90508015801590610def575060a084015115155b15610efd57610e02818560a00151612539565b9050610e6f8b8b8660200151898781518110610e2057610e20614e82565b60200260200101518561012c8e60008e8c81518110610e4157610e41614e82565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054611e75565b5080915050858381518110610e8657610e86614e82565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610eb99190614efb565b602060405180830381865afa158015610ed6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efa9190614f0f565b91505b80610f278c8660200151898781518110610f1957610f19614e82565b602002602001015186612a28565b610f319190614f3e565b610f3b9086614f51565b9450858381518110610f4f57610f4f614e82565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f829190614efb565b602060405180830381865afa158015610f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc39190614f0f565b9150505b80156110e25760006110258b8b888681518110610fe657610fe6614e82565b602002602001015187602001518661012c8e60008c602001516001600160a01b03166001600160a01b0316815260200190815260200160002054611e75565b50905080156110e057836101400151838151811061104557611045614e82565b60200260200101518461012001518a8151811061106457611064614e82565b60200260200101518561014001518b8151811061108357611083614e82565b602002602001015186610120015186815181106110a2576110a2614e82565b6020026020010151856110b5919061502c565b6110bf919061502c565b6110c99190615043565b6110d39190615043565b6110dd9086614f51565b94505b505b82602001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111129190614efb565b602060405180830381865afa15801561112f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111539190614f0f565b610160840181905260a084015160408051808201909152601681527554532d32302062616c616e636520646563726561736560501b60208201529110156111ad5760405162461bcd60e51b81526004016104349190614ee8565b508260a001518361016001516111c39190614f3e565b8611156111fb578260a001518361016001516111df9190614f3e565b6111e99087614f3e565b61016084015160a08501529550611201565b5061120b565b505b600101610b70565b50505b9695505050505050565b606061126984848787516001600160401b038111156112395761123961468f565b604051908082528060200260200182016040528015611262578160200160208202803683370190505b5086612be8565b95945050505050565b6000826001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d6919061500f565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611337919061500f565b6001600160a01b031663b3596f07836040518263ffffffff1660e01b81526004016113629190614efb565b602060405180830381865afa15801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a39190614f0f565b90505b92915050565b60608060006113bc888888612dc5565b90506113cb8a8a8d8489612be8565b8a5190935060005b81811015611426578581815181106113ed576113ed614e82565b602002602001015187828151811061140757611407614e82565b6020026020010181815161141b9190614f51565b9052506001016113d3565b5085925050509850989650505050505050565b60008061144886868686612548565b915091505b94509492505050565b60408051808201909152600a81526914d08e8811195b9a595960b21b6020820152600090336001600160a01b038716146114a35760405162461bcd60e51b81526004016104349190614ee8565b5060008688815181106114b8576114b8614e82565b60200260200101519050806001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016114ee9190614efb565b602060405180830381865afa15801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f9190614f0f565b915088821015611648576115d6611546838b614f3e565b888a878a8a6001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ac919061500f565b6001600160a01b038816600090815260208b905260409020546115d161012c80614f51565b612ecc565b50506040516370a0823160e01b81526001600160a01b038216906370a0823190611604903090600401614efb565b602060405180830381865afa158015611621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116459190614f0f565b91505b6116528983612539565b9150811561166e5761166e6001600160a01b038216878461308f565b604080516001600160a01b0383168152602081018490527f178d2d6770c9dbd24f8d3e4dc08998cad5a42857f107435518f65c761e253bcc910160405180910390a150979650505050505050565b60006116e96040518060800160405280600081526020016060815260200160608152602001606081525090565b85518160000181815250506117c3836001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa158015611735573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611759919061500f565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba919061500f565b8251889061266f565b6040830152602082015260005b8151811015611ac85784810361180c578581815181106117f2576117f2614e82565b6020026020010151836118059190614f51565b9250611ac0565b600086828151811061182057611820614e82565b602002602001015188838151811061183a5761183a614e82565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161186d9190614efb565b602060405180830381865afa15801561188a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ae9190614f0f565b6118b89190614f51565b9050600080866001600160a01b031663dd27ede7308c8b815181106118df576118df614e82565b60200260200101518d88815181106118f9576118f9614e82565b602002602001015160006040518563ffffffff1660e01b81526004016119229493929190614fc1565b60408051808303816000875af1158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190614feb565b90925090506119738187614f51565b9550818310611a39578460400151848151811061199257611992614e82565b6020026020010151856020015189815181106119b0576119b0614e82565b602002602001015186604001518a815181106119ce576119ce614e82565b6020026020010151876020015187815181106119ec576119ec614e82565b60200260200101518587611a009190614f3e565b611a0a919061502c565b611a14919061502c565b611a1e9190615043565b611a289190615043565b611a329087614f51565b9550611abc565b846060015151600003611a8f5784516001600160401b03811115611a5f57611a5f61468f565b604051908082528060200260200182016040528015611a88578160200160208202803683370190505b5060608601525b611a998383614f3e565b85606001518581518110611aaf57611aaf614e82565b6020026020010181815250505b5050505b6001016117d0565b50805160608201515103611bf45760005b8151811015611bf25781606001518181518110611af857611af8614e82565b602002602001015160000315611bea57600082604001518281518110611b2057611b20614e82565b602002602001015183602001518781518110611b3e57611b3e614e82565b602002602001015184604001518881518110611b5c57611b5c614e82565b602002602001015185602001518581518110611b7a57611b7a614e82565b602002602001015186606001518681518110611b9857611b98614e82565b6020026020010151611baa919061502c565b611bb4919061502c565b611bbe9190615043565b611bc89190615043565b905083811115611bdb5760009350611be8565b611be58185614f3e565b93505b505b600101611ad9565b505b505b949350505050565b600080611c0f8888888888886120b0565b91509150965096945050505050565b6060611c626040518060c001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b835160608201819052835160408051808201909152601281527154532d342077726f6e67206c656e6774687360701b60208201529114611cb55760405162461bcd60e51b81526004016104349190614ee8565b506001600160a01b038916600090815260208690526040902054611cdc90620186a061209a565b604082015260608101516001600160401b03811115611cfd57611cfd61468f565b604051908082528060200260200182016040528015611d26578160200160208202803683370190505b50915060005b8160600151811015611e6757848181518110611d4a57611d4a614e82565b602002602001015182602001906001600160a01b031690816001600160a01b031681525050620186a089858381518110611d8657611d86614e82565b6020026020010151611d98919061502c565b611da29190615043565b80835215611e1957600019611dbb8984602001516130f2565b03611e19576020808301516001600160a01b03166000908152908790526040902054611dea90620186a061209a565b825110611e1957611e0e8b8884602001518d86600001516113888860400151611e75565b60a084015260808301525b8160000151848281518110611e3057611e30614e82565b6020026020010151611e429190614f3e565b838281518110611e5457611e54614e82565b6020908102919091010152600101611d2c565b505098975050505050505050565b604051633744088160e11b81526001600160a01b038681166004830152858116602483015260009182918291908a1690636e88110290604401600060405180830381865afa158015611ecb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ef391908101906150aa565b50805160408051808201909152601a81527f54532d3135204e6f206c69717569646174696f6e20726f7574650000000000006020820152919250611f4a5760405162461bcd60e51b81526004016104349190614ee8565b50604051637cbf210b60e11b81526000906001600160a01b038b169063f97e421690611f7c9085908b90600401615223565b602060405180830381865afa158015611f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbd9190614f0f565b9050848111611fce57600080611fdd565b611fdd8b838c8c8c8c8c613150565b93509350505097509795505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b03828116602483015283919085169063dd62ed3e90604401602060405180830381865afa15801561203e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120629190614f0f565b10156120955761207d6001600160a01b0384168260006133e9565b6120956001600160a01b03841682600160ff1b6133e9565b505050565b60008183116120a957816113a3565b5090919050565b600080826000036120c057600a92505b8284116120d257506000905080610a55565b61210b6040518060c001604052806000815260200160608152602001606081526020016060815260200160008152602001600081525090565b612114886134fe565b808252600019016121375761212d898989898989613525565b9250925050610a55565b60405163430ffb1760e01b81526001600160a01b038a169063430ffb179061216e908b908b908a908c906213c68090600401615245565b600060405180830381865afa15801561218b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121b391908101906152e1565b5060608401526040830152602082018190525180156125325760005b818110156125305782516122df57826040015181815181106121f3576121f3614e82565b60200260200101518710612224578260400151818151811061221757612217614e82565b6020026020010151612226565b865b6080840152604083015180518290811061224257612242614e82565b60200260200101518710612273578260600151818151811061226657612266614e82565b60200260200101516122c4565b8260400151818151811061228957612289614e82565b602002602001015187846060015183815181106122a8576122a8614e82565b60200260200101516122ba919061502c565b6122c49190615043565b60a084015260808301516122d89088614f3e565b96506123dd565b826060015181815181106122f5576122f5614e82565b60200260200101518710612326578260600151818151811061231957612319614e82565b6020026020010151612328565b865b60a0840152606083015180518290811061234457612344614e82565b60200260200101518710612375578260400151818151811061236857612368614e82565b60200260200101516123c6565b8260600151818151811061238b5761238b614e82565b602002602001015187846040015183815181106123aa576123aa614e82565b60200260200101516123bc919061502c565b6123c69190615043565b608084015260a08301516123da9088614f3e565b96505b85871080156123eb57508615155b156123f557600096505b60a083015115612522578a6001600160a01b0316630adb2d858460200151838151811061242457612424614e82565b60200260200101518b86608001518c8860a00151306040518763ffffffff1660e01b815260040161245a969594939291906153e2565b6020604051808303816000875af1158015612479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249d9190614f0f565b6124a79085614f51565b93508260800151856124b99190614f51565b94507ff63c9c64ebdd1eb99706ca3f7489f7fbdd9c8756363cef40b2fc6e293fa150ec836020015182815181106124f2576124f2614e82565b60200260200101518a85608001518b8760a0015130604051612519969594939291906153e2565b60405180910390a15b8615612530576001016121cf565b505b5050610a55565b60008183106120a957816113a3565b6000806000846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016125799190614efb565b602060405180830381865afa158015612596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ba9190614f0f565b90506000876001600160a01b031663dd27ede730898960016040518563ffffffff1660e01b81526004016125f19493929190614fc1565b60408051808303816000875af115801561260f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126339190614feb565b5090506000612650828710612648578261264a565b865b84612539565b905061265f8989898487613a43565b9450945050505094509492505050565b606080826001600160401b0381111561268a5761268a61468f565b6040519080825280602002602001820160405280156126b3578160200160208202803683370190505b509150826001600160401b038111156126ce576126ce61468f565b6040519080825280602002602001820160405280156126f7578160200160208202803683370190505b50905060005b838110156128545784818151811061271757612717614e82565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561275c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612780919061541a565b61278b90600a615521565b82828151811061279d5761279d614e82565b602002602001018181525050856001600160a01b031663b3596f078683815181106127ca576127ca614e82565b60200260200101516040518263ffffffff1660e01b81526004016127ee9190614efb565b602060405180830381865afa15801561280b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282f9190614f0f565b83828151811061284157612841614e82565b60209081029190910101526001016126fd565b50935093915050565b60008715612a1c5781156128a8576000612877838a612539565b905088612884828a61502c565b61288e9190615043565b6128989089614f3e565b97506128a4818a614f3e565b9850505b60008585815181106128bc576128bc614e82565b60200260200101518785815181106128d6576128d6614e82565b60200260200101518786815181106128f0576128f0614e82565b602002602001015189888151811061290a5761290a614e82565b602002602001015161291c919061502c565b61292e90670de0b6b3a764000061502c565b6129389190615043565b6129429190615043565b9050881580159061296e5750670de0b6b3a7640000896129628a8461502c565b61296c9190615043565b115b6129795760006129ee565b620186a0670de0b6b3a76400008a6129918b8561502c565b61299b9190615043565b6129a59190614f3e565b6129af8c8b612539565b6129be620186a06103e8614f51565b6129c8919061502c565b6129da90670de0b6b3a764000061502c565b6129e49190615043565b6129ee9190615043565b91508115612a1a57612a178282612a0d8c670de0b6b3a764000061502c565b6105919190615043565b91505b505b98975050505050505050565b600080836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612a579190614efb565b602060405180830381865afa158015612a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a989190614f0f565b90506000866001600160a01b031663dd27ede730888860016040518563ffffffff1660e01b8152600401612acf9493929190614fc1565b60408051808303816000875af1158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b119190614feb565b5090506000612b2d828610612b26578261264a565b8584612539565b60405163667df24960e01b81523060048201526001600160a01b0389811660248301528881166044830152606482018390529192506000918a169063667df2499060840160408051808303816000875af1158015612b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb39190614feb565b909550905080851115612bcd57612bca8186614f3e565b94505b612bda8989898588613a43565b505050505050949350505050565b8451606090806001600160401b03811115612c0557612c0561468f565b604051908082528060200260200182016040528015612c2e578160200160208202803683370190505b50915060005b81811015612dba57868103612c8057848181518110612c5557612c55614e82565b6020026020010151838281518110612c6f57612c6f614e82565b602002602001018181525050612db2565b6000848281518110612c9457612c94614e82565b6020026020010151868381518110612cae57612cae614e82565b6020026020010151612cc09190614f51565b90508015612db057866001600160a01b031663667df249308b8b81518110612cea57612cea614e82565b60200260200101518c8681518110612d0457612d04614e82565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015291831660248301529190911660448201526064810184905260840160408051808303816000875af1158015612d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d909190614feb565b50848381518110612da357612da3614e82565b6020026020010181815250505b505b600101612c34565b505095945050505050565b606060008215612e075782841015612df95782612dea85670de0b6b3a764000061502c565b612df49190615043565b612e0a565b670de0b6b3a7640000612e0a565b60005b8551909150806001600160401b03811115612e2757612e2761468f565b604051908082528060200260200182016040528015612e50578160200160208202803683370190505b5092508115612ec35760005b81811015612ec157670de0b6b3a764000083888381518110612e8057612e80614e82565b6020026020010151612e92919061502c565b612e9c9190615043565b848281518110612eae57612eae614e82565b6020908102919091010152600101612e5c565b505b50509392505050565b606080612ef360405180606001604052806000815260200160608152602001600081525090565b89518082526001600160401b03811115612f0f57612f0f61468f565b604051908082528060200260200182016040528015612f38578160200160208202803683370190505b5060208201525b80516040820151101561300b5789816040015181518110612f6257612f62614e82565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612f959190614efb565b602060405180830381865afa158015612fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd69190614f0f565b8160200151826040015181518110612ff057612ff0614e82565b60209081029190910101526040810180516001019052612f3f565b61307d6040518061012001604052808d81526020018c81526020018b81526020018a6001600160a01b0316815260200183602001518152602001896001600160a01b03168152602001886001600160a01b0316815260200161307088620186a061209a565b8152602001869052613c24565b909c909b509950505050505050505050565b6040516001600160a01b03831660248201526044810182905261209590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613faf565b8151600090815b8181101561314457836001600160a01b031685828151811061311d5761311d614e82565b60200260200101516001600160a01b03160361313c5791506113a69050565b6001016130f9565b50600019949350505050565b60008061315e868589611fef565b6040516370a0823160e01b81526000906001600160a01b038716906370a082319061318d903090600401614efb565b602060405180830381865afa1580156131aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ce9190614f0f565b6040516310fe133960e31b81529091506001600160a01b038916906387f099c890613201908c9089908990600401615530565b600060405180830381600087803b15801561321b57600080fd5b505af115801561322f573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03891691506370a0823190613262903090600401614efb565b602060405180830381865afa15801561327f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a39190614f0f565b90508181116132b35760006132bd565b6132bd8282614f3e565b604051630a47e27160e21b81528795509093506001600160a01b038c169063291f89c4906132f7908b9088908c9089908c90600401614f64565b602060405180830381865afa158015613314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133389190614f98565b604051806040016040528060128152602001711514cb4c4d881c1c9a58d9481a5b5c1858dd60721b815250906133815760405162461bcd60e51b81526004016104349190614ee8565b50604080516001600160a01b03808b1682528916602082015290810187905260608101859052608081018490527f5a821a618ddb1a1fd304234a69c9d7f20c129d122fcf35593d13a071926643079060a00160405180910390a1505097509795505050505050565b8015806134635750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561343d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134619190614f0f565b155b6134ce5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610434565b6040516001600160a01b03831660248201526044810182905261209590849063095ea7b360e01b906064016130bb565b6000815160000361351157506000919050565b818060200190518101906113a69190614f0f565b6000806135776040518061012001604052806060815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405163430ffb1760e01b81526001600160a01b038a169063430ffb17906135ae908b908b908a908c906213c68090600401615245565b600060405180830381865afa1580156135cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135f391908101906152e1565b5060408401526020830152808252518015613a36576000808a80602001905181019061361f9190615555565b925092505061362f8c8b8b614081565b61010085015260005b83811015613a3257670de0b6b3a76400008560400151828151811061365f5761365f614e82565b6020026020010151866101000151613677919061502c565b6136819190615043565b60c086018190528290613694908561502c565b61369e9190615043565b60a08601819052602086015180518b929190849081106136c0576136c0614e82565b60200260200101516136d29190614f51565b116136e557670de0b6b3a764000061372e565b8460a001518560200151828151811061370057613700614e82565b60200260200101516137129190614f51565b6137248a670de0b6b3a764000061502c565b61372e9190615043565b60e0860181905260208601518051670de0b6b3a76400009291908490811061375857613758614e82565b602002602001015161376a919061502c565b6137749190615043565b856060018181525050670de0b6b3a76400008560e00151866040015183815181106137a1576137a1614e82565b60200260200101516137b3919061502c565b6137bd9190615043565b608086015260608501518811806137d657506080850151155b1561381e5788888660a00151876020015184815181106137f8576137f8614e82565b602002602001015161380a9190614f51565b6138149190614f51565b11613a3257613a2a565b84608001518d6001600160a01b0316630adb2d858760000151848151811061384857613848614e82565b60200260200101518e89606001518f8b60800151306040518763ffffffff1660e01b815260040161387e969594939291906153e2565b6020604051808303816000875af115801561389d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c19190614f0f565b146040518060400160405280600f81526020016e53423a2057726f6e672076616c756560881b815250906139085760405162461bcd60e51b81526004016104349190614ee8565b507ff63c9c64ebdd1eb99706ca3f7489f7fbdd9c8756363cef40b2fc6e293fa150ec8560000151828151811061394057613940614e82565b60200260200101518c87606001518d896080015130604051613967969594939291906153e2565b60405180910390a1608085015161397e9087614f51565b95508460600151876139909190614f51565b9650670de0b6b3a764000085608001518661010001516139b0919061502c565b6139ba9190615043565b60c0860181905282906139cd908561502c565b6139d79190615043565b60a0860181905260608601516139ec91614f51565b89116139f9576000613a17565b84606001518560a00151613a0d9190614f51565b613a17908a614f3e565b985087891080613a25575088155b613a32575b600101613638565b5050505b5050965096945050505050565b600080613a5a6001600160a01b038616888661308f565b6040516314b685e960e21b81526001600160a01b038781166004830152868116602483015260448201869052306064830152600091908916906352da17a4906084016080604051808303816000875af1158015613abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613adf9190615583565b5050604080516001600160a01b03808c1682528a1660208201529081018890523060608201526080810183905260a0810182905291945091507f1d1ba11e7ca20f5dc77d8cfd75b68d11520677808f89f6ba0f0e50dc52c450129060c00160405180910390a16040516370a0823160e01b81526000906001600160a01b038816906370a0823190613b74903090600401614efb565b602060405180830381865afa158015613b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb59190614f0f565b9050808511613bc5576000613bcf565b613bcf8186614f3e565b60408051808201909152600f81526e53423a2057726f6e672076616c756560881b60208201529093508215613c175760405162461bcd60e51b81526004016104349190614ee8565b5050509550959350505050565b606080613c526040518060800160405280600081526020016060815260200160608152602001606081525090565b6020840151518082526001600160401b03811115613c7257613c7261468f565b604051908082528060200260200182016040528015613c9b578160200160208202803683370190505b5081519092506001600160401b03811115613cb857613cb861468f565b604051908082528060200260200182016040528015613ce1578160200160208202803683370190505b509250613dba8460a001516001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa158015613d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d4d919061500f565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dae919061500f565b6020860151835161266f565b604083015260208201526000805b8251811015613ee15785602001518181518110613de757613de7614e82565b60200260200101516001600160a01b031686606001516001600160a01b031603613e1357809150613ed9565b60408601518114613ed957600080613e4a86896040015181518110613e3a57613e3a614e82565b6020026020010151898786614341565b9150915081878481518110613e6157613e61614e82565b60200260200101818151613e759190614f51565b90525060408801518651829188918110613e9157613e91614e82565b60200260200101818151613ea59190614f51565b9052508751604089015187518891908110613ec257613ec2614e82565b602002602001015110613ed6575050613ee1565b50505b600101613dc8565b50846000015183866040015181518110613efd57613efd614e82565b6020026020010151108015613f16575080856040015114155b15613fa857600080613f4785886040015181518110613f3757613f37614e82565b6020026020010151888686614341565b9150915081868481518110613f5e57613f5e614e82565b60200260200101818151613f729190614f51565b90525060408701518551829187918110613f8e57613f8e614e82565b60200260200101818151613fa29190614f51565b90525050505b5050915091565b6000614004826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166144dd9092919063ffffffff16565b80519091501561209557808060200190518101906140229190614f98565b6120955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610434565b600080846001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e6919061500f565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614123573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614147919061500f565b90506000816001600160a01b031663b3596f07866040518263ffffffff1660e01b81526004016141779190614efb565b602060405180830381865afa158015614194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b89190614f0f565b90506000826001600160a01b031663b3596f07866040518263ffffffff1660e01b81526004016141e89190614efb565b602060405180830381865afa158015614205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142299190614f0f565b9050846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015614269573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061428d919061541a565b61429890600a615521565b82876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156142d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142fb919061541a565b61430690600a615521565b61431884670de0b6b3a764000061502c565b614322919061502c565b61432c9190615043565b6143369190615043565b979650505050505050565b6000808460800151838151811061435a5761435a614e82565b602002602001015160001461144d576000620186a0808761010001516143809190614f51565b866040015188604001518151811061439a5761439a614e82565b6020026020010151876020015187815181106143b8576143b8614e82565b6020026020010151886040015188815181106143d6576143d6614e82565b602002602001015189602001518b60400151815181106143f8576143f8614e82565b60200260200101518c8c600001516144109190614f3e565b61441a919061502c565b614424919061502c565b61442e9190615043565b6144389190615043565b614442919061502c565b61444c9190615043565b90506144cf8660a001518760c001518860200151878151811061447157614471614e82565b602002602001015189602001518a604001518151811061449357614493614e82565b60200260200101516144c2868c608001518b815181106144b5576144b5614e82565b6020026020010151612539565b61012c8c60e00151611e75565b909890975095505050505050565b6060611bf6848460008585600080866001600160a01b0316858760405161450491906155b9565b60006040518083038185875af1925050503d8060008114614541576040519150601f19603f3d011682016040523d82523d6000602084013e614546565b606091505b509150915061433687838387606083156145c15782516000036145ba576001600160a01b0385163b6145ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610434565b5081611bf6565b611bf683838151156145d65781518083602001fd5b8060405162461bcd60e51b81526004016104349190614ee8565b6001600160a01b038116811461460557600080fd5b50565b8035614613816145f0565b919050565b600080600080600080600060e0888a03121561463357600080fd5b873561463e816145f0565b9650602088013561464e816145f0565b9550604088013561465e816145f0565b9450606088013561466e816145f0565b9699959850939660808101359560a0820135955060c0909101359350915050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156146c7576146c761468f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156146f5576146f561468f565b604052919050565b60006001600160401b038211156147165761471661468f565b5060051b60200190565b600082601f83011261473157600080fd5b81356020614746614741836146fd565b6146cd565b82815260059290921b8401810191818101908684111561476557600080fd5b8286015b8481101561478957803561477c816145f0565b8352918301918301614769565b509695505050505050565b600082601f8301126147a557600080fd5b813560206147b5614741836146fd565b82815260059290921b840181019181810190868411156147d457600080fd5b8286015b8481101561478957803583529183019183016147d8565b600080600080600060a0868803121561480757600080fd5b8535614812816145f0565b945060208601356001600160401b038082111561482e57600080fd5b61483a89838a01614720565b955060408801359450606088013591508082111561485757600080fd5b5061486488828901614794565b95989497509295608001359392505050565b600081518084526020808501945080840160005b838110156148a65781518752958201959082019060010161488a565b509495945050505050565b6020815260006113a36020830184614876565b60008060008060008060c087890312156148dd57600080fd5b86356148e8816145f0565b955060208701356148f8816145f0565b9450604087013593506060870135925060808701356001600160401b038082111561492257600080fd5b61492e8a838b01614720565b935060a089013591508082111561494457600080fd5b5061495189828a01614794565b9150509295509295509295565b828152604060208201526000611bf66040830184614876565b60008060008060008060c0878903121561499057600080fd5b863561499b816145f0565b955060208701356149ab816145f0565b945060408701359350606087013592506080870135915060a08701356001600160401b038111156149db57600080fd5b61495189828a01614720565b600080600080608085870312156149fd57600080fd5b8435614a08816145f0565b935060208501356001600160401b0380821115614a2457600080fd5b614a3088838901614720565b9450604087013593506060870135915080821115614a4d57600080fd5b50614a5a87828801614794565b91505092959194509250565b60008060408385031215614a7957600080fd5b8235614a84816145f0565b91506020830135614a94816145f0565b809150509250929050565b600080600080600080600080610100898b031215614abc57600080fd5b614ac589614608565b975060208901356001600160401b0380821115614ae157600080fd5b614aed8c838d01614720565b985060408b0135975060608b0135915080821115614b0a57600080fd5b614b168c838d01614794565b965060808b0135955060a08b0135945060c08b0135915080821115614b3a57600080fd5b614b468c838d01614794565b935060e08b0135915080821115614b5c57600080fd5b50614b698b828c01614794565b9150509295985092959890939650565b604081526000614b8c6040830185614876565b82810360208401526112698185614876565b60008060008060808587031215614bb457600080fd5b8435614bbf816145f0565b93506020850135614bcf816145f0565b92506040850135614bdf816145f0565b9396929550929360600135925050565b600080600080600080600060e0888a031215614c0a57600080fd5b873596506020880135955060408801356001600160401b03811115614c2e57600080fd5b614c3a8a828b01614720565b9550506060880135614c4b816145f0565b93506080880135614c5b816145f0565b925060a0880135614c6b816145f0565b8092505060c0880135905092959891949750929550565b60008060008060808587031215614c9857600080fd5b84356001600160401b0380821115614caf57600080fd5b614cbb88838901614720565b95506020870135915080821115614cd157600080fd5b50614cde87828801614794565b935050604085013591506060850135614cf6816145f0565b939692955090935050565b60006001600160401b03821115614d1a57614d1a61468f565b50601f01601f191660200190565b60008060008060008060c08789031215614d4157600080fd5b8635614d4c816145f0565b955060208701356001600160401b03811115614d6757600080fd5b8701601f81018913614d7857600080fd5b8035614d8661474182614d01565b8181528a6020838501011115614d9b57600080fd5b81602084016020830137600060208383010152809750505050614dc060408801614608565b9350614dce60608801614608565b92506080870135915060a087013590509295509295509295565b600080600080600080600080610100898b031215614e0557600080fd5b614e0e89614608565b9750614e1c60208a01614608565b96506040890135955060608901356001600160401b0380821115614e3f57600080fd5b614e4b8c838d01614720565b9650614e5960808c01614608565b955060a08b0135945060c08b0135915080821115614e7657600080fd5b614b468c838d01614720565b634e487b7160e01b600052603260045260246000fd5b60005b83811015614eb3578181015183820152602001614e9b565b50506000910152565b60008151808452614ed4816020860160208601614e98565b601f01601f19169290920160200192915050565b6020815260006113a36020830184614ebc565b6001600160a01b0391909116815260200190565b600060208284031215614f2157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156113a6576113a6614f28565b808201808211156113a6576113a6614f28565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b600060208284031215614faa57600080fd5b81518015158114614fba57600080fd5b9392505050565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b60008060408385031215614ffe57600080fd5b505080516020909101519092909150565b60006020828403121561502157600080fd5b8151614fba816145f0565b80820281158282048414176113a6576113a6614f28565b60008261506057634e487b7160e01b600052601260045260246000fd5b500490565b600082601f83011261507657600080fd5b815161508461474182614d01565b81815284602083860101111561509957600080fd5b611bf6826020830160208701614e98565b60008060408084860312156150be57600080fd5b83516001600160401b03808211156150d557600080fd5b818601915086601f8301126150e957600080fd5b815160206150f9614741836146fd565b82815260079290921b8401810191818101908a84111561511857600080fd5b948201945b83861015615192576080868c0312156151365760008081fd5b61513e6146a5565b8651615149816145f0565b815286840151615158816145f0565b8185015286880151615169816145f0565b8189015260608781015161517c816145f0565b908201528252608095909501949082019061511d565b918901519197509094505050808311156151ab57600080fd5b50506151b985828601615065565b9150509250929050565b600081518084526020808501945080840160005b838110156148a657815180516001600160a01b039081168952848201518116858a01526040808301518216908a01526060918201511690880152608090960195908201906001016151d7565b60408152600061523660408301856151c3565b90508260208301529392505050565b60a08152600061525860a0830188614ebc565b6001600160a01b03968716602084015260408301959095525091909316606082015260800191909152919050565b600082601f83011261529757600080fd5b815160206152a7614741836146fd565b82815260059290921b840181019181810190868411156152c657600080fd5b8286015b8481101561478957805183529183019183016152ca565b600080600080608085870312156152f757600080fd5b84516001600160401b038082111561530e57600080fd5b818701915087601f83011261532257600080fd5b81516020615332614741836146fd565b82815260059290921b8401810191818101908b84111561535157600080fd5b948201945b83861015615378578551615369816145f0565b82529482019490820190615356565b918a015191985090935050508082111561539157600080fd5b61539d88838901615286565b945060408701519150808211156153b357600080fd5b6153bf88838901615286565b935060608701519150808211156153d557600080fd5b50614a5a87828801615286565b6001600160a01b039687168152948616602086015260408501939093529084166060840152608083015290911660a082015260c00190565b60006020828403121561542c57600080fd5b815160ff81168114614fba57600080fd5b600181815b8085111561547857816000190482111561545e5761545e614f28565b8085161561546b57918102915b93841c9390800290615442565b509250929050565b60008261548f575060016113a6565b8161549c575060006113a6565b81600181146154b257600281146154bc576154d8565b60019150506113a6565b60ff8411156154cd576154cd614f28565b50506001821b6113a6565b5060208310610133831016604e8410600b84101617156154fb575081810a6113a6565b615505838361543d565b806000190482111561551957615519614f28565b029392505050565b60006113a360ff841683615480565b60608152600061554360608301866151c3565b60208301949094525060400152919050565b60008060006060848603121561556a57600080fd5b8351925060208401519150604084015190509250925092565b6000806000806080858703121561559957600080fd5b505082516020840151604085015160609095015191969095509092509050565b600082516155cb818460208701614e98565b919091019291505056fea2646970667358221220bc99e2196354fa208b37969e9153ae4a78b1a371b56ec1ab21f90a1d94ddc7d364736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calcInvestedAssets(address[],uint256[],uint256,ITetuConverter)": {
        "details": "This is writable function because we need to update current balances in the internal protocols.",
        "returns": {
          "amountOut": "Invested asset amount under control (in terms of {asset})"
        }
      },
      "closePosition(ITetuConverter,address,address,uint256)": {
        "params": {
          "amountToRepay": "Amount to repay in terms of {borrowAsset}"
        },
        "returns": {
          "repaidAmountOut": "Amount that was actually repaid",
          "returnedAssetAmountOut": "Amount of collateral received back after repaying"
        }
      },
      "closePositionsToGetAmount(ITetuConverter,ITetuLiquidator,uint256,mapping(address => uint256) storage,uint256,address[])": {
        "details": "We assume here that this function is called before closing any positions in the current block",
        "params": {
          "liquidationThresholds": "Min allowed amounts-out for liquidations",
          "requestedAmount": "Requested amount of main asset that should be added to the current balance"
        },
        "returns": {
          "expectedAmount": "Main asset amount expected to be received on balance after all conversions and swaps"
        }
      },
      "convertAfterWithdraw(ITetuConverter,ITetuLiquidator,uint256,uint256,address[],uint256[])": {
        "params": {
          "amountsToConvert": "Amounts to convert, the order of asset is same as in {tokens}",
          "indexAsset": "Index of the main asset in {tokens}",
          "liquidationThreshold": "Min allowed amount of main asset to be liquidated in {liquidator}",
          "tokens": "Tokens received from {_depositorPoolAssets}"
        },
        "returns": {
          "collateralOut": "Total amount of main asset returned after closing positions",
          "repaidAmountsOut": "What amounts were spent in exchange of the {collateralOut}"
        }
      },
      "getTokenAmounts(ITetuConverter,address[],uint256,uint256[],uint256)": {
        "params": {
          "collaterals_": "Amounts of main asset that can be used as collateral to borrow {tokens_}",
          "thresholdMainAsset_": "Value of liquidation threshold for the main (collateral) asset",
          "tokens_": "Tokens received from {_depositorPoolAssets}"
        },
        "returns": {
          "tokenAmountsOut": "Amounts available for deposit"
        }
      },
      "liquidate(ITetuConverter,ITetuLiquidator,address,address,uint256,uint256,uint256)": {
        "params": {
          "receivedAmountOut": "Amount of {tokenOut_} has been returned by the liquidator",
          "spentAmountIn": "Amount of {tokenIn} has been consumed by the liquidator"
        }
      },
      "openPosition(ITetuConverter,bytes,address,address,uint256,uint256)": {
        "params": {
          "amountIn_": "Meaning depends on {entryData_}.",
          "entryData_": "Encoded entry kind and additional params if necessary (set of params depends on the kind)                   See TetuConverter\\EntryKinds.sol\\ENTRY_KIND_XXX constants for possible entry kinds                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible."
        }
      },
      "postWithdrawActions(ITetuConverter,address[],uint256,uint256[],uint256,uint256,uint256[],uint256[])": {
        "params": {
          "amountsToConvert": "Amounts of {tokens} to be converted, they are located on the balance before withdraw",
          "withdrawnAmounts": "Amounts of {tokens} that were withdrew from the pool"
        }
      },
      "recycle(ITetuConverter,address,uint256,address[],ITetuLiquidator,mapping(address => uint256) storage,address[],uint256[])": {
        "params": {
          "liquidationThresholds": "Liquidation thresholds for rewards tokens",
          "rewardAmounts": "Amounts of {rewardTokens_}; we assume, there are no zero amounts here",
          "rewardTokens": "Full list of reward tokens received from tetuConverter and depositor",
          "tokens": "tokens received from {_depositorPoolAssets}"
        },
        "returns": {
          "amountsToForward": "Amounts of {rewardTokens} to be sent to forwarder, zero amounts are allowed here"
        }
      },
      "swapToGivenAmountAndSendToConverter(uint256,uint256,address[],address,address,address,mapping(address => uint256) storage)": {
        "params": {
          "amountOut": "Amount of the main asset requested by converter",
          "asset": "Main asset or underlying (it can be different from tokens[indexTheAsset])",
          "indexTheAsset": "Index of the asset required by converter in the {tokens}"
        },
        "returns": {
          "amountOut": "Amount of the main asset sent to converter"
        }
      }
    },
    "stateVariables": {
      "DEFAULT_LIQUIDATION_THRESHOLD": {
        "details": "Absolute value for any token"
      },
      "GAP_AMOUNT_TO_SELL": {
        "details": "1% gap in calculation of amount-to-sell in {closePositionsToGetAmount}"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClosePosition(address,address,uint256,address,uint256,uint256)": {
        "notice": "Some borrow(s) was/were repaid"
      },
      "Liquidation(address,address,uint256,uint256,uint256)": {
        "notice": "A liquidation was made"
      },
      "OpenPosition(address,address,uint256,address,uint256,address)": {
        "notice": "A borrow was made"
      }
    },
    "kind": "user",
    "methods": {
      "calcInvestedAssets(address[],uint256[],uint256,ITetuConverter)": {
        "notice": "Calculate amount we will receive when we withdraw all from pool"
      },
      "closePosition(ITetuConverter,address,address,uint256)": {
        "notice": "Close the given position, pay {amountToRepay}, return collateral amount in result"
      },
      "closePositionsToGetAmount(ITetuConverter,ITetuLiquidator,uint256,mapping(address => uint256) storage,uint256,address[])": {
        "notice": "Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance"
      },
      "convertAfterWithdraw(ITetuConverter,ITetuLiquidator,uint256,uint256,address[],uint256[])": {
        "notice": "Convert {amountsToConvert_} (available on balance) to the main asset         Swap leftovers if any.         Result amount can be less than requested one, we don't try to close any other debts here"
      },
      "getTokenAmounts(ITetuConverter,address[],uint256,uint256[],uint256)": {
        "notice": "Make borrow and save amounts of tokens available for deposit to tokenAmounts"
      },
      "liquidate(ITetuConverter,ITetuLiquidator,address,address,uint256,uint256,uint256)": {
        "notice": "Make liquidation if estimated amountOut exceeds the given threshold"
      },
      "openPosition(ITetuConverter,bytes,address,address,uint256,uint256)": {
        "notice": "Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}         Max possible collateral should be approved before calling of this function."
      },
      "postWithdrawActions(ITetuConverter,address[],uint256,uint256[],uint256,uint256,uint256[],uint256[])": {
        "notice": "Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}"
      },
      "postWithdrawActionsEmpty(ITetuConverter,address[],uint256,uint256[])": {
        "notice": "return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}"
      },
      "recycle(ITetuConverter,address,uint256,address[],ITetuLiquidator,mapping(address => uint256) storage,address[],uint256[])": {
        "notice": "Recycle the amounts: liquidate a part of each amount, send the other part to the forwarder. We have two kinds of rewards: 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets) 2) any other rewards All received rewards are immediately \"recycled\". It means, they are divided on two parts: to forwarder, to compound   Compound-part of Rewards-2 can be liquidated   Compound part of Rewards-1 should be just added to baseAmounts All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}