{
  "address": "0x29ce0ca8d0A625Ebe1d0A2F94a2aC9Cc0f9948F1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "PROXY_CONTROLLED_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        }
      ],
      "name": "initProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newImplementation",
          "type": "address"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5b8b7637a46199b9444c76fbf636aea5802c59a284ad2dc9f121281441f9bbcb",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0x29ce0ca8d0A625Ebe1d0A2F94a2aC9Cc0f9948F1",
    "transactionIndex": 38,
    "gasUsed": "417013",
    "logsBloom": "0x
    "blockHash": "0x4a171d138d799a889d498edf286843dcd8fcaa88b122b64babf68ff240a22d08",
    "transactionHash": "0x5b8b7637a46199b9444c76fbf636aea5802c59a284ad2dc9f121281441f9bbcb",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 42623576,
        "transactionHash": "0x5b8b7637a46199b9444c76fbf636aea5802c59a284ad2dc9f121281441f9bbcb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bbbbb8c4364ec2ce52c59d2ed3e56f307e529a94",
          "0x000000000000000000000000048cfedf907c4c9ddd11ff882380906e78e84bbe"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002ded678faeee00000000000000000000000000000000000000000000000003aca382e1474284570000000000000000000000000000000000000000000001308b28fdc6984a2141000000000000000000000000000000000000000000000003ac759579b79396570000000000000000000000000000000000000000000001308b56eb2e27f90f41",
        "logIndex": 203,
        "blockHash": "0x4a171d138d799a889d498edf286843dcd8fcaa88b122b64babf68ff240a22d08"
      }
    ],
    "blockNumber": 42623576,
    "cumulativeGasUsed": "6171396",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e5087fc34b67c5c164018f34f0fe91fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PROXY_CONTROLLED_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"}],\"name\":\"initProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"belbix\",\"details\":\"Only Controller has access and should implement time-lock for upgrade action.\",\"kind\":\"dev\",\"methods\":{\"initProxy(address)\":{\"details\":\"Initialize proxy implementation. Need to call after deploy new proxy.\"},\"upgrade(address)\":{\"details\":\"Upgrade allowed only for Controller and should be done only after time-lock period\",\"params\":{\"_newImplementation\":\"Implementation address\"}}},\"stateVariables\":{\"PROXY_CONTROLLED_VERSION\":{\"details\":\"Should be incremented when contract changed\"}},\"title\":\"EIP1967 Upgradable proxy implementation.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PROXY_CONTROLLED_VERSION()\":{\"notice\":\"Version of the contract\"},\"implementation()\":{\"notice\":\"Return current logic implementation\"},\"upgrade(address)\":{\"notice\":\"Upgrade contract logic\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@tetu_io/tetu-contracts-v2/contracts/proxy/ProxyControlled.sol\":\"ProxyControlled\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0xc2ef11f0141e7e1a5df255be2e1552044deed377349cb886908f3f10ded57fa8\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaeca7db2074d7c66a20c609539e1f1656e67f6981bf01f83ad6aa8aa140c8d2e\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IProxyControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IProxyControlled {\\n\\n  function initProxy(address _logic) external;\\n\\n  function upgrade(address _newImplementation) external;\\n\\n  function implementation() external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x820dca9aa95e8c1260747149d02fb6dab3fa01ce61b1854f7d5d3e24f443e372\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/lib/InterfaceIds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Library for interface IDs\\n/// @author bogdoslav\\nlibrary InterfaceIds {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant INTERFACE_IDS_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  /// default notation:\\n  /// bytes4 public constant I_VOTER = type(IVoter).interfaceId;\\n\\n  /// As type({Interface}).interfaceId can be changed,\\n  /// when some functions changed at the interface,\\n  /// so used hardcoded interface identifiers\\n\\n  bytes4 public constant I_VOTER = bytes4(keccak256(\\\"IVoter\\\"));\\n  bytes4 public constant I_BRIBE = bytes4(keccak256(\\\"IBribe\\\"));\\n  bytes4 public constant I_GAUGE = bytes4(keccak256(\\\"IGauge\\\"));\\n  bytes4 public constant I_VE_TETU = bytes4(keccak256(\\\"IVeTetu\\\"));\\n  bytes4 public constant I_SPLITTER = bytes4(keccak256(\\\"ISplitter\\\"));\\n  bytes4 public constant I_FORWARDER = bytes4(keccak256(\\\"IForwarder\\\"));\\n  bytes4 public constant I_MULTI_POOL = bytes4(keccak256(\\\"IMultiPool\\\"));\\n  bytes4 public constant I_CONTROLLER = bytes4(keccak256(\\\"IController\\\"));\\n  bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\\\"ITetuERC165\\\"));\\n  bytes4 public constant I_STRATEGY_V2 = bytes4(keccak256(\\\"IStrategyV2\\\"));\\n  bytes4 public constant I_CONTROLLABLE = bytes4(keccak256(\\\"IControllable\\\"));\\n  bytes4 public constant I_TETU_VAULT_V2 = bytes4(keccak256(\\\"ITetuVaultV2\\\"));\\n  bytes4 public constant I_PLATFORM_VOTER = bytes4(keccak256(\\\"IPlatformVoter\\\"));\\n  bytes4 public constant I_VE_DISTRIBUTOR = bytes4(keccak256(\\\"IVeDistributor\\\"));\\n  bytes4 public constant I_TETU_CONVERTER = bytes4(keccak256(\\\"ITetuConverter\\\"));\\n  bytes4 public constant I_VAULT_INSURANCE = bytes4(keccak256(\\\"IVaultInsurance\\\"));\\n  bytes4 public constant I_STRATEGY_STRICT = bytes4(keccak256(\\\"IStrategyStrict\\\"));\\n  bytes4 public constant I_ERC4626 = bytes4(keccak256(\\\"IERC4626\\\"));\\n\\n}\\n\",\"keccak256\":\"0x7b04986058295c9dbb143dccdb2fc3e9ad38da9d03ef976163b695c394166d9b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n    // Copy msg.data. We take full control of memory in this inline assembly\\n    // block because it will not return to Solidity code. We overwrite the\\n    // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n    // Call the implementation.\\n    // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n    // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return (0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n  function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xfc1ce8617b390d13917b009035926069d4636aeaadb6904be8e38de8e0b42e8e\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/proxy/ProxyControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IProxyControlled.sol\\\";\\nimport \\\"./UpgradeableProxy.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\nimport \\\"../lib/InterfaceIds.sol\\\";\\n\\n/// @title EIP1967 Upgradable proxy implementation.\\n/// @dev Only Controller has access and should implement time-lock for upgrade action.\\n/// @author belbix\\ncontract ProxyControlled is UpgradeableProxy, IProxyControlled {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant PROXY_CONTROLLED_VERSION = \\\"1.0.1\\\";\\n\\n  /// @dev Initialize proxy implementation. Need to call after deploy new proxy.\\n  function initProxy(address _logic) external override {\\n    //make sure that given logic is controllable and not inited\\n    require(IERC165(_logic).supportsInterface(InterfaceIds.I_CONTROLLABLE), \\\"Proxy: Wrong implementation\\\");\\n    _init(_logic);\\n  }\\n\\n  /// @notice Upgrade contract logic\\n  /// @dev Upgrade allowed only for Controller and should be done only after time-lock period\\n  /// @param _newImplementation Implementation address\\n  function upgrade(address _newImplementation) external override {\\n    require(IERC165(_newImplementation).supportsInterface(InterfaceIds.I_CONTROLLABLE), \\\"Proxy: Wrong implementation\\\");\\n    require(IControllable(address(this)).isController(msg.sender), \\\"Proxy: Forbidden\\\");\\n    IControllable(address(this)).increaseRevision(_implementation());\\n    _upgradeTo(_newImplementation);\\n    // the new contract must have the same ABI and you must have the power to change it again\\n    require(IControllable(address(this)).isController(msg.sender), \\\"Proxy: Wrong implementation\\\");\\n  }\\n\\n  /// @notice Return current logic implementation\\n  function implementation() external override view returns (address) {\\n    return _implementation();\\n  }\\n}\\n\",\"keccak256\":\"0xa3859781d1e9f0c9f3017b5f82f07938d5877331ee0973289657f8f230dbde05\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/proxy/UpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/Proxy.sol\\\";\\nimport \\\"../openzeppelin/Address.sol\\\";\\n\\n/// @title OpenZeppelin https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4/contracts/proxy/UpgradeableProxy.sol\\n/// @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n///      implementation address that can be changed. This address is stored in storage in the location specified by\\n///      https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n///      implementation behind the proxy.\\n///      Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n///      {TransparentUpgradeableProxy}.\\nabstract contract UpgradeableProxy is Proxy {\\n\\n  /// @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n  ///      If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n  ///      function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n  constructor() payable {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n  }\\n\\n  /// @dev Emitted when the implementation is upgraded.\\n  event Upgraded(address indexed implementation);\\n\\n  ///@dev Storage slot with the address of the current implementation.\\n  ///     This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n  ///     validated in the constructor.\\n  bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /// @dev Post deploy initialisation for compatability with EIP-1167 factory\\n  function _init(address _logic) internal {\\n    require(_implementation() == address(0), \\\"Already inited\\\");\\n    _setImplementation(_logic);\\n  }\\n\\n  /// @dev Returns the current implementation address.\\n  function _implementation() internal view virtual override returns (address impl) {\\n    bytes32 slot = _IMPLEMENTATION_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Upgrades the proxy to a new implementation.\\n  ///      Emits an {Upgraded} event.\\n  function _upgradeTo(address newImplementation) internal virtual {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /// @dev Stores a new address in the EIP1967 implementation slot.\\n  function _setImplementation(address newImplementation) private {\\n    require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n    bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa465188f26c2acbd99125944d6c69ed7695fe3c034aa37623bf4721fcf40b3f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061003c60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd61006f565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc1461006a5761006a610096565b6100ac565b8181038181111561009057634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052600160045260246000fd5b61068a806100bb6000396000f3fe6080604052600436106100435760003560e01c80630900f0101461005a5780633bc845301461007a5780635c60da1b146100c15780639c020061146100ee57610052565b366100525761005061010e565b005b61005061010e565b34801561006657600080fd5b5061005061007536600461055d565b61012e565b34801561008657600080fd5b506100ab60405180604001604052806005815260200164312e302e3160d81b81525081565b6040516100b8919061058d565b60405180910390f35b3480156100cd57600080fd5b506100d661035c565b6040516001600160a01b0390911681526020016100b8565b3480156100fa57600080fd5b5061005061010936600461055d565b610379565b61012c6101276000805160206106358339815191525490565b61040d565b565b6040516301ffc9a760e01b815263c19fa56160e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015610179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019d91906105db565b6101c25760405162461bcd60e51b81526004016101b9906105fd565b60405180910390fd5b60405163b429afeb60e01b8152336004820152309063b429afeb90602401602060405180830381865afa1580156101fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022191906105db565b6102605760405162461bcd60e51b815260206004820152601060248201526f283937bc3c9d102337b93134b23232b760811b60448201526064016101b9565b30634fac6ccd61027c6000805160206106358339815191525490565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156102bd57600080fd5b505af11580156102d1573d6000803e3d6000fd5b505050506102de81610431565b60405163b429afeb60e01b8152336004820152309063b429afeb90602401602060405180830381865afa158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d91906105db565b6103595760405162461bcd60e51b81526004016101b9906105fd565b50565b60006103746000805160206106358339815191525490565b905090565b6040516301ffc9a760e01b815263c19fa56160e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e891906105db565b6104045760405162461bcd60e51b81526004016101b9906105fd565b61035981610471565b3660008037600080366000845af43d6000803e80801561042c573d6000f35b3d6000fd5b61043a816104d5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60006104896000805160206106358339815191525490565b6001600160a01b0316146104d05760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481a5b9a5d195960921b60448201526064016101b9565b610359815b6001600160a01b0381163b61054b5760405162461bcd60e51b815260206004820152603660248201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e74616044820152751d1a5bdb881a5cc81b9bdd08184818dbdb9d1c9858dd60521b60648201526084016101b9565b60008051602061063583398151915255565b60006020828403121561056f57600080fd5b81356001600160a01b038116811461058657600080fd5b9392505050565b600060208083528351808285015260005b818110156105ba5785810183015185820160400152820161059e565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156105ed57600080fd5b8151801515811461058657600080fd5b6020808252601b908201527f50726f78793a2057726f6e6720696d706c656d656e746174696f6e000000000060408201526060019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220d0b43224e70cc79b37238f0c182f9cb1d408d61758821ceeeb2fcbb9457398bd64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c80630900f0101461005a5780633bc845301461007a5780635c60da1b146100c15780639c020061146100ee57610052565b366100525761005061010e565b005b61005061010e565b34801561006657600080fd5b5061005061007536600461055d565b61012e565b34801561008657600080fd5b506100ab60405180604001604052806005815260200164312e302e3160d81b81525081565b6040516100b8919061058d565b60405180910390f35b3480156100cd57600080fd5b506100d661035c565b6040516001600160a01b0390911681526020016100b8565b3480156100fa57600080fd5b5061005061010936600461055d565b610379565b61012c6101276000805160206106358339815191525490565b61040d565b565b6040516301ffc9a760e01b815263c19fa56160e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015610179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019d91906105db565b6101c25760405162461bcd60e51b81526004016101b9906105fd565b60405180910390fd5b60405163b429afeb60e01b8152336004820152309063b429afeb90602401602060405180830381865afa1580156101fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022191906105db565b6102605760405162461bcd60e51b815260206004820152601060248201526f283937bc3c9d102337b93134b23232b760811b60448201526064016101b9565b30634fac6ccd61027c6000805160206106358339815191525490565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156102bd57600080fd5b505af11580156102d1573d6000803e3d6000fd5b505050506102de81610431565b60405163b429afeb60e01b8152336004820152309063b429afeb90602401602060405180830381865afa158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d91906105db565b6103595760405162461bcd60e51b81526004016101b9906105fd565b50565b60006103746000805160206106358339815191525490565b905090565b6040516301ffc9a760e01b815263c19fa56160e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e891906105db565b6104045760405162461bcd60e51b81526004016101b9906105fd565b61035981610471565b3660008037600080366000845af43d6000803e80801561042c573d6000f35b3d6000fd5b61043a816104d5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60006104896000805160206106358339815191525490565b6001600160a01b0316146104d05760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481a5b9a5d195960921b60448201526064016101b9565b610359815b6001600160a01b0381163b61054b5760405162461bcd60e51b815260206004820152603660248201527f5570677261646561626c6550726f78793a206e657720696d706c656d656e74616044820152751d1a5bdb881a5cc81b9bdd08184818dbdb9d1c9858dd60521b60648201526084016101b9565b60008051602061063583398151915255565b60006020828403121561056f57600080fd5b81356001600160a01b038116811461058657600080fd5b9392505050565b600060208083528351808285015260005b818110156105ba5785810183015185820160400152820161059e565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156105ed57600080fd5b8151801515811461058657600080fd5b6020808252601b908201527f50726f78793a2057726f6e6720696d706c656d656e746174696f6e000000000060408201526060019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220d0b43224e70cc79b37238f0c182f9cb1d408d61758821ceeeb2fcbb9457398bd64736f6c63430008110033",
  "devdoc": {
    "author": "belbix",
    "details": "Only Controller has access and should implement time-lock for upgrade action.",
    "kind": "dev",
    "methods": {
      "initProxy(address)": {
        "details": "Initialize proxy implementation. Need to call after deploy new proxy."
      },
      "upgrade(address)": {
        "details": "Upgrade allowed only for Controller and should be done only after time-lock period",
        "params": {
          "_newImplementation": "Implementation address"
        }
      }
    },
    "stateVariables": {
      "PROXY_CONTROLLED_VERSION": {
        "details": "Should be incremented when contract changed"
      }
    },
    "title": "EIP1967 Upgradable proxy implementation.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PROXY_CONTROLLED_VERSION()": {
        "notice": "Version of the contract"
      },
      "implementation()": {
        "notice": "Return current logic implementation"
      },
      "upgrade(address)": {
        "notice": "Upgrade contract logic"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}