{
  "address": "0x3781D8595924F38E1Bc6F117B6b492D78b98dB47",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_externalRateProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "externalRateProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb90673c66829acd806922ac60e4dbd482e3c1af70c27facec832132ddf2c0121",
  "receipt": {
    "to": null,
    "from": "0xaaa01Cb6C7570733aE3eDeD876a98C9Bc373803b",
    "contractAddress": "0x3781D8595924F38E1Bc6F117B6b492D78b98dB47",
    "transactionIndex": 351,
    "gasUsed": "302656",
    "logsBloom": "0x
    "blockHash": "0xb4046a55e6d67ff13bdc5dd6b155a554098530328f13f17b7f4dc93ae5f51d73",
    "transactionHash": "0xb90673c66829acd806922ac60e4dbd482e3c1af70c27facec832132ddf2c0121",
    "logs": [
      {
        "transactionIndex": 351,
        "blockNumber": 41149412,
        "transactionHash": "0xb90673c66829acd806922ac60e4dbd482e3c1af70c27facec832132ddf2c0121",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000aaa01cb6c7570733ae3eded876a98c9bc373803b",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000d1e331e957c00000000000000000000000000000000000000000000000004c126f1a4419ec1b00000000000000000000000000000000000000000001fa2703899271092650900000000000000000000000000000000000000000000000004c119d371230945b00000000000000000000000000000000000000000001fa27038a64543b0fa850",
        "logIndex": 834,
        "blockHash": "0xb4046a55e6d67ff13bdc5dd6b155a554098530328f13f17b7f4dc93ae5f51d73"
      }
    ],
    "blockNumber": 41149412,
    "cumulativeGasUsed": "27236243",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3A58a54C066FdC0f2D55FC9C89F0415C92eBf3C4",
    "0xF813a454C975ad418e8dB18764a2191D182478F4",
    "0xdEd6C522d803E35f65318a9a4d7333a22d582199"
  ],
  "numDeployments": 1,
  "solcInputHash": "05c047e6f092e3676405eaec2ac75492",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalRateProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalRateProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlehNat\",\"details\":\"Rete provider which uses external rate provider to calculate rate.      It is used to calculate rate for tokens like stMatic. We have external rate for MATIC/stMatic.\",\"kind\":\"dev\",\"methods\":{\"getRate()\":{\"details\":\"Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying token. The meaning of this rate depends on the context.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/tetu-v1/ExternalRateProvider.sol\":\"ExternalRateProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n  event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n  event Withdraw(\\n    address indexed sender,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 assets,\\n    uint256 shares\\n  );\\n\\n  /**\\n   * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n  function asset() external view returns (address assetTokenAddress);\\n\\n  /**\\n   * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n  function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n  /**\\n   * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n  function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n  function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n  function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n  function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n  function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n  function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n  /**\\n   * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n  function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n  function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n  function withdraw(\\n    uint256 assets,\\n    address receiver,\\n    address owner\\n  ) external returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n  function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n  function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n  function redeem(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x6f3a14b04b98cf4c024213b96b9fe9e521add6509d3eb3a5cef4fdc2e78a1b03\",\"license\":\"MIT\"},\"contracts/integrations/balancer/IRateProvider.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity 0.8.17;\\n\\ninterface IRateProvider {\\n  /**\\n   * @dev Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying\\n     * token. The meaning of this rate depends on the context.\\n     */\\n  function getRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x52df8b534cba82ffb3e1c622f4dcb0807b60ee722b507511732719c1c018bc1b\",\"license\":\"ISC\"},\"contracts/strategies/tetu-v1/ExternalRateProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC4626.sol\\\";\\nimport \\\"../../integrations/balancer/IRateProvider.sol\\\";\\n\\n/// @dev Rete provider which uses external rate provider to calculate rate.\\n///      It is used to calculate rate for tokens like stMatic. We have external rate for MATIC/stMatic.\\n/// @author AlehNat\\ncontract ExternalRateProvider is IRateProvider {\\n\\n  // underlying asset\\n  address public immutable asset;\\n\\n  // ERC4626 vault\\n  address public immutable vault;\\n\\n  // external rate provider\\n  address public immutable externalRateProvider;\\n\\n  constructor(address _asset, address _vault, address _externalRateProvider) {\\n    require(_asset != address(0) && _vault != address(0) && _externalRateProvider != address(0), 'mandatory params');\\n    asset = _asset;\\n    vault = _vault;\\n    externalRateProvider = _externalRateProvider;\\n  }\\n\\n  function getRate() external view override returns (uint256) {\\n    uint assetPrecision = 10 ** IERC20Metadata(asset).decimals();\\n    return IERC4626(vault).convertToAssets(assetPrecision) * IRateProvider(externalRateProvider).getRate() / assetPrecision;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xc4681f0b7ba0614a1999d1216b869415c8587c317c9fa8e63db76223f2308e76\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516105d03803806105d083398101604081905261002f916100df565b6001600160a01b0383161580159061004f57506001600160a01b03821615155b801561006357506001600160a01b03811615155b6100a65760405162461bcd60e51b815260206004820152601060248201526f6d616e6461746f727920706172616d7360801b604482015260640160405180910390fd5b6001600160a01b0392831660805290821660a0521660c052610122565b80516001600160a01b03811681146100da57600080fd5b919050565b6000806000606084860312156100f457600080fd5b6100fd846100c3565b925061010b602085016100c3565b9150610119604085016100c3565b90509250925092565b60805160a05160c05161046e61016260003960008181609a015261018e01526000818160d701526102240152600081816056015260fe015261046e6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806338d52e0f146100515780634a3722ac14610095578063679aefce146100bc578063fbfa77cf146100d2575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6100c46100f9565b60405190815260200161008c565b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017e91906102b1565b61018990600a6103d7565b9050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020e91906103e6565b6040516303d1689d60e11b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307a2d13a90602401602060405180830381865afa158015610273573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029791906103e6565b6102a191906103ff565b6102ab9190610416565b91505090565b6000602082840312156102c357600080fd5b815160ff811681146102d457600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561032c578160001904821115610312576103126102db565b8085161561031f57918102915b93841c93908002906102f6565b509250929050565b600082610343575060016103d1565b81610350575060006103d1565b816001811461036657600281146103705761038c565b60019150506103d1565b60ff841115610381576103816102db565b50506001821b6103d1565b5060208310610133831016604e8410600b84101617156103af575081810a6103d1565b6103b983836102f1565b80600019048211156103cd576103cd6102db565b0290505b92915050565b60006102d460ff841683610334565b6000602082840312156103f857600080fd5b5051919050565b80820281158282048414176103d1576103d16102db565b60008261043357634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d7114fee576edb21293a922ee43539673ca83442ad7638222a7a82b771985d0864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806338d52e0f146100515780634a3722ac14610095578063679aefce146100bc578063fbfa77cf146100d2575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6100c46100f9565b60405190815260200161008c565b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017e91906102b1565b61018990600a6103d7565b9050807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020e91906103e6565b6040516303d1689d60e11b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307a2d13a90602401602060405180830381865afa158015610273573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029791906103e6565b6102a191906103ff565b6102ab9190610416565b91505090565b6000602082840312156102c357600080fd5b815160ff811681146102d457600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561032c578160001904821115610312576103126102db565b8085161561031f57918102915b93841c93908002906102f6565b509250929050565b600082610343575060016103d1565b81610350575060006103d1565b816001811461036657600281146103705761038c565b60019150506103d1565b60ff841115610381576103816102db565b50506001821b6103d1565b5060208310610133831016604e8410600b84101617156103af575081810a6103d1565b6103b983836102f1565b80600019048211156103cd576103cd6102db565b0290505b92915050565b60006102d460ff841683610334565b6000602082840312156103f857600080fd5b5051919050565b80820281158282048414176103d1576103d16102db565b60008261043357634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d7114fee576edb21293a922ee43539673ca83442ad7638222a7a82b771985d0864736f6c63430008110033",
  "devdoc": {
    "author": "AlehNat",
    "details": "Rete provider which uses external rate provider to calculate rate.      It is used to calculate rate for tokens like stMatic. We have external rate for MATIC/stMatic.",
    "kind": "dev",
    "methods": {
      "getRate()": {
        "details": "Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying token. The meaning of this rate depends on the context."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}