{
  "address": "0xE232647153DC596843e81542f666CfA862Cdb620",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xTetuAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CompoundRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositToPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "InvestAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ManualClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAllFromPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAllToVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "WithdrawToVault",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLATFORM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRICT_STRATEGY_BASE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "doHardWork",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isReadyToHardWork",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidator",
      "outputs": [
        {
          "internalType": "contract ITetuLiquidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract ISmartVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xTetuAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7534d2d79988becb324bbe4dc8dd5434f1f0d32591ff83875c81278d57d7af60",
  "receipt": {
    "to": null,
    "from": "0xaaa01Cb6C7570733aE3eDeD876a98C9Bc373803b",
    "contractAddress": "0xE232647153DC596843e81542f666CfA862Cdb620",
    "transactionIndex": 83,
    "gasUsed": "1512464",
    "logsBloom": "0x
    "blockHash": "0x5c6ecb4228dfdb005f344a02bbb2b7eec7d53c59c1f2508a4666c35ecfc08b02",
    "transactionHash": "0x7534d2d79988becb324bbe4dc8dd5434f1f0d32591ff83875c81278d57d7af60",
    "logs": [
      {
        "transactionIndex": 83,
        "blockNumber": 40602475,
        "transactionHash": "0x7534d2d79988becb324bbe4dc8dd5434f1f0d32591ff83875c81278d57d7af60",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000aaa01cb6c7570733ae3eded876a98c9bc373803b",
          "0x0000000000000000000000002c74ca71679cf1299936d6104d825c965448907b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001ae1ed202cff4d0000000000000000000000000000000000000000000000000d1e00517dd11cef10000000000000000000000000000000000000000000000ee1db7973c8ef083d2000000000000000000000000000000000000000000000000d031e645da41da210000000000000000000000000000000000000000000000ee1f65b60e91c078a2",
        "logIndex": 343,
        "blockHash": "0x5c6ecb4228dfdb005f344a02bbb2b7eec7d53c59c1f2508a4666c35ecfc08b02"
      }
    ],
    "blockNumber": 40602475,
    "cumulativeGasUsed": "14217813",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa0a88Eaf9b0c4f09dE183F5ba3ba4Bd967a92093",
    "0xC737eaB847Ae6A92028862fE38b828db41314772",
    "0x225084D30cc297F3b177d9f93f5C3Ab8fb6a1454"
  ],
  "numDeployments": 1,
  "solcInputHash": "2b2701d8c168e024218cf5150904697d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xTetuAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CompoundRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InvestAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ManualClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawToVault\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRICT_STRATEGY_BASE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyToHardWork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidator\",\"outputs\":[{\"internalType\":\"contract ITetuLiquidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ISmartVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xTetuAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlehNat\",\"kind\":\"dev\",\"methods\":{\"getRate()\":{\"details\":\"Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying token. The meaning of this rate depends on the context.\"},\"init(address)\":{\"details\":\"Initialize with the vault. Can be called only once.\"},\"investAll()\":{\"details\":\"Stakes everything the strategy holds into the reward pool.\"},\"investedAssets()\":{\"details\":\"Amount of underlying assets invested to the pool.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalAssets()\":{\"details\":\"Total amount of underlying assets under control of this strategy.\"},\"withdrawAllToVault()\":{\"details\":\"Withdraws all underlying assets to the vault\"},\"withdrawToVault(uint256)\":{\"details\":\"Withdraws some assets to the vault\"}},\"stateVariables\":{\"isReadyToHardWork\":{\"details\":\"Usually, indicate that claimable rewards have reasonable amount.\"}},\"title\":\"Simple auto compounding strategy for TETU V1 vaults.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/tetu-v1/TetuV1SingleTokenStrictStrategy.sol\":\"TetuV1SingleTokenStrictStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaeca7db2074d7c66a20c609539e1f1656e67f6981bf01f83ad6aa8aa140c8d2e\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n  event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n  event Withdraw(\\n    address indexed sender,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 assets,\\n    uint256 shares\\n  );\\n\\n  /**\\n   * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n  function asset() external view returns (address assetTokenAddress);\\n\\n  /**\\n   * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n  function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n  /**\\n   * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n  function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n  function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n  function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n  function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n  function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n  function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n  /**\\n   * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n  function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n  function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n  function withdraw(\\n    uint256 assets,\\n    address receiver,\\n    address owner\\n  ) external returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n  function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n  /**\\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n  function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n  function redeem(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x6f3a14b04b98cf4c024213b96b9fe9e521add6509d3eb3a5cef4fdc2e78a1b03\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IForwarder {\\n\\n  function tokenPerDestinationLength(address destination) external view returns (uint);\\n\\n  function tokenPerDestinationAt(address destination, uint i) external view returns (address);\\n\\n  function registerIncome(\\n    address[] memory tokens,\\n    uint[] memory amounts,\\n    address vault,\\n    bool isDistribute\\n  ) external;\\n\\n  function distributeAll(address destination) external;\\n\\n  function distribute(address token) external;\\n\\n  function setInvestFundRatio(uint value) external;\\n\\n  function setGaugesRatio(uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x9578a78fd2642bb6b80d538729a287edc396cbc4b0c33fafb1411a84ad162829\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyStrict.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStrategyStrict {\\n\\n  function NAME() external view returns (string memory);\\n\\n  function PLATFORM() external view returns (string memory);\\n\\n  function STRATEGY_VERSION() external view returns (string memory);\\n\\n  function asset() external view returns (address);\\n\\n  function vault() external view returns (address);\\n\\n  function compoundRatio() external view returns (uint);\\n\\n  function totalAssets() external view returns (uint);\\n\\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\\n  function isReadyToHardWork() external view returns (bool);\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint amount) external;\\n\\n  function investAll() external;\\n\\n  function doHardWork() external returns (uint earned, uint lost);\\n\\n}\\n\",\"keccak256\":\"0x25169ce5d219b53144d52a5b631c42fd6f3ca022449b07816a83fa28f6125c61\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStrategyV2 {\\n\\n  function NAME() external view returns (string memory);\\n\\n  function PLATFORM() external view returns (string memory);\\n\\n  function STRATEGY_VERSION() external view returns (string memory);\\n\\n  function asset() external view returns (address);\\n\\n  function splitter() external view returns (address);\\n\\n  function compoundRatio() external view returns (uint);\\n\\n  function totalAssets() external view returns (uint);\\n\\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\\n  function isReadyToHardWork() external view returns (bool);\\n\\n  /// @return totalAssetsDelta The {strategy} can update its totalAssets amount internally before withdrawing\\n  ///                          Return [totalAssets-before-withdraw - totalAssets-before-call-of-withdrawAllToSplitter]\\n  function withdrawAllToSplitter() external returns (int totalAssetsDelta);\\n\\n  /// @return totalAssetsDelta The {strategy} can update its totalAssets amount internally before withdrawing\\n  ///                          Return [totalAssets-before-withdraw - totalAssets-before-call-of-withdrawToSplitter]\\n  function withdrawToSplitter(uint amount) external returns (int totalAssetsDelta);\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// @param amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return totalAssetsDelta The {strategy} can update its totalAssets amount internally before depositing {amount_}\\n  ///                          Return [totalAssets-before-deposit - totalAssets-before-call-of-investAll]\\n  function investAll(\\n    uint amount_,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external returns (\\n    int totalAssetsDelta\\n  );\\n\\n  function doHardWork() external returns (uint earned, uint lost);\\n\\n  function setCompoundRatio(uint value) external;\\n\\n  /// @notice Max amount that can be deposited to the strategy (its internal capacity), see SCB-593.\\n  ///         0 means no deposit is allowed at this moment\\n  function capacity() external view returns (uint);\\n\\n  /// @notice {performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\\n  function performanceReceiver() external view returns (address);\\n\\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n  /// @dev use FEE_DENOMINATOR\\n  function performanceFee() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf9399198fa1a6d0a0ee4c4d15cd45cb46b78dc2ed28e938d9ef09bb997680791\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0xd5fe6f3ab750cc2d23f573597db5607c701e74c39e13c20c07a921a26c6d5012\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/lib/InterfaceIds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Library for interface IDs\\n/// @author bogdoslav\\nlibrary InterfaceIds {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant INTERFACE_IDS_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  /// default notation:\\n  /// bytes4 public constant I_VOTER = type(IVoter).interfaceId;\\n\\n  /// As type({Interface}).interfaceId can be changed,\\n  /// when some functions changed at the interface,\\n  /// so used hardcoded interface identifiers\\n\\n  bytes4 public constant I_VOTER = bytes4(keccak256(\\\"IVoter\\\"));\\n  bytes4 public constant I_BRIBE = bytes4(keccak256(\\\"IBribe\\\"));\\n  bytes4 public constant I_GAUGE = bytes4(keccak256(\\\"IGauge\\\"));\\n  bytes4 public constant I_VE_TETU = bytes4(keccak256(\\\"IVeTetu\\\"));\\n  bytes4 public constant I_SPLITTER = bytes4(keccak256(\\\"ISplitter\\\"));\\n  bytes4 public constant I_FORWARDER = bytes4(keccak256(\\\"IForwarder\\\"));\\n  bytes4 public constant I_MULTI_POOL = bytes4(keccak256(\\\"IMultiPool\\\"));\\n  bytes4 public constant I_CONTROLLER = bytes4(keccak256(\\\"IController\\\"));\\n  bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\\\"ITetuERC165\\\"));\\n  bytes4 public constant I_STRATEGY_V2 = bytes4(keccak256(\\\"IStrategyV2\\\"));\\n  bytes4 public constant I_CONTROLLABLE = bytes4(keccak256(\\\"IControllable\\\"));\\n  bytes4 public constant I_TETU_VAULT_V2 = bytes4(keccak256(\\\"ITetuVaultV2\\\"));\\n  bytes4 public constant I_PLATFORM_VOTER = bytes4(keccak256(\\\"IPlatformVoter\\\"));\\n  bytes4 public constant I_VE_DISTRIBUTOR = bytes4(keccak256(\\\"IVeDistributor\\\"));\\n  bytes4 public constant I_TETU_CONVERTER = bytes4(keccak256(\\\"ITetuConverter\\\"));\\n  bytes4 public constant I_VAULT_INSURANCE = bytes4(keccak256(\\\"IVaultInsurance\\\"));\\n  bytes4 public constant I_STRATEGY_STRICT = bytes4(keccak256(\\\"IStrategyStrict\\\"));\\n  bytes4 public constant I_ERC4626 = bytes4(keccak256(\\\"IERC4626\\\"));\\n\\n}\\n\",\"keccak256\":\"0x7b04986058295c9dbb143dccdb2fc3e9ad38da9d03ef976163b695c394166d9b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n     */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xcaaf196e5c26fdcd072a9f0833b54cf9fbd12d08be59898f04611f685d31707a\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\",\"keccak256\":\"0x2c5be0f4a60126b08e20f40586958ec1b76a27b69406c4b0db19e9dc6f771cfc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyStrictBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IStrategyV2.sol\\\";\\nimport \\\"../interfaces/IForwarder.sol\\\";\\nimport \\\"../interfaces/IERC4626.sol\\\";\\nimport \\\"../interfaces/IStrategyStrict.sol\\\";\\nimport \\\"../tools/TetuERC165.sol\\\";\\n\\n/// @title Abstract contract for base strict strategy functionality\\n/// @author AlehNat\\nabstract contract StrategyStrictBase is IStrategyStrict, TetuERC165 {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant STRICT_STRATEGY_BASE_VERSION = \\\"1.0.0\\\";\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant WRONG_CONTROLLER = \\\"SB: Wrong controller\\\";\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant IMPACT_TOO_HIGH = \\\"SB: Impact too high\\\";\\n  string internal constant WRONG_AMOUNT = \\\"SB: Wrong amount\\\";\\n  string internal constant ALREADY_INITIALIZED = \\\"SB: Already initialized\\\";\\n\\n  // *************************************************************\\n  //                        VARIABLES\\n  //                Keep names and ordering!\\n  //                 Add only in the bottom.\\n  // *************************************************************\\n\\n  /// @dev Underlying asset\\n  address public override asset;\\n  /// @dev Linked vault\\n  address public override vault;\\n  /// @dev Percent of profit for autocompound inside this strategy.\\n  uint public override compoundRatio;\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event WithdrawAllToVault(uint amount);\\n  event WithdrawToVault(uint amount, uint sent, uint balance);\\n  event EmergencyExit(address sender, uint amount);\\n  event ManualClaim(address sender);\\n  event InvestAll(uint balance);\\n  event DepositToPool(uint amount);\\n  event WithdrawFromPool(uint amount);\\n  event WithdrawAllFromPool(uint amount);\\n  event Claimed(address token, uint amount);\\n  event CompoundRatioChanged(uint oldValue, uint newValue);\\n\\n  // *************************************************************\\n  //                        INIT\\n  // *************************************************************\\n\\n  /// @dev Initialize with the vault. Can be called only once.\\n  function init(address _vault) external {\\n    require(vault == address(0), ALREADY_INITIALIZED);\\n    _requireInterface(_vault, InterfaceIds.I_ERC4626);\\n    asset = IERC4626(_vault).asset();\\n    vault = _vault;\\n  }\\n\\n  // *************************************************************\\n  //                        VIEWS\\n  // *************************************************************\\n\\n  /// @dev Total amount of underlying assets under control of this strategy.\\n  function totalAssets() public view override returns (uint) {\\n    return IERC20(asset).balanceOf(address(this)) + investedAssets();\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_STRATEGY_STRICT || super.supportsInterface(interfaceId);\\n  }\\n\\n  // *************************************************************\\n  //                    DEPOSIT/WITHDRAW\\n  // *************************************************************\\n\\n  /// @dev Stakes everything the strategy holds into the reward pool.\\n  function investAll() external override {\\n    require(msg.sender == vault, DENIED);\\n    address _asset = asset; // gas saving\\n    uint balance = IERC20(_asset).balanceOf(address(this));\\n    if (balance > 0) {\\n      _depositToPool(balance);\\n    }\\n    emit InvestAll(balance);\\n  }\\n\\n  /// @dev Withdraws all underlying assets to the vault\\n  function withdrawAllToVault() external override {\\n    address _vault = vault;\\n    address _asset = asset; // gas saving\\n    require(msg.sender == _vault, DENIED);\\n    _withdrawAllFromPool();\\n    uint balance = IERC20(_asset).balanceOf(address(this));\\n\\n    if (balance != 0) {\\n      IERC20(_asset).safeTransfer(_vault, balance);\\n    }\\n    emit WithdrawAllToVault(balance);\\n  }\\n\\n  /// @dev Withdraws some assets to the vault\\n  function withdrawToVault(uint amount) external override {\\n    address _vault = vault;\\n    address _asset = asset; // gas saving\\n    require(msg.sender == _vault, DENIED);\\n    uint balance = IERC20(_asset).balanceOf(address(this));\\n    if (amount > balance) {\\n      _withdrawFromPool(amount - balance);\\n      balance = IERC20(_asset).balanceOf(address(this));\\n    }\\n\\n    uint amountAdjusted = Math.min(amount, balance);\\n    if (amountAdjusted != 0) {\\n      IERC20(_asset).safeTransfer(_vault, amountAdjusted);\\n    }\\n    emit WithdrawToVault(amount, amountAdjusted, balance);\\n  }\\n\\n  // *************************************************************\\n  //                       VIRTUAL\\n  // These functions must be implemented in the strategy contract\\n  // *************************************************************\\n\\n  /// @dev Amount of underlying assets invested to the pool.\\n  function investedAssets() public view virtual returns (uint);\\n\\n  /// @dev Deposit given amount to the pool.\\n  function _depositToPool(uint amount) internal virtual;\\n\\n  /// @dev Withdraw given amount from the pool.\\n  /// @return investedAssetsUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\\n  /// @return assetPrice Price of the strategy {asset}.\\n  function _withdrawFromPool(uint amount) internal virtual returns (uint investedAssetsUSD, uint assetPrice);\\n\\n  /// @dev Withdraw all from the pool.\\n  /// @return investedAssetsUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\\n  /// @return assetPrice Price of the strategy {asset}.\\n  function _withdrawAllFromPool() internal virtual returns (uint investedAssetsUSD, uint assetPrice);\\n\\n  /// @dev If pool support emergency withdraw need to call it for emergencyExit()\\n  ///      Withdraw assets without impact checking.\\n  function _emergencyExitFromPool() internal virtual;\\n\\n  /// @dev Claim all possible rewards.\\n  function _claim() internal virtual;\\n\\n}\\n\",\"keccak256\":\"0xfec2571ad4cf01f4c2d91b4afde44d4ee0924082702171a29cbbec9d86f3d3e6\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/tools/TetuERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/ERC165.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../lib/InterfaceIds.sol\\\";\\n\\n/// @dev Tetu Implementation of the {IERC165} interface extended with helper functions.\\n/// @author bogdoslav\\nabstract contract TetuERC165 is ERC165 {\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_TETU_ERC165 || super.supportsInterface(interfaceId);\\n  }\\n\\n  // *************************************************************\\n  //                        HELPER FUNCTIONS\\n  // *************************************************************\\n  /// @author bogdoslav\\n\\n  /// @dev Checks what interface with id is supported by contract.\\n  /// @return bool. Do not throws\\n  function _isInterfaceSupported(address contractAddress, bytes4 interfaceId) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    try IERC165(contractAddress).supportsInterface(interfaceId) returns (bool isSupported) {\\n      return isSupported;\\n    } catch {\\n    }\\n    return false;\\n  }\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireInterface(address contractAddress, bytes4 interfaceId) internal view {\\n    require(_isInterfaceSupported(contractAddress, interfaceId), \\\"Interface is not supported\\\");\\n  }\\n\\n  /// @dev Checks what address is ERC20.\\n  /// @return bool. Do not throws\\n  function _isERC20(address contractAddress) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    bool totalSupplySupported;\\n    try IERC20(contractAddress).totalSupply() returns (uint) {\\n      totalSupplySupported = true;\\n    } catch {\\n    }\\n\\n    bool balanceSupported;\\n    try IERC20(contractAddress).balanceOf(address(this)) returns (uint) {\\n      balanceSupported = true;\\n    } catch {\\n    }\\n\\n    return totalSupplySupported && balanceSupported;\\n  }\\n\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireERC20(address contractAddress) internal view {\\n    require(_isERC20(contractAddress), \\\"Not ERC20\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xeb61b3112015589667319274e5284107728bd4846cc357d158a51397cedacaba\",\"license\":\"MIT\"},\"contracts/helpers/ERC20Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\n/// @title Contract with helper functions.\\n/// @author bogdoslav\\ncontract ERC20Helpers {\\n  using SafeERC20 for IERC20;\\n\\n  function _balance(address token) internal view returns (uint) {\\n    return IERC20(token).balanceOf(address(this));\\n  }\\n\\n  /// @notice Should be used for third-party pools\\n  function _safeApprove(address token, uint amount, address spender) internal {\\n    IERC20(token).safeApprove(spender, 0);\\n    IERC20(token).safeApprove(spender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xebc566f0d6aedfedc62b0bcde2a887faaf67e755e93394f169e34b82ad68ca9d\",\"license\":\"MIT\"},\"contracts/integrations/balancer/IRateProvider.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity 0.8.17;\\n\\ninterface IRateProvider {\\n  /**\\n   * @dev Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying\\n     * token. The meaning of this rate depends on the context.\\n     */\\n  function getRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x52df8b534cba82ffb3e1c622f4dcb0807b60ee722b507511732719c1c018bc1b\",\"license\":\"ISC\"},\"contracts/integrations/tetu-v1/ISmartVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISmartVault {\\n  function DEPOSIT_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function LOCK_PENALTY_DENOMINATOR() external view returns (uint256);\\n\\n  function TO_INVEST_DENOMINATOR() external view returns (uint256);\\n\\n  function VERSION() external view returns (string memory);\\n\\n  function active() external view returns (bool);\\n\\n  function addRewardToken(address rt) external;\\n\\n  function alwaysInvest() external view returns (bool);\\n\\n  function availableToInvestOut() external view returns (uint256);\\n\\n  function changeActivityStatus(bool _active) external;\\n\\n  function changeAlwaysInvest(bool _active) external;\\n\\n  function changeDoHardWorkOnInvest(bool _active) external;\\n\\n  function changePpfsDecreaseAllowed(bool _value) external;\\n\\n  function changeProtectionMode(bool _active) external;\\n\\n  function deposit(uint256 amount) external;\\n\\n  function depositAndInvest(uint256 amount) external;\\n\\n  function depositFeeNumerator() external view returns (uint256);\\n\\n  function depositFor(uint256 amount, address holder) external;\\n\\n  function disableLock() external;\\n\\n  function doHardWork() external;\\n\\n  function doHardWorkOnInvest() external view returns (bool);\\n\\n  function duration() external view returns (uint256);\\n\\n  function earned(address rt, address account) external view returns (uint256);\\n\\n  function earnedWithBoost(address rt, address account) external view returns (uint256);\\n\\n  function exit() external;\\n\\n  function getAllRewards() external;\\n\\n  function getAllRewardsAndRedirect(address owner) external;\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getReward(address rt) external;\\n\\n  function getRewardTokenIndex(address rt) external view returns (uint256);\\n\\n  function initializeSmartVault(\\n    string memory _name,\\n    string memory _symbol,\\n    address _controller,\\n    address __underlying,\\n    uint256 _duration,\\n    bool _lockAllowed,\\n    address _rewardToken,\\n    uint256 _depositFee\\n  ) external;\\n\\n  function lastTimeRewardApplicable(address rt) external view returns (uint256);\\n\\n  function lastUpdateTimeForToken(address) external view returns (uint256);\\n\\n  function lockAllowed() external view returns (bool);\\n\\n  function lockPenalty() external view returns (uint256);\\n\\n  function notifyRewardWithoutPeriodChange(address _rewardToken, uint256 _amount) external;\\n\\n  function notifyTargetRewardAmount(address _rewardToken, uint256 amount) external;\\n\\n  function overrideName(string memory value) external;\\n\\n  function overrideSymbol(string memory value) external;\\n\\n  function periodFinishForToken(address) external view returns (uint256);\\n\\n  function ppfsDecreaseAllowed() external view returns (bool);\\n\\n  function protectionMode() external view returns (bool);\\n\\n  function rebalance() external;\\n\\n  function removeRewardToken(address rt) external;\\n\\n  function rewardPerToken(address rt) external view returns (uint256);\\n\\n  function rewardPerTokenStoredForToken(address) external view returns (uint256);\\n\\n  function rewardRateForToken(address) external view returns (uint256);\\n\\n  function rewardTokens() external view returns (address[] memory);\\n\\n  function rewardTokensLength() external view returns (uint256);\\n\\n  function rewardsForToken(address, address) external view returns (uint256);\\n\\n  function setLockPenalty(uint256 _value) external;\\n\\n  function setRewardsRedirect(address owner, address receiver) external;\\n\\n  function setLockPeriod(uint256 _value) external;\\n\\n  function setStrategy(address newStrategy) external;\\n\\n  function setToInvest(uint256 _value) external;\\n\\n  function stop() external;\\n\\n  function strategy() external view returns (address);\\n\\n  function toInvest() external view returns (uint256);\\n\\n  function underlying() external view returns (address);\\n\\n  function underlyingBalanceInVault() external view returns (uint256);\\n\\n  function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n  function underlyingBalanceWithInvestmentForHolder(address holder) external view returns (uint256);\\n\\n  function underlyingUnit() external view returns (uint256);\\n\\n  function userBoostTs(address) external view returns (uint256);\\n\\n  function userLastDepositTs(address) external view returns (uint256);\\n\\n  function userLastWithdrawTs(address) external view returns (uint256);\\n\\n  function userLockTs(address) external view returns (uint256);\\n\\n  function userRewardPerTokenPaidForToken(address, address) external view returns (uint256);\\n\\n  function withdraw(uint256 numberOfShares) external;\\n\\n  function withdrawAllToVault() external;\\n\\n  function getAllRewardsFor(address rewardsReceiver) external;\\n\\n  function lockPeriod() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x658b9a2031976dcb4b0a503dd0985a376fab17f0c32a4f5f327ed346e68e781c\",\"license\":\"MIT\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\n/// @notice Common internal utils\\nlibrary AppLib {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Unchecked increment for for-cycles\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n  unchecked {\\n    return i + 1;\\n  }\\n  }\\n\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\n  /// @dev Should NOT be used for third-party pools\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\n      IERC20(token).safeApprove(spender, 0);\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\n      IERC20(token).safeApprove(spender, 2 ** 255);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb1933003632a71f0545ba76959b0dcbb3a3f60043149c456d33e52e46649ee7e\",\"license\":\"MIT\"},\"contracts/strategies/tetu-v1/TetuV1SingleTokenStrictStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyStrictBase.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../../integrations/tetu-v1/ISmartVault.sol\\\";\\nimport \\\"../../libs/AppLib.sol\\\";\\nimport \\\"../../helpers/ERC20Helpers.sol\\\";\\nimport \\\"../../integrations/balancer/IRateProvider.sol\\\";\\n\\n/// @title Simple auto compounding strategy for TETU V1 vaults.\\n/// @author AlehNat\\ncontract TetuV1SingleTokenStrictStrategy is StrategyStrictBase, IRateProvider, ERC20Helpers {\\n  using SafeERC20 for IERC20;\\n\\n  string public constant override NAME = \\\"TetuV1 Single Token Strict Strategy\\\";\\n  string public constant override PLATFORM = \\\"TETU\\\";\\n  string public constant override STRATEGY_VERSION = \\\"1.0.0\\\";\\n\\n  uint private constant _ASSET_LIQUIDATION_SLIPPAGE = 5000; // 5%\\n\\n  // in this strategy TETU V1 vault is used as a pool\\n  ISmartVault public immutable pool;\\n  ITetuLiquidator public immutable liquidator;\\n  address public immutable xTetuAddress;\\n\\n  bool public override isReadyToHardWork;\\n\\n  constructor(address _pool, address _liquidator, address _xTetuAddress) {\\n    require(_pool != address(0) && _liquidator != address(0) && _xTetuAddress != address(0), '!address');\\n    pool = ISmartVault(_pool);\\n    liquidator = ITetuLiquidator(_liquidator);\\n    xTetuAddress = _xTetuAddress;\\n    isReadyToHardWork = true;\\n  }\\n\\n\\n  // uint earned, uint lost is it in USD?\\n  function doHardWork() external override returns (uint earned, uint lost) {\\n    // if we have some asset in the strategy we need to deposit it to the pool to not liquidate it.\\n    uint assetBalanceBeforeClaim = _balance(asset);\\n    if (assetBalanceBeforeClaim > 0) {\\n      _depositToPool(assetBalanceBeforeClaim);\\n    }\\n\\n    uint strategyBalanceBefore = pool.underlyingBalanceWithInvestmentForHolder(address(this));\\n\\n    _claim();\\n    _unwrapXTetu();\\n    _liquidateReward();\\n    uint assetBalance = _balance(asset);\\n    if (assetBalance > 0) {\\n      _depositToPool(assetBalance);\\n    }\\n    earned = 0;\\n    lost = 0;\\n\\n    uint strategyBalanceAfter = pool.underlyingBalanceWithInvestmentForHolder(address(this));\\n\\n    if (strategyBalanceAfter > strategyBalanceBefore) {\\n      earned = strategyBalanceAfter - strategyBalanceBefore;\\n    } else {\\n      lost = strategyBalanceBefore - strategyBalanceAfter;\\n    }\\n  }\\n\\n  /// @dev Deposit given amount to the pool.\\n  function _depositToPool(uint amount) internal override {\\n    IERC20(asset).safeIncreaseAllowance(address(pool), amount);\\n    pool.depositAndInvest(amount);\\n  }\\n\\n  /// @dev Withdraw given amount from the pool.\\n  /// @return investedAssetsUSD and assetPrice are not used in this strategy (0,0)\\n  function _withdrawFromPool(uint amount) internal override returns (uint investedAssetsUSD, uint assetPrice) {\\n    pool.withdraw(amount);\\n    return (0, 0);\\n  }\\n\\n  /// @dev Withdraw all from the pool.\\n  /// @return investedAssetsUSD and assetPrice are not used in this strategy returns (0,0)\\n  function _withdrawAllFromPool() internal override returns (uint investedAssetsUSD, uint assetPrice) {\\n    uint totalBalance = _balance(address(pool));\\n    return _withdrawFromPool(totalBalance);\\n  }\\n\\n  /// @dev If pool support emergency withdraw need to call it for emergencyExit()\\n  ///      Withdraw assets without impact checking.\\n  function _emergencyExitFromPool() internal override {\\n    _withdrawAllFromPool();\\n  }\\n\\n  /// @dev Claim all possible rewards.\\n  function _claim() internal override {\\n    pool.getAllRewards();\\n  }\\n\\n  function _unwrapXTetu() internal {\\n    uint xTetuBalance = _balance(xTetuAddress);\\n    if (xTetuBalance > 0) {\\n      ISmartVault(xTetuAddress).withdraw(xTetuBalance);\\n    }\\n  }\\n\\n  function _liquidateReward() internal {\\n    address [] memory rewardTokens = pool.rewardTokens();\\n    for (uint i = 0; i < rewardTokens.length; i = AppLib.uncheckedInc(i)) {\\n      address rewardToken = rewardTokens[i];\\n      uint rewardBalance = _balance(rewardToken);\\n      if (rewardBalance > 0) {\\n        IERC20(rewardToken).safeIncreaseAllowance(address(liquidator), rewardBalance);\\n        liquidator.liquidate(rewardToken, asset, rewardBalance, _ASSET_LIQUIDATION_SLIPPAGE);\\n      }\\n    }\\n  }\\n\\n  function getRate() external view override returns (uint256) {\\n    uint assetPrecision = 10 ** IERC20Metadata(asset).decimals();\\n    return IERC4626(vault).convertToAssets(assetPrecision) * 1e18 / assetPrecision;\\n  }\\n\\n  function investedAssets() public view override returns (uint) {\\n    return pool.underlyingBalanceWithInvestmentForHolder(address(this));\\n  }\\n\\n}\\n\",\"keccak256\":\"0xa04cda87b4b1e75978d856ad824a6bbe1f6edde7afa1f8f115c03135e134f8c0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001bb838038062001bb88339810160408190526200003491620000ee565b6001600160a01b038316158015906200005557506001600160a01b03821615155b80156200006a57506001600160a01b03811615155b620000a65760405162461bcd60e51b8152602060048201526008602482015267216164647265737360c01b604482015260640160405180910390fd5b6001600160a01b0392831660805290821660a0521660c0526003805460ff1916600117905562000138565b80516001600160a01b0381168114620000e957600080fd5b919050565b6000806000606084860312156200010457600080fd5b6200010f84620000d1565b92506200011f60208501620000d1565b91506200012f60408501620000d1565b90509250925092565b60805160a05160c0516119f5620001c36000396000818161021c01528181610e650152610ea70152600081816101d001528181610fb70152611015015260008181610174015281816104dd015281816105980152818161066f01528181610d4601528181610d8101528181610deb01528181610ee501528181611088015261114b01526119f56000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063679aefce116100ad578063bfd131f111610071578063bfd131f1146102af578063ce8c42e8146102b7578063d295ea70146102ca578063df872536146102d3578063fbfa77cf146102db57600080fd5b8063679aefce1461026f5780637efc77fa1461027757806395af806d1461023e578063a3f4df7e1461029a578063ab9e3eee146102a257600080fd5b80634046ebae116100f45780634046ebae146101cb5780634ad0b684146101f25780634fa5d854146101fa5780635eb8106b146102175780636207a0cf1461023e57600080fd5b806301e1d1141461013157806301ffc9a71461014c57806316f0115b1461016f57806319ab453c146101a357806338d52e0f146101b8575b600080fd5b6101396102ee565b6040519081526020015b60405180910390f35b61015f61015a3660046115bc565b610378565b6040519015158152602001610143565b6101967f000000000000000000000000000000000000000000000000000000000000000081565b60405161014391906115e6565b6101b66101b136600461160f565b6103a3565b005b600054610196906001600160a01b031681565b6101967f000000000000000000000000000000000000000000000000000000000000000081565b6101396104c3565b610202610553565b60408051928352602083019190915201610143565b6101967f000000000000000000000000000000000000000000000000000000000000000081565b610262604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516101439190611650565b610139610715565b610262604051806040016040528060048152602001635445545560e01b81525081565b610262610822565b60035461015f9060ff1681565b6101b661083e565b6101b66102c5366004611683565b610964565b61013960025481565b6101b6610b2a565b600154610196906001600160a01b031681565b60006102f86104c3565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906103289030906004016115e6565b602060405180830381865afa158015610345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610369919061169c565b61037391906116cb565b905090565b60006001600160e01b031982166306c88ec360e21b148061039d575061039d82610c35565b92915050565b60015460408051808201909152601781527614d08e88105b1c9958591e481a5b9a5d1a585b1a5e9959604a1b6020820152906001600160a01b0316156104055760405162461bcd60e51b81526004016103fc9190611650565b60405180910390fd5b50610430817f4e3f56ad6ba6deccf74921df43100aa937a5117d48d52b20927cbbf00af1b1a7610c6a565b806001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049291906116ee565b600080546001600160a01b039283166001600160a01b03199182161790915560018054939092169216919091179055565b604051638cb1d67f60e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cb1d67f906105129030906004016115e6565b602060405180830381865afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610373919061169c565b600080548190819061056d906001600160a01b0316610cc4565b9050801561057e5761057e81610d34565b604051638cb1d67f60e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cb1d67f906105cd9030906004016115e6565b602060405180830381865afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e919061169c565b9050610618610de9565b610620610e5e565b610628610ee1565b6000805461063e906001600160a01b0316610cc4565b9050801561064f5761064f81610d34565b604051638cb1d67f60e01b81526000955085945084906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cb1d67f906106a49030906004016115e6565b602060405180830381865afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e5919061169c565b905082811115610700576106f9838261170b565b955061070d565b61070a818461170b565b94505b505050509091565b600080546040805163313ce56760e01b8152905183926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610783919061171e565b61078e90600a611825565b6001546040516303d1689d60e11b81526004810183905291925082916001600160a01b03909116906307a2d13a90602401602060405180830381865afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610800919061169c565b61081290670de0b6b3a7640000611834565b61081c919061184b565b91505090565b60405180606001604052806023815260200161199d6023913981565b60015460005460408051808201909152600a81526914d08e8811195b9a595960b21b60208201526001600160a01b0392831692909116903383146108955760405162461bcd60e51b81526004016103fc9190611650565b5061089e61107e565b50506040516370a0823160e01b81526000906001600160a01b038316906370a08231906108cf9030906004016115e6565b602060405180830381865afa1580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610910919061169c565b9050801561092c5761092c6001600160a01b03831684836110c0565b6040518181527f1e1c9eed3e86bfabb3b6632fe0d8620ffa4a5885dee801a9c3b944a98fddc5989060200160405180910390a1505050565b60015460005460408051808201909152600a81526914d08e8811195b9a595960b21b60208201526001600160a01b0392831692909116903383146109bb5760405162461bcd60e51b81526004016103fc9190611650565b506040516370a0823160e01b81526000906001600160a01b038316906370a08231906109eb9030906004016115e6565b602060405180830381865afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c919061169c565b905080841115610aba57610a48610a43828661170b565b611128565b50506040516370a0823160e01b81526001600160a01b038316906370a0823190610a769030906004016115e6565b602060405180830381865afa158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab7919061169c565b90505b6000610ac685836111b2565b90508015610ae257610ae26001600160a01b03841685836110c0565b60408051868152602081018390529081018390527fe043359a001ab7a9959ca1779f6e441544969bd35de019af53a54f4e4f8a9a3e9060600160405180910390a15050505050565b60015460408051808201909152600a81526914d08e8811195b9a595960b21b6020820152906001600160a01b03163314610b775760405162461bcd60e51b81526004016103fc9190611650565b50600080546040516370a0823160e01b81526001600160a01b03909116919082906370a0823190610bac9030906004016115e6565b602060405180830381865afa158015610bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bed919061169c565b90508015610bfe57610bfe81610d34565b6040518181527f94bcfc9a8eba5229c2956ccb1858733fce588bc02145ac053c40b9827a33837f9060200160405180910390a15050565b60006001600160e01b0319821663b7b79fa960e01b148061039d57506301ffc9a760e01b6001600160e01b031983161461039d565b610c7482826111ca565b610cc05760405162461bcd60e51b815260206004820152601a60248201527f496e74657266616365206973206e6f7420737570706f7274656400000000000060448201526064016103fc565b5050565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610cf39030906004016115e6565b602060405180830381865afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039d919061169c565b600054610d6b906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836112a8565b6040516332e2261360e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cb88984c906024015b600060405180830381600087803b158015610dce57600080fd5b505af1158015610de2573d6000803e3d6000fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166345b35f566040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e4457600080fd5b505af1158015610e58573d6000803e3d6000fd5b50505050565b6000610e897f0000000000000000000000000000000000000000000000000000000000000000610cc4565b90508015610ede57604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401610db4565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2b18aa06040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f699190810190611883565b905060005b8151811015610cc0576000828281518110610f8b57610f8b611948565b602002602001015190506000610fa082610cc4565b9050801561107457610fdc6001600160a01b0383167f0000000000000000000000000000000000000000000000000000000000000000836112a8565b60005460405163304d095d60e21b81526001600160a01b03848116600483015291821660248201526044810183905261138860648201527f00000000000000000000000000000000000000000000000000000000000000009091169063c134257490608401600060405180830381600087803b15801561105b57600080fd5b505af115801561106f573d6000803e3d6000fd5b505050505b5050600101610f6e565b60008060006110ac7f0000000000000000000000000000000000000000000000000000000000000000610cc4565b90506110b781611128565b92509250509091565b6040516001600160a01b03831660248201526044810182905261112390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261135a565b505050565b604051632e1a7d4d60e01b81526004810182905260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90602401600060405180830381600087803b15801561118f57600080fd5b505af11580156111a3573d6000803e3d6000fd5b50600096879650945050505050565b60008183106111c157816111c3565b825b9392505050565b60006001600160a01b0383166112115760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b60448201526064016103fc565b823b600081900361122657600091505061039d565b6040516301ffc9a760e01b81526001600160e01b0319841660048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa925050508015611290575060408051601f3d908101601f1916820190925261128d9181019061195e565b60015b1561129e57915061039d9050565b5060009392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d919061169c565b61132791906116cb565b6040516001600160a01b038516602482015260448101829052909150610e5890859063095ea7b360e01b906064016110ec565b60006113af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661142c9092919063ffffffff16565b80519091501561112357808060200190518101906113cd919061195e565b6111235760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103fc565b606061143b8484600085611443565b949350505050565b6060824710156114a45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103fc565b600080866001600160a01b031685876040516114c09190611980565b60006040518083038185875af1925050503d80600081146114fd576040519150601f19603f3d011682016040523d82523d6000602084013e611502565b606091505b50915091506115138783838761151e565b979650505050505050565b6060831561158d578251600003611586576001600160a01b0385163b6115865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103fc565b508161143b565b61143b83838151156115a25781518083602001fd5b8060405162461bcd60e51b81526004016103fc9190611650565b6000602082840312156115ce57600080fd5b81356001600160e01b0319811681146111c357600080fd5b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610ede57600080fd5b60006020828403121561162157600080fd5b81356111c3816115fa565b60005b8381101561164757818101518382015260200161162f565b50506000910152565b602081526000825180602084015261166f81604085016020870161162c565b601f01601f19169190910160400192915050565b60006020828403121561169557600080fd5b5035919050565b6000602082840312156116ae57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561039d5761039d6116b5565b80516116e9816115fa565b919050565b60006020828403121561170057600080fd5b81516111c3816115fa565b8181038181111561039d5761039d6116b5565b60006020828403121561173057600080fd5b815160ff811681146111c357600080fd5b600181815b8085111561177c578160001904821115611762576117626116b5565b8085161561176f57918102915b93841c9390800290611746565b509250929050565b6000826117935750600161039d565b816117a05750600061039d565b81600181146117b657600281146117c0576117dc565b600191505061039d565b60ff8411156117d1576117d16116b5565b50506001821b61039d565b5060208310610133831016604e8410600b84101617156117ff575081810a61039d565b6118098383611741565b806000190482111561181d5761181d6116b5565b029392505050565b60006111c360ff841683611784565b808202811582820484141761039d5761039d6116b5565b60008261186857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561189657600080fd5b825167ffffffffffffffff808211156118ae57600080fd5b818501915085601f8301126118c257600080fd5b8151818111156118d4576118d461186d565b8060051b604051601f19603f830116810181811085821117156118f9576118f961186d565b60405291825284820192508381018501918883111561191757600080fd5b938501935b8285101561193c5761192d856116de565b8452938501939285019261191c565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561197057600080fd5b815180151581146111c357600080fd5b6000825161199281846020870161162c565b919091019291505056fe5465747556312053696e676c6520546f6b656e20537472696374205374726174656779a2646970667358221220df2687681c03d4a06c5848c3e9dd75061b3c280ff789d83149c8d898e867182b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063679aefce116100ad578063bfd131f111610071578063bfd131f1146102af578063ce8c42e8146102b7578063d295ea70146102ca578063df872536146102d3578063fbfa77cf146102db57600080fd5b8063679aefce1461026f5780637efc77fa1461027757806395af806d1461023e578063a3f4df7e1461029a578063ab9e3eee146102a257600080fd5b80634046ebae116100f45780634046ebae146101cb5780634ad0b684146101f25780634fa5d854146101fa5780635eb8106b146102175780636207a0cf1461023e57600080fd5b806301e1d1141461013157806301ffc9a71461014c57806316f0115b1461016f57806319ab453c146101a357806338d52e0f146101b8575b600080fd5b6101396102ee565b6040519081526020015b60405180910390f35b61015f61015a3660046115bc565b610378565b6040519015158152602001610143565b6101967f000000000000000000000000000000000000000000000000000000000000000081565b60405161014391906115e6565b6101b66101b136600461160f565b6103a3565b005b600054610196906001600160a01b031681565b6101967f000000000000000000000000000000000000000000000000000000000000000081565b6101396104c3565b610202610553565b60408051928352602083019190915201610143565b6101967f000000000000000000000000000000000000000000000000000000000000000081565b610262604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516101439190611650565b610139610715565b610262604051806040016040528060048152602001635445545560e01b81525081565b610262610822565b60035461015f9060ff1681565b6101b661083e565b6101b66102c5366004611683565b610964565b61013960025481565b6101b6610b2a565b600154610196906001600160a01b031681565b60006102f86104c3565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906103289030906004016115e6565b602060405180830381865afa158015610345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610369919061169c565b61037391906116cb565b905090565b60006001600160e01b031982166306c88ec360e21b148061039d575061039d82610c35565b92915050565b60015460408051808201909152601781527614d08e88105b1c9958591e481a5b9a5d1a585b1a5e9959604a1b6020820152906001600160a01b0316156104055760405162461bcd60e51b81526004016103fc9190611650565b60405180910390fd5b50610430817f4e3f56ad6ba6deccf74921df43100aa937a5117d48d52b20927cbbf00af1b1a7610c6a565b806001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049291906116ee565b600080546001600160a01b039283166001600160a01b03199182161790915560018054939092169216919091179055565b604051638cb1d67f60e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cb1d67f906105129030906004016115e6565b602060405180830381865afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610373919061169c565b600080548190819061056d906001600160a01b0316610cc4565b9050801561057e5761057e81610d34565b604051638cb1d67f60e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cb1d67f906105cd9030906004016115e6565b602060405180830381865afa1580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e919061169c565b9050610618610de9565b610620610e5e565b610628610ee1565b6000805461063e906001600160a01b0316610cc4565b9050801561064f5761064f81610d34565b604051638cb1d67f60e01b81526000955085945084906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cb1d67f906106a49030906004016115e6565b602060405180830381865afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e5919061169c565b905082811115610700576106f9838261170b565b955061070d565b61070a818461170b565b94505b505050509091565b600080546040805163313ce56760e01b8152905183926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610783919061171e565b61078e90600a611825565b6001546040516303d1689d60e11b81526004810183905291925082916001600160a01b03909116906307a2d13a90602401602060405180830381865afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610800919061169c565b61081290670de0b6b3a7640000611834565b61081c919061184b565b91505090565b60405180606001604052806023815260200161199d6023913981565b60015460005460408051808201909152600a81526914d08e8811195b9a595960b21b60208201526001600160a01b0392831692909116903383146108955760405162461bcd60e51b81526004016103fc9190611650565b5061089e61107e565b50506040516370a0823160e01b81526000906001600160a01b038316906370a08231906108cf9030906004016115e6565b602060405180830381865afa1580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610910919061169c565b9050801561092c5761092c6001600160a01b03831684836110c0565b6040518181527f1e1c9eed3e86bfabb3b6632fe0d8620ffa4a5885dee801a9c3b944a98fddc5989060200160405180910390a1505050565b60015460005460408051808201909152600a81526914d08e8811195b9a595960b21b60208201526001600160a01b0392831692909116903383146109bb5760405162461bcd60e51b81526004016103fc9190611650565b506040516370a0823160e01b81526000906001600160a01b038316906370a08231906109eb9030906004016115e6565b602060405180830381865afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c919061169c565b905080841115610aba57610a48610a43828661170b565b611128565b50506040516370a0823160e01b81526001600160a01b038316906370a0823190610a769030906004016115e6565b602060405180830381865afa158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab7919061169c565b90505b6000610ac685836111b2565b90508015610ae257610ae26001600160a01b03841685836110c0565b60408051868152602081018390529081018390527fe043359a001ab7a9959ca1779f6e441544969bd35de019af53a54f4e4f8a9a3e9060600160405180910390a15050505050565b60015460408051808201909152600a81526914d08e8811195b9a595960b21b6020820152906001600160a01b03163314610b775760405162461bcd60e51b81526004016103fc9190611650565b50600080546040516370a0823160e01b81526001600160a01b03909116919082906370a0823190610bac9030906004016115e6565b602060405180830381865afa158015610bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bed919061169c565b90508015610bfe57610bfe81610d34565b6040518181527f94bcfc9a8eba5229c2956ccb1858733fce588bc02145ac053c40b9827a33837f9060200160405180910390a15050565b60006001600160e01b0319821663b7b79fa960e01b148061039d57506301ffc9a760e01b6001600160e01b031983161461039d565b610c7482826111ca565b610cc05760405162461bcd60e51b815260206004820152601a60248201527f496e74657266616365206973206e6f7420737570706f7274656400000000000060448201526064016103fc565b5050565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610cf39030906004016115e6565b602060405180830381865afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039d919061169c565b600054610d6b906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836112a8565b6040516332e2261360e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cb88984c906024015b600060405180830381600087803b158015610dce57600080fd5b505af1158015610de2573d6000803e3d6000fd5b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166345b35f566040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e4457600080fd5b505af1158015610e58573d6000803e3d6000fd5b50505050565b6000610e897f0000000000000000000000000000000000000000000000000000000000000000610cc4565b90508015610ede57604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401610db4565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2b18aa06040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f699190810190611883565b905060005b8151811015610cc0576000828281518110610f8b57610f8b611948565b602002602001015190506000610fa082610cc4565b9050801561107457610fdc6001600160a01b0383167f0000000000000000000000000000000000000000000000000000000000000000836112a8565b60005460405163304d095d60e21b81526001600160a01b03848116600483015291821660248201526044810183905261138860648201527f00000000000000000000000000000000000000000000000000000000000000009091169063c134257490608401600060405180830381600087803b15801561105b57600080fd5b505af115801561106f573d6000803e3d6000fd5b505050505b5050600101610f6e565b60008060006110ac7f0000000000000000000000000000000000000000000000000000000000000000610cc4565b90506110b781611128565b92509250509091565b6040516001600160a01b03831660248201526044810182905261112390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261135a565b505050565b604051632e1a7d4d60e01b81526004810182905260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90602401600060405180830381600087803b15801561118f57600080fd5b505af11580156111a3573d6000803e3d6000fd5b50600096879650945050505050565b60008183106111c157816111c3565b825b9392505050565b60006001600160a01b0383166112115760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b60448201526064016103fc565b823b600081900361122657600091505061039d565b6040516301ffc9a760e01b81526001600160e01b0319841660048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa925050508015611290575060408051601f3d908101601f1916820190925261128d9181019061195e565b60015b1561129e57915061039d9050565b5060009392505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d919061169c565b61132791906116cb565b6040516001600160a01b038516602482015260448101829052909150610e5890859063095ea7b360e01b906064016110ec565b60006113af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661142c9092919063ffffffff16565b80519091501561112357808060200190518101906113cd919061195e565b6111235760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103fc565b606061143b8484600085611443565b949350505050565b6060824710156114a45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103fc565b600080866001600160a01b031685876040516114c09190611980565b60006040518083038185875af1925050503d80600081146114fd576040519150601f19603f3d011682016040523d82523d6000602084013e611502565b606091505b50915091506115138783838761151e565b979650505050505050565b6060831561158d578251600003611586576001600160a01b0385163b6115865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103fc565b508161143b565b61143b83838151156115a25781518083602001fd5b8060405162461bcd60e51b81526004016103fc9190611650565b6000602082840312156115ce57600080fd5b81356001600160e01b0319811681146111c357600080fd5b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610ede57600080fd5b60006020828403121561162157600080fd5b81356111c3816115fa565b60005b8381101561164757818101518382015260200161162f565b50506000910152565b602081526000825180602084015261166f81604085016020870161162c565b601f01601f19169190910160400192915050565b60006020828403121561169557600080fd5b5035919050565b6000602082840312156116ae57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561039d5761039d6116b5565b80516116e9816115fa565b919050565b60006020828403121561170057600080fd5b81516111c3816115fa565b8181038181111561039d5761039d6116b5565b60006020828403121561173057600080fd5b815160ff811681146111c357600080fd5b600181815b8085111561177c578160001904821115611762576117626116b5565b8085161561176f57918102915b93841c9390800290611746565b509250929050565b6000826117935750600161039d565b816117a05750600061039d565b81600181146117b657600281146117c0576117dc565b600191505061039d565b60ff8411156117d1576117d16116b5565b50506001821b61039d565b5060208310610133831016604e8410600b84101617156117ff575081810a61039d565b6118098383611741565b806000190482111561181d5761181d6116b5565b029392505050565b60006111c360ff841683611784565b808202811582820484141761039d5761039d6116b5565b60008261186857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561189657600080fd5b825167ffffffffffffffff808211156118ae57600080fd5b818501915085601f8301126118c257600080fd5b8151818111156118d4576118d461186d565b8060051b604051601f19603f830116810181811085821117156118f9576118f961186d565b60405291825284820192508381018501918883111561191757600080fd5b938501935b8285101561193c5761192d856116de565b8452938501939285019261191c565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561197057600080fd5b815180151581146111c357600080fd5b6000825161199281846020870161162c565b919091019291505056fe5465747556312053696e676c6520546f6b656e20537472696374205374726174656779a2646970667358221220df2687681c03d4a06c5848c3e9dd75061b3c280ff789d83149c8d898e867182b64736f6c63430008110033",
  "devdoc": {
    "author": "AlehNat",
    "kind": "dev",
    "methods": {
      "getRate()": {
        "details": "Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying token. The meaning of this rate depends on the context."
      },
      "init(address)": {
        "details": "Initialize with the vault. Can be called only once."
      },
      "investAll()": {
        "details": "Stakes everything the strategy holds into the reward pool."
      },
      "investedAssets()": {
        "details": "Amount of underlying assets invested to the pool."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalAssets()": {
        "details": "Total amount of underlying assets under control of this strategy."
      },
      "withdrawAllToVault()": {
        "details": "Withdraws all underlying assets to the vault"
      },
      "withdrawToVault(uint256)": {
        "details": "Withdraws some assets to the vault"
      }
    },
    "stateVariables": {
      "isReadyToHardWork": {
        "details": "Usually, indicate that claimable rewards have reasonable amount."
      }
    },
    "title": "Simple auto compounding strategy for TETU V1 vaults.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16535,
        "contract": "contracts/strategies/tetu-v1/TetuV1SingleTokenStrictStrategy.sol:TetuV1SingleTokenStrictStrategy",
        "label": "asset",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16539,
        "contract": "contracts/strategies/tetu-v1/TetuV1SingleTokenStrictStrategy.sol:TetuV1SingleTokenStrictStrategy",
        "label": "vault",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16543,
        "contract": "contracts/strategies/tetu-v1/TetuV1SingleTokenStrictStrategy.sol:TetuV1SingleTokenStrictStrategy",
        "label": "compoundRatio",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 67630,
        "contract": "contracts/strategies/tetu-v1/TetuV1SingleTokenStrictStrategy.sol:TetuV1SingleTokenStrictStrategy",
        "label": "isReadyToHardWork",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}