{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/infrastructure/ControllerV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/EnumerableMap.sol\";\nimport \"../interfaces/IProxyControlled.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @title A central contract of the TETU platform.\n///        Holds all important contract addresses.\n///        Able to upgrade proxies with time-lock.\n/// @author belbix\ncontract ControllerV2 is ControllableV3, IController {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using EnumerableMap for EnumerableMap.UintToUintMap;\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\n  using EnumerableMap for EnumerableMap.AddressToUintMap;\n\n  enum AddressType {\n    UNKNOWN, // 0\n    GOVERNANCE, // 1\n    TETU_VOTER, // 2\n    PLATFORM_VOTER, // 3\n    LIQUIDATOR, // 4\n    FORWARDER, // 5\n    INVEST_FUND, // 6\n    VE_DIST // 7\n  }\n\n  struct AddressAnnounce {\n    uint _type;\n    address newAddress;\n    uint timeLockAt;\n  }\n\n  struct ProxyAnnounce {\n    address proxy;\n    address implementation;\n    uint timeLockAt;\n  }\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant CONTROLLER_VERSION = \"2.0.1\";\n  uint public constant TIME_LOCK = 18 hours;\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  // --- restrictions\n\n  /// @dev Gnosis safe multi signature wallet with maximum power under the platform.\n  address public override governance;\n  /// @dev Operators can execute not-critical functions of the platform.\n  EnumerableSet.AddressSet internal _operators;\n\n  // --- dependency\n\n  /// @dev Voter for distribute TETU to gauges.\n  address public override voter;\n  /// @dev External solution for sell any tokens with minimal gas usage.\n  address public override liquidator;\n  /// @dev Accumulate performance fees and distribute them properly.\n  address public override forwarder;\n  /// @dev Contract for holding assets for the Second Stage\n  address public override investFund;\n  /// @dev Contract for accumulate TETU rewards for veTETU and weekly distribute them.\n  address public override veDistributor;\n  /// @dev Special voter for platform attributes.\n  address public override platformVoter;\n\n  // --- elements\n\n  /// @dev Set of valid vaults\n  EnumerableSet.AddressSet internal _vaults;\n\n  // --- time locks\n\n  EnumerableMap.UintToUintMap internal _addressTimeLocks;\n  EnumerableMap.UintToAddressMap internal _addressAnnounces;\n\n  EnumerableMap.AddressToUintMap internal _proxyTimeLocks;\n  mapping(address => address) public proxyAnnounces;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event AddressChangeAnnounced(uint _type, address value);\n  event AddressChanged(uint _type, address oldAddress, address newAddress);\n  event AddressAnnounceRemove(uint _type);\n  event ProxyUpgradeAnnounced(address proxy, address implementation);\n  event ProxyUpgraded(address proxy, address implementation);\n  event ProxyAnnounceRemoved(address proxy);\n  event RegisterVault(address vault);\n  event VaultRemoved(address vault);\n  event OperatorAdded(address operator);\n  event OperatorRemoved(address operator);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @dev Proxy initialization. Call it after contract deploy.\n  function init(address _governance) external initializer {\n    require(_governance != address(0), \"WRONG_INPUT\");\n    governance = _governance;\n    __Controllable_init(address(this));\n    _operators.add(_governance);\n  }\n\n  // *************************************************************\n  //                     RESTRICTIONS\n  // *************************************************************\n\n  function _onlyGovernance() internal view {\n    require(msg.sender == governance, \"DENIED\");\n  }\n\n  function _onlyOperators() internal view {\n    require(_operators.contains(msg.sender), \"DENIED\");\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev Return all announced address changes.\n  function addressAnnouncesList() external view returns (AddressAnnounce[] memory announces) {\n    uint length = _addressTimeLocks.length();\n    announces = new AddressAnnounce[](length);\n    for (uint i; i < length; ++i) {\n      (uint _type, uint timeLock) = _addressTimeLocks.at(i);\n      address newAddress = _addressAnnounces.get(_type);\n      announces[i] = AddressAnnounce(_type, newAddress, timeLock);\n    }\n  }\n\n  /// @dev Return all announced proxy upgrades.\n  function proxyAnnouncesList() external view returns (ProxyAnnounce[] memory announces) {\n    uint length = _proxyTimeLocks.length();\n    announces = new ProxyAnnounce[](length);\n    for (uint i; i < length; ++i) {\n      (address proxy, uint timeLock) = _proxyTimeLocks.at(i);\n      address implementation = proxyAnnounces[proxy];\n      announces[i] = ProxyAnnounce(proxy, implementation, timeLock);\n    }\n  }\n\n  /// @dev Return true if the value exist in the operator set.\n  function isOperator(address value) external view override returns (bool) {\n    return _operators.contains(value);\n  }\n\n  /// @dev Return all operators. Expect the array will have reasonable size.\n  function operatorsList() external view returns (address[] memory) {\n    return _operators.values();\n  }\n\n  /// @dev Return all vaults. Array can be too big for use this function.\n  function vaultsList() external view override returns (address[] memory) {\n    return _vaults.values();\n  }\n\n  /// @dev Vault set size.\n  function vaultsListLength() external view override returns (uint) {\n    return _vaults.length();\n  }\n\n  /// @dev Return vault with given id. Ordering can be changed with time!\n  function vaults(uint id) external view override returns (address) {\n    return _vaults.at(id);\n  }\n\n  /// @dev Return true if the vault valid.\n  function isValidVault(address _vault) external view override returns (bool) {\n    return _vaults.contains(_vault);\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_CONTROLLER || super.supportsInterface(interfaceId);\n  }\n\n  // *************************************************************\n  //          SET ADDRESSES WITH TIME-LOCK PROTECTION\n  // *************************************************************\n\n  /// @dev Add announce information for given address type.\n  function announceAddressChange(AddressType _type, address value) external {\n    _onlyGovernance();\n    require(value != address(0), \"ZERO_VALUE\");\n    require(_addressAnnounces.set(uint(_type), value), \"ANNOUNCED\");\n    _addressTimeLocks.set(uint(_type), block.timestamp + TIME_LOCK);\n\n    emit AddressChangeAnnounced(uint(_type), value);\n  }\n\n  /// @dev Change time-locked address and remove lock info.\n  ///      Less strict for reduce governance actions.\n  function changeAddress(AddressType _type) external {\n    _onlyOperators();\n\n    address newAddress = _addressAnnounces.get(uint(_type));\n    uint timeLock = _addressTimeLocks.get(uint(_type));\n    // no need to check values - get for non-exist values will be reverted\n    address oldAddress;\n\n    if (_type == AddressType.GOVERNANCE) {\n      oldAddress = governance;\n      governance = newAddress;\n\n    } else if (_type == AddressType.TETU_VOTER) {\n      oldAddress = voter;\n      voter = newAddress;\n\n    } else if (_type == AddressType.LIQUIDATOR) {\n      oldAddress = liquidator;\n      liquidator = newAddress;\n\n    } else if (_type == AddressType.FORWARDER) {\n      _requireInterface(newAddress, InterfaceIds.I_FORWARDER);\n      oldAddress = forwarder;\n      forwarder = newAddress;\n\n    } else if (_type == AddressType.INVEST_FUND) {\n      oldAddress = investFund;\n      investFund = newAddress;\n\n    } else if (_type == AddressType.VE_DIST) {\n      _requireInterface(newAddress, InterfaceIds.I_VE_DISTRIBUTOR);\n      oldAddress = veDistributor;\n      veDistributor = newAddress;\n\n    } else if (_type == AddressType.PLATFORM_VOTER) {\n      _requireInterface(newAddress, InterfaceIds.I_PLATFORM_VOTER);\n      oldAddress = platformVoter;\n      platformVoter = newAddress;\n    } else {\n      revert(\"UNKNOWN\");\n    }\n\n    // skip time-lock for initialization\n    if (oldAddress != address(0)) {\n      require(timeLock < block.timestamp, \"LOCKED\");\n    }\n\n    _addressAnnounces.remove(uint(_type));\n    _addressTimeLocks.remove(uint(_type));\n\n    emit AddressChanged(uint(_type), oldAddress, newAddress);\n  }\n\n  /// @dev Remove announced address change.\n  function removeAddressAnnounce(AddressType _type) external {\n    _onlyOperators();\n\n    _addressAnnounces.remove(uint(_type));\n    _addressTimeLocks.remove(uint(_type));\n\n    emit AddressAnnounceRemove(uint(_type));\n  }\n\n  // *************************************************************\n  //          UPGRADE PROXIES WITH TIME-LOCK PROTECTION\n  // *************************************************************\n\n  function announceProxyUpgrade(\n    address[] memory proxies,\n    address[] memory implementations\n  ) external {\n    _onlyGovernance();\n    require(proxies.length == implementations.length, \"WRONG_INPUT\");\n\n    for (uint i; i < proxies.length; i++) {\n      address proxy = proxies[i];\n      address implementation = implementations[i];\n\n      require(implementation != address(0), \"ZERO_IMPL\");\n      require(_proxyTimeLocks.set(proxy, block.timestamp + TIME_LOCK), \"ANNOUNCED\");\n      proxyAnnounces[proxy] = implementation;\n\n      emit ProxyUpgradeAnnounced(proxy, implementation);\n    }\n  }\n\n  /// @dev Upgrade proxy. Less strict for reduce governance actions.\n  function upgradeProxy(address[] memory proxies) external {\n    _onlyOperators();\n\n    for (uint i; i < proxies.length; i++) {\n      address proxy = proxies[i];\n      uint timeLock = _proxyTimeLocks.get(proxy);\n      // Map get will revert on not exist key, no need to check to zero\n      address implementation = proxyAnnounces[proxy];\n\n      require(timeLock < block.timestamp, \"LOCKED\");\n\n      IProxyControlled(proxy).upgrade(implementation);\n\n      _proxyTimeLocks.remove(proxy);\n      delete proxyAnnounces[proxy];\n\n      emit ProxyUpgraded(proxy, implementation);\n    }\n  }\n\n  function removeProxyAnnounce(address proxy) external {\n    _onlyOperators();\n\n    _proxyTimeLocks.remove(proxy);\n    delete proxyAnnounces[proxy];\n\n    emit ProxyAnnounceRemoved(proxy);\n  }\n\n  // *************************************************************\n  //                     REGISTER ACTIONS\n  // *************************************************************\n\n  /// @dev Register vault in the system.\n  ///      Operator should do it as part of deployment process.\n  function registerVault(address vault) external {\n    _onlyOperators();\n\n    require(_vaults.add(vault), \"EXIST\");\n    emit RegisterVault(vault);\n  }\n\n  /// @dev Remove vault from the system. Only for critical cases.\n  function removeVault(address vault) external {\n    _onlyGovernance();\n\n    require(_vaults.remove(vault), \"NOT_EXIST\");\n    emit VaultRemoved(vault);\n  }\n\n  /// @dev Register new operator.\n  function registerOperator(address value) external {\n    _onlyGovernance();\n\n    require(_operators.add(value), \"EXIST\");\n    emit OperatorAdded(value);\n  }\n\n  /// @dev Remove operator.\n  function removeOperator(address value) external {\n    _onlyGovernance();\n\n    require(_operators.remove(value), \"NOT_EXIST\");\n    emit OperatorRemoved(value);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/infrastructure/ForwarderV3.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/ReentrancyGuard.sol\";\nimport \"../openzeppelin/EnumerableSet.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/ITetuLiquidator.sol\";\nimport \"../interfaces/IVoter.sol\";\nimport \"../interfaces/IForwarder.sol\";\nimport \"../interfaces/IMultiPool.sol\";\nimport \"../interfaces/IBribe.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @title This contract should contains a buffer of fees from strategies.\n///        Periodically sell rewards and distribute to their destinations.\n/// @author belbix\ncontract ForwarderV3 is ReentrancyGuard, ControllableV3, IForwarder {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant FORWARDER_VERSION = \"3.0.1\";\n  /// @dev Denominator for different ratios. It is default for the whole platform.\n  uint public constant RATIO_DENOMINATOR = 100_000;\n  /// @dev If slippage not defined for concrete token will be used 5% tolerance.\n  uint public constant DEFAULT_SLIPPAGE = 5_000;\n  /// @dev Max handled destinations from queue per call.\n  uint public constant MAX_DESTINATIONS = 50;\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  // -- ratios\n\n  /// @dev Percent of tokens for Invest Fund\n  uint public toInvestFundRatio;\n  /// @dev Percent of tokens for gauges.\n  uint public toGaugesRatio;\n\n  // -- convert options\n\n  /// @dev We will convert all tokens to TETU and distribute to destinations.\n  address public override tetu;\n  /// @dev Contract for bribes distribution\n  address public bribe;\n  /// @dev Minimum amount of TETU tokens for distribution.\n  uint public override tetuThreshold;\n  /// @dev Specific slippages for volatile tokens.\n  mapping(address => uint) public tokenSlippage;\n\n  // -- registered destinations\n\n  /// @dev Tokens ready for distribution\n  ///      This Set need for easy handle tokens off-chain, can be removed for gas optimisation.\n  EnumerableSet.AddressSet internal _queuedTokens;\n  /// @dev Token => Set of destinations with positive balances for the given token\n  mapping(address => EnumerableSet.AddressSet) internal _destinationQueue;\n  /// @dev Destination => Tokens ready to distribute\n  mapping(address => EnumerableSet.AddressSet) internal _tokensPerDestination;\n  /// @dev Token => Destination => Registered amount\n  mapping(address => mapping(address => uint)) public override amountPerDestination;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event Distributed(\n    address sender,\n    address incomeToken,\n    uint queuedBalance,\n    uint tetuValue,\n    uint tetuBalance,\n    uint toInvestFund,\n    uint toGauges,\n    uint toBribes\n  );\n  event InvestFundRatioChanged(uint oldValue, uint newValue);\n  event GaugeRatioChanged(uint oldValue, uint newValue);\n  event TetuThresholdChanged(uint oldValue, uint newValue);\n  event SlippageChanged(address token, uint value);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @dev Proxy initialization. Call it after contract deploy.\n  function init(address controller_, address _tetu, address _bribe) external initializer {\n    _requireInterface(_bribe, InterfaceIds.I_BRIBE);\n    _requireERC20(_tetu);\n    __Controllable_init(controller_);\n    tetu = _tetu;\n    bribe = _bribe;\n    // 10k TETU by default\n    tetuThreshold = 10_000 * 1e18;\n  }\n\n  // *************************************************************\n  //                      GOV ACTIONS\n  // *************************************************************\n\n  /// @dev Check that sender is governance.\n  function _onlyGov() internal view {\n    require(isGovernance(msg.sender), \"DENIED\");\n  }\n\n  /// @dev Set specific token slippage for given token.\n  function setSlippage(address token, uint value) external {\n    _onlyGov();\n    require(value < RATIO_DENOMINATOR, \"TOO_HIGH\");\n\n    tokenSlippage[token] = value;\n    emit SlippageChanged(token, value);\n  }\n\n  /// @dev Set TETU threshold for distribution.\n  function setTetuThreshold(uint value) external {\n    _onlyGov();\n\n    emit TetuThresholdChanged(tetuThreshold, value);\n    tetuThreshold = value;\n  }\n\n  // *************************************************************\n  //                     VOTER ACTIONS\n  // *************************************************************\n\n  /// @dev Check that sender is platform voter.\n  function _onlyPlatformVoter() internal view {\n    require(msg.sender == IController(controller()).platformVoter(), \"DENIED\");\n  }\n\n  /// @dev veTETU holders can change proportion via special voter.\n  function setInvestFundRatio(uint value) external override {\n    _onlyPlatformVoter();\n    require(value <= RATIO_DENOMINATOR, \"TOO_HIGH\");\n\n    emit InvestFundRatioChanged(toInvestFundRatio, value);\n    toInvestFundRatio = value;\n  }\n\n  /// @dev veTETU holders can change proportion via special voter.\n  function setGaugesRatio(uint value) external override {\n    _onlyPlatformVoter();\n    require(value <= RATIO_DENOMINATOR, \"TOO_HIGH\");\n\n    emit GaugeRatioChanged(toGaugesRatio, value);\n    toGaugesRatio = value;\n  }\n\n  // *************************************************************\n  //                         VIEWS\n  // *************************************************************\n\n  /// @dev Size of array of tokens ready for distribution.\n  function queuedTokensLength() external view returns (uint) {\n    return _queuedTokens.length();\n  }\n\n  /// @dev Return queued token address for given id. Ordering can be changed between calls!\n  function queuedTokenAt(uint i) external view returns (address) {\n    return _queuedTokens.at(i);\n  }\n\n  /// @dev Size of array of tokens ready for distribution for given destination.\n  function tokenPerDestinationLength(address destination) public view override returns (uint) {\n    return _tokensPerDestination[destination].length();\n  }\n\n  /// @dev Return queued token address for given id and destination. Ordering can be changed between calls!\n  function tokenPerDestinationAt(address destination, uint i) external view override returns (address) {\n    return _tokensPerDestination[destination].at(i);\n  }\n\n  /// @dev Size of array of destinations for distribution for given token.\n  function destinationsLength(address incomeToken) external view returns (uint) {\n    return _destinationQueue[incomeToken].length();\n  }\n\n  /// @dev Return destination for given income token. Ordering can be changed between calls!\n  function destinationAt(address incomeToken, uint i) external view returns (address) {\n    return _destinationQueue[incomeToken].at(i);\n  }\n\n  /// @dev In case of too many queued destinations `targetTokenThreshold` should be lowered to reasonable value.\n  function getQueuedDestinations(address token) public view returns (\n    address[] memory queuedDestinations,\n    uint[] memory queuedAmounts,\n    uint balance\n  ){\n    EnumerableSet.AddressSet storage destinations = _destinationQueue[token];\n    mapping(address => uint) storage tokenPerDst = amountPerDestination[token];\n    uint length = Math.min(destinations.length(), MAX_DESTINATIONS);\n\n    queuedDestinations = new address[](length);\n    queuedAmounts = new uint[](length);\n    balance = 0;\n    for (uint i; i < length; ++i) {\n      address destination = destinations.at(i);\n      queuedDestinations[i] = destination;\n      uint amount = tokenPerDst[destination];\n      balance += amount;\n      queuedAmounts[i] = amount;\n    }\n  }\n\n  // *************************************************************\n  //                     REGISTER INCOME\n  // *************************************************************\n\n  /// @dev Strategy should call this on reward liquidation after compound part.\n  ///      Register tokens for the given destination.\n  function registerIncome(\n    address[] memory tokens,\n    uint[] memory amounts,\n    address vaults,\n    bool isDistribute\n  ) external nonReentrant override {\n\n    for (uint i; i < tokens.length; ++i) {\n      address token = tokens[i];\n      uint amount = amounts[i];\n      IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n      amountPerDestination[token][vaults] += amount;\n      // suppose to be not unique, relatively cheap\n      _destinationQueue[token].add(vaults);\n      _tokensPerDestination[vaults].add(token);\n      _queuedTokens.add(token);\n    }\n\n    // call it on cheap network\n    if (isDistribute) {\n      _distributeAll(vaults);\n    }\n  }\n\n  // *************************************************************\n  //                      DISTRIBUTE\n  // *************************************************************\n\n  function distributeAll(address destination) external nonReentrant override {\n    _distributeAll(destination);\n  }\n\n  function _distributeAll(address destination) internal {\n    address[] memory tokens = _tokensPerDestination[destination].values();\n    uint length = tokens.length;\n    for (uint i; i < length; ++i) {\n      _distribute(tokens[i]);\n    }\n  }\n\n  /// @dev Try to distribute given income token using  a target token from converter.\n  ///      No strict access.\n  ///      We assume that amount will be distributed before accumulate huge value reasonable for arbitrage attack.\n  function distribute(address incomeToken) external nonReentrant override {\n    _distribute(incomeToken);\n  }\n\n  function _distribute(address incomeToken) internal {\n\n    (address[] memory vaults, uint[] memory queuedAmounts, uint queuedBalance)\n    = getQueuedDestinations(incomeToken);\n\n    IController controller_ = IController(controller());\n    address _tetu = tetu;\n\n    (uint tetuBalance, uint tetuValue) = _liquidate(controller_, incomeToken, _tetu, queuedBalance);\n\n    if (tetuBalance != 0) {\n      uint toInvestFund = tetuBalance * toInvestFundRatio / RATIO_DENOMINATOR;\n      uint toGauges = (tetuBalance - toInvestFund) * toGaugesRatio / RATIO_DENOMINATOR;\n      uint toBribes = (tetuBalance - toInvestFund) - toGauges;\n\n      if (toInvestFund != 0) {\n        IERC20(_tetu).safeTransfer(controller_.investFund(), toInvestFund);\n      }\n\n      if (toGauges != 0) {\n        address voter = controller_.voter();\n        IERC20(_tetu).safeApprove(voter, toGauges);\n        IVoter(voter).notifyRewardAmount(toGauges);\n        IVoter(voter).distributeAll();\n      }\n\n      if (toBribes != 0) {\n        _distributeToBribes(\n          incomeToken,\n          _tetu,\n          vaults,\n          queuedAmounts,\n          queuedBalance,\n          toBribes\n        );\n      }\n\n      emit Distributed(\n        msg.sender,\n        incomeToken,\n        queuedBalance,\n        tetuValue,\n        tetuBalance,\n        toInvestFund,\n        toGauges,\n        toBribes\n      );\n    }\n  }\n\n  function _liquidate(\n    IController controller_,\n    address tokenIn,\n    address _tetu,\n    uint amount\n  ) internal returns (uint boughtTetu, uint tetuValue) {\n\n    if (tokenIn == _tetu) {\n      return (amount, amount);\n    }\n\n    boughtTetu = 0;\n    ITetuLiquidator _liquidator = ITetuLiquidator(controller_.liquidator());\n\n    (ITetuLiquidator.PoolData[] memory route, string memory error)\n    = _liquidator.buildRoute(tokenIn, _tetu);\n\n    if (route.length == 0) {\n      revert(error);\n    }\n\n    // calculate balance in tetu value for check threshold\n    tetuValue = _liquidator.getPriceForRoute(route, amount);\n\n    // if the value higher than threshold distribute to destinations\n    if (tetuValue > tetuThreshold) {\n\n      uint slippage = tokenSlippage[tokenIn];\n      if (slippage == 0) {\n        slippage = DEFAULT_SLIPPAGE;\n      }\n\n      uint tetuBalanceBefore = IERC20(_tetu).balanceOf(address(this));\n\n      _approveIfNeed(tokenIn, address(_liquidator), amount);\n      _liquidator.liquidateWithRoute(route, amount, slippage);\n\n      boughtTetu = IERC20(_tetu).balanceOf(address(this)) - tetuBalanceBefore;\n    }\n  }\n\n  // *************************************************************\n  //                      INTERNAL LOGIC\n  // *************************************************************\n\n\n  function _distributeToBribes(\n    address incomeToken,\n    address tokenToDistribute,\n    address[] memory vaults,\n    uint[] memory queuedAmounts,\n    uint queuedBalance,\n    uint toDistribute\n  ) internal {\n    address _bribe = bribe;\n    uint _epoch = IBribe(_bribe).epoch();\n    _approveIfNeed(tokenToDistribute, _bribe, toDistribute);\n\n    uint remaining = toDistribute;\n    for (uint i; i < vaults.length; i++) {\n      uint toSend = toDistribute * queuedAmounts[i] / queuedBalance;\n      // for avoid rounding issue send all remaining amount\n      if (i == vaults.length - 1) {\n        toSend = remaining;\n      } else {\n        remaining -= toSend;\n      }\n\n      _registerRewardInBribe(_bribe, vaults[i], tokenToDistribute);\n      IBribe(_bribe).notifyForNextEpoch(vaults[i], tokenToDistribute, toSend);\n      IBribe(_bribe).notifyDelayedRewards(vaults[i], tokenToDistribute, _epoch);\n\n      // clear queued data\n      _destinationQueue[incomeToken].remove(vaults[i]);\n      delete amountPerDestination[incomeToken][vaults[i]];\n      _tokensPerDestination[vaults[i]].remove(incomeToken);\n    }\n\n    if (IERC20(incomeToken).balanceOf(address(this)) == 0) {\n      _queuedTokens.remove(incomeToken);\n    }\n  }\n\n  function _registerRewardInBribe(address _bribe, address stakingToken, address rewardToken) internal {\n    if (!IMultiPool(_bribe).isRewardToken(stakingToken, rewardToken)) {\n      IMultiPool(_bribe).registerRewardToken(stakingToken, rewardToken);\n    }\n  }\n\n  function _approveIfNeed(address token, address dst, uint amount) internal {\n    if (IERC20(token).allowance(address(this), dst) < amount) {\n      IERC20(token).safeApprove(dst, 0);\n      IERC20(token).safeApprove(dst, type(uint).max);\n    }\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_FORWARDER || super.supportsInterface(interfaceId);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/infrastructure/InvestFundV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../proxy/ControllableV3.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/EnumerableSet.sol\";\nimport \"../interfaces/IERC4626.sol\";\n\n/// @title Upgradable contract with assets for invest in different places under control of Tetu platform.\n/// @author belbix\ncontract InvestFundV2 is ControllableV3 {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant INVEST_FUND_VERSION = \"2.0.1\";\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  EnumerableSet.AddressSet internal _tokens;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event FundDeposit(address indexed token, uint256 amount);\n  event FundWithdrawn(address indexed token, uint256 amount);\n\n  // *************************************************************\n  //                         INIT\n  // *************************************************************\n\n  /// @notice Initialize contract after setup it as proxy implementation\n  function init(address __controller) external initializer {\n    __Controllable_init(__controller);\n  }\n\n  // *************************************************************\n  //                      RESTRICTIONS\n  // *************************************************************\n\n  /// @dev Allow operation only for Controller\n  modifier onlyGov() {\n    require(isGovernance(msg.sender), \"!gov\");\n    _;\n  }\n\n  // *************************************************************\n  //                         VIEWS\n  // *************************************************************\n\n  function tokens() external view returns (address[] memory) {\n    return _tokens.values();\n  }\n\n  // *************************************************************\n  //                     GOVERNANCE ACTIONS\n  // *************************************************************\n\n  /// @dev Move tokens to governance gnosis safe\n  function withdraw(address _token, uint256 amount) external onlyGov {\n    IERC20(_token).safeTransfer(msg.sender, amount);\n    emit FundWithdrawn(_token, amount);\n  }\n\n  /// @dev Transfer any token to this contract. The token will be added in the token list.\n  function deposit(address _token, uint256 amount) external onlyGov {\n    _tokens.add(_token);\n    if (amount != 0) {\n      IERC20(_token).safeTransferFrom(msg.sender, address(this), amount);\n    }\n    emit FundDeposit(_token, amount);\n  }\n\n  // *************************************************************\n  //                      FUND CONTROL\n  // *************************************************************\n\n  function investToVault(address vault, uint amountOfAssets) external {\n    IController c = IController(controller());\n    require(c.isOperator(msg.sender), \"!operator\");\n    require(c.isValidVault(vault), \"!vault\");\n\n    address asset = IERC4626(vault).asset();\n\n    IERC20(asset).approve(vault, amountOfAssets);\n    IERC4626(vault).deposit(amountOfAssets, address(this));\n  }\n\n  function redeemFromVault(address vault, uint amountOfShares) external {\n    IController c = IController(controller());\n    require(c.isOperator(msg.sender), \"!operator\");\n    require(c.isValidVault(vault), \"!vault\");\n\n    IERC4626(vault).redeem(amountOfShares, address(this), address(this));\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/infrastructure/PlatformVoter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../interfaces/IForwarder.sol\";\nimport \"../interfaces/IPlatformVoter.sol\";\nimport \"../interfaces/IVeTetu.sol\";\nimport \"../interfaces/IStrategyV2.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @title Ve holders can vote for platform attributes values.\n/// @author belbix\ncontract PlatformVoter is ControllableV3, IPlatformVoter {\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant PLATFORM_VOTER_VERSION = \"1.0.5\";\n  /// @dev Denominator for different ratios. It is default for the whole platform.\n  uint public constant RATIO_DENOMINATOR = 100_000;\n  /// @dev Delay between votes.\n  uint public constant VOTE_DELAY = 1 weeks;\n  /// @dev Maximum votes per veNFT\n  uint public constant MAX_VOTES = 20;\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev The ve token that governs these contracts\n  address public ve;\n\n  // --- VOTES\n  /// @dev veId => votes\n  mapping(uint => Vote[]) public votes;\n  /// @dev Attribute => Target(zero for not-strategy) => sum of votes weights\n  mapping(AttributeType => mapping(address => uint)) public attributeWeights;\n  /// @dev Attribute => Target(zero for not-strategy) => sum of weights multiple on values\n  mapping(AttributeType => mapping(address => uint)) public attributeValues;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event AttributeChanged(uint _type, uint value);\n  event Voted(\n    uint tokenId,\n    uint _type,\n    uint value,\n    address target,\n    uint veWeight,\n    uint veWeightedValue,\n    uint totalAttributeWeight,\n    uint totalAttributeValue,\n    uint newValue\n  );\n  event VoteReset(\n    uint tokenId,\n    uint _type,\n    address target,\n    uint weight,\n    uint weightedValue,\n    uint timestamp\n  );\n  event VoteRemoved(uint tokenId, uint _type, uint newValue, address target);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @dev Proxy initialization. Call it after contract deploy.\n  function init(address controller_, address _ve) external initializer {\n    __Controllable_init(controller_);\n    _requireInterface(_ve, InterfaceIds.I_VE_TETU);\n    ve = _ve;\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev Array of votes. Safe to return the whole array until we have MAX_VOTES restriction.\n  function veVotes(uint veId) external view returns (Vote[] memory) {\n    return votes[veId];\n  }\n\n  /// @dev Length of votes array for given id\n  function veVotesLength(uint veId) external view override returns (uint) {\n    return votes[veId].length;\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_PLATFORM_VOTER || super.supportsInterface(interfaceId);\n  }\n\n  function isVotesExist(uint veId) external view override returns (bool) {\n    return votes[veId].length > 0;\n  }\n\n  // *************************************************************\n  //                        VOTES\n  // *************************************************************\n\n  /// @dev Resubmit exist votes for given token.\n  ///      Need to call it for ve that did not renew votes too long.\n  ///      Anyone can renew the votes, no restriction.\n  function poke(uint tokenId) external {\n    Vote[] memory _votes = votes[tokenId];\n    for (uint i; i < _votes.length; ++i) {\n      Vote memory v = _votes[i];\n      _vote(tokenId, v._type, v.weightedValue / v.weight, v.target, true);\n    }\n  }\n\n  /// @dev Vote for multiple attributes in one call.\n  function voteBatch(\n    uint tokenId,\n    AttributeType[] memory types,\n    uint[] memory values,\n    address[] memory targets\n  ) external {\n    require(IVeTetu(ve).isApprovedOrOwner(msg.sender, tokenId), \"!owner\");\n    for (uint i; i < types.length; ++i) {\n      _vote(tokenId, types[i], values[i], targets[i], false);\n    }\n  }\n\n  /// @dev Vote for given parameter using a vote power of given tokenId. Reset previous vote.\n  function vote(uint tokenId, AttributeType _type, uint value, address target) external {\n    require(IVeTetu(ve).isApprovedOrOwner(msg.sender, tokenId), \"!owner\");\n    _vote(tokenId, _type, value, target, false);\n  }\n\n  function _vote(uint tokenId, AttributeType _type, uint value, address target, bool onlyRefresh) internal {\n    require(value <= RATIO_DENOMINATOR, \"!value\");\n\n    // load maps for reduce gas usage\n    mapping(address => uint) storage _attributeWeights = attributeWeights[_type];\n    mapping(address => uint) storage _attributeValues = attributeValues[_type];\n    Vote[] storage _votes = votes[tokenId];\n\n    uint totalAttributeWeight;\n    uint totalAttributeValue;\n    // get new values for ve\n    uint veWeight = IVeTetu(ve).balanceOfNFT(tokenId);\n    uint veWeightedValue = veWeight * value;\n\n    Vote memory oldVote;\n    //remove votes optimised\n    {\n      bool found;\n      uint length = _votes.length;\n      if (length != 0) {\n        uint i;\n        for (; i < length; ++i) {\n          Vote memory v = _votes[i];\n          if (v._type == _type && v.target == target) {\n            require(onlyRefresh || v.timestamp + VOTE_DELAY < block.timestamp, \"delay\");\n            oldVote = v;\n            found = true;\n            break;\n          }\n        }\n        if (found) {\n          if (i != length - 1) {\n            _votes[i] = _votes[length - 1];\n          }\n          _votes.pop();\n        } else {\n          // it is a new type of vote\n          // need to check MAX votes in this case\n          require(length < MAX_VOTES, \"max\");\n        }\n      }\n\n      totalAttributeWeight = _attributeWeights[target] - oldVote.weight;\n      totalAttributeValue = _attributeValues[target] - oldVote.weightedValue;\n\n      // if veWeight is 0, it means that we just remove vote\n      if (veWeight == 0 && found) {\n        emit VoteReset(\n          tokenId,\n          uint(_type),\n          target,\n          oldVote.weight,\n          oldVote.weightedValue,\n          oldVote.timestamp\n        );\n      }\n    }\n\n\n    if (veWeight != 0) {\n\n      // add ve values to total values\n      totalAttributeWeight += veWeight;\n      totalAttributeValue += veWeightedValue;\n\n      // store new total values\n      _attributeWeights[target] = totalAttributeWeight;\n      _attributeValues[target] = totalAttributeValue;\n\n      // set new attribute value\n      _setAttribute(_type, totalAttributeValue / totalAttributeWeight, target);\n\n      // do not override timestamp if we poke an old vote\n      _votes.push(\n        Vote(\n          _type,\n          target,\n          veWeight,\n          veWeightedValue,\n          (onlyRefresh && oldVote.timestamp != 0) ? oldVote.timestamp : block.timestamp\n        ));\n\n      emit Voted(\n        tokenId,\n        uint(_type),\n        value,\n        target,\n        veWeight,\n        veWeightedValue,\n        totalAttributeWeight,\n        totalAttributeValue,\n        totalAttributeValue / totalAttributeWeight\n      );\n    }\n  }\n\n  /// @dev Change attribute value for given type.\n  function _setAttribute(AttributeType _type, uint newValue, address target) internal {\n    if (_type == AttributeType.INVEST_FUND_RATIO) {\n      require(target == address(0), \"!target\");\n      IForwarder(IController(controller()).forwarder()).setInvestFundRatio(newValue);\n    } else if (_type == AttributeType.GAUGE_RATIO) {\n      require(target == address(0), \"!target\");\n      IForwarder(IController(controller()).forwarder()).setGaugesRatio(newValue);\n    } else if (_type == AttributeType.STRATEGY_COMPOUND) {\n      // if for some reason the contract is unable to call this function we should not revert for keep poke support\n      try IStrategyV2(target).setCompoundRatio(newValue) {} catch {}\n    } else {\n      revert(\"!type\");\n    }\n    emit AttributeChanged(uint(_type), newValue);\n  }\n\n  /// @dev Remove all votes for given tokenId.\n  function reset(uint tokenId, uint[] memory types, address[] memory targets) external {\n    require(IVeTetu(ve).isApprovedOrOwner(msg.sender, tokenId) || msg.sender == ve, \"!owner\");\n\n    Vote[] storage _votes = votes[tokenId];\n    uint length = _votes.length;\n    for (uint i = length; i > 0; --i) {\n\n      Vote memory v = _votes[i - 1];\n      bool found;\n      for (uint j; j < types.length; ++j) {\n        uint _type = types[j];\n        address target = targets[j];\n        if (uint(v._type) == _type && v.target == target) {\n          found = true;\n          break;\n        }\n      }\n\n      if (found) {\n        require(v.timestamp + VOTE_DELAY < block.timestamp, \"delay\");\n        _removeVote(tokenId, v._type, v.target, v.weight, v.weightedValue);\n\n        if (i != length) {\n          _votes[i - 1] = _votes[length - 1];\n        }\n\n        _votes.pop();\n        length--;\n\n        emit VoteReset(\n          tokenId,\n          uint(v._type),\n          v.target,\n          v.weight,\n          v.weightedValue,\n          v.timestamp\n        );\n      }\n    }\n  }\n\n  function _removeVote(uint tokenId, AttributeType _type, address target, uint weight, uint veValue) internal {\n    uint totalWeights = attributeWeights[_type][target] - weight;\n    uint totalValues = attributeValues[_type][target] - veValue;\n    attributeWeights[_type][target] = totalWeights;\n    if (veValue != 0) {\n      attributeValues[_type][target] = totalValues;\n    }\n    uint newValue;\n    if (totalWeights != 0) {\n      newValue = totalValues / totalWeights;\n    }\n    _setAttribute(_type, newValue, target);\n    emit VoteRemoved(tokenId, uint(_type), newValue, target);\n  }\n\n  function detachTokenFromAll(uint tokenId, address) external override {\n    require(msg.sender == ve, \"!ve\");\n\n    Vote[] storage _votes = votes[tokenId];\n    uint length = _votes.length;\n    for (uint i = length; i > 0; --i) {\n      Vote memory v = _votes[i - 1];\n      _removeVote(tokenId, v._type, v.target, v.weight, v.weightedValue);\n      _votes.pop();\n    }\n  }\n\n  ///////////////////////////////////////////////////////////////\n  //               EMERGENCY ACTIONS\n  //   If something went wrong governance can fix weights.\n  ///////////////////////////////////////////////////////////////\n\n  /// @dev In case if something went wrong with vote calculation governance can remove the vote manually for a user\n  ///      If removeWeights is false then it will only remove vote from the list without changing weights.\n  ///      This will lead to \"staked\" weights forever. Use `emergencyAdjustWeights()` to fix it.\n  function emergencyResetVote(uint tokenId, uint index, bool removeWeights) external {\n    require(msg.sender == IController(controller()).governance(), \"!gov\");\n    Vote[] storage _votes = votes[tokenId];\n\n    Vote memory v = _votes[index];\n    if (removeWeights) {\n      _removeVote(tokenId, v._type, v.target, v.weight, v.weightedValue);\n    }\n\n    _votes[index] = _votes[_votes.length - 1];\n    _votes.pop();\n\n    emit VoteReset(\n      tokenId,\n      uint(v._type),\n      v.target,\n      v.weight,\n      v.weightedValue,\n      v.timestamp\n    );\n  }\n\n  /// @dev Before calling this function need to calculate simulation where all votes removed for all user and check the remaining weights/values.\n  ///      The difference should be counted for the new values and passed to this function.\n  ///      Do not call this function without properly check that users will able to reset votes!\n  ///      If any user has invalid votes need to call `emergencyResetVote()` firstly and simulate full reset for all users.\n  function emergencyAdjustWeights(AttributeType _type, address target, uint weights, uint values) external {\n    require(msg.sender == IController(controller()).governance(), \"!gov\");\n\n    attributeWeights[_type][target] = weights;\n    attributeValues[_type][target] = values;\n\n    uint newValue = weights == 0 ? 0 : values / weights;\n    require(newValue <= RATIO_DENOMINATOR, '!ratio');\n    _setAttribute(_type, newValue, target);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IBribe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IBribe {\n\n  function epoch() external view returns (uint);\n\n  function getReward(\n    address vault,\n    uint veId,\n    address[] memory tokens\n  ) external;\n\n  function getAllRewards(\n    address vault,\n    uint veId\n  ) external;\n\n  function getAllRewardsForTokens(\n    address[] memory vaults,\n    uint veId\n  ) external;\n\n  function deposit(address vault, uint amount, uint tokenId) external;\n\n  function withdraw(address vault, uint amount, uint tokenId) external;\n\n  function notifyRewardAmount(address vault, address token, uint amount) external;\n\n  function notifyForNextEpoch(address vault, address token, uint amount) external;\n\n  function notifyDelayedRewards(address vault, address token, uint _epoch) external;\n\n  function increaseEpoch() external;\n\n  function rewardsQueue(address vault, address rt, uint epoch) external view returns (uint);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IControllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IControllable {\n\n  function isController(address _contract) external view returns (bool);\n\n  function isGovernance(address _contract) external view returns (bool);\n\n  function created() external view returns (uint256);\n\n  function createdBlock() external view returns (uint256);\n\n  function controller() external view returns (address);\n\n  function increaseRevision(address oldLogic) external;\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IController {\n\n  // --- DEPENDENCY ADDRESSES\n  function governance() external view returns (address);\n\n  function voter() external view returns (address);\n\n  function liquidator() external view returns (address);\n\n  function forwarder() external view returns (address);\n\n  function investFund() external view returns (address);\n\n  function veDistributor() external view returns (address);\n\n  function platformVoter() external view returns (address);\n\n  // --- VAULTS\n\n  function vaults(uint id) external view returns (address);\n\n  function vaultsList() external view returns (address[] memory);\n\n  function vaultsListLength() external view returns (uint);\n\n  function isValidVault(address _vault) external view returns (bool);\n\n  // --- restrictions\n\n  function isOperator(address _adr) external view returns (bool);\n\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint amount\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity 0.8.17;\n\nimport \"./IERC20.sol\";\n\n/**\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n  /**\n   * @dev Returns the name of the token.\n     */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the symbol of the token.\n     */\n  function symbol() external view returns (string memory);\n\n  /**\n   * @dev Returns the decimals places of the token.\n     */\n  function decimals() external view returns (uint8);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\n\npragma solidity 0.8.17;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n  event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n  event Withdraw(\n    address indexed sender,\n    address indexed receiver,\n    address indexed owner,\n    uint256 assets,\n    uint256 shares\n  );\n\n  /**\n   * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n  function asset() external view returns (address assetTokenAddress);\n\n  /**\n   * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n  function totalAssets() external view returns (uint256 totalManagedAssets);\n\n  /**\n   * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n  /**\n   * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n  /**\n   * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n  function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n  /**\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n  function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n  /**\n   * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n  function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n  /**\n   * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n  function maxMint(address receiver) external view returns (uint256 maxShares);\n\n  /**\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n  function previewMint(uint256 shares) external view returns (uint256 assets);\n\n  /**\n   * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n  function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n  /**\n   * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n  function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n  /**\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n  function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n  /**\n   * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n  function withdraw(\n    uint256 assets,\n    address receiver,\n    address owner\n  ) external returns (uint256 shares);\n\n  /**\n   * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n  function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n  /**\n   * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n  function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n  /**\n   * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n  function redeem(\n    uint256 shares,\n    address receiver,\n    address owner\n  ) external returns (uint256 assets);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n  /**\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n  /**\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n   */\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n  /**\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n   */\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n  /**\n   * @dev Returns the number of tokens in ``owner``'s account.\n   */\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  /**\n   * @dev Returns the owner of the `tokenId` token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external;\n\n  /**\n   * @dev Transfers `tokenId` token from `from` to `to`.\n   *\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external;\n\n  /**\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n   * The approval is cleared when the token is transferred.\n   *\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n   *\n   * Requirements:\n   *\n   * - The caller must own the token or be an approved operator.\n   * - `tokenId` must exist.\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address to, uint256 tokenId) external;\n\n  /**\n   * @dev Returns the account approved for `tokenId` token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function getApproved(uint256 tokenId) external view returns (address operator);\n\n  /**\n   * @dev Approve or remove `operator` as an operator for the caller.\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n   *\n   * Requirements:\n   *\n   * - The `operator` cannot be the caller.\n   *\n   * Emits an {ApprovalForAll} event.\n   */\n  function setApprovalForAll(address operator, bool _approved) external;\n\n  /**\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n   *\n   * See {setApprovalForAll}\n   */\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IERC721.sol\";\n\n/**\n* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n* @dev See https://eips.ethereum.org/EIPS/eip-721\n*/\ninterface IERC721Metadata is IERC721 {\n  /**\n  * @dev Returns the token collection name.\n  */\n  function name() external view returns (string memory);\n\n  /**\n  * @dev Returns the token collection symbol.\n  */\n  function symbol() external view returns (string memory);\n\n  /**\n  * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n  */\n  function tokenURI(uint tokenId) external view returns (string memory);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n  /**\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n   * by `operator` from `from`, this function is called.\n   *\n   * It must return its Solidity selector to confirm the token transfer.\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n   *\n   * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes calldata data\n  ) external returns (bytes4);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IForwarder {\n\n  function tetu() external view returns (address);\n  function tetuThreshold() external view returns (uint);\n\n  function tokenPerDestinationLength(address destination) external view returns (uint);\n\n  function tokenPerDestinationAt(address destination, uint i) external view returns (address);\n\n  function amountPerDestination(address token, address destination) external view returns (uint amount);\n\n  function registerIncome(\n    address[] memory tokens,\n    uint[] memory amounts,\n    address vault,\n    bool isDistribute\n  ) external;\n\n  function distributeAll(address destination) external;\n\n  function distribute(address token) external;\n\n  function setInvestFundRatio(uint value) external;\n\n  function setGaugesRatio(uint value) external;\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IGauge {\n\n  function veIds(address stakingToken, address account) external view returns (uint);\n\n  function getReward(\n    address stakingToken,\n    address account,\n    address[] memory tokens\n  ) external;\n\n  function getAllRewards(\n    address stakingToken,\n    address account\n  ) external;\n\n  function getAllRewardsForTokens(\n    address[] memory stakingTokens,\n    address account\n  ) external;\n\n  function attachVe(address stakingToken, address account, uint veId) external;\n\n  function detachVe(address stakingToken, address account, uint veId) external;\n\n  function handleBalanceChange(address account) external;\n\n  function notifyRewardAmount(address stakingToken, address token, uint amount) external;\n\n  function addStakingToken(address token) external;\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IMultiPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IMultiPool {\n\n  function totalSupply(address stakingToken) external view returns (uint);\n\n  function derivedSupply(address stakingToken) external view returns (uint);\n\n  function derivedBalances(address stakingToken, address account) external view returns (uint);\n\n  function balanceOf(address stakingToken, address account) external view returns (uint);\n\n  function rewardTokens(address stakingToken, uint id) external view returns (address);\n\n  function isRewardToken(address stakingToken, address token) external view returns (bool);\n\n  function rewardTokensLength(address stakingToken) external view returns (uint);\n\n  function derivedBalance(address stakingToken, address account) external view returns (uint);\n\n  function left(address stakingToken, address token) external view returns (uint);\n\n  function earned(address stakingToken, address token, address account) external view returns (uint);\n\n  function registerRewardToken(address stakingToken, address token) external;\n\n  function removeRewardToken(address stakingToken, address token) external;\n\n  function isStakeToken(address token) external view returns (bool);\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IPlatformVoter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IVeVotable.sol\";\n\ninterface IPlatformVoter is IVeVotable {\n\n  enum AttributeType {\n    UNKNOWN,\n    INVEST_FUND_RATIO,\n    GAUGE_RATIO,\n    STRATEGY_COMPOUND\n  }\n\n  struct Vote {\n    AttributeType _type;\n    address target;\n    uint weight;\n    uint weightedValue;\n    uint timestamp;\n  }\n\n  function veVotesLength(uint veId) external view returns (uint);\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IProxyControlled.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IProxyControlled {\n\n  function initProxy(address _logic) external;\n\n  function upgrade(address _newImplementation) external;\n\n  function implementation() external view returns (address);\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/ISmartVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ISmartVault {\n\n  function DEPOSIT_FEE_DENOMINATOR() external view returns (uint256);\n\n  function LOCK_PENALTY_DENOMINATOR() external view returns (uint256);\n\n  function TO_INVEST_DENOMINATOR() external view returns (uint256);\n\n  function VERSION() external view returns (string memory);\n\n  function active() external view returns (bool);\n\n  function addRewardToken(address rt) external;\n\n  function alwaysInvest() external view returns (bool);\n\n  function availableToInvestOut() external view returns (uint256);\n\n  function changeActivityStatus(bool _active) external;\n\n  function changeAlwaysInvest(bool _active) external;\n\n  function changeDoHardWorkOnInvest(bool _active) external;\n\n  function changePpfsDecreaseAllowed(bool _value) external;\n\n  function changeProtectionMode(bool _active) external;\n\n  function deposit(uint256 amount) external;\n\n  function depositAndInvest(uint256 amount) external;\n\n  function depositFeeNumerator() external view returns (uint256);\n\n  function depositFor(uint256 amount, address holder) external;\n\n  function doHardWork() external;\n\n  function doHardWorkOnInvest() external view returns (bool);\n\n  function duration() external view returns (uint256);\n\n  function earned(address rt, address account)\n  external\n  view\n  returns (uint256);\n\n  function earnedWithBoost(address rt, address account)\n  external\n  view\n  returns (uint256);\n\n  function exit() external;\n\n  function getAllRewards() external;\n\n  function getAllRewardsAndRedirect(address owner) external;\n\n  function getPricePerFullShare() external view returns (uint256);\n\n  function getReward(address rt) external;\n\n  function getRewardTokenIndex(address rt) external view returns (uint256);\n\n  function initializeSmartVault(\n    string memory _name,\n    string memory _symbol,\n    address _controller,\n    address __underlying,\n    uint256 _duration,\n    bool _lockAllowed,\n    address _rewardToken,\n    uint256 _depositFee\n  ) external;\n\n  function lastTimeRewardApplicable(address rt)\n  external\n  view\n  returns (uint256);\n\n  function lastUpdateTimeForToken(address) external view returns (uint256);\n\n  function lockAllowed() external view returns (bool);\n\n  function lockPenalty() external view returns (uint256);\n\n  function notifyRewardWithoutPeriodChange(\n    address _rewardToken,\n    uint256 _amount\n  ) external;\n\n  function notifyTargetRewardAmount(address _rewardToken, uint256 amount)\n  external;\n\n  function overrideName(string memory value) external;\n\n  function overrideSymbol(string memory value) external;\n\n  function periodFinishForToken(address) external view returns (uint256);\n\n  function ppfsDecreaseAllowed() external view returns (bool);\n\n  function protectionMode() external view returns (bool);\n\n  function rebalance() external;\n\n  function removeRewardToken(address rt) external;\n\n  function rewardPerToken(address rt) external view returns (uint256);\n\n  function rewardPerTokenStoredForToken(address)\n  external\n  view\n  returns (uint256);\n\n  function rewardRateForToken(address) external view returns (uint256);\n\n  function rewardTokens() external view returns (address[] memory);\n\n  function rewardTokensLength() external view returns (uint256);\n\n  function rewardsForToken(address, address) external view returns (uint256);\n\n  function setLockPenalty(uint256 _value) external;\n\n  function setRewardsRedirect(address owner, address receiver) external;\n\n  function setLockPeriod(uint256 _value) external;\n\n  function setStrategy(address newStrategy) external;\n\n  function setToInvest(uint256 _value) external;\n\n  function stop() external;\n\n  function strategy() external view returns (address);\n\n  function toInvest() external view returns (uint256);\n\n  function underlying() external view returns (address);\n\n  function underlyingBalanceInVault() external view returns (uint256);\n\n  function underlyingBalanceWithInvestment() external view returns (uint256);\n\n  function underlyingBalanceWithInvestmentForHolder(address holder)\n  external\n  view\n  returns (uint256);\n\n  function underlyingUnit() external view returns (uint256);\n\n  function userBoostTs(address) external view returns (uint256);\n\n  function userLastDepositTs(address) external view returns (uint256);\n\n  function userLastWithdrawTs(address) external view returns (uint256);\n\n  function userLockTs(address) external view returns (uint256);\n\n  function userRewardPerTokenPaidForToken(address, address)\n  external\n  view\n  returns (uint256);\n\n  function withdraw(uint256 numberOfShares) external;\n\n  function withdrawAllToVault() external;\n\n  function getAllRewardsFor(address rewardsReceiver) external;\n\n  function lockPeriod() external view returns (uint256);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ISplitter {\n\n  function init(address controller_, address _asset, address _vault) external;\n\n  // *************** ACTIONS **************\n\n  function withdrawAllToVault() external;\n\n  function withdrawToVault(uint256 amount) external;\n\n  function coverPossibleStrategyLoss(uint earned, uint lost) external;\n\n  function doHardWork() external;\n\n  function investAll() external;\n\n  // **************** VIEWS ***************\n\n  function asset() external view returns (address);\n\n  function vault() external view returns (address);\n\n  function totalAssets() external view returns (uint256);\n\n  function isHardWorking() external view returns (bool);\n\n  function strategies(uint i) external view returns (address);\n\n  function strategiesLength() external view returns (uint);\n\n  function HARDWORK_DELAY() external view returns (uint);\n\n  function lastHardWorks(address strategy) external view returns (uint);\n\n  function pausedStrategies(address strategy) external view returns (bool);\n\n  function pauseInvesting(address strategy) external;\n\n  function continueInvesting(address strategy, uint apr) external;\n\n  function rebalance(uint percent, uint lossTolerance) external;\n\n  function getStrategyCapacity(address strategy) external view returns (uint capacity);\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyStrict.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IStrategyStrict {\n\n  function NAME() external view returns (string memory);\n\n  function PLATFORM() external view returns (string memory);\n\n  function STRATEGY_VERSION() external view returns (string memory);\n\n  function asset() external view returns (address);\n\n  function vault() external view returns (address);\n\n  function compoundRatio() external view returns (uint);\n\n  function totalAssets() external view returns (uint);\n\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\n  function isReadyToHardWork() external view returns (bool);\n\n  function withdrawAllToVault() external;\n\n  function withdrawToVault(uint amount) external;\n\n  function investAll() external;\n\n  function doHardWork() external returns (uint earned, uint lost);\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IStrategyV2 {\n\n  function NAME() external view returns (string memory);\n\n  function strategySpecificName() external view returns (string memory);\n\n  function PLATFORM() external view returns (string memory);\n\n  function STRATEGY_VERSION() external view returns (string memory);\n\n  function asset() external view returns (address);\n\n  function splitter() external view returns (address);\n\n  function compoundRatio() external view returns (uint);\n\n  function totalAssets() external view returns (uint);\n\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\n  function isReadyToHardWork() external view returns (bool);\n\n  /// @return strategyLoss Loss should be covered from Insurance\n  function withdrawAllToSplitter() external returns (uint strategyLoss);\n\n  /// @return strategyLoss Loss should be covered from Insurance\n  function withdrawToSplitter(uint amount) external returns (uint strategyLoss);\n\n  /// @notice Stakes everything the strategy holds into the reward pool.\n  /// @param amount_ Amount transferred to the strategy balance just before calling this function\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\n  ///                                       It can be false if we know exactly, that the amount is already actual.\n  /// @return strategyLoss Loss should be covered from Insurance\n  function investAll(\n    uint amount_,\n    bool updateTotalAssetsBeforeInvest_\n  ) external returns (\n    uint strategyLoss\n  );\n\n  function doHardWork() external returns (uint earned, uint lost);\n\n  function setCompoundRatio(uint value) external;\n\n  /// @notice Max amount that can be deposited to the strategy (its internal capacity), see SCB-593.\n  ///         0 means no deposit is allowed at this moment\n  function capacity() external view returns (uint);\n\n  /// @notice {performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\n  function performanceReceiver() external view returns (address);\n\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\n  /// @dev use FEE_DENOMINATOR\n  function performanceFee() external view returns (uint);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./IStrategyV2.sol\";\n\ninterface IStrategyV3 is IStrategyV2 {\n  struct BaseState {\n    /// @dev Underlying asset\n    address asset;\n\n    /// @dev Linked splitter\n    address splitter;\n\n    /// @notice {performanceFee}% of total profit is sent to {performanceReceiver} before compounding\n    /// @dev governance by default\n    address performanceReceiver;\n\n    /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\n    /// @dev {DEFAULT_PERFORMANCE_FEE} by default, FEE_DENOMINATOR is used\n    uint performanceFee;\n\n    /// @notice Ratio to split performance fee on toPerf + toInsurance, [0..100_000]\n    ///         100_000 - send full amount toPerf, 0 - send full amount toInsurance.\n    uint performanceFeeRatio;\n\n    /// @dev Percent of profit for autocompound inside this strategy.\n    uint compoundRatio;\n\n    /// @dev Represent specific name for this strategy. Should include short strategy name and used assets. Uniq across the vault.\n    string strategySpecificName;\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ITetuLiquidator {\n\n  struct PoolData {\n    address pool;\n    address swapper;\n    address tokenIn;\n    address tokenOut;\n  }\n\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\n\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\n\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\n\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\n\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\n\n  function buildRoute(\n    address tokenIn,\n    address tokenOut\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\n\n  function liquidate(\n    address tokenIn,\n    address tokenOut,\n    uint amount,\n    uint slippage\n  ) external;\n\n  function liquidateWithRoute(\n    PoolData[] memory route,\n    uint amount,\n    uint slippage\n  ) external;\n\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IVaultInsurance.sol\";\nimport \"./IERC20.sol\";\nimport \"./ISplitter.sol\";\n\ninterface ITetuVaultV2 {\n\n  function splitter() external view returns (ISplitter);\n\n  function insurance() external view returns (IVaultInsurance);\n\n  function depositFee() external view returns (uint);\n\n  function withdrawFee() external view returns (uint);\n\n  function init(\n    address controller_,\n    IERC20 _asset,\n    string memory _name,\n    string memory _symbol,\n    address _gauge,\n    uint _buffer\n  ) external;\n\n  function setSplitter(address _splitter) external;\n\n  function coverLoss(uint amount) external;\n\n  function initInsurance(IVaultInsurance _insurance) external;\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IVaultInsurance.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IVaultInsurance {\n\n  function init(address _vault, address _asset) external;\n\n  function vault() external view returns (address);\n\n  function asset() external view returns (address);\n\n  function transferToVault(uint amount) external;\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IVeDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IVeDistributor {\n\n  function rewardToken() external view returns (address);\n\n  function checkpoint() external;\n\n  function checkpointTotalSupply() external;\n\n  function claim(uint _tokenId) external returns (uint);\n\n  function claimable(uint _tokenId) external view returns (uint);\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IVeTetu.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IERC721Metadata.sol\";\n\ninterface IVeTetu is IERC721Metadata {\n\n  enum DepositType {\n    DEPOSIT_FOR_TYPE,\n    CREATE_LOCK_TYPE,\n    INCREASE_LOCK_AMOUNT,\n    INCREASE_UNLOCK_TIME,\n    MERGE_TYPE\n  }\n\n  struct Point {\n    int128 bias;\n    int128 slope; // # -dweight / dt\n    uint ts;\n    uint blk; // block\n  }\n  /* We cannot really do block numbers per se b/c slope is per time, not per block\n  * and per block could be fairly bad b/c Ethereum changes blocktimes.\n  * What we can do is to extrapolate ***At functions */\n\n  function attachments(uint tokenId) external view returns (uint);\n\n  function lockedAmounts(uint veId, address stakingToken) external view returns (uint);\n\n  function lockedDerivedAmount(uint veId) external view returns (uint);\n\n  function lockedEnd(uint veId) external view returns (uint);\n\n//  function voted(uint tokenId) external view returns (uint);\n  function isVoted(uint tokenId) external view returns (bool);\n\n  function tokens(uint idx) external view returns (address);\n\n  function balanceOfNFT(uint) external view returns (uint);\n\n  function balanceOfNFTAt(uint _tokenId, uint _t) external view returns (uint);\n\n  function isApprovedOrOwner(address, uint) external view returns (bool);\n\n  function createLockFor(address _token, uint _value, uint _lockDuration, address _to) external returns (uint);\n\n  function userPointEpoch(uint tokenId) external view returns (uint);\n\n  function epoch() external view returns (uint);\n\n  function userPointHistory(uint tokenId, uint loc) external view returns (Point memory);\n\n  function pointHistory(uint loc) external view returns (Point memory);\n\n  function checkpoint() external;\n\n  function increaseAmount(address _token, uint _tokenId, uint _value) external;\n\n  function attachToken(uint tokenId) external;\n\n  function detachToken(uint tokenId) external;\n\n  function voting(uint tokenId) external;\n\n  function abstain(uint tokenId) external;\n\n  function totalSupplyAt(uint _block) external view returns (uint);\n\n  function totalSupplyAtT(uint timestamp) external view returns (uint);\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IVeVotable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IVeVotable {\n\n  function isVotesExist(uint veId) external view returns (bool);\n\n  function detachTokenFromAll(uint tokenId, address owner) external;\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/interfaces/IVoter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IVeVotable.sol\";\n\ninterface IVoter is IVeVotable {\n\n  function ve() external view returns (address);\n\n  function attachTokenToGauge(address stakingToken, uint _tokenId, address account) external;\n\n  function detachTokenFromGauge(address stakingToken, uint _tokenId, address account) external;\n\n  function distribute(address stakingToken) external;\n\n  function distributeAll() external;\n\n  function notifyRewardAmount(uint amount) external;\n\n  function votedVaultsLength(uint veId) external view returns (uint);\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/lib/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos <brecht@loopring.org>\nlibrary Base64 {\n  bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  /// @notice Encodes some bytes to the base64 representation\n  function encode(bytes memory data) internal pure returns (string memory) {\n    uint len = data.length;\n    if (len == 0) return \"\";\n\n    // multiply by 4/3 rounded up\n    uint encodedLen = 4 * ((len + 2) / 3);\n\n    // Add some extra buffer at the end\n    bytes memory result = new bytes(encodedLen + 32);\n\n    bytes memory table = TABLE;\n\n    assembly {\n      let tablePtr := add(table, 1)\n      let resultPtr := add(result, 32)\n\n      for {\n        let i := 0\n      } lt(i, len) {\n\n      } {\n        i := add(i, 3)\n        let input := and(mload(add(data, i)), 0xffffff)\n\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n        out := shl(8, out)\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\n        out := shl(8, out)\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\n        out := shl(8, out)\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\n        out := shl(224, out)\n\n        mstore(resultPtr, out)\n\n        resultPtr := add(resultPtr, 4)\n      }\n\n      switch mod(len, 3)\n      case 1 {\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n      }\n      case 2 {\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\n      }\n\n      mstore(result, encodedLen)\n    }\n\n    return string(result);\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/lib/InterfaceIds.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\n/// @title Library for interface IDs\n/// @author bogdoslav\nlibrary InterfaceIds {\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant INTERFACE_IDS_LIB_VERSION = \"1.0.1\";\n\n  /// default notation:\n  /// bytes4 public constant I_VOTER = type(IVoter).interfaceId;\n\n  /// As type({Interface}).interfaceId can be changed,\n  /// when some functions changed at the interface,\n  /// so used hardcoded interface identifiers\n\n  bytes4 public constant I_VOTER = bytes4(keccak256(\"IVoter\"));\n  bytes4 public constant I_BRIBE = bytes4(keccak256(\"IBribe\"));\n  bytes4 public constant I_GAUGE = bytes4(keccak256(\"IGauge\"));\n  bytes4 public constant I_VE_TETU = bytes4(keccak256(\"IVeTetu\"));\n  bytes4 public constant I_SPLITTER = bytes4(keccak256(\"ISplitter\"));\n  bytes4 public constant I_FORWARDER = bytes4(keccak256(\"IForwarder\"));\n  bytes4 public constant I_MULTI_POOL = bytes4(keccak256(\"IMultiPool\"));\n  bytes4 public constant I_CONTROLLER = bytes4(keccak256(\"IController\"));\n  bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\"ITetuERC165\"));\n  bytes4 public constant I_STRATEGY_V2 = bytes4(keccak256(\"IStrategyV2\"));\n  bytes4 public constant I_STRATEGY_V3 = bytes4(keccak256(\"IStrategyV3\"));\n  bytes4 public constant I_CONTROLLABLE = bytes4(keccak256(\"IControllable\"));\n  bytes4 public constant I_TETU_VAULT_V2 = bytes4(keccak256(\"ITetuVaultV2\"));\n  bytes4 public constant I_PLATFORM_VOTER = bytes4(keccak256(\"IPlatformVoter\"));\n  bytes4 public constant I_VE_DISTRIBUTOR = bytes4(keccak256(\"IVeDistributor\"));\n  bytes4 public constant I_TETU_CONVERTER = bytes4(keccak256(\"ITetuConverter\"));\n  bytes4 public constant I_VAULT_INSURANCE = bytes4(keccak256(\"IVaultInsurance\"));\n  bytes4 public constant I_STRATEGY_STRICT = bytes4(keccak256(\"IStrategyStrict\"));\n  bytes4 public constant I_ERC4626 = bytes4(keccak256(\"IERC4626\"));\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/lib/SlotsLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\n/// @author bogdoslav\nlibrary SlotsLib {\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant SLOT_LIB_VERSION = \"1.0.0\";\n\n  // ************* GETTERS *******************\n\n  /// @dev Gets a slot as bytes32\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  /// @dev Gets a slot as an address\n  function getAddress(bytes32 slot) internal view returns (address result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  /// @dev Gets a slot as uint256\n  function getUint(bytes32 slot) internal view returns (uint result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  // ************* ARRAY GETTERS *******************\n\n  /// @dev Gets an array length\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  /// @dev Gets a slot array by index as address\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      result := sload(pointer)\n    }\n  }\n\n  /// @dev Gets a slot array by index as uint\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function uintAt(bytes32 slot, uint index) internal view returns (uint result) {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      result := sload(pointer)\n    }\n  }\n\n  // ************* SETTERS *******************\n\n  /// @dev Sets a slot with bytes32\n  /// @notice Check address for 0 at the setter\n  function set(bytes32 slot, bytes32 value) internal {\n    assembly {\n      sstore(slot, value)\n    }\n  }\n\n  /// @dev Sets a slot with address\n  /// @notice Check address for 0 at the setter\n  function set(bytes32 slot, address value) internal {\n    assembly {\n      sstore(slot, value)\n    }\n  }\n\n  /// @dev Sets a slot with uint\n  function set(bytes32 slot, uint value) internal {\n    assembly {\n      sstore(slot, value)\n    }\n  }\n\n  // ************* ARRAY SETTERS *******************\n\n  /// @dev Sets a slot array at index with address\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function setAt(bytes32 slot, uint index, address value) internal {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      sstore(pointer, value)\n    }\n  }\n\n  /// @dev Sets a slot array at index with uint\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function setAt(bytes32 slot, uint index, uint value) internal {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      sstore(pointer, value)\n    }\n  }\n\n  /// @dev Sets an array length\n  function setLength(bytes32 slot, uint length) internal {\n    assembly {\n      sstore(slot, length)\n    }\n  }\n\n  /// @dev Pushes an address to the array\n  function push(bytes32 slot, address value) internal {\n    uint length = arrayLength(slot);\n    setAt(slot, length, value);\n    setLength(slot, length + 1);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\n\nlibrary StringLib {\n\n  /// @dev Inspired by OraclizeAPI's implementation - MIT license\n  ///      https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n  function toString(uint value) external pure returns (string memory) {\n    return _toString(value);\n  }\n\n  function _toString(uint value) internal pure returns (string memory) {\n    if (value == 0) {\n      return \"0\";\n    }\n    uint temp = value;\n    uint digits;\n    while (temp != 0) {\n      digits++;\n      temp /= 10;\n    }\n    bytes memory buffer = new bytes(digits);\n    while (value != 0) {\n      digits -= 1;\n      buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\n      value /= 10;\n    }\n    return string(buffer);\n  }\n\n  function toAsciiString(address x) external pure returns (string memory) {\n    return _toAsciiString(x);\n  }\n\n  function _toAsciiString(address x) internal pure returns (string memory) {\n    bytes memory s = new bytes(40);\n    for (uint i = 0; i < 20; i++) {\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\n      bytes1 hi = bytes1(uint8(b) / 16);\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n      s[2 * i] = _char(hi);\n      s[2 * i + 1] = _char(lo);\n    }\n    return string(s);\n  }\n\n  function char(bytes1 b) external pure returns (bytes1 c) {\n    return _char(b);\n  }\n\n  function _char(bytes1 b) internal pure returns (bytes1 c) {\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n    else return bytes1(uint8(b) + 0x57);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n  function isContract(address account) internal view returns (bool) {\n    // This method relies on extcodesize/address.code.length, which returns 0\n    // for contracts in construction, since the code is only stored at the end\n    // of the constructor execution.\n\n    return account.code.length > 0;\n  }\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n    (bool success, ) = recipient.call{value: amount}(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n  function functionCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n  function functionStaticCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n    return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n  function functionDelegateCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) internal view returns (bytes memory) {\n    if (success) {\n      if (returndata.length == 0) {\n        // only check isContract if the call was successful and the return data is empty\n        // otherwise we already know that it was a contract\n        require(isContract(target), \"Address: call to non-contract\");\n      }\n      return returndata;\n    } else {\n      _revert(returndata, errorMessage);\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) internal pure returns (bytes memory) {\n    if (success) {\n      return returndata;\n    } else {\n      _revert(returndata, errorMessage);\n    }\n  }\n\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length > 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert(errorMessage);\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity 0.8.17;\nimport \"./Initializable.sol\";\n\n/**\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/utils/ContextUpgradeable.sol\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n  function __Context_init() internal onlyInitializing {\n  }\n\n  function __Context_init_unchained() internal onlyInitializing {\n  }\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n  uint[50] private __gap;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n  struct Counter {\n    // This variable should never be directly accessed by users of the library: interactions must be restricted to\n    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n    // this feature: see https://github.com/ethereum/solidity/issues/4637\n    uint256 _value; // default: 0\n  }\n\n  function current(Counter storage counter) internal view returns (uint256) {\n    return counter._value;\n  }\n\n  function increment(Counter storage counter) internal {\n  unchecked {\n    counter._value += 1;\n  }\n  }\n\n  function decrement(Counter storage counter) internal {\n    uint256 value = counter._value;\n    require(value > 0, \"Counter: decrement overflow\");\n  unchecked {\n    counter._value = value - 1;\n  }\n  }\n\n  function reset(Counter storage counter) internal {\n    counter._value = 0;\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity 0.8.17;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity 0.8.17;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n  enum RecoverError {\n    NoError,\n    InvalidSignature,\n    InvalidSignatureLength,\n    InvalidSignatureS,\n    InvalidSignatureV // Deprecated in v4.8\n  }\n\n  function _throwError(RecoverError error) private pure {\n    if (error == RecoverError.NoError) {\n      return; // no error: do nothing\n    } else if (error == RecoverError.InvalidSignature) {\n      revert(\"ECDSA: invalid signature\");\n    } else if (error == RecoverError.InvalidSignatureLength) {\n      revert(\"ECDSA: invalid signature length\");\n    } else if (error == RecoverError.InvalidSignatureS) {\n      revert(\"ECDSA: invalid signature 's' value\");\n    }\n  }\n\n  /**\n   * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n    if (signature.length == 65) {\n      bytes32 r;\n      bytes32 s;\n      uint8 v;\n      // ecrecover takes the signature parameters, and the only way to get them\n      // currently is to use assembly.\n      /// @solidity memory-safe-assembly\n      assembly {\n        r := mload(add(signature, 0x20))\n        s := mload(add(signature, 0x40))\n        v := byte(0, mload(add(signature, 0x60)))\n      }\n      return tryRecover(hash, v, r, s);\n    } else {\n      return (address(0), RecoverError.InvalidSignatureLength);\n    }\n  }\n\n  /**\n   * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\n    _throwError(error);\n    return recovered;\n  }\n\n  /**\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n  function tryRecover(\n    bytes32 hash,\n    bytes32 r,\n    bytes32 vs\n  ) internal pure returns (address, RecoverError) {\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\n    return tryRecover(hash, v, r, s);\n  }\n\n  /**\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n  function recover(\n    bytes32 hash,\n    bytes32 r,\n    bytes32 vs\n  ) internal pure returns (address) {\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n    _throwError(error);\n    return recovered;\n  }\n\n  /**\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n  function tryRecover(\n    bytes32 hash,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) internal pure returns (address, RecoverError) {\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n    // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n    //\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n    // these malleable signatures as well.\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n      return (address(0), RecoverError.InvalidSignatureS);\n    }\n\n    // If the signature is valid (and not malleable), return the signer address\n    address signer = ecrecover(hash, v, r, s);\n    if (signer == address(0)) {\n      return (address(0), RecoverError.InvalidSignature);\n    }\n\n    return (signer, RecoverError.NoError);\n  }\n\n  /**\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n  function recover(\n    bytes32 hash,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) internal pure returns (address) {\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n    _throwError(error);\n    return recovered;\n  }\n\n  /**\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n    // 32 is the length in bytes of hash,\n    // enforced by the type signature above\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n  }\n\n  /**\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n  }\n\n  /**\n   * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity 0.8.17;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n  /* solhint-disable var-name-mixedcase */\n  bytes32 private _HASHED_NAME;\n  bytes32 private _HASHED_VERSION;\n  bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n  /* solhint-enable var-name-mixedcase */\n\n  /**\n   * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n  function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n    __EIP712_init_unchained(name, version);\n  }\n\n  function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n    bytes32 hashedName = keccak256(bytes(name));\n    bytes32 hashedVersion = keccak256(bytes(version));\n    _HASHED_NAME = hashedName;\n    _HASHED_VERSION = hashedVersion;\n  }\n\n  /**\n   * @dev Returns the domain separator for the current chain.\n     */\n  function _domainSeparatorV4() internal view returns (bytes32) {\n    return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n  }\n\n  function _buildDomainSeparator(\n    bytes32 typeHash,\n    bytes32 nameHash,\n    bytes32 versionHash\n  ) private view returns (bytes32) {\n    return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n  }\n\n  /**\n   * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n    return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n  }\n\n  /**\n   * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n  function _EIP712NameHash() internal virtual view returns (bytes32) {\n    return _HASHED_NAME;\n  }\n\n  /**\n   * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n  function _EIP712VersionHash() internal virtual view returns (bytes32) {\n    return _HASHED_VERSION;\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n  uint256[50] private __gap;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity 0.8.17;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n  using EnumerableSet for EnumerableSet.Bytes32Set;\n\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Map type with\n  // bytes32 keys and values.\n  // The Map implementation uses private functions, and user-facing\n  // implementations (such as Uint256ToAddressMap) are just wrappers around\n  // the underlying Map.\n  // This means that we can only create new EnumerableMaps for types that fit\n  // in bytes32.\n\n  struct Bytes32ToBytes32Map {\n    // Storage of keys\n    EnumerableSet.Bytes32Set _keys;\n    mapping(bytes32 => bytes32) _values;\n  }\n\n  /**\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n  function set(\n    Bytes32ToBytes32Map storage map,\n    bytes32 key,\n    bytes32 value\n  ) internal returns (bool) {\n    map._values[key] = value;\n    return map._keys.add(key);\n  }\n\n  /**\n   * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n  function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n    delete map._values[key];\n    return map._keys.remove(key);\n  }\n\n  /**\n   * @dev Returns true if the key is in the map. O(1).\n     */\n  function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n    return map._keys.contains(key);\n  }\n\n  /**\n   * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n  function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n    return map._keys.length();\n  }\n\n  /**\n   * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n  function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n    bytes32 key = map._keys.at(index);\n    return (key, map._values[key]);\n  }\n\n  /**\n   * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n  function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n    bytes32 value = map._values[key];\n    if (value == bytes32(0)) {\n      return (contains(map, key), bytes32(0));\n    } else {\n      return (true, value);\n    }\n  }\n\n  /**\n   * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n  function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n    bytes32 value = map._values[key];\n    require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\n    return value;\n  }\n\n  /**\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n  function get(\n    Bytes32ToBytes32Map storage map,\n    bytes32 key,\n    string memory errorMessage\n  ) internal view returns (bytes32) {\n    bytes32 value = map._values[key];\n    require(value != 0 || contains(map, key), errorMessage);\n    return value;\n  }\n\n  // UintToUintMap\n\n  struct UintToUintMap {\n    Bytes32ToBytes32Map _inner;\n  }\n\n  /**\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n  function set(\n    UintToUintMap storage map,\n    uint256 key,\n    uint256 value\n  ) internal returns (bool) {\n    return set(map._inner, bytes32(key), bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n  function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n    return remove(map._inner, bytes32(key));\n  }\n\n  /**\n   * @dev Returns true if the key is in the map. O(1).\n     */\n  function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n    return contains(map._inner, bytes32(key));\n  }\n\n  /**\n   * @dev Returns the number of elements in the map. O(1).\n     */\n  function length(UintToUintMap storage map) internal view returns (uint256) {\n    return length(map._inner);\n  }\n\n  /**\n   * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n  function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n    (bytes32 key, bytes32 value) = at(map._inner, index);\n    return (uint256(key), uint256(value));\n  }\n\n  /**\n   * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n  function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n    return (success, uint256(value));\n  }\n\n  /**\n   * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n  function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n    return uint256(get(map._inner, bytes32(key)));\n  }\n\n  /**\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n  function get(\n    UintToUintMap storage map,\n    uint256 key,\n    string memory errorMessage\n  ) internal view returns (uint256) {\n    return uint256(get(map._inner, bytes32(key), errorMessage));\n  }\n\n  // UintToAddressMap\n\n  struct UintToAddressMap {\n    Bytes32ToBytes32Map _inner;\n  }\n\n  /**\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n  function set(\n    UintToAddressMap storage map,\n    uint256 key,\n    address value\n  ) internal returns (bool) {\n    return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n  function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n    return remove(map._inner, bytes32(key));\n  }\n\n  /**\n   * @dev Returns true if the key is in the map. O(1).\n     */\n  function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n    return contains(map._inner, bytes32(key));\n  }\n\n  /**\n   * @dev Returns the number of elements in the map. O(1).\n     */\n  function length(UintToAddressMap storage map) internal view returns (uint256) {\n    return length(map._inner);\n  }\n\n  /**\n   * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n  function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n    (bytes32 key, bytes32 value) = at(map._inner, index);\n    return (uint256(key), address(uint160(uint256(value))));\n  }\n\n  /**\n   * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n  function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n    return (success, address(uint160(uint256(value))));\n  }\n\n  /**\n   * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n  function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n    return address(uint160(uint256(get(map._inner, bytes32(key)))));\n  }\n\n  /**\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n  function get(\n    UintToAddressMap storage map,\n    uint256 key,\n    string memory errorMessage\n  ) internal view returns (address) {\n    return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\n  }\n\n  // AddressToUintMap\n\n  struct AddressToUintMap {\n    Bytes32ToBytes32Map _inner;\n  }\n\n  /**\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n  function set(\n    AddressToUintMap storage map,\n    address key,\n    uint256 value\n  ) internal returns (bool) {\n    return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n  function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n    return remove(map._inner, bytes32(uint256(uint160(key))));\n  }\n\n  /**\n   * @dev Returns true if the key is in the map. O(1).\n     */\n  function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n    return contains(map._inner, bytes32(uint256(uint160(key))));\n  }\n\n  /**\n   * @dev Returns the number of elements in the map. O(1).\n     */\n  function length(AddressToUintMap storage map) internal view returns (uint256) {\n    return length(map._inner);\n  }\n\n  /**\n   * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n  function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n    (bytes32 key, bytes32 value) = at(map._inner, index);\n    return (address(uint160(uint256(key))), uint256(value));\n  }\n\n  /**\n   * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n  function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n    return (success, uint256(value));\n  }\n\n  /**\n   * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n  function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n    return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n  }\n\n  /**\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n  function get(\n    AddressToUintMap storage map,\n    address key,\n    string memory errorMessage\n  ) internal view returns (uint256) {\n    return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\n  }\n\n  // Bytes32ToUintMap\n\n  struct Bytes32ToUintMap {\n    Bytes32ToBytes32Map _inner;\n  }\n\n  /**\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n  function set(\n    Bytes32ToUintMap storage map,\n    bytes32 key,\n    uint256 value\n  ) internal returns (bool) {\n    return set(map._inner, key, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n  function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n    return remove(map._inner, key);\n  }\n\n  /**\n   * @dev Returns true if the key is in the map. O(1).\n     */\n  function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n    return contains(map._inner, key);\n  }\n\n  /**\n   * @dev Returns the number of elements in the map. O(1).\n     */\n  function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n    return length(map._inner);\n  }\n\n  /**\n   * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n  function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\n    (bytes32 key, bytes32 value) = at(map._inner, index);\n    return (key, uint256(value));\n  }\n\n  /**\n   * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n  function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\n    (bool success, bytes32 value) = tryGet(map._inner, key);\n    return (success, uint256(value));\n  }\n\n  /**\n   * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n  function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n    return uint256(get(map._inner, key));\n  }\n\n  /**\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n  function get(\n    Bytes32ToUintMap storage map,\n    bytes32 key,\n    string memory errorMessage\n  ) internal view returns (uint256) {\n    return uint256(get(map._inner, key, errorMessage));\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity 0.8.17;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position of the value in the `values` array, plus 1 because index 0\n    // means a value is not in the set.\n    mapping(bytes32 => uint256) _indexes;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._indexes[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We read and store the value's index to prevent multiple reads from the same storage slot\n    uint256 valueIndex = set._indexes[value];\n\n    if (valueIndex != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 toDeleteIndex = valueIndex - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (lastIndex != toDeleteIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the last value to the index where the value to delete is\n        set._values[toDeleteIndex] = lastValue;\n        // Update the index for the moved value\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the index for the deleted slot\n      delete set._indexes[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n     */\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\n    return set._indexes[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n     */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n     */\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n     */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n  function remove(AddressSet storage set, address value) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n     */\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n     */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n  function values(AddressSet storage set) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n     */\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n     */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n     */\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IERC20Permit.sol\";\nimport \"./ERC20.sol\";\nimport \"./ECDSA.sol\";\nimport \"./EIP712.sol\";\nimport \"./Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity 0.8.17;\n\nimport \"./ERC20Upgradeable.sol\";\nimport \"./ECDSAUpgradeable.sol\";\nimport \"./EIP712Upgradeable.sol\";\nimport \"./CountersUpgradeable.sol\";\nimport \"./Initializable.sol\";\nimport \"../interfaces/IERC20Permit.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20Permit, EIP712Upgradeable {\n  using CountersUpgradeable for CountersUpgradeable.Counter;\n\n  mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n  // solhint-disable-next-line var-name-mixedcase\n  bytes32 private constant _PERMIT_TYPEHASH =\n  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n  /**\n   * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n  // solhint-disable-next-line var-name-mixedcase\n  bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n  /**\n   * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n  function __ERC20Permit_init(string memory name) internal onlyInitializing {\n    __EIP712_init_unchained(name, \"1\");\n  }\n\n  function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n  /**\n   * @dev See {IERC20Permit-permit}.\n     */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public virtual override {\n    require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n    bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n    bytes32 hash = _hashTypedDataV4(structHash);\n\n    address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n    require(signer == owner, \"ERC20Permit: invalid signature\");\n\n    _approve(owner, spender, value);\n  }\n\n  /**\n   * @dev See {IERC20Permit-nonces}.\n     */\n  function nonces(address owner) public view virtual override returns (uint256) {\n    return _nonces[owner].current();\n  }\n\n  /**\n   * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n    return _domainSeparatorV4();\n  }\n\n  /**\n   * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n  function _useNonce(address owner) internal virtual returns (uint256 current) {\n    CountersUpgradeable.Counter storage nonce = _nonces[owner];\n    current = nonce.current();\n    nonce.increment();\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n  uint256[49] private __gap;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"./ContextUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata {\n  mapping(address => uint256) private _balances;\n\n  mapping(address => mapping(address => uint256)) internal _allowances;\n\n  uint256 private _totalSupply;\n\n  string private _name;\n  string private _symbol;\n\n  /**\n   * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n    __ERC20_init_unchained(name_, symbol_);\n  }\n\n  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n    _name = name_;\n    _symbol = symbol_;\n  }\n\n  /**\n   * @dev Returns the name of the token.\n     */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n  function decimals() public view virtual override returns (uint8) {\n    return 18;\n  }\n\n  /**\n   * @dev See {IERC20-totalSupply}.\n     */\n  function totalSupply() public view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev See {IERC20-balanceOf}.\n     */\n  function balanceOf(address account) public view virtual override returns (uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n  function transfer(address to, uint256 amount) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _transfer(owner, to, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n     */\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address spender = _msgSender();\n    _spendAllowance(from, spender, amount);\n    _transfer(from, to, amount);\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n    address owner = _msgSender();\n    uint256 currentAllowance = allowance(owner, spender);\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n  unchecked {\n    _approve(owner, spender, currentAllowance - subtractedValue);\n  }\n\n    return true;\n  }\n\n  /**\n   * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n  function _transfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {\n    require(from != address(0), \"ERC20: transfer from the zero address\");\n    require(to != address(0), \"ERC20: transfer to the zero address\");\n\n    _beforeTokenTransfer(from, to, amount);\n\n    uint256 fromBalance = _balances[from];\n    require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n  unchecked {\n    _balances[from] = fromBalance - amount;\n    // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n    // decrementing then incrementing.\n    _balances[to] += amount;\n  }\n\n    emit Transfer(from, to, amount);\n\n    _afterTokenTransfer(from, to, amount);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n  function _mint(address account, uint256 amount) internal virtual {\n    require(account != address(0), \"ERC20: mint to the zero address\");\n\n    _beforeTokenTransfer(address(0), account, amount);\n\n    _totalSupply += amount;\n  unchecked {\n    // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n    _balances[account] += amount;\n  }\n    emit Transfer(address(0), account, amount);\n\n    _afterTokenTransfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n  function _burn(address account, uint256 amount) internal virtual {\n    require(account != address(0), \"ERC20: burn from the zero address\");\n\n    _beforeTokenTransfer(account, address(0), amount);\n\n    uint256 accountBalance = _balances[account];\n    require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n  unchecked {\n    _balances[account] = accountBalance - amount;\n    // Overflow not possible: amount <= accountBalance <= totalSupply.\n    _totalSupply -= amount;\n  }\n\n    emit Transfer(account, address(0), amount);\n\n    _afterTokenTransfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n  function _approve(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n  function _spendAllowance(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    uint256 currentAllowance = allowance(owner, spender);\n    if (currentAllowance != type(uint256).max) {\n      require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n    unchecked {\n      _approve(owner, spender, currentAllowance - amount);\n    }\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n  uint256[45] private __gap;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity 0.8.17;\n\nimport \"./Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n  /**\n   * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n  uint8 private _initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n     */\n  bool private _initializing;\n\n  /**\n   * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n  event Initialized(uint8 version);\n\n  /**\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n  modifier initializer() {\n    bool isTopLevelCall = !_initializing;\n    require(\n      (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n      \"Initializable: contract is already initialized\"\n    );\n    _initialized = 1;\n    if (isTopLevelCall) {\n      _initializing = true;\n    }\n    _;\n    if (isTopLevelCall) {\n      _initializing = false;\n      emit Initialized(1);\n    }\n  }\n\n  /**\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n  modifier reinitializer(uint8 version) {\n    require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n    _initialized = version;\n    _initializing = true;\n    _;\n    _initializing = false;\n    emit Initialized(version);\n  }\n\n  /**\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n  modifier onlyInitializing() {\n    require(_initializing, \"Initializable: contract is not initializing\");\n    _;\n  }\n\n  /**\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n  function _disableInitializers() internal virtual {\n    require(!_initializing, \"Initializable: contract is initializing\");\n    if (_initialized != type(uint8).max) {\n      _initialized = type(uint8).max;\n      emit Initialized(type(uint8).max);\n    }\n  }\n\n  /**\n   * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n  function _getInitializedVersion() internal view returns (uint8) {\n    return _initialized;\n  }\n\n  /**\n   * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n  function _isInitializing() internal view returns (bool) {\n    return _initializing;\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n  enum Rounding {\n    Down, // Toward negative infinity\n    Up, // Toward infinity\n    Zero // Toward zero\n  }\n\n  /**\n   * @dev Returns the largest of two numbers.\n     */\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a > b ? a : b;\n  }\n\n  /**\n   * @dev Returns the smallest of two numbers.\n     */\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  /**\n   * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b) / 2 can overflow.\n    return (a & b) + (a ^ b) / 2;\n  }\n\n  /**\n   * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b - 1) / b can overflow on addition, so we distribute.\n    return a == 0 ? 0 : (a - 1) / b + 1;\n  }\n\n  /**\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n  function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n  ) internal pure returns (uint256 result) {\n  unchecked {\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n    // variables such that product = prod1 * 2^256 + prod0.\n    uint256 prod0; // Least significant 256 bits of the product\n    uint256 prod1; // Most significant 256 bits of the product\n    assembly {\n      let mm := mulmod(x, y, not(0))\n      prod0 := mul(x, y)\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n    }\n\n    // Handle non-overflow cases, 256 by 256 division.\n    if (prod1 == 0) {\n      return prod0 / denominator;\n    }\n\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\n    require(denominator > prod1, \"Math: mulDiv overflow\");\n\n    ///////////////////////////////////////////////\n    // 512 by 256 division.\n    ///////////////////////////////////////////////\n\n    // Make division exact by subtracting the remainder from [prod1 prod0].\n    uint256 remainder;\n    assembly {\n    // Compute remainder using mulmod.\n      remainder := mulmod(x, y, denominator)\n\n    // Subtract 256 bit number from 512 bit number.\n      prod1 := sub(prod1, gt(remainder, prod0))\n      prod0 := sub(prod0, remainder)\n    }\n\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n    // See https://cs.stackexchange.com/q/138556/92363.\n\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\n    uint256 twos = denominator & (~denominator + 1);\n    assembly {\n    // Divide denominator by twos.\n      denominator := div(denominator, twos)\n\n    // Divide [prod1 prod0] by twos.\n      prod0 := div(prod0, twos)\n\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n      twos := add(div(sub(0, twos), twos), 1)\n    }\n\n    // Shift in bits from prod1 into prod0.\n    prod0 |= prod1 * twos;\n\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n    // four bits. That is, denominator * inv = 1 mod 2^4.\n    uint256 inverse = (3 * denominator) ^ 2;\n\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n    // in modular arithmetic, doubling the correct bits in each step.\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n    // is no longer required.\n    result = prod0 * inverse;\n    return result;\n  }\n  }\n\n  /**\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n  function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator,\n    Rounding rounding\n  ) internal pure returns (uint256) {\n    uint256 result = mulDiv(x, y, denominator);\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n      result += 1;\n    }\n    return result;\n  }\n\n  /**\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n  function sqrt(uint256 a) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n    //\n    // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n    //\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n    // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n    // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n    //\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n    uint256 result = 1 << (log2(a) >> 1);\n\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n    // into the expected uint128 result.\n  unchecked {\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    return min(result, a / result);\n  }\n  }\n\n  /**\n   * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n  unchecked {\n    uint256 result = sqrt(a);\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n  }\n  }\n\n  /**\n   * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log2(uint256 value) internal pure returns (uint256) {\n    uint256 result = 0;\n  unchecked {\n    if (value >> 128 > 0) {\n      value >>= 128;\n      result += 128;\n    }\n    if (value >> 64 > 0) {\n      value >>= 64;\n      result += 64;\n    }\n    if (value >> 32 > 0) {\n      value >>= 32;\n      result += 32;\n    }\n    if (value >> 16 > 0) {\n      value >>= 16;\n      result += 16;\n    }\n    if (value >> 8 > 0) {\n      value >>= 8;\n      result += 8;\n    }\n    if (value >> 4 > 0) {\n      value >>= 4;\n      result += 4;\n    }\n    if (value >> 2 > 0) {\n      value >>= 2;\n      result += 2;\n    }\n    if (value >> 1 > 0) {\n      result += 1;\n    }\n  }\n    return result;\n  }\n\n  /**\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n  unchecked {\n    uint256 result = log2(value);\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n  }\n  }\n\n  /**\n   * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log10(uint256 value) internal pure returns (uint256) {\n    uint256 result = 0;\n  unchecked {\n    if (value >= 10**64) {\n      value /= 10**64;\n      result += 64;\n    }\n    if (value >= 10**32) {\n      value /= 10**32;\n      result += 32;\n    }\n    if (value >= 10**16) {\n      value /= 10**16;\n      result += 16;\n    }\n    if (value >= 10**8) {\n      value /= 10**8;\n      result += 8;\n    }\n    if (value >= 10**4) {\n      value /= 10**4;\n      result += 4;\n    }\n    if (value >= 10**2) {\n      value /= 10**2;\n      result += 2;\n    }\n    if (value >= 10**1) {\n      result += 1;\n    }\n  }\n    return result;\n  }\n\n  /**\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n  unchecked {\n    uint256 result = log10(value);\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n  }\n  }\n\n  /**\n   * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n  function log256(uint256 value) internal pure returns (uint256) {\n    uint256 result = 0;\n  unchecked {\n    if (value >> 128 > 0) {\n      value >>= 128;\n      result += 16;\n    }\n    if (value >> 64 > 0) {\n      value >>= 64;\n      result += 8;\n    }\n    if (value >> 32 > 0) {\n      value >>= 32;\n      result += 4;\n    }\n    if (value >> 16 > 0) {\n      value >>= 16;\n      result += 2;\n    }\n    if (value >> 8 > 0) {\n      result += 1;\n    }\n  }\n    return result;\n  }\n\n  /**\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n  unchecked {\n    uint256 result = log256(value);\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n  }\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n  /**\n   * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n  function _delegate(address implementation) internal virtual {\n    assembly {\n    // Copy msg.data. We take full control of memory in this inline assembly\n    // block because it will not return to Solidity code. We overwrite the\n    // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize())\n\n    // Call the implementation.\n    // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n    // Copy the returned data.\n      returndatacopy(0, 0, returndatasize())\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return (0, returndatasize())\n      }\n    }\n  }\n\n  /**\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n  function _implementation() internal view virtual returns (address);\n\n  /**\n   * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n  function _fallback() internal virtual {\n    _beforeFallback();\n    _delegate(_implementation());\n  }\n\n  /**\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n  fallback() external payable virtual {\n    _fallback();\n  }\n\n  /**\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n  receive() external payable virtual {\n    _fallback();\n  }\n\n  /**\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n  function _beforeFallback() internal virtual {}\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n  // Booleans are more expensive than uint256 or any type that takes up a full\n  // word because each write operation emits an extra SLOAD to first read the\n  // slot's contents, replace the bits taken up by the boolean, and then write\n  // back. This is the compiler's defense against contract upgrades and\n  // pointer aliasing, and it cannot be disabled.\n\n  // The values being non-zero value makes deployment a bit more expensive,\n  // but in exchange the refund on every call to nonReentrant will be lower in\n  // amount. Since refunds are capped to a percentage of the total\n  // transaction's gas, it is best to keep them low in cases like this one, to\n  // increase the likelihood of the full refund coming into effect.\n  uint256 private constant _NOT_ENTERED = 1;\n  uint256 private constant _ENTERED = 2;\n\n  uint256 private _status;\n\n  constructor() {\n    _status = _NOT_ENTERED;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n  modifier nonReentrant() {\n    _nonReentrantBefore();\n    _;\n    _nonReentrantAfter();\n  }\n\n  function _nonReentrantBefore() private {\n    // On the first call to nonReentrant, _status will be _NOT_ENTERED\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n    // Any calls to nonReentrant after this point will fail\n    _status = _ENTERED;\n  }\n\n  function _nonReentrantAfter() private {\n    // By storing the original value once again, a refund is triggered (see\n    // https://eips.ethereum.org/EIPS/eip-2200)\n    _status = _NOT_ENTERED;\n  }\n\n  /**\n   * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n  function _reentrancyGuardEntered() internal view returns (bool) {\n    return _status == _ENTERED;\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Permit.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n  }\n\n  /**\n   * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    // safeApprove should only be called when setting an initial allowance,\n    // or when resetting it to zero. To increase and decrease it, use\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n    require(\n      (value == 0) || (token.allowance(address(this), spender) == 0),\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\n    );\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n  }\n\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n  }\n\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n  unchecked {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n    uint256 newAllowance = oldAllowance - value;\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n  }\n  }\n\n  function safePermit(\n    IERC20Permit token,\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) internal {\n    uint256 nonceBefore = token.nonces(owner);\n    token.permit(owner, spender, value, deadline, v, r, s);\n    uint256 nonceAfter = token.nonces(owner);\n    require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n    if (returndata.length > 0) {\n      // Return data is optional\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n  bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n  uint8 private constant _ADDRESS_LENGTH = 20;\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n  function toString(uint256 value) internal pure returns (string memory) {\n  unchecked {\n    uint256 length = Math.log10(value) + 1;\n    string memory buffer = new string(length);\n    uint256 ptr;\n    /// @solidity memory-safe-assembly\n    assembly {\n      ptr := add(buffer, add(32, length))\n    }\n    while (true) {\n      ptr--;\n      /// @solidity memory-safe-assembly\n      assembly {\n        mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n      }\n      value /= 10;\n      if (value == 0) break;\n    }\n    return buffer;\n  }\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n  function toHexString(uint256 value) internal pure returns (string memory) {\n  unchecked {\n    return toHexString(value, Math.log256(value) + 1);\n  }\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n    bytes memory buffer = new bytes(2 * length + 2);\n    buffer[0] = \"0\";\n    buffer[1] = \"x\";\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\n      buffer[i] = _SYMBOLS[value & 0xf];\n      value >>= 4;\n    }\n    require(value == 0, \"Strings: hex length insufficient\");\n    return string(buffer);\n  }\n\n  /**\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n  function toHexString(address addr) internal pure returns (string memory) {\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/proxy/ControllableV3.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/Initializable.sol\";\nimport \"../tools/TetuERC165.sol\";\nimport \"../interfaces/IControllable.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../lib/SlotsLib.sol\";\nimport \"../lib/InterfaceIds.sol\";\n\n/// @title Implement basic functionality for any contract that require strict control\n/// @dev Can be used with upgradeable pattern.\n///      Require call __Controllable_init() in any case.\n/// @author belbix\nabstract contract ControllableV3 is Initializable, TetuERC165, IControllable {\n  using SlotsLib for bytes32;\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant CONTROLLABLE_VERSION = \"3.0.1\";\n\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.controller\")) - 1);\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.created\")) - 1);\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.created_block\")) - 1);\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.revision\")) - 1);\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.prev_logic\")) - 1);\n\n  event ContractInitialized(address controller, uint ts, uint block);\n  event RevisionIncreased(uint value, address oldLogic);\n\n  /// @dev Prevent implementation init\n  constructor() {\n    _disableInitializers();\n  }\n\n  /// @notice Initialize contract after setup it as proxy implementation\n  ///         Save block.timestamp in the \"created\" variable\n  /// @dev Use it only once after first logic setup\n  /// @param controller_ Controller address\n  function __Controllable_init(address controller_) internal onlyInitializing {\n    require(controller_ != address(0), \"Zero controller\");\n    _requireInterface(controller_, InterfaceIds.I_CONTROLLER);\n    require(IController(controller_).governance() != address(0), \"Zero governance\");\n    _CONTROLLER_SLOT.set(controller_);\n    _CREATED_SLOT.set(block.timestamp);\n    _CREATED_BLOCK_SLOT.set(block.number);\n    emit ContractInitialized(controller_, block.timestamp, block.number);\n  }\n\n  /// @dev Return true if given address is controller\n  function isController(address _value) public override view returns (bool) {\n    return _value == controller();\n  }\n\n  /// @notice Return true if given address is setup as governance in Controller\n  function isGovernance(address _value) public override view returns (bool) {\n    return IController(controller()).governance() == _value;\n  }\n\n  /// @dev Contract upgrade counter\n  function revision() external view returns (uint){\n    return _REVISION_SLOT.getUint();\n  }\n\n  /// @dev Previous logic implementation\n  function previousImplementation() external view returns (address){\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_CONTROLLABLE || super.supportsInterface(interfaceId);\n  }\n\n  // ************* SETTERS/GETTERS *******************\n\n  /// @notice Return controller address saved in the contract slot\n  function controller() public view override returns (address) {\n    return _CONTROLLER_SLOT.getAddress();\n  }\n\n  /// @notice Return creation timestamp\n  /// @return Creation timestamp\n  function created() external view override returns (uint256) {\n    return _CREATED_SLOT.getUint();\n  }\n\n  /// @notice Return creation block number\n  /// @return Creation block number\n  function createdBlock() external override view returns (uint256) {\n    return _CREATED_BLOCK_SLOT.getUint();\n  }\n\n  /// @dev Revision should be increased on each contract upgrade\n  function increaseRevision(address oldLogic) external override {\n    require(msg.sender == address(this), \"Increase revision forbidden\");\n    uint r = _REVISION_SLOT.getUint() + 1;\n    _REVISION_SLOT.set(r);\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\n    emit RevisionIncreased(r, oldLogic);\n  }\n\n  /// @dev Gets a slot as bytes32\n  function getSlot(uint slot) external view returns (bytes32 result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/proxy/ProxyControlled.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IControllable.sol\";\nimport \"../interfaces/IProxyControlled.sol\";\nimport \"./UpgradeableProxy.sol\";\nimport \"../interfaces/IERC165.sol\";\nimport \"../lib/InterfaceIds.sol\";\n\n/// @title EIP1967 Upgradable proxy implementation.\n/// @dev Only Controller has access and should implement time-lock for upgrade action.\n/// @author belbix\ncontract ProxyControlled is UpgradeableProxy, IProxyControlled {\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant PROXY_CONTROLLED_VERSION = \"1.0.1\";\n\n  /// @dev Initialize proxy implementation. Need to call after deploy new proxy.\n  function initProxy(address _logic) external override {\n    //make sure that given logic is controllable and not inited\n    require(IERC165(_logic).supportsInterface(InterfaceIds.I_CONTROLLABLE), \"Proxy: Wrong implementation\");\n    _init(_logic);\n  }\n\n  /// @notice Upgrade contract logic\n  /// @dev Upgrade allowed only for Controller and should be done only after time-lock period\n  /// @param _newImplementation Implementation address\n  function upgrade(address _newImplementation) external override {\n    require(IERC165(_newImplementation).supportsInterface(InterfaceIds.I_CONTROLLABLE), \"Proxy: Wrong implementation\");\n    require(IControllable(address(this)).isController(msg.sender), \"Proxy: Forbidden\");\n    IControllable(address(this)).increaseRevision(_implementation());\n    _upgradeTo(_newImplementation);\n    // the new contract must have the same ABI and you must have the power to change it again\n    require(IControllable(address(this)).isController(msg.sender), \"Proxy: Wrong implementation\");\n  }\n\n  /// @notice Return current logic implementation\n  function implementation() external override view returns (address) {\n    return _implementation();\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/proxy/UpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/Proxy.sol\";\nimport \"../openzeppelin/Address.sol\";\n\n/// @title OpenZeppelin https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4/contracts/proxy/UpgradeableProxy.sol\n/// @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n///      implementation address that can be changed. This address is stored in storage in the location specified by\n///      https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n///      implementation behind the proxy.\n///      Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n///      {TransparentUpgradeableProxy}.\nabstract contract UpgradeableProxy is Proxy {\n\n  /// @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n  ///      If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n  ///      function call, and allows initializating the storage of the proxy like a Solidity constructor.\n  constructor() payable {\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n  }\n\n  /// @dev Emitted when the implementation is upgraded.\n  event Upgraded(address indexed implementation);\n\n  ///@dev Storage slot with the address of the current implementation.\n  ///     This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n  ///     validated in the constructor.\n  bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  /// @dev Post deploy initialisation for compatability with EIP-1167 factory\n  function _init(address _logic) internal {\n    require(_implementation() == address(0), \"Already inited\");\n    _setImplementation(_logic);\n  }\n\n  /// @dev Returns the current implementation address.\n  function _implementation() internal view virtual override returns (address impl) {\n    bytes32 slot = _IMPLEMENTATION_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /// @dev Upgrades the proxy to a new implementation.\n  ///      Emits an {Upgraded} event.\n  function _upgradeTo(address newImplementation) internal virtual {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /// @dev Stores a new address in the EIP1967 implementation slot.\n  function _setImplementation(address newImplementation) private {\n    require(Address.isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n    bytes32 slot = _IMPLEMENTATION_SLOT;\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/reward/MultiBribe.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IVoter.sol\";\nimport \"../interfaces/IERC721.sol\";\nimport \"../interfaces/IBribe.sol\";\nimport \"./StakelessMultiPoolBase.sol\";\nimport \"../interfaces/IForwarder.sol\";\n\n/// @title Stakeless pool for ve token\n/// @author belbix\ncontract MultiBribe is StakelessMultiPoolBase, IBribe {\n  using SafeERC20 for IERC20;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant MULTI_BRIBE_VERSION = \"1.0.4\";\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev The ve token used for gauges\n  address public ve;\n  /// @dev vault => rt => epoch => amount\n  mapping(address => mapping(address => mapping(uint => uint))) public rewardsQueue;\n  /// @dev Current epoch for delayed rewards\n  uint public override epoch;\n  address public epochOperator;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event BribeDeposit(address indexed vault, uint indexed veId, uint amount);\n  event BribeWithdraw(address indexed vault, uint indexed veId, uint amount);\n  event RewardsForNextEpoch(address vault, address token, uint epoch, uint amount);\n  event DelayedRewardsNotified(address vault, address token, uint epoch, uint amount);\n  event EpochOperatorChanged(address value);\n  event EpochIncreased(uint epoch);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  function init(\n    address controller_,\n    address _ve,\n    address _defaultReward\n  ) external initializer {\n    __MultiPool_init(controller_, _defaultReward, 1);\n    _requireInterface(_ve, InterfaceIds.I_VE_TETU);\n    ve = _ve;\n  }\n\n  function voter() public view returns (address) {\n    return IController(controller()).voter();\n  }\n\n  // *************************************************************\n  //                      GOV ACTIONS\n  // *************************************************************\n\n  function setEpochOperator(address value) external {\n    require(isGovernance(msg.sender), \"!gov\");\n    epochOperator = value;\n    emit EpochOperatorChanged(value);\n  }\n\n  // *************************************************************\n  //                        CLAIMS\n  // *************************************************************\n\n  function getReward(\n    address _vault,\n    uint veId,\n    address[] memory tokens\n  ) external override {\n    _getReward(_vault, veId, tokens, IERC721(ve).ownerOf(veId));\n  }\n\n  function getAllRewards(\n    address _vault,\n    uint veId\n  ) external override {\n    _getAllRewards(_vault, veId, IERC721(ve).ownerOf(veId));\n  }\n\n  function _getAllRewards(\n    address _vault,\n    uint veId,\n    address recipient\n  ) internal {\n    address[] storage rts = rewardTokens[_vault];\n    uint length = rts.length;\n    address[] memory tokens = new address[](length + 1);\n    for (uint i; i < length; ++i) {\n      tokens[i] = rts[i];\n    }\n    tokens[length] = defaultRewardToken;\n    _getReward(_vault, veId, tokens, recipient);\n  }\n\n  function getAllRewardsForTokens(\n    address[] memory _vaults,\n    uint veId\n  ) external override {\n    address recipient = IERC721(ve).ownerOf(veId);\n    for (uint i; i < _vaults.length; i++) {\n      _getAllRewards(_vaults[i], veId, recipient);\n    }\n  }\n\n  function _getReward(\n    address _vault,\n    uint veId,\n    address[] memory _rewardTokens,\n    address recipient\n  ) internal {\n    IForwarder(IController(controller()).forwarder()).distributeAll(_vault);\n    uint _epoch = epoch;\n    for (uint i; i < _rewardTokens.length; ++i) {\n      _notifyDelayedRewards(_vault, _rewardTokens[i], _epoch);\n    }\n    _getReward(_vault, tokenIdToAddress(veId), _rewardTokens, recipient);\n  }\n\n  // *************************************************************\n  //                   DEPOSIT/WITHDRAW\n  // *************************************************************\n\n  /// @dev Only voter can call it when a user vote for the vault\n  function deposit(address vault, uint amount, uint veId) external override {\n    require(msg.sender == voter(), \"Not voter\");\n    _registerBalanceIncreasing(vault, tokenIdToAddress(veId), amount);\n    emit BribeDeposit(vault, veId, amount);\n  }\n\n  /// @dev Only voter can call it when a user reset the vote for the vault.\n  function withdraw(address vault, uint amount, uint veId) external override {\n    require(msg.sender == voter(), \"Not voter\");\n    _registerBalanceDecreasing(vault, tokenIdToAddress(veId), amount);\n    emit BribeWithdraw(vault, veId, amount);\n  }\n\n  // *************************************************************\n  //                   REWARDS DISTRIBUTION\n  // *************************************************************\n\n  /// @dev Add rewards to the current users\n  function notifyRewardAmount(address vault, address token, uint amount) external nonReentrant override {\n    _notifyRewardAmount(vault, token, amount, true);\n  }\n\n  /// @dev Add delayed rewards for the next epoch\n  function notifyForNextEpoch(address vault, address token, uint amount) external nonReentrant override {\n    require(defaultRewardToken == token || isRewardToken[vault][token], \"Token not allowed\");\n\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n    uint _epoch = epoch + 1;\n    rewardsQueue[vault][token][_epoch] += amount;\n\n    // try to notify for the current epoch\n    _notifyDelayedRewards(vault, token, _epoch - 1);\n\n    emit RewardsForNextEpoch(vault, token, _epoch, amount);\n  }\n\n  /// @dev Notify delayed rewards\n  function notifyDelayedRewards(address vault, address token, uint _epoch) external nonReentrant override {\n    require(epoch >= _epoch, \"!epoch\");\n    _notifyDelayedRewards(vault, token, _epoch);\n  }\n\n  function _notifyDelayedRewards(address vault, address token, uint _epoch) internal {\n    uint amount = rewardsQueue[vault][token][_epoch];\n    if (amount != 0 && amount > left(vault, token)) {\n      _notifyRewardAmount(vault, token, amount, false);\n      delete rewardsQueue[vault][token][_epoch];\n      emit DelayedRewardsNotified(vault, token, epoch, amount);\n    }\n  }\n\n  /// @dev Increase the current epoch by one, Epoch operator should increase it weekly.\n  function increaseEpoch() external override {\n    require(msg.sender == epochOperator, \"!operator\");\n    epoch++;\n    emit EpochIncreased(epoch);\n  }\n\n  // *************************************************************\n  //                   INTERNAL LOGIC\n  // *************************************************************\n\n  function isStakeToken(address token) public view override returns (bool) {\n    return IController(controller()).isValidVault(token);\n  }\n\n  function addressToTokenId(address adr) public pure returns (uint) {\n    return uint(uint160(adr));\n  }\n\n  function tokenIdToAddress(uint tokenId) public pure returns (address) {\n    address adr = address(uint160(tokenId));\n    require(addressToTokenId(adr) == tokenId, \"Wrong convert\");\n    return adr;\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override(StakelessMultiPoolBase) returns (bool) {\n    return interfaceId == InterfaceIds.I_BRIBE || super.supportsInterface(interfaceId);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/reward/MultiGauge.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IVoter.sol\";\nimport \"../interfaces/IERC721.sol\";\nimport \"../interfaces/IVeTetu.sol\";\nimport \"../interfaces/IGauge.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"./StakelessMultiPoolBase.sol\";\n\n/// @title Stakeless pool for vaults\n/// @author belbix\ncontract MultiGauge is StakelessMultiPoolBase, IGauge {\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant MULTI_GAUGE_VERSION = \"1.0.0\";\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev The ve token used for gauges\n  address public ve;\n  /// @dev staking token => ve owner => veId\n  mapping(address => mapping(address => uint)) public override veIds;\n  /// @dev Staking token => whitelist status\n  mapping(address => bool) public stakingTokens;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event AddStakingToken(address token);\n  event Deposit(address indexed stakingToken, address indexed account, uint amount);\n  event Withdraw(address indexed stakingToken, address indexed account, uint amount, bool full, uint veId);\n  event VeTokenLocked(address indexed stakingToken, address indexed account, uint tokenId);\n  event VeTokenUnlocked(address indexed stakingToken, address indexed account, uint tokenId);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  function init(\n    address controller_,\n    address _ve,\n    address _defaultRewardToken\n  ) external initializer {\n    __MultiPool_init(controller_, _defaultRewardToken, 7 days);\n    _requireInterface(_ve, InterfaceIds.I_VE_TETU);\n    ve = _ve;\n  }\n\n  function voter() public view returns (IVoter) {\n    return IVoter(IController(controller()).voter());\n  }\n\n  // *************************************************************\n  //                    OPERATOR ACTIONS\n  // *************************************************************\n\n  /// @dev Allowed contracts can whitelist token. Removing is forbidden.\n  function addStakingToken(address token) external override onlyAllowedContracts {\n    stakingTokens[token] = true;\n    emit AddStakingToken(token);\n  }\n\n  // *************************************************************\n  //                        CLAIMS\n  // *************************************************************\n\n  function getReward(\n    address stakingToken,\n    address account,\n    address[] memory tokens\n  ) external override {\n    _getReward(stakingToken, account, tokens);\n  }\n\n  function getAllRewards(\n    address stakingToken,\n    address account\n  ) external override {\n    _getAllRewards(stakingToken, account);\n  }\n\n  function _getAllRewards(\n    address stakingToken,\n    address account\n  ) internal {\n    address[] storage rts = rewardTokens[stakingToken];\n    uint length = rts.length;\n    address[] memory tokens = new address[](length + 1);\n    for (uint i; i < length; ++i) {\n      tokens[i] = rts[i];\n    }\n    tokens[length] = defaultRewardToken;\n    _getReward(stakingToken, account, tokens);\n  }\n\n  function getAllRewardsForTokens(\n    address[] memory _stakingTokens,\n    address account\n  ) external override {\n    for (uint i; i < _stakingTokens.length; i++) {\n      _getAllRewards(_stakingTokens[i], account);\n    }\n  }\n\n  function _getReward(address stakingToken, address account, address[] memory tokens) internal {\n    voter().distribute(stakingToken);\n    _getReward(stakingToken, account, tokens, account);\n  }\n\n  // *************************************************************\n  //                   VIRTUAL DEPOSIT/WITHDRAW\n  // *************************************************************\n\n  function attachVe(address stakingToken, address account, uint veId) external override {\n    require(IERC721(ve).ownerOf(veId) == account && account == msg.sender, \"Not ve token owner\");\n    require(isStakeToken(stakingToken), \"Wrong staking token\");\n\n    if (veIds[stakingToken][account] == 0) {\n      veIds[stakingToken][account] = veId;\n      voter().attachTokenToGauge(stakingToken, veId, account);\n    }\n    require(veIds[stakingToken][account] == veId, \"Wrong ve\");\n\n    _updateDerivedBalance(stakingToken, account);\n    _updateRewardForAllTokens(stakingToken, account);\n    emit VeTokenLocked(stakingToken, account, veId);\n  }\n\n  function detachVe(address stakingToken, address account, uint veId) external override {\n    require((IERC721(ve).ownerOf(veId) == account && msg.sender == account)\n      || msg.sender == address(voter()), \"Not ve token owner or voter\");\n    require(isStakeToken(stakingToken), \"Wrong staking token\");\n\n    _unlockVeToken(stakingToken, account, veId);\n    _updateDerivedBalance(stakingToken, account);\n    _updateRewardForAllTokens(stakingToken, account);\n  }\n\n  /// @dev Must be called from stakingToken when user balance changed.\n  function handleBalanceChange(address account) external override {\n    address stakingToken = msg.sender;\n    require(isStakeToken(stakingToken), \"Wrong staking token\");\n\n    uint stakedBalance = balanceOf[stakingToken][account];\n    uint actualBalance = IERC20(stakingToken).balanceOf(account);\n    if (stakedBalance < actualBalance) {\n      _deposit(stakingToken, account, actualBalance - stakedBalance);\n    } else if (stakedBalance > actualBalance) {\n      _withdraw(stakingToken, account, stakedBalance - actualBalance, actualBalance == 0);\n    }\n  }\n\n  function _deposit(\n    address stakingToken,\n    address account,\n    uint amount\n  ) internal {\n    _registerBalanceIncreasing(stakingToken, account, amount);\n    emit Deposit(stakingToken, account, amount);\n  }\n\n  function _withdraw(\n    address stakingToken,\n    address account,\n    uint amount,\n    bool fullWithdraw\n  ) internal {\n    uint veId = 0;\n    if (fullWithdraw) {\n      veId = veIds[stakingToken][account];\n    }\n    if (veId > 0) {\n      _unlockVeToken(stakingToken, account, veId);\n    }\n    _registerBalanceDecreasing(stakingToken, account, amount);\n    emit Withdraw(\n      stakingToken,\n      account,\n      amount,\n      fullWithdraw,\n      veId\n    );\n  }\n\n  /// @dev Balance should be recalculated after the unlock\n  function _unlockVeToken(address stakingToken, address account, uint veId) internal {\n    require(veId == veIds[stakingToken][account], \"Wrong ve\");\n    veIds[stakingToken][account] = 0;\n    voter().detachTokenFromGauge(stakingToken, veId, account);\n    emit VeTokenUnlocked(stakingToken, account, veId);\n  }\n\n  // *************************************************************\n  //                   LOGIC OVERRIDES\n  // *************************************************************\n\n  /// @dev Similar to Curve https://resources.curve.fi/reward-gauges/boosting-your-crv-rewards#formula\n  function derivedBalance(\n    address stakingToken,\n    address account\n  ) public override view returns (uint) {\n    uint _tokenId = veIds[stakingToken][account];\n    uint _balance = balanceOf[stakingToken][account];\n    uint _derived = _balance * 40 / 100;\n    uint _adjusted = 0;\n    uint _supply = IERC20(ve).totalSupply();\n    if (account == IERC721(ve).ownerOf(_tokenId) && _supply > 0) {\n      _adjusted = (totalSupply[stakingToken] * IVeTetu(ve).balanceOfNFT(_tokenId) / _supply) * 60 / 100;\n    }\n    return Math.min((_derived + _adjusted), _balance);\n  }\n\n  function isStakeToken(address token) public view override returns (bool) {\n    return stakingTokens[token];\n  }\n\n  // *************************************************************\n  //                   REWARDS DISTRIBUTION\n  // *************************************************************\n\n  function notifyRewardAmount(address stakingToken, address token, uint amount) external nonReentrant override {\n    _notifyRewardAmount(stakingToken, token, amount, true);\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override(StakelessMultiPoolBase) returns (bool) {\n    return interfaceId == InterfaceIds.I_GAUGE || super.supportsInterface(interfaceId);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/reward/StakelessMultiPoolBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/Math.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/ReentrancyGuard.sol\";\nimport \"../openzeppelin/Initializable.sol\";\nimport \"../tools/TetuERC165.sol\";\nimport \"../interfaces/IMultiPool.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../lib/InterfaceIds.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @title Abstract stakeless pool for multiple rewards.\n///        Universal pool for different purposes, cover the most popular use cases.\n/// @author belbix\nabstract contract StakelessMultiPoolBase is TetuERC165, ReentrancyGuard, IMultiPool, ControllableV3 {\n  using SafeERC20 for IERC20;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant MULTI_POOL_VERSION = \"1.0.0\";\n  /// @dev Precision for internal calculations\n  uint internal constant _PRECISION = 10 ** 27;\n  /// @dev Max reward tokens per 1 staking token\n  uint internal constant _MAX_REWARD_TOKENS = 10;\n\n  // *************************************************************\n  //                        VARIABLES\n  //              Keep names and ordering!\n  //     Add only in the bottom and adjust __gap variable\n  // *************************************************************\n\n  /// @dev Rewards are released over this period\n  uint public duration;\n  /// @dev This token will be always allowed as reward\n  address public defaultRewardToken;\n\n  /// @dev Staking token => Supply adjusted on derived balance logic. Use for rewards boost.\n  mapping(address => uint) public override derivedSupply;\n  /// @dev Staking token => Account => Staking token virtual balance. Can be adjusted regarding rewards boost logic.\n  mapping(address => mapping(address => uint)) public override derivedBalances;\n  /// @dev Staking token => Account => User virtual balance of staking token.\n  mapping(address => mapping(address => uint)) public override balanceOf;\n  /// @dev Staking token => Total amount of attached staking tokens\n  mapping(address => uint) public override totalSupply;\n\n  /// @dev Staking token => Reward token => Reward rate with precision _PRECISION\n  mapping(address => mapping(address => uint)) public rewardRate;\n  /// @dev Staking token => Reward token => Reward finish period in timestamp.\n  mapping(address => mapping(address => uint)) public periodFinish;\n  /// @dev Staking token => Reward token => Last updated time for reward token for internal calculations.\n  mapping(address => mapping(address => uint)) public lastUpdateTime;\n  /// @dev Staking token => Reward token => Part of SNX pool logic. Internal snapshot of reward per token value.\n  mapping(address => mapping(address => uint)) public rewardPerTokenStored;\n\n  /// @dev Staking token => Reward token => Account => amount. Already paid reward amount for snapshot calculation.\n  mapping(address => mapping(address => mapping(address => uint))) public userRewardPerTokenPaid;\n  /// @dev Staking token => Reward token => Account => amount. Snapshot of user's reward per token.\n  mapping(address => mapping(address => mapping(address => uint))) public rewards;\n\n  /// @dev Allowed reward tokens for staking token\n  mapping(address => address[]) public override rewardTokens;\n  /// @dev Allowed reward tokens for staking token stored in map for fast check.\n  mapping(address => mapping(address => bool)) public override isRewardToken;\n  /// @notice account => recipient. All rewards for this account will receive recipient\n  mapping(address => address) public rewardsRedirect;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event BalanceIncreased(address indexed token, address indexed account, uint amount);\n  event BalanceDecreased(address indexed token, address indexed account, uint amount);\n  event NotifyReward(address indexed from, address token, address indexed reward, uint amount);\n  event ClaimRewards(address indexed account, address token, address indexed reward, uint amount, address recepient);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  function __MultiPool_init(\n    address controller_,\n    address _defaultRewardToken,\n    uint _duration\n  ) internal onlyInitializing {\n    __Controllable_init(controller_);\n    _requireERC20(_defaultRewardToken);\n    defaultRewardToken = _defaultRewardToken;\n    require(_duration != 0, \"wrong duration\");\n    duration = _duration;\n  }\n\n  // *************************************************************\n  //                        RESTRICTIONS\n  // *************************************************************\n\n  modifier onlyAllowedContracts() {\n    IController _controller = IController(controller());\n    require(\n      msg.sender == _controller.governance()\n      || msg.sender == _controller.forwarder()\n    , \"Not allowed\");\n    _;\n  }\n\n  // *************************************************************\n  //                            VIEWS\n  // *************************************************************\n\n  /// @dev Should return true for whitelisted reward tokens\n  function isStakeToken(address token) public view override virtual returns (bool);\n\n  /// @dev Length of rewards tokens array for given token\n  function rewardTokensLength(address token) external view override returns (uint) {\n    return rewardTokens[token].length;\n  }\n\n  /// @dev Reward paid for token for the current period.\n  function rewardPerToken(address stakingToken, address rewardToken) public view returns (uint) {\n    uint _derivedSupply = derivedSupply[stakingToken];\n    if (_derivedSupply == 0) {\n      return rewardPerTokenStored[stakingToken][rewardToken];\n    }\n\n    return rewardPerTokenStored[stakingToken][rewardToken]\n    +\n    (lastTimeRewardApplicable(stakingToken, rewardToken) - lastUpdateTime[stakingToken][rewardToken])\n    * rewardRate[stakingToken][rewardToken]\n    / _derivedSupply;\n  }\n\n  /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\n  function lastTimeRewardApplicable(address stakingToken, address rewardToken) public view returns (uint) {\n    uint _periodFinish = periodFinish[stakingToken][rewardToken];\n    return block.timestamp < _periodFinish ? block.timestamp : _periodFinish;\n  }\n\n  /// @dev Balance of holder adjusted with specific rules for boost calculation.\n  ///      Supposed to be implemented in a parent contract\n  ///      Adjust user balance with some logic, like boost logic.\n  function derivedBalance(address stakingToken, address account) public view virtual override returns (uint) {\n    return balanceOf[stakingToken][account];\n  }\n\n  /// @dev Amount of reward tokens left for the current period\n  function left(address stakingToken, address rewardToken) public view override returns (uint) {\n    uint _periodFinish = periodFinish[stakingToken][rewardToken];\n    if (block.timestamp >= _periodFinish) return 0;\n    uint _remaining = _periodFinish - block.timestamp;\n    return _remaining * rewardRate[stakingToken][rewardToken] / _PRECISION;\n  }\n\n  /// @dev Approximate of earned rewards ready to claim\n  function earned(address stakingToken, address rewardToken, address account) public view override returns (uint) {\n    return derivedBalance(stakingToken, account)\n    * (rewardPerToken(stakingToken, rewardToken) - userRewardPerTokenPaid[stakingToken][rewardToken][account])\n    / _PRECISION\n    + rewards[stakingToken][rewardToken][account];\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ControllableV3, TetuERC165) returns (bool) {\n    return interfaceId == InterfaceIds.I_MULTI_POOL || super.supportsInterface(interfaceId);\n  }\n\n  // *************************************************************\n  //                  OPERATOR ACTIONS\n  // *************************************************************\n\n  /// @dev Whitelist reward token for staking token. Only operator can do it.\n  function registerRewardToken(address stakeToken, address rewardToken) external override onlyAllowedContracts {\n    require(rewardTokens[stakeToken].length < _MAX_REWARD_TOKENS, \"Too many reward tokens\");\n    require(!isRewardToken[stakeToken][rewardToken], \"Already registered\");\n    isRewardToken[stakeToken][rewardToken] = true;\n    rewardTokens[stakeToken].push(rewardToken);\n  }\n\n  /// @dev Remove from whitelist reward token for staking token. Only operator can do it.\n  ///      We assume that the first token can not be removed.\n  function removeRewardToken(address stakeToken, address rewardToken) external override onlyAllowedContracts {\n    require(periodFinish[stakeToken][rewardToken] < block.timestamp, \"Rewards not ended\");\n    require(isRewardToken[stakeToken][rewardToken], \"Not reward token\");\n\n    isRewardToken[stakeToken][rewardToken] = false;\n    uint length = rewardTokens[stakeToken].length;\n    uint i = 0;\n    for (; i < length; i++) {\n      address t = rewardTokens[stakeToken][i];\n      if (t == rewardToken) {\n        break;\n      }\n    }\n    // if isRewardToken map and rewardTokens array changed accordingly the token always exist\n    rewardTokens[stakeToken][i] = rewardTokens[stakeToken][length - 1];\n    rewardTokens[stakeToken].pop();\n  }\n\n  /// @dev Account or governance can setup a redirect of all rewards.\n  ///      It needs for 3rd party contracts integrations.\n  function setRewardsRedirect(address account, address recipient) external {\n    require(msg.sender == account || isGovernance(msg.sender), \"Not allowed\");\n    rewardsRedirect[account] = recipient;\n  }\n\n  // *************************************************************\n  //                      BALANCE\n  // *************************************************************\n\n  /// @dev Assume to be called when linked token balance changes.\n  function _registerBalanceIncreasing(\n    address stakingToken,\n    address account,\n    uint amount\n  ) internal virtual nonReentrant {\n    require(isStakeToken(stakingToken), \"Staking token not allowed\");\n    require(amount > 0, \"Zero amount\");\n\n    _increaseBalance(stakingToken, account, amount);\n    emit BalanceIncreased(stakingToken, account, amount);\n  }\n\n  function _increaseBalance(\n    address stakingToken,\n    address account,\n    uint amount\n  ) internal virtual {\n    _updateRewardForAllTokens(stakingToken, account);\n    totalSupply[stakingToken] += amount;\n    balanceOf[stakingToken][account] += amount;\n    _updateDerivedBalance(stakingToken, account);\n  }\n\n  /// @dev Assume to be called when linked token balance changes.\n  function _registerBalanceDecreasing(\n    address stakingToken,\n    address account,\n    uint amount\n  ) internal nonReentrant virtual {\n    require(isStakeToken(stakingToken), \"Staking token not allowed\");\n    _decreaseBalance(stakingToken, account, amount);\n    emit BalanceDecreased(stakingToken, account, amount);\n  }\n\n  function _decreaseBalance(\n    address stakingToken,\n    address account,\n    uint amount\n  ) internal virtual {\n    _updateRewardForAllTokens(stakingToken, account);\n    totalSupply[stakingToken] -= amount;\n    balanceOf[stakingToken][account] -= amount;\n    _updateDerivedBalance(stakingToken, account);\n  }\n\n  function _updateDerivedBalance(address stakingToken, address account) internal {\n    uint __derivedBalance = derivedBalances[stakingToken][account];\n    derivedSupply[stakingToken] -= __derivedBalance;\n    __derivedBalance = derivedBalance(stakingToken, account);\n    derivedBalances[stakingToken][account] = __derivedBalance;\n    derivedSupply[stakingToken] += __derivedBalance;\n  }\n\n  // *************************************************************\n  //                          CLAIM\n  // *************************************************************\n\n  /// @dev Caller should implement restriction checks\n  function _getReward(\n    address stakingToken,\n    address account,\n    address[] memory rewardTokens_,\n    address recipient\n  ) internal nonReentrant virtual {\n    address newRecipient = rewardsRedirect[recipient];\n    if (newRecipient != address(0)) {\n      recipient = newRecipient;\n    }\n    require(recipient == msg.sender, \"Not allowed\");\n\n    _updateDerivedBalance(stakingToken, account);\n\n    for (uint i = 0; i < rewardTokens_.length; i++) {\n      address rewardToken = rewardTokens_[i];\n      _updateReward(stakingToken, rewardToken, account);\n\n      uint _reward = rewards[stakingToken][rewardToken][account];\n      if (_reward > 0) {\n        rewards[stakingToken][rewardToken][account] = 0;\n        IERC20(rewardToken).safeTransfer(recipient, _reward);\n      }\n\n      emit ClaimRewards(account, stakingToken, rewardToken, _reward, recipient);\n    }\n  }\n\n  // *************************************************************\n  //                    REWARDS CALCULATIONS\n  // *************************************************************\n\n  function _updateRewardForAllTokens(address stakingToken, address account) internal {\n    address[] memory rts = rewardTokens[stakingToken];\n    uint length = rts.length;\n    for (uint i; i < length; i++) {\n      _updateReward(stakingToken, rts[i], account);\n    }\n    _updateReward(stakingToken, defaultRewardToken, account);\n  }\n\n  function _updateReward(address stakingToken, address rewardToken, address account) internal {\n    uint _rewardPerTokenStored = rewardPerToken(stakingToken, rewardToken);\n    rewardPerTokenStored[stakingToken][rewardToken] = _rewardPerTokenStored;\n    lastUpdateTime[stakingToken][rewardToken] = lastTimeRewardApplicable(stakingToken, rewardToken);\n    if (account != address(0)) {\n      rewards[stakingToken][rewardToken][account] = earned(stakingToken, rewardToken, account);\n      userRewardPerTokenPaid[stakingToken][rewardToken][account] = _rewardPerTokenStored;\n    }\n  }\n\n  // *************************************************************\n  //                         NOTIFY\n  // *************************************************************\n\n  function _notifyRewardAmount(\n    address stakingToken,\n    address rewardToken,\n    uint amount,\n    bool transferRewards\n  ) internal virtual {\n    require(amount > 0, \"Zero amount\");\n    require(defaultRewardToken == rewardToken || isRewardToken[stakingToken][rewardToken], \"Token not allowed\");\n\n    _updateReward(stakingToken, rewardToken, address(0));\n    uint _duration = duration;\n\n    if (transferRewards) {\n      uint balanceBefore = IERC20(rewardToken).balanceOf(address(this));\n      IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\n      // refresh amount if token was taxable\n      amount = IERC20(rewardToken).balanceOf(address(this)) - balanceBefore;\n    }\n    // if transferRewards=false need to wisely use it in implementation!\n\n    if (block.timestamp >= periodFinish[stakingToken][rewardToken]) {\n      rewardRate[stakingToken][rewardToken] = amount * _PRECISION / _duration;\n    } else {\n      uint _remaining = periodFinish[stakingToken][rewardToken] - block.timestamp;\n      uint _left = _remaining * rewardRate[stakingToken][rewardToken];\n      // rewards should not extend period infinity, only higher amount allowed\n      require(amount > _left / _PRECISION, \"Amount should be higher than remaining rewards\");\n      rewardRate[stakingToken][rewardToken] = (amount * _PRECISION + _left) / _duration;\n    }\n\n    lastUpdateTime[stakingToken][rewardToken] = block.timestamp;\n    periodFinish[stakingToken][rewardToken] = block.timestamp + _duration;\n    emit NotifyReward(msg.sender, stakingToken, rewardToken, amount);\n  }\n\n  /**\n* @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n  uint[38] private __gap;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyBaseV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../interfaces/IStrategyV2.sol\";\nimport \"../interfaces/ISplitter.sol\";\nimport \"../interfaces/IForwarder.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"./StrategyLib.sol\";\n\n/// @title Abstract contract for base strategy functionality\n/// @author belbix\nabstract contract StrategyBaseV2 is IStrategyV2, ControllableV3 {\n  using SafeERC20 for IERC20;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant STRATEGY_BASE_VERSION = \"2.3.0\";\n  /// @notice 10% of total profit is sent to {performanceReceiver} before compounding\n  uint internal constant DEFAULT_PERFORMANCE_FEE = 10_000;\n  address internal constant DEFAULT_PERF_FEE_RECEIVER = 0x9Cc199D4353b5FB3e6C8EEBC99f5139e0d8eA06b;\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev Underlying asset\n  address public override asset;\n  /// @dev Linked splitter\n  address public override splitter;\n  /// @dev Percent of profit for autocompound inside this strategy.\n  uint public override compoundRatio;\n  uint private __deprecatedSlot1;\n\n  /// @notice {performanceFee}% of total profit is sent to {performanceReceiver} before compounding\n  /// @dev governance by default\n  address public override performanceReceiver;\n\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\n  /// @dev {DEFAULT_PERFORMANCE_FEE} by default, FEE_DENOMINATOR is used\n  uint public override performanceFee;\n  /// @dev Represent specific name for this strategy. Should include short strategy name and used assets. Uniq across the vault.\n  string public override strategySpecificName;\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @notice Initialize contract after setup it as proxy implementation\n  function __StrategyBase_init(\n    address controller_,\n    address _splitter\n  ) internal onlyInitializing {\n    _requireInterface(_splitter, InterfaceIds.I_SPLITTER);\n    __Controllable_init(controller_);\n\n    require(IControllable(_splitter).isController(controller_), StrategyLib.WRONG_VALUE);\n\n    asset = ISplitter(_splitter).asset();\n    splitter = _splitter;\n\n    performanceReceiver = DEFAULT_PERF_FEE_RECEIVER;\n    performanceFee = DEFAULT_PERFORMANCE_FEE;\n  }\n\n  // *************************************************************\n  //                     PERFORMANCE FEE\n  // *************************************************************\n  /// @notice Set performance fee and receiver\n  function setupPerformanceFee(uint fee_, address receiver_) external {\n    StrategyLib._checkSetupPerformanceFee(controller(), fee_, receiver_);\n    performanceFee = fee_;\n    performanceReceiver = receiver_;\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev Total amount of underlying assets under control of this strategy.\n  function totalAssets() public view override returns (uint) {\n    return IERC20(asset).balanceOf(address(this)) + investedAssets();\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_STRATEGY_V2 || super.supportsInterface(interfaceId);\n  }\n\n  // *************************************************************\n  //                   VOTER ACTIONS\n  // *************************************************************\n\n  /// @dev PlatformVoter can change compound ratio for some strategies.\n  ///      A strategy can implement another logic for some uniq cases.\n  function setCompoundRatio(uint value) external virtual override {\n    StrategyLib._checkCompoundRatioChanged(controller(), compoundRatio, value);\n    compoundRatio = value;\n  }\n\n  // *************************************************************\n  //                   OPERATOR ACTIONS\n  // *************************************************************\n\n  /// @dev The name will be used for UI.\n  function setStrategySpecificName(string calldata name) external {\n    StrategyLib._checkStrategySpecificNameChanged(controller(), name);\n    strategySpecificName = name;\n  }\n\n  /// @dev In case of any issue operator can withdraw all from pool.\n  function emergencyExit() external {\n    // check inside lib call\n\n    _emergencyExitFromPool();\n    StrategyLib.sendOnEmergencyExit(controller(), asset, splitter);\n  }\n\n  /// @dev Manual claim rewards.\n  function claim() external {\n    StrategyLib._checkManualClaim(controller());\n    _claim();\n  }\n\n  // *************************************************************\n  //                    DEPOSIT/WITHDRAW\n  // *************************************************************\n\n  /// @notice Stakes everything the strategy holds into the reward pool.\n  /// amount_ Amount transferred to the strategy balance just before calling this function\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\n  ///                                       It can be false if we know exactly, that the amount is already actual.\n  /// @return strategyLoss Loss should be covered from Insurance\n  function investAll(\n    uint /*amount_*/,\n    bool updateTotalAssetsBeforeInvest_\n  ) external override returns (\n    uint strategyLoss\n  ) {\n    uint balance = StrategyLib._checkInvestAll(splitter, asset);\n\n    if (balance > 0) {\n      strategyLoss = _depositToPool(balance, updateTotalAssetsBeforeInvest_);\n    }\n\n    return strategyLoss;\n  }\n\n  /// @dev Withdraws all underlying assets to the vault\n  /// @return strategyLoss Loss should be covered from Insurance\n  function withdrawAllToSplitter() external override returns (uint strategyLoss) {\n    address _splitter = splitter;\n    address _asset = asset;\n\n    uint balance = StrategyLib._checkSplitterSenderAndGetBalance(_splitter, _asset);\n\n    (uint expectedWithdrewUSD, uint assetPrice, uint _strategyLoss) = _withdrawAllFromPool();\n\n    StrategyLib._withdrawAllToSplitterPostActions(\n      _asset,\n      balance,\n      expectedWithdrewUSD,\n      assetPrice,\n      _splitter\n    );\n    return _strategyLoss;\n  }\n\n  /// @dev Withdraws some assets to the splitter\n  /// @return strategyLoss Loss should be covered from Insurance\n  function withdrawToSplitter(uint amount) external override returns (uint strategyLoss) {\n    address _splitter = splitter;\n    address _asset = asset;\n\n    uint balance = StrategyLib._checkSplitterSenderAndGetBalance(_splitter, _asset);\n\n    if (amount > balance) {\n      uint expectedWithdrewUSD;\n      uint assetPrice;\n\n      (expectedWithdrewUSD, assetPrice, strategyLoss) = _withdrawFromPool(amount - balance);\n      balance = StrategyLib.checkWithdrawImpact(\n        _asset,\n        balance,\n        expectedWithdrewUSD,\n        assetPrice,\n        _splitter\n      );\n    }\n\n    StrategyLib._withdrawToSplitterPostActions(\n      amount,\n      balance,\n      _asset,\n      _splitter\n    );\n    return strategyLoss;\n  }\n\n  // *************************************************************\n  //                       VIRTUAL\n  // These functions must be implemented in the strategy contract\n  // *************************************************************\n\n  /// @dev Amount of underlying assets invested to the pool.\n  function investedAssets() public view virtual returns (uint);\n\n  /// @notice Deposit given amount to the pool.\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\n  ///                                       It can be false if we know exactly, that the amount is already actual.\n  /// @return strategyLoss Loss should be covered from Insurance\n  function _depositToPool(\n    uint amount,\n    bool updateTotalAssetsBeforeInvest_\n  ) internal virtual returns (\n    uint strategyLoss\n  );\n\n  /// @dev Withdraw given amount from the pool.\n  /// @return expectedWithdrewUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\n  /// @return assetPrice Price of the strategy {asset}.\n  /// @return strategyLoss Loss should be covered from Insurance\n  function _withdrawFromPool(uint amount) internal virtual returns (\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    uint strategyLoss\n  );\n\n  /// @dev Withdraw all from the pool.\n  /// @return expectedWithdrewUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\n  /// @return assetPrice Price of the strategy {asset}.\n  /// @return strategyLoss Loss should be covered from Insurance\n  function _withdrawAllFromPool() internal virtual returns (\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    uint strategyLoss\n  );\n\n  /// @dev If pool support emergency withdraw need to call it for emergencyExit()\n  ///      Withdraw assets without impact checking.\n  function _emergencyExitFromPool() internal virtual;\n\n  /// @dev Claim all possible rewards.\n  function _claim() internal virtual returns (address[] memory rewardTokens, uint[] memory amounts);\n\n  /// @dev This empty reserved space is put in place to allow future versions to add new\n  ///      variables without shifting down storage in the inheritance chain.\n  ///      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n  uint[43] private __gap;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyBaseV3.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../interfaces/IStrategyV3.sol\";\nimport \"../interfaces/ISplitter.sol\";\nimport \"../interfaces/IForwarder.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"./StrategyLib2.sol\";\n\n/// @title Abstract contract for base strategy functionality\n/// @author a17\nabstract contract StrategyBaseV3 is IStrategyV3, ControllableV3 {\n  using SafeERC20 for IERC20;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant STRATEGY_BASE_VERSION = \"3.0.1\";\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  BaseState internal baseState;\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @notice Initialize contract after setup it as proxy implementation\n  function __StrategyBase_init(\n    address controller_,\n    address splitter_\n  ) internal onlyInitializing {\n    _requireInterface(splitter_, InterfaceIds.I_SPLITTER);\n    __Controllable_init(controller_);\n    StrategyLib2.init(baseState, controller_, splitter_);\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev Total amount of underlying assets under control of this strategy.\n  function totalAssets() public view override returns (uint) {\n    return IERC20(baseState.asset).balanceOf(address(this)) + investedAssets();\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_STRATEGY_V3 || interfaceId == InterfaceIds.I_STRATEGY_V2 || super.supportsInterface(interfaceId);\n  }\n\n  function asset() external view returns (address) {\n    return baseState.asset;\n  }\n\n  function splitter() external view returns (address) {\n    return baseState.splitter;\n  }\n\n  function compoundRatio() external view returns (uint) {\n    return baseState.compoundRatio;\n  }\n\n  function performanceReceiver() external view returns (address) {\n    return baseState.performanceReceiver;\n  }\n\n  function performanceFee() external view returns (uint) {\n    return baseState.performanceFee;\n  }\n\n  function performanceFeeRatio() external view returns (uint) {\n    return baseState.performanceFeeRatio;\n  }\n\n  function strategySpecificName() external view returns (string memory) {\n    return baseState.strategySpecificName;\n  }\n\n  // *************************************************************\n  //                   VOTER ACTIONS\n  // *************************************************************\n\n  /// @dev PlatformVoter can change compound ratio for some strategies.\n  ///      A strategy can implement another logic for some uniq cases.\n  function setCompoundRatio(uint value) external virtual override {\n    StrategyLib2._changeCompoundRatio(baseState, controller(), value);\n  }\n\n  // *************************************************************\n  //                   OPERATOR ACTIONS\n  // *************************************************************\n\n  /// @dev The name will be used for UI.\n  function setStrategySpecificName(string calldata name) external {\n    StrategyLib2.onlyOperators(controller());\n    StrategyLib2._changeStrategySpecificName(baseState, name);\n  }\n\n  /// @dev In case of any issue operator can withdraw all from pool.\n  function emergencyExit() external {\n    // check inside lib call\n\n    _emergencyExitFromPool();\n    StrategyLib2.sendOnEmergencyExit(controller(), baseState.asset, baseState.splitter);\n  }\n\n  /// @dev Manual claim rewards.\n  function claim() external {\n    StrategyLib2._checkManualClaim(controller());\n    _claim();\n  }\n\n  // *************************************************************\n  //                   GOVERNANCE ACTIONS\n  // *************************************************************\n\n  /// @notice Set performance fee, receiver and ratio\n  function setupPerformanceFee(uint fee_, address receiver_, uint ratio_) external {\n    StrategyLib2.setupPerformanceFee(baseState, fee_, receiver_, ratio_, controller());\n  }\n\n  // *************************************************************\n  //                    DEPOSIT/WITHDRAW\n  // *************************************************************\n\n  /// @notice Stakes everything the strategy holds into the reward pool.\n  /// amount_ Amount transferred to the strategy balance just before calling this function\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\n  ///                                       It can be false if we know exactly, that the amount is already actual.\n  /// @return strategyLoss Loss should be covered from Insurance\n  function investAll(\n    uint /*amount_*/,\n    bool updateTotalAssetsBeforeInvest_\n  ) external override returns (\n    uint strategyLoss\n  ) {\n    uint balance = StrategyLib2._checkInvestAll(baseState.splitter, baseState.asset);\n\n    if (balance > 0) {\n      strategyLoss = _depositToPool(balance, updateTotalAssetsBeforeInvest_);\n    }\n\n    return strategyLoss;\n  }\n\n  /// @dev Withdraws all underlying assets to the vault\n  /// @return strategyLoss Loss should be covered from Insurance\n  function withdrawAllToSplitter() external override returns (uint strategyLoss) {\n    address _splitter = baseState.splitter;\n    address _asset = baseState.asset;\n\n    uint balance = StrategyLib2._checkSplitterSenderAndGetBalance(_splitter, _asset);\n\n    (uint expectedWithdrewUSD, uint assetPrice, uint _strategyLoss) = _withdrawAllFromPool();\n\n    StrategyLib2._withdrawAllToSplitterPostActions(\n      _asset,\n      balance,\n      expectedWithdrewUSD,\n      assetPrice,\n      _splitter\n    );\n    return _strategyLoss;\n  }\n\n  /// @dev Withdraws some assets to the splitter\n  /// @return strategyLoss Loss should be covered from Insurance\n  function withdrawToSplitter(uint amount) external override returns (uint strategyLoss) {\n    address _splitter = baseState.splitter;\n    address _asset = baseState.asset;\n\n    uint balance = StrategyLib2._checkSplitterSenderAndGetBalance(_splitter, _asset);\n\n    if (amount > balance) {\n      uint expectedWithdrewUSD;\n      uint assetPrice;\n\n      (expectedWithdrewUSD, assetPrice, strategyLoss) = _withdrawFromPool(amount - balance);\n      balance = StrategyLib2.checkWithdrawImpact(\n        _asset,\n        balance,\n        expectedWithdrewUSD,\n        assetPrice,\n        _splitter\n      );\n    }\n\n    StrategyLib2._withdrawToSplitterPostActions(\n      amount,\n      balance,\n      _asset,\n      _splitter\n    );\n    return strategyLoss;\n  }\n\n  // *************************************************************\n  //                       VIRTUAL\n  // These functions must be implemented in the strategy contract\n  // *************************************************************\n\n  /// @dev Amount of underlying assets invested to the pool.\n  function investedAssets() public view virtual returns (uint);\n\n  /// @notice Deposit given amount to the pool.\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\n  ///                                       It can be false if we know exactly, that the amount is already actual.\n  /// @return strategyLoss Loss should be covered from Insurance\n  function _depositToPool(\n    uint amount,\n    bool updateTotalAssetsBeforeInvest_\n  ) internal virtual returns (\n    uint strategyLoss\n  );\n\n  /// @dev Withdraw given amount from the pool.\n  /// @return expectedWithdrewUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\n  /// @return assetPrice Price of the strategy {asset}.\n  /// @return strategyLoss Loss should be covered from Insurance\n  function _withdrawFromPool(uint amount) internal virtual returns (\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    uint strategyLoss\n  );\n\n  /// @dev Withdraw all from the pool.\n  /// @return expectedWithdrewUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\n  /// @return assetPrice Price of the strategy {asset}.\n  /// @return strategyLoss Loss should be covered from Insurance\n  function _withdrawAllFromPool() internal virtual returns (\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    uint strategyLoss\n  );\n\n  /// @dev If pool support emergency withdraw need to call it for emergencyExit()\n  ///      Withdraw assets without impact checking.\n  function _emergencyExitFromPool() internal virtual;\n\n  /// @dev Claim all possible rewards.\n  function _claim() internal virtual returns (address[] memory rewardTokens, uint[] memory amounts);\n\n  /// @dev This empty reserved space is put in place to allow future versions to add new\n  ///      variables without shifting down storage in the inheritance chain.\n  ///      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n  uint[50 - 7] private __gap;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/ITetuVaultV2.sol\";\nimport \"../interfaces/ISplitter.sol\";\n\nlibrary StrategyLib {\n  using SafeERC20 for IERC20;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Denominator for fee calculation.\n  uint internal constant FEE_DENOMINATOR = 100_000;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event CompoundRatioChanged(uint oldValue, uint newValue);\n  event StrategySpecificNameChanged(string name);\n  event EmergencyExit(address sender, uint amount);\n  event ManualClaim(address sender);\n  event InvestAll(uint balance);\n  event WithdrawAllToSplitter(uint amount);\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\n\n  // *************************************************************\n  //                        ERRORS\n  // *************************************************************\n\n  string internal constant DENIED = \"SB: Denied\";\n  string internal constant TOO_HIGH = \"SB: Too high\";\n  string internal constant WRONG_VALUE = \"SB: Wrong value\";\n  /// @dev Denominator for compound ratio\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\n\n  // *************************************************************\n  //                        CHECKS AND EMITS\n  // *************************************************************\n\n  function _checkCompoundRatioChanged(address controller, uint oldValue, uint newValue) external {\n    onlyPlatformVoter(controller);\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\n    emit CompoundRatioChanged(oldValue, newValue);\n  }\n\n  function _checkStrategySpecificNameChanged(address controller, string calldata newName) external {\n    onlyOperators(controller);\n    emit StrategySpecificNameChanged(newName);\n  }\n\n  function _checkManualClaim(address controller) external {\n    onlyOperators(controller);\n    emit ManualClaim(msg.sender);\n  }\n\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\n    onlySplitter(splitter);\n    assetBalance = IERC20(asset).balanceOf(address(this));\n    emit InvestAll(assetBalance);\n  }\n\n  // *************************************************************\n  //                     RESTRICTIONS\n  // *************************************************************\n\n  /// @dev Restrict access only for operators\n  function onlyOperators(address controller) public view {\n    require(IController(controller).isOperator(msg.sender), DENIED);\n  }\n\n  /// @dev Restrict access only for governance\n  function onlyGovernance(address controller) public view {\n    require(IController(controller).governance() == msg.sender, DENIED);\n  }\n\n  /// @dev Restrict access only for platform voter\n  function onlyPlatformVoter(address controller) public view {\n    require(IController(controller).platformVoter() == msg.sender, DENIED);\n  }\n\n  /// @dev Restrict access only for splitter\n  function onlySplitter(address splitter) public view {\n    require(splitter == msg.sender, DENIED);\n  }\n\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_) external view {\n    onlyGovernance(controller);\n    require(fee_ <= 100_000, TOO_HIGH);\n    require(receiver_ != address(0), WRONG_VALUE);\n  }\n\n  // *************************************************************\n  //                       HELPERS\n  // *************************************************************\n\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\n  ///         Revert if the amount is different from expected too much (high price impact)\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\n  /// @param assetPrice Price of the asset, decimals 18\n  /// @return balance Current asset balance of the strategy\n  function checkWithdrawImpact(\n    address _asset,\n    uint balanceBefore,\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    address _splitter\n  ) public view returns (uint balance) {\n    balance = IERC20(_asset).balanceOf(address(this));\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\n\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\n    }\n  }\n\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\n    onlyOperators(controller);\n\n    uint balance = IERC20(asset).balanceOf(address(this));\n    IERC20(asset).safeTransfer(splitter, balance);\n    emit EmergencyExit(msg.sender, balance);\n  }\n\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\n    onlySplitter(splitter);\n    return IERC20(asset).balanceOf(address(this));\n  }\n\n  function _withdrawAllToSplitterPostActions(\n    address _asset,\n    uint balanceBefore,\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    address _splitter\n  ) external {\n    uint balance = checkWithdrawImpact(\n      _asset,\n      balanceBefore,\n      expectedWithdrewUSD,\n      assetPrice,\n      _splitter\n    );\n\n    if (balance != 0) {\n      IERC20(_asset).safeTransfer(_splitter, balance);\n    }\n    emit WithdrawAllToSplitter(balance);\n  }\n\n  function _withdrawToSplitterPostActions(\n    uint amount,\n    uint balance,\n    address _asset,\n    address _splitter\n  ) external {\n    uint amountAdjusted = Math.min(amount, balance);\n    if (amountAdjusted != 0) {\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\n    }\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IControllable.sol\";\nimport \"../interfaces/ITetuVaultV2.sol\";\nimport \"../interfaces/ISplitter.sol\";\nimport \"../interfaces/IStrategyV3.sol\";\n\nlibrary StrategyLib2 {\n  using SafeERC20 for IERC20;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Denominator for fee calculation.\n  uint internal constant FEE_DENOMINATOR = 100_000;\n  /// @notice 10% of total profit is sent to {performanceReceiver} before compounding\n  uint internal constant DEFAULT_PERFORMANCE_FEE = 10_000;\n  address internal constant DEFAULT_PERF_FEE_RECEIVER = 0x9Cc199D4353b5FB3e6C8EEBC99f5139e0d8eA06b;\n  /// @dev Denominator for compound ratio\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\n\n  // *************************************************************\n  //                        ERRORS\n  // *************************************************************\n\n  string internal constant DENIED = \"SB: Denied\";\n  string internal constant TOO_HIGH = \"SB: Too high\";\n  string internal constant WRONG_VALUE = \"SB: Wrong value\";\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event CompoundRatioChanged(uint oldValue, uint newValue);\n  event StrategySpecificNameChanged(string name);\n  event EmergencyExit(address sender, uint amount);\n  event ManualClaim(address sender);\n  event InvestAll(uint balance);\n  event WithdrawAllToSplitter(uint amount);\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\n  event PerformanceFeeChanged(uint fee, address receiver, uint ratio);\n\n  // *************************************************************\n  //                        CHECKS AND EMITS\n  // *************************************************************\n\n  function _checkManualClaim(address controller) external {\n    onlyOperators(controller);\n    emit ManualClaim(msg.sender);\n  }\n\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\n    onlySplitter(splitter);\n    assetBalance = IERC20(asset).balanceOf(address(this));\n    emit InvestAll(assetBalance);\n  }\n\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_, uint ratio_) internal {\n    onlyGovernance(controller);\n    require(fee_ <= FEE_DENOMINATOR, TOO_HIGH);\n    require(receiver_ != address(0), WRONG_VALUE);\n    require(ratio_ <= FEE_DENOMINATOR, TOO_HIGH);\n    emit PerformanceFeeChanged(fee_, receiver_, ratio_);\n  }\n\n  // *************************************************************\n  //                        SETTERS\n  // *************************************************************\n\n  function _changeCompoundRatio(IStrategyV3.BaseState storage baseState, address controller, uint newValue) external {\n    onlyPlatformVoterOrGov(controller);\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\n\n    uint oldValue = baseState.compoundRatio;\n    baseState.compoundRatio = newValue;\n\n    emit CompoundRatioChanged(oldValue, newValue);\n  }\n\n  function _changeStrategySpecificName(IStrategyV3.BaseState storage baseState, string calldata newName) external {\n    baseState.strategySpecificName = newName;\n    emit StrategySpecificNameChanged(newName);\n  }\n\n  // *************************************************************\n  //                     RESTRICTIONS\n  // *************************************************************\n\n  /// @dev Restrict access only for operators\n  function onlyOperators(address controller) public view {\n    require(IController(controller).isOperator(msg.sender), DENIED);\n  }\n\n  /// @dev Restrict access only for governance\n  function onlyGovernance(address controller) public view {\n    require(IController(controller).governance() == msg.sender, DENIED);\n  }\n\n  /// @dev Restrict access only for platform voter\n  function onlyPlatformVoterOrGov(address controller) public view {\n    require(IController(controller).platformVoter() == msg.sender || IController(controller).governance() == msg.sender, DENIED);\n  }\n\n  /// @dev Restrict access only for splitter\n  function onlySplitter(address splitter) public view {\n    require(splitter == msg.sender, DENIED);\n  }\n\n  // *************************************************************\n  //                       HELPERS\n  // *************************************************************\n\n  function init(\n    IStrategyV3.BaseState storage baseState,\n    address controller_,\n    address splitter_\n  ) external {\n    baseState.asset = ISplitter(splitter_).asset();\n    baseState.splitter = splitter_;\n    baseState.performanceReceiver = DEFAULT_PERF_FEE_RECEIVER;\n    baseState.performanceFee = DEFAULT_PERFORMANCE_FEE;\n\n    require(IControllable(splitter_).isController(controller_), WRONG_VALUE);\n  }\n\n  function setupPerformanceFee(IStrategyV3.BaseState storage baseState, uint fee_, address receiver_, uint ratio_, address controller_) external {\n    _checkSetupPerformanceFee(controller_, fee_, receiver_, ratio_);\n    baseState.performanceFee = fee_;\n    baseState.performanceReceiver = receiver_;\n    baseState.performanceFeeRatio = ratio_;\n  }\n\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\n  ///         Revert if the amount is different from expected too much (high price impact)\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\n  /// @param assetPrice Price of the asset, decimals 18\n  /// @return balance Current asset balance of the strategy\n  function checkWithdrawImpact(\n    address _asset,\n    uint balanceBefore,\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    address _splitter\n  ) public view returns (uint balance) {\n    balance = IERC20(_asset).balanceOf(address(this));\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\n\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\n    }\n  }\n\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\n    onlyOperators(controller);\n\n    uint balance = IERC20(asset).balanceOf(address(this));\n    IERC20(asset).safeTransfer(splitter, balance);\n    emit EmergencyExit(msg.sender, balance);\n  }\n\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\n    onlySplitter(splitter);\n    return IERC20(asset).balanceOf(address(this));\n  }\n\n  function _withdrawAllToSplitterPostActions(\n    address _asset,\n    uint balanceBefore,\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    address _splitter\n  ) external {\n    uint balance = checkWithdrawImpact(\n      _asset,\n      balanceBefore,\n      expectedWithdrewUSD,\n      assetPrice,\n      _splitter\n    );\n\n    if (balance != 0) {\n      IERC20(_asset).safeTransfer(_splitter, balance);\n    }\n    emit WithdrawAllToSplitter(balance);\n  }\n\n  function _withdrawToSplitterPostActions(\n    uint amount,\n    uint balance,\n    address _asset,\n    address _splitter\n  ) external {\n    uint amountAdjusted = Math.min(amount, balance);\n    if (amountAdjusted != 0) {\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\n    }\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyStrictBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/IStrategyV2.sol\";\nimport \"../interfaces/IForwarder.sol\";\nimport \"../interfaces/IERC4626.sol\";\nimport \"../interfaces/IStrategyStrict.sol\";\nimport \"../tools/TetuERC165.sol\";\n\n/// @title Abstract contract for base strict strategy functionality\n/// @author AlehNat\nabstract contract StrategyStrictBase is IStrategyStrict, TetuERC165 {\n  using SafeERC20 for IERC20;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant STRICT_STRATEGY_BASE_VERSION = \"1.0.0\";\n\n  // *************************************************************\n  //                        ERRORS\n  // *************************************************************\n\n  string internal constant WRONG_CONTROLLER = \"SB: Wrong controller\";\n  string internal constant DENIED = \"SB: Denied\";\n  string internal constant TOO_HIGH = \"SB: Too high\";\n  string internal constant IMPACT_TOO_HIGH = \"SB: Impact too high\";\n  string internal constant WRONG_AMOUNT = \"SB: Wrong amount\";\n  string internal constant ALREADY_INITIALIZED = \"SB: Already initialized\";\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev Underlying asset\n  address public override asset;\n  /// @dev Linked vault\n  address public override vault;\n  /// @dev Percent of profit for autocompound inside this strategy.\n  uint public override compoundRatio;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event WithdrawAllToVault(uint amount);\n  event WithdrawToVault(uint amount, uint sent, uint balance);\n  event EmergencyExit(address sender, uint amount);\n  event ManualClaim(address sender);\n  event InvestAll(uint balance);\n  event DepositToPool(uint amount);\n  event WithdrawFromPool(uint amount);\n  event WithdrawAllFromPool(uint amount);\n  event Claimed(address token, uint amount);\n  event CompoundRatioChanged(uint oldValue, uint newValue);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @dev Initialize with the vault. Can be called only once.\n  function init(address _vault) external {\n    require(vault == address(0), ALREADY_INITIALIZED);\n    _requireInterface(_vault, InterfaceIds.I_ERC4626);\n    asset = IERC4626(_vault).asset();\n    vault = _vault;\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev Total amount of underlying assets under control of this strategy.\n  function totalAssets() public view override returns (uint) {\n    return IERC20(asset).balanceOf(address(this)) + investedAssets();\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_STRATEGY_STRICT || super.supportsInterface(interfaceId);\n  }\n\n  // *************************************************************\n  //                    DEPOSIT/WITHDRAW\n  // *************************************************************\n\n  /// @dev Stakes everything the strategy holds into the reward pool.\n  function investAll() external override {\n    require(msg.sender == vault, DENIED);\n    address _asset = asset; // gas saving\n    uint balance = IERC20(_asset).balanceOf(address(this));\n    if (balance > 0) {\n      _depositToPool(balance);\n    }\n    emit InvestAll(balance);\n  }\n\n  /// @dev Withdraws all underlying assets to the vault\n  function withdrawAllToVault() external override {\n    address _vault = vault;\n    address _asset = asset; // gas saving\n    require(msg.sender == _vault, DENIED);\n    _withdrawAllFromPool();\n    uint balance = IERC20(_asset).balanceOf(address(this));\n\n    if (balance != 0) {\n      IERC20(_asset).safeTransfer(_vault, balance);\n    }\n    emit WithdrawAllToVault(balance);\n  }\n\n  /// @dev Withdraws some assets to the vault\n  function withdrawToVault(uint amount) external override {\n    address _vault = vault;\n    address _asset = asset; // gas saving\n    require(msg.sender == _vault, DENIED);\n    uint balance = IERC20(_asset).balanceOf(address(this));\n    if (amount > balance) {\n      _withdrawFromPool(amount - balance);\n      balance = IERC20(_asset).balanceOf(address(this));\n    }\n\n    uint amountAdjusted = Math.min(amount, balance);\n    if (amountAdjusted != 0) {\n      IERC20(_asset).safeTransfer(_vault, amountAdjusted);\n    }\n    emit WithdrawToVault(amount, amountAdjusted, balance);\n  }\n\n  // *************************************************************\n  //                       VIRTUAL\n  // These functions must be implemented in the strategy contract\n  // *************************************************************\n\n  /// @dev Amount of underlying assets invested to the pool.\n  function investedAssets() public view virtual returns (uint);\n\n  /// @dev Deposit given amount to the pool.\n  function _depositToPool(uint amount) internal virtual;\n\n  /// @dev Withdraw given amount from the pool.\n  /// @return investedAssetsUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\n  /// @return assetPrice Price of the strategy {asset}.\n  function _withdrawFromPool(uint amount) internal virtual returns (uint investedAssetsUSD, uint assetPrice);\n\n  /// @dev Withdraw all from the pool.\n  /// @return investedAssetsUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\n  /// @return assetPrice Price of the strategy {asset}.\n  function _withdrawAllFromPool() internal virtual returns (uint investedAssetsUSD, uint assetPrice);\n\n  /// @dev If pool support emergency withdraw need to call it for emergencyExit()\n  ///      Withdraw assets without impact checking.\n  function _emergencyExitFromPool() internal virtual;\n\n  /// @dev Claim all possible rewards.\n  function _claim() internal virtual;\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/test/ControllerMinimal.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../tools/TetuERC165.sol\";\nimport \"../interfaces/IProxyControlled.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../lib/InterfaceIds.sol\";\n\ncontract ControllerMinimal is TetuERC165, IController {\n\n  address public override governance;\n  address public override voter;\n  address public override liquidator;\n  address public override forwarder;\n  address public override investFund;\n  address public override veDistributor;\n  address public override platformVoter;\n  address[] public override vaults;\n  mapping(address => bool) public operators;\n\n  constructor (address governance_) {\n    governance = governance_;\n    operators[governance_] = true;\n  }\n\n  function setVoter(address _voter) external {\n    voter = _voter;\n  }\n\n  function setPlatformVoter(address _voter) external {\n    platformVoter = _voter;\n  }\n\n  function setLiquidator(address value) external {\n    liquidator = value;\n  }\n\n  function setInvestFund(address value) external {\n    investFund = value;\n  }\n\n  function setForwarder(address value) external {\n    forwarder = value;\n  }\n\n  function setVeDistributor(address value) external {\n    veDistributor = value;\n  }\n\n  function addVault(address vault) external {\n    vaults.push(vault);\n  }\n\n  function addOperator(address operator) external {\n    operators[operator] = true;\n  }\n\n  function updateProxies(address[] memory proxies, address[] memory newLogics) external {\n    require(proxies.length == newLogics.length, \"Wrong arrays\");\n    for (uint i; i < proxies.length; i++) {\n      IProxyControlled(proxies[i]).upgrade(newLogics[i]);\n    }\n  }\n\n  function vaultsList() external view override returns (address[] memory) {\n    return vaults;\n  }\n\n  function vaultsListLength() external override view returns (uint) {\n    return vaults.length;\n  }\n\n  function isValidVault(address _vault) external view override returns (bool) {\n    for (uint i; i < vaults.length; i++) {\n      if (_vault == vaults[i]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function isOperator(address _adr) external view override returns (bool) {\n    return operators[_adr];\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_CONTROLLER || super.supportsInterface(interfaceId);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/test/IMockToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\ninterface IMockToken {\n\n  function decimals() external view returns (uint8);\n\n  function mint(address to, uint amount) external;\n\n  function burn(address from, uint amount) external;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/test/MockGauge.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../proxy/ControllableV3.sol\";\n\ncontract MockGauge is ControllableV3 {\n\n  function init(address controller_) external initializer {\n    __Controllable_init(controller_);\n  }\n\n  function handleBalanceChange(address) external {\n    // noop\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_GAUGE || super.supportsInterface(interfaceId);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/test/MockPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IERC20.sol\";\n\ncontract MockPool {\n\n  function withdraw(address token, uint amount) external {\n    IERC20(token).transfer(msg.sender, amount);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/test/MockSplitter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/ISplitter.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/ITetuVaultV2.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\ncontract MockSplitter is ISplitter, ControllableV3 {\n\n  address public override asset;\n  address public override vault;\n  uint public slippage;\n  address[] public strategies;\n  uint public constant HARDWORK_DELAY = 12 hours;\n  mapping(address => bool) public pausedStrategies;\n  mapping(address => uint) public lastHardWorks;\n\n  function init(address controller_, address _asset, address _vault) external initializer override {\n    __Controllable_init(controller_);\n    asset = _asset;\n    vault = _vault;\n  }\n\n  function coverPossibleStrategyLoss(uint /*earned*/, uint /*lost*/) external pure {\n    // noop\n  }\n\n  function pauseInvesting(address strategy) external {\n    require(!pausedStrategies[strategy], \"SS: Paused\");\n    pausedStrategies[strategy] = true;\n  }\n\n  function continueInvesting(address strategy, uint /*apr*/) external {\n    require(pausedStrategies[strategy], \"SS: Not paused\");\n    pausedStrategies[strategy] = false;\n  }\n\n  function setSlippage(uint value) external {\n    slippage = value;\n  }\n\n  function withdrawAllToVault() external override {\n    withdrawToVault(IERC20(asset).balanceOf(address(this)));\n  }\n\n  function withdrawToVault(uint256 amount) public override {\n    uint toSend = amount - amount * slippage / 1000;\n    if (slippage != 0) {\n      IERC20(asset).transfer(controller(), amount - toSend);\n    }\n    IERC20(asset).transfer(vault, toSend);\n  }\n\n  function doHardWork() external override {\n    // noop\n  }\n\n  function investAll() external override {\n    // noop\n  }\n\n  function totalAssets() external view override returns (uint256) {\n    return IERC20(asset).balanceOf(address(this));\n  }\n\n  function isHardWorking() external pure override returns (bool) {\n    return false;\n  }\n\n  function lost(uint amount) external {\n    IERC20(asset).transfer(msg.sender, amount);\n  }\n\n  function coverLoss(uint amount) external {\n    ITetuVaultV2(vault).coverLoss(amount);\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_SPLITTER || super.supportsInterface(interfaceId);\n  }\n\n  function strategiesLength() external view returns (uint) {\n    return strategies.length;\n  }\n\n  function rebalance(uint /*percent*/, uint /*lossTolerance*/) external pure override {}\n  function getStrategyCapacity(address /*strategy*/) external pure override returns (uint) {return 0;}\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/test/MockStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../strategy/StrategyBaseV2.sol\";\nimport \"./MockPool.sol\";\nimport \"./MockToken.sol\";\n\ncontract MockStrategy is StrategyBaseV2 {\n\n  string public constant override NAME = \"mock strategy\";\n  string public constant override PLATFORM = \"test\";\n  string public constant override STRATEGY_VERSION = \"1.0.0\";\n\n  bool public override isReadyToHardWork;\n\n  uint internal slippage;\n  uint internal slippageDeposit;\n  uint internal hardWorkSlippage;\n  uint internal lastEarned;\n  uint internal lastLost;\n  uint internal _capacity;\n  int internal _totalAssetsDelta;\n  bool internal useTrueExpectedWithdraw;\n\n  MockPool public pool;\n\n  function init(\n    address controller_,\n    address _splitter\n  ) external initializer {\n    __StrategyBase_init(controller_, _splitter);\n    splitter = _splitter;\n    isReadyToHardWork = true;\n    _capacity = type(uint).max;\n    // unlimited capacity by default\n    pool = new MockPool();\n  }\n\n  function doHardWork() external override returns (uint earned, uint lost) {\n    pool.withdraw(asset, investedAssets());\n    uint _slippage = IERC20(asset).balanceOf(address(this)) * hardWorkSlippage / 100_000;\n    if (_slippage != 0) {\n      IERC20(asset).transfer(controller(), _slippage);\n    }\n    if (lastEarned != 0) {\n      uint toCompound = lastEarned * compoundRatio / StrategyLib.COMPOUND_DENOMINATOR;\n      MockToken(asset).mint(address(this), toCompound);\n      address forwarder = IController(controller()).forwarder();\n      if (forwarder != address(0)) {\n        MockToken(asset).mint(address(this), lastEarned - toCompound);\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = asset;\n        uint[] memory amounts = new uint[](1);\n        amounts[0] = lastEarned - toCompound;\n        IForwarder(forwarder).registerIncome(tokens, amounts, ISplitter(splitter).vault(), true);\n      }\n    }\n    IERC20(asset).transfer(address(pool), IERC20(asset).balanceOf(address(this)));\n    return (lastEarned, Math.max(lastLost, _slippage));\n  }\n\n  /// @dev Amount of underlying assets invested to the pool.\n  function investedAssets() public view override returns (uint) {\n    return IERC20(asset).balanceOf(address(pool));\n  }\n\n  /// @dev Deposit given amount to the pool.\n  function _depositToPool(\n    uint amount,\n    bool /*updateTotalAssetsBeforeInvest_*/\n  ) internal override returns (\n    uint strategyLoss\n  ) {\n    uint _slippage = amount * slippageDeposit / 100_000;\n    if (_slippage != 0) {\n      IERC20(asset).transfer(controller(), _slippage);\n    }\n    if (amount - _slippage != 0) {\n      IERC20(asset).transfer(address(pool), amount - _slippage);\n    }\n\n    return _slippage;\n  }\n\n  /// @dev Withdraw given amount from the pool.\n  function _withdrawFromPool(uint amount) internal override returns (\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    uint strategyLoss\n  ) {\n    assetPrice = 1e18;\n    if (useTrueExpectedWithdraw) {\n      expectedWithdrewUSD = amount;\n    } else {\n      expectedWithdrewUSD = 0;\n    }\n\n    pool.withdraw(asset, amount);\n    uint _slippage = amount * slippage / 100_000;\n    strategyLoss = _slippage;\n    if (_slippage != 0) {\n      IERC20(asset).transfer(controller(), _slippage);\n    }\n  }\n\n  /// @dev Withdraw all from the pool.\n  function _withdrawAllFromPool() internal override returns (\n    uint expectedWithdrewUSD,\n    uint assetPrice,\n    uint strategyLoss\n  ) {\n    assetPrice = 1e18;\n    if (useTrueExpectedWithdraw) {\n      expectedWithdrewUSD = investedAssets();\n    } else {\n      expectedWithdrewUSD = 0;\n    }\n\n\n    pool.withdraw(asset, investedAssets());\n    uint _slippage = totalAssets() * slippage / 100_000;\n    if (_slippage != 0) {\n      IERC20(asset).transfer(controller(), _slippage);\n    }\n\n    return (expectedWithdrewUSD, assetPrice, _slippage);\n  }\n\n  /// @dev If pool support emergency withdraw need to call it for emergencyExit()\n  function _emergencyExitFromPool() internal override {\n    pool.withdraw(asset, investedAssets());\n  }\n\n  /// @dev Claim all possible rewards.\n  function _claim() internal pure override returns (address[] memory rewardTokens, uint[] memory amounts) {\n    return (rewardTokens, amounts);\n  }\n\n  function setLast(uint earned, uint lost) external {\n    lastEarned = earned;\n    lastLost = lost;\n  }\n\n  function setSlippage(uint value) external {\n    slippage = value;\n  }\n\n  function setSlippageDeposit(uint value) external {\n    slippageDeposit = value;\n  }\n\n  function setSlippageHardWork(uint value) external {\n    hardWorkSlippage = value;\n  }\n\n  function setReady(bool value) external {\n    isReadyToHardWork = value;\n  }\n\n  function setCompoundRatioManual(uint ratio) external {\n    compoundRatio = ratio;\n  }\n\n  /// @notice Max amount that can be deposited to the strategy, see SCB-593\n  function capacity() external view override returns (uint) {\n    return _capacity;\n  }\n\n  function setCapacity(uint capacity_) external {\n    _capacity = capacity_;\n  }\n\n  function setTotalAssetsDelta(int totalAssetsDelta_) external {\n    _totalAssetsDelta = totalAssetsDelta_;\n  }\n\n  function setUseTrueExpectedWithdraw(bool value) external {\n    useTrueExpectedWithdraw = value;\n  }\n\n\n  ////////////////////////////////////////////////////////\n  ///           Access to internal functions\n  ////////////////////////////////////////////////////////\n  function checkWithdrawImpactAccessForTests(\n    address _asset,\n    uint balanceBefore,\n    uint investedAssetsUSD,\n    uint assetPrice,\n    address _splitter\n  ) external view returns (uint balance) {\n    return StrategyLib.checkWithdrawImpact(_asset, balanceBefore, investedAssetsUSD, assetPrice, _splitter);\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/test/MockStrategySimple.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../proxy/ControllableV3.sol\";\nimport \"../interfaces/IStrategyV2.sol\";\nimport \"../interfaces/IERC20.sol\";\n\ncontract MockStrategySimple is ControllableV3, IStrategyV2 {\n\n  string public constant override NAME = \"mock strategy\";\n  string public override strategySpecificName = \"mock strategy1\";\n  string public constant override PLATFORM = \"test\";\n  string public constant override STRATEGY_VERSION = \"1.0.0\";\n\n  address public override splitter;\n  address public override asset;\n  bool public override isReadyToHardWork;\n  uint public override compoundRatio;\n\n  uint internal slippage;\n  uint internal lastEarned;\n  uint internal lastLost;\n\n  uint internal _capacity;\n  address public override performanceReceiver;\n  uint public override performanceFee;\n\n  function init(\n    address controller_,\n    address _splitter,\n    address _asset\n  ) external initializer {\n    __Controllable_init(controller_);\n    splitter = _splitter;\n    asset = _asset;\n    isReadyToHardWork = true;\n    _capacity = type(uint).max; // unlimited capacity by default\n    performanceReceiver = IController(controller_).governance();\n    performanceFee = 10_000;\n  }\n\n  function totalAssets() public view override returns (uint) {\n    return IERC20(asset).balanceOf(address(this));\n  }\n\n  function withdrawAllToSplitter() external override returns (uint strategyLoss) {\n    return withdrawToSplitter(totalAssets());\n  }\n\n  function withdrawToSplitter(uint amount) public override returns (uint strategyLoss) {\n    uint _slippage = amount * slippage / 100;\n    if (_slippage != 0) {\n      IERC20(asset).transfer(controller(), _slippage);\n    }\n    IERC20(asset).transfer(splitter, amount - _slippage);\n    return _slippage;\n  }\n\n  function investAll(\n    uint amount_,\n    bool updateTotalAssetsBeforeInvest_\n  ) external pure override returns (\n    uint strategyLoss\n  ) {\n    amount_; // hide warning\n    updateTotalAssetsBeforeInvest_; // hide warning\n    // noop\n    return strategyLoss;\n  }\n\n  function doHardWork() external view override returns (uint earned, uint lost) {\n    return (lastEarned, lastLost);\n  }\n\n  function setLast(uint earned, uint lost) external {\n    lastEarned = earned;\n    lastLost = lost;\n  }\n\n  function setSlippage(uint value) external {\n    slippage = value;\n  }\n\n  function setCompoundRatio(uint value) external override {\n    compoundRatio = value;\n  }\n\n  /// @notice Max amount that can be deposited to the strategy, see SCB-593\n  function capacity() external view override returns (uint) {\n    return _capacity;\n  }\n\n  function setCapacity(uint capacity_) external {\n    _capacity = capacity_;\n  }\n\n  /// @notice Set performance fee and receiver\n  function setupPerformanceFee(uint fee_, address receiver_) external {\n    performanceFee = fee_;\n    performanceReceiver = receiver_;\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/test/MockToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/ERC20Upgradeable.sol\";\n\ncontract MockToken is ERC20Upgradeable {\n\n  uint8 internal _decimals;\n\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_\n  )  {\n    _init(name_, symbol_, decimals_);\n  }\n\n  function _init(\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_\n  ) internal initializer {\n    __ERC20_init(name_, symbol_);\n    _decimals = decimals_;\n  }\n\n  function decimals() public view override returns (uint8) {\n    return _decimals;\n  }\n\n  function mint(address to, uint amount) external {\n    _mint(to, amount);\n  }\n\n  function burn(address from, uint amount) external {\n    _burn(from, amount);\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/test/Multicall.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\n////// /nix/store/im7ll7dx8gsw2da9k5xwbf8pbjfli2hc-multicall-df1e59d/src/Multicall.sol\n/* pragma solidity >=0.5.0; */\n/* pragma experimental ABIEncoderV2; */\n\n/// @title Multicall - Aggregate results from multiple read-only function calls\n/// @author Michael Elliot <mike@makerdao.com>\n/// @author Joshua Levine <joshua@makerdao.com>\n/// @author Nick Johnson <arachnid@notdot.net>\ncontract Multicall {\n  struct Call {\n    address target;\n    bytes callData;\n  }\n\n  function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n    blockNumber = block.number;\n    returnData = new bytes[](calls.length);\n    for (uint256 i = 0; i < calls.length; i++) {\n      (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n      require(success);\n      returnData[i] = ret;\n    }\n  }\n\n  // Helper functions\n  function getEthBalance(address addr) public view returns (uint256 balance) {\n    balance = addr.balance;\n  }\n\n  function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\n    blockHash = blockhash(blockNumber);\n  }\n\n  function getLastBlockHash() public view returns (bytes32 blockHash) {\n    blockHash = blockhash(block.number - 1);\n  }\n\n  function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n    timestamp = block.timestamp;\n  }\n\n  function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\n    difficulty = block.difficulty;\n  }\n\n  function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n    gaslimit = block.gaslimit;\n  }\n\n  function getCurrentBlockCoinbase() public view returns (address coinbase) {\n    coinbase = block.coinbase;\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/tools/TetuERC165.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/ERC165.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../lib/InterfaceIds.sol\";\n\n/// @dev Tetu Implementation of the {IERC165} interface extended with helper functions.\n/// @author bogdoslav\nabstract contract TetuERC165 is ERC165 {\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_TETU_ERC165 || super.supportsInterface(interfaceId);\n  }\n\n  // *************************************************************\n  //                        HELPER FUNCTIONS\n  // *************************************************************\n  /// @author bogdoslav\n\n  /// @dev Checks what interface with id is supported by contract.\n  /// @return bool. Do not throws\n  function _isInterfaceSupported(address contractAddress, bytes4 interfaceId) internal view returns (bool) {\n    require(contractAddress != address(0), \"Zero address\");\n    // check what address is contract\n    uint codeSize;\n    assembly {\n      codeSize := extcodesize(contractAddress)\n    }\n    if (codeSize == 0) return false;\n\n    try IERC165(contractAddress).supportsInterface(interfaceId) returns (bool isSupported) {\n      return isSupported;\n    } catch {\n    }\n    return false;\n  }\n\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\n  function _requireInterface(address contractAddress, bytes4 interfaceId) internal view {\n    require(_isInterfaceSupported(contractAddress, interfaceId), \"Interface is not supported\");\n  }\n\n  /// @dev Checks what address is ERC20.\n  /// @return bool. Do not throws\n  function _isERC20(address contractAddress) internal view returns (bool) {\n    require(contractAddress != address(0), \"Zero address\");\n    // check what address is contract\n    uint codeSize;\n    assembly {\n      codeSize := extcodesize(contractAddress)\n    }\n    if (codeSize == 0) return false;\n\n    bool totalSupplySupported;\n    try IERC20(contractAddress).totalSupply() returns (uint) {\n      totalSupplySupported = true;\n    } catch {\n    }\n\n    bool balanceSupported;\n    try IERC20(contractAddress).balanceOf(address(this)) returns (uint) {\n      balanceSupported = true;\n    } catch {\n    }\n\n    return totalSupplySupported && balanceSupported;\n  }\n\n\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\n  function _requireERC20(address contractAddress) internal view {\n    require(_isERC20(contractAddress), \"Not ERC20\");\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/vault/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/ERC20Permit.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/ReentrancyGuard.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/IERC4626.sol\";\n\n/// @notice Minimal ERC4626 tokenized Vault implementation.\n/// @author belbix\n/// @author AlehNat - removed upgradeable logic\nabstract contract ERC4626 is ERC20Permit, ReentrancyGuard, IERC4626 {\n  using SafeERC20 for IERC20;\n  using Math for uint;\n\n  /// @dev The address of the underlying token used for the Vault uses for accounting,\n  ///      depositing, and withdrawing\n  IERC20 internal _asset;\n\n  constructor(\n    IERC20 asset_,\n    string memory _name,\n    string memory _symbol\n  ) ERC20(_name, _symbol) ERC20Permit(_name) {\n    _asset = asset_;\n  }\n\n\n  function decimals() public view override(IERC20Metadata, ERC20) returns (uint8) {\n    return IERC20Metadata(address(_asset)).decimals();\n  }\n\n  function asset() external view override returns (address) {\n    return address(_asset);\n  }\n\n  /*//////////////////////////////////////////////////////////////\n  //             DEPOSIT/WITHDRAWAL LOGIC\n  //////////////////////////////////////////////////////////////*/\n\n  /// @dev Mints vault shares to receiver by depositing exactly amount of assets.\n  function deposit(\n    uint assets,\n    address receiver\n  ) public nonReentrant virtual override returns (uint shares) {\n    require(assets <= maxDeposit(receiver), \"MAX\");\n\n    shares = previewDeposit(assets);\n    // Check for rounding error since we round down in previewDeposit.\n    require(shares != 0, \"ZERO_SHARES\");\n\n    // Need to transfer before minting or ERC777s could reenter.\n    _asset.safeTransferFrom(msg.sender, address(this), assets);\n\n    _mint(receiver, shares);\n\n    emit Deposit(msg.sender, receiver, assets, shares);\n\n    afterDeposit(assets, shares);\n  }\n\n  function mint(\n    uint shares,\n    address receiver\n  ) public nonReentrant virtual override returns (uint assets) {\n    require(shares <= maxMint(receiver), \"MAX\");\n\n    assets = previewMint(shares);\n    // No need to check for rounding error, previewMint rounds up.\n\n    // Need to transfer before minting or ERC777s could reenter.\n    _asset.safeTransferFrom(msg.sender, address(this), assets);\n\n    _mint(receiver, shares);\n\n    emit Deposit(msg.sender, receiver, assets, shares);\n\n    afterDeposit(assets, shares);\n  }\n\n  function withdraw(\n    uint assets,\n    address receiver,\n    address owner\n  ) public nonReentrant virtual override returns (uint shares) {\n    require(assets <= maxWithdraw(owner), \"MAX\");\n\n    shares = previewWithdraw(assets);\n    // No need to check for rounding error, previewWithdraw rounds up.\n\n    if (msg.sender != owner) {\n      uint allowed = _allowances[owner][msg.sender];\n      // Saves gas for limited approvals.\n      if (allowed != type(uint).max) _allowances[owner][msg.sender] = allowed - shares;\n    }\n\n    beforeWithdraw(assets, shares);\n\n    _burn(owner, shares);\n\n    emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n    _asset.safeTransfer(receiver, assets);\n  }\n\n  /// @dev Redeems shares from owner and sends assets to receiver.\n  function redeem(\n    uint shares,\n    address receiver,\n    address owner\n  ) public nonReentrant virtual override returns (uint assets) {\n    require(shares <= maxRedeem(owner), \"MAX\");\n\n    if (msg.sender != owner) {\n      uint allowed = _allowances[owner][msg.sender];\n      // Saves gas for limited approvals.\n      if (allowed != type(uint).max) _allowances[owner][msg.sender] = allowed - shares;\n    }\n\n    assets = previewRedeem(shares);\n    // Check for rounding error since we round down in previewRedeem.\n    require(assets != 0, \"ZERO_ASSETS\");\n\n    beforeWithdraw(assets, shares);\n\n    _burn(owner, shares);\n\n    emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n    _asset.safeTransfer(receiver, assets);\n  }\n\n  /*//////////////////////////////////////////////////////////////\n  //                  ACCOUNTING LOGIC\n  //////////////////////////////////////////////////////////////*/\n\n  /// @dev Total amount of the underlying asset that is “managed” by Vault\n  function totalAssets() public view virtual override returns (uint);\n\n  function convertToShares(uint assets) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    // Saves an extra SLOAD if totalSupply is non-zero.\n    return supply == 0 ? assets : assets.mulDiv(supply, totalAssets(), Math.Rounding.Down);\n  }\n\n  function convertToAssets(uint shares) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    // Saves an extra SLOAD if totalSupply is non-zero.\n    return supply == 0 ? shares : shares.mulDiv(totalAssets(), supply, Math.Rounding.Down);\n  }\n\n  function previewDeposit(uint assets) public view virtual override returns (uint) {\n    return convertToShares(assets);\n  }\n\n  function previewMint(uint shares) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    // Saves an extra SLOAD if totalSupply is non-zero.\n    return supply == 0 ? shares : shares.mulDiv(totalAssets(), supply, Math.Rounding.Up);\n  }\n\n  function previewWithdraw(uint assets) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    // Saves an extra SLOAD if totalSupply is non-zero.\n    return supply == 0 ? assets : assets.mulDiv(supply, totalAssets(), Math.Rounding.Up);\n  }\n\n  function previewRedeem(uint shares) public view virtual override returns (uint) {\n    return convertToAssets(shares);\n  }\n\n  ///////////////////////////////////////////////////////////////\n  //           DEPOSIT/WITHDRAWAL LIMIT LOGIC\n  ///////////////////////////////////////////////////////////////\n\n  function maxDeposit(address) public view virtual override returns (uint) {\n    return type(uint).max - 1;\n  }\n\n  function maxMint(address) public view virtual override returns (uint) {\n    return type(uint).max - 1;\n  }\n\n  function maxWithdraw(address owner) public view virtual override returns (uint) {\n    return convertToAssets(balanceOf(owner));\n  }\n\n  function maxRedeem(address owner) public view virtual override returns (uint) {\n    return balanceOf(owner);\n  }\n\n  ///////////////////////////////////////////////////////////////\n  //                INTERNAL HOOKS LOGIC\n  ///////////////////////////////////////////////////////////////\n\n  function beforeWithdraw(uint assets, uint shares) internal virtual {}\n\n  function afterDeposit(uint assets, uint shares) internal virtual {}\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/vault/ERC4626Strict.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"./ERC4626.sol\";\nimport \"../interfaces/IStrategyStrict.sol\";\nimport \"../tools/TetuERC165.sol\";\n\ncontract ERC4626Strict is ERC4626, TetuERC165 {\n  using SafeERC20 for IERC20;\n  using Math for uint;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant VAULT_VERSION = \"1.0.0\";\n  /// @dev Denominator for buffer calculation. 100% of the buffer amount.\n  uint constant public BUFFER_DENOMINATOR = 100_000;\n\n  // *************************************************************\n  //                        VARIABLES\n  // *************************************************************\n\n  /// @dev Connected strategy. Can not be changed.\n  IStrategyStrict public immutable strategy;\n  /// @dev Percent of assets that will always stay in this vault.\n  uint public immutable buffer;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event Invest(address splitter, uint amount);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  constructor(\n    IERC20 asset_,\n    string memory _name,\n    string memory _symbol,\n    address _strategy,\n    uint _buffer\n  ) ERC4626(asset_, _name, _symbol){\n    // buffer is 5% max\n    require(_buffer <= BUFFER_DENOMINATOR / 20, \"!BUFFER\");\n    _requireERC20(address(asset_));\n    buffer = _buffer;\n    _requireInterface(_strategy, InterfaceIds.I_STRATEGY_STRICT);\n    strategy = IStrategyStrict(_strategy);\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev Total amount of the underlying asset that is “managed” by Vault\n  function totalAssets() public view override returns (uint) {\n    return _asset.balanceOf(address(this)) + strategy.totalAssets();\n  }\n\n  /// @dev Amount of assets under control of strategy.\n  function strategyAssets() external view returns (uint) {\n    return strategy.totalAssets();\n  }\n\n  /// @dev Price of 1 full share\n  function sharePrice() external view returns (uint) {\n    uint units = 10 ** uint256(decimals());\n    uint totalSupply_ = totalSupply();\n    return totalSupply_ == 0\n    ? units\n    : units * totalAssets() / totalSupply_;\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_ERC4626 || super.supportsInterface(interfaceId);\n  }\n\n  // *************************************************************\n  //                 DEPOSIT LOGIC\n  // *************************************************************\n\n  /// @dev Calculate available to invest amount and send this amount to strategy\n  function afterDeposit(uint /*assets*/, uint /*shares*/) internal override {\n    IStrategyStrict _strategy = strategy;\n    IERC20 asset_ = _asset;\n\n    uint256 toInvest = _availableToInvest(_strategy, asset_);\n    // invest only when buffer is filled\n    if (toInvest > 0) {\n      asset_.safeTransfer(address(_strategy), toInvest);\n      _strategy.investAll();\n      emit Invest(address(_strategy), toInvest);\n    }\n  }\n\n  /// @notice Returns amount of assets ready to invest to the strategy\n  function _availableToInvest(IStrategyStrict _strategy, IERC20 asset_) internal view returns (uint) {\n    uint _buffer = buffer;\n    uint assetsInVault = asset_.balanceOf(address(this));\n    uint assetsInStrategy = _strategy.totalAssets();\n    uint wantInvestTotal = (assetsInVault + assetsInStrategy)\n    * (BUFFER_DENOMINATOR - _buffer) / BUFFER_DENOMINATOR;\n    if (assetsInStrategy >= wantInvestTotal) {\n      return 0;\n    } else {\n      uint remainingToInvest = wantInvestTotal - assetsInStrategy;\n      return remainingToInvest <= assetsInVault ? remainingToInvest : assetsInVault;\n    }\n  }\n\n\n  // *************************************************************\n  //                 WITHDRAW LOGIC\n  // *************************************************************\n\n  /// @dev Withdraw all available shares for tx sender.\n  ///      The revert is expected if the balance is higher than `maxRedeem`\n  ///      It suppose to be used only on UI - for on-chain interactions withdraw concrete amount with properly checks.\n  function withdrawAll() external {\n    redeem(balanceOf(msg.sender), msg.sender, msg.sender);\n  }\n\n  /// @dev Internal hook for getting necessary assets from strategy.\n  function beforeWithdraw(uint assets, uint shares) internal override {\n    uint balance = _asset.balanceOf(address(this));\n    // if not enough balance in the vault withdraw from strategies\n    if (balance < assets) {\n      _processWithdrawFromStrategy(\n        assets,\n        shares,\n        totalSupply(),\n        buffer,\n        strategy,\n        balance\n      );\n    }\n  }\n\n  /// @dev Do necessary calculation for withdrawing from strategy and move assets to vault.\n  function _processWithdrawFromStrategy(\n    uint assetsNeed,\n    uint shares,\n    uint totalSupply_,\n    uint _buffer,\n    IStrategyStrict _strategy,\n    uint assetsInVault\n  ) internal {\n    // withdraw everything from the strategy to accurately check the share value\n    if (shares == totalSupply_) {\n      _strategy.withdrawAllToVault();\n    } else {\n      uint assetsInStrategy = _strategy.totalAssets();\n\n      // we should always have buffer amount inside the vault\n      // assume `assetsNeed` can not be higher than entire balance\n      uint expectedBuffer = (assetsInStrategy + assetsInVault - assetsNeed) * _buffer / BUFFER_DENOMINATOR;\n\n      // this code should not be called if `assetsInVault` higher than `assetsNeed`\n      uint missing = Math.min(expectedBuffer + assetsNeed - assetsInVault, assetsInStrategy);\n      // if zero should be resolved on strategy side\n      _strategy.withdrawToVault(missing);\n    }\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/vault/ERC4626Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/ERC20PermitUpgradeable.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/ReentrancyGuard.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/IERC4626.sol\";\n\n/// @notice Minimal ERC4626 tokenized Vault implementation.\n/// @author belbix\nabstract contract ERC4626Upgradeable is ERC20PermitUpgradeable, ReentrancyGuard, IERC4626 {\n  using SafeERC20 for IERC20;\n  using Math for uint;\n\n  uint internal constant INITIAL_SHARES = 1000;\n  address internal constant DEAD_ADDRESS = 0xdEad000000000000000000000000000000000000;\n\n  /// @dev The address of the underlying token used for the Vault uses for accounting,\n  ///      depositing, and withdrawing\n  IERC20 internal _asset;\n\n  function __ERC4626_init(\n    IERC20 asset_,\n    string memory _name,\n    string memory _symbol\n  ) internal onlyInitializing {\n    __ERC20_init(_name, _symbol);\n    _asset = asset_;\n  }\n\n  function decimals() public view override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {\n    return IERC20Metadata(address(_asset)).decimals();\n  }\n\n  function asset() external view override returns (address) {\n    return address(_asset);\n  }\n\n  /*//////////////////////////////////////////////////////////////\n  //             DEPOSIT/WITHDRAWAL LOGIC\n  //////////////////////////////////////////////////////////////*/\n\n  /// @dev Mints vault shares to receiver by depositing exactly amount of assets.\n  function deposit(\n    uint assets,\n    address receiver\n  ) public nonReentrant virtual override returns (uint shares) {\n    require(assets <= maxDeposit(receiver), \"MAX\");\n\n    shares = previewDeposit(assets);\n    // Check for rounding error since we round down in previewDeposit.\n    require(shares != 0, \"ZERO_SHARES\");\n\n    // Need to transfer before minting or ERC777s could reenter.\n    _asset.safeTransferFrom(msg.sender, address(this), assets);\n\n    if(totalSupply() == 0) {\n      _mint(receiver, shares - INITIAL_SHARES);\n      _mint(DEAD_ADDRESS, INITIAL_SHARES);\n    } else {\n      _mint(receiver, shares);\n    }\n\n    emit Deposit(msg.sender, receiver, assets, shares);\n\n    afterDeposit(assets, shares, receiver);\n  }\n\n  function mint(\n    uint shares,\n    address receiver\n  ) public nonReentrant virtual override returns (uint assets) {\n    require(shares <= maxMint(receiver), \"MAX\");\n\n    assets = previewMint(shares);\n    // No need to check for rounding error, previewMint rounds up.\n\n    // Need to transfer before minting or ERC777s could reenter.\n    _asset.safeTransferFrom(msg.sender, address(this), assets);\n\n    if(totalSupply() == 0) {\n      _mint(receiver, shares - INITIAL_SHARES);\n      _mint(DEAD_ADDRESS, INITIAL_SHARES);\n    } else {\n      _mint(receiver, shares);\n    }\n\n    emit Deposit(msg.sender, receiver, assets, shares);\n\n    afterDeposit(assets, shares, receiver);\n  }\n\n  function withdraw(\n    uint assets,\n    address receiver,\n    address owner\n  ) public nonReentrant virtual override returns (uint shares) {\n    require(assets <= maxWithdraw(owner), \"MAX\");\n\n    shares = previewWithdraw(assets);\n    // No need to check for rounding error, previewWithdraw rounds up.\n\n    if (msg.sender != owner) {\n      uint allowed = _allowances[owner][msg.sender];\n      // Saves gas for limited approvals.\n      if (allowed != type(uint).max) {\n        _allowances[owner][msg.sender] = allowed - shares;\n      }\n    }\n\n    beforeWithdraw(assets, shares, receiver, owner);\n\n    _burn(owner, shares);\n\n    emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n    _asset.safeTransfer(receiver, assets);\n  }\n\n  /// @dev Redeems shares from owner and sends assets to receiver.\n  function redeem(\n    uint shares,\n    address receiver,\n    address owner\n  ) public nonReentrant virtual override returns (uint assets) {\n    require(shares <= maxRedeem(owner), \"MAX\");\n\n    if (msg.sender != owner) {\n      uint allowed = _allowances[owner][msg.sender];\n      // Saves gas for limited approvals.\n      if (allowed != type(uint).max) {\n        _allowances[owner][msg.sender] = allowed - shares;\n      }\n    }\n\n    assets = previewRedeem(shares);\n    // Check for rounding error since we round down in previewRedeem.\n    require(assets != 0, \"ZERO_ASSETS\");\n\n    beforeWithdraw(assets, shares, receiver, owner);\n\n    _burn(owner, shares);\n\n    emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n    _asset.safeTransfer(receiver, assets);\n  }\n\n  /*//////////////////////////////////////////////////////////////\n  //                  ACCOUNTING LOGIC\n  //////////////////////////////////////////////////////////////*/\n\n  /// @dev Total amount of the underlying asset that is “managed” by Vault\n  function totalAssets() public view virtual override returns (uint);\n\n  function convertToShares(uint assets) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    // Saves an extra SLOAD if totalSupply is non-zero.\n    return supply == 0 ? assets : assets.mulDiv(supply, totalAssets(), Math.Rounding.Down);\n  }\n\n  function convertToAssets(uint shares) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    // Saves an extra SLOAD if totalSupply is non-zero.\n    return supply == 0 ? shares : shares.mulDiv(totalAssets(), supply, Math.Rounding.Down);\n  }\n\n  function previewDeposit(uint assets) public view virtual override returns (uint) {\n    return convertToShares(assets);\n  }\n\n  function previewMint(uint shares) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    // Saves an extra SLOAD if totalSupply is non-zero.\n    return supply == 0 ? shares : shares.mulDiv(totalAssets(), supply, Math.Rounding.Up);\n  }\n\n  function previewWithdraw(uint assets) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    // Saves an extra SLOAD if totalSupply is non-zero.\n    return supply == 0 ? assets : assets.mulDiv(supply, totalAssets(), Math.Rounding.Up);\n  }\n\n  function previewRedeem(uint shares) public view virtual override returns (uint) {\n    return convertToAssets(shares);\n  }\n\n  ///////////////////////////////////////////////////////////////\n  //           DEPOSIT/WITHDRAWAL LIMIT LOGIC\n  ///////////////////////////////////////////////////////////////\n\n  function maxDeposit(address) public view virtual override returns (uint) {\n    return type(uint).max - 1;\n  }\n\n  function maxMint(address) public view virtual override returns (uint) {\n    return type(uint).max - 1;\n  }\n\n  function maxWithdraw(address owner) public view virtual override returns (uint) {\n    return convertToAssets(balanceOf(owner));\n  }\n\n  function maxRedeem(address owner) public view virtual override returns (uint) {\n    return balanceOf(owner);\n  }\n\n  ///////////////////////////////////////////////////////////////\n  //                INTERNAL HOOKS LOGIC\n  ///////////////////////////////////////////////////////////////\n\n  /// @param owner The owner of the amount to be withdrawn\n  function beforeWithdraw(uint assets, uint shares, address receiver, address owner) internal virtual {}\n\n  /// @param receiver The receiver of the shares received after deposit\n  function afterDeposit(uint assets, uint shares, address receiver) internal virtual {}\n\n  /**\n * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n  uint[49] private __gap;\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/vault/StrategySplitterV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/ReentrancyGuard.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/EnumerableMap.sol\";\nimport \"../interfaces/ITetuVaultV2.sol\";\nimport \"../interfaces/IStrategyV2.sol\";\nimport \"../interfaces/ISplitter.sol\";\nimport \"../interfaces/IProxyControlled.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @title Proxy solution for connection a vault with multiple strategies\n///        Version 2 has auto-rebalance logic adopted to strategies with fees.\n/// @author belbix\ncontract StrategySplitterV2 is ControllableV3, ReentrancyGuard, ISplitter {\n  using SafeERC20 for IERC20;\n  using EnumerableMap for EnumerableMap.AddressToUintMap;\n\n  // *********************************************\n  //                  CONSTANTS\n  // *********************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant SPLITTER_VERSION = \"2.1.2\";\n  /// @dev APR denominator. Represent 100% APR.\n  uint public constant APR_DENOMINATOR = 100_000;\n  /// @dev Delay between hardwork calls for a strategy.\n  uint public constant HARDWORK_DELAY = 12 hours;\n  /// @dev How much APR history elements will be counted in average APR calculation.\n  uint public constant HISTORY_DEEP = 3;\n  /// @dev Time lock for adding new strategies.\n  uint public constant TIME_LOCK = 18 hours;\n  /// @dev 0.5% of max loss for strategy TVL\n  uint public constant INVEST_LOSS_TOLERANCE = 500;\n  /// @dev 0.5%  of max loss for strategy TVL\n  uint public constant WITHDRAW_LOSS_TOLERANCE = 500;\n  /// @dev 0.5% of max loss for strategy TVL\n  uint public constant HARDWORK_LOSS_TOLERANCE = 500;\n\n  // *********************************************\n  //                 VARIABLES\n  // *********************************************\n\n  /// @dev Underlying asset\n  address public override asset;\n  /// @dev Connected vault\n  address public override vault;\n  /// @dev Array of strategies under control\n  address[] public strategies;\n  /// @dev Paused strategies\n  mapping(address => bool) public pausedStrategies;\n  /// @dev Current strategies average APRs. Uses for deposit/withdraw ordering.\n  mapping(address => uint) public strategiesAPR;\n  /// @dev Strategies APR history. Uses for calculate average APR.\n  mapping(address => uint[]) public strategiesAPRHistory;\n  /// @dev Last strategies doHardWork call timestamp. Uses for calls delay.\n  mapping(address => uint) public lastHardWorks;\n  /// @dev Flag represents doHardWork call. Need for not call HW on deposit again in connected vault.\n  bool public override isHardWorking;\n  /// @dev Strategy => timestamp. Strategies scheduled for adding.\n  EnumerableMap.AddressToUintMap internal _scheduledStrategies;\n  /// @dev Changed to true after a strategy adding\n  bool internal inited;\n  /// @dev How much underlying can be invested to the strategy\n  mapping(address => uint) public strategyCapacity;\n  /// @dev Return true for registered strategy\n  mapping(address => bool) public isValidStrategy;\n\n  // *********************************************\n  //                  EVENTS\n  // *********************************************\n\n  event StrategyAdded(address strategy, uint apr);\n  event StrategyRemoved(address strategy);\n  event Rebalance(\n    address topStrategy,\n    address lowStrategy,\n    uint percent,\n    uint strategyLossOnWithdraw,\n    uint strategyLossOnInvest,\n    uint lowStrategyBalance\n  );\n  event HardWork(\n    address sender,\n    address strategy,\n    uint tvl,\n    uint earned,\n    uint lost,\n    uint apr,\n    uint avgApr\n  );\n  event StrategyScheduled(address strategy, uint startTime, uint timeLock);\n  event ScheduledStrategyRemove(address strategy);\n  event ManualAprChanged(address sender, address strategy, uint newApr, uint oldApr);\n  event Paused(address strategy, address sender);\n  event ContinueInvesting(address strategy, uint apr, address sender);\n  event Loss(address strategy, uint amount);\n  event Invested(address strategy, uint amount);\n  event WithdrawFromStrategy(address strategy);\n  event SetStrategyCapacity(address strategy, uint capacity);\n  event InvestFailed(string error);\n\n  // *********************************************\n  //                 INIT\n  // *********************************************\n\n  /// @dev Initialize contract after setup it as proxy implementation\n  function init(address controller_, address _asset, address _vault) external initializer override {\n    __Controllable_init(controller_);\n    _requireERC20(_asset);\n    asset = _asset;\n    _requireInterface(_vault, InterfaceIds.I_TETU_VAULT_V2);\n    vault = _vault;\n  }\n\n  // *********************************************\n  //                 RESTRICTIONS\n  // *********************************************\n\n  /// @dev Restrict access only for governance\n  function _onlyGov() internal view {\n    require(isGovernance(msg.sender), \"SS: Denied\");\n  }\n\n  /// @dev Restrict access only for operators\n  function _onlyOperators() internal view {\n    require(IController(controller()).isOperator(msg.sender), \"SS: Denied\");\n  }\n\n  /// @dev Restrict access only for vault\n  function _onlyVault() internal view {\n    require(msg.sender == vault, \"SS: Denied\");\n  }\n\n  /// @dev Restrict access only for operators or vault\n  function _onlyOperatorsOrVault() internal view {\n    require(msg.sender == vault || IController(controller()).isOperator(msg.sender), \"SS: Denied\");\n  }\n\n  // *********************************************\n  //                    VIEWS\n  // *********************************************\n\n  /// @dev Amount of underlying assets under control of splitter.\n  function totalAssets() public view override returns (uint256){\n    address _asset = asset;\n    uint balance = IERC20(_asset).balanceOf(address(this));\n    uint length = strategies.length;\n    for (uint i = 0; i < length; i++) {\n      balance += IStrategyV2(strategies[i]).totalAssets();\n    }\n    return balance;\n  }\n\n  /// @dev Return maximum available balance to withdraw without calling more than 1 strategy\n  function maxCheapWithdraw() external view returns (uint) {\n    address _asset = asset;\n    uint strategyBalance;\n    if (strategies.length != 0) {\n      strategyBalance = IStrategyV2(strategies[0]).totalAssets();\n    }\n    return strategyBalance + IERC20(_asset).balanceOf(address(this));\n  }\n\n  /// @dev Length of strategy array\n  function strategiesLength() external view returns (uint) {\n    return strategies.length;\n  }\n\n  /// @dev Returns strategy array\n  function allStrategies() external view returns (address[] memory) {\n    return strategies;\n  }\n\n  /// @dev Length of APR history for given strategy\n  function strategyAPRHistoryLength(address strategy) external view returns (uint) {\n    return strategiesAPRHistory[strategy].length;\n  }\n\n  /// @dev Return all scheduled strategies with start lock time.\n  function scheduledStrategies() external view returns (address[] memory _strategies, uint[] memory locks) {\n    uint length = _scheduledStrategies.length();\n    _strategies = new address[](length);\n    locks = new uint[](length);\n    for (uint i; i < length; ++i) {\n      (_strategies[i], locks[i]) = _scheduledStrategies.at(i);\n    }\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_SPLITTER || super.supportsInterface(interfaceId);\n  }\n\n  /// @dev There are strategy capacities of two kinds: external (from splitter) and internal (from strategy)\n  ///      We should use minimum value (but: zero external capacity means no capacity)\n  function getStrategyCapacity(address strategy) public view returns (uint capacity) {\n    capacity = strategyCapacity[strategy];\n    if (capacity == 0) {\n      capacity = IStrategyV2(strategy).capacity();\n    } else {\n      capacity = Math.min(capacity, IStrategyV2(strategy).capacity());\n    }\n  }\n\n  // *********************************************\n  //                GOV ACTIONS\n  // *********************************************\n\n  /// @dev Schedule strategy for adding in the splitter.\n  ///      Not inited splitter(without strategies) not require scheduling.\n  function scheduleStrategies(address[] memory _strategies) external {\n    _onlyGov();\n\n    for (uint i; i < _strategies.length; i++) {\n      require(_scheduledStrategies.set(_strategies[i], block.timestamp), \"SS: Exist\");\n      emit StrategyScheduled(_strategies[i], block.timestamp, TIME_LOCK);\n    }\n  }\n\n  /// @dev Remove scheduled strategies.\n  function removeScheduledStrategies(address[] memory _strategies) external {\n    _onlyGov();\n\n    for (uint i; i < _strategies.length; i++) {\n      require(_scheduledStrategies.remove(_strategies[i]), \"SS: Not exist\");\n      emit ScheduledStrategyRemove(_strategies[i]);\n    }\n  }\n\n  /// @dev Add new managed strategy. Should be an uniq address.\n  ///      Strategy should have the same underlying asset with current contract.\n  function addStrategies(address[] memory _strategies, uint[] memory expectedAPR, uint[] memory capacities) external {\n    // only initial action will require strict access\n    // already scheduled strategies can be added by anyone\n    require(_strategies.length == expectedAPR.length && _strategies.length == capacities.length, \"WRONG_INPUT\");\n\n    bool _inited = inited;\n    address[] memory existStrategies = strategies;\n    address[] memory addedStrategies = new address[](_strategies.length);\n    for (uint i = 0; i < _strategies.length; i++) {\n      address strategy = _strategies[i];\n      uint apr = expectedAPR[i];\n      uint capacity = capacities[i];\n\n      // --- restrictions ----------\n\n      require(IStrategyV2(strategy).asset() == asset, \"SS: Wrong asset\");\n      require(IStrategyV2(strategy).splitter() == address(this), \"SS: Wrong splitter\");\n      require(IControllable(strategy).isController(controller()), \"SS: Wrong controller\");\n      require(!_contains(addedStrategies, strategy), \"SS: Duplicate\");\n      require(!_contains(existStrategies, strategy) && !isValidStrategy[strategy], \"SS: Already exist\");\n      require(IProxyControlled(strategy).implementation() != address(0), \"SS: Wrong proxy\");\n      // allow add strategies without time lock only for the fist call (assume the splitter is new)\n      if (_inited) {\n        (bool found, uint startTime) = _scheduledStrategies.tryGet(strategy);\n        require(found && startTime != 0 && startTime + TIME_LOCK < block.timestamp, \"SS: Time lock\");\n        _scheduledStrategies.remove(strategy);\n      } else {\n        // only initial action requires strict access\n        _onlyGov();\n      }\n      // ----------------------------\n\n      isValidStrategy[strategy] = true;\n      strategies.push(strategy);\n      _setStrategyAPR(strategy, apr);\n      _setStrategyCapacity(strategy, capacity);\n      addedStrategies[i] = strategy;\n      lastHardWorks[strategy] = block.timestamp;\n      emit StrategyAdded(strategy, apr);\n    }\n    _sortStrategiesByAPR();\n    if (!_inited) {\n      inited = true;\n    }\n  }\n\n  /// @dev Remove given strategy, reset APR and withdraw all underlying to this contract\n  function removeStrategies(address[] memory strategies_) external {\n    _onlyGov();\n\n    for (uint i = 0; i < strategies_.length; i++) {\n      _removeStrategy(strategies_[i]);\n    }\n    _sortStrategiesByAPR();\n  }\n\n  function _removeStrategy(address strategy) internal {\n    uint length = strategies.length;\n    require(length > 0, \"SS: Empty strategies\");\n    uint idx;\n    bool found;\n    for (uint256 i = 0; i < length; i++) {\n      if (strategies[i] == strategy) {\n        idx = i;\n        found = true;\n        break;\n      }\n    }\n    require(found, \"SS: Strategy not found\");\n    if (length > 1) {\n      strategies[idx] = strategies[length - 1];\n    }\n    strategies.pop();\n\n    _setStrategyAPR(strategy, 0);\n    delete isValidStrategy[strategy];\n\n    // for expensive strategies should be called before removing\n    // without loss covering\n    IStrategyV2(strategy).withdrawAllToSplitter();\n    emit StrategyRemoved(strategy);\n  }\n\n  // *********************************************\n  //                OPERATOR ACTIONS\n  // *********************************************\n\n  /// @dev Valid strategies was added after initialisation. It is a way for refreshing them.\n  function refreshValidStrategies() external {\n    _onlyOperators();\n\n    uint length = strategies.length;\n    for (uint i = 0; i < length; i++) {\n      isValidStrategy[strategies[i]] = true;\n    }\n  }\n\n  /// @dev Withdraw some percent from strategy with lowest APR and deposit to strategy with highest APR.\n  /// @param percent Range of 1-100\n  /// @param lossTolerance Range of 0-100_000\n  function rebalance(uint percent, uint lossTolerance) external {\n    _onlyOperators();\n\n    require(lossTolerance <= HARDWORK_LOSS_TOLERANCE, \"SS: Too high tolerance\");\n    uint length = strategies.length;\n    require(length > 1, \"SS: Length\");\n    require(percent <= 100, \"SS: Percent\");\n\n    uint topStrategyWithoutCapacity = type(uint).max;\n\n    uint maxToInvest;\n    for (uint i = 0; i < length; i++) {\n      address strategy = strategies[i];\n      uint capacity = getStrategyCapacity(strategy);\n      if (capacity != 0) {\n        uint strategyBalance = IStrategyV2(strategy).totalAssets();\n        if (strategyBalance < capacity) {\n          topStrategyWithoutCapacity = i;\n          maxToInvest = capacity - strategyBalance;\n          break;\n        }\n      } else {\n        topStrategyWithoutCapacity = i;\n        break;\n      }\n    }\n    require(topStrategyWithoutCapacity != type(uint).max, \"SS: All capped\");\n\n\n    address lowStrategy;\n\n    uint lowStrategyBalance;\n    // loop for all strategies since from top uncapped\n    for (uint i = length; i > topStrategyWithoutCapacity + 1; i--) {\n      lowStrategy = strategies[i - 1];\n      lowStrategyBalance = IStrategyV2(lowStrategy).totalAssets();\n      if (lowStrategyBalance == 0) {\n        continue;\n      }\n      break;\n    }\n\n    // if we are able to withdraw something let's do it\n    uint strategyLossOnWithdraw;\n    if (lowStrategyBalance != 0) {\n      strategyLossOnWithdraw = (percent == 100)\n        ? IStrategyV2(lowStrategy).withdrawAllToSplitter()\n        : IStrategyV2(lowStrategy).withdrawToSplitter(Math.min(lowStrategyBalance * percent / 100, maxToInvest));\n    }\n    // need to emit loss separately\n    if (strategyLossOnWithdraw != 0) {\n      // for withdraw need to use balance before\n      _coverLoss(vault, strategyLossOnWithdraw, lossTolerance, lowStrategyBalance);\n      emit Loss(lowStrategy, strategyLossOnWithdraw);\n    }\n\n    (address topStrategy, uint strategyLossOnInvest, uint strategyBalanceAfterInvest) = _investToTopStrategy(true);\n    require(topStrategy != address(0), \"SS: Not invested\");\n    // need to emit loss separately\n    if (strategyLossOnInvest != 0) {\n      // for invest need to use balance after\n      _coverLoss(vault, strategyLossOnInvest, lossTolerance, strategyBalanceAfterInvest);\n      emit Loss(topStrategy, strategyLossOnInvest);\n    }\n\n\n    emit Rebalance(\n      topStrategy,\n      lowStrategy,\n      percent,\n      strategyLossOnWithdraw,\n      strategyLossOnInvest,\n      lowStrategyBalance\n    );\n  }\n\n  function setAPRs(address[] memory _strategies, uint[] memory aprs) external {\n    _onlyOperators();\n    require(_strategies.length == aprs.length, \"WRONG_INPUT\");\n    for (uint i; i < aprs.length; i++) {\n      address strategy = _strategies[i];\n      require(isValidStrategy[strategy], \"SS: Invalid strategy\");\n      require(!pausedStrategies[strategy], \"SS: Paused\");\n      uint oldAPR = strategiesAPR[strategy];\n      _setStrategyAPR(strategy, aprs[i]);\n      emit ManualAprChanged(msg.sender, strategy, aprs[i], oldAPR);\n    }\n    _sortStrategiesByAPR();\n  }\n\n  /// @dev Pause investing. For withdraw need to call emergencyExit() on the strategy.\n  function pauseInvesting(address strategy) external {\n    _onlyOperators();\n    require(!pausedStrategies[strategy], \"SS: Paused\");\n    require(isValidStrategy[strategy], \"SS: Invalid strategy\");\n\n    pausedStrategies[strategy] = true;\n    uint oldAPR = strategiesAPR[strategy];\n    _setStrategyAPR(strategy, 0);\n    _sortStrategiesByAPR();\n    emit ManualAprChanged(msg.sender, strategy, 0, oldAPR);\n    emit Paused(strategy, msg.sender);\n  }\n\n  /// @dev Resumes the ability to invest for given strategy.\n  function continueInvesting(address strategy, uint apr) external {\n    _onlyOperators();\n    require(pausedStrategies[strategy], \"SS: Not paused\");\n    require(isValidStrategy[strategy], \"SS: Invalid strategy\");\n\n    pausedStrategies[strategy] = false;\n    _setStrategyAPR(strategy, apr);\n    _sortStrategiesByAPR();\n    emit ManualAprChanged(msg.sender, strategy, apr, 0);\n    emit ContinueInvesting(strategy, apr, msg.sender);\n  }\n\n  function setStrategyCapacity(address strategy, uint capacity) external {\n    _onlyOperators();\n    require(isValidStrategy[strategy], \"SS: Invalid strategy\");\n    _setStrategyCapacity(strategy, capacity);\n  }\n\n  function _setStrategyCapacity(address strategy, uint capacity) internal {\n    strategyCapacity[strategy] = capacity;\n    emit SetStrategyCapacity(strategy, capacity);\n  }\n\n  // *********************************************\n  //                VAULT ACTIONS\n  // *********************************************\n\n  /// @dev Invest to the first strategy in the array. Assume this strategy has highest APR.\n  function investAll() external override {\n    _onlyVault();\n\n    if (strategies.length != 0) {\n      (address strategy, uint strategyLoss, uint strategyBalanceAfterInvest) = _investToTopStrategy(true);\n      if (strategyLoss > 0) {\n        _coverLoss(msg.sender, strategyLoss, INVEST_LOSS_TOLERANCE, strategyBalanceAfterInvest);\n        emit Loss(strategy, strategyLoss);\n      }\n    }\n  }\n\n  /// @dev Try to withdraw all from all strategies. May be too expensive to handle in one tx.\n  function withdrawAllToVault() external override {\n    _onlyVault();\n\n    address _vault = vault;\n    address _asset = asset;\n    uint length = strategies.length;\n    for (uint i = 0; i < length; i++) {\n      uint strategyBalance = IStrategyV2(strategies[i]).totalAssets();\n      if (strategyBalance != 0) {\n        uint strategyLoss = IStrategyV2(strategies[i]).withdrawAllToSplitter();\n        emit WithdrawFromStrategy(strategies[i]);\n\n        // register possible loses\n        if (strategyLoss != 0) {\n          _coverLoss(_vault, strategyLoss, WITHDRAW_LOSS_TOLERANCE, strategyBalance);\n          emit Loss(strategies[i], strategyLoss);\n        }\n      }\n    }\n\n    uint balanceAfter = IERC20(_asset).balanceOf(address(this));\n    if (balanceAfter > 0) {\n      IERC20(_asset).safeTransfer(_vault, balanceAfter);\n    }\n  }\n\n  /// @dev Cascade withdraw from strategies start from lower APR until reach the target amount.\n  ///      For large amounts with multiple strategies may not be possible to process this function.\n  function withdrawToVault(uint256 amount) external override {\n    _onlyVault();\n\n    address _asset = asset;\n    address _vault = vault;\n    uint balance = IERC20(_asset).balanceOf(address(this));\n    if (balance < amount) {\n      uint remainingAmount = amount - balance;\n      uint length = strategies.length;\n      for (uint i = length; i > 0; i--) {\n        IStrategyV2 strategy = IStrategyV2(strategies[i - 1]);\n\n        uint strategyBalance = strategy.totalAssets();\n\n        if (strategyBalance != 0) {\n          // withdraw from strategy\n          uint strategyLoss = (strategyBalance <= remainingAmount)\n            ? strategy.withdrawAllToSplitter()\n            : strategy.withdrawToSplitter(remainingAmount);\n          emit WithdrawFromStrategy(address(strategy));\n\n          uint currentBalance = IERC20(_asset).balanceOf(address(this));\n          // assume that we can not decrease splitter balance during withdraw process\n          uint withdrew = currentBalance - balance;\n          balance = currentBalance;\n\n          remainingAmount = withdrew < remainingAmount ? remainingAmount - withdrew : 0;\n\n          // if we withdrew less than expected try to cover loss from vault insurance\n          if (strategyLoss != 0) {\n            _coverLoss(_vault, strategyLoss, WITHDRAW_LOSS_TOLERANCE, strategyBalance);\n            emit Loss(address(strategy), strategyLoss);\n          }\n\n          if (balance >= amount) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (balance != 0) {\n      IERC20(_asset).safeTransfer(_vault, Math.min(amount, balance));\n    }\n  }\n\n  // *********************************************\n  //                HARD WORKS\n  // *********************************************\n\n  /// @dev Register profit/loss data for the strategy.\n  ///      Sender assume to be a registered strategy.\n  ///      Suppose to be used in actions where we updated assets price and need to cover the price diff gap.\n  function coverPossibleStrategyLoss(uint earned, uint lost) external override {\n    address strategy = msg.sender;\n    require(isValidStrategy[strategy], \"SS: Invalid strategy\");\n\n    uint tvl = IStrategyV2(strategy).totalAssets();\n    _declareStrategyIncomeAndCoverLoss(strategy, tvl, 0, earned, lost, false);\n  }\n\n  /// @dev Call hard works for all strategies.\n  function doHardWork() external override {\n    _onlyOperatorsOrVault();\n\n    // prevent recursion\n    require(!isHardWorking, \"SS: Already in hard work\");\n    isHardWorking = true;\n    uint length = strategies.length;\n    bool needReorder;\n    for (uint i = 0; i < length; i++) {\n      if (pausedStrategies[strategies[i]]) {\n        continue;\n      }\n      bool result = _doHardWorkForStrategy(strategies[i], false);\n      if (result) {\n        needReorder = true;\n      }\n    }\n    if (needReorder) {\n      _sortStrategiesByAPR();\n    }\n    isHardWorking = false;\n  }\n\n  /// @dev Call hard work for given strategy.\n  function doHardWorkForStrategy(address strategy, bool push) external {\n    _onlyOperators();\n    require(isValidStrategy[strategy], \"SS: Invalid strategy\");\n\n    // prevent recursion\n    require(!isHardWorking, \"SS: Already in hard work\");\n    isHardWorking = true;\n    bool result = _doHardWorkForStrategy(strategy, push);\n    if (result) {\n      _sortStrategiesByAPR();\n    }\n    isHardWorking = false;\n  }\n\n  function _doHardWorkForStrategy(address strategy, bool push) internal returns (bool) {\n    uint lastHardWork = lastHardWorks[strategy];\n\n    if (\n      (\n        lastHardWork + HARDWORK_DELAY < block.timestamp\n        && IStrategyV2(strategy).isReadyToHardWork()\n        && !pausedStrategies[strategy]\n      )\n      || push\n    ) {\n      uint sinceLastHardWork = block.timestamp - lastHardWork;\n      uint tvl = IStrategyV2(strategy).totalAssets();\n      if (tvl != 0) {\n        (uint earned, uint lost) = IStrategyV2(strategy).doHardWork();\n\n        (uint apr, uint avgApr) = _declareStrategyIncomeAndCoverLoss(strategy, tvl, sinceLastHardWork, earned, lost, true);\n\n        lastHardWorks[strategy] = block.timestamp;\n\n        emit HardWork(\n          msg.sender,\n          strategy,\n          tvl,\n          earned,\n          lost,\n          apr,\n          avgApr\n        );\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function _declareStrategyIncomeAndCoverLoss(\n    address strategy,\n    uint strategyTvl,\n    uint sinceLastHardWork,\n    uint earned,\n    uint lost,\n    bool registerApr\n  ) internal returns (uint apr, uint avgApr) {\n    apr = 0;\n    avgApr = 0;\n    uint lostForCovering = lost > earned ? lost - earned : 0;\n    if (lostForCovering > 0) {\n      _coverLoss(vault, lostForCovering, HARDWORK_LOSS_TOLERANCE, strategyTvl);\n    }\n\n    if (registerApr) {\n      if (earned > lost) {\n        apr = computeApr(strategyTvl, earned - lost, sinceLastHardWork);\n      }\n      strategiesAPRHistory[strategy].push(apr);\n      avgApr = averageApr(strategy);\n      strategiesAPR[strategy] = avgApr;\n    }\n  }\n\n  function averageApr(address strategy) public view returns (uint) {\n    uint[] storage history = strategiesAPRHistory[strategy];\n    uint aprSum;\n    uint length = history.length;\n    uint count = Math.min(HISTORY_DEEP, length);\n    if (count != 0) {\n      for (uint i; i < count; i++) {\n        aprSum += history[length - i - 1];\n      }\n      return aprSum / count;\n    }\n    return 0;\n  }\n\n  /// @dev https://www.investopedia.com/terms/a/apr.asp\n  ///      TVL and rewards should be in the same currency and with the same decimals\n  function computeApr(uint tvl, uint earned, uint duration) public pure returns (uint) {\n    if (tvl == 0 || duration == 0) {\n      return 0;\n    }\n    return earned * 1e18 * APR_DENOMINATOR * uint(365) / tvl / (duration * 1e18 / 1 days);\n  }\n\n  /// @dev Insertion sorting algorithm for using with arrays fewer than 10 elements.\n  ///      Based on https://medium.com/coinmonks/sorting-in-solidity-without-comparison-4eb47e04ff0d\n  ///      Sort strategies array by APR values from strategiesAPR map. Highest to lowest.\n  function _sortStrategiesByAPR() internal {\n    unchecked {\n      uint length = strategies.length;\n      for (uint i = 1; i < length; i++) {\n        address key = strategies[i];\n        uint j = i - 1;\n        while ((int(j) >= 0) && strategiesAPR[strategies[j]] < strategiesAPR[key]) {\n          strategies[j + 1] = strategies[j];\n          j--;\n        }\n        strategies[j + 1] = key;\n      }\n    }\n  }\n\n  /// @dev Return true if given item found in address array\n  function _contains(address[] memory array, address _item) internal pure returns (bool) {\n    for (uint256 i = 0; i < array.length; i++) {\n      if (array[i] == _item) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function _setStrategyAPR(address strategy, uint apr) internal {\n    strategiesAPR[strategy] = apr;\n    // need to override last values of history for properly calculate average apr\n    for (uint i; i < HISTORY_DEEP; i++) {\n      strategiesAPRHistory[strategy].push(apr);\n    }\n  }\n\n  /// @param updateTotalAssetsBeforeInvest TotalAssets of strategy should be updated before investing.\n  /// @return strategy Selected strategy or zero\n  /// @return strategyLoss Loss should be covered from Insurance\n  function _investToTopStrategy(bool updateTotalAssetsBeforeInvest) internal returns (\n    address strategy,\n    uint strategyLoss,\n    uint strategyBalanceAfterInvest\n  ) {\n    address _asset = asset;\n    uint balance = IERC20(_asset).balanceOf(address(this));\n    // no actions for zero balance, return empty strategy\n    if (balance != 0) {\n      uint length = strategies.length;\n      for (uint i; i < length; ++i) {\n        strategy = strategies[i];\n        if (pausedStrategies[strategy]) {\n          continue;\n        }\n\n        uint capacity = getStrategyCapacity(strategy);\n\n        uint strategyBalance = IStrategyV2(strategy).totalAssets();\n        uint toInvest;\n        if (capacity > strategyBalance) {\n          toInvest = Math.min(capacity - strategyBalance, balance);\n        } else {\n          continue;\n        }\n\n        if (toInvest != 0) {\n          IERC20(_asset).safeTransfer(strategy, toInvest);\n          strategyLoss = IStrategyV2(strategy).investAll(toInvest, updateTotalAssetsBeforeInvest);\n          strategyBalanceAfterInvest = strategyBalance + toInvest;\n          emit Invested(strategy, toInvest);\n          break;\n        }\n      }\n    }\n\n    return (strategy, strategyLoss, strategyBalanceAfterInvest);\n  }\n\n  function _coverLoss(address _vault, uint amount, uint lossTolerance, uint strategyBalance) internal {\n    if (amount != 0) {\n      require(strategyBalance != 0, \"SS: Strategy balance should not be zero\");\n      require(amount * 100_000 / strategyBalance <= lossTolerance, \"SS: Loss too high\");\n      ITetuVaultV2(_vault).coverLoss(amount);\n    }\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/vault/TetuVaultV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/ISplitter.sol\";\nimport \"../interfaces/ITetuVaultV2.sol\";\nimport \"../interfaces/IGauge.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"./ERC4626Upgradeable.sol\";\n\n/// @title Vault for storing underlying tokens and managing them with strategy splitter.\n/// @author belbix\ncontract TetuVaultV2 is ERC4626Upgradeable, ControllableV3, ITetuVaultV2 {\n  using SafeERC20 for IERC20;\n  using Math for uint;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant VAULT_VERSION = \"2.2.0\";\n  /// @dev Denominator for buffer calculation. 100% of the buffer amount.\n  uint constant public BUFFER_DENOMINATOR = 100_000;\n  /// @dev Denominator for fee calculation.\n  uint constant public FEE_DENOMINATOR = 100_000;\n  /// @dev Max 1% fee.\n  uint constant public MAX_FEE = FEE_DENOMINATOR / 100;\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev Strategy splitter. Should be setup after deploy.\n  ISplitter public splitter;\n  /// @dev Connected gauge for stakeless rewards\n  IGauge public gauge;\n  /// @dev Dedicated contract for holding insurance for covering share price loss.\n  IVaultInsurance public override insurance;\n  /// @dev Percent of assets that will always stay in this vault.\n  uint public buffer;\n\n  /// @dev Maximum amount for withdraw. Max UINT256 by default.\n  uint public maxWithdrawAssets;\n  /// @dev Maximum amount for redeem. Max UINT256 by default.\n  uint public maxRedeemShares;\n  /// @dev Maximum amount for deposit. Max UINT256 by default.\n  uint public maxDepositAssets;\n  /// @dev Maximum amount for mint. Max UINT256 by default.\n  uint public maxMintShares;\n  /// @dev Fee for deposit/mint actions. Zero by default.\n  uint public override depositFee;\n  /// @dev Fee for withdraw/redeem actions. Zero by default.\n  uint public override withdrawFee;\n\n  /// @dev Trigger doHardwork on invest action. Enabled by default.\n  bool public doHardWorkOnInvest;\n\n  /// @dev msg.sender => block when request sent. Should be cleared on deposit/withdraw action\n  ///      For simplification we are setup new withdraw request on each deposit/transfer\n  mapping(address => uint) public withdrawRequests;\n\n  /// @dev A user should wait this block amounts before able to withdraw.\n  uint public withdrawRequestBlocks;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event Init(\n    address controller,\n    address asset,\n    string name,\n    string symbol,\n    address gauge,\n    uint buffer\n  );\n  event SplitterSetup(address splitter);\n  event BufferChanged(uint oldValue, uint newValue);\n  event Invest(address splitter, uint amount);\n  event MaxWithdrawChanged(uint maxAssets, uint maxShares);\n  event MaxDepositChanged(uint maxAssets, uint maxShares);\n  event FeeChanged(uint depositFee, uint withdrawFee);\n  event DoHardWorkOnInvestChanged(bool oldValue, bool newValue);\n  event FeeTransfer(uint amount);\n  event LossCovered(uint amount, uint requestedAmount, uint balance);\n  event WithdrawRequested(address sender, uint startBlock);\n  event WithdrawRequestBlocks(uint blocks);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @dev Proxy initialization. Call it after contract deploy.\n  function init(\n    address controller_,\n    IERC20 asset_,\n    string memory _name,\n    string memory _symbol,\n    address _gauge,\n    uint _buffer\n  ) external initializer override {\n    require(_buffer <= BUFFER_DENOMINATOR, \"!BUFFER\");\n    require(_gauge != address(0), \"!GAUGE\");\n    require(IControllable(_gauge).isController(controller_), \"!GAUGE_CONTROLLER\");\n\n    _requireERC20(address(asset_));\n    __ERC4626_init(asset_, _name, _symbol);\n    __Controllable_init(controller_);\n\n    _requireInterface(_gauge, InterfaceIds.I_GAUGE);\n    gauge = IGauge(_gauge);\n    buffer = _buffer;\n\n    // set defaults\n    maxWithdrawAssets = type(uint).max;\n    maxRedeemShares = type(uint).max;\n    maxDepositAssets = type(uint).max - 1;\n    maxMintShares = type(uint).max - 1;\n    doHardWorkOnInvest = true;\n    withdrawRequestBlocks = 5;\n    emit WithdrawRequestBlocks(5);\n\n    emit Init(\n      controller_,\n      address(asset_),\n      _name,\n      _symbol,\n      _gauge,\n      _buffer\n    );\n  }\n\n  function initInsurance(IVaultInsurance _insurance) external override {\n    require(address(insurance) == address(0), \"INITED\");\n    _requireInterface(address(_insurance), InterfaceIds.I_VAULT_INSURANCE);\n\n    require(_insurance.vault() == address(this), \"!VAULT\");\n    require(_insurance.asset() == address(_asset), \"!ASSET\");\n    insurance = _insurance;\n  }\n\n  // *************************************************************\n  //                      GOV ACTIONS\n  // *************************************************************\n\n  /// @dev Set block amount before user will able to withdraw after a request.\n  function setWithdrawRequestBlocks(uint blocks) external {\n    require(isGovernance(msg.sender), \"DENIED\");\n    withdrawRequestBlocks = blocks;\n    emit WithdrawRequestBlocks(blocks);\n  }\n\n  /// @dev Set new buffer value. Should be lower than denominator.\n  function setBuffer(uint _buffer) external {\n    require(isGovernance(msg.sender), \"DENIED\");\n    require(_buffer <= BUFFER_DENOMINATOR, \"BUFFER\");\n\n    emit BufferChanged(buffer, _buffer);\n    buffer = _buffer;\n  }\n\n  /// @dev Set maximum available to deposit amounts.\n  ///      Could be zero values in emergency case when need to pause malicious actions.\n  function setMaxDeposit(uint maxAssets, uint maxShares) external {\n    require(isGovernance(msg.sender), \"DENIED\");\n\n    maxDepositAssets = maxAssets;\n    maxMintShares = maxShares;\n    emit MaxDepositChanged(maxAssets, maxShares);\n  }\n\n  /// @dev Set maximum available to withdraw amounts.\n  ///      Could be zero values in emergency case when need to pause malicious actions.\n  function setMaxWithdraw(uint maxAssets, uint maxShares) external {\n    require(isGovernance(msg.sender), \"DENIED\");\n\n    maxWithdrawAssets = maxAssets;\n    maxRedeemShares = maxShares;\n    emit MaxWithdrawChanged(maxAssets, maxShares);\n  }\n\n  /// @dev Set deposit/withdraw fees\n  function setFees(uint _depositFee, uint _withdrawFee) external {\n    require(isGovernance(msg.sender), \"DENIED\");\n    require(_depositFee <= MAX_FEE && _withdrawFee <= MAX_FEE, \"TOO_HIGH\");\n\n    depositFee = _depositFee;\n    withdrawFee = _withdrawFee;\n    emit FeeChanged(_depositFee, _withdrawFee);\n  }\n\n  /// @dev If activated will call doHardWork on splitter on each invest action.\n  function setDoHardWorkOnInvest(bool value) external {\n    require(isGovernance(msg.sender), \"DENIED\");\n    emit DoHardWorkOnInvestChanged(doHardWorkOnInvest, value);\n    doHardWorkOnInvest = value;\n  }\n\n  /// @dev Set splitter address. Can not change exist splitter.\n  function setSplitter(address _splitter) external override {\n    IERC20 asset_ = _asset;\n    require(address(splitter) == address(0), \"DENIED\");\n    _requireInterface(_splitter, InterfaceIds.I_SPLITTER);\n    require(ISplitter(_splitter).asset() == address(asset_), \"WRONG_UNDERLYING\");\n    require(ISplitter(_splitter).vault() == address(this), \"WRONG_VAULT\");\n    require(IControllable(_splitter).isController(controller()), \"WRONG_CONTROLLER\");\n    asset_.approve(_splitter, type(uint).max);\n    splitter = ISplitter(_splitter);\n    emit SplitterSetup(_splitter);\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev Total amount of the underlying asset that is “managed” by Vault\n  function totalAssets() public view override returns (uint) {\n    return _asset.balanceOf(address(this)) + splitter.totalAssets();\n  }\n\n  /// @dev Amount of assets under control of strategy splitter.\n  function splitterAssets() external view returns (uint) {\n    return splitter.totalAssets();\n  }\n\n  /// @dev Price of 1 full share\n  function sharePrice() external view returns (uint) {\n    uint units = 10 ** uint256(decimals());\n    uint totalSupply_ = totalSupply();\n    return totalSupply_ == 0\n      ? units\n      : units * totalAssets() / totalSupply_;\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_TETU_VAULT_V2 || super.supportsInterface(interfaceId);\n  }\n\n  // *************************************************************\n  //                 DEPOSIT LOGIC\n  // *************************************************************\n\n  function previewDeposit(uint assets) public view virtual override returns (uint) {\n    uint shares = convertToShares(assets);\n    return shares - (shares * depositFee / FEE_DENOMINATOR);\n  }\n\n  function previewMint(uint shares) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    if (supply != 0) {\n      uint assets = shares.mulDiv(totalAssets(), supply, Math.Rounding.Up);\n      return assets * FEE_DENOMINATOR / (FEE_DENOMINATOR - depositFee);\n    } else {\n      return shares * FEE_DENOMINATOR / (FEE_DENOMINATOR - depositFee);\n    }\n  }\n\n  /// @dev Calculate available to invest amount and send this amount to splitter\n  function afterDeposit(uint assets, uint /*shares*/, address receiver) internal override {\n    // reset withdraw request if necessary\n    if (withdrawRequestBlocks != 0) {\n      withdrawRequests[receiver] = block.number;\n    }\n\n    address _splitter = address(splitter);\n    IERC20 asset_ = _asset;\n    uint _depositFee = depositFee;\n    // send fee to insurance contract\n    if (_depositFee != 0) {\n      uint toFees = assets * _depositFee / FEE_DENOMINATOR;\n      asset_.safeTransfer(address(insurance), toFees);\n      emit FeeTransfer(toFees);\n    }\n    uint256 toInvest = _availableToInvest(_splitter, asset_);\n    // invest only when buffer is filled\n    if (toInvest > 0) {\n\n      // need to check recursive hardworks\n      if (doHardWorkOnInvest && !ISplitter(_splitter).isHardWorking()) {\n        ISplitter(_splitter).doHardWork();\n      }\n\n      asset_.safeTransfer(_splitter, toInvest);\n      ISplitter(_splitter).investAll();\n      emit Invest(_splitter, toInvest);\n    }\n  }\n\n  /// @notice Returns amount of assets ready to invest to the splitter\n  function _availableToInvest(address _splitter, IERC20 asset_) internal view returns (uint) {\n    uint _buffer = buffer;\n    if (_splitter == address(0) || _buffer == BUFFER_DENOMINATOR) {\n      return 0;\n    }\n    uint assetsInVault = asset_.balanceOf(address(this));\n    uint assetsInSplitter = ISplitter(_splitter).totalAssets();\n    uint wantInvestTotal = (assetsInVault + assetsInSplitter)\n    * (BUFFER_DENOMINATOR - _buffer) / BUFFER_DENOMINATOR;\n    if (assetsInSplitter >= wantInvestTotal) {\n      return 0;\n    } else {\n      uint remainingToInvest = wantInvestTotal - assetsInSplitter;\n      return remainingToInvest <= assetsInVault ? remainingToInvest : assetsInVault;\n    }\n  }\n\n  // *************************************************************\n  //                 WITHDRAW LOGIC\n  // *************************************************************\n\n  function requestWithdraw() external {\n    withdrawRequests[msg.sender] = block.number;\n    emit WithdrawRequested(msg.sender, block.number);\n  }\n\n  /// @dev Withdraw all available shares for tx sender.\n  ///      The revert is expected if the balance is higher than `maxRedeem`\n  function withdrawAll() external {\n    redeem(balanceOf(msg.sender), msg.sender, msg.sender);\n  }\n\n  function previewWithdraw(uint assets) public view virtual override returns (uint) {\n    uint supply = totalSupply();\n    uint _totalAssets = totalAssets();\n    if (_totalAssets == 0) {\n      return assets;\n    }\n    uint shares = assets.mulDiv(supply, _totalAssets, Math.Rounding.Up);\n    shares = shares * FEE_DENOMINATOR / (FEE_DENOMINATOR - withdrawFee);\n    return supply == 0 ? assets : shares;\n  }\n\n  function previewRedeem(uint shares) public view virtual override returns (uint) {\n    shares = shares - (shares * withdrawFee / FEE_DENOMINATOR);\n    return convertToAssets(shares);\n  }\n\n  function maxDeposit(address) public view override returns (uint) {\n    return maxDepositAssets;\n  }\n\n  function maxMint(address) public view override returns (uint) {\n    return maxMintShares;\n  }\n\n  function maxWithdraw(address owner) public view override returns (uint) {\n    uint assets = convertToAssets(balanceOf(owner));\n    assets -= assets.mulDiv(withdrawFee, FEE_DENOMINATOR, Math.Rounding.Up);\n    return Math.min(maxWithdrawAssets, assets);\n  }\n\n  function maxRedeem(address owner) public view override returns (uint) {\n    return Math.min(maxRedeemShares, balanceOf(owner));\n  }\n\n  /// @dev Internal hook for getting necessary assets from splitter.\n  function beforeWithdraw(uint assets, uint shares, address /*receiver*/, address owner_) internal override {\n    // check withdraw request if necessary\n    uint _withdrawRequestBlocks = withdrawRequestBlocks;\n    if (_withdrawRequestBlocks != 0) {\n      // ensure that at least {_withdrawRequestBlocks} blocks were passed since last deposit/withdraw of the owner\n      uint wr = withdrawRequests[owner_];\n      require(wr != 0 && wr + _withdrawRequestBlocks < block.number, \"NOT_REQUESTED\");\n      withdrawRequests[owner_] = block.number;\n    }\n\n    uint _withdrawFee = withdrawFee;\n    uint fromSplitter;\n    if (_withdrawFee != 0) {\n      // add fee amount\n      fromSplitter = assets * FEE_DENOMINATOR / (FEE_DENOMINATOR - _withdrawFee);\n    } else {\n      fromSplitter = assets;\n    }\n\n    IERC20 asset_ = _asset;\n    uint balance = asset_.balanceOf(address(this));\n    // if not enough balance in the vault withdraw from strategies\n    if (balance < fromSplitter) {\n      _processWithdrawFromSplitter(\n        fromSplitter,\n        shares,\n        totalSupply(),\n        buffer,\n        splitter,\n        balance\n      );\n    }\n    balance = asset_.balanceOf(address(this));\n    require(assets <= balance, \"SLIPPAGE\");\n\n    // send fee amount to insurance for keep correct calculations\n    // in case of compensation it will lead to double transfer\n    // but we assume that it will be rare case\n    if (_withdrawFee != 0) {\n      // we should compensate possible slippage from user fee too\n      uint toFees = Math.min(fromSplitter - assets, balance - assets);\n      if (toFees != 0) {\n        asset_.safeTransfer(address(insurance), toFees);\n        emit FeeTransfer(toFees);\n      }\n    }\n  }\n\n  /// @dev Do necessary calculation for withdrawing from splitter and move assets to vault.\n  ///      If splitter not defined must not be called.\n  function _processWithdrawFromSplitter(\n    uint assetsNeed,\n    uint shares,\n    uint totalSupply_,\n    uint _buffer,\n    ISplitter _splitter,\n    uint assetsInVault\n  ) internal {\n    // withdraw everything from the splitter to accurately check the share value\n    if (shares == totalSupply_) {\n      _splitter.withdrawAllToVault();\n    } else {\n      uint assetsInSplitter = _splitter.totalAssets();\n\n      // we should always have buffer amount inside the vault\n      // assume `assetsNeed` can not be higher than entire balance\n      uint expectedBuffer = (assetsInSplitter + assetsInVault - assetsNeed) * _buffer / BUFFER_DENOMINATOR;\n\n      // this code should not be called if `assetsInVault` higher than `assetsNeed`\n      uint missing = Math.min(expectedBuffer + assetsNeed - assetsInVault, assetsInSplitter);\n      // if zero should be resolved on splitter side\n      _splitter.withdrawToVault(missing);\n    }\n  }\n\n  // *************************************************************\n  //                 INSURANCE LOGIC\n  // *************************************************************\n\n  function coverLoss(uint amount) external override {\n    require(msg.sender == address(splitter), \"!SPLITTER\");\n    IVaultInsurance _insurance = insurance;\n    uint balance = _asset.balanceOf(address(_insurance));\n    uint toRecover = Math.min(amount, balance);\n    _insurance.transferToVault(toRecover);\n    emit LossCovered(toRecover, amount, balance);\n  }\n\n  // *************************************************************\n  //                 GAUGE HOOK\n  // *************************************************************\n\n  /// @dev Connect this vault to the gauge for non-contract addresses.\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint\n  ) internal override {\n    // refresh withdraw request if necessary\n    if (withdrawRequestBlocks != 0) {\n      withdrawRequests[from] = block.number;\n      withdrawRequests[to] = block.number;\n    }\n    gauge.handleBalanceChange(from);\n    gauge.handleBalanceChange(to);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/vault/VaultFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../tools/TetuERC165.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/ITetuVaultV2.sol\";\nimport \"../interfaces/ISplitter.sol\";\nimport \"../proxy/ProxyControlled.sol\";\nimport \"./VaultInsurance.sol\";\nimport \"../lib/InterfaceIds.sol\";\n\n/// @title Factory for vaults.\n/// @author belbix\ncontract VaultFactory is TetuERC165 {\n\n  // *************************************************************\n  //                        VARIABLES\n  // *************************************************************\n\n  /// @dev Platform controller, need for restrictions.\n  address public immutable controller;\n\n  /// @dev TetuVaultV2 contract address\n  address public vaultImpl;\n  /// @dev VaultInsurance contract address\n  address public vaultInsuranceImpl;\n  /// @dev StrategySplitterV2 contract address\n  address public splitterImpl;\n\n  /// @dev Array of deployed vaults.\n  address[] public deployedVaults;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event VaultDeployed(\n    address sender,\n    address asset,\n    string name,\n    string symbol,\n    address gauge,\n    uint buffer,\n    address vaultProxy,\n    address vaultLogic,\n    address insurance,\n    address splitterProxy,\n    address splitterLogic\n  );\n  event VaultImplChanged(address value);\n  event VaultInsuranceImplChanged(address value);\n  event SplitterImplChanged(address value);\n\n  constructor(\n    address _controller,\n    address _vaultImpl,\n    address _vaultInsuranceImpl,\n    address _splitterImpl\n  ) {\n    _requireInterface(_controller, InterfaceIds.I_CONTROLLER);\n    _requireInterface(_vaultImpl, InterfaceIds.I_TETU_VAULT_V2);\n    _requireInterface(_vaultInsuranceImpl, InterfaceIds.I_VAULT_INSURANCE);\n    _requireInterface(_splitterImpl, InterfaceIds.I_SPLITTER);\n\n    controller = _controller;\n    vaultImpl = _vaultImpl;\n    vaultInsuranceImpl = _vaultInsuranceImpl;\n    splitterImpl = _splitterImpl;\n  }\n\n  function deployedVaultsLength() external view returns (uint) {\n    return deployedVaults.length;\n  }\n\n  // *************************************************************\n  //                        RESTRICTIONS\n  // *************************************************************\n\n  /// @dev Only governance\n  modifier onlyGov() {\n    require(msg.sender == IController(controller).governance(), \"!GOV\");\n    _;\n  }\n\n  /// @dev Only platform operators\n  modifier onlyOperator() {\n    require(IController(controller).isOperator(msg.sender), \"!OPERATOR\");\n    _;\n  }\n\n  // *************************************************************\n  //                        GOV ACTIONS\n  // *************************************************************\n\n  /// @dev Set TetuVaultV2 contract address\n  function setVaultImpl(address value) external onlyGov {\n    _requireInterface(value, InterfaceIds.I_TETU_VAULT_V2);\n    vaultImpl = value;\n    emit VaultImplChanged(value);\n  }\n\n  /// @dev Set VaultInsurance contract address\n  function setVaultInsuranceImpl(address value) external onlyGov {\n    _requireInterface(value, InterfaceIds.I_VAULT_INSURANCE);\n    vaultInsuranceImpl = value;\n    emit VaultInsuranceImplChanged(value);\n  }\n\n  /// @dev Set StrategySplitterV2 contract address\n  function setSplitterImpl(address value) external onlyGov {\n    _requireInterface(value, InterfaceIds.I_SPLITTER);\n    splitterImpl = value;\n    emit SplitterImplChanged(value);\n  }\n\n  // *************************************************************\n  //                    OPERATOR ACTIONS\n  // *************************************************************\n\n  /// @dev Create and init vault with given attributes.\n  function createVault(\n    IERC20 asset,\n    string memory name,\n    string memory symbol,\n    address gauge,\n    uint buffer\n  ) external onlyOperator {\n    // clone vault implementations\n    address vaultProxy = address(new ProxyControlled());\n    address vaultLogic = vaultImpl;\n    // init proxy\n    IProxyControlled(vaultProxy).initProxy(vaultLogic);\n    // init vault\n    ITetuVaultV2(vaultProxy).init(\n      controller,\n      asset,\n      name,\n      symbol,\n      gauge,\n      buffer\n    );\n    // clone insurance\n    VaultInsurance insurance = new VaultInsurance();\n    // init insurance\n    insurance.init(vaultProxy, address(asset));\n    // set insurance to vault\n    ITetuVaultV2(vaultProxy).initInsurance(insurance);\n\n    // clone splitter\n    address splitterProxy = address(new ProxyControlled());\n    address splitterLogic = splitterImpl;\n    // init proxy\n    IProxyControlled(splitterProxy).initProxy(splitterLogic);\n    // init splitter\n    ISplitter(splitterProxy).init(controller, address(asset), vaultProxy);\n    // set splitter to vault\n    ITetuVaultV2(vaultProxy).setSplitter(splitterProxy);\n\n    deployedVaults.push(vaultProxy);\n\n    emit VaultDeployed(\n      msg.sender,\n      address(asset),\n      name,\n      symbol,\n      gauge,\n      buffer,\n      vaultProxy,\n      vaultLogic,\n      address(insurance),\n      splitterProxy,\n      splitterLogic\n    );\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/vault/VaultInsurance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../tools/TetuERC165.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IVaultInsurance.sol\";\nimport \"../interfaces/ITetuVaultV2.sol\";\nimport \"../lib/InterfaceIds.sol\";\n\n/// @title Simple dedicated contract for store vault fees\n/// @author belbix\ncontract VaultInsurance is TetuERC165, IVaultInsurance  {\n  using SafeERC20 for IERC20;\n\n  /// @dev Vault address\n  address public override vault;\n  /// @dev Vault underlying asset\n  address public override asset;\n\n  /// @dev Init contract with given attributes.\n  ///      Should be called from factory during creation process.\n  function init(address _vault, address _asset) external override {\n    require(vault == address(0) && asset == address(0), \"INITED\");\n    _requireInterface(_vault, InterfaceIds.I_TETU_VAULT_V2);\n    _requireERC20(_asset);\n\n    vault = _vault;\n    asset = _asset;\n  }\n\n  /// @dev Transfer tokens to vault in case of covering need.\n  function transferToVault(uint amount) external override {\n    require(msg.sender == vault, \"!VAULT\");\n    IERC20(asset).safeTransfer(msg.sender, amount);\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_VAULT_INSURANCE || super.supportsInterface(interfaceId);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/ve/TetuVoter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/ReentrancyGuard.sol\";\nimport \"../openzeppelin/EnumerableSet.sol\";\nimport \"../interfaces/IVeTetu.sol\";\nimport \"../interfaces/IVoter.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IGauge.sol\";\nimport \"../interfaces/IBribe.sol\";\nimport \"../interfaces/IMultiPool.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @title Voter for veTETU.\n///        Based on Solidly contract.\n/// @author belbix\ncontract TetuVoter is ReentrancyGuard, ControllableV3, IVoter {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant VOTER_VERSION = \"1.0.2\";\n  /// @dev Rewards are released over 7 days\n  uint internal constant _DURATION = 7 days;\n  /// @dev Maximum votes per veNFT\n  uint public constant MAX_VOTES = 10;\n  /// @dev Delay between votes. We need delay for properly bribes distribution between votes.\n  uint public constant VOTE_DELAY = 1 weeks;\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev The ve token that governs these contracts\n  address public override ve;\n  address public token;\n  address public gauge;\n  address public bribe;\n\n  // --- VOTES\n\n  /// @dev veID => Last vote timestamp\n  mapping(uint => uint) public lastVote;\n  /// @dev Total voting weight\n  uint public totalWeight;\n  /// @dev vault => weight\n  mapping(address => int256) public weights;\n  /// @dev nft => vault => votes\n  mapping(uint => mapping(address => int256)) public votes;\n  /// @dev nft => vaults addresses voted for\n  mapping(uint => address[]) public vaultsVotes;\n  /// @dev nft => total voting weight of user\n  mapping(uint => uint) public usedWeights;\n\n  // --- ATTACHMENTS\n\n  /// @dev veId => Attached staking token\n  mapping(uint => EnumerableSet.AddressSet) internal _attachedStakingTokens;\n\n  // --- REWARDS\n\n  /// @dev Global index for accumulated distro\n  uint public index;\n  /// @dev vault => Saved global index for accumulated distro\n  mapping(address => uint) public supplyIndex;\n  /// @dev vault => Available to distribute reward amount\n  mapping(address => uint) public claimable;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event Voted(address indexed voter, uint tokenId, int256 weight, address vault, int256 userWeight, int256 vePower);\n  event Abstained(uint tokenId, int256 weight, address vault);\n  event NotifyReward(address indexed sender, uint amount);\n  event DistributeReward(address indexed sender, address indexed vault, uint amount);\n  event Attach(address indexed owner, address indexed sender, address indexed stakingToken, uint tokenId);\n  event Detach(address indexed owner, address indexed sender, address indexed stakingToken, uint tokenId);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  function init(\n    address _controller,\n    address _ve,\n    address _rewardToken,\n    address _gauge,\n    address _bribe\n  ) external initializer {\n    __Controllable_init(_controller);\n\n    _requireInterface(_ve, InterfaceIds.I_VE_TETU);\n    _requireERC20(_rewardToken);\n    _requireInterface(_gauge, InterfaceIds.I_GAUGE);\n    _requireInterface(_bribe, InterfaceIds.I_BRIBE);\n\n    ve = _ve;\n    token = _rewardToken;\n    gauge = _gauge;\n    bribe = _bribe;\n\n    // if the gauge will be changed in a new implementation, need to revoke approval and set a new\n    IERC20(_rewardToken).safeApprove(gauge, type(uint).max);\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev Returns true for valid vault registered in controller.\n  function isVault(address _vault) public view returns (bool) {\n    return IController(controller()).isValidVault(_vault);\n  }\n\n  /// @dev Returns register in controller vault by id .\n  function validVaults(uint id) public view returns (address) {\n    return IController(controller()).vaults(id);\n  }\n\n  /// @dev Valid vaults registered in controller length.\n  function validVaultsLength() public view returns (uint) {\n    return IController(controller()).vaultsListLength();\n  }\n\n  /// @dev Returns all attached addresses to given veId. Attachments suppose to be gauges.\n  function attachedStakingTokens(uint veId) external view returns (address[] memory) {\n    return _attachedStakingTokens[veId].values();\n  }\n\n  /// @dev Return voted vaults length for given veId.\n  function votedVaultsLength(uint veId) external view override returns (uint) {\n    return vaultsVotes[veId].length;\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_VOTER || super.supportsInterface(interfaceId);\n  }\n\n  function isVotesExist(uint veId) external view override returns (bool) {\n    return vaultsVotes[veId].length > 0;\n  }\n\n  // *************************************************************\n  //                        VOTES\n  // *************************************************************\n\n  /// @dev Resubmit exist votes for given token.\n  ///      Need to call it for ve that did not renew votes too long.\n  ///      Anyone can renew the votes, no restriction.\n  function poke(uint _tokenId) external {\n    address[] memory _vaultVotes = vaultsVotes[_tokenId];\n    uint length = _vaultVotes.length;\n    int256[] memory _weights = new int256[](length);\n\n    for (uint i; i < length; i++) {\n      _weights[i] = votes[_tokenId][_vaultVotes[i]];\n    }\n\n    _vote(_tokenId, _vaultVotes, _weights);\n  }\n\n  /// @dev Remove all votes for given tokenId.\n  ///      Ve token should be able to remove votes on transfer/withdraw\n  function reset(uint tokenId) external {\n    require(IVeTetu(ve).isApprovedOrOwner(msg.sender, tokenId) || msg.sender == ve, \"!owner\");\n    require(lastVote[tokenId] + VOTE_DELAY < block.timestamp, \"delay\");\n    _reset(tokenId);\n  }\n\n  /// @dev Vote for given pools using a vote power of given tokenId. Reset previous votes.\n  function vote(uint tokenId, address[] calldata _vaultVotes, int256[] calldata _weights) external {\n    require(IVeTetu(ve).isApprovedOrOwner(msg.sender, tokenId), \"!owner\");\n    require(lastVote[tokenId] + VOTE_DELAY < block.timestamp, \"delay\");\n    require(_vaultVotes.length == _weights.length, \"!arrays\");\n    _vote(tokenId, _vaultVotes, _weights);\n    lastVote[tokenId] = block.timestamp;\n  }\n\n  function _vote(uint _tokenId, address[] memory _vaultVotes, int256[] memory _weights) internal {\n    _reset(_tokenId);\n    uint length = _vaultVotes.length;\n\n    require(length <= MAX_VOTES, \"Too many votes\");\n\n    int256 _weight = int256(IVeTetu(ve).balanceOfNFT(_tokenId));\n    if (_weight == 0) {\n      // if ve power is 0, no need to vote\n      return;\n    }\n    int256 _totalVoteWeight = 0;\n    int256 _totalWeight = 0;\n    int256 _usedWeight = 0;\n\n    for (uint i = 0; i < length; i++) {\n      _totalVoteWeight += _weights[i] > 0 ? _weights[i] : - _weights[i];\n    }\n\n    for (uint i = 0; i < length; i++) {\n      address _vault = _vaultVotes[i];\n      require(isVault(_vault), \"Invalid vault\");\n\n      int256 _vaultWeight = _totalVoteWeight != 0 ? _weights[i] * _weight / _totalVoteWeight : int256(0);\n      require(votes[_tokenId][_vault] == 0, \"duplicate vault\");\n      _updateFor(_vault);\n\n      vaultsVotes[_tokenId].push(_vault);\n\n      weights[_vault] += _vaultWeight;\n      votes[_tokenId][_vault] += _vaultWeight;\n      if (_vaultWeight > 0) {\n        IBribe(bribe).deposit(_vault, uint(_vaultWeight), _tokenId);\n      } else {\n        _vaultWeight = - _vaultWeight;\n      }\n      _usedWeight += _vaultWeight;\n      _totalWeight += _vaultWeight;\n      emit Voted(msg.sender, _tokenId, _vaultWeight, _vault, _weights[i], _weight);\n    }\n\n    totalWeight += uint(_totalWeight);\n    usedWeights[_tokenId] = uint(_usedWeight);\n  }\n\n  /// @dev Remove all votes for given veId\n  function _reset(uint _tokenId) internal {\n    address[] storage _vaultsVotes = vaultsVotes[_tokenId];\n    uint length = _vaultsVotes.length;\n    int256 _totalWeight = 0;\n\n    for (uint i = 0; i < length; i ++) {\n      address _vault = _vaultsVotes[i];\n      int256 _votes = votes[_tokenId][_vault];\n      _updateFor(_vault);\n      weights[_vault] -= _votes;\n      votes[_tokenId][_vault] = 0;\n      if (_votes > 0) {\n        IBribe(bribe).withdraw(_vault, uint(_votes), _tokenId);\n        _totalWeight += _votes;\n      } else {\n        _totalWeight -= _votes;\n      }\n      emit Abstained(_tokenId, _votes, _vault);\n    }\n    totalWeight -= uint(_totalWeight);\n    usedWeights[_tokenId] = 0;\n    delete vaultsVotes[_tokenId];\n  }\n\n  // *************************************************************\n  //                        ATTACH/DETACH\n  // *************************************************************\n\n  /// @dev A gauge should be able to attach a token for preventing transfers/withdraws.\n  function attachTokenToGauge(address stakingToken, uint tokenId, address account) external override {\n    require(gauge == msg.sender, \"!gauge\");\n    IVeTetu(ve).attachToken(tokenId);\n    // no need to check the result - the gauge should send only new values\n    _attachedStakingTokens[tokenId].add(stakingToken);\n    emit Attach(account, msg.sender, stakingToken, tokenId);\n  }\n\n  /// @dev Detach given token.\n  function detachTokenFromGauge(address stakingToken, uint tokenId, address account) external override {\n    require(gauge == msg.sender, \"!gauge\");\n    IVeTetu(ve).detachToken(tokenId);\n    // no need to check the result - the gauge should send only exist values\n    _attachedStakingTokens[tokenId].remove(stakingToken);\n    emit Detach(account, msg.sender, stakingToken, tokenId);\n  }\n\n  /// @dev Detach given token from all gauges and votes\n  ///      It could be pretty expensive call.\n  ///      Need to have restrictions for max attached tokens and votes.\n  function detachTokenFromAll(uint tokenId, address account) external override {\n    require(msg.sender == ve, \"!ve\");\n    // we assume that any responsibilities should be longer than the delay\n    require(lastVote[tokenId] + VOTE_DELAY < block.timestamp, \"delay\");\n\n    _reset(tokenId);\n\n    // need to copy addresses to memory, we will change this collection in the loop\n    address[] memory tokens = _attachedStakingTokens[tokenId].values();\n    uint length = tokens.length;\n    for (uint i; i < length; ++i) {\n      // no need to check attachments if _attachedStakingTokens properly updated\n      IGauge(gauge).detachVe(tokens[i], account, tokenId);\n    }\n  }\n\n  // *************************************************************\n  //                    UPDATE INDEXES\n  // *************************************************************\n\n  /// @dev Update given vaults.\n  function updateFor(address[] memory _vaults) external {\n    for (uint i = 0; i < _vaults.length; i++) {\n      _updateFor(_vaults[i]);\n    }\n  }\n\n  /// @dev Update vaults by indexes in a range.\n  function updateForRange(uint start, uint end) public {\n    IController c = IController(controller());\n    for (uint i = start; i < end; i++) {\n      _updateFor(c.vaults(i));\n    }\n  }\n\n  /// @dev Update all gauges.\n  function updateAll() external {\n    updateForRange(0, validVaultsLength());\n  }\n\n  function _updateFor(address _vault) internal {\n    int256 _supplied = weights[_vault];\n    if (_supplied > 0) {\n      uint _supplyIndex = supplyIndex[_vault];\n      // get global index for accumulated distro\n      uint _index = index;\n      // update vault current position to global position\n      supplyIndex[_vault] = _index;\n      // see if there is any difference that need to be accrued\n      uint _delta = _index - _supplyIndex;\n      if (_delta > 0) {\n        // add accrued difference for each supplied token\n        uint _share = uint(_supplied) * _delta / 1e18;\n        claimable[_vault] += _share;\n      }\n    } else {\n      // new users are set to the default global state\n      supplyIndex[_vault] = index;\n    }\n  }\n\n  // *************************************************************\n  //                        REWARDS\n  // *************************************************************\n\n  /// @dev Add rewards to this contract. It will be distributed to gauges.\n  function notifyRewardAmount(uint amount) external override {\n    require(amount != 0, \"zero amount\");\n    uint _totalWeight = totalWeight;\n    // without votes rewards can not be added\n    require(_totalWeight != 0, \"!weights\");\n    // transfer the distro in\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n    // 1e18 adjustment is removed during claim\n    uint _ratio = amount * 1e18 / _totalWeight;\n    if (_ratio > 0) {\n      index += _ratio;\n    }\n    emit NotifyReward(msg.sender, amount);\n  }\n\n  /// @dev Notify rewards for given vault. Anyone can call\n  function distribute(address _vault) external override {\n    _distribute(_vault);\n  }\n\n  /// @dev Distribute rewards to all valid vaults.\n  function distributeAll() external override {\n    uint length = validVaultsLength();\n    IController c = IController(controller());\n    for (uint x; x < length; x++) {\n      _distribute(c.vaults(x));\n    }\n  }\n\n  function distributeFor(uint start, uint finish) external {\n    IController c = IController(controller());\n    for (uint x = start; x < finish; x++) {\n      _distribute(c.vaults(x));\n    }\n  }\n\n  function _distribute(address _vault) internal nonReentrant {\n    _updateFor(_vault);\n    uint _claimable = claimable[_vault];\n    address _token = token;\n    address _gauge = gauge;\n    // rewards should not extend period infinity, only higher amount allowed\n    if (_claimable > IMultiPool(_gauge).left(_vault, _token)\n      && _claimable / _DURATION > 0) {\n      claimable[_vault] = 0;\n      IGauge(_gauge).notifyRewardAmount(_vault, _token, _claimable);\n      emit DistributeReward(msg.sender, _vault, _claimable);\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/ve/VeDistributor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IVeTetu.sol\";\nimport \"../interfaces/IVeDistributor.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @title Contract for distributing rewards to ve holders.\n///        Rewards will be staked to the veNFT without extending lock period.\n///        Based on Solidly contract.\n/// @author belbix\ncontract VeDistributor is ControllableV3, IVeDistributor {\n  using SafeERC20 for IERC20;\n\n  // for contract internal purposes, don't need to store in the interface\n  struct ClaimCalculationResult {\n    uint toDistribute;\n    uint userEpoch;\n    uint weekCursor;\n    uint maxUserEpoch;\n    bool success;\n  }\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant VE_DIST_VERSION = \"1.0.2\";\n  uint internal constant WEEK = 7 * 86400;\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev Voting escrow token address\n  IVeTetu public ve;\n  /// @dev Token for ve rewards\n  address public override rewardToken;\n\n  // --- CHECKPOINT\n\n  /// @dev Cursor for the current epoch\n  uint public activePeriod;\n  /// @dev Tokens per week stored on checkpoint call. Predefined array size = max weeks size\n  uint[1000000000000000] public tokensPerWeek;\n  /// @dev Ve supply checkpoints. Predefined array size = max weeks size\n  uint[1000000000000000] public veSupply;\n  /// @dev Ve supply checkpoint time cursor\n  uint public timeCursor;\n  /// @dev Token balance updated on checkpoint/claim\n  uint public tokenLastBalance;\n  /// @dev Last checkpoint time\n  uint public lastTokenTime;\n\n  // --- CLAIM\n\n  /// @dev Timestamp when this contract was inited\n  uint public startTime;\n  /// @dev veID => week cursor stored on the claim action\n  mapping(uint => uint) public timeCursorOf;\n  /// @dev veID => epoch stored on the claim action\n  mapping(uint => uint) public userEpochOf;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event CheckpointToken(\n    uint time,\n    uint tokens\n  );\n\n  event Claimed(\n    uint tokenId,\n    uint amount,\n    uint claimEpoch,\n    uint maxEpoch\n  );\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @dev Proxy initialization. Call it after contract deploy.\n  function init(\n    address controller_,\n    address _ve,\n    address _rewardToken\n  ) external initializer {\n    __Controllable_init(controller_);\n    _requireERC20(_rewardToken);\n    _requireInterface(_ve, InterfaceIds.I_VE_TETU);\n\n    uint _t = block.timestamp / WEEK * WEEK;\n    startTime = _t;\n    lastTokenTime = _t;\n    timeCursor = _t;\n\n    rewardToken = _rewardToken;\n    ve = IVeTetu(_ve);\n\n    IERC20(_rewardToken).safeApprove(_ve, type(uint).max);\n  }\n\n  function emergencyWithdraw() external {\n    require(isGovernance(msg.sender), \"not gov\");\n    IERC20(rewardToken).safeTransfer(msg.sender, IERC20(rewardToken).balanceOf(address(this)));\n  }\n\n  // *************************************************************\n  //                      CHECKPOINT\n  // *************************************************************\n\n  function checkpoint() external override {\n    uint _period = activePeriod;\n    // only trigger if new week\n    if (block.timestamp >= _period + 1 weeks) {\n      // set new period rounded to weeks\n      activePeriod = block.timestamp / 1 weeks * 1 weeks;\n      // checkpoint token balance that was just minted in veDist\n      _checkpointToken();\n      // checkpoint supply\n      _checkpointTotalSupply();\n    }\n  }\n\n  /// @dev Update tokensPerWeek value\n  function _checkpointToken() internal {\n    uint tokenBalance = IERC20(rewardToken).balanceOf(address(this));\n    uint toDistribute = tokenBalance - tokenLastBalance;\n    tokenLastBalance = tokenBalance;\n\n    uint t = lastTokenTime;\n    uint sinceLast = block.timestamp - t;\n    lastTokenTime = block.timestamp;\n    uint thisWeek = t / WEEK * WEEK;\n    uint nextWeek = 0;\n\n    // checkpoint should be called at least once per 20 weeks\n    for (uint i = 0; i < 20; i++) {\n      nextWeek = thisWeek + WEEK;\n      if (block.timestamp < nextWeek) {\n        tokensPerWeek[thisWeek] += adjustToDistribute(toDistribute, block.timestamp, t, sinceLast);\n        break;\n      } else {\n        tokensPerWeek[thisWeek] += adjustToDistribute(toDistribute, nextWeek, t, sinceLast);\n      }\n      t = nextWeek;\n      thisWeek = nextWeek;\n    }\n    emit CheckpointToken(block.timestamp, toDistribute);\n  }\n\n  /// @dev Adjust value based on time since last update\n  function adjustToDistribute(\n    uint toDistribute,\n    uint t0,\n    uint t1,\n    uint sinceLast\n  ) public pure returns (uint) {\n    if (t0 <= t1 || t0 - t1 == 0 || sinceLast == 0) {\n      return toDistribute;\n    }\n    return toDistribute * (t0 - t1) / sinceLast;\n  }\n\n  /// @dev Search in the loop given timestamp through ve points history.\n  ///      Return minimal possible epoch.\n  function findTimestampEpoch(IVeTetu _ve, uint _timestamp) public view returns (uint) {\n    uint _min = 0;\n    uint _max = _ve.epoch();\n    for (uint i = 0; i < 128; i++) {\n      if (_min >= _max) break;\n      uint _mid = (_min + _max + 2) / 2;\n      IVeTetu.Point memory pt = _ve.pointHistory(_mid);\n      if (pt.ts <= _timestamp) {\n        _min = _mid;\n      } else {\n        _max = _mid - 1;\n      }\n    }\n    return _min;\n  }\n\n  /// @dev Search in the loop given timestamp through ve user points history.\n  ///      Return minimal possible epoch.\n  function findTimestampUserEpoch(\n    IVeTetu _ve,\n    uint tokenId,\n    uint _timestamp,\n    uint maxUserEpoch\n  ) public view returns (uint) {\n    uint _min = 0;\n    uint _max = maxUserEpoch;\n    for (uint i = 0; i < 128; i++) {\n      if (_min >= _max) break;\n      uint _mid = (_min + _max + 2) / 2;\n      IVeTetu.Point memory pt = _ve.userPointHistory(tokenId, _mid);\n      if (pt.ts <= _timestamp) {\n        _min = _mid;\n      } else {\n        _max = _mid - 1;\n      }\n    }\n    return _min;\n  }\n\n  /// @dev Call ve checkpoint and write veSupply at the current timeCursor\n  function checkpointTotalSupply() external override {\n    _checkpointTotalSupply();\n  }\n\n  function _checkpointTotalSupply() internal {\n    IVeTetu _ve = ve;\n    uint t = timeCursor;\n    uint roundedTimestamp = block.timestamp / WEEK * WEEK;\n    _ve.checkpoint();\n\n    // assume will be called more frequently than 20 weeks\n    for (uint i = 0; i < 20; i++) {\n      if (t > roundedTimestamp) {\n        break;\n      } else {\n        uint epoch = findTimestampEpoch(_ve, t);\n        IVeTetu.Point memory pt = _ve.pointHistory(epoch);\n        veSupply[t] = adjustVeSupply(t, pt.ts, pt.bias, pt.slope);\n      }\n      t += WEEK;\n    }\n    timeCursor = t;\n  }\n\n  /// @dev Calculate ve supply based on bias and slop for the given timestamp\n  function adjustVeSupply(uint t, uint ptTs, int128 ptBias, int128 ptSlope) public pure returns (uint) {\n    if (t < ptTs) {\n      return 0;\n    }\n    int128 dt = int128(int256(t - ptTs));\n    if (ptBias < ptSlope * dt) {\n      return 0;\n    }\n    return uint(int256(_positiveInt128(ptBias - ptSlope * dt)));\n  }\n\n  // *************************************************************\n  //                      CLAIM\n  // *************************************************************\n\n  /// @dev Return available to claim earned amount\n  function claimable(uint _tokenId) external view override returns (uint) {\n    uint _lastTokenTime = lastTokenTime / WEEK * WEEK;\n    ClaimCalculationResult memory result = _calculateClaim(_tokenId, ve, _lastTokenTime);\n    return result.toDistribute;\n  }\n\n  /// @dev Claim rewards for given veID\n  function claim(uint _tokenId) external override returns (uint) {\n    IVeTetu _ve = ve;\n    if (block.timestamp >= timeCursor) _checkpointTotalSupply();\n    uint _lastTokenTime = lastTokenTime;\n    _lastTokenTime = _lastTokenTime / WEEK * WEEK;\n    uint amount = _claim(_tokenId, _ve, _lastTokenTime);\n    if (amount != 0) {\n      address owner = _ve.ownerOf(_tokenId);\n      IERC20(rewardToken).safeTransfer(owner, amount);\n      tokenLastBalance -= amount;\n    }\n    return amount;\n  }\n\n  /// @dev Claim rewards for given veIDs\n  function claimMany(uint[] memory _tokenIds) external returns (bool) {\n    if (block.timestamp >= timeCursor) _checkpointTotalSupply();\n    uint _lastTokenTime = lastTokenTime;\n    _lastTokenTime = _lastTokenTime / WEEK * WEEK;\n    IVeTetu _votingEscrow = ve;\n    uint total = 0;\n\n    for (uint i = 0; i < _tokenIds.length; i++) {\n      uint _tokenId = _tokenIds[i];\n      if (_tokenId == 0) break;\n      uint amount = _claim(_tokenId, _votingEscrow, _lastTokenTime);\n      if (amount != 0) {\n        address owner = _votingEscrow.ownerOf(_tokenId);\n        IERC20(rewardToken).safeTransfer(owner, amount);\n        total += amount;\n      }\n    }\n    if (total != 0) {\n      tokenLastBalance -= total;\n    }\n\n    return true;\n  }\n\n  function _claim(uint _tokenId, IVeTetu _ve, uint _lastTokenTime) internal returns (uint) {\n    ClaimCalculationResult memory result = _calculateClaim(_tokenId, _ve, _lastTokenTime);\n    if (result.success) {\n      userEpochOf[_tokenId] = result.userEpoch;\n      timeCursorOf[_tokenId] = result.weekCursor;\n      emit Claimed(_tokenId, result.toDistribute, result.userEpoch, result.maxUserEpoch);\n    }\n    return result.toDistribute;\n  }\n\n  function _calculateClaim(\n    uint _tokenId,\n    IVeTetu _ve,\n    uint _lastTokenTime\n  ) internal view returns (ClaimCalculationResult memory) {\n    uint userEpoch;\n    uint maxUserEpoch = _ve.userPointEpoch(_tokenId);\n    uint _startTime = startTime;\n\n    if (maxUserEpoch == 0) {\n      return ClaimCalculationResult(0, 0, 0, 0, false);\n    }\n\n    uint weekCursor = timeCursorOf[_tokenId];\n\n    if (weekCursor == 0) {\n      userEpoch = findTimestampUserEpoch(_ve, _tokenId, _startTime, maxUserEpoch);\n    } else {\n      userEpoch = userEpochOf[_tokenId];\n    }\n\n    if (userEpoch == 0) userEpoch = 1;\n\n    IVeTetu.Point memory userPoint = _ve.userPointHistory(_tokenId, userEpoch);\n    if (weekCursor == 0) {\n      weekCursor = (userPoint.ts + WEEK - 1) / WEEK * WEEK;\n    }\n    if (weekCursor >= lastTokenTime) {\n      return ClaimCalculationResult(0, 0, 0, 0, false);\n    }\n    if (weekCursor < _startTime) {\n      weekCursor = _startTime;\n    }\n\n    return calculateToDistribute(\n      _tokenId,\n      weekCursor,\n      _lastTokenTime,\n      userPoint,\n      userEpoch,\n      maxUserEpoch,\n      _ve\n    );\n  }\n\n  function calculateToDistribute(\n    uint _tokenId,\n    uint weekCursor,\n    uint _lastTokenTime,\n    IVeTetu.Point memory userPoint,\n    uint userEpoch,\n    uint maxUserEpoch,\n    IVeTetu _ve\n  ) public view returns (ClaimCalculationResult memory) {\n    IVeTetu.Point memory oldUserPoint;\n    uint toDistribute;\n    for (uint i = 0; i < 50; i++) {\n      if (weekCursor >= _lastTokenTime) {\n        break;\n      }\n      if (weekCursor >= userPoint.ts && userEpoch <= maxUserEpoch) {\n        userEpoch += 1;\n        oldUserPoint = userPoint;\n        if (userEpoch > maxUserEpoch) {\n          userPoint = IVeTetu.Point(0, 0, 0, 0);\n        } else {\n          userPoint = _ve.userPointHistory(_tokenId, userEpoch);\n        }\n      } else {\n        int128 dt = int128(int256(weekCursor - oldUserPoint.ts));\n        uint balanceOf = uint(int256(_positiveInt128(oldUserPoint.bias - dt * oldUserPoint.slope)));\n        if (balanceOf == 0 && userEpoch > maxUserEpoch) {\n          break;\n        }\n        toDistribute += balanceOf * tokensPerWeek[weekCursor] / veSupply[weekCursor];\n        weekCursor += WEEK;\n      }\n    }\n    return ClaimCalculationResult(\n      toDistribute,\n      Math.min(maxUserEpoch, userEpoch - 1),\n      weekCursor,\n      maxUserEpoch,\n      true\n    );\n  }\n\n  function _positiveInt128(int128 value) internal pure returns (int128) {\n    return value < 0 ? int128(0) : value;\n  }\n\n  /// @dev Block timestamp rounded to weeks\n  function timestamp() external view returns (uint) {\n    return block.timestamp / WEEK * WEEK;\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == InterfaceIds.I_VE_DISTRIBUTOR || super.supportsInterface(interfaceId);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/ve/VeTetu.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/ReentrancyGuard.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../interfaces/IVeTetu.sol\";\nimport \"../interfaces/IERC721Receiver.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IVoter.sol\";\nimport \"../interfaces/IPlatformVoter.sol\";\nimport \"../interfaces/ISmartVault.sol\";\nimport \"../interfaces/IVeDistributor.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"./VeTetuLib.sol\";\n\n/// @title Voting escrow NFT for multiple underlying tokens.\n///        Based on Curve/Solidly contract.\n/// @author belbix\ncontract VeTetu is ControllableV3, ReentrancyGuard, IVeTetu {\n  using SafeERC20 for IERC20;\n  using Math for uint;\n\n  // Only for internal usage\n  struct DepositInfo {\n    address stakingToken;\n    uint tokenId;\n    uint value;\n    uint unlockTime;\n    uint lockedAmount;\n    uint lockedDerivedAmount;\n    uint lockedEnd;\n    DepositType depositType;\n  }\n\n  // Only for internal usage\n  struct CheckpointInfo {\n    uint tokenId;\n    uint oldDerivedAmount;\n    uint newDerivedAmount;\n    uint oldEnd;\n    uint newEnd;\n    bool isAlwaysMaxLock;\n  }\n\n  enum TimeLockType {\n    UNKNOWN,\n    ADD_TOKEN,\n    WHITELIST_TRANSFER\n  }\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant VE_VERSION = \"1.3.3\";\n  uint internal constant WEEK = 1 weeks;\n  uint internal constant MAX_TIME = 16 weeks;\n  uint public constant MAX_ATTACHMENTS = 1;\n  uint public constant GOV_ACTION_TIME_LOCK = 18 hours;\n\n  string constant public override name = \"veTETU\";\n  string constant public override symbol = \"veTETU\";\n\n  /// @dev ERC165 interface ID of ERC165\n  bytes4 internal constant _ERC165_INTERFACE_ID = 0x01ffc9a7;\n  /// @dev ERC165 interface ID of ERC721\n  bytes4 internal constant _ERC721_INTERFACE_ID = 0x80ac58cd;\n  /// @dev ERC165 interface ID of ERC721Metadata\n  bytes4 internal constant _ERC721_METADATA_INTERFACE_ID = 0x5b5e139f;\n\n  address internal constant _TETU_USDC_BPT = 0xE2f706EF1f7240b803AAe877C9C762644bb808d8;\n  address internal constant _TETU_USDC_BPT_VAULT = 0x6922201f0d25Aba8368e7806642625879B35aB84;\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev Underlying tokens info\n  address[] public override tokens;\n  /// @dev token => weight\n  mapping(address => uint) public tokenWeights;\n  /// @dev token => is allowed for deposits\n  mapping(address => bool) public isValidToken;\n  /// @dev Current count of token\n  uint public tokenId;\n  /// @dev veId => stakingToken => Locked amount\n  mapping(uint => mapping(address => uint)) public override lockedAmounts;\n  /// @dev veId => Amount based on weights aka power\n  mapping(uint => uint) public override lockedDerivedAmount;\n  /// @dev veId => Lock end timestamp\n  mapping(uint => uint) internal _lockedEndReal;\n\n  // --- CHECKPOINTS LOGIC\n\n  /// @dev Epoch counter. Update each week.\n  uint public override epoch;\n  /// @dev epoch -> unsigned point\n  mapping(uint => Point) internal _pointHistory;\n  /// @dev user -> Point[userEpoch]\n  mapping(uint => Point[1000000000]) internal _userPointHistory;\n  /// @dev veId -> Personal epoch counter\n  mapping(uint => uint) public override userPointEpoch;\n  /// @dev time -> signed slope change\n  mapping(uint => int128) public slopeChanges;\n\n  // --- LOCK\n\n  /// @dev veId -> Attachments counter. With positive counter user unable to transfer NFT\n  mapping(uint => uint) public override attachments;\n  /// @dev veId -> votes counter. With votes NFT unable to transfer\n  /// deprecated\n  mapping(uint => uint) public _deprecated_voted;\n\n  // --- STATISTICS\n\n  /// @dev veId -> Block number when last time NFT owner changed\n  mapping(uint => uint) public ownershipChange;\n  /// @dev Mapping from NFT ID to the address that owns it.\n  mapping(uint => address) internal _idToOwner;\n  /// @dev Mapping from NFT ID to approved address.\n  mapping(uint => address) internal _idToApprovals;\n  /// @dev Mapping from owner address to count of his tokens.\n  mapping(address => uint) internal _ownerToNFTokenCount;\n  /// @dev Mapping from owner address to mapping of index to tokenIds\n  mapping(address => mapping(uint => uint)) internal _ownerToNFTokenIdList;\n  /// @dev Mapping from NFT ID to index of owner\n  mapping(uint => uint) public tokenToOwnerIndex;\n  /// @dev Mapping from owner address to mapping of operator addresses.\n  mapping(address => mapping(address => bool)) public ownerToOperators;\n\n  /// @dev Mapping of interface id to bool about whether or not it's supported\n  mapping(bytes4 => bool) internal _supportedInterfaces;\n\n  // --- PERMISSIONS\n\n  /// @dev Whitelisted contracts will be able to transfer NFTs\n  mapping(address => bool) public isWhitelistedTransfer;\n  /// @dev Time-locks for governance actions. Zero means not announced and should not processed.\n  mapping(TimeLockType => uint) public govActionTimeLock;\n  /// @dev underlying token => true if we can stake token to some place, false if paused\n  mapping(address => bool) internal tokenFarmingStatus;\n\n  // --- OTHER\n  mapping(uint => bool) public isAlwaysMaxLock;\n  uint public additionalTotalSupply;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event Deposit(\n    address indexed stakingToken,\n    address indexed provider,\n    uint tokenId,\n    uint value,\n    uint indexed locktime,\n    DepositType depositType,\n    uint ts\n  );\n  event Withdraw(address indexed stakingToken, address indexed provider, uint tokenId, uint value, uint ts);\n  event Merged(address indexed stakingToken, address indexed provider, uint from, uint to);\n  event Split(uint parentTokenId, uint newTokenId, uint percent);\n  event TransferWhitelisted(address value);\n  event StakingTokenAdded(address value, uint weight);\n  event GovActionAnnounced(uint _type, uint timeToExecute);\n  event AlwaysMaxLock(uint tokenId, bool status);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @dev Proxy initialization. Call it after contract deploy.\n  /// @param token_ Underlying ERC20 token\n  /// @param controller_ Central contract of the protocol\n  function init(address token_, uint weight, address controller_) external initializer {\n    __Controllable_init(controller_);\n\n    // the first token should have 18 decimals\n    require(IERC20Metadata(token_).decimals() == uint8(18));\n    _addToken(token_, weight);\n\n    _pointHistory[0].blk = block.number;\n    _pointHistory[0].ts = block.timestamp;\n\n    _supportedInterfaces[_ERC165_INTERFACE_ID] = true;\n    _supportedInterfaces[_ERC721_INTERFACE_ID] = true;\n    _supportedInterfaces[_ERC721_METADATA_INTERFACE_ID] = true;\n\n    // mint-ish\n    emit Transfer(address(0), address(this), 0);\n    // burn-ish\n    emit Transfer(address(this), address(0), 0);\n  }\n\n  // *************************************************************\n  //                        GOVERNANCE ACTIONS\n  // *************************************************************\n\n  function announceAction(TimeLockType _type) external {\n    require(isGovernance(msg.sender), \"FORBIDDEN\");\n    require(govActionTimeLock[_type] == 0 && _type != TimeLockType.UNKNOWN, \"WRONG_INPUT\");\n\n    govActionTimeLock[_type] = block.timestamp + GOV_ACTION_TIME_LOCK;\n    emit GovActionAnnounced(uint(_type), block.timestamp + GOV_ACTION_TIME_LOCK);\n  }\n\n  /// @dev Whitelist address for transfers. Removing from whitelist should be forbidden.\n  function whitelistTransferFor(address value) external {\n    require(isGovernance(msg.sender), \"FORBIDDEN\");\n    require(value != address(0), \"WRONG_INPUT\");\n    uint timeLock = govActionTimeLock[TimeLockType.WHITELIST_TRANSFER];\n    require(timeLock != 0 && timeLock < block.timestamp, \"TIME_LOCK\");\n\n    isWhitelistedTransfer[value] = true;\n    govActionTimeLock[TimeLockType.WHITELIST_TRANSFER] = 0;\n\n    emit TransferWhitelisted(value);\n  }\n\n  function addToken(address token, uint weight) external {\n    require(isGovernance(msg.sender), \"FORBIDDEN\");\n    uint timeLock = govActionTimeLock[TimeLockType.ADD_TOKEN];\n    require(timeLock != 0 && timeLock < block.timestamp, \"TIME_LOCK\");\n\n    _addToken(token, weight);\n    govActionTimeLock[TimeLockType.ADD_TOKEN] = 0;\n  }\n\n  function _addToken(address token, uint weight) internal {\n    require(token != address(0) && weight != 0, \"WRONG_INPUT\");\n    _requireERC20(token);\n\n    uint length = tokens.length;\n    for (uint i; i < length; ++i) {\n      require(token != tokens[i], \"WRONG_INPUT\");\n    }\n\n    tokens.push(token);\n    tokenWeights[token] = weight;\n    isValidToken[token] = true;\n\n    emit StakingTokenAdded(token, weight);\n  }\n\n  function changeTokenFarmingAllowanceStatus(address _token, bool status) external {\n    require(isGovernance(msg.sender), \"FORBIDDEN\");\n    require(tokenFarmingStatus[_token] != status);\n    tokenFarmingStatus[_token] = status;\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  function lockedEnd(uint _tokenId) public view override returns (uint) {\n    if (isAlwaysMaxLock[_tokenId]) {\n      return (block.timestamp + MAX_TIME) / WEEK * WEEK;\n    } else {\n      return _lockedEndReal[_tokenId];\n    }\n  }\n\n  /// @dev Return length of staking tokens.\n  function tokensLength() external view returns (uint) {\n    return tokens.length;\n  }\n\n  /// @dev Current block timestamp\n  function blockTimestamp() external view returns (uint) {\n    return block.timestamp;\n  }\n\n  /// @dev Voter should handle attach/detach and vote actions\n  function voter() public view returns (address) {\n    return IController(controller()).voter();\n  }\n\n  /// @dev Specific voter for control platform attributes.\n  function platformVoter() public view returns (address) {\n    return IController(controller()).platformVoter();\n  }\n\n  /// @dev Interface identification is specified in ERC-165.\n  /// @param _interfaceID Id of the interface\n  function supportsInterface(bytes4 _interfaceID) public view override(ControllableV3, IERC165) returns (bool) {\n    return _supportedInterfaces[_interfaceID]\n    || _interfaceID == InterfaceIds.I_VE_TETU\n      || super.supportsInterface(_interfaceID);\n  }\n\n  /// @dev Returns the number of NFTs owned by `_owner`.\n  ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n  /// @param _owner Address for whom to query the balance.\n  function _balance(address _owner) internal view returns (uint) {\n    return _ownerToNFTokenCount[_owner];\n  }\n\n  /// @dev Returns the number of NFTs owned by `_owner`.\n  ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n  /// @param _owner Address for whom to query the balance.\n  function balanceOf(address _owner) external view override returns (uint) {\n    return _balance(_owner);\n  }\n\n  /// @dev Returns the address of the owner of the NFT.\n  /// @param _tokenId The identifier for an NFT.\n  function ownerOf(uint _tokenId) public view override returns (address) {\n    return _idToOwner[_tokenId];\n  }\n\n  /// @dev Get the approved address for a single NFT.\n  /// @param _tokenId ID of the NFT to query the approval of.\n  function getApproved(uint _tokenId) external view override returns (address) {\n    return _idToApprovals[_tokenId];\n  }\n\n  /// @dev Checks if `_operator` is an approved operator for `_owner`.\n  /// @param _owner The address that owns the NFTs.\n  /// @param _operator The address that acts on behalf of the owner.\n  function isApprovedForAll(address _owner, address _operator) external view override returns (bool) {\n    return (ownerToOperators[_owner])[_operator];\n  }\n\n  /// @dev  Get token by index\n  function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external view returns (uint) {\n    return _ownerToNFTokenIdList[_owner][_tokenIndex];\n  }\n\n  /// @dev Returns whether the given spender can transfer a given token ID\n  /// @param _spender address of the spender to query\n  /// @param _tokenId uint ID of the token to be transferred\n  /// @return bool whether the msg.sender is approved for the given token ID,\n  ///              is an operator of the owner, or is the owner of the token\n  function isApprovedOrOwner(address _spender, uint _tokenId) public view override returns (bool) {\n    address owner = _idToOwner[_tokenId];\n    bool spenderIsOwner = owner == _spender;\n    bool spenderIsApproved = _spender == _idToApprovals[_tokenId];\n    bool spenderIsApprovedForAll = (ownerToOperators[owner])[_spender];\n    return spenderIsOwner || spenderIsApproved || spenderIsApprovedForAll;\n  }\n\n  function balanceOfNFT(uint _tokenId) public view override returns (uint) {\n    // flash NFT protection\n    if (ownershipChange[_tokenId] == block.number) {\n      return 0;\n    }\n    return _balanceOfNFT(_tokenId, block.timestamp);\n  }\n\n  function balanceOfNFTAt(uint _tokenId, uint _t) external view override returns (uint) {\n    return _balanceOfNFT(_tokenId, _t);\n  }\n\n  function totalSupply() external view returns (uint) {\n    return totalSupplyAtT(block.timestamp);\n  }\n\n  function balanceOfAtNFT(uint _tokenId, uint _block) external view returns (uint) {\n    return _balanceOfAtNFT(_tokenId, _block);\n  }\n\n  function userPointHistory(uint _tokenId, uint _loc) external view override returns (Point memory point) {\n    if (isAlwaysMaxLock[_tokenId]) {\n      return Point({\n        bias: int128(int256(lockedDerivedAmount[_tokenId])),\n        slope: 0,\n        ts: (block.timestamp - MAX_TIME) / WEEK * WEEK, // this represent a simulation that we locked MAX TIME ago, need for VeDist\n        blk: block.number\n      });\n    }\n\n    point = _userPointHistory[_tokenId][_loc];\n  }\n\n  function pointHistory(uint _loc) external view override returns (Point memory point) {\n    point = _pointHistory[_loc];\n    // we have a big simplification of the logic at this moment and just return current extra supply at any request epoch\n    point.bias = point.bias + int128(int256(additionalTotalSupply));\n  }\n\n  function isVoted(uint _tokenId) public view override returns (bool) {\n    return IVoter(voter()).votedVaultsLength(_tokenId) != 0\n      || IPlatformVoter(platformVoter()).veVotesLength(_tokenId) != 0;\n  }\n\n  // *************************************************************\n  //                        VOTER ACTIONS\n  // *************************************************************\n\n  /// deprecated - We check votes directly.\n  /// @dev Increment the votes counter.\n  ///      Should be called only once per any amount of votes from 1 voter contract.\n  function voting(uint _tokenId) external pure override {\n//    _onlyVoters();\n\n    // counter reflects only amount of voter contracts\n    // restrictions for votes should be implemented on voter side\n//    voted[_tokenId]++;\n  }\n\n  /// deprecated - We check votes directly.\n  /// @dev Decrement the votes counter. Call only once per voter.\n  function abstain(uint _tokenId) external pure override {\n//    _onlyVoters();\n\n//    voted[_tokenId]--;\n  }\n\n  /// @dev Increment attach counter. Call it for each boosted gauge position.\n  function attachToken(uint _tokenId) external override {\n    // only central voter\n    require(msg.sender == voter(), \"NOT_VOTER\");\n\n    uint count = attachments[_tokenId];\n    require(count < MAX_ATTACHMENTS, \"TOO_MANY_ATTACHMENTS\");\n    attachments[_tokenId] = count + 1;\n  }\n\n  /// @dev Decrement attach counter. Call it for each boosted gauge position.\n  function detachToken(uint _tokenId) external override {\n    // only central voter\n    require(msg.sender == voter(), \"NOT_VOTER\");\n\n    attachments[_tokenId] = attachments[_tokenId] - 1;\n  }\n\n  /// @dev Remove all votes/attachments for given veID.\n  function _detachAll(uint _tokenId, address owner) internal {\n    IVoter(voter()).detachTokenFromAll(_tokenId, owner);\n    IPlatformVoter(platformVoter()).detachTokenFromAll(_tokenId, owner);\n  }\n\n  // *************************************************************\n  //                        NFT LOGIC\n  // *************************************************************\n\n  /// @dev Add a NFT to an index mapping to a given address\n  /// @param _to address of the receiver\n  /// @param _tokenId uint ID Of the token to be added\n  function _addTokenToOwnerList(address _to, uint _tokenId) internal {\n    uint currentCount = _balance(_to);\n\n    _ownerToNFTokenIdList[_to][currentCount] = _tokenId;\n    tokenToOwnerIndex[_tokenId] = currentCount;\n  }\n\n  /// @dev Remove a NFT from an index mapping to a given address\n  /// @param _from address of the sender\n  /// @param _tokenId uint ID Of the token to be removed\n  function _removeTokenFromOwnerList(address _from, uint _tokenId) internal {\n    // Delete\n    uint currentCount = _balance(_from) - 1;\n    uint currentIndex = tokenToOwnerIndex[_tokenId];\n\n    if (currentCount == currentIndex) {\n      // update ownerToNFTokenIdList\n      _ownerToNFTokenIdList[_from][currentCount] = 0;\n      // update tokenToOwnerIndex\n      tokenToOwnerIndex[_tokenId] = 0;\n    } else {\n      uint lastTokenId = _ownerToNFTokenIdList[_from][currentCount];\n\n      // Add\n      // update ownerToNFTokenIdList\n      _ownerToNFTokenIdList[_from][currentIndex] = lastTokenId;\n      // update tokenToOwnerIndex\n      tokenToOwnerIndex[lastTokenId] = currentIndex;\n\n      // Delete\n      // update ownerToNFTokenIdList\n      _ownerToNFTokenIdList[_from][currentCount] = 0;\n      // update tokenToOwnerIndex\n      tokenToOwnerIndex[_tokenId] = 0;\n    }\n  }\n\n  /// @dev Add a NFT to a given address\n  function _addTokenTo(address _to, uint _tokenId) internal {\n    // assume always call on new tokenId or after _removeTokenFrom() call\n    // Change the owner\n    _idToOwner[_tokenId] = _to;\n    // Update owner token index tracking\n    _addTokenToOwnerList(_to, _tokenId);\n    // Change count tracking\n    _ownerToNFTokenCount[_to] += 1;\n  }\n\n  /// @dev Remove a NFT from a given address\n  ///      Throws if `_from` is not the current owner.\n  function _removeTokenFrom(address _from, uint _tokenId) internal {\n    require(_idToOwner[_tokenId] == _from, \"NOT_OWNER\");\n    // Change the owner\n    _idToOwner[_tokenId] = address(0);\n    // Update owner token index tracking\n    _removeTokenFromOwnerList(_from, _tokenId);\n    // Change count tracking\n    _ownerToNFTokenCount[_from] -= 1;\n  }\n\n  /// @dev Execute transfer of a NFT.\n  ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n  ///      address for this NFT. (NOTE: `msg.sender` not allowed in internal function so pass `_sender`.)\n  ///      Throws if `_to` is the zero address.\n  ///      Throws if `_from` is not the current owner.\n  ///      Throws if `_tokenId` is not a valid NFT.\n  function _transferFrom(\n    address _from,\n    address _to,\n    uint _tokenId,\n    address _sender\n  ) internal {\n    require(isApprovedOrOwner(_sender, _tokenId), \"NOT_OWNER\");\n    require(_to != address(0), \"WRONG_INPUT\");\n    // from address will be checked in _removeTokenFrom()\n\n    if (attachments[_tokenId] != 0 || isVoted(_tokenId)) {\n      _detachAll(_tokenId, _from);\n    }\n\n    if (_idToApprovals[_tokenId] != address(0)) {\n      // Reset approvals\n      _idToApprovals[_tokenId] = address(0);\n    }\n    _removeTokenFrom(_from, _tokenId);\n    _addTokenTo(_to, _tokenId);\n    // Set the block of ownership transfer (for Flash NFT protection)\n    ownershipChange[_tokenId] = block.number;\n    // Log the transfer\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /// @dev Transfers forbidden for veTETU\n  function transferFrom(\n    address,\n    address,\n    uint\n  ) external pure override {\n    revert(\"FORBIDDEN\");\n    //    _transferFrom(_from, _to, _tokenId, msg.sender);\n  }\n\n  function _isContract(address account) internal view returns (bool) {\n    // This method relies on extcodesize, which returns 0 for contracts in\n    // construction, since the code is only stored at the end of the\n    // constructor execution.\n    uint size;\n    assembly {\n      size := extcodesize(account)\n    }\n    return size > 0;\n  }\n\n  /// @dev Transfers the ownership of an NFT from one address to another address.\n  ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\n  ///      approved address for this NFT.\n  ///      Throws if `_from` is not the current owner.\n  ///      Throws if `_to` is the zero address.\n  ///      Throws if `_tokenId` is not a valid NFT.\n  ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n  ///      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.\n  /// @param _from The current owner of the NFT.\n  /// @param _to The new owner.\n  /// @param _tokenId The NFT to transfer.\n  /// @param _data Additional data with no specified format, sent in call to `_to`.\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint _tokenId,\n    bytes memory _data\n  ) public override {\n    require(isWhitelistedTransfer[_to] || isWhitelistedTransfer[_from], \"FORBIDDEN\");\n\n    _transferFrom(_from, _to, _tokenId, msg.sender);\n    require(_checkOnERC721Received(_from, _to, _tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n  }\n\n  /// @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n  /// The call is not executed if the target address is not a contract.\n  ///\n  /// @param _from address representing the previous owner of the given token ID\n  /// @param _to target address that will receive the tokens\n  /// @param _tokenId uint256 ID of the token to be transferred\n  /// @param _data bytes optional data to send along with the call\n  /// @return bool whether the call correctly returned the expected magic value\n  ///\n  function _checkOnERC721Received(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  ) private returns (bool) {\n    if (_isContract(_to)) {\n      try IERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) returns (bytes4 retval) {\n        return retval == IERC721Receiver.onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n        } else {\n          /// @solidity memory-safe-assembly\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /// @dev Transfers the ownership of an NFT from one address to another address.\n  ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\n  ///      approved address for this NFT.\n  ///      Throws if `_from` is not the current owner.\n  ///      Throws if `_to` is the zero address.\n  ///      Throws if `_tokenId` is not a valid NFT.\n  ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n  ///      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.\n  /// @param _from The current owner of the NFT.\n  /// @param _to The new owner.\n  /// @param _tokenId The NFT to transfer.\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint _tokenId\n  ) external override {\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /// @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n  ///      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n  ///      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n  ///      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n  /// @param _approved Address to be approved for the given NFT ID.\n  /// @param _tokenId ID of the token to be approved.\n  function approve(address _approved, uint _tokenId) public override {\n    address owner = _idToOwner[_tokenId];\n    // Throws if `_tokenId` is not a valid NFT\n    require(owner != address(0), \"WRONG_INPUT\");\n    // Throws if `_approved` is the current owner\n    require(_approved != owner, \"IDENTICAL_ADDRESS\");\n    // Check requirements\n    bool senderIsOwner = (owner == msg.sender);\n    bool senderIsApprovedForAll = (ownerToOperators[owner])[msg.sender];\n    require(senderIsOwner || senderIsApprovedForAll, \"NOT_OWNER\");\n    // Set the approval\n    _idToApprovals[_tokenId] = _approved;\n    emit Approval(owner, _approved, _tokenId);\n  }\n\n  /// @dev Enables or disables approval for a third party (\"operator\") to manage all of\n  ///      `msg.sender`'s assets. It also emits the ApprovalForAll event.\n  ///      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\n  /// @notice This works even if sender doesn't own any tokens at the time.\n  /// @param _operator Address to add to the set of authorized operators.\n  /// @param _approved True if the operators is approved, false to revoke approval.\n  function setApprovalForAll(address _operator, bool _approved) external override {\n    // Throws if `_operator` is the `msg.sender`\n    require(_operator != msg.sender, \"IDENTICAL_ADDRESS\");\n    ownerToOperators[msg.sender][_operator] = _approved;\n    emit ApprovalForAll(msg.sender, _operator, _approved);\n  }\n\n  /// @dev Function to mint tokens\n  ///      Throws if `_to` is zero address.\n  ///      Throws if `_tokenId` is owned by someone.\n  /// @param _to The address that will receive the minted tokens.\n  /// @param _tokenId The token id to mint.\n  /// @return A boolean that indicates if the operation was successful.\n  function _mint(address _to, uint _tokenId) internal returns (bool) {\n    // Throws if `_to` is zero address\n    require(_to != address(0), \"WRONG_INPUT\");\n    _addTokenTo(_to, _tokenId);\n    require(_checkOnERC721Received(address(0), _to, _tokenId, ''), \"ERC721: transfer to non ERC721Receiver implementer\");\n    emit Transfer(address(0), _to, _tokenId);\n    return true;\n  }\n\n  // *************************************************************\n  //                  DEPOSIT/WITHDRAW LOGIC\n  // *************************************************************\n\n  /// @dev Pull tokens to this contract and try to stake\n  function _pullStakingToken(address _token, address _from, uint amount) internal {\n    IERC20(_token).safeTransferFrom(_from, address(this), amount);\n\n    // try to stake tokens if possible\n    _stakeAvailableTokens(_token);\n  }\n\n  /// @dev Anyone can stake whitelisted tokens if they exist on this contract.\n  function stakeAvailableTokens(address _token) external {\n    _stakeAvailableTokens(_token);\n  }\n\n  /// @dev If allowed, stake given token available balance to suitable place for earn some profit\n  function _stakeAvailableTokens(address _token) internal {\n    if (tokenFarmingStatus[_token]) {\n      if (_token == _TETU_USDC_BPT) {\n        uint balance = IERC20(_token).balanceOf(address(this));\n        if (balance != 0) {\n          IERC20(_token).safeApprove(_TETU_USDC_BPT_VAULT, balance);\n          ISmartVault(_TETU_USDC_BPT_VAULT).depositAndInvest(balance);\n        }\n      }\n    }\n  }\n\n  /// @dev Unstake necessary amount, if possible\n  function _unstakeTokens(address _token, uint amount) internal {\n    uint tokenBalance = IERC20(_token).balanceOf(address(this));\n    if (amount != 0 && amount > tokenBalance) {\n      // withdraw only required amount\n      amount -= tokenBalance;\n      // no need to check whitelisting for withdraw\n      if (_token == _TETU_USDC_BPT) {\n        // add gap value for avoid rounding issues\n        uint shares = amount * 1e18 / ISmartVault(_TETU_USDC_BPT_VAULT).getPricePerFullShare() + 1e18;\n        uint sharesBalance = IERC20(_TETU_USDC_BPT_VAULT).balanceOf(address(this));\n        shares = shares > sharesBalance ? sharesBalance : shares;\n        ISmartVault(_TETU_USDC_BPT_VAULT).withdraw(shares);\n      }\n    }\n  }\n\n  /// @dev Anyone can withdraw all staked tokens if farming status = false\n  function emergencyWithdrawStakedTokens(address _token) external {\n    if (!tokenFarmingStatus[_token]) {\n      if (_token == _TETU_USDC_BPT) {\n        ISmartVault(_TETU_USDC_BPT_VAULT).exit();\n      }\n    }\n  }\n\n  /// @dev Transfer underlying token to recipient, unstake if need required amount\n  function _transferUnderlyingToken(address _token, address recipient, uint amount) internal {\n    _unstakeTokens(_token, amount);\n    IERC20(_token).safeTransfer(recipient, amount);\n  }\n\n  /// @notice Deposit and lock tokens for a user\n  function _depositFor(DepositInfo memory info) internal {\n\n    uint newLockedDerivedAmount = info.lockedDerivedAmount;\n    if (info.value != 0) {\n\n      // calculate new amounts\n      uint newAmount = info.lockedAmount + info.value;\n      newLockedDerivedAmount = VeTetuLib.calculateDerivedAmount(\n        info.lockedAmount,\n        info.lockedDerivedAmount,\n        newAmount,\n        tokenWeights[info.stakingToken],\n        IERC20Metadata(info.stakingToken).decimals()\n      );\n      // update chain info\n      lockedAmounts[info.tokenId][info.stakingToken] = newAmount;\n      _updateLockedDerivedAmount(info.tokenId, newLockedDerivedAmount);\n    }\n\n    // Adding to existing lock, or if a lock is expired - creating a new one\n    uint newLockedEnd = info.lockedEnd;\n    if (info.unlockTime != 0) {\n      _lockedEndReal[info.tokenId] = info.unlockTime;\n      newLockedEnd = info.unlockTime;\n    }\n\n    // update checkpoint\n    _checkpoint(CheckpointInfo(\n      info.tokenId,\n      info.lockedDerivedAmount,\n      newLockedDerivedAmount,\n      info.lockedEnd,\n      newLockedEnd,\n      isAlwaysMaxLock[info.tokenId]\n    ));\n\n    // move tokens to this contract, if necessary\n    address from = msg.sender;\n    if (info.value != 0 && info.depositType != DepositType.MERGE_TYPE) {\n      _pullStakingToken(info.stakingToken, from, info.value);\n    }\n\n    emit Deposit(info.stakingToken, from, info.tokenId, info.value, newLockedEnd, info.depositType, block.timestamp);\n  }\n\n  function _lockInfo(address stakingToken, uint veId) internal view returns (\n    uint _lockedAmount,\n    uint _lockedDerivedAmount,\n    uint _lockedEnd\n  ) {\n    _lockedAmount = lockedAmounts[veId][stakingToken];\n    _lockedDerivedAmount = lockedDerivedAmount[veId];\n    _lockedEnd = lockedEnd(veId);\n  }\n\n  function _incrementTokenIdAndGet() internal returns (uint){\n    uint current = tokenId;\n    tokenId = current + 1;\n    return current + 1;\n  }\n\n  /// @dev Setup always max lock. If true given tokenId will be always counted with max possible lock and can not be withdrawn.\n  ///      When deactivated setup a new counter with max lock duration and use all common logic.\n  function setAlwaysMaxLock(uint _tokenId, bool status) external {\n    require(isApprovedOrOwner(msg.sender, _tokenId), \"NOT_OWNER\");\n    require(status != isAlwaysMaxLock[_tokenId], \"WRONG_INPUT\");\n\n    // additional protection against wrong calculation inside VeDist for keep invariant with balances.\n    require(IVeDistributor(IController(controller()).veDistributor()).claimable(_tokenId) == 0, 'CLAIM_REWARDS');\n\n    _setAlwaysMaxLock(_tokenId, status);\n  }\n\n  function _setAlwaysMaxLock(uint _tokenId, bool status) internal {\n\n    // need to setup first, it will be checked later\n    isAlwaysMaxLock[_tokenId] = status;\n\n    uint _derivedAmount = lockedDerivedAmount[_tokenId];\n    uint maxLockDuration = (block.timestamp + MAX_TIME) / WEEK * WEEK;\n\n    // the idea is exclude nft from checkpoint calculations when max lock activated and count the balance as is\n    if (status) {\n      // need to increase additional total supply for properly calculation\n      additionalTotalSupply += _derivedAmount;\n\n      // set checkpoints to zero\n      _checkpoint(CheckpointInfo(\n        _tokenId,\n        _derivedAmount,\n        0,\n        _lockedEndReal[_tokenId],\n        0,\n        false // need to use false for this fake update\n      ));\n    } else {\n      // remove from additional supply\n      require(additionalTotalSupply >= _derivedAmount, \"WRONG_SUPPLY\");\n      additionalTotalSupply -= _derivedAmount;\n      // if we disable need to set real lock end to max value\n      _lockedEndReal[_tokenId] = maxLockDuration;\n      // and activate real checkpoints + total supply\n      _checkpoint(CheckpointInfo(\n        _tokenId,\n        0, // it was setup to zero when we set always max lock\n        _derivedAmount,\n        maxLockDuration,\n        maxLockDuration,\n        false\n      ));\n    }\n\n    emit AlwaysMaxLock(_tokenId, status);\n  }\n\n  function _updateLockedDerivedAmount(uint _tokenId, uint amount) internal {\n    uint cur = lockedDerivedAmount[_tokenId];\n    if (cur == amount) {\n      // if did not change do nothing\n      return;\n    }\n\n    if (isAlwaysMaxLock[_tokenId]) {\n      if (cur > amount) {\n        additionalTotalSupply -= (cur - amount);\n      } else if (cur < amount) {\n        additionalTotalSupply += amount - cur;\n      }\n    }\n\n    lockedDerivedAmount[_tokenId] = amount;\n  }\n\n  /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\n  /// @param _token Token for deposit. Should be whitelisted in this contract.\n  /// @param _value Amount to deposit\n  /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n  /// @param _to Address to deposit\n  function _createLock(address _token, uint _value, uint _lockDuration, address _to) internal returns (uint) {\n    require(_value > 0, \"WRONG_INPUT\");\n    // Lock time is rounded down to weeks\n    uint unlockTime = (block.timestamp + _lockDuration) / WEEK * WEEK;\n    require(unlockTime > block.timestamp, \"LOW_LOCK_PERIOD\");\n    require(unlockTime <= block.timestamp + MAX_TIME, \"HIGH_LOCK_PERIOD\");\n    require(isValidToken[_token], \"INVALID_TOKEN\");\n\n    uint _tokenId = _incrementTokenIdAndGet();\n    _mint(_to, _tokenId);\n\n    _depositFor(DepositInfo({\n      stakingToken: _token,\n      tokenId: _tokenId,\n      value: _value,\n      unlockTime: unlockTime,\n      lockedAmount: 0,\n      lockedDerivedAmount: 0,\n      lockedEnd: 0,\n      depositType: DepositType.CREATE_LOCK_TYPE\n    }));\n    return _tokenId;\n  }\n\n  /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\n  /// @param _token Token for deposit. Should be whitelisted in this contract.\n  /// @param _value Amount to deposit\n  /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n  /// @param _to Address to deposit\n  function createLockFor(address _token, uint _value, uint _lockDuration, address _to)\n  external nonReentrant override returns (uint) {\n    return _createLock(_token, _value, _lockDuration, _to);\n  }\n\n  /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`\n  /// @param _value Amount to deposit\n  /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n  function createLock(address _token, uint _value, uint _lockDuration) external nonReentrant returns (uint) {\n    return _createLock(_token, _value, _lockDuration, msg.sender);\n  }\n\n  /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\n  /// @dev Anyone (even a smart contract) can deposit for someone else, but\n  ///      cannot extend their locktime and deposit for a brand new user\n  /// @param _token Token for deposit. Should be whitelisted in this contract.\n  /// @param _tokenId ve token ID\n  /// @param _value Amount of tokens to deposit and add to the lock\n  function increaseAmount(address _token, uint _tokenId, uint _value) external nonReentrant override {\n    require(_value > 0, \"WRONG_INPUT\");\n    (uint _lockedAmount, uint _lockedDerivedAmount, uint _lockedEnd) = _lockInfo(_token, _tokenId);\n\n    require(_lockedDerivedAmount > 0, \"NFT_WITHOUT_POWER\");\n    require(_lockedEnd > block.timestamp, \"EXPIRED\");\n    require(isValidToken[_token], \"INVALID_TOKEN\");\n\n    _depositFor(DepositInfo({\n      stakingToken: _token,\n      tokenId: _tokenId,\n      value: _value,\n      unlockTime: 0,\n      lockedAmount: _lockedAmount,\n      lockedDerivedAmount: _lockedDerivedAmount,\n      lockedEnd: _lockedEnd,\n      depositType: DepositType.INCREASE_LOCK_AMOUNT\n    }));\n  }\n\n  /// @notice Extend the unlock time for `_tokenId`\n  /// @param _tokenId ve token ID\n  /// @param _lockDuration New number of seconds until tokens unlock\n  function increaseUnlockTime(uint _tokenId, uint _lockDuration) external nonReentrant returns (\n    uint power,\n    uint unlockDate\n  )  {\n    uint _lockedDerivedAmount = lockedDerivedAmount[_tokenId];\n    uint _lockedEnd = _lockedEndReal[_tokenId];\n    // Lock time is rounded down to weeks\n    uint unlockTime = (block.timestamp + _lockDuration) / WEEK * WEEK;\n    require(!isAlwaysMaxLock[_tokenId], \"ALWAYS_MAX_LOCK\");\n    require(_lockedDerivedAmount > 0, \"NFT_WITHOUT_POWER\");\n    require(_lockedEnd > block.timestamp, \"EXPIRED\");\n    require(unlockTime > _lockedEnd, \"LOW_UNLOCK_TIME\");\n    require(unlockTime <= block.timestamp + MAX_TIME, \"HIGH_LOCK_PERIOD\");\n    require(isApprovedOrOwner(msg.sender, _tokenId), \"NOT_OWNER\");\n\n    _depositFor(DepositInfo({\n      stakingToken: address(0),\n      tokenId: _tokenId,\n      value: 0,\n      unlockTime: unlockTime,\n      lockedAmount: 0,\n      lockedDerivedAmount: _lockedDerivedAmount,\n      lockedEnd: _lockedEnd,\n      depositType: DepositType.INCREASE_UNLOCK_TIME\n    }));\n\n    power = balanceOfNFT(_tokenId);\n    unlockDate = _lockedEndReal[_tokenId];\n  }\n\n  /// @dev Merge two NFTs union their balances and keep the biggest lock time.\n  function merge(uint _from, uint _to) external nonReentrant {\n    require(attachments[_from] == 0 && !isVoted(_from), \"ATTACHED\");\n    require(_from != _to, \"IDENTICAL_ADDRESS\");\n    require(!isAlwaysMaxLock[_from] && !isAlwaysMaxLock[_to], \"ALWAYS_MAX_LOCK\");\n    require(isApprovedOrOwner(msg.sender, _from) && isApprovedOrOwner(msg.sender, _to), \"NOT_OWNER\");\n\n    uint lockedEndFrom = lockedEnd(_from);\n    uint lockedEndTo = lockedEnd(_to);\n    require(lockedEndFrom > block.timestamp && lockedEndTo > block.timestamp, \"EXPIRED\");\n    uint end = lockedEndFrom >= lockedEndTo ? lockedEndFrom : lockedEndTo;\n    uint oldDerivedAmount = lockedDerivedAmount[_from];\n\n    uint length = tokens.length;\n    // we should use the old one for properly calculate checkpoint for the new ve\n    uint newLockedEndTo = lockedEndTo;\n    for (uint i; i < length; i++) {\n      address stakingToken = tokens[i];\n      uint _lockedAmountFrom = lockedAmounts[_from][stakingToken];\n      if (_lockedAmountFrom == 0) {\n        continue;\n      }\n      lockedAmounts[_from][stakingToken] = 0;\n\n      _depositFor(DepositInfo({\n        stakingToken: stakingToken,\n        tokenId: _to,\n        value: _lockedAmountFrom,\n        unlockTime: end,\n        lockedAmount: lockedAmounts[_to][stakingToken],\n        lockedDerivedAmount: lockedDerivedAmount[_to],\n        lockedEnd: newLockedEndTo,\n        depositType: DepositType.MERGE_TYPE\n      }));\n\n      // set new lock time to the current end lock\n      newLockedEndTo = end;\n\n      emit Merged(stakingToken, msg.sender, _from, _to);\n    }\n\n    _updateLockedDerivedAmount(_from, 0);\n    _lockedEndReal[_from] = 0;\n\n    // update checkpoint\n    _checkpoint(CheckpointInfo(\n      _from,\n      oldDerivedAmount,\n      0,\n      lockedEndFrom,\n      lockedEndFrom,\n      isAlwaysMaxLock[_from]\n    ));\n\n    _burn(_from);\n  }\n\n  /// @dev Split given veNFT. A new NFT will have a given percent of underlying tokens.\n  /// @param _tokenId ve token ID\n  /// @param percent percent of underlying tokens for new NFT with denominator 1e18 (1-(100e18-1)).\n  function split(uint _tokenId, uint percent) external nonReentrant {\n    require(!isAlwaysMaxLock[_tokenId], \"ALWAYS_MAX_LOCK\");\n    require(attachments[_tokenId] == 0 && !isVoted(_tokenId), \"ATTACHED\");\n    require(isApprovedOrOwner(msg.sender, _tokenId), \"NOT_OWNER\");\n    require(percent != 0 && percent < 100e18, \"WRONG_INPUT\");\n\n    uint _lockedDerivedAmount = lockedDerivedAmount[_tokenId];\n    uint oldLockedDerivedAmount = _lockedDerivedAmount;\n    uint _lockedEnd = lockedEnd(_tokenId);\n\n    require(_lockedEnd > block.timestamp, \"EXPIRED\");\n\n    // crete new NFT\n    uint _newTokenId = _incrementTokenIdAndGet();\n    _mint(msg.sender, _newTokenId);\n\n    // migrate percent of locked tokens to the new NFT\n    uint length = tokens.length;\n    for (uint i; i < length; ++i) {\n      address stakingToken = tokens[i];\n      uint _lockedAmount = lockedAmounts[_tokenId][stakingToken];\n      if (_lockedAmount == 0) {\n        continue;\n      }\n      uint amountForNewNFT = _lockedAmount * percent / 100e18;\n      require(amountForNewNFT != 0, \"LOW_PERCENT\");\n\n      uint newLockedDerivedAmount = VeTetuLib.calculateDerivedAmount(\n        _lockedAmount,\n        _lockedDerivedAmount,\n        _lockedAmount - amountForNewNFT,\n        tokenWeights[stakingToken],\n        IERC20Metadata(stakingToken).decimals()\n      );\n\n      _lockedDerivedAmount = newLockedDerivedAmount;\n\n      lockedAmounts[_tokenId][stakingToken] = _lockedAmount - amountForNewNFT;\n\n      // increase values for new NFT\n      _depositFor(DepositInfo({\n        stakingToken: stakingToken,\n        tokenId: _newTokenId,\n        value: amountForNewNFT,\n        unlockTime: _lockedEnd,\n        lockedAmount: 0,\n        lockedDerivedAmount: lockedDerivedAmount[_newTokenId],\n        lockedEnd: _lockedEnd,\n        depositType: DepositType.MERGE_TYPE\n      }));\n    }\n\n    _updateLockedDerivedAmount(_tokenId, _lockedDerivedAmount);\n\n    // update checkpoint\n    _checkpoint(CheckpointInfo(\n      _tokenId,\n      oldLockedDerivedAmount,\n      _lockedDerivedAmount,\n      _lockedEnd,\n      _lockedEnd,\n      isAlwaysMaxLock[_tokenId]\n    ));\n\n    emit Split(_tokenId, _newTokenId, percent);\n  }\n\n  /// @notice Withdraw all staking tokens for `_tokenId`\n  /// @dev Only possible if the lock has expired\n  function withdrawAll(uint _tokenId) external {\n    uint length = tokens.length;\n    for (uint i; i < length; ++i) {\n      address token = tokens[i];\n      if (lockedAmounts[_tokenId][token] != 0) {\n        withdraw(token, _tokenId);\n      }\n    }\n  }\n\n  /// @notice Withdraw given staking token for `_tokenId`\n  /// @dev Only possible if the lock has expired\n  function withdraw(address stakingToken, uint _tokenId) public nonReentrant {\n    require(isApprovedOrOwner(msg.sender, _tokenId), \"NOT_OWNER\");\n    require(attachments[_tokenId] == 0 && !isVoted(_tokenId), \"ATTACHED\");\n\n    (uint oldLockedAmount, uint oldLockedDerivedAmount, uint oldLockedEnd) =\n            _lockInfo(stakingToken, _tokenId);\n    require(block.timestamp >= oldLockedEnd, \"NOT_EXPIRED\");\n    require(oldLockedAmount > 0, \"ZERO_LOCKED\");\n    require(!isAlwaysMaxLock[_tokenId], \"ALWAYS_MAX_LOCK\");\n\n\n    uint newLockedDerivedAmount = VeTetuLib.calculateDerivedAmount(\n      oldLockedAmount,\n      oldLockedDerivedAmount,\n      0,\n      tokenWeights[stakingToken],\n      IERC20Metadata(stakingToken).decimals()\n    );\n\n    // if no tokens set lock to zero\n    uint newLockEnd = oldLockedEnd;\n    if (newLockedDerivedAmount == 0) {\n      _lockedEndReal[_tokenId] = 0;\n      newLockEnd = 0;\n    }\n\n    // update derived amount\n    _updateLockedDerivedAmount(_tokenId, newLockedDerivedAmount);\n\n    // set locked amount to zero, we will withdraw all\n    lockedAmounts[_tokenId][stakingToken] = 0;\n\n    // update checkpoint\n    _checkpoint(CheckpointInfo(\n      _tokenId,\n      oldLockedDerivedAmount,\n      newLockedDerivedAmount,\n      oldLockedEnd,\n      newLockEnd,\n      false // already checked and can not be true\n    ));\n\n    // Burn the NFT\n    if (newLockedDerivedAmount == 0) {\n      _burn(_tokenId);\n    }\n\n    _transferUnderlyingToken(stakingToken, msg.sender, oldLockedAmount);\n\n    emit Withdraw(stakingToken, msg.sender, _tokenId, oldLockedAmount, block.timestamp);\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////\n  //                             Attention!\n  // The following ERC20/minime-compatible methods are not real balanceOf and supply!\n  // They measure the weights for the purpose of voting, so they don't represent\n  // real coins.\n  /////////////////////////////////////////////////////////////////////////////////////\n\n  /// @notice Get the voting power for `_tokenId` at given timestamp\n  /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\n  /// @param _tokenId NFT for lock\n  /// @param ts Epoch time to return voting power at\n  /// @return User voting power\n  function _balanceOfNFT(uint _tokenId, uint ts) internal view returns (uint) {\n    // with max lock return balance as is\n    if (isAlwaysMaxLock[_tokenId]) {\n      return lockedDerivedAmount[_tokenId];\n    }\n\n    uint _epoch = userPointEpoch[_tokenId];\n    if (_epoch == 0) {\n      return 0;\n    } else {\n      // Binary search\n      uint _min = 0;\n      uint _max = _epoch;\n      for (uint i = 0; i < 128; ++i) {\n        // Will be always enough for 128-bit numbers\n        if (_min >= _max) {\n          break;\n        }\n        uint _mid = (_min + _max + 1) / 2;\n        if (_userPointHistory[_tokenId][_mid].ts <= ts) {\n          _min = _mid;\n        } else {\n          _max = _mid - 1;\n        }\n      }\n      IVeTetu.Point memory lastPoint = _userPointHistory[_tokenId][_min];\n\n      if (lastPoint.ts > ts) {\n        return 0;\n      }\n\n      // calculate power at concrete point of time, it can be higher on past and lower in future\n      lastPoint.bias -= lastPoint.slope * int128(int256(ts) - int256(lastPoint.ts));\n      // case if lastPoint.bias > than real locked amount means requested timestamp early than creation time\n      if (lastPoint.bias < 0 || uint(int256(lastPoint.bias)) > lockedDerivedAmount[_tokenId]) {\n        return 0;\n      }\n      return uint(int256(lastPoint.bias));\n    }\n  }\n\n  /// @dev Returns current token URI metadata\n  /// @param _tokenId Token ID to fetch URI for.\n  function tokenURI(uint _tokenId) external view override returns (string memory) {\n    require(_idToOwner[_tokenId] != address(0), \"TOKEN_NOT_EXIST\");\n\n    uint _lockedEnd = lockedEnd(_tokenId);\n    return\n      VeTetuLib.tokenURI(\n      _tokenId,\n      uint(int256(lockedDerivedAmount[_tokenId])),\n      block.timestamp < _lockedEnd ? _lockedEnd - block.timestamp : 0,\n      _balanceOfNFT(_tokenId, block.timestamp)\n    );\n  }\n\n  /// @notice Measure voting power of `_tokenId` at block height `_block`\n  /// @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\n  /// @param _tokenId User's wallet NFT\n  /// @param _block Block to calculate the voting power at\n  /// @return Voting power\n  function _balanceOfAtNFT(uint _tokenId, uint _block) internal view returns (uint) {\n    // for always max lock just return full derived amount\n    if (isAlwaysMaxLock[_tokenId]) {\n      return lockedDerivedAmount[_tokenId];\n    }\n\n    return VeTetuLib.balanceOfAtNFT(\n      _tokenId,\n      _block,\n      epoch,\n      lockedDerivedAmount[_tokenId],\n      userPointEpoch,\n      _userPointHistory,\n      _pointHistory\n    );\n  }\n\n  /// @notice Calculate total voting power\n  /// @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\n  /// @return Total voting power\n  function totalSupplyAtT(uint t) public view override returns (uint) {\n    Point memory lastPoint = _pointHistory[epoch];\n    return VeTetuLib.supplyAt(lastPoint, t, slopeChanges) + additionalTotalSupply;\n  }\n\n  /// @notice Calculate total voting power at some point in the past\n  /// @param _block Block to calculate the total voting power at\n  /// @return Total voting power at `_block`\n  function totalSupplyAt(uint _block) external view override returns (uint) {\n    return VeTetuLib.totalSupplyAt(\n      _block,\n      epoch,\n      _pointHistory,\n      slopeChanges\n    ) + additionalTotalSupply;\n  }\n\n  /// @notice Record global data to checkpoint\n  function checkpoint() external override {\n    _checkpoint(CheckpointInfo(0, 0, 0, 0, 0, false));\n  }\n\n  /// @notice Record global and per-user data to checkpoint\n  function _checkpoint(CheckpointInfo memory info) internal {\n\n    // we do not need checkpoints for always max lock\n    if (info.isAlwaysMaxLock) {\n      return;\n    }\n\n    uint _epoch = epoch;\n    uint newEpoch = VeTetuLib.checkpoint(\n      info.tokenId,\n      info.oldDerivedAmount,\n      info.newDerivedAmount,\n      info.oldEnd,\n      info.newEnd,\n      _epoch,\n      slopeChanges,\n      userPointEpoch,\n      _userPointHistory,\n      _pointHistory\n    );\n\n    if (newEpoch != 0 && newEpoch != _epoch) {\n      epoch = newEpoch;\n    }\n  }\n\n  function _burn(uint _tokenId) internal {\n    address owner = ownerOf(_tokenId);\n    // Clear approval\n    approve(address(0), _tokenId);\n    // Remove token\n    _removeTokenFrom(owner, _tokenId);\n    emit Transfer(owner, address(0), _tokenId);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-contracts-v2/contracts/ve/VeTetuLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/IVeTetu.sol\";\nimport \"../lib/Base64.sol\";\nimport \"./../lib/StringLib.sol\";\n\n/// @title Library with additional ve functions\n/// @author belbix\nlibrary VeTetuLib {\n  using Math for uint;\n\n  uint internal constant WEEK = 1 weeks;\n  uint internal constant MULTIPLIER = 1 ether;\n  int128 internal constant I_MAX_TIME = 16 weeks;\n  uint internal constant WEIGHT_DENOMINATOR = 100e18;\n\n  // Only for internal usage\n  struct CheckpointInfo {\n    uint tokenId;\n    uint oldDerivedAmount;\n    uint newDerivedAmount;\n    uint oldEnd;\n    uint newEnd;\n    uint epoch;\n    IVeTetu.Point uOld;\n    IVeTetu.Point uNew;\n    int128 oldDSlope;\n    int128 newDSlope;\n  }\n\n  ////////////////////////////////////////////////////\n  //  MAIN LOGIC\n  ////////////////////////////////////////////////////\n\n  function calculateDerivedAmount(\n    uint currentAmount,\n    uint oldDerivedAmount,\n    uint newAmount,\n    uint weight,\n    uint8 decimals\n  ) internal pure returns (uint) {\n    // subtract current derived balance\n    // rounded to UP for subtracting closer to 0 value\n    if (oldDerivedAmount != 0 && currentAmount != 0) {\n      currentAmount = currentAmount.mulDiv(1e18, 10 ** decimals, Math.Rounding.Up);\n      uint currentDerivedAmount = currentAmount.mulDiv(weight, WEIGHT_DENOMINATOR, Math.Rounding.Up);\n      if (oldDerivedAmount > currentDerivedAmount) {\n        oldDerivedAmount -= currentDerivedAmount;\n      } else {\n        // in case of wrong rounding better to set to zero than revert\n        oldDerivedAmount = 0;\n      }\n    }\n\n    // recalculate derived amount with new amount\n    // rounded to DOWN\n    // normalize decimals to 18\n    newAmount = newAmount.mulDiv(1e18, 10 ** decimals, Math.Rounding.Down);\n    // calculate the final amount based on the weight\n    newAmount = newAmount.mulDiv(weight, WEIGHT_DENOMINATOR, Math.Rounding.Down);\n    return oldDerivedAmount + newAmount;\n  }\n\n  /// @notice Binary search to estimate timestamp for block number\n  /// @param _block Block to find\n  /// @param maxEpoch Don't go beyond this epoch\n  /// @return Approximate timestamp for block\n  function findBlockEpoch(uint _block, uint maxEpoch, mapping(uint => IVeTetu.Point) storage _pointHistory) public view returns (uint) {\n    // Binary search\n    uint _min = 0;\n    uint _max = maxEpoch;\n    for (uint i = 0; i < 128; ++i) {\n      // Will be always enough for 128-bit numbers\n      if (_min >= _max) {\n        break;\n      }\n      uint _mid = (_min + _max + 1) / 2;\n      if (_pointHistory[_mid].blk <= _block) {\n        _min = _mid;\n      } else {\n        _max = _mid - 1;\n      }\n    }\n    return _min;\n  }\n\n  /// @notice Measure voting power of `_tokenId` at block height `_block`\n  /// @return resultBalance Voting power\n  function balanceOfAtNFT(\n    uint _tokenId,\n    uint _block,\n    uint maxEpoch,\n    uint lockedDerivedAmount,\n    mapping(uint => uint) storage userPointEpoch,\n    mapping(uint => IVeTetu.Point[1000000000]) storage _userPointHistory,\n    mapping(uint => IVeTetu.Point) storage _pointHistory\n  ) external view returns (uint resultBalance) {\n\n    // Binary search closest user point\n    uint _min = 0;\n    {\n      uint _max = userPointEpoch[_tokenId];\n      for (uint i = 0; i < 128; ++i) {\n        // Will be always enough for 128-bit numbers\n        if (_min >= _max) {\n          break;\n        }\n        uint _mid = (_min + _max + 1) / 2;\n        if (_userPointHistory[_tokenId][_mid].blk <= _block) {\n          _min = _mid;\n        } else {\n          _max = _mid - 1;\n        }\n      }\n    }\n\n    IVeTetu.Point memory uPoint = _userPointHistory[_tokenId][_min];\n\n    // nft does not exist at this block\n    if (uPoint.blk > _block) {\n      return 0;\n    }\n\n    // need to calculate timestamp for the given block\n    uint blockTime;\n    if (_block <= block.number) {\n      uint _epoch = findBlockEpoch(_block, maxEpoch, _pointHistory);\n      IVeTetu.Point memory point0 = _pointHistory[_epoch];\n      uint dBlock = 0;\n      uint dt = 0;\n      if (_epoch < maxEpoch) {\n        IVeTetu.Point memory point1 = _pointHistory[_epoch + 1];\n        dBlock = point1.blk - point0.blk;\n        dt = point1.ts - point0.ts;\n      } else {\n        dBlock = block.number - point0.blk;\n        dt = block.timestamp - point0.ts;\n      }\n      blockTime = point0.ts;\n      if (dBlock != 0 && _block > point0.blk) {\n        blockTime += (dt * (_block - point0.blk)) / dBlock;\n      }\n    } else {\n      // we can not calculate estimation if no checkpoints\n      if (maxEpoch == 0) {\n        return 0;\n      }\n      // for future blocks will use a simple estimation\n      IVeTetu.Point memory point0 = _pointHistory[maxEpoch - 1];\n      uint tsPerBlock18 = (block.timestamp - point0.ts) * 1e18 / (block.number - point0.blk);\n      blockTime = block.timestamp + tsPerBlock18 * (_block - block.number) / 1e18;\n    }\n\n    uPoint.bias -= uPoint.slope * int128(int256(blockTime - uPoint.ts));\n\n    resultBalance = uint(uint128(_positiveInt128(uPoint.bias)));\n\n    // make sure we do not return more than nft has\n    if (resultBalance > lockedDerivedAmount) {\n      return 0;\n    }\n  }\n\n  /// @notice Calculate total voting power at some point in the past\n  /// @param point The point (bias/slope) to start search from\n  /// @param t Time to calculate the total voting power at\n  /// @return Total voting power at that time\n  function supplyAt(IVeTetu.Point memory point, uint t, mapping(uint => int128) storage slopeChanges) public view returns (uint) {\n    // this function will return positive value even for block when contract does not exist\n    // for reduce gas cost we assume that it will not be used in such form\n\n    IVeTetu.Point memory lastPoint = point;\n    uint ti = (lastPoint.ts / WEEK) * WEEK;\n    for (uint i = 0; i < 255; ++i) {\n      ti += WEEK;\n      int128 dSlope = 0;\n      if (ti > t) {\n        ti = t;\n      } else {\n        dSlope = slopeChanges[ti];\n      }\n      lastPoint.bias -= lastPoint.slope * int128(int256(ti) - int256(lastPoint.ts));\n      if (ti == t) {\n        break;\n      }\n      lastPoint.slope += dSlope;\n      lastPoint.ts = ti;\n    }\n    return uint(uint128(_positiveInt128(lastPoint.bias)));\n  }\n\n  /// @notice Calculate total voting power at some point in the past\n  /// @param _block Block to calculate the total voting power at\n  /// @return Total voting power at `_block`\n  function totalSupplyAt(\n    uint _block,\n    uint _epoch,\n    mapping(uint => IVeTetu.Point) storage _pointHistory,\n    mapping(uint => int128) storage slopeChanges\n  ) external view returns (uint) {\n    require(_block <= block.number, \"WRONG_INPUT\");\n\n    uint targetEpoch = findBlockEpoch(_block, _epoch, _pointHistory);\n\n    IVeTetu.Point memory point = _pointHistory[targetEpoch];\n    // it is possible only for a block before the launch\n    // return 0 as more clear answer than revert\n    if (point.blk > _block) {\n      return 0;\n    }\n    uint dt = 0;\n    if (targetEpoch < _epoch) {\n      IVeTetu.Point memory pointNext = _pointHistory[targetEpoch + 1];\n      // next point block can not be the same or lower\n      dt = ((_block - point.blk) * (pointNext.ts - point.ts)) / (pointNext.blk - point.blk);\n    } else {\n      if (point.blk != block.number) {\n        dt = ((_block - point.blk) * (block.timestamp - point.ts)) / (block.number - point.blk);\n      }\n    }\n    // Now dt contains info on how far are we beyond point\n    return supplyAt(point, point.ts + dt, slopeChanges);\n  }\n\n  /// @notice Record global and per-user data to checkpoint\n  function checkpoint(\n    uint tokenId,\n    uint oldDerivedAmount,\n    uint newDerivedAmount,\n    uint oldEnd,\n    uint newEnd,\n    uint epoch,\n    mapping(uint => int128) storage slopeChanges,\n    mapping(uint => uint) storage userPointEpoch,\n    mapping(uint => IVeTetu.Point[1000000000]) storage _userPointHistory,\n    mapping(uint => IVeTetu.Point) storage _pointHistory\n  ) external returns (uint newEpoch) {\n    IVeTetu.Point memory uOld;\n    IVeTetu.Point memory uNew;\n    return _checkpoint(\n      CheckpointInfo({\n        tokenId: tokenId,\n        oldDerivedAmount: oldDerivedAmount,\n        newDerivedAmount: newDerivedAmount,\n        oldEnd: oldEnd,\n        newEnd: newEnd,\n        epoch: epoch,\n        uOld: uOld,\n        uNew: uNew,\n        oldDSlope: 0,\n        newDSlope: 0\n      }),\n      slopeChanges,\n      userPointEpoch,\n      _userPointHistory,\n      _pointHistory\n    );\n  }\n\n  function _checkpoint(\n    CheckpointInfo memory info,\n    mapping(uint => int128) storage slopeChanges,\n    mapping(uint => uint) storage userPointEpoch,\n    mapping(uint => IVeTetu.Point[1000000000]) storage _userPointHistory,\n    mapping(uint => IVeTetu.Point) storage _pointHistory\n  ) internal returns (uint newEpoch) {\n\n    if (info.tokenId != 0) {\n      // Calculate slopes and biases\n      // Kept at zero when they have to\n      if (info.oldEnd > block.timestamp && info.oldDerivedAmount > 0) {\n        info.uOld.slope = int128(uint128(info.oldDerivedAmount)) / I_MAX_TIME;\n        info.uOld.bias = info.uOld.slope * int128(int256(info.oldEnd - block.timestamp));\n      }\n      if (info.newEnd > block.timestamp && info.newDerivedAmount > 0) {\n        info.uNew.slope = int128(uint128(info.newDerivedAmount)) / I_MAX_TIME;\n        info.uNew.bias = info.uNew.slope * int128(int256(info.newEnd - block.timestamp));\n      }\n\n      // Read values of scheduled changes in the slope\n      // oldLocked.end can be in the past and in the future\n      // newLocked.end can ONLY by in the FUTURE unless everything expired: than zeros\n      info.oldDSlope = slopeChanges[info.oldEnd];\n      if (info.newEnd != 0) {\n        if (info.newEnd == info.oldEnd) {\n          info.newDSlope = info.oldDSlope;\n        } else {\n          info.newDSlope = slopeChanges[info.newEnd];\n        }\n      }\n    }\n\n    IVeTetu.Point memory lastPoint = IVeTetu.Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\n    if (info.epoch > 0) {\n      lastPoint = _pointHistory[info.epoch];\n    }\n    uint lastCheckpoint = lastPoint.ts;\n    // initialLastPoint is used for extrapolation to calculate block number\n    // (approximately, for *At methods) and save them\n    // as we cannot figure that out exactly from inside the contract\n    IVeTetu.Point memory initialLastPoint = lastPoint;\n    uint blockSlope = 0;\n    // dblock/dt\n    if (block.timestamp > lastPoint.ts) {\n      blockSlope = (MULTIPLIER * (block.number - lastPoint.blk)) / (block.timestamp - lastPoint.ts);\n    }\n    // If last point is already recorded in this block, slope=0\n    // But that's ok b/c we know the block in such case\n\n    // Go over weeks to fill history and calculate what the current point is\n    {\n      uint ti = (lastCheckpoint / WEEK) * WEEK;\n      // Hopefully it won't happen that this won't get used in 5 years!\n      // If it does, users will be able to withdraw but vote weight will be broken\n      for (uint i = 0; i < 255; ++i) {\n        ti += WEEK;\n        int128 dSlope = 0;\n        if (ti > block.timestamp) {\n          ti = block.timestamp;\n        } else {\n          dSlope = slopeChanges[ti];\n        }\n        lastPoint.bias = _positiveInt128(lastPoint.bias - lastPoint.slope * int128(int256(ti - lastCheckpoint)));\n        lastPoint.slope = _positiveInt128(lastPoint.slope + dSlope);\n        lastCheckpoint = ti;\n        lastPoint.ts = ti;\n        lastPoint.blk = initialLastPoint.blk + (blockSlope * (ti - initialLastPoint.ts)) / MULTIPLIER;\n        info.epoch += 1;\n        if (ti == block.timestamp) {\n          lastPoint.blk = block.number;\n          break;\n        } else {\n          _pointHistory[info.epoch] = lastPoint;\n        }\n      }\n    }\n\n    newEpoch = info.epoch;\n    // Now pointHistory is filled until t=now\n\n    if (info.tokenId != 0) {\n      // If last point was in this block, the slope change has been applied already\n      // But in such case we have 0 slope(s)\n      lastPoint.slope = _positiveInt128(lastPoint.slope + (info.uNew.slope - info.uOld.slope));\n      lastPoint.bias = _positiveInt128(lastPoint.bias + (info.uNew.bias - info.uOld.bias));\n    }\n\n    // Record the changed point into history\n    _pointHistory[info.epoch] = lastPoint;\n\n    if (info.tokenId != 0) {\n      // Schedule the slope changes (slope is going down)\n      // We subtract newUserSlope from [newLocked.end]\n      // and add old_user_slope to [old_locked.end]\n      if (info.oldEnd > block.timestamp) {\n        // old_dslope was <something> - u_old.slope, so we cancel that\n        info.oldDSlope += info.uOld.slope;\n        if (info.newEnd == info.oldEnd) {\n          info.oldDSlope -= info.uNew.slope;\n          // It was a new deposit, not extension\n        }\n        slopeChanges[info.oldEnd] = info.oldDSlope;\n      }\n\n      if (info.newEnd > block.timestamp) {\n        if (info.newEnd > info.oldEnd) {\n          info.newDSlope -= info.uNew.slope;\n          // old slope disappeared at this point\n          slopeChanges[info.newEnd] = info.newDSlope;\n        }\n        // else: we recorded it already in oldDSlope\n      }\n      // Now handle user history\n      uint userEpoch = userPointEpoch[info.tokenId] + 1;\n\n      userPointEpoch[info.tokenId] = userEpoch;\n      info.uNew.ts = block.timestamp;\n      info.uNew.blk = block.number;\n      _userPointHistory[info.tokenId][userEpoch] = info.uNew;\n    }\n  }\n\n  function _positiveInt128(int128 value) internal pure returns (int128) {\n    return value < 0 ? int128(0) : value;\n  }\n\n  /// @dev Return SVG logo of veTETU.\n  function tokenURI(uint _tokenId, uint _balanceOf, uint untilEnd, uint _value) public pure returns (string memory output) {\n    output = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 600 900\"><style>.base{font-size:40px;}</style><rect fill=\"#193180\" width=\"600\" height=\"900\"/><path fill=\"#4899F8\" d=\"M0,900h600V522.2C454.4,517.2,107.4,456.8,60.2,0H0V900z\"/><circle fill=\"#1B184E\" cx=\"385\" cy=\"212\" r=\"180\"/><circle fill=\"#04A8F0\" cx=\"385\" cy=\"142\" r=\"42\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#686DF1\" d=\"M385.6,208.8c43.1,0,78-34.9,78-78c-1.8-21.1,16.2-21.1,21.1-15.4c0.4,0.3,0.7,0.7,1.1,1.2c16.7,21.5,26.6,48.4,26.6,77.7c0,25.8-24.4,42.2-50.2,42.2H309c-25.8,0-50.2-16.4-50.2-42.2c0-29.3,9.9-56.3,26.6-77.7c0.3-0.4,0.7-0.8,1.1-1.2c4.9-5.7,22.9-5.7,21.1,15.4l0,0C307.6,173.9,342.5,208.8,385.6,208.8z\"/><path fill=\"#04A8F0\" d=\"M372.3,335.9l-35.5-51.2c-7.5-10.8,0.2-25.5,13.3-25.5h35.5h35.5c13.1,0,20.8,14.7,13.3,25.5l-35.5,51.2C392.5,345.2,378.7,345.2,372.3,335.9z\"/>';\n    output = string(abi.encodePacked(output, '<text transform=\"matrix(1 0 0 1 50 464)\" fill=\"#EAECFE\" class=\"base\">ID:</text><text transform=\"matrix(1 0 0 1 50 506)\" fill=\"#97D0FF\" class=\"base\">', StringLib._toString(_tokenId), '</text>'));\n    output = string(abi.encodePacked(output, '<text transform=\"matrix(1 0 0 1 50 579)\" fill=\"#EAECFE\" class=\"base\">Balance:</text><text transform=\"matrix(1 0 0 1 50 621)\" fill=\"#97D0FF\" class=\"base\">', StringLib._toString(_balanceOf / 1e18), '</text>'));\n    output = string(abi.encodePacked(output, '<text transform=\"matrix(1 0 0 1 50 695)\" fill=\"#EAECFE\" class=\"base\">Until unlock:</text><text transform=\"matrix(1 0 0 1 50 737)\" fill=\"#97D0FF\" class=\"base\">', StringLib._toString(untilEnd / 60 / 60 / 24), ' days</text>'));\n    output = string(abi.encodePacked(output, '<text transform=\"matrix(1 0 0 1 50 811)\" fill=\"#EAECFE\" class=\"base\">Power:</text><text transform=\"matrix(1 0 0 1 50 853)\" fill=\"#97D0FF\" class=\"base\">', StringLib._toString(_value / 1e18), '</text></svg>'));\n\n    string memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"veTETU #', StringLib._toString(_tokenId), '\", \"description\": \"Locked TETU tokens\", \"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\"}'))));\n    output = string(abi.encodePacked('data:application/json;base64,', json));\n  }\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/core/Bookkeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/IERC20.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/EnumerableSet.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../openzeppelin/IERC20Metadata.sol\";\nimport \"../interfaces/IBookkeeper.sol\";\nimport \"../libs/AppUtils.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"../interfaces/IPoolAdapter.sol\";\nimport \"../interfaces/IBorrowManager.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\nimport \"../libs/BookkeeperLib.sol\";\n\n/// @notice Calculate amounts of losses and gains for debts/supply for all pool adapters\n/// @dev Each repay/borrow operation is registered, balances of currently supplied and borrowed amounts are stored.\n///      User is able to make two checkpoints and calculate what\n///      increase to debt/collateral happened in the period between the checkpoints.\n///      Theses increases are named \"gain\" (for collateral) and \"debt-loss\" (for borrow asset).\n///      (typically first checkpoint is made at the end of previous operation and new checkpoint is made at the\n///      beginning of new operation: result amounts are used by fix-change-price procedure).\n///      Another case: user should be able to calculate total amount of received gains and paid debt-lost.\n///      Periodically user will reset data to start calculation of that total amounts from zero\n///      (typically reset will happen at hardworking point).\ncontract Bookkeeper is IBookkeeper, ControllableV3 {\n  using SafeERC20 for IERC20;\n  using AppUtils for uint;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  //region ----------------------------------------------------- Constants\n  string public constant BOOKKEEPER_VERSION = \"1.0.0\";\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Variables\n  BookkeeperLib.BaseState internal _state;\n  //endregion ----------------------------------------------------- Variables\n\n  //region ----------------------------------------------------- Initialization\n  function init(address controller_) external initializer {\n    __Controllable_init(controller_);\n  }\n  //endregion ----------------------------------------------------- Initialization\n\n  //region ----------------------------------------------------- OnBorrow, OnRepay\n  /// @notice Register a new loan\n  /// @param collateralAmount Amount of supplied collateral for the new loan\n  /// @param borrowedAmount Borrowed amount provided for the given {collateralAmount}\n  function onBorrow(uint collateralAmount, uint borrowedAmount) external {\n    IConverterController _controller = IConverterController(controller());\n    IBorrowManager borrowManager = IBorrowManager(_controller.borrowManager());\n    require(borrowManager.isPoolAdapter(msg.sender), AppErrors.POOL_ADAPTER_NOT_FOUND);\n\n    BookkeeperLib.onBorrow(_state, IPoolAdapter(msg.sender), collateralAmount, borrowedAmount);\n  }\n\n  /// @notice Register loan payment\n  /// @param withdrawnCollateral Amount of collateral received by the user during the repaying.\n  /// @param paidAmount Amount paid by the user during the repaying.\n  function onRepay(uint withdrawnCollateral, uint paidAmount) external {\n    IConverterController _controller = IConverterController(controller());\n    IBorrowManager borrowManager = IBorrowManager(_controller.borrowManager());\n\n    // onRepay is allowed for registered platform adapters only\n    // if some dirty (de-registered) pool adapter will try to call onRepay\n    // we shouldn't prevent its attempt to make repay but\n    // it's too dangerous to take results into account here because a malicious contract can try to give us wrong data\n    // so, no revert, silent ignore\n\n    if (borrowManager.isPoolAdapter(msg.sender)) {\n      BookkeeperLib.onRepay(_state, _controller, IPoolAdapter(msg.sender), withdrawnCollateral, paidAmount);\n    }\n  }\n  //endregion ----------------------------------------------------- OnBorrow, OnRepay\n\n  //region ----------------------------------------------------- Checkpoints\n  /// @notice Save checkpoint for all pool adapters of the given {user_}\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\n  function checkpoint(address[] memory tokens_) external returns (\n    uint[] memory deltaGains,\n    uint[] memory deltaLosses\n  ) {\n    // no restrictions: any user is allowed\n    // to receive any values the user should have not-empty state_.poolAdaptersPerUser\n\n    return BookkeeperLib.checkpointForUser(_state, msg.sender, tokens_);\n  }\n\n  /// @notice Calculate deltas that user would receive if he creates a checkpoint at the moment\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\n  function previewCheckpoint(address user, address[] memory tokens_) external view returns (\n    uint[] memory deltaGains,\n    uint[] memory deltaLosses\n  ) {\n    return BookkeeperLib.previewCheckpointForUser(_state, user, tokens_);\n  }\n\n  /// @notice Get last saved checkpoint for the given {user}\n  function getLastCheckpoint(address poolAdapter_) external view returns (\n    uint suppliedAmount,\n    uint borrowedAmount,\n    uint totalCollateral,\n    uint totalDebt,\n    uint countActions\n  ) {\n    BookkeeperLib.PoolAdapterCheckpoint memory c = _state.checkpoints[poolAdapter_];\n    return (\n      c.suppliedAmount,\n      c.borrowedAmount,\n      c.totalCollateral,\n      c.totalDebt,\n      c.countActions\n    );\n  }\n  //endregion ----------------------------------------------------- Checkpoints\n\n  //region ----------------------------------------------------- Logic for period\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the signer\n  ///         for the current period, start new period.\n  function startPeriod(address underlying_) external override returns (uint gains, uint losses) {\n    // anybody can call this function, it starts new period for the signer\n    IDebtMonitor debtMonitor = IDebtMonitor(IConverterController(controller()).debtMonitor());\n    return BookkeeperLib.startPeriod(_state, debtMonitor, msg.sender, underlying_);\n  }\n\n  /// @notice Read-only version of {startPeriod}\n  function previewPeriod(address underlying_, address user_) external view override returns (uint gains, uint losses) {\n    return BookkeeperLib.previewPeriod(_state, user_, underlying_);\n  }\n  //endregion ----------------------------------------------------- Logic for period\n\n  //region ----------------------------------------------------- View mapping data\n  function poolAdaptersPerUserLength(address user) external view returns (uint) {\n    return _state.poolAdaptersPerUser[user].length();\n  }\n  function poolAdaptersPerUserAt(address user, uint index) external view returns (address) {\n    return _state.poolAdaptersPerUser[user].at(index);\n  }\n  function poolAdaptersPerUserContains(address user, address poolAdapter) external view returns (bool) {\n    return _state.poolAdaptersPerUser[user].contains(poolAdapter);\n  }\n\n  function actionsLength(address poolAdapter) external view returns (uint) {\n    return _state.actions[poolAdapter].length;\n  }\n  function actionsAt(address poolAdapter, uint index) external view returns (\n    uint suppliedAmount,\n    uint borrowedAmount,\n    uint actionKind\n  ) {\n    BookkeeperLib.Action memory action = _state.actions[poolAdapter][index];\n    return (\n      action.suppliedAmount,\n      action.borrowedAmount,\n      uint(action.actionKind)\n    );\n  }\n\n  function repayInfoAt(address poolAdapter, uint index) external view returns (\n    uint gain,\n    uint loss,\n    uint[2] memory prices\n  ) {\n    BookkeeperLib.RepayInfo memory repayInfo = _state.repayInfo[poolAdapter][index];\n    return (\n      repayInfo.gain,\n      repayInfo.loss,\n      repayInfo.prices\n    );\n  }\n\n  function periodsLength(address poolAdapter) external view returns (uint) {\n    return _state.periods[poolAdapter].length;\n  }\n\n  function periodsAt(address poolAdapter, uint index) external view returns (uint) {\n    return _state.periods[poolAdapter][index];\n  }\n\n  //endregion ----------------------------------------------------- View mapping data\n\n}"
    },
    "@tetu_io/tetu-converter/contracts/core/BorrowManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../libs/AppDataTypes.sol\";\nimport \"../libs/AppErrors.sol\";\nimport \"../libs/AppUtils.sol\";\nimport \"../openzeppelin/Clones.sol\";\nimport \"../openzeppelin/IERC20.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/EnumerableSet.sol\";\nimport \"../openzeppelin/EnumerableMap.sol\";\nimport \"../openzeppelin/IERC20Metadata.sol\";\nimport \"../interfaces/IPlatformAdapter.sol\";\nimport \"../interfaces/IBorrowManager.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\nimport \"../interfaces/IDebtMonitor.sol\";\nimport \"../interfaces/ITetuConverter.sol\";\nimport \"../integrations/market/ICErc20.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"../interfaces/IPoolAdapter.sol\";\nimport \"../libs/ConverterLogicLib.sol\";\nimport \"../libs/EntryKinds.sol\";\nimport \"../libs/BorrowManagerLogicLib.sol\";\n\n/// @notice Contains list of lending pools. Allow to select most efficient pool for the given collateral/borrow pair\ncontract BorrowManager is IBorrowManager, ControllableV3 {\n  using SafeERC20 for IERC20;\n  using AppUtils for uint;\n  using Clones for address;\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using EnumerableSet for EnumerableSet.UintSet;\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\n\n  //region ----------------------------------------------------- Constants\n  string public constant BORROW_MANAGER_VERSION = \"1.1.1\";\n\n  /// @notice the maximum percentage by which the collateral amount can be changed when rebalancing\n  ///         Decimals are set by DENOMINATOR, so 50_000 means 0.5 or 50%\n  ///         Case: health factor is too healthy\n  uint internal constant THRESHOLD_REBALANCE_TOO_HEALTHY = 10_000;\n\n  /// @notice the maximum percentage by which the collateral amount can be changed when rebalancing\n  ///         Decimals are set by DENOMINATOR, so 50_000 means 0.5 or 50%\n  ///         Case: health factor is not healthy\n  uint internal constant THRESHOLD_REBALANCE_UNHEALTHY = 50_000;\n\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Data types\n\n  /// @notice Pair of two assets. Asset 1 can be converted to asset 2 and vice versa.\n  /// @dev There are no restrictions for {assetLeft} and {assertRight}. Each can be smaller than the other.\n  struct AssetPair {\n    address assetLeft;\n    address assetRight;\n  }\n  //endregion ----------------------------------------------------- Data types\n\n  //region ----------------------------------------------------- Variables. Don't change names or ordering!\n\n  /// @notice Reward APR is taken into account with the given factor\n  /// @dev decimals 18. The value is divided on {REWARDS_FACTOR_DENOMINATOR_18}\n  uint public rewardsFactor;\n\n  /// @notice all registered platform adapters\n  EnumerableSet.AddressSet private _platformAdapters;\n\n  /// @notice all asset pairs registered for the platform adapter\n  /// @dev PlatformAdapter : [key of asset pair]\n  mapping(address => EnumerableSet.UintSet) private _platformAdapterPairs;\n\n  /// @notice all platform adapters for which the asset pair is registered\n  /// @dev Key of pair asset => [list of platform adapters]\n  mapping(uint => EnumerableSet.AddressSet) private _pairsList;\n\n  /// @notice Key of pair asset => Asset pair\n  mapping(uint => AssetPair) private _assetPairs;\n\n  /// @notice Default health factors (HF) for assets. Default HF is used if user hasn't provided HF value, decimals 2\n  /// @dev asset => Health factor (== collateral / minimum collateral. It should be greater then MIN_HEALTH_FACTOR)\n  mapping(address => uint16) public targetHealthFactorsForAssets;\n\n  /// @notice Converter : platform adapter\n  mapping(address => address) public converterToPlatformAdapter;\n\n  /// @notice List of pool adapters ready to borrow, i.e. with not-dirty state.\n  ///         Any pool adapter with state DIRTY is removed from this list as soon as its dirty-state is detected.\n  /// @dev user => PoolAdapterKey(== keccak256(converter, collateral, borrowToken)) => address of the pool adapter\n  mapping (address => EnumerableMap.UintToAddressMap) private _poolAdapters;\n\n  /// @notice Pool adapter => (1 + index of the pool adapter in {listPoolAdapters})\n  /// @dev This list contains info for all ever created pool adapters (both for not-dirty and dirty ones).\n  mapping (address => uint) public poolAdaptersRegistered;\n\n  /// @notice List of addresses of all ever created pool adapters (both for not-dirty and dirty ones).\n  /// @dev Allow to get full list of the pool adapter and then filter it by any criteria (asset, user, state, etc)\n  address[] public listPoolAdapters;\n  //endregion ----------------------------------------------------- Variables. Don't change names or ordering!\n\n  //region ----------------------------------------------------- Events\n  event OnSetTargetHealthFactors(address[] assets, uint16[] healthFactors2);\n  event OnSetRewardsFactor(uint rewardsFactor);\n  event OnAddAssetPairs(address platformAdapter, address[] leftAssets, address[] rightAssets);\n  event OnRemoveAssetPairs(address platformAdapter, address[] leftAssets, address[] rightAssets);\n  event OnUnregisterPlatformAdapter(address platformAdapter);\n  event OnRegisterPoolAdapter(address poolAdapter, address converter, address user, address collateralAsset, address borrowAsset);\n  event OnMarkPoolAdapterAsDirty(address poolAdapter);\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Initialization\n\n  function init(address controller_, uint rewardsFactor_) external initializer {\n    __Controllable_init(controller_);\n\n    // we assume rewards amount should be downgraded in calcs coz liquidation gaps\n    require(rewardsFactor_ < BorrowManagerLogicLib.REWARDS_FACTOR_DENOMINATOR_18, AppErrors.INCORRECT_VALUE);\n    rewardsFactor = rewardsFactor_;\n  }\n  //endregion ----------------------------------------------------- Initialization\n\n  //region ----------------------------------------------------- Access rights\n\n  /// @notice Ensure that msg.sender is registered pool adapter\n  function _onlyTetuConverter() internal view {\n    require(\n      msg.sender == IConverterController(controller()).tetuConverter(),\n      AppErrors.TETU_CONVERTER_ONLY\n    );\n  }\n\n  /// @notice Ensure that msg.sender is registered pool adapter\n  function _onlyGovernance() internal view {\n    require(msg.sender == IConverterController(controller()).governance(), AppErrors.GOVERNANCE_ONLY);\n  }\n  //endregion ----------------------------------------------------- Access rights\n\n  //region ----------------------------------------------------- Configuration\n\n  /// @notice Set target health factors for the assets.\n  ///         If target health factor is not assigned to the asset, target-health-factor from controller is used.\n  /// @param healthFactors2_ Health factor must be greater then 1, decimals 2\n  function setTargetHealthFactors(address[] calldata assets_, uint16[] calldata healthFactors2_) external override {\n    _onlyGovernance();\n    uint countItems = assets_.length;\n    require(countItems == healthFactors2_.length, AppErrors.WRONG_LENGTHS);\n\n    for (uint i = 0; i < countItems; i = i.uncheckedInc()) {\n      require(\n        healthFactors2_[i] == 0 || healthFactors2_[i] >= IConverterController(controller()).minHealthFactor2(),\n        AppErrors.WRONG_HEALTH_FACTOR\n      );\n      targetHealthFactorsForAssets[assets_[i]] = healthFactors2_[i];\n    }\n\n    emit OnSetTargetHealthFactors(assets_, healthFactors2_);\n  }\n\n  /// @notice Reward APR is taken into account with given factor\n  ///         Result APR = borrow-apr - supply-apr - [REWARD-FACTOR]/Denominator * rewards-APR\n  function setRewardsFactor(uint rewardsFactor_) external override {\n    _onlyGovernance();\n    require(rewardsFactor_ < BorrowManagerLogicLib.REWARDS_FACTOR_DENOMINATOR_18, AppErrors.INCORRECT_VALUE);\n    rewardsFactor = rewardsFactor_;\n\n    emit OnSetRewardsFactor(rewardsFactor_);\n  }\n\n  /// @notice Register new lending platform with available pairs of assets\n  ///         OR add new pairs of assets to the exist lending platform\n  /// @param platformAdapter_ Implementation of IPlatformAdapter attached to the specified pool\n  /// @param leftAssets_  Supported pairs of assets. The pairs are set using two arrays: left and right\n  /// @param rightAssets_  Supported pairs of assets. The pairs are set using two arrays: left and right\n  function addAssetPairs(\n    address platformAdapter_,\n    address[] calldata leftAssets_,\n    address[] calldata rightAssets_\n  ) external override {\n    _onlyGovernance();\n\n    uint lenAssets = rightAssets_.length;\n    require(leftAssets_.length == lenAssets, AppErrors.WRONG_LENGTHS);\n\n    // register new platform adapter if necessary\n    _platformAdapters.add(platformAdapter_);\n\n    // register all available template pool adapters\n    address[] memory paConverters = IPlatformAdapter(platformAdapter_).converters();\n    uint lenConverters = paConverters.length;\n    for (uint i = 0; i < lenConverters; i = i.uncheckedInc()) {\n      // the relation \"platform adapter - converter\" is invariant\n      address platformAdapterForConverter = converterToPlatformAdapter[paConverters[i]];\n      if (platformAdapter_ != platformAdapterForConverter) {\n        require(platformAdapterForConverter == address(0), AppErrors.ONLY_SINGLE_PLATFORM_ADAPTER_CAN_USE_CONVERTER);\n        converterToPlatformAdapter[paConverters[i]] = platformAdapter_;\n      }\n    }\n\n    // register all provided asset pairs\n    for (uint i = 0; i < lenAssets; i = i.uncheckedInc()) {\n      uint assetPairKey = getAssetPairKey(leftAssets_[i], rightAssets_[i]);\n      if (_assetPairs[assetPairKey].assetLeft == address(0)) {\n        _assetPairs[assetPairKey] = AssetPair({\n          assetLeft: leftAssets_[i],\n          assetRight: rightAssets_[i]\n        });\n      }\n      _pairsList[assetPairKey].add(platformAdapter_);\n      _platformAdapterPairs[platformAdapter_].add(assetPairKey);\n    }\n\n    emit OnAddAssetPairs(platformAdapter_, leftAssets_, rightAssets_);\n  }\n\n  /// @notice Remove available pairs of asset from the platform adapter.\n  ///         The platform adapter will be unregistered after removing last supported pair of assets\n  function removeAssetPairs(\n    address platformAdapter_,\n    address[] calldata leftAssets_,\n    address[] calldata rightAssets_\n  ) external override {\n    _onlyGovernance();\n\n    uint lenAssets = rightAssets_.length;\n    require(leftAssets_.length == lenAssets, AppErrors.WRONG_LENGTHS);\n    require(_platformAdapters.contains(platformAdapter_), AppErrors.PLATFORM_ADAPTER_NOT_FOUND);\n    IDebtMonitor debtMonitor = IDebtMonitor(IConverterController(controller()).debtMonitor());\n\n    // unregister the asset pairs\n    for (uint i; i < lenAssets; i = i.uncheckedInc()) {\n      uint assetPairKey = getAssetPairKey(leftAssets_[i], rightAssets_[i]);\n      _pairsList[assetPairKey].remove(platformAdapter_);\n      _platformAdapterPairs[platformAdapter_].remove(assetPairKey);\n    }\n\n    // if platform adapter doesn't have any asset pairs, we unregister it\n    if (_platformAdapterPairs[platformAdapter_].length() == 0) {\n      // unregister all template pool adapters\n      address[] memory paConverters = IPlatformAdapter(platformAdapter_).converters();\n      uint lenConverters = paConverters.length;\n      for (uint i; i < lenConverters; i = i.uncheckedInc()) {\n        // If there is active pool adapter for the platform adapter, we cannot unregister the platform adapter\n        require(!debtMonitor.isConverterInUse(paConverters[i]), AppErrors.PLATFORM_ADAPTER_IS_IN_USE);\n        converterToPlatformAdapter[paConverters[i]] = address(0);\n      }\n\n      // unregister platform adapter\n      _platformAdapters.remove(platformAdapter_);\n      emit OnUnregisterPlatformAdapter(platformAdapter_);\n    }\n\n    emit OnRemoveAssetPairs(platformAdapter_, leftAssets_, rightAssets_);\n  }\n  //endregion ----------------------------------------------------- Configuration\n\n  //region ----------------------------------------------------- Find best pool for borrowing\n\n  /// @inheritdoc IBorrowManager\n  function findConverter(\n    bytes memory entryData_,\n    address user_,\n    address sourceToken_,\n    address targetToken_,\n    uint amountIn_,\n    uint periodInBlocks_\n  ) external view override returns (\n    address[] memory convertersOut,\n    uint[] memory collateralAmountsOut,\n    uint[] memory amountsToBorrowOut,\n    int[] memory aprs18Out\n  ) {\n    AppDataTypes.InputConversionParams memory params = AppDataTypes.InputConversionParams({\n      collateralAsset: sourceToken_,\n      borrowAsset: targetToken_,\n      amountIn: amountIn_,\n      countBlocks: periodInBlocks_,\n      entryData: entryData_\n    });\n    BorrowManagerLogicLib.InputParamsAdditional memory addParams = BorrowManagerLogicLib.InputParamsAdditional({\n      rewardsFactor: rewardsFactor,\n      borrowManager: this,\n      targetHealthFactor2: getTargetHealthFactor2(sourceToken_),\n      controller: IConverterController(controller()),\n      thresholds: [THRESHOLD_REBALANCE_TOO_HEALTHY, THRESHOLD_REBALANCE_UNHEALTHY]\n    });\n    return BorrowManagerLogicLib.findConverter(\n      params,\n      addParams,\n      _pairsList[getAssetPairKey(sourceToken_, targetToken_)],\n      user_\n    );\n  }\n  //endregion ----------------------------------------------------- Find best pool for borrowing\n\n  //region ----------------------------------------------------- Minimal proxy creation\n\n  /// @notice Register a pool adapter for (pool, user, collateral) if the adapter wasn't created before\n  /// @param user_ Address of the caller contract who requires access to the pool adapter\n  /// @return Address of registered pool adapter\n  function registerPoolAdapter(\n    address converter_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_\n  ) external override returns (address) {\n    _onlyTetuConverter();\n\n    uint poolAdapterKey = getPoolAdapterKey(converter_, collateralAsset_, borrowAsset_);\n    (bool found, address dest) = _poolAdapters[user_].tryGet(poolAdapterKey);\n    if (! found) {\n      // pool adapter is not yet registered\n      // create a new instance of the pool adapter using minimal proxy pattern, initialize newly created contract\n      dest = converter_.clone();\n      IPlatformAdapter(getPlatformAdapter(converter_)).initializePoolAdapter(\n        converter_,\n        dest,\n        user_,\n        collateralAsset_,\n        borrowAsset_\n      );\n\n      // register newly created pool adapter in the list of the pool adapters\n      _poolAdapters[user_].set(poolAdapterKey, dest);\n      uint index = listPoolAdapters.length;\n      poolAdaptersRegistered[dest] = index + 1;\n      listPoolAdapters.push(dest);\n\n      emit OnRegisterPoolAdapter(dest, converter_, user_, collateralAsset_, borrowAsset_);\n    }\n\n    return dest;\n  }\n\n  /// @notice Notify borrow manager that the pool adapter with the given params is \"dirty\".\n  ///         The pool adapter should be excluded from the list of ready-to-borrow pool adapters.\n  /// @dev \"Dirty\" means that a liquidation happens inside. The borrow position should be closed during health checking.\n  function markPoolAdapterAsDirty(address converter_, address user_, address collateral_, address borrowToken_) external override {\n    IConverterController _controller = IConverterController(controller()); // gas saving\n    require(\n      msg.sender == _controller.tetuConverter() || msg.sender == _controller.debtMonitor(),\n      AppErrors.ACCESS_DENIED\n    );\n    uint key = getPoolAdapterKey(converter_, collateral_, borrowToken_);\n\n    (bool found, address poolAdapter) = _poolAdapters[user_].tryGet(key);\n    require(found, AppErrors.POOL_ADAPTER_NOT_FOUND);\n\n    // Dirty pool adapter is removed from _poolAdapters, so it will never be used for new borrows\n    _poolAdapters[user_].remove(key);\n\n    emit OnMarkPoolAdapterAsDirty(poolAdapter);\n  }\n  //endregion ----------------------------------------------------- Minimal proxy creation\n\n  //region ----------------------------------------------------- Getters - pool adapters\n\n  /// @dev Returns true for NORMAL pool adapters and for active DIRTY pool adapters (=== borrow position is opened).\n  function isPoolAdapter(address poolAdapter_) external view override returns (bool) {\n    return poolAdaptersRegistered[poolAdapter_] != 0;\n  }\n\n  /// @notice Get pool adapter or 0 if the pool adapter is not registered\n  function getPoolAdapter(\n    address converter_,\n    address user_,\n    address collateral_,\n    address borrowToken_\n  ) external view override returns (address) {\n    return _getPoolAdapter(converter_, user_, collateral_, borrowToken_);\n  }\n\n  /// @notice Get pool adapter or 0 if the pool adapter is not registered\n  function _getPoolAdapter(\n    address converter_,\n    address user_,\n    address collateral_,\n    address borrowToken_\n  ) internal view returns (address) {\n    (bool found, address dest) = _poolAdapters[user_].tryGet(getPoolAdapterKey(converter_, collateral_, borrowToken_));\n    return found ? dest : address(0);\n  }\n  //endregion ----------------------------------------------------- Getters - pool adapters\n\n  //region ----------------------------------------------------- Getters - platform adapters\n\n  /// @notice Get platformAdapter to which the converter belongs\n  function getPlatformAdapter(address converter_) public view override returns (address) {\n    address platformAdapter = converterToPlatformAdapter[converter_];\n    require(platformAdapter != address(0), AppErrors.PLATFORM_ADAPTER_NOT_FOUND);\n    return platformAdapter;\n  }\n  //endregion ----------------------------------------------------- Getters - platform adapters\n\n  //region ----------------------------------------------------- Getters - health factor\n\n  /// @notice Return target health factor with decimals 2 for the asset\n  ///         If there is no custom value for asset, target health factor from the controller should be used\n  function getTargetHealthFactor2(address asset_) public view override returns (uint16) {\n    uint16 dest = targetHealthFactorsForAssets[asset_];\n    return dest == 0\n      ? IConverterController(controller()).targetHealthFactor2()\n      : dest;\n  }\n  //endregion ----------------------------------------------------- Getters - health factor\n\n  //region ----------------------------------------------------- keccak256 keys\n\n  function getPoolAdapterKey(address converter_,\n    address collateral_,\n    address borrowToken_\n  ) public pure returns (uint){\n    return uint(keccak256(abi.encodePacked(converter_, collateral_, borrowToken_)));\n  }\n\n  function getAssetPairKey(address assetLeft_, address assetRight_) public pure returns (uint) {\n    return assetLeft_ < assetRight_\n      ? uint(keccak256(abi.encodePacked(assetLeft_, assetRight_)))\n      : uint(keccak256(abi.encodePacked(assetRight_, assetLeft_)));\n  }\n  //endregion ----------------------------------------------------- keccak256 keys\n\n  //region ----------------------------------------------------- Access to arrays\n\n  function platformAdaptersLength() public view override returns (uint) {\n    return _platformAdapters.length();\n  }\n\n  function platformAdaptersAt(uint index) public view override returns (address) {\n    return _platformAdapters.at(index);\n  }\n\n  function pairsListLength(address token1, address token2) public view returns (uint) {\n    return _pairsList[getAssetPairKey(token1, token2)].length();\n  }\n\n  function pairsListAt(address token1, address token2, uint index) public view returns (address) {\n    return _pairsList[getAssetPairKey(token1, token2)].at(index);\n  }\n\n  function platformAdapterPairsLength(address platformAdapter_) public view returns (uint) {\n    return _platformAdapterPairs[platformAdapter_].length();\n  }\n\n  function platformAdapterPairsAt(address platformAdapter_, uint index) public view returns (AssetPair memory) {\n    return _assetPairs[_platformAdapterPairs[platformAdapter_].at(index)];\n  }\n\n  function listPoolAdaptersLength() public view returns (uint) {\n    return listPoolAdapters.length;\n  }\n  //endregion ----------------------------------------------------- Access to arrays\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/core/ConverterController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../libs/AppErrors.sol\";\nimport \"../openzeppelin/Initializable.sol\";\nimport \"../interfaces/IConverterController.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @notice Keep and provide addresses of all application contracts\ncontract ConverterController is IConverterController, ControllableV3 {\n\n  //region ------------------------------------- Constants\n  string public constant CONVERTER_CONTROLLER_VERSION = \"1.0.2\";\n  uint16 constant MIN_ALLOWED_MIN_HEALTH_FACTOR = 100;\n  /// @notice Denominator for {debtGap}\n  uint constant DEBT_GAP_DENOMINATOR = 100_000;\n  //endregion ------------------------------------- Constants\n\n  //region ------------------------------------- Variables. Don't change names or ordering!\n\n  /// @notice Controller of tetu-contracts-v2 that is allowed to update proxy contracts\n  address public override proxyUpdater;\n\n  /// @notice Allow to swap assets\n  address public override tetuLiquidator;\n\n  /// @notice Main application contract, strategy works only with it\n  address public override tetuConverter;\n\n  /// @notice Contains list of lending pools. Allow to select most efficient pool for the given collateral/borrow pair\n  address public override borrowManager;\n\n  /// @notice Contains list of opened borrows, check healths of the borrows\n  address public override debtMonitor;\n\n  /// @notice A keeper to control health of the borrows\n  address public override keeper;\n\n  /// @notice Wrapper around tetu-liquidator\n  address public override swapManager;\n\n  /// @notice Current governance. It can be changed by offer/accept scheme\n  address public override governance;\n\n  address public override priceOracle;\n\n  /// @notice New governance suggested by exist governance\n  address public pendingGovernance;\n\n  /// @notice Min allowed health factor = collateral / min allowed collateral, decimals 2\n  ///         If a health factor is below given value, we need to repay a part of borrow back\n  /// @dev Health factor < 1 produces liquidation immediately\n  uint16 public override minHealthFactor2;\n\n  /// @notice target health factor with decimals 2\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\n  ///      or additional borrow and restore the health factor to the given target value\n  uint16 public override targetHealthFactor2;\n\n  /// @notice max allowed health factor with decimals 2 (this value is not used in the current version)\n  /// @dev If a health factor is above given value, we CAN make additional borrow using exist collateral\n  uint16 public override maxHealthFactor2;\n\n  /// @notice Count of blocks per day, updatable\n  uint public override blocksPerDay;\n\n  /// @notice When blocksPerDay was updated last time\n  ///         0 - auto-update is disabled\n  uint public lastBlockNumber;\n  uint public lastBlockTimestamp;\n\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\n  bool private _paused;\n\n  /// @notice users who are allowed to make borrow using the TetuConverter\n  mapping (address => bool) public whitelist;\n\n  /// @inheritdoc IConverterController\n  uint public override debtGap;\n\n  /// @inheritdoc IConverterController\n  bool public override rebalanceOnBorrowEnabled;\n\n  /// @notice Address of bookkeeper\n  address public override bookkeeper;\n  //endregion ------------------------------------- Variables\n\n  //region ------------------------------------- Events\n  event OnSetBlocksPerDay(uint blocksPerDay, bool enableAutoUpdate);\n  event OnAutoUpdateBlocksPerDay(uint blocksPerDay);\n  event OnSetMinHealthFactor2(uint16 value);\n  event OnSetTargetHealthFactor2(uint16 value);\n  event OnSetMaxHealthFactor2(uint16 value);\n  event OnSetGovernance(address newGovernance);\n  event OnAcceptGovernance(address pendingGovernance);\n  event OnSetDebtGap(uint debtGap);\n  event OnSetPriceOracle(address priceOracle);\n  event OnSetBookkeeper(address bookkeeper);\n  //endregion ------------------------------------- Events\n\n  //region ------------------------------------- Initialization\n\n  function init(\n    address proxyUpdater_,\n    address governance_,\n    address tetuConverter_,\n    address borrowManager_,\n    address debtMonitor_,\n    address keeper_,\n    address swapManager_,\n    address priceOracle_,\n    address tetuLiquidator_,\n    uint blocksPerDay_\n  // we cannot have additional parameters here because strategy will have stack too deep on coverage\n  ) external initializer {\n    require(blocksPerDay_ != 0, AppErrors.INCORRECT_VALUE);\n    require(\n      proxyUpdater_ != address(0)\n      && tetuConverter_ != address(0)\n      && borrowManager_ != address(0)\n      && debtMonitor_ != address(0)\n      && keeper_ != address(0)\n      && swapManager_ != address(0)\n      && tetuLiquidator_ != address(0)\n      && governance_ != address(0)\n      && priceOracle_ != address(0),\n      AppErrors.ZERO_ADDRESS\n    );\n\n    governance = governance_;\n    __Controllable_init(address(this));\n\n    tetuConverter = tetuConverter_;\n    borrowManager = borrowManager_;\n    debtMonitor = debtMonitor_;\n    keeper = keeper_;\n    swapManager = swapManager_;\n    priceOracle = priceOracle_;\n    proxyUpdater = proxyUpdater_;\n    tetuLiquidator = tetuLiquidator_;\n\n    // by default auto-update of blocksPerDay is disabled, it's necessary to call setBlocksPerDay to enable it\n    blocksPerDay = blocksPerDay_;\n\n    // Other params are initialized by default values to reduce number of input parameters\n    // We can always modify these values using setters\n    debtGap = 1000;\n    minHealthFactor2 = 105;\n    targetHealthFactor2 = 200;\n\n    // current version of converter doesn't use maxHealthFactor2, it's for future versions\n    // you can always change this limit using setMaxHealthFactor\n    maxHealthFactor2 = 5000;\n\n    // bookkeeper is initialized using setBookkeeper\n  }\n\n  function _onlyGovernance() internal view {\n    require (msg.sender == governance, AppErrors.GOVERNANCE_ONLY);\n  }\n  //endregion ------------------------------------- Initialization\n\n  //region ------------------------------------- Blocks per day\n\n  /// @notice Manually set value of blocksPerDay and enable/disable its auto-update\n  ///         If the update is enabled, the first update will happen in BLOCKS_PER_DAY_AUTO_UPDATE_PERIOD_SECS seconds\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external override {\n    require(blocksPerDay_ != 0, AppErrors.INCORRECT_VALUE);\n    _onlyGovernance();\n    blocksPerDay = blocksPerDay_;\n    if (enableAutoUpdate_) {\n      lastBlockNumber = block.number;\n      lastBlockTimestamp = block.timestamp;\n    } else {\n      lastBlockNumber = 0;\n      lastBlockTimestamp = 0;\n    }\n    emit OnSetBlocksPerDay(blocksPerDay_, enableAutoUpdate_);\n  }\n\n  /// @notice Check if blocksPerDay should be updated. The keeper should do it periodically\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view override returns (bool) {\n    return lastBlockNumber != 0 && block.timestamp - lastBlockTimestamp > periodInSeconds_;\n  }\n\n  /// @notice Calculate new value of blocksPerDay as COUNT PASSED BLOCKS / COUNT PASSED DAYS (since prev auto-update)\n  function updateBlocksPerDay(uint periodInSeconds_) external override {\n    require(msg.sender == keeper, AppErrors.KEEPER_ONLY);\n    require(lastBlockNumber != 0,\n      // && lastBlockNumber != block.number       // this check is unnecessary\n      AppErrors.INCORRECT_OPERATION               // setBlocksPerDay is called by governance\n    );                                            // but updateBlocksPerDay is called by keeper\n                                                  // so, they cannot be called in the same block\n    require(\n      periodInSeconds_ != 0\n      && lastBlockTimestamp + periodInSeconds_ <= block.timestamp,\n      AppErrors.INCORRECT_VALUE\n    );\n    // blocks-per-day = count passed blocks / count passed days\n    // count passed days = count passed seconds / count seconds per day\n    blocksPerDay = (block.number - lastBlockNumber) * (24 * 60 * 60) / (block.timestamp - lastBlockTimestamp);\n\n    lastBlockNumber = block.number;\n    lastBlockTimestamp = block.timestamp;\n\n    emit OnAutoUpdateBlocksPerDay(blocksPerDay);\n  }\n  //endregion ------------------------------------- Blocks per day\n\n  //region ------------------------------------- Setters\n\n  /// @notice min allowed health factor with decimals 2\n  function setMinHealthFactor2(uint16 value_) external override {\n    require(value_ >= MIN_ALLOWED_MIN_HEALTH_FACTOR, AppErrors.WRONG_HEALTH_FACTOR);\n    require(value_ < targetHealthFactor2, AppErrors.WRONG_HEALTH_FACTOR_CONFIG);\n    _onlyGovernance();\n    minHealthFactor2 = value_;\n    emit OnSetMinHealthFactor2(value_);\n  }\n\n  /// @notice target health factor with decimals 2\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\n  ///      or additional borrow and restore the health factor to the given target value\n  function setTargetHealthFactor2(uint16 value_) external override {\n    require(value_ > minHealthFactor2, AppErrors.WRONG_HEALTH_FACTOR_CONFIG);\n    require(value_ < maxHealthFactor2, AppErrors.WRONG_HEALTH_FACTOR_CONFIG);\n    _onlyGovernance();\n    targetHealthFactor2 = value_;\n    emit OnSetTargetHealthFactor2(value_);\n  }\n\n  /// @notice max allowed health factor with decimals 2\n  function setMaxHealthFactor2(uint16 value_) external override {\n    require(value_ > targetHealthFactor2, AppErrors.WRONG_HEALTH_FACTOR_CONFIG);\n    _onlyGovernance();\n    maxHealthFactor2 = value_;\n    emit OnSetMaxHealthFactor2(value_);\n  }\n\n  /// @notice Set up debt gap value\n  /// @dev If pool adapter's getStatus returns debtGapRequired = true\n  ///      user should reppay debt-amount * (debtGap_ + 100_000) / 100_000\n  /// @param debtGap_ Debt gap value, any value >= 0 is suitable\n  function setDebtGap(uint debtGap_) external {\n    _onlyGovernance();\n    debtGap = debtGap_;\n  }\n\n  /// @notice Set up new price oracle\n  function setPriceOracle(address priceOracle_) external {\n    _onlyGovernance();\n    require(priceOracle_ != address(0), AppErrors.ZERO_ADDRESS);\n\n    priceOracle = priceOracle_;\n    emit OnSetPriceOracle(priceOracle);\n  }\n\n  //endregion ------------------------------------- Setters\n\n  //region ------------------------------------- Governance\n\n  /// @notice Suggest to change governance\n  function setGovernance(address newGovernance_) external {\n    _onlyGovernance();\n    require(newGovernance_ != address(0), AppErrors.ZERO_ADDRESS);\n\n    pendingGovernance = newGovernance_;\n    emit OnSetGovernance(newGovernance_);\n  }\n\n  /// @notice Old governance has suggested to change governance.\n  ///         Newly suggested governance must accept the change to actually change the governance.\n  function acceptGovernance() external {\n    require(pendingGovernance == msg.sender, AppErrors.NOT_PENDING_GOVERNANCE);\n\n    governance = pendingGovernance;\n    emit OnAcceptGovernance(pendingGovernance);\n  }\n  //endregion ------------------------------------- Governance\n\n  //region ------------------------------------- Paused\n  function paused() external view override returns (bool) {\n    return _paused;\n  }\n  function setPaused(bool paused_) external {\n    _onlyGovernance();\n    _paused = paused_;\n  }\n  //endregion ------------------------------------- Paused\n\n  //region ------------------------------------- Whitelist\n  function isWhitelisted(address user_) external view override returns (bool) {\n    return whitelist[user_];\n  }\n  function setWhitelistValues(address[] memory users_, bool isWhite) external {\n    _onlyGovernance();\n    uint len = users_.length;\n    for (uint i; i < len; ++i) {\n      whitelist[users_[i]] = isWhite;\n    }\n  }\n  //endregion ------------------------------------- Whitelist\n\n  //region ------------------------------------- Rebalance on borrowing\n  function setRebalanceOnBorrowEnabled(bool enabled_) external {\n    _onlyGovernance();\n    rebalanceOnBorrowEnabled = enabled_;\n  }\n  //endregion ------------------------------------- Rebalance on borrowing\n\n  //region ------------------------------------- Bookkeeper\n  function setBookkeeper(address bookkeeper_) external {\n    _onlyGovernance();\n    require(bookkeeper_ != address(0), AppErrors.ZERO_ADDRESS);\n\n    bookkeeper = bookkeeper_;\n    emit OnSetBookkeeper(bookkeeper_);\n  }\n  //endregion ------------------------------------- Bookkeeper\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/core/DebtMonitor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../libs/AppErrors.sol\";\nimport \"../libs/AppUtils.sol\";\nimport \"../openzeppelin/IERC20Metadata.sol\";\nimport \"../openzeppelin/EnumerableSet.sol\";\nimport \"../interfaces/IPoolAdapter.sol\";\nimport \"../interfaces/IConverterController.sol\";\nimport \"../interfaces/IDebtMonitor.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\nimport \"../interfaces/IBorrowManager.sol\";\nimport \"../interfaces/ITetuConverter.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"../libs/ConverterLogicLib.sol\";\n\n/// @notice Manage list of open borrow positions\ncontract DebtMonitor is IDebtMonitor, ControllableV3 {\n  using AppUtils for uint;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  struct CheckHealthFactorInputParams {\n    uint startIndex0;\n    uint maxCountToCheck;\n    uint maxCountToReturn;\n    uint healthFactorThreshold18;\n  }\n\n  //region ---------------------------------------------- Constants\n  string public constant DEBT_MONITOR_VERSION = \"1.0.4\";\n  /// @notice Allow {closeLiquidatedPosition} to close position with collateral amount less than given value\n  /// @dev For simplicity, this value is same for all assets (with any decimals).\n  uint public constant CLOSE_POSITION_GAP_TOKENS = 100;\n  //endregion ---------------------------------------------- Constants\n\n  //region ---------------------------------------------- Variables. Don't change names or ordering!\n  /// @notice Pool adapters with active borrow positions\n  /// @dev All these pool adapters should be enumerated during health-checking\n  address[] public positions;\n\n  /// @notice Pool adapter => block number of last call of onOpenPosition\n  mapping(address => uint) public positionLastAccess;\n\n  /// @notice List of opened positions for the given set (user, collateral, borrowToken)\n  /// @dev PoolAdapterKey(== keccak256(user, collateral, borrowToken)) => poolAdapters\n  mapping(uint => address[]) public poolAdapters;\n\n  /// @notice List of opened positions for the given user\n  /// @dev User => List of pool adapters\n  mapping(address => EnumerableSet.AddressSet) private _poolAdaptersForUser;\n\n  /// @notice Template pool adapter => list of ACTIVE pool adapters created on the base of the template\n  /// @dev We need it to prevent removing a pool from the borrow manager when the pool is in use\n  mapping(address => EnumerableSet.AddressSet) private _poolAdaptersForConverters;\n\n  //endregion ---------------------------------------------- Variables. Don't change names or ordering!\n\n  //region ---------------------------------------------- Events\n  event OnOpenPosition(address poolAdapter);\n  event OnClosePosition(address poolAdapter);\n  event OnCloseLiquidatedPosition(address poolAdapter, uint amountToPay);\n  //endregion ---------------------------------------------- Events\n\n  //region ---------------------------------------------- Initialization\n\n  function init(address controller_) external initializer {\n    __Controllable_init(controller_);\n  }\n  //endregion ---------------------------------------------- Initialization\n\n  //region ---------------------------------------------- Operations with positions\n\n  function isPositionOpened() external override view returns (bool) {\n    return positionLastAccess[msg.sender] != 0;\n  }\n\n  function isPositionOpenedEx(address poolAdapter) external override view returns (bool) {\n    return positionLastAccess[poolAdapter] != 0;\n  }\n\n\n  /// @notice Register new borrow position if it's not yet registered\n  /// @dev This function is called from a pool adapter after any borrow\n  function onOpenPosition() external override {\n    IBorrowManager borrowManager = IBorrowManager(IConverterController(controller()).borrowManager());\n    require(borrowManager.isPoolAdapter(msg.sender), AppErrors.POOL_ADAPTER_ONLY);\n\n    if (positionLastAccess[msg.sender] == 0) {\n      positionLastAccess[msg.sender] = block.number;\n      positions.push(msg.sender);\n\n      (address origin,\n      address user,\n      address collateralAsset,\n      address borrowAsset\n      ) = IPoolAdapter(msg.sender).getConfig();\n\n      poolAdapters[getPoolAdapterKey(user, collateralAsset, borrowAsset)].push(msg.sender);\n      _poolAdaptersForUser[user].add(msg.sender);\n\n      _poolAdaptersForConverters[origin].add(msg.sender);\n      emit OnOpenPosition(msg.sender);\n    }\n  }\n\n  /// @notice Unregister the borrow position if it's completely repaid\n  /// @dev This function is called from a pool adapter when the borrow is completely repaid\n  function onClosePosition() external override {\n    // This method should be called by pool adapters only\n    // we check it through positionLastAccess\n    require(\n      positionLastAccess[msg.sender] != 0,\n      AppErrors.BORROW_POSITION_IS_NOT_REGISTERED\n    );\n\n    (uint collateralAmount, uint amountToPay,,,,) = IPoolAdapter(msg.sender).getStatus();\n    require(collateralAmount == 0 && amountToPay == 0, AppErrors.ATTEMPT_TO_CLOSE_NOT_EMPTY_BORROW_POSITION);\n\n    _closePosition(msg.sender, false);\n    emit OnClosePosition(msg.sender);\n  }\n\n  /// @notice Remove the pool adapter from all lists of the opened positions\n  /// @param poolAdapter_ Pool adapter to be closed\n  /// @param markAsDirty_ Mark the pool adapter as \"dirty\" in borrow manager\n  ///                     to exclude the pool adapter from any new borrows\n  function _closePosition(address poolAdapter_, bool markAsDirty_) internal {\n    positionLastAccess[poolAdapter_] = 0;\n    AppUtils.removeItemFromArray(positions, poolAdapter_);\n    (address origin, address user, address collateralAsset, address borrowAsset) = IPoolAdapter(poolAdapter_).getConfig();\n\n    AppUtils.removeItemFromArray(poolAdapters[getPoolAdapterKey(user, collateralAsset, borrowAsset)], poolAdapter_);\n    _poolAdaptersForUser[user].remove(poolAdapter_);\n    _poolAdaptersForConverters[origin].remove(poolAdapter_);\n\n    if (markAsDirty_) {\n      IBorrowManager borrowManager = IBorrowManager(IConverterController(controller()).borrowManager());\n      // We have dropped away the pool adapter. It cannot be used any more for new borrows\n      // Mark the pool adapter as dirty in borrow manager to exclude the pool adapter from any new borrows\n      if (poolAdapter_ == borrowManager.getPoolAdapter(origin, user, collateralAsset, borrowAsset)) {\n        borrowManager.markPoolAdapterAsDirty(origin, user, collateralAsset, borrowAsset);\n      }\n    }\n  }\n\n  /// @notice Pool adapter has opened borrow, but full liquidation happens and we've lost all collateral\n  ///         Close position without paying the debt and never use the pool adapter again.\n  function closeLiquidatedPosition(address poolAdapter_) external override {\n    require(msg.sender == IConverterController(controller()).tetuConverter(), AppErrors.TETU_CONVERTER_ONLY);\n\n    (uint collateralAmount, uint amountToPay,,,,) = IPoolAdapter(poolAdapter_).getStatus();\n    require(collateralAmount < CLOSE_POSITION_GAP_TOKENS, AppErrors.CANNOT_CLOSE_LIVE_POSITION);\n    _closePosition(poolAdapter_, true);\n\n    emit OnCloseLiquidatedPosition(poolAdapter_, amountToPay);\n  }\n  //endregion ---------------------------------------------- Operations with positions\n\n  //region ---------------------------------------------- Detect unhealthy positions\n\n  /// @notice Enumerate {maxCountToCheck} pool adapters starting from {index0} and return unhealthy pool-adapters\n  ///         i.e. adapters with health factor below min allowed value\n  ///         It calculates two amounts: amount of borrow asset and amount of collateral asset\n  ///         To fix the health factor it's necessary to send EITHER one amount OR another one.\n  ///         There is special case: a liquidation happens inside the pool adapter.\n  ///         It means, that this is \"dirty\" pool adapter and this position must be closed and never used again.\n  ///         In this case, both amounts are zero (we need to make FULL repay)\n  /// @return nextIndexToCheck0 Index of next pool-adapter to check; 0: all pool-adapters were checked\n  /// @return outPoolAdapters List of pool adapters that should be reconverted\n  /// @return outAmountBorrowAsset What borrow-asset amount should be send to pool adapter to fix health factor\n  /// @return outAmountCollateralAsset What collateral-asset amount should be send to pool adapter to fix health factor\n  function checkHealth(\n    uint startIndex0,\n    uint maxCountToCheck,\n    uint maxCountToReturn\n  ) external view override returns (\n    uint nextIndexToCheck0,\n    address[] memory outPoolAdapters,\n    uint[] memory outAmountBorrowAsset,\n    uint[] memory outAmountCollateralAsset\n  ) {\n    return _checkHealthFactor(\n      CheckHealthFactorInputParams({\n        startIndex0: startIndex0,\n        maxCountToCheck: maxCountToCheck,\n        maxCountToReturn: maxCountToReturn,\n        healthFactorThreshold18: uint(IConverterController(controller()).minHealthFactor2()) * 10 ** (18 - 2)\n      })\n    );\n  }\n\n  function _checkHealthFactor(\n    CheckHealthFactorInputParams memory p\n  ) internal view returns (\n    uint nextIndexToCheck0,\n    address[] memory outPoolAdapters,\n    uint[] memory outAmountBorrowAsset,\n    uint[] memory outAmountCollateralAsset\n  ) {\n    IBorrowManager borrowManager = IBorrowManager(IConverterController(controller()).borrowManager());\n    uint countFoundItems = 0;\n    nextIndexToCheck0 = p.startIndex0;\n\n    outPoolAdapters = new address[](p.maxCountToReturn);\n    outAmountBorrowAsset = new uint[](p.maxCountToReturn);\n    outAmountCollateralAsset = new uint[](p.maxCountToReturn);\n\n    if (p.startIndex0 + p.maxCountToCheck > positions.length) {\n      p.maxCountToCheck = positions.length - p.startIndex0;\n    }\n\n    // enumerate all pool adapters\n    for (uint i = 0; i < p.maxCountToCheck; i = i.uncheckedInc()) {\n      nextIndexToCheck0 += 1;\n\n      // check if we need to make reconversion because the health factor is too low/high\n      IPoolAdapter pa = IPoolAdapter(positions[p.startIndex0 + i]);\n\n      (uint requiredBorrowAssetAmount,\n       uint requiredCollateralAssetAmount\n      ) = ConverterLogicLib.checkPositionHealth(pa, borrowManager, p.healthFactorThreshold18);\n\n      if (requiredBorrowAssetAmount != 0 || requiredCollateralAssetAmount != 0) {\n        outPoolAdapters[countFoundItems] = positions[p.startIndex0 + i];\n        outAmountBorrowAsset[countFoundItems] = requiredBorrowAssetAmount;\n        outAmountCollateralAsset[countFoundItems] = requiredCollateralAssetAmount;\n\n        countFoundItems += 1;\n\n        if (countFoundItems == p.maxCountToReturn) {\n          break;\n        }\n      }\n    }\n\n    if (nextIndexToCheck0 == positions.length) {\n      nextIndexToCheck0 = 0; // all items were checked\n    }\n\n    // we need to keep only found items in result array and remove others\n    return (nextIndexToCheck0,\n      countFoundItems == 0\n        ? new address[](0)\n        : AppUtils.removeLastItems(outPoolAdapters, countFoundItems),\n      countFoundItems == 0\n        ? new uint[](0)\n        : AppUtils.removeLastItems(outAmountBorrowAsset, countFoundItems),\n      countFoundItems == 0\n        ? new uint[](0)\n        : AppUtils.removeLastItems(outAmountCollateralAsset, countFoundItems)\n    );\n  }\n  //endregion ---------------------------------------------- Detect unhealthy positions\n\n  //region ---------------------------------------------- Views\n\n  /// @notice Get active borrows of the user with given collateral/borrowToken\n  /// @return poolAdaptersOut The instances of IPoolAdapter\n  function getPositions(\n    address user_,\n    address collateralToken_,\n    address borrowedToken_\n  ) external view override returns (\n    address[] memory poolAdaptersOut\n  ) {\n    address[] memory adapters = poolAdapters[getPoolAdapterKey(user_, collateralToken_, borrowedToken_)];\n    uint countAdapters = adapters.length;\n\n    poolAdaptersOut = new address[](countAdapters);\n\n    for (uint i = 0; i < countAdapters; i = i.uncheckedInc()) {\n      poolAdaptersOut[i] = adapters[i];\n    }\n\n    return poolAdaptersOut;\n  }\n\n  /// @notice Get active borrows of the given user\n  /// @return poolAdaptersOut The instances of IPoolAdapter\n  function getPositionsForUser(address user_) external view override returns (\n    address[] memory poolAdaptersOut\n  ) {\n    EnumerableSet.AddressSet storage set = _poolAdaptersForUser[user_];\n    uint countAdapters = set.length();\n\n    poolAdaptersOut = new address[](countAdapters);\n\n    for (uint i = 0; i < countAdapters; i = i.uncheckedInc()) {\n      poolAdaptersOut[i] = set.at(i);\n    }\n\n    return poolAdaptersOut;\n  }\n\n  /// @notice Return true if there is a least once active pool adapter created on the base of the {converter_}\n  function isConverterInUse(address converter_) external view override returns (bool) {\n    return _poolAdaptersForConverters[converter_].length() != 0;\n  }\n  //endregion ---------------------------------------------- Views\n\n  //region ---------------------------------------------- Utils\n  function getPoolAdapterKey(\n    address user_,\n    address collateral_,\n    address borrowToken_\n  ) public pure returns (uint){\n    return uint(keccak256(abi.encodePacked(user_, collateral_, borrowToken_)));\n  }\n  //endregion ---------------------------------------------- Utils\n\n  //region ---------------------------------------------- Access to arrays\n\n  /// @notice Get total count of pool adapters with opened positions\n  function getCountPositions() external view override returns (uint) {\n    return positions.length;\n  }\n\n  function poolAdaptersLength(\n    address user_,\n    address collateral_,\n    address borrowToken_\n  ) external view returns (uint) {\n    return poolAdapters[getPoolAdapterKey(user_, collateral_, borrowToken_)].length;\n  }\n  //endregion Access to arrays\n}"
    },
    "@tetu_io/tetu-converter/contracts/core/Keeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../libs/AppErrors.sol\";\nimport \"../libs/AppUtils.sol\";\nimport \"../interfaces/IHealthKeeperCallback.sol\";\nimport \"../interfaces/IConverterController.sol\";\nimport \"../interfaces/IDebtMonitor.sol\";\nimport \"../interfaces/IKeeperCallback.sol\";\nimport \"../integrations/gelato/IResolver.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @notice Executor + Resolver for Gelato\n///         to check health of opened positions and call requireRepay for unhealthy pool adapters\n///         Same keeper is also responsible for updating block-per-day value in controller.\ncontract Keeper is IHealthKeeperCallback, IResolver, ControllableV3 {\n  using AppUtils for uint;\n\n  //region ----------------------------------------------------- Constants\n  string public constant KEEPER_VERSION = \"1.0.2\";\n\n  /// @notice Max count of opened positions to be checked in single request\n  uint constant public MAX_COUNT_TO_CHECK = 80;\n\n  /// @notice Max count of unhealthy positions to be returned in single request\n  uint constant public MAX_COUNT_TO_RETURN = 1;\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Variables. Don't change names or ordering!\n  /// @notice Deprecated, not used\n  address public ops;\n  /// @notice Deprecated, not used\n  address payable public gelato;\n\n  /// @notice Period of auto-update of the blocksPerDay-value in seconds\n  ///         0 - auto-update checking is disabled\n  uint public blocksPerDayAutoUpdatePeriodSec; // i.e. 2 * 7 * 24 * 60 * 60 for 2 weeks\n\n  /// @notice Start index of pool adapter for next checkHealth-request\n  ///         We store here result of previous call of IDebtMonitor.checkHealth\n  uint256 public override nextIndexToCheck0;\n\n  /// @notice Operators are able to run fixHealth\n  mapping(address => bool) public operators;\n  //endregion ----------------------------------------------------- Variables. Don't change names or ordering!\n\n  //region ----------------------------------------------------- Events\n  event OnFixHealth(uint nextIndexToCheck0, address[] poolAdapters, uint[] amountBorrowAsset, uint[] amountCollateralAsset);\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Initialization\n  function init(address controller_, uint blocksPerDayAutoUpdatePeriodSec_) external initializer {\n    __Controllable_init(controller_);\n    // gelato = IOps(ops_).gelato(); // gelato is not used anymore\n    blocksPerDayAutoUpdatePeriodSec = blocksPerDayAutoUpdatePeriodSec_;\n  }\n\n  /// @notice Set period of auto-update of the blocksPerDay-value in seconds, 0 - auto-update checking is disabled\n  function setBlocksPerDayAutoUpdatePeriodSecs(uint periodSeconds) external {\n    require(IConverterController(controller()).governance() == msg.sender, AppErrors.GOVERNANCE_ONLY);\n\n    blocksPerDayAutoUpdatePeriodSec = periodSeconds;\n  }\n\n  function changeOperatorStatus(address operator, bool status) external {\n    require(IConverterController(controller()).governance() == msg.sender, AppErrors.GOVERNANCE_ONLY);\n    operators[operator] = status;\n  }\n  //endregion ----------------------------------------------------- Initialization\n\n  //region ----------------------------------------------------- Read-only gelato-resolver\n\n  /// @notice Check health of opened positions starting from nth-position, where n = nextIndexToCheck0\n  /// @dev Read-only checker function called by Gelato.\n  /// @return canExecOut True if it's necessary to call rebalancing write-function\n  /// @return execPayloadOut Wrapped call of the rebalancing function (it will be called by Gelato)\n  function checker() external view override returns (\n    bool canExecOut,\n    bytes memory execPayloadOut\n  ) {\n    IConverterController _controller = IConverterController(controller());\n    IDebtMonitor debtMonitor = IDebtMonitor(_controller.debtMonitor());\n\n    // IHealthKeeperCallback is implemented inside this class\n    // but we access it through controller to be able to split checker and executor in unit tests\n    IHealthKeeperCallback keeper = IHealthKeeperCallback(_controller.keeper());\n    uint startIndex = keeper.nextIndexToCheck0();\n\n    (uint newNextIndexToCheck0,\n      address[] memory outPoolAdapters,\n      uint[] memory outAmountBorrowAsset,\n      uint[] memory outAmountCollateralAsset\n    ) = debtMonitor.checkHealth(startIndex, MAX_COUNT_TO_CHECK, MAX_COUNT_TO_RETURN);\n\n    // it's necessary to run writable fixHealth() ...\n    canExecOut =\n      // ... if there is unhealthy pool adapter\n      outPoolAdapters.length != 0\n\n      // ... if we cannot check all adapters in one pass; we've checked a one portion, now we need to check the other portions\n      || newNextIndexToCheck0 != startIndex\n\n      /// ... if it's the time to recalculate blocksPerDay value\n      || (blocksPerDayAutoUpdatePeriodSec != 0\n        && _controller.isBlocksPerDayAutoUpdateRequired(blocksPerDayAutoUpdatePeriodSec)\n      );\n\n    execPayloadOut = abi.encodeWithSelector(\n      IHealthKeeperCallback.fixHealth.selector,\n      newNextIndexToCheck0,\n      outPoolAdapters,\n      outAmountBorrowAsset,\n      outAmountCollateralAsset\n    );\n  }\n\n  //endregion ----------------------------------------------------- Read-only gelato-resolver\n\n  //region ----------------------------------------------------- Executor to fix unhealthy pool adapters\n\n  /// @notice Make rebalancing of the given unhealthy positions (a position == pool adapter)\n  ///         Call TetuConverter.requireRepay for each position\n  function fixHealth(\n    uint nextIndexToCheck0_,\n    address[] calldata poolAdapters_,\n    uint[] calldata amountBorrowAsset_,\n    uint[] calldata amountCollateralAsset_\n  ) external override {\n    require(operators[msg.sender], AppErrors.GELATO_ONLY_OPS);\n\n    IConverterController _controller = IConverterController(controller());\n\n    uint len = poolAdapters_.length;\n    require(len == amountBorrowAsset_.length && len == amountCollateralAsset_.length, AppErrors.WRONG_LENGTHS);\n\n    if (nextIndexToCheck0 != nextIndexToCheck0_) {\n      nextIndexToCheck0 = nextIndexToCheck0_;\n    }\n\n    if (len != 0) {\n      IKeeperCallback keeperCallback = IKeeperCallback(_controller.tetuConverter());\n      for (uint i = 0; i < len; i = i.uncheckedInc()) {\n        keeperCallback.requireRepay(amountBorrowAsset_[i], amountCollateralAsset_[i], poolAdapters_[i]);\n      }\n    }\n\n    uint period = blocksPerDayAutoUpdatePeriodSec;\n    if (period != 0 && _controller.isBlocksPerDayAutoUpdateRequired(period)) {\n      _controller.updateBlocksPerDay(period);\n    }\n\n    emit OnFixHealth(nextIndexToCheck0_, poolAdapters_, amountBorrowAsset_, amountCollateralAsset_);\n  }\n\n  //endregion ----------------------------------------------------- Executor to fix unhealthy pool adapters\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/core/SwapManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../libs/AppErrors.sol\";\nimport \"../libs/AppDataTypes.sol\";\nimport \"../libs/SwapLib.sol\";\nimport \"../openzeppelin/IERC20Metadata.sol\";\nimport \"../openzeppelin/IERC20.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../interfaces/ISwapManager.sol\";\nimport \"../interfaces/IConverterController.sol\";\nimport \"../interfaces/ISwapConverter.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\nimport \"../interfaces/ISimulateProvider.sol\";\nimport \"../interfaces/ISwapSimulator.sol\";\nimport \"../interfaces/IRequireAmountBySwapManagerCallback.sol\";\nimport \"../integrations/tetu/ITetuLiquidator.sol\";\nimport \"../proxy/ControllableV3.sol\";\n\n/// @title Contract to find the best swap and make the swap\n/// @notice Combines Manager and Converter\n/// @author bogdoslav\ncontract SwapManager is ControllableV3, ISwapManager, ISwapConverter, ISimulateProvider, ISwapSimulator {\n  using SafeERC20 for IERC20;\n\n  //region ----------------------------------------------------- Constants\n  string public constant SWAP_MANAGER_VERSION = \"1.0.0\";\n  int public constant APR_NUMERATOR = 10 ** 18;\n\n  uint public constant PRICE_IMPACT_NUMERATOR = SwapLib.PRICE_IMPACT_NUMERATOR;\n  uint public constant PRICE_IMPACT_TOLERANCE_DEFAULT = SwapLib.PRICE_IMPACT_TOLERANCE_DEFAULT;\n\n  /// @notice Optional price impact tolerance for assets. If not set, PRICE_IMPACT_TOLERANCE_DEFAULT is used.\n  ///         asset => price impact tolerance (decimals are set by PRICE_IMPACT_NUMERATOR)\n  mapping(address => uint) public priceImpactTolerances;\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Events\n  event OnSwap(address sourceToken, uint sourceAmount, address targetToken, address receiver, uint outputAmount);\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Initialization and setup\n  function init(address controller_) external initializer {\n    __Controllable_init(controller_);\n  }\n\n  /// @notice Set custom price impact tolerance for the asset\n  /// @param priceImpactTolerance Set 0 to use default price impact tolerance for the {asset}.\n  ///                             Decimals = PRICE_IMPACT_NUMERATOR\n  function setPriceImpactTolerance(address asset_, uint priceImpactTolerance) external {\n    IConverterController _controller = IConverterController(controller());\n    require(msg.sender == _controller.governance(), AppErrors.GOVERNANCE_ONLY);\n    require(priceImpactTolerance <= PRICE_IMPACT_NUMERATOR, AppErrors.INCORRECT_VALUE);\n\n    priceImpactTolerances[asset_] = priceImpactTolerance;\n  }\n  //endregion ----------------------------------------------------- Initialization and setup\n\n  //region ----------------------------------------------------- Return best amount for swap\n  /// @notice Find a way to convert collateral asset to borrow asset in most efficient way\n  ///         The algo to convert source amount S1:\n  ///         - make real swap in static-call, get result max-target-amount\n  ///         - recalculate max-target-amount to source amount using prices from a PriceOracle = S2\n  ///         Result APR = 2 * (S1 - S2) / S1\n  /// @dev This is a writable function with read-only behavior\n  ///      because to simulate real swap the function should be writable.\n  /// @param sourceAmountApprover_ A contract which has approved {sourceAmount_} to TetuConverter\n  /// @param sourceAmount_ Amount in terms of {sourceToken_} to be converter to {targetToken_}\n  ///                      This amount must be approved by {sourceAmountApprover_} to TetuConverter before the call\n  /// @return converter Address of ISwapConverter\n  ///         If SwapManager cannot find a conversion way,\n  ///         it returns converter == 0 (in the same way as ITetuConverter)\n  function getConverter(\n    address sourceAmountApprover_,\n    address sourceToken_,\n    uint sourceAmount_,\n    address targetToken_\n  ) external override returns (\n    address converter,\n    uint maxTargetAmount\n  ) {\n    IConverterController _controller = IConverterController(controller());\n    require(msg.sender == _controller.tetuConverter(), AppErrors.TETU_CONVERTER_ONLY);\n\n    // Simulate real swap of source amount to max target amount\n    // We call SwapManager.simulateSwap() here as an external call\n    // and than revert all changes back\n    // We need additional try because !PRICE error can happen if a price impact is too high\n    try ISimulateProvider(address(this)).simulate(\n      address(this),\n      abi.encodeWithSelector(\n        ISwapSimulator.simulateSwap.selector,\n        sourceAmountApprover_,\n        sourceToken_,\n        sourceAmount_,\n        targetToken_\n      )\n    ) returns (bytes memory response) {\n      maxTargetAmount = abi.decode(response, (uint));\n    } catch {\n      // we can have i.e. !PRICE error (the price impact is too high)\n      // it means, there is no way to make the conversion with acceptable price impact\n      return (address(0), 0);\n    }\n\n    return maxTargetAmount == 0\n      ? (address(0), 0)\n      : (address(this), maxTargetAmount);\n  }\n  //endregion ----------------------------------------------------- Return best amount for swap\n\n  //region ----------------------------------------------------- ISwapConverter Implementation\n  function getConversionKind() override external pure returns (AppDataTypes.ConversionKind) {\n    return AppDataTypes.ConversionKind.SWAP_1;\n  }\n\n  /// @notice Swap {amountIn_} of {sourceToken_} to {targetToken_} and send result amount to {receiver_}\n  ///         The swapping is made using TetuLiquidator.\n  /// @return amountOut The amount that has been sent to the receiver\n  function swap(address sourceToken_, uint amountIn_, address targetToken_, address receiver_) override external returns (\n    uint amountOut\n  ) {\n    IConverterController _controller = IConverterController(controller());\n    require(msg.sender == _controller.tetuConverter(), AppErrors.TETU_CONVERTER_ONLY);\n\n    ITetuLiquidator tetuLiquidator = ITetuLiquidator(_controller.tetuLiquidator());\n    uint targetTokenBalanceBefore = IERC20(targetToken_).balanceOf(address(this));\n\n    IERC20(sourceToken_).safeApprove(address(tetuLiquidator), amountIn_);\n\n    // If price impact is too big, getConverter will return high APR\n    // So TetuConverter will select borrow, not swap.\n    // If the swap was selected anyway, it is wrong case.\n    // liquidate() will revert here and it's ok.\n\n    tetuLiquidator.liquidate(sourceToken_, targetToken_, amountIn_, _getPriceImpactTolerance(sourceToken_));\n    amountOut = IERC20(targetToken_).balanceOf(address(this)) - targetTokenBalanceBefore;\n\n    IERC20(targetToken_).safeTransfer(receiver_, amountOut);\n\n    // The result amount cannot be too different from the value calculated directly using price oracle prices\n    require(\n      SwapLib.isConversionValid(\n        IPriceOracle(_controller.priceOracle()),\n        sourceToken_,\n        amountIn_,\n        targetToken_,\n        amountOut,\n        _getPriceImpactTolerance(targetToken_)\n      ),\n      AppErrors.TOO_HIGH_PRICE_IMPACT\n    );\n    emit OnSwap(sourceToken_, amountIn_, targetToken_, receiver_, amountOut);\n  }\n\n  /// @notice Make real swap to know result amount\n  ///         but exclude any additional operations\n  ///         like \"sending the result amount to a receiver\" or \"emitting any events\".\n  /// @dev This function should be called only inside static call to know result amount.\n  /// @param sourceAmountApprover_ A contract which has approved source amount to TetuConverter\n  ///                              and called a function findSwapStrategy\n  /// @param sourceAmount_ Amount in terms of {sourceToken_} to be converter to {targetToken_}\n  /// @return amountOut Result amount in terms of {targetToken_} after conversion\n  function simulateSwap(\n    address sourceAmountApprover_,\n    address sourceToken_,\n    uint sourceAmount_,\n    address targetToken_\n  ) external override returns (uint) {\n    IConverterController _controller = IConverterController(controller());\n    require(msg.sender == _controller.swapManager(), AppErrors.ONLY_SWAP_MANAGER);\n\n    IRequireAmountBySwapManagerCallback(_controller.tetuConverter()).onRequireAmountBySwapManager(\n      sourceAmountApprover_,\n      sourceToken_,\n      sourceAmount_\n    );\n\n    uint targetTokenBalanceBefore = IERC20(targetToken_).balanceOf(address(this));\n\n    ITetuLiquidator tetuLiquidator = ITetuLiquidator(_controller.tetuLiquidator());\n    IERC20(sourceToken_).safeApprove(address(tetuLiquidator), sourceAmount_);\n    tetuLiquidator.liquidate(sourceToken_, targetToken_, sourceAmount_, _getPriceImpactTolerance(sourceToken_));\n    return IERC20(targetToken_).balanceOf(address(this)) - targetTokenBalanceBefore;\n  }\n\n  /// @notice Calculate APR using known {sourceToken_} and known {targetAmount_}\n  ///         as 2 * loss / sourceAmount\n  ///         loss - conversion loss, we use 2 multiplier to take into account losses for there and back conversions.\n  /// @param sourceAmount_ Source amount before conversion, in terms of {sourceToken_}\n  /// @param targetAmount_ Result of conversion. The amount is in terms of {targetToken_}\n  function getApr18(\n    address sourceToken_,\n    uint sourceAmount_,\n    address targetToken_,\n    uint targetAmount_\n  ) external view override returns (int) {\n    uint targetAmountInSourceTokens = SwapLib.convertUsingPriceOracle(\n      IPriceOracle(IConverterController(controller()).priceOracle()),\n      targetToken_,\n      targetAmount_,\n      sourceToken_\n    );\n\n    // calculate result APR\n    // we need to multiple one-way-loss on to to get loss for there-and-back conversion\n    return 2 * (int(sourceAmount_) - int(targetAmountInSourceTokens)) * APR_NUMERATOR / int(sourceAmount_);\n  }\n\n  /// @notice Return custom or default price impact tolerance for the asset\n  function getPriceImpactTolerance(address asset_) external view override returns (uint priceImpactTolerance) {\n    return _getPriceImpactTolerance(asset_);\n  }\n  //endregion ----------------------------------------------------- ISwapConverter Implementation\n\n  //region ----------------------------------------------------- View functions\n  /// @notice Return custom or default price impact tolerance for the asset\n  function _getPriceImpactTolerance(address asset_) internal view returns (uint priceImpactTolerance) {\n    priceImpactTolerance = priceImpactTolerances[asset_];\n    if (priceImpactTolerance == 0) {\n      priceImpactTolerance = PRICE_IMPACT_TOLERANCE_DEFAULT;\n    }\n  }\n  //endregion ----------------------------------------------------- View functions\n\n  //region ----------------------------------------------------- Swap simulation\n  //           Simulate real swap\n  //           using gnosis simulate() and simulateAndRevert() functions\n  //           They are slightly more efficient than try/catch approach\n  //           see SimulateTesterTest.ts\n\n  /// Source: https://github.com/gnosis/util-contracts/blob/main/contracts/storage/StorageSimulation.sol\n  ///\n  /// @dev Performs a delegetecall on a targetContract in the context of self.\n  /// Internally reverts execution to avoid side effects (making it static).\n  ///\n  /// This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n  /// Specifically, the `returndata` after a call to this method will be:\n  /// `success:bool || response.length:uint256 || response:bytes`.\n  ///\n  /// @param targetContract Address of the contract containing the code to execute.\n  /// @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n  function simulateAndRevert(\n    address targetContract,\n    bytes memory calldataPayload\n  ) public {\n    // there are no restrictions for the msg.sender\n\n    assembly {\n      let success := delegatecall(\n      gas(),\n      targetContract,\n      add(calldataPayload, 0x20),\n      mload(calldataPayload),\n      0,\n      0\n      )\n\n      mstore(0x00, success)\n      mstore(0x20, returndatasize())\n      returndatacopy(0x40, 0, returndatasize())\n      revert(0, add(returndatasize(), 0x40))\n    }\n  }\n\n  ///  Source: https://github.com/gnosis/util-contracts/blob/main/contracts/storage/StorageAccessible.sol\n  ///  @dev Simulates a delegate call to a target contract in the context of self.\n  ///\n  ///  Internally reverts execution to avoid side effects (making it static).\n  ///  Catches revert and returns encoded result as bytes.\n  ///\n  ///  @param targetContract Address of the contract containing the code to execute.\n  ///  @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n  function simulate(\n    address targetContract,\n    bytes calldata calldataPayload\n  ) external override returns (bytes memory response) {\n    // there are no restrictions for the msg.sender\n\n    // Suppress compiler warnings about not using parameters, while allowing\n    // parameters to keep names for documentation purposes. This does not\n    // generate code.\n    targetContract;\n    calldataPayload;\n\n    assembly {\n      let internalCalldata := mload(0x40)\n    // Store `simulateAndRevert.selector`.\n      mstore(internalCalldata, \"\\xb4\\xfa\\xba\\x09\")\n    // Abuse the fact that both this and the internal methods have the\n    // same signature, and differ only in symbol name (and therefore,\n    // selector) and copy calldata directly. This saves us approximately\n    // 250 bytes of code and 300 gas at runtime over the\n    // `abi.encodeWithSelector` builtin.\n      calldatacopy(\n      add(internalCalldata, 0x04),\n      0x04,\n      sub(calldatasize(), 0x04)\n      )\n\n    // `pop` is required here by the compiler, as top level expressions\n    // can't have return values in inline assembly. `call` typically\n    // returns a 0 or 1 value indicated whether or not it reverted, but\n    // since we know it will always revert, we can safely ignore it.\n      pop(call(\n      gas(),\n      address(),\n      0,\n      internalCalldata,\n      calldatasize(),\n      // The `simulateAndRevert` call always reverts, and instead\n      // encodes whether or not it was successful in the return data.\n      // The first 32-byte word of the return data contains the\n      // `success` value, so write it to memory address 0x00 (which is\n      // reserved Solidity scratch space and OK to use).\n      0x00,\n      0x20\n      ))\n\n\n    // Allocate and copy the response bytes, making sure to increment\n    // the free memory pointer accordingly (in case this method is\n    // called as an internal function). The remaining `returndata[0x20:]`\n    // contains the ABI encoded response bytes, so we can just write it\n    // as is to memory.\n      let responseSize := sub(returndatasize(), 0x20)\n      response := mload(0x40)\n      mstore(0x40, add(response, responseSize))\n      returndatacopy(response, 0x20, responseSize)\n\n      if iszero(mload(0x00)) {\n        revert(add(response, 0x20), mload(response))\n      }\n    }\n  }\n  //endregion ----------------------------------------------------- Swap simulation\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/core/TetuConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../libs/AppDataTypes.sol\";\nimport \"../libs/AppErrors.sol\";\nimport \"../libs/AppUtils.sol\";\nimport \"../libs/EntryKinds.sol\";\nimport \"../libs/SwapLib.sol\";\nimport \"../openzeppelin/IERC20Metadata.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/IERC20.sol\";\nimport \"../openzeppelin/ReentrancyGuard.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/IBorrowManager.sol\";\nimport \"../interfaces/ISwapManager.sol\";\nimport \"../interfaces/ITetuConverter.sol\";\nimport \"../interfaces/IPlatformAdapter.sol\";\nimport \"../interfaces/IPoolAdapter.sol\";\nimport \"../interfaces/IConverterController.sol\";\nimport \"../interfaces/IDebtMonitor.sol\";\nimport \"../interfaces/IConverter.sol\";\nimport \"../interfaces/ISwapConverter.sol\";\nimport \"../interfaces/IKeeperCallback.sol\";\nimport \"../interfaces/ITetuConverterCallback.sol\";\nimport \"../interfaces/IRequireAmountBySwapManagerCallback.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\nimport \"../integrations/tetu/ITetuLiquidator.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"../libs/ConverterLogicLib.sol\";\nimport \"../libs/TetuConverterLogicLib.sol\";\n\n/// @notice Main application contract\ncontract TetuConverter is ControllableV3, ITetuConverter, IKeeperCallback, IRequireAmountBySwapManagerCallback, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using AppUtils for uint;\n\n  //region ----------------------------------------------------- Constants\n  string public constant TETU_CONVERTER_VERSION = \"1.1.0\";\n  /// @notice After additional borrow result health factor should be near to target value, the difference is limited.\n  uint constant public ADDITIONAL_BORROW_DELTA_DENOMINATOR = 1;\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Data types\n  struct RepayLocal {\n    address[] poolAdapters;\n    uint len;\n    uint debtGap;\n    IPoolAdapter pa;\n    uint totalDebtForPoolAdapter;\n    bool debtGapRequired;\n    IConverterController controller;\n  }\n\n  /// @notice Local vars for {findConversionStrategy}\n  struct FindConversionStrategyLocal {\n    address[] borrowConverters;\n    address user;\n    address swapConverter;\n    IBorrowManager borrowManager;\n    uint[] borrowSourceAmounts;\n    uint[] borrowTargetAmounts;\n    int[] borrowAprs18;\n    uint swapSourceAmount;\n    uint swapTargetAmount;\n    int swapApr18;\n  }\n  //endregion ----------------------------------------------------- Data types\n\n  //region ----------------------------------------------------- Events\n  event OnSwap(address signer, address converter, address sourceAsset, uint sourceAmount, address targetAsset, address receiver, uint targetAmountOut);\n  event OnBorrow(address poolAdapter, uint collateralAmount, uint amountToBorrow, address receiver, uint borrowedAmountOut);\n  event OnRepayBorrow(address poolAdapter, uint amountToRepay, address receiver, bool closePosition);\n\n  /// @notice A part of target amount cannot be repaid or swapped\n  ///         so it was just returned back to receiver as is\n  event OnRepayReturn(address asset, address receiver, uint amount);\n  event OnClaimRewards(address poolAdapter, address rewardsToken, uint amount, address receiver);\n  event OnRepayTheBorrow(address poolAdapter, uint collateralOut, uint repaidAmountOut);\n  event OnSalvage(address receiver, address token, uint amount);\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Initialization\n  function init(address controller_) external initializer {\n    __Controllable_init(controller_);\n  }\n  //endregion ----------------------------------------------------- Initialization\n\n  //region ----------------------------------------------------- Access\n  function _getControllerWhitelistedOnly() internal view returns (IConverterController controllerOut) {\n    controllerOut = IConverterController(controller());\n    require(controllerOut.isWhitelisted(msg.sender), AppErrors.OUT_OF_WHITE_LIST);\n  }\n\n  function _getControllerGovernanceOnly() internal view returns (IConverterController controllerOut) {\n    controllerOut = IConverterController(controller());\n    require(msg.sender == controllerOut.governance(), AppErrors.GOVERNANCE_ONLY);\n  }\n  //endregion ----------------------------------------------------- Access\n\n  //region ----------------------------------------------------- Find best strategy for conversion\n\n  /// @inheritdoc ITetuConverter\n  function findConversionStrategy(\n    bytes memory entryData_,\n    address sourceToken_,\n    uint amountIn_,\n    address targetToken_,\n    uint periodInBlocks_\n  ) external override returns (\n    address converter,\n    uint collateralAmountOut,\n    uint amountToBorrowOut,\n    int apr18\n  ) {\n    require(amountIn_ != 0, AppErrors.ZERO_AMOUNT);\n    require(periodInBlocks_ != 0, AppErrors.INCORRECT_VALUE);\n\n    IConverterController _controller = _getControllerWhitelistedOnly();\n\n    FindConversionStrategyLocal memory p;\n    if (!_controller.paused()) {\n      p.borrowManager = IBorrowManager(_controller.borrowManager());\n\n      // little gas optimization: skip any checking of exist debts if the user doesn't have any debts at all\n      p.user = _controller.rebalanceOnBorrowEnabled()\n        && IDebtMonitor(_controller.debtMonitor()).getPositions(msg.sender, sourceToken_, targetToken_).length != 0\n        ? msg.sender\n        : address(0);\n\n      (p.borrowConverters,\n        p.borrowSourceAmounts,\n        p.borrowTargetAmounts,\n        p.borrowAprs18\n      ) = p.borrowManager.findConverter(entryData_, p.user, sourceToken_, targetToken_, amountIn_, periodInBlocks_);\n\n      (p.swapConverter,\n        p.swapSourceAmount,\n        p.swapTargetAmount,\n        p.swapApr18) = _findSwapStrategy(_controller, entryData_, sourceToken_, amountIn_, targetToken_);\n    }\n\n    if (p.borrowConverters.length == 0) {\n      return (p.swapConverter == address(0))\n        ? (address(0), uint(0), uint(0), int(0))\n        : (p.swapConverter, p.swapSourceAmount, p.swapTargetAmount, p.swapApr18);\n    } else {\n      if (p.swapConverter == address(0)) {\n        return (p.borrowConverters[0], p.borrowSourceAmounts[0], p.borrowTargetAmounts[0], p.borrowAprs18[0]);\n      } else {\n        return (p.swapApr18 > p.borrowAprs18[0])\n          ? (p.borrowConverters[0], p.borrowSourceAmounts[0], p.borrowTargetAmounts[0], p.borrowAprs18[0])\n          : (p.swapConverter, p.swapSourceAmount, p.swapTargetAmount, p.swapApr18);\n      }\n    }\n  }\n\n  /// @inheritdoc ITetuConverter\n  function findBorrowStrategies(\n    bytes memory entryData_,\n    address sourceToken_,\n    uint amountIn_,\n    address targetToken_,\n    uint periodInBlocks_\n  ) external view override returns (\n    address[] memory converters,\n    uint[] memory collateralAmountsOut,\n    uint[] memory amountToBorrowsOut,\n    int[] memory aprs18\n  ) {\n    require(amountIn_ != 0, AppErrors.ZERO_AMOUNT);\n    require(periodInBlocks_ != 0, AppErrors.INCORRECT_VALUE);\n\n    IConverterController _controller = IConverterController(controller());\n    if (_controller.paused()) {\n      return (converters, collateralAmountsOut, amountToBorrowsOut, aprs18); // no conversion is available\n    } else {\n    // little gas optimization: skip any checking of exist debts if the user doesn't have any debts at all\n      address user = _controller.rebalanceOnBorrowEnabled()\n        && IDebtMonitor(_controller.debtMonitor()).getPositions(msg.sender, sourceToken_, targetToken_).length != 0\n        ? msg.sender\n        : address(0);\n\n      IBorrowManager borrowManager = IBorrowManager(_controller.borrowManager());\n      return borrowManager.findConverter(entryData_, user, sourceToken_, targetToken_, amountIn_, periodInBlocks_);\n    }\n  }\n\n  /// @inheritdoc ITetuConverter\n  function findSwapStrategy(bytes memory entryData_, address sourceToken_, uint amountIn_, address targetToken_) external override returns (\n    address converter,\n    uint sourceAmountOut,\n    uint targetAmountOut,\n    int apr18\n  ) {\n    require(amountIn_ != 0, AppErrors.ZERO_AMOUNT);\n\n    IConverterController _controller = _getControllerWhitelistedOnly();\n    return _controller.paused()\n      ? (converter, sourceAmountOut, targetAmountOut, apr18) // no conversion is available\n      : _findSwapStrategy(_controller, entryData_, sourceToken_, amountIn_, targetToken_);\n  }\n\n  /// @notice Calculate amount to swap according to the given {entryData_} and estimate result amount of {targetToken_}\n  function _findSwapStrategy(\n    IConverterController controller_,\n    bytes memory entryData_,\n    address sourceToken_,\n    uint amountIn_,\n    address targetToken_\n  ) internal returns (\n    address converter,\n    uint sourceAmountOut,\n    uint targetAmountOut,\n    int apr18\n  ) {\n    uint entryKind = EntryKinds.getEntryKind(entryData_);\n    if (entryKind == EntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\n      // Split {sourceAmount_} on two parts: C1 and C2. Swap C2 => {targetAmountOut}\n      // Result cost of {targetAmountOut} and C1 should be equal or almost equal\n      // For simplicity we assume here that swap doesn't have any lost:\n      // if S1 is swapped to S2 then costs of S1 and S2 are equal\n      sourceAmountOut = EntryKinds.getCollateralAmountToConvert(entryData_, amountIn_, 1, 1);\n    } else {\n      sourceAmountOut = amountIn_;\n    }\n\n    ISwapManager swapManager = ISwapManager(controller_.swapManager());\n    (converter, targetAmountOut) = swapManager.getConverter(msg.sender, sourceToken_, sourceAmountOut, targetToken_);\n    if (converter != address(0)) {\n      apr18 = swapManager.getApr18(sourceToken_, sourceAmountOut, targetToken_, targetAmountOut);\n    }\n\n    return (converter, sourceAmountOut, targetAmountOut, apr18);\n  }\n  //endregion ----------------------------------------------------- Find best strategy for conversion\n\n  //region ----------------------------------------------------- Make conversion, open position\n\n  /// @inheritdoc ITetuConverter\n  function borrow(\n    address converter_,\n    address collateralAsset_,\n    uint collateralAmount_,\n    address borrowAsset_,\n    uint amountToBorrow_,\n    address receiver_\n  ) external override nonReentrant returns (\n    uint borrowedAmountOut\n  ) {\n    IConverterController _controller = _getControllerWhitelistedOnly();\n    require(receiver_ != address(0) && converter_ != address(0), AppErrors.ZERO_ADDRESS);\n    require(collateralAmount_ != 0 && amountToBorrow_ != 0, AppErrors.ZERO_AMOUNT);\n\n    IERC20(collateralAsset_).safeTransferFrom(msg.sender, address(this), collateralAmount_);\n    IBorrowManager borrowManager = IBorrowManager(_controller.borrowManager());\n\n    AppDataTypes.ConversionKind conversionKind = IConverter(converter_).getConversionKind();\n    if (conversionKind == AppDataTypes.ConversionKind.BORROW_2) {\n      // get exist or register new pool adapter\n      address poolAdapter = borrowManager.getPoolAdapter(converter_, msg.sender, collateralAsset_, borrowAsset_);\n\n      if (poolAdapter != address(0)) {\n        (,, uint healthFactor18,,,) = IPoolAdapter(poolAdapter).getStatus();\n        ConverterLogicLib.HealthStatus status = ConverterLogicLib.getHealthStatus(healthFactor18, _controller.minHealthFactor2());\n        if (status == ConverterLogicLib.HealthStatus.DIRTY_1) {\n          // the pool adapter is unhealthy, we should mark it as dirty and create new pool adapter for the borrow\n          borrowManager.markPoolAdapterAsDirty(converter_, msg.sender, collateralAsset_, borrowAsset_);\n          poolAdapter = address(0);\n        }\n      }\n\n      // create new pool adapter if we don't have ready-to-borrow one\n      if (poolAdapter == address(0)) {\n        poolAdapter = borrowManager.registerPoolAdapter(converter_, msg.sender, collateralAsset_, borrowAsset_);\n\n        // TetuConverter doesn't keep assets on its balance, so it's safe to use infinity approve\n        IERC20(collateralAsset_).safeApprove(poolAdapter, 2 ** 255); // 2*255 is more gas-efficient than type(uint).max\n        IERC20(borrowAsset_).safeApprove(poolAdapter, 2 ** 255); // 2*255 is more gas-efficient than type(uint).max\n      }\n\n      // borrow target-amount and transfer borrowed amount to the receiver, infinity approve is assumed\n      borrowedAmountOut = IPoolAdapter(poolAdapter).borrow(collateralAmount_, amountToBorrow_, receiver_);\n      emit OnBorrow(poolAdapter, collateralAmount_, amountToBorrow_, receiver_, borrowedAmountOut);\n    } else if (conversionKind == AppDataTypes.ConversionKind.SWAP_1) {\n      require(converter_ == _controller.swapManager(), AppErrors.INCORRECT_CONVERTER_TO_SWAP);\n      borrowedAmountOut = _makeSwap(converter_, collateralAsset_, collateralAmount_, borrowAsset_, receiver_);\n    } else {\n      revert(AppErrors.UNSUPPORTED_VALUE);\n    }\n  }\n\n  /// @notice Transfer {sourceAmount_} to swap-converter, make swap, return result target amount\n  function _makeSwap(address swapConverter, address sourceAsset_, uint amountIn, address targetAsset_, address receiver_) internal returns (\n    uint amountOut\n  ) {\n    IERC20(sourceAsset_).safeTransfer(swapConverter, amountIn);\n    amountOut = ISwapConverter(swapConverter).swap(sourceAsset_, amountIn, targetAsset_, receiver_);\n    emit OnSwap(msg.sender, swapConverter, sourceAsset_, amountIn, targetAsset_, receiver_, amountOut);\n  }\n  //endregion ----------------------------------------------------- Make conversion, open position\n\n  //region ----------------------------------------------------- Make repay, close position\n\n  /// @inheritdoc ITetuConverter\n  function repay(address collateralAsset_, address borrowAsset_, uint amountToRepay_, address receiver_) external override nonReentrant returns (\n    uint collateralAmountOut,\n    uint returnedBorrowAmountOut,\n    uint swappedLeftoverCollateralOut,\n    uint swappedLeftoverBorrowOut\n  ) {\n    RepayLocal memory v;\n\n    v.controller = _getControllerWhitelistedOnly();\n    require(receiver_ != address(0), AppErrors.ZERO_ADDRESS);\n\n    // ensure that we have received required amount\n    require(amountToRepay_ <= IERC20(borrowAsset_).balanceOf(address(this)), AppErrors.WRONG_AMOUNT_RECEIVED);\n\n    // we will decrease amountToRepay_ in the code (to avoid creation additional variable)\n    // it shows how much is left to convert from borrow asset to collateral asset\n\n    // we need to repay exact amount using any pool adapters; simplest strategy: use first available pool adapter\n    v.poolAdapters = IDebtMonitor(v.controller.debtMonitor()).getPositions(msg.sender, collateralAsset_, borrowAsset_);\n    v.len = v.poolAdapters.length;\n    v.debtGap = v.controller.debtGap();\n\n    // at first repay debts for any opened positions, repay don't make any rebalancing here\n    for (uint i; i < v.len; i = i.uncheckedInc()) {\n      if (amountToRepay_ == 0) break;\n      v.pa = IPoolAdapter(v.poolAdapters[i]);\n      v.pa.updateStatus();\n\n      (, v.totalDebtForPoolAdapter,,,, v.debtGapRequired) = v.pa.getStatus();\n\n      if (v.totalDebtForPoolAdapter == 0) {\n        // remove empty adapters\n        IDebtMonitor(v.controller.debtMonitor()).closeLiquidatedPosition(v.poolAdapters[i]);\n        continue;\n      }\n\n      if (v.debtGapRequired) {\n        // we assume here, that amountToRepay_ includes all required dept-gaps\n        v.totalDebtForPoolAdapter = TetuConverterLogicLib.getAmountWithDebtGap(v.totalDebtForPoolAdapter, v.debtGap);\n      }\n      uint amountToPayToPoolAdapter = amountToRepay_ >= v.totalDebtForPoolAdapter\n        ? v.totalDebtForPoolAdapter\n        : amountToRepay_;\n\n      // make repayment, assume infinity approve: IERC20(borrowAsset_).safeApprove(address(pa), amountToPayToPoolAdapter);\n      bool closePosition = amountToPayToPoolAdapter == v.totalDebtForPoolAdapter;\n      collateralAmountOut += v.pa.repay(amountToPayToPoolAdapter, receiver_, closePosition);\n      amountToRepay_ -= amountToPayToPoolAdapter;\n\n      emit OnRepayBorrow(address(v.pa), amountToPayToPoolAdapter, receiver_, closePosition);\n    }\n\n    // if all debts were paid but we still have some amount of borrow asset\n    // let's swap it to collateral asset and send to collateral-receiver\n    if (amountToRepay_ > 0) {\n      // getConverter requires the source amount be approved to TetuConverter, but a contract doesn't need to approve itself\n      (address converter,) = ISwapManager(v.controller.swapManager()).getConverter(address(this), borrowAsset_, amountToRepay_, collateralAsset_);\n\n      if (converter == address(0) || amountToRepay_ < 1000) {\n        // there is no swap-strategy to convert remain {amountToPay} to {collateralAsset_}\n        // or the amount is too small to be swapped\n        // let's return this amount back to the {receiver_}\n\n        // SCB-710: returnedBorrowAmountOut should not take into account dust amounts\n        //          to avoid revert in _closePositionExact\n        if (amountToRepay_ >= 1000) {\n          returnedBorrowAmountOut = amountToRepay_;\n        }\n        IERC20(borrowAsset_).safeTransfer(receiver_, amountToRepay_);\n        emit OnRepayReturn(borrowAsset_, receiver_, amountToRepay_);\n      } else {\n        // conversion strategy is found, let's convert all remaining {amountToPay} to {collateralAsset}\n        swappedLeftoverCollateralOut = _makeSwap(converter, borrowAsset_, amountToRepay_, collateralAsset_, receiver_);\n        swappedLeftoverBorrowOut = amountToRepay_;\n\n        collateralAmountOut += swappedLeftoverCollateralOut;\n      }\n    }\n\n    return (collateralAmountOut, returnedBorrowAmountOut, swappedLeftoverCollateralOut, swappedLeftoverBorrowOut);\n  }\n\n  /// @inheritdoc ITetuConverter\n  function quoteRepay(address user_, address collateralAsset_, address borrowAsset_, uint amountToRepay_) external override returns (\n    uint collateralAmountOut,\n    uint swappedAmountOut\n  ) {\n    IConverterController _controller = _getControllerWhitelistedOnly();\n\n    address[] memory poolAdapters = IDebtMonitor(_controller.debtMonitor()).getPositions(user_, collateralAsset_, borrowAsset_);\n    uint len = poolAdapters.length;\n    for (uint i; i < len; i = i.uncheckedInc()) {\n      if (amountToRepay_ == 0) break;\n\n      IPoolAdapter pa = IPoolAdapter(poolAdapters[i]);\n      pa.updateStatus();\n\n      // debt-gaps are not taken into account here because getCollateralAmountToReturn doesn't take it into account\n      (, uint totalDebtForPoolAdapter,,,,) = pa.getStatus();\n\n      bool closePosition = totalDebtForPoolAdapter <= amountToRepay_;\n      uint currentAmountToRepay = closePosition ? totalDebtForPoolAdapter : amountToRepay_;\n      uint collateralAmountToReceive = pa.getCollateralAmountToReturn(currentAmountToRepay, closePosition);\n\n      amountToRepay_ -= currentAmountToRepay;\n      collateralAmountOut += collateralAmountToReceive;\n    }\n\n    if (amountToRepay_ > 0) {\n      IPriceOracle priceOracle = IPriceOracle(_controller.priceOracle());\n      uint priceBorrowAsset = priceOracle.getAssetPrice(borrowAsset_);\n      uint priceCollateralAsset = priceOracle.getAssetPrice(collateralAsset_);\n      require(priceCollateralAsset != 0 && priceBorrowAsset != 0, AppErrors.ZERO_PRICE);\n\n      swappedAmountOut = amountToRepay_\n        * 10 ** IERC20Metadata(collateralAsset_).decimals()\n        * priceBorrowAsset\n        / priceCollateralAsset\n        / 10 ** IERC20Metadata(borrowAsset_).decimals();\n    }\n\n    return (collateralAmountOut + swappedAmountOut, swappedAmountOut);\n  }\n  //endregion ----------------------------------------------------- Make repay, close position\n\n  //region ----------------------------------------------------- IKeeperCallback, close borrow forcibly\n\n  /// @inheritdoc IKeeperCallback\n  function requireRepay(\n    uint requiredBorrowedAmount_,\n    uint requiredCollateralAmount_,\n    address poolAdapter_\n  ) external\n  // not nonReentrant: nested repay() calls are possible\n  override {\n    IConverterController _controller = IConverterController(controller());\n\n    require(_controller.keeper() == msg.sender, AppErrors.KEEPER_ONLY);\n    require(requiredBorrowedAmount_ != 0, AppErrors.INCORRECT_VALUE);\n\n    TetuConverterLogicLib.requireRepay(_controller, requiredBorrowedAmount_, requiredCollateralAmount_, poolAdapter_);\n  }\n\n  /// @inheritdoc ITetuConverter\n  function repayTheBorrow(address poolAdapter_, bool closePosition)\n  external\n    // not nonReentrant: nested repay() calls are possible\n  returns (\n    uint collateralAmountOut,\n    uint repaidAmountOut\n  ) {\n    IConverterController _controller = _getControllerGovernanceOnly();\n    return TetuConverterLogicLib.repayTheBorrow(_controller, poolAdapter_, closePosition);\n  }\n  //endregion ----------------------------------------------------- IKeeperCallback, close borrow forcibly\n\n  //region ----------------------------------------------------- Get debt/repay info\n\n  /// @inheritdoc ITetuConverter\n  /// @dev nonReentrant is not used because: requireRepay(nonReentrant) => ... => getDebtAmountCurrent(), see SCB-746\n  function getDebtAmountCurrent(address user_, address collateralAsset_, address borrowAsset_, bool useDebtGap_) external override /* nonReentrant */ returns (\n    uint totalDebtAmountOut,\n    uint totalCollateralAmountOut\n  ) {\n    IConverterController _controller = _getControllerWhitelistedOnly();\n\n    address[] memory poolAdapters = IDebtMonitor(_controller.debtMonitor()).getPositions(user_, collateralAsset_, borrowAsset_);\n    uint len = poolAdapters.length;\n\n    uint debtGap = useDebtGap_ ? _controller.debtGap() : 0;\n\n    for (uint i; i < len; i = i.uncheckedInc()) {\n      IPoolAdapter pa = IPoolAdapter(poolAdapters[i]);\n      pa.updateStatus();\n      (totalDebtAmountOut, totalCollateralAmountOut) = _addDebtAmounts(pa, totalDebtAmountOut, totalCollateralAmountOut, debtGap);\n    }\n\n    return (totalDebtAmountOut, totalCollateralAmountOut);\n  }\n\n  /// @inheritdoc ITetuConverter\n  function getDebtAmountStored(address user_, address collateralAsset_, address borrowAsset_, bool useDebtGap_) external view override returns (\n    uint totalDebtAmountOut,\n    uint totalCollateralAmountOut\n  ) {\n    IConverterController _controller = IConverterController(controller());\n\n    address[] memory poolAdapters = IDebtMonitor(_controller.debtMonitor()).getPositions(user_, collateralAsset_, borrowAsset_);\n    uint len = poolAdapters.length;\n\n    uint debtGap = useDebtGap_ ? _controller.debtGap() : 0;\n\n    for (uint i; i < len; i = i.uncheckedInc()) {\n      IPoolAdapter pa = IPoolAdapter(poolAdapters[i]);\n      (totalDebtAmountOut, totalCollateralAmountOut) = _addDebtAmounts(pa, totalDebtAmountOut, totalCollateralAmountOut, debtGap);\n    }\n\n    return (totalDebtAmountOut, totalCollateralAmountOut);\n  }\n\n  /// @notice A function to reduce contract size (shared code from getDebtAmountCurrent and getDebtAmountStored)\n  function _addDebtAmounts(IPoolAdapter pa, uint amountDebt_, uint collateralAmount_, uint debtGap) internal view returns (\n    uint debtAmountOut,\n    uint collateralAmountOut\n  ) {\n    (uint collateralAmount, uint totalDebtForPoolAdapter,,,, bool debtGapRequired) = pa.getStatus();\n    debtAmountOut = amountDebt_ + (\n      (debtGap != 0 && debtGapRequired)\n        ? TetuConverterLogicLib.getAmountWithDebtGap(totalDebtForPoolAdapter, debtGap)\n        : totalDebtForPoolAdapter\n    );\n    collateralAmountOut = collateralAmount_ + collateralAmount;\n  }\n\n  /// @inheritdoc ITetuConverter\n  function estimateRepay(address user_, address collateralAsset_, uint collateralAmountToRedeem_, address borrowAsset_) external view override returns (\n    uint borrowAssetAmount,\n    uint unobtainableCollateralAssetAmount\n  ) {\n    IConverterController _controller = IConverterController(controller());\n\n    address[] memory poolAdapters = IDebtMonitor(_controller.debtMonitor()).getPositions(user_, collateralAsset_, borrowAsset_);\n    uint len = poolAdapters.length;\n\n    uint collateralAmountRemained = collateralAmountToRedeem_;\n    for (uint i; i < len; i = i.uncheckedInc()) {\n      if (collateralAmountRemained == 0) break;\n\n      IPoolAdapter pa = IPoolAdapter(poolAdapters[i]);\n      (uint collateralAmount, uint borrowedAmount,,,,bool debtGapRequired) = pa.getStatus();\n      if (debtGapRequired) {\n        borrowedAmount = TetuConverterLogicLib.getAmountWithDebtGap(borrowedAmount, _controller.debtGap());\n      }\n\n      if (collateralAmountRemained >= collateralAmount) {\n        collateralAmountRemained -= collateralAmount;\n        borrowAssetAmount += borrowedAmount;\n      } else {\n        borrowAssetAmount += borrowedAmount * collateralAmountRemained / collateralAmount;\n        collateralAmountRemained = 0;\n      }\n    }\n\n    return (borrowAssetAmount, collateralAmountRemained);\n  }\n\n  /// @inheritdoc ITetuConverter\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\n    address[] memory poolAdaptersOut\n  ) {\n    return IDebtMonitor(IConverterController(controller()).debtMonitor()).getPositions(user_, collateralToken_, borrowedToken_);\n  }\n  //endregion ----------------------------------------------------- Get debt/repay info\n\n  //region ----------------------------------------------------- Check and claim rewards\n\n  /// @inheritdoc ITetuConverter\n  function claimRewards(address receiver_) external override nonReentrant returns (\n    address[] memory rewardTokensOut,\n    uint[] memory amountsOut\n  ) {\n    // The sender is able to claim his own rewards only, so no need to check sender\n    address[] memory poolAdapters = IDebtMonitor(IConverterController(controller()).debtMonitor()).getPositionsForUser(msg.sender);\n\n    uint len = poolAdapters.length;\n    address[] memory rewardTokens = new address[](len);\n    uint[] memory amounts = new uint[](len);\n    uint countPositions = 0;\n    for (uint i; i < len; i = i.uncheckedInc()) {\n      IPoolAdapter pa = IPoolAdapter(poolAdapters[i]);\n      (rewardTokens[countPositions], amounts[countPositions]) = pa.claimRewards(receiver_);\n      if (amounts[countPositions] != 0) {\n        emit OnClaimRewards(address(pa), rewardTokens[countPositions], amounts[countPositions], receiver_);\n        ++countPositions;\n      }\n    }\n\n    if (countPositions != 0) {\n      rewardTokensOut = AppUtils.removeLastItems(rewardTokens, countPositions);\n      amountsOut = AppUtils.removeLastItems(amounts, countPositions);\n    }\n\n    return (rewardTokensOut, amountsOut);\n  }\n\n  /// @inheritdoc ITetuConverter\n  function salvage(address receiver, address token, uint amount) external {\n    _getControllerGovernanceOnly();\n\n    IERC20(token).safeTransfer(receiver, amount);\n    emit OnSalvage(receiver, token, amount);\n  }\n\n  //endregion ----------------------------------------------------- Check and claim rewards\n\n  //region ----------------------------------------------------- Simulate swap\n\n  /// @notice Transfer {sourceAmount_} approved by {approver_} to swap manager\n  function onRequireAmountBySwapManager(address approver_, address sourceToken_, uint sourceAmount_) external override {\n    address swapManager = IConverterController(controller()).swapManager();\n    require(swapManager == msg.sender, AppErrors.ONLY_SWAP_MANAGER);\n\n    if (approver_ == address(this)) {\n      IERC20(sourceToken_).safeTransfer(swapManager, sourceAmount_);\n    } else {\n      IERC20(sourceToken_).safeTransferFrom(approver_, swapManager, sourceAmount_);\n    }\n  }\n  //endregion ----------------------------------------------------- Simulate swap\n\n  //region ----------------------------------------------------- Liquidate with checking\n\n  /// @inheritdoc ITetuConverter\n  function safeLiquidate(\n    address assetIn_,\n    uint amountIn_,\n    address assetOut_,\n    address receiver_,\n    uint priceImpactToleranceSource_,\n    uint priceImpactToleranceTarget_\n  ) override external returns (\n    uint amountOut\n  ) {\n    IConverterController _controller = _getControllerWhitelistedOnly();\n    return TetuConverterLogicLib.safeLiquidate(\n      _controller,\n      assetIn_,\n      amountIn_,\n      assetOut_,\n      receiver_,\n      priceImpactToleranceSource_,\n      priceImpactToleranceTarget_\n    );\n  }\n\n  /// @inheritdoc ITetuConverter\n  function isConversionValid(\n    address assetIn_,\n    uint amountIn_,\n    address assetOut_,\n    uint amountOut_,\n    uint priceImpactTolerance_\n  ) external override view returns (bool) {\n    return SwapLib.isConversionValid(\n      IPriceOracle(IConverterController(controller()).priceOracle()),\n      assetIn_,\n      amountIn_,\n      assetOut_,\n      amountOut_,\n      priceImpactTolerance_\n    );\n  }\n  //endregion ----------------------------------------------------- Liquidate with checking\n\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/Aave3DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface Aave3DataTypes {\n  struct EModeCategory {\n    uint16 ltv;\n    uint16 liquidationThreshold;\n    uint16 liquidationBonus;\n    address priceSource;\n    string label;\n  }\n\n  struct ReserveConfigurationMap {\n    uint256 data;\n  }\n\n  struct ReserveData {\n    ReserveConfigurationMap configuration;\n    uint128 liquidityIndex;\n    uint128 currentLiquidityRate;\n    uint128 variableBorrowIndex;\n    uint128 currentVariableBorrowRate;\n    uint128 currentStableBorrowRate;\n    uint40 lastUpdateTimestamp;\n    uint16 id;\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    address interestRateStrategyAddress;\n    uint128 accruedToTreasury;\n    uint128 unbacked;\n    uint128 isolationModeTotalDebt;\n  }\n\n  struct CalculateInterestRatesParams {\n    uint256 unbacked;\n    /// @notice The amount of liquidity added to the protocol (supply or repay) in the previous action\n    uint256 liquidityAdded;\n    /// @notice The amount of liquidity taken from the protocol (redeem or borrow)\n    uint256 liquidityTaken;\n    uint256 totalStableDebt;\n    uint256 totalVariableDebt;\n    uint256 averageStableBorrowRate;\n    uint256 reserveFactor;\n    address reserve;\n    address aToken;\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/Aave3Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\n/**\n * @title Errors library\n * @author Aave\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\n */\nlibrary Aave3Errors {\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\n  string public constant SAME_BLOCK_BORROW_REPAY = '48'; // 'Borrow and repay in same block is not allowed'\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\n  string public constant ATOKEN_SUPPLY_NOT_ZERO = '54'; // 'AToken supply is not zero'\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/Aave3ReserveConfiguration.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport {Aave3Errors} from './Aave3Errors.sol';\nimport {Aave3DataTypes} from './IAavePool.sol';\n\n/**\n * @title ReserveConfiguration library\n * @author Aave\n * @notice Implements the bitmap logic to handle the reserve configuration\n */\nlibrary Aave3ReserveConfiguration {\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\n  /// @dev bit 63 reserved\n\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\n\n  uint256 internal constant MAX_VALID_LTV = 65535;\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\n\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\n  uint16 public constant MAX_RESERVES_COUNT = 128;\n\n  /**\n   * @notice Sets the Loan to Value of the reserve\n   * @param self The reserve configuration\n   * @param ltv The new ltv\n   **/\n  function setLtv(Aave3DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\n    require(ltv <= MAX_VALID_LTV, Aave3Errors.INVALID_LTV);\n\n    self.data = (self.data & LTV_MASK) | ltv;\n  }\n\n  /**\n   * @notice Gets the Loan to Value of the reserve\n   * @param self The reserve configuration\n   * @return The loan to value\n   **/\n  function getLtv(Aave3DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n    return self.data & ~LTV_MASK;\n  }\n\n  /**\n   * @notice Sets the liquidation threshold of the reserve\n   * @param self The reserve configuration\n   * @param threshold The new liquidation threshold\n   **/\n  function setLiquidationThreshold(Aave3DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\n  internal\n  pure\n  {\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Aave3Errors.INVALID_LIQ_THRESHOLD);\n\n    self.data =\n    (self.data & LIQUIDATION_THRESHOLD_MASK) |\n    (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the liquidation threshold of the reserve\n   * @param self The reserve configuration\n   * @return The liquidation threshold\n   **/\n  function getLiquidationThreshold(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the liquidation bonus of the reserve\n   * @param self The reserve configuration\n   * @param bonus The new liquidation bonus\n   **/\n  function setLiquidationBonus(Aave3DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\n  internal\n  pure\n  {\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Aave3Errors.INVALID_LIQ_BONUS);\n\n    self.data =\n    (self.data & LIQUIDATION_BONUS_MASK) |\n    (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the liquidation bonus of the reserve\n   * @param self The reserve configuration\n   * @return The liquidation bonus\n   **/\n  function getLiquidationBonus(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the decimals of the underlying asset of the reserve\n   * @param self The reserve configuration\n   * @param decimals The decimals\n   **/\n  function setDecimals(Aave3DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\n  internal\n  pure\n  {\n    require(decimals <= MAX_VALID_DECIMALS, Aave3Errors.INVALID_DECIMALS);\n\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the decimals of the underlying asset of the reserve\n   * @param self The reserve configuration\n   * @return The decimals of the asset\n   **/\n  function getDecimals(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the active state of the reserve\n   * @param self The reserve configuration\n   * @param active The active state\n   **/\n  function setActive(Aave3DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\n    self.data =\n    (self.data & ACTIVE_MASK) |\n    (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the active state of the reserve\n   * @param self The reserve configuration\n   * @return The active state\n   **/\n  function getActive(Aave3DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n    return (self.data & ~ACTIVE_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the frozen state of the reserve\n   * @param self The reserve configuration\n   * @param frozen The frozen state\n   **/\n  function setFrozen(Aave3DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\n    self.data =\n    (self.data & FROZEN_MASK) |\n    (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the frozen state of the reserve\n   * @param self The reserve configuration\n   * @return The frozen state\n   **/\n  function getFrozen(Aave3DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n    return (self.data & ~FROZEN_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the paused state of the reserve\n   * @param self The reserve configuration\n   * @param paused The paused state\n   **/\n  function setPaused(Aave3DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\n    self.data =\n    (self.data & PAUSED_MASK) |\n    (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the paused state of the reserve\n   * @param self The reserve configuration\n   * @return The paused state\n   **/\n  function getPaused(Aave3DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n    return (self.data & ~PAUSED_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the borrowable in isolation flag for the reserve.\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\n   * amount will be accumulated in the isolated collateral's total debt exposure.\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\n   * consistency in the debt ceiling calculations.\n   * @param self The reserve configuration\n   * @param borrowable True if the asset is borrowable\n   **/\n  function setBorrowableInIsolation(Aave3DataTypes.ReserveConfigurationMap memory self, bool borrowable)\n  internal\n  pure\n  {\n    self.data =\n    (self.data & BORROWABLE_IN_ISOLATION_MASK) |\n    (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the borrowable in isolation flag for the reserve.\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\n   * consistency in the debt ceiling calculations.\n   * @param self The reserve configuration\n   * @return The borrowable in isolation flag\n   **/\n  function getBorrowableInIsolation(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (bool)\n  {\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the siloed borrowing flag for the reserve.\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\n   * @param self The reserve configuration\n   * @param siloed True if the asset is siloed\n   **/\n  function setSiloedBorrowing(Aave3DataTypes.ReserveConfigurationMap memory self, bool siloed)\n  internal\n  pure\n  {\n    self.data =\n    (self.data & SILOED_BORROWING_MASK) |\n    (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the siloed borrowing flag for the reserve.\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\n   * @param self The reserve configuration\n   * @return The siloed borrowing flag\n   **/\n  function getSiloedBorrowing(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (bool)\n  {\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\n  }\n\n  /**\n   * @notice Enables or disables borrowing on the reserve\n   * @param self The reserve configuration\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\n   **/\n  function setBorrowingEnabled(Aave3DataTypes.ReserveConfigurationMap memory self, bool enabled)\n  internal\n  pure\n  {\n    self.data =\n    (self.data & BORROWING_MASK) |\n    (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the borrowing state of the reserve\n   * @param self The reserve configuration\n   * @return The borrowing state\n   **/\n  function getBorrowingEnabled(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (bool)\n  {\n    return (self.data & ~BORROWING_MASK) != 0;\n  }\n\n  /**\n   * @notice Enables or disables stable rate borrowing on the reserve\n   * @param self The reserve configuration\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\n   **/\n  function setStableRateBorrowingEnabled(\n    Aave3DataTypes.ReserveConfigurationMap memory self,\n    bool enabled\n  ) internal pure {\n    self.data =\n    (self.data & STABLE_BORROWING_MASK) |\n    (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the stable rate borrowing state of the reserve\n   * @param self The reserve configuration\n   * @return The stable rate borrowing state\n   **/\n  function getStableRateBorrowingEnabled(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (bool)\n  {\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\n  }\n\n  /**\n   * @notice Sets the reserve factor of the reserve\n   * @param self The reserve configuration\n   * @param reserveFactor The reserve factor\n   **/\n  function setReserveFactor(Aave3DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\n  internal\n  pure\n  {\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Aave3Errors.INVALID_RESERVE_FACTOR);\n\n    self.data =\n    (self.data & RESERVE_FACTOR_MASK) |\n    (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the reserve factor of the reserve\n   * @param self The reserve configuration\n   * @return The reserve factor\n   **/\n  function getReserveFactor(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the borrow cap of the reserve\n   * @param self The reserve configuration\n   * @param borrowCap The borrow cap\n   **/\n  function setBorrowCap(Aave3DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap)\n  internal\n  pure\n  {\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Aave3Errors.INVALID_BORROW_CAP);\n\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the borrow cap of the reserve\n   * @param self The reserve configuration\n   * @return The borrow cap\n   **/\n  function getBorrowCap(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the supply cap of the reserve\n   * @param self The reserve configuration\n   * @param supplyCap The supply cap\n   **/\n  function setSupplyCap(Aave3DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap)\n  internal\n  pure\n  {\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Aave3Errors.INVALID_SUPPLY_CAP);\n\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the supply cap of the reserve\n   * @param self The reserve configuration\n   * @return The supply cap\n   **/\n  function getSupplyCap(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the debt ceiling in isolation mode for the asset\n   * @param self The reserve configuration\n   * @param ceiling The maximum debt ceiling for the asset\n   **/\n  function setDebtCeiling(Aave3DataTypes.ReserveConfigurationMap memory self, uint256 ceiling)\n  internal\n  pure\n  {\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Aave3Errors.INVALID_DEBT_CEILING);\n\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\n  }\n\n  /**\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\n   * @param self The reserve configuration\n   * @return The debt ceiling (0 = isolation mode disabled)\n   **/\n  function getDebtCeiling(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the liquidation protocol fee of the reserve\n   * @param self The reserve configuration\n   * @param liquidationProtocolFee The liquidation protocol fee\n   **/\n  function setLiquidationProtocolFee(\n    Aave3DataTypes.ReserveConfigurationMap memory self,\n    uint256 liquidationProtocolFee\n  ) internal pure {\n    require(\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\n      Aave3Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\n    );\n\n    self.data =\n    (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\n    (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the liquidation protocol fee\n   * @param self The reserve configuration\n   * @return The liquidation protocol fee\n   **/\n  function getLiquidationProtocolFee(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return\n    (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the unbacked mint cap of the reserve\n   * @param self The reserve configuration\n   * @param unbackedMintCap The unbacked mint cap\n   **/\n  function setUnbackedMintCap(\n    Aave3DataTypes.ReserveConfigurationMap memory self,\n    uint256 unbackedMintCap\n  ) internal pure {\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Aave3Errors.INVALID_UNBACKED_MINT_CAP);\n\n    self.data =\n    (self.data & UNBACKED_MINT_CAP_MASK) |\n    (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the unbacked mint cap of the reserve\n   * @param self The reserve configuration\n   * @return The unbacked mint cap\n   **/\n  function getUnbackedMintCap(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Sets the eMode asset category\n   * @param self The reserve configuration\n   * @param category The asset category when the user selects the eMode\n   **/\n  function setEModeCategory(Aave3DataTypes.ReserveConfigurationMap memory self, uint256 category)\n  internal\n  pure\n  {\n    require(category <= MAX_VALID_EMODE_CATEGORY, Aave3Errors.INVALID_EMODE_CATEGORY);\n\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the eMode asset category\n   * @param self The reserve configuration\n   * @return The eMode category for the asset\n   **/\n  function getEModeCategory(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\n  }\n\n  /**\n   * @notice Gets the configuration flags of the reserve\n   * @param self The reserve configuration\n   * @return The state flag representing active\n   * @return The state flag representing frozen\n   * @return The state flag representing borrowing enabled\n   * @return The state flag representing stableRateBorrowing enabled\n   * @return The state flag representing paused\n   **/\n  function getFlags(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (\n    bool,\n    bool,\n    bool,\n    bool,\n    bool\n  )\n  {\n    uint256 dataLocal = self.data;\n\n    return (\n    (dataLocal & ~ACTIVE_MASK) != 0,\n    (dataLocal & ~FROZEN_MASK) != 0,\n    (dataLocal & ~BORROWING_MASK) != 0,\n    (dataLocal & ~STABLE_BORROWING_MASK) != 0,\n    (dataLocal & ~PAUSED_MASK) != 0\n    );\n  }\n\n  /**\n   * @notice Gets the configuration parameters of the reserve from storage\n   * @param self The reserve configuration\n   * @return The state param representing ltv\n   * @return The state param representing liquidation threshold\n   * @return The state param representing liquidation bonus\n   * @return The state param representing reserve decimals\n   * @return The state param representing reserve factor\n   * @return The state param representing eMode category\n   **/\n  function getParams(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (\n    uint256,\n    uint256,\n    uint256,\n    uint256,\n    uint256,\n    uint256\n  )\n  {\n    uint256 dataLocal = self.data;\n\n    return (\n    dataLocal & ~LTV_MASK,\n    (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n    (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n    (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n    (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\n    (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\n    );\n  }\n\n  /**\n   * @notice Gets the caps parameters of the reserve from storage\n   * @param self The reserve configuration\n   * @return The state param representing borrow cap\n   * @return The state param representing supply cap.\n   **/\n  function getCaps(Aave3DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256, uint256)\n  {\n    uint256 dataLocal = self.data;\n\n    return (\n    (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\n    (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\n    );\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/IAaveAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice restored from 0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb (no events)\ninterface IAaveAddressesProvider {\n  /**\n   * @notice Returns the address of the ACL admin.\n   * @return The address of the ACL admin\n   */\n  function getACLAdmin() external view returns (address);\n\n  /**\n   * @notice Returns the address of the ACL manager.\n   * @return The address of the ACLManager\n   */\n  function getACLManager() external view returns (address);\n\n  /**\n   * @notice Returns an address by its identifier.\n   * @dev The returned address might be an EOA or a contract, potentially proxied\n   * @dev It returns ZERO if there is no registered address with the given id\n   * @param id The id\n   * @return The address of the registered for the specified id\n   */\n  function getAddress(bytes32 id) external view returns (address);\n\n  /**\n   * @notice Returns the id of the Aave market to which this contract points to.\n   * @return The market id\n   **/\n  function getMarketId() external view returns (string memory);\n\n  /**\n   * @notice Returns the address of the Pool proxy.\n   * @return The Pool proxy address\n   **/\n  function getPool() external view returns (address);\n\n  /**\n   * @notice Returns the address of the PoolConfigurator proxy.\n   * @return The PoolConfigurator proxy address\n   **/\n  function getPoolConfigurator() external view returns (address);\n\n  /**\n   * @notice Returns the address of the data provider.\n   * @return The address of the DataProvider\n   */\n  function getPoolDataProvider() external view returns (address);\n\n  /**\n   * @notice Returns the address of the price oracle.\n   * @return The address of the PriceOracle\n   */\n  function getPriceOracle() external view returns (address);\n\n  /**\n   * @notice Returns the address of the price oracle sentinel.\n   * @return The address of the PriceOracleSentinel\n   */\n  function getPriceOracleSentinel() external view returns (address);\n\n  function owner() external view returns (address);\n\n  function renounceOwnership() external;\n\n  function setACLAdmin(address newAclAdmin) external;\n\n  function setACLManager(address newAclManager) external;\n\n  function setAddress(bytes32 id, address newAddress) external;\n\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress)\n  external;\n\n  function setMarketId(string memory newMarketId) external;\n\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n  function setPoolDataProvider(address newDataProvider) external;\n\n  function setPoolImpl(address newPoolImpl) external;\n\n  function setPriceOracle(address newPriceOracle) external;\n\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n  function transferOwnership(address newOwner) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/IAavePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./Aave3DataTypes.sol\";\npragma experimental ABIEncoderV2;\n\n/// @notice Restored from 0x794a61358D6845594F94dc1DB02A252b5b4814aD (no events)\ninterface IAavePool {\n\n  /**\n   * @notice Returns the PoolAddressesProvider connected to this contract\n   * @return The address of the PoolAddressesProvider\n   **/\n  function ADDRESSES_PROVIDER() external view returns (address);\n\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\n\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\n\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\n\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\n  external\n  view\n  returns (uint256);\n\n  function POOL_REVISION() external view returns (uint256);\n\n  /**\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\n   * @param asset The address of the underlying asset to back\n   * @param amount The amount to back\n   * @param fee The amount paid in fees\n   **/\n  function backUnbacked(\n    address asset,\n    uint256 amount,\n    uint256 fee\n  ) external;\n\n  /**\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n   * @param asset The address of the underlying asset to borrow\n   * @param amount The amount to be borrowed\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n   * if he has been given credit delegation allowance\n   **/\n  function borrow(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode,\n    address onBehalfOf\n  ) external;\n\n  /**\n   * @notice Configures a new category for the eMode.\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\n   * The category 0 is reserved as it's the default for volatile assets\n   * @param id The id of the category\n   * @param category The configuration of the category\n   */\n  function configureEModeCategory(\n    uint8 id,\n    Aave3DataTypes.EModeCategory memory category\n  ) external;\n\n  /**\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to deposit\n   * @param amount The amount to be deposited\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Drop a reserve\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   **/\n  function dropReserve(address asset) external;\n\n  /**\n   * @notice Validates and finalizes an aToken transfer\n   * @dev Only callable by the overlying aToken of the `asset`\n   * @param asset The address of the underlying asset of the aToken\n   * @param from The user from which the aTokens are transferred\n   * @param to The user receiving the aTokens\n   * @param amount The amount being transferred/withdrawn\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\n   */\n  function finalizeTransfer(\n    address asset,\n    address from,\n    address to,\n    uint256 amount,\n    uint256 balanceFromBefore,\n    uint256 balanceToBefore\n  ) external;\n\n  /**\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n   * as long as the amount taken plus a fee is returned.\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n   * into consideration. For further details please visit https://developers.aave.com\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\n   * @param assets The addresses of the assets being flash-borrowed\n   * @param amounts The amounts of the assets being flash-borrowed\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n   * @param params Variadic packed params to pass to the receiver as extra information\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function flashLoan(\n    address receiverAddress,\n    address[] memory assets,\n    uint256[] memory amounts,\n    uint256[] memory interestRateModes,\n    address onBehalfOf,\n    bytes memory params,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n   * as long as the amount taken plus a fee is returned.\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n   * into consideration. For further details please visit https://developers.aave.com\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\n   * @param asset The address of the asset being flash-borrowed\n   * @param amount The amount of the asset being flash-borrowed\n   * @param params Variadic packed params to pass to the receiver as extra information\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function flashLoanSimple(\n    address receiverAddress,\n    address asset,\n    uint256 amount,\n    bytes memory params,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Returns the configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The configuration of the reserve\n   **/\n  function getConfiguration(address asset)\n  external\n  view\n  returns (Aave3DataTypes.ReserveConfigurationMap memory);\n\n  /**\n   * @notice Returns the data of an eMode category\n   * @param id The id of the category\n   * @return The configuration data of the category\n   */\n  function getEModeCategoryData(uint8 id)\n  external\n  view\n  returns (Aave3DataTypes.EModeCategory memory);\n\n  /**\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the Aave3DataTypes.ReserveData struct\n   * @param id The id of the reserve as stored in the Aave3DataTypes.ReserveData struct\n   * @return The address of the reserve associated with id\n   **/\n  function getReserveAddressById(uint16 id) external view returns (address);\n\n  /**\n   * @notice Returns the state and configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The state and configuration data of the reserve\n   **/\n  function getReserveData(address asset)\n  external\n  view\n  returns (Aave3DataTypes.ReserveData memory);\n\n  /**\n   * @notice Returns the normalized income normalized income of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve's normalized income\n   */\n  function getReserveNormalizedIncome(address asset)\n  external\n  view\n  returns (uint256);\n\n  /**\n   * @notice Returns the normalized variable debt per unit of asset\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve normalized variable debt\n   */\n  function getReserveNormalizedVariableDebt(address asset)\n  external\n  view\n  returns (uint256);\n\n  /**\n   * @notice Returns the list of the underlying assets of all the initialized reserves\n   * @dev It does not include dropped reserves\n   * @return The addresses of the underlying assets of the initialized reserves\n   **/\n  function getReservesList() external view returns (address[] memory);\n\n  /**\n   * @notice Returns the user account data across all the reserves\n   * @param user The address of the user\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\n   * @return currentLiquidationThreshold The liquidation threshold of the user\n   * @return ltv The loan to value of The user\n   * @return healthFactor The current health factor of the user\n   **/\n  function getUserAccountData(address user)\n  external\n  view\n  returns (\n    uint256 totalCollateralBase,\n    uint256 totalDebtBase,\n    uint256 availableBorrowsBase,\n    uint256 currentLiquidationThreshold,\n    uint256 ltv,\n    uint256 healthFactor\n  );\n\n  /**\n   * @notice Returns the configuration of the user across all the reserves\n   * @param user The user address\n   * @return The configuration of the user\n   **/\n  function getUserConfiguration(address user)\n  external\n  view\n  returns (Aave3DataTypes.ReserveConfigurationMap memory);\n\n  function getUserEMode(address user) external view returns (uint256);\n\n  /**\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\n   * interest rate strategy\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\n   **/\n  function initReserve(\n    address asset,\n    address aTokenAddress,\n    address stableDebtAddress,\n    address variableDebtAddress,\n    address interestRateStrategyAddress\n  ) external;\n\n  function initialize(address provider) external;\n\n  /**\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n   * @param user The address of the borrower getting liquidated\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n   * to receive the underlying collateral asset directly\n   **/\n  function liquidationCall(\n    address collateralAsset,\n    address debtAsset,\n    address user,\n    uint256 debtToCover,\n    bool receiveAToken\n  ) external;\n\n  function mintToTreasury(address[] memory assets) external;\n\n  /**\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\n   * @param asset The address of the underlying asset to mint\n   * @param amount The amount to mint\n   * @param onBehalfOf The address that will receive the aTokens\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function mintUnbacked(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n   * - Users can be rebalanced if the following conditions are satisfied:\n   *     1. Usage ratio is above 95%\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n   *        borrowed at a stable rate and depositors are not earning enough\n   * @param asset The address of the underlying asset borrowed\n   * @param user The address of the user to be rebalanced\n   **/\n  function rebalanceStableBorrowRate(address asset, address user) external;\n\n  /**\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n   * other borrower whose debt should be removed\n   * @return The final amount repaid\n   **/\n  function repay(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    address onBehalfOf\n  ) external returns (uint256);\n\n  /**\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\n   * equivalent debt tokens\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\n   * balance is not enough to cover the whole debt\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @return The final amount repaid\n   **/\n  function repayWithATokens(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode\n  ) external returns (uint256);\n\n  /**\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n   * other borrower whose debt should be removed\n   * @param deadline The deadline timestamp that the permit is valid\n   * @param permitV The V parameter of ERC712 permit sig\n   * @param permitR The R parameter of ERC712 permit sig\n   * @param permitS The S parameter of ERC712 permit sig\n   * @return The final amount repaid\n   **/\n  function repayWithPermit(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    address onBehalfOf,\n    uint256 deadline,\n    uint8 permitV,\n    bytes32 permitR,\n    bytes32 permitS\n  ) external returns (uint256);\n\n  function rescueTokens(\n    address token,\n    address to,\n    uint256 amount\n  ) external;\n\n  function resetIsolationModeTotalDebt(address asset) external;\n\n  /**\n   * @notice Sets the configuration bitmap of the reserve as a whole\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   * @param configuration The new configuration bitmap\n   **/\n  function setConfiguration(\n    address asset,\n    Aave3DataTypes.ReserveConfigurationMap memory configuration\n  ) external;\n\n  /**\n   * @notice Updates the address of the interest rate strategy contract\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   * @param rateStrategyAddress The address of the interest rate strategy contract\n   **/\n  function setReserveInterestRateStrategyAddress(\n    address asset,\n    address rateStrategyAddress\n  ) external;\n\n  function setUserEMode(uint8 categoryId) external;\n\n  /**\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n   * @param asset The address of the underlying asset deposited\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n   **/\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n  /**\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function supply(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param deadline The deadline timestamp that the permit is valid\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param permitV The V parameter of ERC712 permit sig\n   * @param permitR The R parameter of ERC712 permit sig\n   * @param permitS The S parameter of ERC712 permit sig\n   **/\n  function supplyWithPermit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode,\n    uint256 deadline,\n    uint8 permitV,\n    bytes32 permitR,\n    bytes32 permitS\n  ) external;\n\n  /**\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\n   * @param asset The address of the underlying asset borrowed\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n   **/\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\n\n  /**\n   * @notice Updates the protocol fee on the bridging\n   * @param protocolFee The part of the premium sent to the protocol treasury\n   */\n  function updateBridgeProtocolFee(uint256 protocolFee) external;\n\n  /**\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\n   * - A part is sent to aToken holders as extra, one time accumulated interest\n   * - A part is collected by the protocol treasury\n   * @dev The total premium is calculated on the total borrowed amount\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\n   * @dev Only callable by the PoolConfigurator contract\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\n   */\n  function updateFlashloanPremiums(\n    uint128 flashLoanPremiumTotal,\n    uint128 flashLoanPremiumToProtocol\n  ) external;\n\n  /**\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n   * @param to Address that will receive the underlying, same as msg.sender if the user\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n   *   different wallet\n   * @return The final amount withdrawn\n   **/\n  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external returns (uint256);\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/IAavePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654 (events were removed)\ninterface IAavePriceOracle {\n  /**\n   * @notice Returns the PoolAddressesProvider\n   * @return The address of the PoolAddressesProvider contract\n   */\n  function ADDRESSES_PROVIDER() external view returns (address);\n  /**\n   * @notice Returns the base currency address\n   * @dev Address 0x0 is reserved for USD as base currency.\n   * @return Returns the base currency address.\n   **/\n  function BASE_CURRENCY() external view returns (address);\n  /**\n   * @notice Returns the base currency unit\n   * @dev 1 ether for ETH, 1e8 for USD.\n   * @return Returns the base currency unit.\n   **/\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\n  /**\n   * @notice Returns the asset price in the base currency\n   * @param asset The address of the asset\n   * @return The price of the asset\n   **/\n  function getAssetPrice(address asset) external view returns (uint256);\n  /**\n   * @notice Returns a list of prices from a list of assets addresses\n   * @param assets The list of assets addresses\n   * @return The prices of the given assets\n   */\n  function getAssetsPrices(address[] memory assets) external view returns (uint256[] memory);\n  /**\n   * @notice Returns the address of the fallback oracle\n   * @return The address of the fallback oracle\n   */\n  function getFallbackOracle() external view returns (address);\n  /**\n   * @notice Returns the address of the source for an asset address\n   * @param asset The address of the asset\n   * @return The address of the source\n   */\n  function getSourceOfAsset(address asset) external view returns (address);\n  function setAssetSources(address[] memory assets, address[] memory sources) external;\n  function setFallbackOracle(address fallbackOracle) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/IAaveProtocolDataProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from abi of 0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654\ninterface IAaveProtocolDataProvider {\n  function ADDRESSES_PROVIDER() external view returns (address);\n\n  /**\n   * @notice Returns the total supply of aTokens for a given asset\n   * @param asset The address of the underlying asset of the reserve\n   * @return The total supply of the aToken\n   **/\n  function getATokenTotalSupply(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the list of the existing ATokens in the pool.\n   * @return The list of ATokens, pairs of symbols and addresses\n   */\n  function getAllATokens() external view returns (AaveProtocolDataProvider.TokenData[] memory);\n\n  /**\n   * @notice Returns the list of the existing reserves in the pool.\n   * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.\n   * @return The list of reserves, pairs of symbols and addresses\n   */\n  function getAllReservesTokens() external view returns (AaveProtocolDataProvider.TokenData[] memory);\n\n  /**\n   * @notice Returns the debt ceiling of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The debt ceiling of the reserve\n   **/\n  function getDebtCeiling(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the debt ceiling decimals\n   * @return The debt ceiling decimals\n   **/\n  function getDebtCeilingDecimals() external pure returns (uint256);\n\n  /**\n   * @notice Returns the address of the Interest Rate strategy\n   * @param asset The address of the underlying asset of the reserve\n   * @return irStrategyAddress The address of the Interest Rate strategy\n   */\n  function getInterestRateStrategyAddress(address asset)\n  external\n  view\n  returns (address irStrategyAddress);\n\n  /**\n   * @notice Returns the protocol fee on the liquidation bonus\n   * @param asset The address of the underlying asset of the reserve\n   * @return The protocol fee on liquidation\n   **/\n  function getLiquidationProtocolFee(address asset)\n  external\n  view\n  returns (uint256);\n\n  /**\n   * @notice Returns if the pool is paused\n   * @param asset The address of the underlying asset of the reserve\n   * @return isPaused True if the pool is paused, false otherwise\n   **/\n  function getPaused(address asset) external view returns (bool isPaused);\n\n  /**\n   * @notice Returns the caps parameters of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return borrowCap The borrow cap of the reserve\n   * @return supplyCap The supply cap of the reserve\n   **/\n  function getReserveCaps(address asset) external view returns (uint256 borrowCap, uint256 supplyCap);\n\n  /**\n   * @notice Returns the configuration data of the reserve\n   * @dev Not returning borrow and supply caps for compatibility, nor pause flag\n   * @param asset The address of the underlying asset of the reserve\n   * @return decimals The number of decimals of the reserve\n   * @return ltv The ltv of the reserve\n   * @return liquidationThreshold The liquidationThreshold of the reserve\n   * @return liquidationBonus The liquidationBonus of the reserve\n   * @return reserveFactor The reserveFactor of the reserve\n   * @return usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise\n   * @return borrowingEnabled True if borrowing is enabled, false otherwise\n   * @return stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise\n   * @return isActive True if it is active, false otherwise\n   * @return isFrozen True if it is frozen, false otherwise\n   **/\n  function getReserveConfigurationData(address asset)\n  external\n  view\n  returns (\n    uint256 decimals,\n    uint256 ltv,\n    uint256 liquidationThreshold,\n    uint256 liquidationBonus,\n    uint256 reserveFactor,\n    bool usageAsCollateralEnabled,\n    bool borrowingEnabled,\n    bool stableBorrowRateEnabled,\n    bool isActive,\n    bool isFrozen\n  );\n\n  /**\n   * @notice Returns the reserve data\n   * @param asset The address of the underlying asset of the reserve\n   * @return unbacked The amount of unbacked tokens\n   * @return accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted\n   * @return totalAToken The total supply of the aToken\n   * @return totalStableDebt The total stable debt of the reserve\n   * @return totalVariableDebt The total variable debt of the reserve\n   * @return liquidityRate The liquidity rate of the reserve\n   * @return variableBorrowRate The variable borrow rate of the reserve\n   * @return stableBorrowRate The stable borrow rate of the reserve\n   * @return averageStableBorrowRate The average stable borrow rate of the reserve\n   * @return liquidityIndex The liquidity index of the reserve\n   * @return variableBorrowIndex The variable borrow index of the reserve\n   * @return lastUpdateTimestamp The timestamp of the last update of the reserve\n   **/\n  function getReserveData(address asset)\n  external\n  view\n  returns (\n    uint256 unbacked,\n    uint256 accruedToTreasuryScaled,\n    uint256 totalAToken,\n    uint256 totalStableDebt,\n    uint256 totalVariableDebt,\n    uint256 liquidityRate,\n    uint256 variableBorrowRate,\n    uint256 stableBorrowRate,\n    uint256 averageStableBorrowRate,\n    uint256 liquidityIndex,\n    uint256 variableBorrowIndex,\n    uint40 lastUpdateTimestamp\n  );\n\n  /**\n   * Returns the efficiency mode category of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The eMode id of the reserve\n   */\n  function getReserveEModeCategory(address asset)\n  external\n  view\n  returns (uint256);\n\n  /**\n   * @notice Returns the token addresses of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return aTokenAddress The AToken address of the reserve\n   * @return stableDebtTokenAddress The StableDebtToken address of the reserve\n   * @return variableDebtTokenAddress The VariableDebtToken address of the reserve\n   */\n  function getReserveTokensAddresses(address asset)\n  external\n  view\n  returns (\n    address aTokenAddress,\n    address stableDebtTokenAddress,\n    address variableDebtTokenAddress\n  );\n\n  function getSiloedBorrowing(address asset) external view returns (bool);\n\n  /**\n   * @notice Returns the total debt for a given asset\n   * @param asset The address of the underlying asset of the reserve\n   * @return The total debt for asset\n   **/\n  function getTotalDebt(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the unbacked mint cap of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The unbacked mint cap of the reserve\n   **/\n  function getUnbackedMintCap(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the user data in a reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @param user The address of the user\n   * @return currentATokenBalance The current AToken balance of the user\n   * @return currentStableDebt The current stable debt of the user\n   * @return currentVariableDebt The current variable debt of the user\n   * @return principalStableDebt The principal stable debt of the user\n   * @return scaledVariableDebt The scaled variable debt of the user\n   * @return stableBorrowRate The stable borrow rate of the user\n   * @return liquidityRate The liquidity rate of the reserve\n   * @return stableRateLastUpdated The timestamp of the last update of the user stable rate\n   * @return usageAsCollateralEnabled True if the user is using the asset as collateral, false\n   *         otherwise\n   **/\n  function getUserReserveData(address asset, address user)\n  external\n  view\n  returns (\n    uint256 currentATokenBalance,\n    uint256 currentStableDebt,\n    uint256 currentVariableDebt,\n    uint256 principalStableDebt,\n    uint256 scaledVariableDebt,\n    uint256 stableBorrowRate,\n    uint256 liquidityRate,\n    uint40 stableRateLastUpdated,\n    bool usageAsCollateralEnabled\n  );\n}\n\ninterface AaveProtocolDataProvider {\n  struct TokenData {\n    string symbol;\n    address tokenAddress;\n  }\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/IAaveReserveInterestRateStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./Aave3DataTypes.sol\";\n\n/// @notice Interface for the calculation of the interest rates\n/// @dev Restored from 0xA9F3C3caE095527061e6d270DBE163693e6fda9D\ninterface IAaveReserveInterestRateStrategy {\n  /**\n   * @notice Returns the base variable borrow rate\n   * @return The base variable borrow rate, expressed in ray\n   **/\n  function getBaseVariableBorrowRate() external view returns (uint256);\n\n  /**\n   * @notice Returns the maximum variable borrow rate\n   * @return The maximum variable borrow rate, expressed in ray\n   **/\n  function getMaxVariableBorrowRate() external view returns (uint256);\n\n  /**\n   * @notice Calculates the interest rates depending on the reserve's state and configurations\n   * @param params The parameters needed to calculate interest rates\n   * @return liquidityRate The liquidity rate expressed in rays\n   * @return stableBorrowRate The stable borrow rate expressed in rays\n   * @return variableBorrowRate The variable borrow rate expressed in rays\n   **/\n  function calculateInterestRates(\n    Aave3DataTypes.CalculateInterestRatesParams memory params\n  )\n  external\n  view\n  returns (\n    uint256,\n    uint256,\n    uint256\n  );\n}\n\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/IAaveStableDebtToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0x52A1CeB68Ee6b7B5D13E0376A1E0E4423A8cE26e (events were removed)\ninterface IAaveStableDebtToken {\n  function DEBT_TOKEN_REVISION() external view returns (uint256);\n  function DELEGATION_WITH_SIG_TYPEHASH() external view returns (bytes32);\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n  function EIP712_REVISION() external view returns (bytes memory);\n  function POOL() external view returns (address);\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n\n  function allowance(address, address) external view returns (uint256);\n  function approve(address, uint256) external returns (bool);\n  function approveDelegation(address delegatee, uint256 amount) external;\n  function balanceOf(address account) external view returns (uint256);\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\n  function burn(address from, uint256 amount) external returns (uint256, uint256);\n  function decimals() external view returns (uint8);\n  function decreaseAllowance(address, uint256) external returns (bool);\n\n  function delegationWithSig(\n    address delegator,\n    address delegatee,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  function getAverageStableRate() external view returns (uint256);\n  function getIncentivesController() external view returns (address);\n\n  function getSupplyData()\n  external\n  view\n  returns (\n    uint256,\n    uint256,\n    uint256,\n    uint40\n  );\n\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\n  function getTotalSupplyLastUpdated() external view returns (uint40);\n  function getUserLastUpdated(address user) external view returns (uint40);\n  function getUserStableRate(address user) external view returns (uint256);\n  function increaseAllowance(address, uint256) external returns (bool);\n\n  function initialize(\n    address initializingPool,\n    address underlyingAsset,\n    address incentivesController,\n    uint8 debtTokenDecimals,\n    string memory debtTokenName,\n    string memory debtTokenSymbol,\n    bytes memory params\n  ) external;\n\n  function mint(\n    address user,\n    address onBehalfOf,\n    uint256 amount,\n    uint256 rate\n  )\n  external\n  returns (\n    bool,\n    uint256,\n    uint256\n  );\n\n  function name() external view returns (string memory);\n  function nonces(address owner) external view returns (uint256);\n  function principalBalanceOf(address user) external view returns (uint256);\n  function setIncentivesController(address controller) external;\n  function symbol() external view returns (string memory);\n  function totalSupply() external view returns (uint256);\n  function transfer(address, uint256) external returns (bool);\n\n  function transferFrom(address, address, uint256) external returns (bool);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aave3/IAaveToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0xa5ba6E5EC19a1Bf23C857991c857dB62b2Aa187B (events were removed)\ninterface IAaveToken {\n  function ATOKEN_REVISION() external view returns (uint256);\n\n  /**\n   * @notice Get the domain separator for the token\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\n   * @return The domain separator of the token at current chain\n   */\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n  function EIP712_REVISION() external view returns (bytes memory);\n  function PERMIT_TYPEHASH() external view returns (bytes32);\n  function POOL() external view returns (address);\n\n  /**\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\n   * @return Address of the Aave treasury\n   **/\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\n\n  /**\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\n   * @return The address of the underlying asset\n   **/\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n\n  function allowance(address owner, address spender)\n  external\n  view\n  returns (uint256);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n  function balanceOf(address user) external view returns (uint256);\n\n  /**\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n   * @dev In some instances, the mint event could be emitted from a burn transaction\n   * if the amount to burn is less than the interest that the user accrued\n   * @param from The address from which the aTokens will be burned\n   * @param receiverOfUnderlying The address that will receive the underlying\n   * @param amount The amount being burned\n   * @param index The next liquidity index of the reserve\n   **/\n  function burn(\n    address from,\n    address receiverOfUnderlying,\n    uint256 amount,\n    uint256 index\n  ) external;\n\n  function decimals() external view returns (uint8);\n\n  function decreaseAllowance(address spender, uint256 subtractedValue)\n  external\n  returns (bool);\n\n  function getIncentivesController() external view returns (address);\n\n  /**\n   * @notice Returns last index interest was accrued to the user's balance\n   * @param user The address of the user\n   * @return The last index interest was accrued to the user's balance, expressed in ray\n   **/\n  function getPreviousIndex(address user) external view returns (uint256);\n\n  /**\n   * @notice Returns the scaled balance of the user and the scaled total supply.\n   * @param user The address of the user\n   * @return The scaled balance of the user\n   * @return The scaled total supply\n   **/\n  function getScaledUserBalanceAndSupply(address user)\n  external\n  view\n  returns (uint256, uint256);\n\n  /**\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\n   * @param user The user executing the repayment\n   * @param amount The amount getting repaid\n   **/\n  function handleRepayment(address user, uint256 amount) external;\n\n  function increaseAllowance(address spender, uint256 addedValue)\n  external\n  returns (bool);\n\n  function initialize(\n    address initializingPool,\n    address treasury,\n    address underlyingAsset,\n    address incentivesController,\n    uint8 aTokenDecimals,\n    string memory aTokenName,\n    string memory aTokenSymbol,\n    bytes memory params\n  ) external;\n\n  /**\n   * @notice Mints `amount` aTokens to `user`\n   * @param caller The address performing the mint\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\n   * @param amount The amount of tokens getting minted\n   * @param index The next liquidity index of the reserve\n   * @return `true` if the the previous balance of the user was 0\n   */\n  function mint(\n    address caller,\n    address onBehalfOf,\n    uint256 amount,\n    uint256 index\n  ) external returns (bool);\n\n  /**\n   * @notice Mints aTokens to the reserve treasury\n   * @param amount The amount of tokens getting minted\n   * @param index The next liquidity index of the reserve\n   */\n  function mintToTreasury(uint256 amount, uint256 index) external;\n  function name() external view returns (string memory);\n\n  /**\n   * @notice Returns the nonce for owner.\n   * @param owner The address of the owner\n   * @return The nonce of the owner\n   **/\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @notice Allow passing a signed message to approve spending\n   * @dev implements the permit function as for\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n   * @param owner The owner of the funds\n   * @param spender The spender\n   * @param value The amount\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\n   * @param v Signature param\n   * @param s Signature param\n   * @param r Signature param\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @notice Rescue and transfer tokens locked in this contract\n   * @param token The address of the token\n   * @param to The address of the recipient\n   * @param amount The amount of token to transfer\n   */\n  function rescueTokens(\n    address token,\n    address to,\n    uint256 amount\n  ) external;\n\n  /**\n   * @notice Returns the scaled balance of the user.\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\n   * at the moment of the update\n   * @param user The user whose balance is calculated\n   * @return The scaled balance of the user\n   **/\n  function scaledBalanceOf(address user) external view returns (uint256);\n\n  /**\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\n   * @return The scaled total supply\n   **/\n  function scaledTotalSupply() external view returns (uint256);\n  function setIncentivesController(address controller) external;\n  function symbol() external view returns (string memory);\n  function totalSupply() external view returns (uint256);\n  function transfer(address recipient, uint256 amount)\n  external\n  returns (bool);\n\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  /**\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n   * @param from The address getting liquidated, current owner of the aTokens\n   * @param to The recipient\n   * @param value The amount of tokens getting transferred\n   **/\n  function transferOnLiquidation(\n    address from,\n    address to,\n    uint256 value\n  ) external;\n\n  function transferUnderlyingTo(address target, uint256 amount) external;\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aaveTwo/AaveTwoErrors.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.17;\n\n/**\n * @title Errors library\n * @author Aave\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\n * @dev Error messages prefix glossary:\n *  - VL = ValidationLogic\n *  - MATH = Math libraries\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\n *  - AT = AToken\n *  - SDT = StableDebtToken\n *  - VDT = VariableDebtToken\n *  - LP = LendingPool\n *  - LPAPR = LendingPoolAddressesProviderRegistry\n *  - LPC = LendingPoolConfiguration\n *  - RL = ReserveLogic\n *  - LPCM = LendingPoolCollateralManager\n *  - P = Pausable\n */\nlibrary Errors {\n  //common errors\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\n\n  //contract specific errors\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\n  string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\n  string public constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\n  string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\n  string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\n  string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\n  string public constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\n  string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\n  string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \"There isn't enough liquidity available to liquidate\"\n  string public constant LPCM_NO_ERRORS = '46'; // 'No errors'\n  string public constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\n  string public constant MATH_ADDITION_OVERFLOW = '49';\n  string public constant MATH_DIVISION_BY_ZERO = '50';\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\n  string public constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\n  string public constant LP_FAILED_COLLATERAL_SWAP = '60';\n  string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\n  string public constant LP_REENTRANCY_NOT_ALLOWED = '62';\n  string public constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\n  string public constant LP_IS_PAUSED = '64'; // 'Pool is paused'\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\n  string public constant RC_INVALID_LTV = '67';\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\n  string public constant RC_INVALID_LIQ_BONUS = '69';\n  string public constant RC_INVALID_DECIMALS = '70';\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\n  string public constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\n  string public constant UL_INVALID_INDEX = '77';\n  string public constant LP_NOT_CONTRACT = '78';\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\n\n  enum CollateralManagerErrors {\n    NO_ERROR,\n    NO_COLLATERAL_AVAILABLE,\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\n    CURRRENCY_NOT_BORROWED,\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\n    NOT_ENOUGH_LIQUIDITY,\n    NO_ACTIVE_RESERVE,\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\n    INVALID_EQUAL_ASSETS_TO_SWAP,\n    FROZEN_RESERVE\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aaveTwo/AaveTwoReserveConfiguration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Errors} from './AaveTwoErrors.sol';\nimport {DataTypes} from './IAaveTwoPool.sol';\n\n/// @title ReserveConfiguration library\n/// @author Aave, modified by dvpublic (internal view => internal pure, storage => memory)\n/// @notice Implements the bitmap logic to handle the reserve configuration\nlibrary AaveTwoReserveConfiguration {\n  uint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\n  uint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\n  uint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\n  uint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\n  uint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\n  uint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\n  uint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\n\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\n  uint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\n  uint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\n  uint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\n  uint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\n  uint256 constant IS_FROZEN_START_BIT_POSITION = 57;\n  uint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\n  uint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\n  uint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\n\n  uint256 constant MAX_VALID_LTV = 65535;\n  uint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\n  uint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\n  uint256 constant MAX_VALID_DECIMALS = 255;\n  uint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\n\n  /**\n   * @dev Sets the Loan to Value of the reserve\n   * @param self The reserve configuration\n   * @param ltv the new ltv\n   **/\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\n    require(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\n\n    self.data = (self.data & LTV_MASK) | ltv;\n  }\n\n  /**\n   * @dev Gets the Loan to Value of the reserve\n   * @param self The reserve configuration\n   * @return The loan to value\n   **/\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n    return self.data & ~LTV_MASK;\n  }\n\n  /**\n   * @dev Sets the liquidation threshold of the reserve\n   * @param self The reserve configuration\n   * @param threshold The new liquidation threshold\n   **/\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\n  internal\n  pure\n  {\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\n\n    self.data =\n    (self.data & LIQUIDATION_THRESHOLD_MASK) |\n    (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the liquidation threshold of the reserve\n   * @param self The reserve configuration\n   * @return The liquidation threshold\n   **/\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\n  }\n\n  /**\n   * @dev Sets the liquidation bonus of the reserve\n   * @param self The reserve configuration\n   * @param bonus The new liquidation bonus\n   **/\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\n  internal\n  pure\n  {\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\n\n    self.data =\n    (self.data & LIQUIDATION_BONUS_MASK) |\n    (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the liquidation bonus of the reserve\n   * @param self The reserve configuration\n   * @return The liquidation bonus\n   **/\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\n  }\n\n  /**\n   * @dev Sets the decimals of the underlying asset of the reserve\n   * @param self The reserve configuration\n   * @param decimals The decimals\n   **/\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\n  internal\n  pure\n  {\n    require(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\n\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the decimals of the underlying asset of the reserve\n   * @param self The reserve configuration\n   * @return The decimals of the asset\n   **/\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\n  }\n\n  /**\n   * @dev Sets the active state of the reserve\n   * @param self The reserve configuration\n   * @param active The active state\n   **/\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\n    self.data =\n    (self.data & ACTIVE_MASK) |\n    (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the active state of the reserve\n   * @param self The reserve configuration\n   * @return The active state\n   **/\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n    return (self.data & ~ACTIVE_MASK) != 0;\n  }\n\n  /**\n   * @dev Sets the frozen state of the reserve\n   * @param self The reserve configuration\n   * @param frozen The frozen state\n   **/\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\n    self.data =\n    (self.data & FROZEN_MASK) |\n    (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the frozen state of the reserve\n   * @param self The reserve configuration\n   * @return The frozen state\n   **/\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\n    return (self.data & ~FROZEN_MASK) != 0;\n  }\n\n  /**\n   * @dev Enables or disables borrowing on the reserve\n   * @param self The reserve configuration\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\n   **/\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled)\n  internal\n  pure\n  {\n    self.data =\n    (self.data & BORROWING_MASK) |\n    (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the borrowing state of the reserve\n   * @param self The reserve configuration\n   * @return The borrowing state\n   **/\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (bool)\n  {\n    return (self.data & ~BORROWING_MASK) != 0;\n  }\n\n  /**\n   * @dev Enables or disables stable rate borrowing on the reserve\n   * @param self The reserve configuration\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\n   **/\n  function setStableRateBorrowingEnabled(\n    DataTypes.ReserveConfigurationMap memory self,\n    bool enabled\n  ) internal pure {\n    self.data =\n    (self.data & STABLE_BORROWING_MASK) |\n    (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the stable rate borrowing state of the reserve\n   * @param self The reserve configuration\n   * @return The stable rate borrowing state\n   **/\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (bool)\n  {\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\n  }\n\n  /**\n   * @dev Sets the reserve factor of the reserve\n   * @param self The reserve configuration\n   * @param reserveFactor The reserve factor\n   **/\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\n  internal\n  pure\n  {\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\n\n    self.data =\n    (self.data & RESERVE_FACTOR_MASK) |\n    (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\n  }\n\n  /**\n   * @dev Gets the reserve factor of the reserve\n   * @param self The reserve configuration\n   * @return The reserve factor\n   **/\n  function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (uint256)\n  {\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\n  }\n\n  /**\n   * @dev Gets the configuration flags of the reserve\n   * @param self The reserve configuration\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\n   **/\n  function getFlags(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (\n    bool,\n    bool,\n    bool,\n    bool\n  )\n  {\n    uint256 dataLocal = self.data;\n\n    return (\n    (dataLocal & ~ACTIVE_MASK) != 0,\n    (dataLocal & ~FROZEN_MASK) != 0,\n    (dataLocal & ~BORROWING_MASK) != 0,\n    (dataLocal & ~STABLE_BORROWING_MASK) != 0\n    );\n  }\n\n  /**\n   * @dev Gets the configuration paramters of the reserve\n   * @param self The reserve configuration\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\n   **/\n  function getParams(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (\n    uint256,\n    uint256,\n    uint256,\n    uint256,\n    uint256\n  )\n  {\n    uint256 dataLocal = self.data;\n\n    return (\n    dataLocal & ~LTV_MASK,\n    (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n    (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n    (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n    (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\n    );\n  }\n\n  /**\n   * @dev Gets the configuration paramters of the reserve from a memory object\n   * @param self The reserve configuration\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\n   **/\n  function getParamsMemory(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (\n    uint256,\n    uint256,\n    uint256,\n    uint256,\n    uint256\n  )\n  {\n    return (\n    self.data & ~LTV_MASK,\n    (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n    (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n    (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n    (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\n    );\n  }\n\n  /**\n   * @dev Gets the configuration flags of the reserve from a memory object\n   * @param self The reserve configuration\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\n   **/\n  function getFlagsMemory(DataTypes.ReserveConfigurationMap memory self)\n  internal\n  pure\n  returns (\n    bool,\n    bool,\n    bool,\n    bool\n  )\n  {\n    return (\n    (self.data & ~ACTIVE_MASK) != 0,\n    (self.data & ~FROZEN_MASK) != 0,\n    (self.data & ~BORROWING_MASK) != 0,\n    (self.data & ~STABLE_BORROWING_MASK) != 0\n    );\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aaveTwo/IAaveTwoAToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0x3CB4cA3c9DC0e02D252098eEbb3871AC7a43c54d (events and _XXX were removed)\ninterface IAaveTwoAToken {\n  function ATOKEN_REVISION() external view returns (uint256);\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n  function EIP712_REVISION() external view returns (bytes memory);\n  function PERMIT_TYPEHASH() external view returns (bytes32);\n  function POOL() external view returns (address);\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n  function balanceOf(address user) external view returns (uint256);\n\n  function burn(\n    address user,\n    address receiverOfUnderlying,\n    uint256 amount,\n    uint256 index\n  ) external;\n\n  function decimals() external view returns (uint8);\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n  function getIncentivesController() external view returns (address);\n  /**\n   * @dev Returns the scaled balance of the user and the scaled total supply.\n   * @param user The address of the user\n   * @return The scaled balance of the user\n   * @return The scaled balance and the scaled total supply\n   **/\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n  function handleRepayment(address user, uint256 amount) external;\n\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n  function initialize(\n    address pool,\n    address treasury,\n    address underlyingAsset,\n    address incentivesController,\n    uint8 aTokenDecimals,\n    string memory aTokenName,\n    string memory aTokenSymbol,\n    bytes memory params\n  ) external;\n\n  function mint(\n    address user,\n    uint256 amount,\n    uint256 index\n  ) external returns (bool);\n\n  function mintToTreasury(uint256 amount, uint256 index) external;\n\n  function name() external view returns (string memory);\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  function scaledBalanceOf(address user) external view returns (uint256);\n  function scaledTotalSupply() external view returns (uint256);\n  function symbol() external view returns (string memory);\n  function totalSupply() external view returns (uint256);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  function transferOnLiquidation(\n    address from,\n    address to,\n    uint256 value\n  ) external;\n\n  function transferUnderlyingTo(address target, uint256 amount)\n  external\n  returns (uint256);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aaveTwo/IAaveTwoLendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0xd05e3e715d945b59290df0ae8ef85c1bdb684744 (events were removed)\ninterface IAaveTwoLendingPoolAddressesProvider {\n  function getAddress(bytes32 id) external view returns (address);\n  function getEmergencyAdmin() external view returns (address);\n  function getLendingPool() external view returns (address);\n  function getLendingPoolCollateralManager() external view returns (address);\n  function getLendingPoolConfigurator() external view returns (address);\n  function getLendingRateOracle() external view returns (address);\n  function getMarketId() external view returns (string memory);\n  function getPoolAdmin() external view returns (address);\n  function getPriceOracle() external view returns (address);\n  function owner() external view returns (address);\n  function renounceOwnership() external;\n  function setAddress(bytes32 id, address newAddress) external;\n  function setAddressAsProxy(bytes32 id, address implementationAddress) external;\n  function setEmergencyAdmin(address emergencyAdmin) external;\n  function setLendingPoolCollateralManager(address manager) external;\n  function setLendingPoolConfiguratorImpl(address configurator) external;\n  function setLendingPoolImpl(address pool) external;\n  function setLendingRateOracle(address lendingRateOracle) external;\n  function setMarketId(string memory marketId) external;\n  function setPoolAdmin(address admin) external;\n  function setPriceOracle(address priceOracle) external;\n  function transferOwnership(address newOwner) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aaveTwo/IAaveTwoPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0x6a8730f54b8c69ab096c43ff217ca0a350726ac7 (events were removed)\ninterface IAaveTwoPool {\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint256);\n  function LENDINGPOOL_REVISION() external view returns (uint256);\n  function MAX_NUMBER_RESERVES() external view returns (uint256);\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\n\n  /**\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n   * @param asset The address of the underlying asset to borrow\n   * @param amount The amount to be borrowed\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n   * if he has been given credit delegation allowance\n   **/\n  function borrow(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode,\n    address onBehalfOf\n  ) external;\n\n  /**\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to deposit\n   * @param amount The amount to be deposited\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @dev Validates and finalizes an aToken transfer\n   * - Only callable by the overlying aToken of the `asset`\n   * @param asset The address of the underlying asset of the aToken\n   * @param from The user from which the aTokens are transferred\n   * @param to The user receiving the aTokens\n   * @param amount The amount being transferred/withdrawn\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\n   */\n  function finalizeTransfer(\n    address asset,\n    address from,\n    address to,\n    uint256 amount,\n    uint256 balanceFromBefore,\n    uint256 balanceToBefore\n  ) external;\n\n  function flashLoan(\n    address receiverAddress,\n    address[] memory assets,\n    uint256[] memory amounts,\n    uint256[] memory modes,\n    address onBehalfOf,\n    bytes memory params,\n    uint16 referralCode\n  ) external;\n\n  function getAddressesProvider() external view returns (address);\n\n  /**\n   * @dev Returns the configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The configuration of the reserve\n   **/\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n  /**\n   * @dev Returns the state and configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The state of the reserve\n   **/\n  function getReserveData(address asset) external view  returns (DataTypes.ReserveData memory);\n\n  /**\n   * @dev Returns the normalized income normalized income of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve's normalized income\n   */\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n  /**\n   * @dev Returns the normalized variable debt per unit of asset\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve normalized variable debt\n   */\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n  function getReservesList() external view returns (address[] memory);\n\n/**\n * @dev Returns the user account data across all the reserves\n   * @param user The address of the user\n   * @return totalCollateralETH the total collateral in ETH of the user\n   * @return totalDebtETH the total debt in ETH of the user\n   * @return availableBorrowsETH the borrowing power left of the user\n   * @return currentLiquidationThreshold the liquidation threshold of the user\n   * @return ltv the loan to value of the user\n   * @return healthFactor the current health factor of the user\n   **/\n  function getUserAccountData(address user)\n  external\n  view\n  returns (\n    uint256 totalCollateralETH,\n    uint256 totalDebtETH,\n    uint256 availableBorrowsETH,\n    uint256 currentLiquidationThreshold,\n    uint256 ltv,\n    uint256 healthFactor\n  );\n\n  /**\n   * @dev Returns the configuration of the user across all the reserves\n   * @param user The user address\n   * @return The configuration of the user\n   **/\n  function getUserConfiguration(address user) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n  function initReserve(\n    address asset,\n    address aTokenAddress,\n    address stableDebtAddress,\n    address variableDebtAddress,\n    address interestRateStrategyAddress\n  ) external;\n\n  function initialize(address provider) external;\n\n  function liquidationCall(\n    address collateralAsset,\n    address debtAsset,\n    address user,\n    uint256 debtToCover,\n    bool receiveAToken\n  ) external;\n\n  function paused() external view returns (bool);\n\n  /**\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n   * - Users can be rebalanced if the following conditions are satisfied:\n   *     1. Usage ratio is above 95%\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n   *        borrowed at a stable rate and depositors are not earning enough\n   * @param asset The address of the underlying asset borrowed\n   * @param user The address of the user to be rebalanced\n   **/\n  function rebalanceStableBorrowRate(address asset, address user) external;\n\n  /**\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n   * other borrower whose debt should be removed\n   * @return The final amount repaid\n   **/\n  function repay(\n    address asset,\n    uint256 amount,\n    uint256 rateMode,\n    address onBehalfOf\n  ) external returns (uint256);\n\n  function setConfiguration(address asset, uint256 configuration) external;\n  function setPause(bool val) external;\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external;\n\n  /**\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n   * @param asset The address of the underlying asset deposited\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n   **/\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n  /**\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n   * @param asset The address of the underlying asset borrowed\n   * @param rateMode The rate mode that the user wants to swap to\n   **/\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n  /**\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n   * @param to Address that will receive the underlying, same as msg.sender if the user\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n   *   different wallet\n   * @return The final amount withdrawn\n   **/\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n}\n\ninterface DataTypes {\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: Reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60-63: reserved\n    //bit 64-79: reserve factor\n    uint256 data;\n  }\n\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    uint40 lastUpdateTimestamp;\n    //tokens addresses\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint8 id;\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aaveTwo/IAaveTwoPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0x0229f777b0fab107f9591a41d5f02e4e98db6f2d (events were removed)\ninterface IAaveTwoPriceOracle {\n  function WETH() external view returns (address);\n\n  /// @notice Gets an asset price in ETH by address\n  /// @param asset The asset address\n  function getAssetPrice(address asset) external view returns (uint256);\n\n  /// @notice Gets a list of prices in ETH from a list of assets addresses\n  /// @param assets The list of assets addresses\n  function getAssetsPrices(address[] memory assets) external view returns (uint256[] memory);\n\n  /// @notice Gets the address of the fallback oracle\n  /// @return address The addres of the fallback oracle\n  function getFallbackOracle() external view returns (address);\n  function setFallbackOracle(address fallbackOracle) external;\n\n  function getSourceOfAsset(address asset) external view returns (address);\n  function setAssetSources(address[] memory assets, address[] memory sources) external;\n\n  function transferOwnership(address newOwner) external;\n  function owner() external view returns (address);\n  function renounceOwnership() external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aaveTwo/IAaveTwoProtocolDataProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0x7551b5D2763519d4e37e8B81929D336De671d46d (TokenData was moved inside interface)\ninterface IAaveTwoProtocolDataProvider {\n  struct TokenData {\n    string symbol;\n    address tokenAddress;\n  }\n\n  function ADDRESSES_PROVIDER() external view returns (address);\n\n  function getAllATokens() external view returns (TokenData[] memory);\n  function getAllReservesTokens() external view returns (TokenData[] memory);\n\n  function getReserveConfigurationData(address asset)\n  external\n  view\n  returns (\n    uint256 decimals,\n    uint256 ltv,\n    uint256 liquidationThreshold,\n    uint256 liquidationBonus,\n    uint256 reserveFactor,\n    bool usageAsCollateralEnabled,\n    bool borrowingEnabled,\n    bool stableBorrowRateEnabled,\n    bool isActive,\n    bool isFrozen\n  );\n\n  function getReserveData(address asset)\n  external\n  view\n  returns (\n    uint256 availableLiquidity,\n    uint256 totalStableDebt,\n    uint256 totalVariableDebt,\n    uint256 liquidityRate,\n    uint256 variableBorrowRate,\n    uint256 stableBorrowRate,\n    uint256 averageStableBorrowRate,\n    uint256 liquidityIndex,\n    uint256 variableBorrowIndex,\n    uint40 lastUpdateTimestamp\n  );\n\n  function getReserveTokensAddresses(address asset)\n  external\n  view\n  returns (\n    address aTokenAddress,\n    address stableDebtTokenAddress,\n    address variableDebtTokenAddress\n  );\n\n  function getUserReserveData(address asset, address user)\n  external\n  view\n  returns (\n    uint256 currentATokenBalance,\n    uint256 currentStableDebt,\n    uint256 currentVariableDebt,\n    uint256 principalStableDebt,\n    uint256 scaledVariableDebt,\n    uint256 stableBorrowRate,\n    uint256 liquidityRate,\n    uint40 stableRateLastUpdated,\n    bool usageAsCollateralEnabled\n  );\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aaveTwo/IAaveTwoReserveInterestRateStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/**\n * @notice Interface for the calculation of the interest rates\n   @dev Created using aave-v2-protocol, IReserveInterestRateStrategy\n */\ninterface IAaveTwoReserveInterestRateStrategy {\n  function baseVariableBorrowRate() external view returns (uint256);\n  function getMaxVariableBorrowRate() external view returns (uint256);\n\n  /**\n   * @dev Calculates the interest rates depending on the reserve's state and configurations\n   * @param reserve The address of the reserve\n   * @param liquidityAdded The liquidity added during the operation\n   * @param liquidityTaken The liquidity taken during the operation\n   * @param totalStableDebt The total borrowed from the reserve a stable rate\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\n   * @param averageStableBorrowRate The weighted average of all the stable rate loans\n   * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\n   **/\n  function calculateInterestRates(\n    address reserve,\n    address aToken,\n    uint256 liquidityAdded,\n    uint256 liquidityTaken,\n    uint256 totalStableDebt,\n    uint256 totalVariableDebt,\n    uint256 averageStableBorrowRate,\n    uint256 reserveFactor\n  ) external view returns (\n    uint256 liquidityRate,\n    uint256 stableBorrowRate,\n    uint256 variableBorrowRate\n  );\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/aaveTwo/IAaveTwoStableDebtToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n\n/// @notice Restored from 0x72a053fa208eaafa53adb1a1ea6b4b2175b5735e (events were removed)\ninterface IAaveTwoStableDebtToken {\n  function DEBT_TOKEN_REVISION() external view returns (uint256);\n  function POOL() external view returns (address);\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n  function approveDelegation(address delegatee, uint256 amount) external;\n  function balanceOf(address account) external view returns (uint256);\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\n  function burn(address user, uint256 amount) external;\n  function decimals() external view returns (uint8);\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n  function getAverageStableRate() external view returns (uint256);\n  function getIncentivesController() external view returns (address);\n\n  function getSupplyData() external view returns (uint256, uint256, uint256, uint40);\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\n  function getTotalSupplyLastUpdated() external view returns (uint40);\n  function getUserLastUpdated(address user) external view returns (uint40);\n  function getUserStableRate(address user) external view returns (uint256);\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n  function initialize(\n    address pool,\n    address underlyingAsset,\n    address incentivesController,\n    uint8 debtTokenDecimals,\n    string memory debtTokenName,\n    string memory debtTokenSymbol,\n    bytes memory params\n  ) external;\n\n  function mint(\n    address user,\n    address onBehalfOf,\n    uint256 amount,\n    uint256 rate\n  ) external returns (bool);\n\n  function name() external view returns (string memory);\n  function principalBalanceOf(address user) external view returns (uint256);\n  function symbol() external view returns (string memory);\n  function totalSupply() external view returns (uint256);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICompoundComptrollerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Min common set of functions of comptroller of Compound-based protocol\n///         that are required in platform and pool adapters\ninterface ICompoundComptrollerBase {\n  function oracle() external view returns (address);\n\n  /// @notice Add assets to be included in account liquidity calculation\n  /// @param cTokens The list of addresses of the cToken markets to be enabled\n  /// @return Success indicator for whether each corresponding market was entered\n  function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\n\n  /// @notice Determine the current account liquidity wrt collateral requirements\n  ///         Return (possible error code (semi-opaque),\n  ///         account liquidity in excess of collateral requirements,\n  ///         account shortfall below collateral requirements)\n  function getAccountLiquidity(address account) external view returns (\n    uint256 error,\n    uint256 liquidity,\n    uint256 shortfall\n  );\n\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n  /// @dev https://github.com/compound-finance/compound-protocol/blob/master/contracts/ComptrollerStorage.sol\n  function borrowCaps(address cToken) external view returns (uint256);\n  function borrowGuardianPaused(address) external view returns (bool);\n  function mintGuardianPaused(address) external view returns (bool);\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICompoundComptrollerBaseV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./ICompoundComptrollerBase.sol\";\n\n/// @notice ICompoundComptrollerBase + markets() implemented by ComptrollerStorage\n///         Supported by Compound < v2.8\ninterface ICompoundComptrollerBaseV1 is ICompoundComptrollerBase {\n\n  /// @return isListed represents whether the comptroller recognizes this cToken\n  /// @return collateralFactorMantissa scaled by 1e18, is multiplied by a supply balance to determine how much value can be borrowed\n  function markets(address) external view returns (\n    bool isListed,\n    uint256 collateralFactorMantissa\n  );\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICompoundComptrollerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./ICompoundComptrollerBase.sol\";\n\n/// @notice ICompoundComptrollerBase + markets() implemented by ComptrollerV2Storage\n///         Supported by Compound >= v2.8\ninterface ICompoundComptrollerBaseV2 is ICompoundComptrollerBase {\n\n  /// @return isListed represents whether the comptroller recognizes this cToken\n  /// @return collateralFactorMantissa scaled by 1e18, is multiplied by a supply balance to determine how much value can be borrowed\n  /// @return isComped Whether or not this market receives COMP\n  function markets(address) external view returns (\n    bool isListed,\n    uint256 collateralFactorMantissa,\n    bool isComped\n  );\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICompoundComptrollerBaseV2Zerovix.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./ICompoundComptrollerBase.sol\";\n\n/// @notice ICompoundComptrollerBase + markets() implemented by ComptrollerV2Storage\n///         In Zerovix markets() returns collateralFactorMantissa in last value\n///         Supported by Compound >= v2.8\ninterface ICompoundComptrollerBaseV2Zerovix is ICompoundComptrollerBase {\n\n  /// @return isListed represents whether the comptroller recognizes this cToken\n  /// @return autoCollaterize markets marked with autoCollaterize are automatically set as collateral for the user at the first mint\n  /// @return collateralFactorMantissa scaled by 1e18, is multiplied by a supply balance to determine how much value can be borrowed\n  /// Multiplier representing the most one can borrow against their collateral in this market.\n  /// For instance, 0.9 to allow borrowing 90% of collateral value.\n  /// Must be between 0 and 1, and stored as a mantissa.\n  function markets(address) external view returns (\n    bool isListed,\n    bool autoCollaterize,\n    uint256 collateralFactorMantissa\n  );\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICompoundInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ICompoundInterestRateModel {\n  /// @notice Calculates the current borrow interest rate per block\n  /// @param cash The total amount of cash the market has\n  /// @param borrows The total amount of borrows the market has outstanding\n  /// @param reserves The total amount of reserves the market has\n  /// @return The borrow rate per block (as a percentage, and scaled by 1e18)\n  function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view returns (uint256);\n\n  /// @notice Calculates the current supply interest rate per block\n  /// @param cash The total amount of cash the market has\n  /// @param borrows The total amount of borrows the market has outstanding\n  /// @param reserves The total amount of reserves the market has\n  /// @param reserveFactorMantissa The current reserve factor the market has\n  /// @return The supply rate per block (as a percentage, and scaled by 1e18)\n  function getSupplyRate(uint256 cash, uint256 borrows, uint256 reserves, uint256 reserveFactorMantissa) external view returns (uint256);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICompoundPoolAdapterLibCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Set of functions that should be implemented by the caller of ICompoundPoolAdapterLib\n/// @dev This interface should be implemented if the protocol's token doesn't support ICTokenBase, i.e.\n///      the token uses not-standard declaration of all or some key functions - borrow(), repayBorrow and so on.\ninterface ICompoundPoolAdapterLibCaller {\n  /// @notice Call cToken.borrow() to borrow {amount} of {borrowAsset}\n  /// Assume, that required collateral amount is already supplied.\n  /// @dev It's not necessary to check if the amount was actually received (the check is made in CompoundPoolAdapterLib)\n  function _borrow(address borrowAsset, address borrowCToken, uint amount) external;\n\n  /// @notice Call cToken.repayBorrow() to repay {amountToRepay}\n  function _repayBorrow(address borrowAsset, address borrowCToken, uint amountToRepay) external;\n\n  /// @notice Call cToken.repayBorrow() to repay {amountToRepay}. Ensure that the operation was successfully made.\n  /// @return Received amount of collateral\n  function _redeem(address collateralAsset, address collateralCToken, uint amountToWithdraw) external returns (uint);\n\n  /// @notice Call cToken.mint() to supply {amount} to the lending platform.\n  /// @dev Ensure that the operation was successfully made.\n  function _mint(address collateralCToken, uint amount) external;\n\n  function _markets(address collateralCToken) external view returns (uint collateralFactor);\n}"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICompoundPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ICompoundPriceOracle {\n\n  /// @notice Get the underlying price of a cToken asset\n  /// @param cToken The cToken to get the underlying price of\n  /// @return The underlying asset price mantissa. Decimals = [36 - decimals of the underlying]\n  ///  Zero means the price is unavailable.\n  function getUnderlyingPrice(address cToken) external view returns (uint256);\n}"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICTokenBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./ICTokenCurrent.sol\";\n\n/// @notice Min common set of functions of Compound cTokens\n/// required to implement platform and pool adapters\ninterface ICTokenBase is ICTokenCurrent {\n  /// @notice Get cash balance of this mToken in the underlying asset\n  /// @return The quantity of underlying asset owned by this contract\n  function getCash() external view returns (uint256);\n\n  /// @notice Total amount of outstanding borrows of the underlying in this market\n  function totalBorrows() external view returns (uint256);\n\n  function totalReserves() external view returns (uint256);\n\n  /// @notice Model which tells what the current interest rate should be\n  function interestRateModel() external view returns (address);\n\n  /// @notice Fraction of interest currently set aside for reserves\n  function reserveFactorMantissa() external view returns (uint256);\n\n  function underlying() external view returns (address);\n\n/// @notice Sender borrows assets from the protocol to their own address\n  /// @param borrowAmount The amount of the underlying asset to borrow\n  /// @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n  function borrow(uint256 borrowAmount) external returns (uint256);\n\n  /// @notice Sender supplies assets into the market and receives mTokens in exchange\n  /// @dev Accrues interest whether or not the operation succeeds, unless reverted\n  /// @param mintAmount The amount of the underlying asset to supply\n  /// @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n  function mint(uint256 mintAmount) external returns (uint256);\n\n  /// @notice Sender repays their own borrow\n  /// @param repayAmount The amount to repay\n  /// @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n  /// @notice Sender redeems mTokens in exchange for the underlying asset\n  /// @dev Accrues interest whether or not the operation succeeds, unless reverted\n  /// @param redeemTokens The number of mTokens to redeem into underlying\n  /// @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n  function redeem(uint256 redeemTokens) external returns (uint256);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICTokenCurrent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice All XXXCurrent functions of Compound cTokens\ninterface ICTokenCurrent {\n  /// @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n  /// @param account The address whose balance should be calculated after updating borrowIndex\n  /// @return The calculated balance\n  function borrowBalanceCurrent(address account) external returns (uint256);\n\n  /// @notice Accrue interest then return the up-to-date exchange rate\n  /// @return Calculated exchange rate scaled by 1e18\n  function exchangeRateCurrent() external returns (uint256);\n\n  /// @notice Get a snapshot of the account's balances, and the cached exchange rate\n  /// @dev This is used by comptroller to more efficiently perform liquidity checks.\n  /// @param account Address of the account to snapshot\n  function getAccountSnapshot(address account) external view returns (\n    uint256 errorCode,\n    uint256 tokenBalance,\n    uint256 borrowBalance,\n    uint256 exchangeRateMantissa\n  );\n}"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICTokenNative.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice cToken for native token, see:\n//          Compound: CEther\n//          Moonwell: MGlimmer\n//          Hundred finance: hMatic\ninterface ICTokenNative {\n  function mint() external payable;\n  function repayBorrow() external payable;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/ICTokenRatesPerTimestamp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice A part of CToken-interface for compound with rates-per-timestamp, i.e. Moonwell\ninterface ICTokenRatesPerTimestamp {\n  /// @notice Block number that interest was last accrued at\n  function accrualBlockTimestamp() external view returns (uint256);\n\n  /// @notice Returns the current per-timestamp borrow interest rate for this cToken\n  /// @return The borrow interest rate per timestamp, scaled by 1e18\n  function borrowRatePerTimestamp() external view returns (uint256);\n\n  /// @notice Returns the current per-timestamp supply interest rate for this mToken\n  /// @return The supply interest rate per timestmp, scaled by 1e18\n  function supplyRatePerTimestamp() external view returns (uint256);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/compound/INativeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Tokens like WMATIC on Polygon, WETH9 on Base\ninterface INativeToken {\n\n  function balanceOf(address target) external view returns (uint256);\n\n  function deposit() external payable;\n\n  function withdraw(uint256 wad) external;\n\n  function totalSupply() external view returns (uint256);\n\n  function approve(address guy, uint256 wad) external returns (bool);\n\n  function transfer(address dst, uint256 wad) external returns (bool);\n\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/dforce/SafeRatioMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @dev Adapted from the project LendingContractsV2, LendingDataV2.sol, library SafeRatioMath\nlibrary SafeRatioMath {\n  function rpow(\n    uint256 x,\n    uint256 n,\n    uint256 base\n  ) internal pure returns (uint256 z) {\n    assembly {\n      switch x\n      case 0 {\n        switch n\n        case 0 {\n          z := base\n        }\n        default {\n          z := 0\n        }\n      }\n      default {\n        switch mod(n, 2)\n        case 0 {\n          z := base\n        }\n        default {\n          z := x\n        }\n        let half := div(base, 2) // for rounding.\n\n        for {\n          n := div(n, 2)\n        } n {\n          n := div(n, 2)\n        } {\n          let xx := mul(x, x)\n          if iszero(eq(div(xx, x), x)) {\n            revert(0, 0)\n          }\n          let xxRound := add(xx, half)\n          if lt(xxRound, xx) {\n            revert(0, 0)\n          }\n          x := div(xxRound, base)\n          if mod(n, 2) {\n            let zx := mul(z, x)\n            if and(\n            iszero(iszero(x)),\n            iszero(eq(div(zx, x), z))\n            ) {\n              revert(0, 0)\n            }\n            let zxRound := add(zx, half)\n            if lt(zxRound, zx) {\n              revert(0, 0)\n            }\n            z := div(zxRound, base)\n          }\n        }\n      }\n    }\n\n    return z;\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/gelato/IOps.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\ninterface IOps {\n  function gelato() external view returns (address payable);\n  function taskTreasury() external view returns (address);\n}"
    },
    "@tetu_io/tetu-converter/contracts/integrations/gelato/IResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IResolver {\n    function checker()\n        external\n        view\n        returns (bool canExec, bytes memory execPayload);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/hundred-finance/IHfComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0xB426c1b7fABEa9EA6A273E8427040568a8C7DF13 (events and (most) _xxx were removed)\n/// @dev 0xB426c1b7fABEa9EA6A273E8427040568a8C7DF13 is implementation of 0xEdBA32185BAF7fEf9A26ca567bC4A6cbe426e499\n///      see https://docs.hundred.finance/developers/protocol-contracts/polygon\ninterface IHfComptroller {\n  function accountAssets(address, uint256) external view returns (address);\n  function admin() external view returns (address);\n  function allMarkets(uint256) external view returns (address);\n\n  /**\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n  function borrowAllowed(\n    address cToken,\n    address borrower,\n    uint256 borrowAmount\n  ) external returns (uint256);\n\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n  function borrowCapGuardian() external view returns (address);\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n  /// @dev https://github.com/compound-finance/compound-protocol/blob/master/contracts/ComptrollerStorage.sol\n  function borrowCaps(address cToken) external view returns (uint256);\n  function borrowGuardianPaused(address) external view returns (bool);\n\n  /**\n   * @notice Validates borrow and reverts on rejection. May emit logs.\n     * @param cToken Asset whose underlying is being borrowed\n     * @param borrower The address borrowing the underlying\n     * @param borrowAmount The amount of the underlying asset requested to borrow\n     */\n  function borrowVerify(\n    address cToken,\n    address borrower,\n    uint256 borrowAmount\n  ) external;\n\n  function bprotocol(address) external view returns (address);\n  /**\n   * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n  function checkMembership(address account, address cToken) external view returns (bool);\n\n  /**\n   * @notice Claim all the comp accrued by holder in the specified markets\n     * @param holder The address to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     */\n  function claimComp(address holder, address[] memory cTokens) external;\n  function claimComp(address[] memory holders, address[] memory cTokens) external;\n  /**\n   * @notice Claim all the comp accrued by holder in all markets\n     * @param holder The address to claim COMP for\n     */\n  function claimComp(address holder) external;\n  function closeFactorMantissa() external view returns (uint256);\n  function compAccrued(address) external view returns (uint256);\n  function compBorrowState(address) external view returns (uint224 index_, uint32 block_);\n  function compBorrowerIndex(address, address) external view returns (uint256);\n  function compContributorSpeeds(address) external view returns (uint256);\n  function compInitialIndex() external view returns (uint224);\n  function compRate() external view returns (uint256);\n  function compSpeeds(address) external view returns (uint256);\n  function compSupplierIndex(address, address) external view returns (uint256);\n  function compSupplyState(address) external view returns (uint224 index, uint32 block_);\n  /**\n   * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n  function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\n  /**\n   * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing necessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n  function exitMarket(address cTokenAddress) external returns (uint256);\n\n  /**\n   * @notice Determine the current account liquidity wrt collateral requirements\n   *         Return (possible error code (semi-opaque),\n   *         account liquidity in excess of collateral requirements,\n   *         account shortfall below collateral requirements)\n   */\n  function getAccountLiquidity(address account)\n  external view returns (uint256 error, uint256 liquidity, uint256 shortfall);\n\n  /**\n   * @notice Return all of the markets\n     * @dev The automatic getter may be used to access an individual market.\n     * @return The list of market addresses\n     */\n  function getAllMarkets() external view returns (address[] memory);\n  /**\n   * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n  function getAssetsIn(address account) external view returns (address[] memory);\n  function getBlockNumber() external view returns (uint256);\n\n  /**\n   * @notice Return the address of the COMP token\n     * @return The address of COMP\n     */\n  function getCompAddress() external pure returns (address);\n\n  /**\n   * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount\n  )\n  external\n  view\n  returns (\n    uint256,\n    uint256,\n    uint256\n  );\n\n  function implementation() external view returns (address);\n  function isComptroller() external view returns (bool);\n  function lastContributorBlock(address) external view returns (uint256);\n\n  /**\n   * @notice Checks if the liquidation should be allowed to occur\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n  function liquidateBorrowAllowed(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 repayAmount\n  ) external returns (uint256);\n\n  /**\n   * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n  function liquidateBorrowVerify(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 actualRepayAmount,\n    uint256 seizeTokens\n  ) external;\n\n  /**\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n  function liquidateCalculateSeizeTokens(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    uint256 actualRepayAmount\n  ) external view returns (uint256, uint256);\n\n  function liquidationIncentiveMantissa() external view returns (uint256);\n\n  /// @return isListed represents whether the comptroller recognizes this cToken\n  /// @return collateralFactorMantissa scaled by 1e18, is multiplied by a supply balance to determine how much value can be borrowed\n  /// @return isComped indicates whether or not suppliers and borrowers are distributed COMP tokens.\n  function markets(address)\n  external\n  view\n  returns (\n    bool isListed,\n    uint256 collateralFactorMantissa,\n    bool isComped\n  );\n\n  function maxAssets() external view returns (uint256);\n\n  /**\n   * @notice Checks if the account should be allowed to mint tokens in the given market\n     * @param cToken The market to verify the mint against\n     * @param minter The account which would get the minted tokens\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n  function mintAllowed(\n    address cToken,\n    address minter,\n    uint256 mintAmount\n  ) external returns (uint256);\n\n  function mintGuardianPaused(address) external view returns (bool);\n\n  /**\n   * @notice Validates mint and reverts on rejection. May emit logs.\n     * @param cToken Asset being minted\n     * @param minter The address minting the tokens\n     * @param actualMintAmount The amount of the underlying asset being minted\n     * @param mintTokens The number of tokens being minted\n     */\n  function mintVerify(\n    address cToken,\n    address minter,\n    uint256 actualMintAmount,\n    uint256 mintTokens\n  ) external;\n\n  function oracle() external view returns (address);\n  function pauseGuardian() external view returns (address);\n  function pendingAdmin() external view returns (address);\n  function pendingImplementation() external view returns (address);\n\n  /**\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n  function redeemAllowed(\n    address cToken,\n    address redeemer,\n    uint256 redeemTokens\n  ) external returns (uint256);\n\n  /**\n   * @notice Validates redeem and reverts on rejection. May emit logs.\n     * @param cToken Asset being redeemed\n     * @param redeemer The address redeeming the tokens\n     * @param redeemAmount The amount of the underlying asset being redeemed\n     * @param redeemTokens The number of tokens being redeemed\n     */\n  function redeemVerify(\n    address cToken,\n    address redeemer,\n    uint256 redeemAmount,\n    uint256 redeemTokens\n  ) external;\n\n  /**\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\n     * @param cToken The market to verify the repay against\n     * @param payer The account which would repay the asset\n     * @param borrower The account which would borrowed the asset\n     * @param repayAmount The amount of the underlying asset the account would repay\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n  function repayBorrowAllowed(\n    address cToken,\n    address payer,\n    address borrower,\n    uint256 repayAmount\n  ) external returns (uint256);\n\n  /**\n   * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n     * @param cToken Asset being repaid\n     * @param payer The address repaying the borrow\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n  function repayBorrowVerify(\n    address cToken,\n    address payer,\n    address borrower,\n    uint256 actualRepayAmount,\n    uint256 borrowerIndex\n  ) external;\n\n  /**\n   * @notice Checks if the seizing of assets should be allowed to occur\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n  function seizeAllowed(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external returns (uint256);\n\n  function seizeGuardianPaused() external view returns (bool);\n\n  /**\n   * @notice Validates seize and reverts on rejection. May emit logs.\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n  function seizeVerify(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external;\n\n  /**\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n  function transferAllowed(\n    address cToken,\n    address src,\n    address dst,\n    uint256 transferTokens\n  ) external returns (uint256);\n\n  function transferGuardianPaused() external view returns (bool);\n\n  /**\n   * @notice Validates transfer and reverts on rejection. May emit logs.\n     * @param cToken Asset being transferred\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     */\n  function transferVerify(\n    address cToken,\n    address src,\n    address dst,\n    uint256 transferTokens\n  ) external;\n\n  /**\n   * @notice Calculate additional accrued COMP for a contributor since last accrual\n     * @param contributor The address to calculate contributor rewards for\n     */\n  function updateContributorRewards(address contributor) external;\n\n\n\n  function _setPriceOracle(address newOracle) external returns (uint256);\n\n  function _setMarketBorrowCaps(address[] memory cTokens, uint256[] memory newBorrowCaps) external;\n  function _setMintPaused(address cToken, bool state) external returns (bool);\n  function _setBorrowPaused(address cToken, bool state) external returns (bool);\n  function _setTransferPaused(bool state) external returns (bool);\n\n\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/hundred-finance/IHfCToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0xbb93C7F378B9b531216f9aD7b5748be189A55807 (events and _xxx were removed)\n/// @dev 0xbb93C7F378B9b531216f9aD7b5748be189A55807 is impl of 0xE4e43864ea18d5E5211352a4B810383460aB7fcC\n///      see https://docs.hundred.finance/developers/protocol-contracts/polygon\ninterface IHfCToken {\n    /**\n     * @notice Block number that interest was last accrued at\n     */\n    function accrualBlockNumber() external view returns (uint256);\n\n    /**\n     * @notice Applies accrued interest to total borrows and reserves\n     * @dev This calculates interest accrued from the last checkpointed block\n     *   up to the current block and writes new checkpoint to storage.\n     */\n    function accrueInterest() external returns (uint256);\n\n    /**\n     * @notice Administrator for this contract\n     */\n    function admin() external view returns (address);\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return The number of tokens allowed to be spent (-1 means infinity)\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (uint256.max means infinity)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Get the token balance of the `owner`\n     * @param owner The address of the account to query\n     * @return The number of tokens owned by `owner`\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @notice Get the underlying balance of the `owner`\n     * @dev This also accrues interest in a transaction\n     * @param owner The address of the account to query\n     * @return The amount of underlying owned by `owner`\n     */\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    /**\n      * @notice Sender borrows assets from the protocol to their own address\n      * @param borrowAmount The amount of the underlying asset to borrow\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    /**\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n     * @param account The address whose balance should be calculated after updating borrowIndex\n     * @return The calculated balance\n     */\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return The calculated balance\n     */\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    /**\n     * @notice Accumulator of the total earned interest rate since the opening of the market\n     */\n    function borrowIndex() external view returns (uint256);\n\n    /**\n     * @notice Returns the current per-block borrow interest rate for this cToken\n     * @return The borrow interest rate per block, scaled by 1e18\n     */\n    function borrowRatePerBlock() external view returns (uint256);\n\n    /**\n     * @notice Contract which oversees inter-cToken operations\n     */\n    function comptroller() external view returns (address);\n\n    /**\n         * @notice EIP-20 token decimals for this token\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent() external returns (uint256);\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStored() external view returns (uint256);\n\n    /**\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\n     *         Return (possible error, token balance, borrow balance, exchange rate mantissa)\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\n     * @param account Address of the account to snapshot\n     */\n    function getAccountSnapshot(address account)\n    external view returns (uint256 error, uint256 tokenBalance, uint256 borrowBalance, uint256 exchangeRateMantissa);\n\n    /**\n     * @notice Get cash balance of this cToken in the underlying asset\n     * @return The quantity of underlying asset owned by this contract\n     */\n    function getCash() external view returns (uint256);\n    function implementation() external view returns (address);\n\n    function initialize(\n        address underlying_,\n        address comptroller_,\n        address interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) external;\n\n    function initialize(\n        address comptroller_,\n        address interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) external;\n\n    /// @notice Model which tells what the current interest rate should be\n    function interestRateModel() external view returns (address);\n\n    /**\n        * @notice Indicator that this is a CToken contract (for inspection)\n     */\n    function isCToken() external view returns (bool);\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral) external returns (uint256);\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function mint(uint256 mintAmount) external returns (uint256);\n    function name() external view returns (string memory);\n\n    /**\n        * @notice Pending administrator for this contract\n     */\n    function pendingAdmin() external view returns (address);\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemTokens The number of cTokens to redeem into underlying\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to redeem\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    /**\n     * @notice Sender repays a borrow belonging to borrower\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n    /**\n     * @notice Fraction of interest currently set aside for reserves\n     */\n    function reserveFactorMantissa() external view returns (uint256);\n\n    function seize(\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external returns (uint256);\n\n    /**\n     * @notice Returns the current per-block supply interest rate for this cToken\n     * @return The supply interest rate per block, scaled by 1e18\n     */\n    function supplyRatePerBlock() external view returns (uint256);\n\n    /**\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\n     * @param token The address of the ERC-20 token to sweep\n     */\n    function sweepToken(address token) external;\n    function symbol() external view returns (string memory);\n    /**\n     * @notice Total amount of outstanding borrows of the underlying in this market\n     */\n    function totalBorrows() external view returns (uint256);\n\n    /**\n     * @notice Returns the current total borrows plus accrued interest\n     * @return The total borrows with interest\n     */\n    function totalBorrowsCurrent() external returns (uint256);\n    /**\n         * @notice Total amount of reserves of the underlying held in this market\n     */\n    function totalReserves() external view returns (uint256);\n    /**\n        * @notice Total number of tokens in circulation\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external returns (bool);\n\n    function underlying() external view returns (address);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/hundred-finance/IHfInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0x29DDb4c4f9baAe366DbD40eff79d364e004425b0 (events were removed)\ninterface IHfInterestRateModel {\n  function baseRatePerBlock() external view returns (uint256);\n  function blocksPerYear() external view returns (uint256);\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) external view returns (uint256);\n\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) external view returns (uint256);\n\n  function isInterestRateModel() external view returns (bool);\n  function isOwner() external view returns (bool);\n  function jumpMultiplierPerBlock() external view returns (uint256);\n  function kink() external view returns (uint256);\n  function multiplierPerBlock() external view returns (uint256);\n  function name() external view returns (string memory);\n  function owner() external view returns (address);\n  function renounceOwnership() external;\n  function transferOwnership(address newOwner) external;\n  function updateBlocksPerYear(uint256 blocksPerYear_) external;\n\n  function updateJumpRateModel(\n    uint256 baseRatePerYear,\n    uint256 multiplierPerYear,\n    uint256 jumpMultiplierPerYear,\n    uint256 kink_\n  ) external;\n\n  function utilizationRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) external pure returns (uint256);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/hundred-finance/IHfPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from 0x0b510A226F4A7A66c480988704eCd5306B6f1954 (events removed)\ninterface IHfPriceOracle {\n  function ethUsdChainlinkAggregatorAddress() external view returns (address);\n\n  /**\n    * @notice Get the underlying price of a cToken asset\n      * @param cToken The cToken to get the underlying price of\n      * @return The underlying asset price mantissa (scaled by 1e18).\n      *  Zero means the price is unavailable.\n      */\n  function getUnderlyingPrice(address cToken) external view returns (uint256);\n\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\n  function isPriceOracle() external view returns (bool);\n  function owner() external view returns (address);\n  function renounceOwnership() external;\n  function setEthUsdChainlinkAggregatorAddress(address addr) external;\n\n  function setTokenConfigs(\n    address[] memory cTokenAddress,\n    address[] memory chainlinkAggregatorAddress,\n    uint256[] memory chainlinkPriceBase,\n    uint256[] memory underlyingTokenDecimals\n  ) external;\n\n  function tokenConfig(address)\n  external\n  view\n  returns (\n    address chainlinkAggregatorAddress,\n    uint256 chainlinkPriceBase,\n    uint256 underlyingTokenDecimals\n  );\n\n  function transferOwnership(address newOwner) external;\n}\n\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\n/*\n[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethUsdChainlinkAggregatorAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"chainlinkAggregatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainlinkPriceBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingTokenDecimals\",\"type\":\"uint256\"}],\"name\":\"TokenConfigUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ethUsdChainlinkAggregatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CTokenInterface\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPriceOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEthUsdChainlinkAggregatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"chainlinkAggregatorAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainlinkPriceBase\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingTokenDecimals\",\"type\":\"uint256[]\"}],\"name\":\"setTokenConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"chainlinkAggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainlinkPriceBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n*/\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/IWmatic.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IWmatic {\n\n  function balanceOf(address target) external view returns (uint256);\n\n  function deposit() external payable;\n\n  function withdraw(uint256 wad) external;\n\n  function totalSupply() external view returns (uint256);\n\n  function approve(address guy, uint256 wad) external returns (bool);\n\n  function transfer(address dst, uint256 wad) external returns (bool);\n\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/market/ICErc20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n\ninterface ICErc20 {\n  function _acceptAdmin (  ) external returns ( uint );\n  function _addReserves ( uint addAmount ) external returns ( uint );\n  function _reduceReserves ( uint reduceAmount ) external returns ( uint );\n  function _setComptroller ( address newComptroller ) external returns ( uint );\n  function _setInterestRateModel ( address newInterestRateModel ) external returns ( uint );\n  function _setPendingAdmin ( address newPendingAdmin ) external returns ( uint );\n  function _setReserveFactor ( uint newReserveFactorMantissa ) external returns ( uint );\n  function accrualBlockNumber (  ) external view returns ( uint );\n  function accrueInterest (  ) external returns ( uint );\n  function admin (  ) external view returns ( address );\n  function allowance ( address owner, address spender ) external view returns ( uint );\n  function approve ( address spender, uint amount ) external returns ( bool );\n  function balanceOf ( address owner ) external view returns ( uint );\n  function balanceOfUnderlying ( address owner ) external returns ( uint );\n  function borrow ( uint borrowAmount ) external returns ( uint );\n  function borrowBalanceCurrent ( address account ) external returns ( uint );\n  function borrowBalanceStored ( address account ) external view returns ( uint );\n  function borrowIndex (  ) external view returns ( uint );\n  function borrowRatePerBlock (  ) external view returns ( uint );\n  function comptroller (  ) external view returns ( address );\n  function decimals (  ) external view returns ( uint8 );\n  function exchangeRateCurrent (  ) external returns ( uint );\n  function exchangeRateStored (  ) external view returns ( uint );\n  function getAccountSnapshot ( address account ) external view returns ( uint, uint, uint, uint );\n  function getCash (  ) external view returns ( uint );\n  function interestRateModel (  ) external view returns ( address );\n  function isCToken (  ) external view returns ( bool );\n  function liquidateBorrow ( address borrower, uint repayAmount, address cTokenCollateral ) external returns ( uint );\n  function mint ( uint mintAmount ) external returns ( uint );\n  function name (  ) external view returns ( string memory);\n  function pendingAdmin (  ) external view returns ( address );\n  function redeem ( uint redeemTokens ) external returns ( uint );\n  function redeemUnderlying ( uint redeemAmount ) external returns ( uint );\n  function repayBorrow ( uint repayAmount ) external returns ( uint );\n  function repayBorrowBehalf ( address borrower, uint repayAmount ) external returns ( uint );\n  function reserveFactorMantissa (  ) external view returns ( uint );\n  function seize ( address liquidator, address borrower, uint seizeTokens ) external returns ( uint );\n  function supplyRatePerBlock (  ) external view returns ( uint );\n  function sweepToken ( address token ) external;\n  function symbol (  ) external view returns ( string memory);\n  function totalBorrows (  ) external view returns ( uint );\n  function totalBorrowsCurrent (  ) external returns ( uint );\n  function totalReserves (  ) external view returns ( uint );\n  function totalSupply (  ) external view returns ( uint );\n  function transfer ( address dst, uint amount ) external returns ( bool );\n  function transferFrom ( address src, address dst, uint amount ) external returns ( bool );\n  function underlying (  ) external view returns ( address );\n\n  function adminFeeMantissa() external view returns (uint256);\n  function fuseFeeMantissa() external view returns (uint256);\n  function totalAdminFees() external view returns (uint256);\n  function totalFuseFees() external view returns (uint256);\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/moonwell/IMoonwellComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from implementation 0x73D8A3bF62aACa6690791E57EBaEE4e1d875d8Fe\n/// of 0xfBb21d0380beE3312B33c4353c8936a0F13EF26C\ninterface IMoonwellComptroller {\n  event ActionPaused(string action, bool pauseState);\n  event ActionPaused(address mToken, string action, bool pauseState);\n  event Failure(uint256 error, uint256 info, uint256 detail);\n  event MarketEntered(address mToken, address account);\n  event MarketExited(address mToken, address account);\n  event MarketListed(address mToken);\n  event NewBorrowCap(address indexed mToken, uint256 newBorrowCap);\n  event NewBorrowCapGuardian(\n    address oldBorrowCapGuardian,\n    address newBorrowCapGuardian\n  );\n  event NewCloseFactor(\n    uint256 oldCloseFactorMantissa,\n    uint256 newCloseFactorMantissa\n  );\n  event NewCollateralFactor(\n    address mToken,\n    uint256 oldCollateralFactorMantissa,\n    uint256 newCollateralFactorMantissa\n  );\n  event NewLiquidationIncentive(\n    uint256 oldLiquidationIncentiveMantissa,\n    uint256 newLiquidationIncentiveMantissa\n  );\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n  event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\n  event NewRewardDistributor(\n    address oldRewardDistributor,\n    address newRewardDistributor\n  );\n  event NewSupplyCap(address indexed mToken, uint256 newSupplyCap);\n  event NewSupplyCapGuardian(\n    address oldSupplyCapGuardian,\n    address newSupplyCapGuardian\n  );\n\n  function _become(address unitroller) external;\n\n  function _rescueFunds(address _tokenAddress, uint256 _amount) external;\n\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\n\n  function _setBorrowPaused(address mToken, bool state)\n  external\n  returns (bool);\n\n  function _setCloseFactor(uint256 newCloseFactorMantissa)\n  external\n  returns (uint256);\n\n  function _setCollateralFactor(\n    address mToken,\n    uint256 newCollateralFactorMantissa\n  ) external returns (uint256);\n\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\n  external\n  returns (uint256);\n\n  function _setMarketBorrowCaps(\n    address[] memory mTokens,\n    uint256[] memory newBorrowCaps\n  ) external;\n\n  function _setMarketSupplyCaps(\n    address[] memory mTokens,\n    uint256[] memory newSupplyCaps\n  ) external;\n\n  function _setMintPaused(address mToken, bool state) external returns (bool);\n\n  function _setPauseGuardian(address newPauseGuardian)\n  external\n  returns (uint256);\n\n  function _setPriceOracle(address newOracle) external returns (uint256);\n\n  function _setRewardDistributor(address newRewardDistributor) external;\n\n  function _setSeizePaused(bool state) external returns (bool);\n\n  function _setSupplyCapGuardian(address newSupplyCapGuardian) external;\n\n  function _setTransferPaused(bool state) external returns (bool);\n\n  function _supportMarket(address mToken) external returns (uint256);\n\n  function accountAssets(address, uint256) external view returns (address);\n\n  function admin() external view returns (address);\n\n  function allMarkets(uint256) external view returns (address);\n\n  function borrowAllowed(\n    address mToken,\n    address borrower,\n    uint256 borrowAmount\n  ) external returns (uint256);\n\n  function borrowCapGuardian() external view returns (address);\n\n  function borrowCaps(address) external view returns (uint256);\n\n  function borrowGuardianPaused(address) external view returns (bool);\n\n  function checkMembership(address account, address mToken) external view returns (bool);\n\n  function claimReward(address[] memory holders, address[] memory mTokens, bool borrowers, bool suppliers) external;\n\n  /// @notice Claim all the WELL accrued by holder in the specified markets\n  /// @param holder The address to claim WELL for\n  /// @param mTokens The list of markets to claim WELL in\n  function claimReward(address holder, address[] memory mTokens) external;\n\n  function claimReward() external;\n\n  function claimReward(address holder) external;\n\n  function closeFactorMantissa() external view returns (uint256);\n\n  function comptrollerImplementation() external view returns (address);\n\n  /// @notice Add assets to be included in account liquidity calculation\n  /// @param mTokens The list of addresses of the mToken markets to be enabled\n  /// @return Success indicator for whether each corresponding market was entered\n  function enterMarkets(address[] memory mTokens) external returns (uint256[] memory);\n\n  /// @notice Removes asset from sender's account liquidity calculation\n  /// @dev Sender must not have an outstanding borrow balance in the asset,\n  /// or be providing necessary collateral for an outstanding borrow.\n  /// @param mTokenAddress The address of the asset to be removed\n  /// @return Whether or not the account successfully exited the market\n  function exitMarket(address mTokenAddress) external returns (uint256);\n\n  /// @notice Determine the current account liquidity wrt collateral requirements\n  /// @return errorCode possible error code (semi-opaque)\n  /// @return liquidity Account liquidity in excess of collateral requirements,\n  /// @return shortfall Account shortfall below collateral requirements)\n  function getAccountLiquidity(address account) external view returns (\n    uint256 errorCode,\n    uint256 liquidity,\n    uint256 shortfall\n  );\n\n  function getAllMarkets() external view returns (address[] memory);\n\n  function getAssetsIn(address account) external view returns (address[] memory);\n\n  function getBlockTimestamp() external view returns (uint256);\n\n  /// @notice Determine the current account liquidity wrt collateral requirements\n  /// @return errorCode possible error code\n  /// @return liquidity account liquidity in excess of collateral requirements\n  /// @return shortfall account shortfall below collateral requirements\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address mTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount\n  )\n  external view returns (uint256 errorCode, uint256 liquidity, uint256 shortfall);\n\n  function isComptroller() external view returns (bool);\n\n  function liquidateBorrowAllowed(\n    address mTokenBorrowed,\n    address mTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 repayAmount\n  ) external view returns (uint256);\n\n  function liquidateCalculateSeizeTokens(\n    address mTokenBorrowed,\n    address mTokenCollateral,\n    uint256 actualRepayAmount\n  ) external view returns (uint256, uint256);\n\n  function liquidationIncentiveMantissa() external view returns (uint256);\n\n  function markets(address) external view returns (bool isListed, uint256 collateralFactorMantissa);\n\n  function mintAllowed(address mToken, address minter,uint256 mintAmount) external returns (uint256);\n\n  function mintGuardianPaused(address) external view returns (bool);\n\n  function oracle() external view returns (address);\n\n  function pauseGuardian() external view returns (address);\n\n  function pendingAdmin() external view returns (address);\n\n  function pendingComptrollerImplementation() external view returns (address);\n\n  function redeemAllowed(address mToken, address redeemer, uint256 redeemTokens) external returns (uint256);\n\n  function redeemVerify(\n    address mToken,\n    address redeemer,\n    uint256 redeemAmount,\n    uint256 redeemTokens\n  ) external pure;\n\n  function repayBorrowAllowed(\n    address mToken,\n    address payer,\n    address borrower,\n    uint256 repayAmount\n  ) external returns (uint256);\n\n  function rewardDistributor() external view returns (address);\n\n  function seizeAllowed(\n    address mTokenCollateral,\n    address mTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external returns (uint256);\n\n  function seizeGuardianPaused() external view returns (bool);\n\n  function supplyCapGuardian() external view returns (address);\n\n  function supplyCaps(address) external view returns (uint256);\n\n  function transferAllowed(address mToken, address src, address dst, uint256 transferTokens) external returns (uint256);\n\n  function transferGuardianPaused() external view returns (bool);\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/moonwell/IMoonwellMultiRewardDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Restored from implementation 0xdC649f4fa047a3C98e8705E85B8b1BafCbCFef0f\n/// of 0xe9005b078701e2A0948D2EaC43010D35870Ad9d2\ninterface IMoonwellMultiRewardDistributor {\n  event DisbursedBorrowerRewards(\n    address indexed mToken,\n    address indexed borrower,\n    address indexed emissionToken,\n    uint256 totalAccrued\n  );\n  event DisbursedSupplierRewards(\n    address indexed mToken,\n    address indexed supplier,\n    address indexed emissionToken,\n    uint256 totalAccrued\n  );\n  event FundsRescued(address token, uint256 amount);\n  event GlobalBorrowIndexUpdated(\n    address mToken,\n    address emissionToken,\n    uint256 newIndex,\n    uint32 newTimestamp\n  );\n  event GlobalSupplyIndexUpdated(\n    address mToken,\n    address emissionToken,\n    uint256 newSupplyIndex,\n    uint32 newSupplyGlobalTimestamp\n  );\n  event Initialized(uint8 version);\n  event InsufficientTokensToEmit(\n    address user,\n    address rewardToken,\n    uint256 amount\n  );\n  event NewBorrowRewardSpeed(\n    address indexed mToken,\n    address indexed emissionToken,\n    uint256 oldRewardSpeed,\n    uint256 newRewardSpeed\n  );\n  event NewConfigCreated(\n    address indexed mToken,\n    address indexed owner,\n    address indexed emissionToken,\n    uint256 supplySpeed,\n    uint256 borrowSpeed,\n    uint256 endTime\n  );\n  event NewEmissionCap(uint256 oldEmissionCap, uint256 newEmissionCap);\n  event NewEmissionConfigOwner(\n    address indexed mToken,\n    address indexed emissionToken,\n    address currentOwner,\n    address newOwner\n  );\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n  event NewRewardEndTime(\n    address indexed mToken,\n    address indexed emissionToken,\n    uint256 currentEndTime,\n    uint256 newEndTime\n  );\n  event NewSupplyRewardSpeed(\n    address indexed mToken,\n    address indexed emissionToken,\n    uint256 oldRewardSpeed,\n    uint256 newRewardSpeed\n  );\n  event Paused(address account);\n  event RewardsPaused();\n  event RewardsUnpaused();\n  event Unpaused(address account);\n\n  function _addEmissionConfig(\n    address _mToken,\n    address _owner,\n    address _emissionToken,\n    uint256 _supplyEmissionPerSec,\n    uint256 _borrowEmissionsPerSec,\n    uint256 _endTime\n  ) external;\n\n  function _pauseRewards() external;\n\n  function _rescueFunds(address _tokenAddress, uint256 _amount) external;\n\n  function _setEmissionCap(uint256 _newEmissionCap) external;\n\n  function _setPauseGuardian(address _newPauseGuardian) external;\n\n  function _unpauseRewards() external;\n\n  function _updateBorrowSpeed(\n    address _mToken,\n    address _emissionToken,\n    uint256 _newBorrowSpeed\n  ) external;\n\n  function _updateEndTime(\n    address _mToken,\n    address _emissionToken,\n    uint256 _newEndTime\n  ) external;\n\n  function _updateOwner(\n    address _mToken,\n    address _emissionToken,\n    address _newOwner\n  ) external;\n\n  function _updateSupplySpeed(\n    address _mToken,\n    address _emissionToken,\n    uint256 _newSupplySpeed\n  ) external;\n\n  function comptroller() external view returns (address);\n\n  function disburseBorrowerRewards(\n    address _mToken,\n    address _borrower,\n    bool _sendTokens\n  ) external;\n\n  function disburseSupplierRewards(\n    address _mToken,\n    address _supplier,\n    bool _sendTokens\n  ) external;\n\n  function emissionCap() external view returns (uint256);\n\n  function getAllMarketConfigs(address _mToken)\n  external\n  view\n  returns (MultiRewardDistributorCommon.MarketConfig[] memory);\n\n  function getConfigForMarket(address _mToken, address _emissionToken)\n  external\n  view\n  returns (MultiRewardDistributorCommon.MarketConfig memory);\n\n  function getCurrentEmissionCap() external view returns (uint256);\n\n  function getCurrentOwner(address _mToken, address _emissionToken)\n  external\n  view\n  returns (address);\n\n  function getGlobalBorrowIndex(address mToken, uint256 index)\n  external\n  view\n  returns (uint256);\n\n  function getGlobalSupplyIndex(address mToken, uint256 index)\n  external\n  view\n  returns (uint256);\n\n  function getOutstandingRewardsForUser(address _mToken, address _user)\n  external\n  view\n  returns (MultiRewardDistributorCommon.RewardInfo[] memory);\n\n  function getOutstandingRewardsForUser(address _user)\n  external\n  view\n  returns (MultiRewardDistributorCommon.RewardWithMToken[] memory);\n\n  function initialIndexConstant() external view returns (uint224);\n\n  function initialize(address _comptroller, address _pauseGuardian) external;\n\n  function marketConfigs(address, uint256)\n  external\n  view\n  returns (MultiRewardDistributorCommon.MarketConfig memory config);\n\n  function pauseGuardian() external view returns (address);\n\n  function paused() external view returns (bool);\n\n  function updateMarketBorrowIndex(address _mToken) external;\n\n  function updateMarketBorrowIndexAndDisburseBorrowerRewards(\n    address _mToken,\n    address _borrower,\n    bool _sendTokens\n  ) external;\n\n  function updateMarketSupplyIndex(address _mToken) external;\n\n  function updateMarketSupplyIndexAndDisburseSupplierRewards(\n    address _mToken,\n    address _supplier,\n    bool _sendTokens\n  ) external;\n}\n\ninterface MultiRewardDistributorCommon {\n  struct MarketConfig {\n    address owner;\n    address emissionToken;\n    uint256 endTime;\n    uint224 supplyGlobalIndex;\n    uint32 supplyGlobalTimestamp;\n    uint224 borrowGlobalIndex;\n    uint32 borrowGlobalTimestamp;\n    uint256 supplyEmissionsPerSec;\n    uint256 borrowEmissionsPerSec;\n  }\n\n  struct RewardInfo {\n    address emissionToken;\n    uint256 totalAmount;\n    uint256 supplySide;\n    uint256 borrowSide;\n  }\n\n  struct RewardWithMToken {\n    address mToken;\n    RewardInfo[] rewards;\n  }\n}"
    },
    "@tetu_io/tetu-converter/contracts/integrations/moonwell/IMToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../compound/ICTokenBase.sol\";\nimport \"../compound/ICTokenRatesPerTimestamp.sol\";\n\n/// @notice Restored from implementation 0x1FADFF493529C3Fcc7EE04F1f15D19816ddA45B7\n/// of 0xEdc817A28E8B93B03976FBd4a3dDBc9f7D176c22\ninterface IMToken is ICTokenBase, ICTokenRatesPerTimestamp {\n  event AccrueInterest(\n    uint256 cashPrior,\n    uint256 interestAccumulated,\n    uint256 borrowIndex,\n    uint256 totalBorrows\n  );\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 amount\n  );\n  event Borrow(\n    address borrower,\n    uint256 borrowAmount,\n    uint256 accountBorrows,\n    uint256 totalBorrows\n  );\n  event Failure(uint256 error, uint256 info, uint256 detail);\n  event LiquidateBorrow(\n    address liquidator,\n    address borrower,\n    uint256 repayAmount,\n    address mTokenCollateral,\n    uint256 seizeTokens\n  );\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\n  event NewAdmin(address oldAdmin, address newAdmin);\n  event NewComptroller(address oldComptroller, address newComptroller);\n  event NewMarketInterestRateModel(\n    address oldInterestRateModel,\n    address newInterestRateModel\n  );\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n  event NewProtocolSeizeShare(\n    uint256 oldProtocolSeizeShareMantissa,\n    uint256 newProtocolSeizeShareMantissa\n  );\n  event NewReserveFactor(\n    uint256 oldReserveFactorMantissa,\n    uint256 newReserveFactorMantissa\n  );\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n  event RepayBorrow(\n    address payer,\n    address borrower,\n    uint256 repayAmount,\n    uint256 accountBorrows,\n    uint256 totalBorrows\n  );\n  event ReservesAdded(\n    address benefactor,\n    uint256 addAmount,\n    uint256 newTotalReserves\n  );\n  event ReservesReduced(\n    address admin,\n    uint256 reduceAmount,\n    uint256 newTotalReserves\n  );\n  event Transfer(address indexed from, address indexed to, uint256 amount);\n\n  function _acceptAdmin() external returns (uint256);\n\n  function _addReserves(uint256 addAmount) external returns (uint256);\n\n  function _becomeImplementation(bytes memory data) external;\n\n  function _reduceReserves(uint256 reduceAmount) external returns (uint256);\n\n  function _resignImplementation() external;\n\n  function _setComptroller(address newComptroller) external returns (uint256);\n\n  function _setInterestRateModel(address newInterestRateModel) external returns (uint256);\n\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\n\n  function _setProtocolSeizeShare(uint256 newProtocolSeizeShareMantissa) external returns (uint256);\n\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\n\n\n  /// @notice Block number that interest was last accrued at\n  function accrualBlockTimestamp() external view returns (uint256);\n\n  function protocolSeizeShareMantissa() external view returns (uint256);\n\n  function isMToken() external view returns (bool);\n\n  /// @notice Applies accrued interest to total borrows and reserves\n  /// @dev This calculates interest accrued from the last checkpointed block\n  ///      up to the current block and writes new checkpoint to storage.\n  function accrueInterest() external returns (uint256);\n\n  function admin() external view returns (address);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  function balanceOf(address owner) external view returns (uint256);\n\n  function balanceOfUnderlying(address owner) external returns (uint256);\n\n\n  /// @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n  /// @param account The address whose balance should be calculated after updating borrowIndex\n  /// @return The calculated balance\n  function borrowBalanceStored(address account) external view returns (uint256);\n\n  /// @notice Accumulator of the total earned interest rate since the opening of the market\n  function borrowIndex() external view returns (uint256);\n\n  function comptroller() external view returns (address);\n\n  function decimals() external view returns (uint8);\n\n  /// @notice Calculates the exchange rate from the underlying to the MToken\n  /// @dev This function does not accrue interest before calculating the exchange rate\n  /// @return Calculated exchange rate scaled by 1e18\n  function exchangeRateStored() external view returns (uint256);\n\n\n  function implementation() external view returns (address);\n\n  function initialize(\n    address underlying_,\n    address comptroller_,\n    address interestRateModel_,\n    uint256 initialExchangeRateMantissa_,\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_\n  ) external;\n\n  function initialize(\n    address comptroller_,\n    address interestRateModel_,\n    uint256 initialExchangeRateMantissa_,\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_\n  ) external;\n\n  function liquidateBorrow(address borrower, uint256 repayAmount, address mTokenCollateral) external returns (uint256);\n\n  function mintWithPermit(uint256 mintAmount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (uint256);\n\n  function name() external view returns (string memory);\n\n  function pendingAdmin() external view returns (address);\n\n  /// @notice Sender redeems mTokens in exchange for a specified amount of underlying asset\n  /// @dev Accrues interest whether or not the operation succeeds, unless reverted\n  /// @param redeemAmount The amount of underlying to redeem\n  /// @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n  /// @notice Sender repays a borrow belonging to borrower\n  /// @param borrower the account with the debt being payed off\n  /// @param repayAmount The amount to repay\n  /// @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n  function seize(address liquidator, address borrower, uint256 seizeTokens) external returns (uint256);\n\n  /// @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\n  /// @param token The address of the ERC-20 token to sweep\n  function sweepToken(address token) external;\n\n  function symbol() external view returns (string memory);\n\n  /// @notice Returns the current total borrows plus accrued interest\n  /// @return The total borrows with interest\n  function totalBorrowsCurrent() external returns (uint256);\n\n  /// @notice Total number of tokens in circulation\n  function totalSupply() external view returns (uint256);\n\n  function transfer(address dst, uint256 amount) external returns (bool);\n\n  function transferFrom(address src, address dst, uint256 amount) external returns (bool);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/integrations/tetu/ITetuLiquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ITetuLiquidator {\n\n  struct PoolData {\n    address pool;\n    address swapper;\n    address tokenIn;\n    address tokenOut;\n  }\n\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\n\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\n\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\n\n  function buildRoute(\n    address tokenIn,\n    address tokenOut\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\n\n  function liquidate(\n    address tokenIn,\n    address tokenOut,\n    uint amount,\n    uint priceImpactTolerance\n  ) external;\n\n  function liquidateWithRoute(\n    PoolData[] memory route,\n    uint amount,\n    uint priceImpactTolerance\n  ) external;\n\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IBookkeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IBookkeeper {\n  /// @notice Register a new loan\n  /// @dev This function can be called by a pool adapter only\n  /// @param collateralAmount Amount of supplied collateral for the new loan\n  /// @param borrowedAmount Borrowed amount provided for the given {collateralAmount}\n  function onBorrow(uint collateralAmount, uint borrowedAmount) external;\n\n  /// @notice Register loan payment\n  /// @dev This function can be called by a pool adapter only\n  /// @param withdrawnCollateral Amount of collateral received by the user during the repaying.\n  /// @param paidAmount Amount paid by the user during the repaying.\n  function onRepay(uint withdrawnCollateral, uint paidAmount) external;\n\n\n  /// @notice Save checkpoint for all pool adapters of the given {user_}\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\n  function checkpoint(address[] memory tokens_) external returns (\n    uint[] memory deltaGains,\n    uint[] memory deltaLosses\n  );\n\n  /// @notice Calculate deltas that user would receive if he creates a checkpoint at the moment\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\n  function previewCheckpoint(address user, address[] memory tokens_) external view returns (\n    uint[] memory deltaGains,\n    uint[] memory deltaLosses\n  );\n\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the signer\n  ///         for the current period, start new period.\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\n  function startPeriod(address underlying_) external returns (\n    uint gains,\n    uint losses\n  );\n\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the {user_}\n  ///         for the current period, DON'T start new period.\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\n  function previewPeriod(address underlying_, address user_) external view returns (uint gains, uint losses);\n}"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IBorrowManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../libs/AppDataTypes.sol\";\n\n/// @notice Manage list of available lending platforms\n///         Manager of pool-adapters.\n///         Pool adapter is an instance of a converter provided by the lending platform\n///         linked to one of platform's pools, address of user contract, collateral and borrow tokens.\n///         The pool adapter is real borrower of funds for AAVE, Compound and other lending protocols.\n///         Pool adapters are created using minimal-proxy pattern, see\n///         https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\ninterface IBorrowManager {\n\n  /// @notice Register a pool adapter for (pool, user, collateral) if the adapter wasn't created before\n  /// @param user_ Address of the caller contract who requires access to the pool adapter\n  /// @return Address of registered pool adapter\n  function registerPoolAdapter(address converter_, address user_, address collateral_, address borrowToken_) external returns (address);\n\n  /// @notice Get pool adapter or 0 if the pool adapter is not registered\n  function getPoolAdapter(address converter_, address user_, address collateral_, address borrowToken_) external view returns (address);\n\n  /// @dev Returns true for NORMAL pool adapters and for active DIRTY pool adapters (=== borrow position is opened).\n  function isPoolAdapter(address poolAdapter_) external view returns (bool);\n\n  /// @notice Notify borrow manager that the pool adapter with the given params is \"dirty\".\n  ///         The pool adapter should be excluded from the list of ready-to-borrow pool adapters.\n  /// @dev \"Dirty\" means that a liquidation happens inside. The borrow position should be closed during health checking.\n  function markPoolAdapterAsDirty(address converter_, address user_, address collateral_, address borrowToken_) external;\n\n  /// @notice Register new lending platform with available pairs of assets\n  ///         OR add new pairs of assets to the exist lending platform\n  /// @param platformAdapter_ Implementation of IPlatformAdapter attached to the specified pool\n  /// @param leftAssets_  Supported pairs of assets. The pairs are set using two arrays: left and right\n  /// @param rightAssets_  Supported pairs of assets. The pairs are set using two arrays: left and right\n  function addAssetPairs(address platformAdapter_, address[] calldata leftAssets_, address[] calldata rightAssets_) external;\n\n  /// @notice Remove available pairs of asset from the platform adapter.\n  ///         The platform adapter will be unregistered after removing last supported pair of assets\n  function removeAssetPairs(address platformAdapter_, address[] calldata leftAssets_, address[] calldata rightAssets_) external;\n\n  /// @notice Set target health factors for the assets.\n  ///         If target health factor is not assigned to the asset, target-health-factor from controller is used.\n  ///         See explanation of health factor value in IConverterController\n  /// @param healthFactors2_ Health factor must be greater or equal then 1, decimals 2\n  function setTargetHealthFactors(address[] calldata assets_, uint16[] calldata healthFactors2_) external;\n\n  /// @notice Return target health factor with decimals 2 for the asset\n  ///         If there is no custom value for asset, target health factor from the controller should be used\n  function getTargetHealthFactor2(address asset) external view returns (uint16);\n\n  /// @notice Reward APR is taken into account with given factor\n  ///         Result APR = borrow-apr - supply-apr - [REWARD-FACTOR]/Denominator * rewards-APR\n  function setRewardsFactor(uint rewardsFactor_) external;\n\n  /// @notice Find lending pool capable of providing {targetAmount} and having best normalized borrow rate\n  ///         Results are ordered in ascending order of APR, so the best available converter is first one.\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\n  ///                  See EntryKinds.sol\\ENTRY_KIND_XXX constants for possible entry kinds\n  /// @param user_ The user who is going to make a borrow\n  ///              Pass 0 to disable rebalance-on-borrowing\n  /// @param amountIn_ The meaning depends on entryData kind, see EntryKinds library for details.\n  ///         For entry kind = 0: Amount of {sourceToken} to be converted to {targetToken}\n  ///         For entry kind = 1: Available amount of {sourceToken}\n  ///         For entry kind = 2: Amount of {targetToken} that should be received after conversion\n  /// @return converters Result template-pool-adapters\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\n  /// @return amountsToBorrowOut Amounts that should be borrowed\n  /// @return aprs18 Annual Percentage Rates == (total cost - total income) / amount of collateral, decimals 18\n  function findConverter(\n    bytes memory entryData_,\n    address user_,\n    address sourceToken_,\n    address targetToken_,\n    uint amountIn_,\n    uint periodInBlocks_\n  ) external view returns (\n    address[] memory converters,\n    uint[] memory collateralAmountsOut,\n    uint[] memory amountsToBorrowOut,\n    int[] memory aprs18\n  );\n\n  /// @notice Get platformAdapter to which the converter belongs\n  function getPlatformAdapter(address converter_) external view returns (address);\n\n  /// @notice Count of available platform adapters\n  function platformAdaptersLength() external view returns (uint);\n\n  /// @notice Get platform adapter at the given index\n  /// @param index [0.. platformAdaptersLength)\n  function platformAdaptersAt(uint index) external view returns (address);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IControllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IControllable {\n\n  function isController(address _contract) external view returns (bool);\n\n  function isGovernance(address _contract) external view returns (bool);\n\n  function created() external view returns (uint256);\n\n  function createdBlock() external view returns (uint256);\n\n  function controller() external view returns (address);\n\n  function increaseRevision(address oldLogic) external;\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @notice tetu-contracts-v2\\IController\ninterface IController {\n\n  // --- DEPENDENCY ADDRESSES\n  function governance() external view returns (address);\n\n  function voter() external view returns (address);\n\n  function liquidator() external view returns (address);\n\n  function forwarder() external view returns (address);\n\n  function investFund() external view returns (address);\n\n  function veDistributor() external view returns (address);\n\n  function platformVoter() external view returns (address);\n\n  // --- VAULTS\n\n  function vaults(uint id) external view returns (address);\n\n  function vaultsList() external view returns (address[] memory);\n\n  function vaultsListLength() external view returns (uint);\n\n  function isValidVault(address _vault) external view returns (bool);\n\n  // --- restrictions\n\n  function isOperator(address _adr) external view returns (bool);\n\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../libs/AppDataTypes.sol\";\n\ninterface IConverter {\n  function getConversionKind() external pure returns (\n    AppDataTypes.ConversionKind\n  );\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IConverterControllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IConverterControllerProvider.sol\";\n\ninterface IConverterControllable is IConverterControllerProvider {\n\n  function isController(address _contract) external view returns (bool);\n\n  function isProxyUpdater(address _contract) external view returns (bool);\n\n  function isGovernance(address _contract) external view returns (bool);\n\n  function created() external view returns (uint256);\n\n  function createdBlock() external view returns (uint256);\n\n  function increaseRevision(address oldLogic) external;\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @notice Keep and provide addresses of all application contracts\ninterface IConverterController {\n  function governance() external view returns (address);\n\n  // ********************* Health factor explanation  ****************\n  // For example, a landing platform has: liquidity threshold = 0.85, LTV=0.8, LTV / LT = 1.0625\n  // For collateral $100 we can borrow $80. A liquidation happens if the cost of collateral will reduce below $85.\n  // We set min-health-factor = 1.1, target-health-factor = 1.3\n  // For collateral 100 we will borrow 100/1.3 = 76.92\n  //\n  // Collateral value   100        77            assume that collateral value is decreased at 100/77=1.3 times\n  // Collateral * LT    85         65.45\n  // Borrow value       65.38      65.38         but borrow value is the same as before\n  // Health factor      1.3        1.001         liquidation almost happens here (!)\n  //\n  /// So, if we have target factor 1.3, it means, that if collateral amount will decreases at 1.3 times\n  // and the borrow value won't change at the same time, the liquidation happens at that point.\n  // Min health factor marks the point at which a rebalancing must be made asap.\n  // *****************************************************************\n\n  //#region ----------------------------------------------------- Configuration\n\n  /// @notice min allowed health factor with decimals 2, must be >= 1e2\n  function minHealthFactor2() external view returns (uint16);\n  function setMinHealthFactor2(uint16 value_) external;\n\n  /// @notice target health factor with decimals 2\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\n  ///      or additional borrow and restore the health factor to the given target value\n  function targetHealthFactor2() external view returns (uint16);\n  function setTargetHealthFactor2(uint16 value_) external;\n\n  /// @notice max allowed health factor with decimals 2\n  /// @dev For future versions, currently max health factor is not used\n  function maxHealthFactor2() external view returns (uint16);\n  /// @dev For future versions, currently max health factor is not used\n  function setMaxHealthFactor2(uint16 value_) external;\n\n  /// @notice get current value of blocks per day. The value is set manually at first and can be auto-updated later\n  function blocksPerDay() external view returns (uint);\n  /// @notice set value of blocks per day manually and enable/disable auto update of this value\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external;\n  /// @notice Check if it's time to call updateBlocksPerDay()\n  /// @param periodInSeconds_ Period of auto-update in seconds\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view returns (bool);\n  /// @notice Recalculate blocksPerDay value\n  /// @param periodInSeconds_ Period of auto-update in seconds\n  function updateBlocksPerDay(uint periodInSeconds_) external;\n\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\n  function paused() external view returns (bool);\n\n  /// @notice the given user is whitelisted and is allowed to make borrow/swap using TetuConverter\n  function isWhitelisted(address user_) external view returns (bool);\n\n  /// @notice The size of the gap by which the debt should be increased upon repayment\n  ///         Such gaps are required by AAVE pool adapters to workaround dust tokens problem\n  ///         and be able to make full repayment.\n  /// @dev Debt gap is applied as following: toPay = debt * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR\n  function debtGap() external view returns (uint);\n\n  /// @notice Allow to rebalance exist debts during burrow, see SCB-708\n  ///         If the user already has a debt(s) for the given pair of collateral-borrow assets,\n  ///         new borrow is made using exist pool adapter(s). Exist debt is rebalanced during the borrowing\n  ///         in both directions, but the rebalancing is asymmetrically limited by thresholds\n  ///         THRESHOLD_REBALANCE_XXX, see BorrowManager.\n  function rebalanceOnBorrowEnabled() external view returns (bool);\n\n  //#endregion ----------------------------------------------------- Configuration\n  //#region ----------------------------------------------------- Core application contracts\n\n  function tetuConverter() external view returns (address);\n  function borrowManager() external view returns (address);\n  function debtMonitor() external view returns (address);\n  function tetuLiquidator() external view returns (address);\n  function swapManager() external view returns (address);\n  function priceOracle() external view returns (address);\n  function bookkeeper() external view returns (address);\n  //#endregion ----------------------------------------------------- Core application contracts\n\n  //#region ----------------------------------------------------- External contracts\n  /// @notice A keeper to control health and efficiency of the borrows\n  function keeper() external view returns (address);\n  /// @notice Controller of tetu-contracts-v2, that is allowed to update proxy contracts\n  function proxyUpdater() external view returns (address);\n  //#endregion ----------------------------------------------------- External contracts\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IConverterControllerProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IConverterControllerProvider {\n  function controller() external view returns (address);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IDebtMonitor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @notice Collects list of registered borrow-positions. Allow to check state of the collaterals.\ninterface IDebtMonitor {\n\n  /// @notice Enumerate {maxCountToCheck} pool adapters starting from {index0} and return unhealthy pool-adapters\n  ///         i.e. adapters with health factor below min allowed value\n  ///         It calculates two amounts: amount of borrow asset and amount of collateral asset\n  ///         To fix the health factor it's necessary to send EITHER one amount OR another one.\n  ///         There is special case: a liquidation happens inside the pool adapter.\n  ///         It means, that this is \"dirty\" pool adapter and this position must be closed and never used again.\n  ///         In this case, both amounts are zero (we need to make FULL repay)\n  /// @return nextIndexToCheck0 Index of next pool-adapter to check; 0: all pool-adapters were checked\n  /// @return outPoolAdapters List of pool adapters that should be reconverted\n  /// @return outAmountBorrowAsset What borrow-asset amount should be send to pool adapter to fix health factor\n  /// @return outAmountCollateralAsset What collateral-asset amount should be send to pool adapter to fix health factor\n  function checkHealth(\n    uint startIndex0,\n    uint maxCountToCheck,\n    uint maxCountToReturn\n  ) external view returns (\n    uint nextIndexToCheck0,\n    address[] memory outPoolAdapters,\n    uint[] memory outAmountBorrowAsset,\n    uint[] memory outAmountCollateralAsset\n  );\n\n  /// @notice Register new borrow position if it's not yet registered\n  /// @dev This function is called from a pool adapter after any borrow\n  function onOpenPosition() external;\n\n  /// @notice Unregister the borrow position if it's completely repaid\n  /// @dev This function is called from a pool adapter when the borrow is completely repaid\n  function onClosePosition() external;\n\n  /// @notice Check if the pool-adapter-caller has an opened position\n  function isPositionOpened() external view returns (bool);\n\n  /// @notice Check if the pool-adapter-caller has an opened position\n  function isPositionOpenedEx(address poolAdapter) external view returns (bool);\n\n  /// @notice Pool adapter has opened borrow, but full liquidation happens and we've lost all collateral\n  ///         Close position without paying the debt and never use the pool adapter again.\n  function closeLiquidatedPosition(address poolAdapter_) external;\n\n  /// @notice Get total count of pool adapters with opened positions\n  function getCountPositions() external view returns (uint);\n\n  /// @notice Get active borrows of the user with given collateral/borrowToken\n  /// @return poolAdaptersOut The instances of IPoolAdapter\n  function getPositions (address user, address collateralToken_, address borrowedToken_) external view returns (\n    address[] memory poolAdaptersOut\n  );\n\n  /// @notice Get active borrows of the given user\n  /// @return poolAdaptersOut The instances of IPoolAdapter\n  function getPositionsForUser(address user_) external view returns(\n    address[] memory poolAdaptersOut\n  );\n\n  /// @notice Return true if there is a least once active pool adapter created on the base of the {converter_}\n  function isConverterInUse(address converter_) external view returns (bool);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IHealthKeeperCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IHealthKeeperCallback {\n  function nextIndexToCheck0() external view returns (uint);\n\n  function fixHealth(\n    uint nextIndexToCheck0_,\n    address[] calldata outPoolAdapters_,\n    uint[] calldata outAmountBorrowAsset_,\n    uint[] calldata outAmountCollateralAsset_\n  ) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IKeeperCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Keeper sends notifications to TetuConverter using following interface\ninterface IKeeperCallback {\n\n  /// @notice This function is called by a keeper if there is unhealthy borrow\n  ///         The called contract should send either collateral-amount or borrowed-amount to TetuConverter\n  /// @param requiredAmountBorrowAsset_ The borrower should return given borrowed amount back to TetuConverter\n  ///                                   in order to restore health factor to target value\n  /// @param requiredAmountCollateralAsset_ The borrower should send given amount of collateral to TetuConverter\n  ///                                       in order to restore health factor to target value\n  /// @param lendingPoolAdapter_ Address of the pool adapter that has problem health factor\n  function requireRepay(\n    uint requiredAmountBorrowAsset_,\n    uint requiredAmountCollateralAsset_,\n    address lendingPoolAdapter_\n  ) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IPlatformAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../libs/AppDataTypes.sol\";\n\n/// @notice Adapter for lending platform attached to the given platform's pool.\ninterface IPlatformAdapter {\n  /// @notice Current version of contract\n  ///         There is a chance that we will register several versions of the same platform\n  ///         at the same time (only last version will be active, others will be frozen)\n  function PLATFORM_ADAPTER_VERSION() external view returns (string memory);\n\n  /// @notice Get pool data required to select best lending pool\n  /// @param healthFactor2_ Health factor (decimals 2) to be able to calculate max borrow amount\n  ///                       See IConverterController for explanation of health factors.\n  function getConversionPlan(\n    AppDataTypes.InputConversionParams memory params_,\n    uint16 healthFactor2_\n  ) external view returns (\n    AppDataTypes.ConversionPlan memory plan\n  );\n\n  /// @notice Full list of supported converters\n  function converters() external view returns (address[] memory);\n\n  function platformKind() external pure returns (AppDataTypes.LendingPlatformKinds);\n\n  /// @notice Initialize {poolAdapter_} created from {converter_} using minimal proxy pattern\n  function initializePoolAdapter(\n    address converter_,\n    address poolAdapter_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_\n  ) external;\n\n  /// @notice True if the platform is frozen and new borrowing is not possible (at this moment)\n  function frozen() external view returns (bool);\n\n  /// @notice Set platform to frozen/unfrozen state. In frozen state any new borrowing is forbidden.\n  function setFrozen(bool frozen_) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IPoolAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IConverter.sol\";\n\n/// @notice Allow to borrow given asset from the given pool using given asset as collateral.\n///         There is Template-Pool-Adapter contract for each platform (AAVE, HF, etc).\n/// @dev Terms: \"pool adapter\" is an instance of \"converter\" created using minimal-proxy-pattern\ninterface IPoolAdapter is IConverter {\n  /// @notice Update all interests, recalculate borrowed amount;\n  ///         After this call, getStatus will return exact amount-to-repay\n  function updateStatus() external;\n\n  /// @notice Supply collateral to the pool and borrow specified amount\n  /// @dev No re-balancing here; Collateral amount must be approved to the pool adapter before the call of this function\n  /// @param collateralAmount_ Amount of collateral, must be approved to the pool adapter before the call of borrow()\n  /// @param borrowAmount_ Amount that should be borrowed in result\n  /// @param receiver_ Receiver of the borrowed amount\n  /// @return borrowedAmountOut Result borrowed amount sent to the {receiver_}\n  function borrow(uint collateralAmount_, uint borrowAmount_, address receiver_) external returns (\n    uint borrowedAmountOut\n  );\n\n  /// @notice Borrow additional amount {borrowAmount_} using exist collateral and send it to {receiver_}\n  /// @dev Re-balance: too big health factor => target health factor\n  /// @return resultHealthFactor18 Result health factor after borrow\n  /// @return borrowedAmountOut Exact amount sent to the borrower\n  function borrowToRebalance(uint borrowAmount_, address receiver_) external returns (\n    uint resultHealthFactor18,\n    uint borrowedAmountOut\n  );\n\n  /// @notice Repay borrowed amount, return collateral to the user\n  /// @param amountToRepay_ Exact amount of borrow asset that should be repaid\n  ///                       The amount should be approved for the pool adapter before the call of repay()\n  /// @param closePosition_ true to pay full borrowed amount\n  /// @param receiver_ Receiver of withdrawn collateral\n  /// @return collateralAmountOut Amount of collateral asset sent to the {receiver_}\n  function repay(uint amountToRepay_, address receiver_, bool closePosition_) external returns (\n    uint collateralAmountOut\n  );\n\n  /// @notice Repay with rebalancing. Send amount of collateral/borrow asset to the pool adapter\n  ///         to recover the health factor to target state.\n  /// @dev It's not allowed to close position here (pay full debt) because no collateral will be returned.\n  /// @param amount_ Exact amount of asset that is transferred to the balance of the pool adapter.\n  ///                It can be amount of collateral asset or borrow asset depended on {isCollateral_}\n  ///                It must be stronger less then total borrow debt.\n  ///                The amount should be approved for the pool adapter before the call.\n  /// @param isCollateral_ true/false indicates that {amount_} is the amount of collateral/borrow asset\n  /// @return resultHealthFactor18 Result health factor after repay, decimals 18\n  function repayToRebalance(uint amount_, bool isCollateral_) external returns (\n    uint resultHealthFactor18\n  );\n\n  /// @return originConverter Address of original PoolAdapter contract that was cloned to make the instance of the pool adapter\n  /// @return user User of the pool adapter\n  /// @return collateralAsset Asset used as collateral by the pool adapter\n  /// @return borrowAsset Asset borrowed by the pool adapter\n  function getConfig() external view returns (\n    address originConverter,\n    address user,\n    address collateralAsset,\n    address borrowAsset\n  );\n\n  /// @notice Get current status of the borrow position\n  /// @dev It returns STORED status. To get current status it's necessary to call updateStatus\n  ///      at first to update interest and recalculate status.\n  /// @return collateralAmount Total amount of provided collateral, collateral currency\n  /// @return amountToPay Total amount of borrowed debt in [borrow asset]. 0 - for closed borrow positions.\n  /// @return healthFactor18 Current health factor, decimals 18\n  /// @return opened The position is opened (there is not empty collateral/borrow balance)\n  /// @return collateralAmountLiquidated How much collateral was liquidated, amount of lost collateral\n  /// @return debtGapRequired When paying off a debt, the amount of the payment must be greater\n  ///         than the amount of the debt by a small amount (debt gap, see IConverterController.debtGap)\n  ///         getStatus returns it (same as getConfig) to exclude additional call of getConfig by the caller\n  function getStatus() external view returns (\n    uint collateralAmount,\n    uint amountToPay,\n    uint healthFactor18,\n    bool opened,\n    uint collateralAmountLiquidated,\n    bool debtGapRequired\n  );\n\n  /// @notice Check if any reward tokens exist on the balance of the pool adapter, transfer reward tokens to {receiver_}\n  /// @return rewardToken Address of the transferred reward token\n  /// @return amount Amount of the transferred reward token\n  function claimRewards(address receiver_) external returns (address rewardToken, uint amount);\n\n  /// @notice If we paid {amountToRepay_}, how much collateral would we receive?\n  function getCollateralAmountToReturn(uint amountToRepay_, bool closePosition_) external view returns (uint);\n\n//  /// @notice Compute current APR value, decimals 18\n//  /// @return Interest * 1e18, i.e. 2.25e18 means APR=2.25%\n//  function getAPR18() external view returns (int);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IPoolAdapterInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @notice Initializer suitable for most pool-adapters\ninterface IPoolAdapterInitializer {\n  function initialize(\n    address controller,\n    address pool_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    address originConveter_\n  ) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IPoolAdapterInitializerWithAP.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @notice Initializer for pool-adapters with AddressProvider\ninterface IPoolAdapterInitializerWithAP {\n\n  /// @param cTokenAddressProvider_ This is ICTokenAddressProvider\n  function initialize(\n    address controller_,\n    address cTokenAddressProvider_,\n    address pool_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    address originConverter_\n  ) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IPriceOracle {\n  /// @notice Return asset price in USD, decimals 18\n  function getAssetPrice(address asset) external view returns (uint256);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IProxyControlled.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IProxyControlled {\n\n  function initProxy(address _logic) external;\n\n  function upgrade(address _newImplementation) external;\n\n  function implementation() external view returns (address);\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/IRequireAmountBySwapManagerCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice TetuConverter supports this interface\n///         It's called by SwapManager inside static-call swap simulation\n///         to transfer amount approved to TetuConverter by user to SwapManager\n///         before calling swap simulation\ninterface IRequireAmountBySwapManagerCallback {\n  /// @notice Transfer {sourceAmount_} approved by {approver_} to swap manager\n  function onRequireAmountBySwapManager(address approver_, address sourceToken_, uint sourceAmount_) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/ISimulateProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Provider of simulate() function\ninterface ISimulateProvider {\n  function simulate(\n    address targetContract,\n    bytes calldata calldataPayload\n  ) external returns (bytes memory response);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/ISwapConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../libs/AppDataTypes.sol\";\nimport \"./IConverter.sol\";\n\ninterface ISwapConverter is IConverter {\n  function getConversionKind()\n  override external pure returns (AppDataTypes.ConversionKind);\n\n  /// @notice Swap {sourceAmount_} of {sourceToken_} to {targetToken_} and send result amount to {receiver_}\n  /// @return outputAmount The amount that has been sent to the receiver\n  function swap(\n    address sourceToken_,\n    uint sourceAmount_,\n    address targetToken_,\n    address receiver_\n  ) external returns (uint outputAmount);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/ISwapManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../libs/AppDataTypes.sol\";\n\ninterface ISwapManager {\n\n  /// @notice Find a way to convert collateral asset to borrow asset in most efficient way\n  /// @dev This is a writable function with read-only behavior\n  ///      because to simulate real swap the function should be writable.\n  /// @param sourceAmountApprover_ A contract which has approved {sourceAmount_} to TetuConverter\n  /// @param sourceAmount_ Amount in terms of {sourceToken_} to be converter to {targetToken_}\n  /// @return converter Address of ISwapConverter\n  ///         If SwapManager cannot find a conversion way,\n  ///         it returns converter == 0 (in the same way as ITetuConverter)\n  function getConverter(\n    address sourceAmountApprover_,\n    address sourceToken_,\n    uint sourceAmount_,\n    address targetToken_\n  ) external returns (\n    address converter,\n    uint maxTargetAmount\n  );\n\n  /// @notice Calculate APR using known {sourceToken_} and known {targetAmount_}.\n  /// @param sourceAmount_ Source amount before conversion, in terms of {sourceToken_}\n  /// @param targetAmount_ Result of conversion. The amount is in terms of {targetToken_}\n  function getApr18(\n    address sourceToken_,\n    uint sourceAmount_,\n    address targetToken_,\n    uint targetAmount_\n  ) external view returns (int apr18);\n\n  /// @notice Return custom or default price impact tolerance for the asset\n  function getPriceImpactTolerance(address asset_) external view returns (uint priceImpactTolerance);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/ISwapSimulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ISwapSimulator {\n\n  /// @notice Make real swap to know result amount\n  ///         but exclude any additional operations\n  ///         like \"sending result amount to receiver\" or \"emitting any events\".\n  /// @dev This function should be called only inside static call to know result amount.\n  /// @param user_ A strategy which has approved source amount to TetuConverter\n  ///              and called a function findSwapStrategy\n  /// @param sourceAmount_ Amount in terms of {sourceToken_} to be converter to {targetToken_}\n  /// @return amountOut Result amount in terms of {targetToken_} after conversion\n  function simulateSwap(\n    address user_,\n    address sourceToken_,\n    uint sourceAmount_,\n    address targetToken_\n  ) external returns (\n    uint amountOut\n  );\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IConverterControllerProvider.sol\";\n\n/// @notice Main contract of the TetuConverter application\n/// @dev Borrower (strategy) makes all operations via this contract only.\ninterface ITetuConverter is IConverterControllerProvider {\n\n  /// @notice Find possible borrow strategies and provide \"cost of money\" as interest for the period for each strategy\n  ///         Result arrays of the strategy are ordered in ascending order of APR.\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\n  ///                   See EntryKinds.sol\\ENTRY_KIND_XXX constants for possible entry kinds\n  ///                   0 is used by default\n  /// @param amountIn_  The meaning depends on entryData\n  ///                   For entryKind=0 it's max available amount of collateral\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\n  /// @return converters Array of available converters ordered in ascending order of APR.\n  ///                    Each item contains a result contract that should be used for conversion; it supports IConverter\n  ///                    This address should be passed to borrow-function during conversion.\n  ///                    The length of array is always equal to the count of available lending platforms.\n  ///                    Last items in array can contain zero addresses (it means they are not used)\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\n  /// @return amountToBorrowsOut Amounts that should be borrowed\n  ///                            This amount is not zero if corresponded converter is not zero.\n  /// @return aprs18 Interests on the use of {amountIn_} during the given period, decimals 18\n  function findBorrowStrategies(\n    bytes memory entryData_,\n    address sourceToken_,\n    uint amountIn_,\n    address targetToken_,\n    uint periodInBlocks_\n  ) external view returns (\n    address[] memory converters,\n    uint[] memory collateralAmountsOut,\n    uint[] memory amountToBorrowsOut,\n    int[] memory aprs18\n  );\n\n  /// @notice Find best swap strategy and provide \"cost of money\" as interest for the period\n  /// @dev This is writable function with read-only behavior.\n  ///      It should be writable to be able to simulate real swap and get a real APR.\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\n  ///                   See EntryKinds.sol\\ENTRY_KIND_XXX constants for possible entry kinds\n  ///                   0 is used by default\n  /// @param amountIn_  The meaning depends on entryData\n  ///                   For entryKind=0 it's max available amount of collateral\n  ///                   This amount must be approved to TetuConverter before the call.\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\n  /// @return converter Result contract that should be used for conversion to be passed to borrow()\n  /// @return sourceAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\n  ///                         It can be different from the {sourceAmount_} for some entry kinds.\n  /// @return targetAmountOut Result amount of {targetToken_} after swap\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\n  function findSwapStrategy(\n    bytes memory entryData_,\n    address sourceToken_,\n    uint amountIn_,\n    address targetToken_\n  ) external returns (\n    address converter,\n    uint sourceAmountOut,\n    uint targetAmountOut,\n    int apr18\n  );\n\n  /// @notice Find best conversion strategy (swap or borrow) and provide \"cost of money\" as interest for the period.\n  ///         It calls both findBorrowStrategy and findSwapStrategy and selects a best strategy.\n  /// @dev This is writable function with read-only behavior.\n  ///      It should be writable to be able to simulate real swap and get a real APR for swapping.\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\n  ///                   See EntryKinds.sol\\ENTRY_KIND_XXX constants for possible entry kinds\n  ///                   0 is used by default\n  /// @param amountIn_  The meaning depends on entryData\n  ///                   For entryKind=0 it's max available amount of collateral\n  ///                   This amount must be approved to TetuConverter before the call.\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\n  /// @return converter Result contract that should be used for conversion to be passed to borrow().\n  /// @return collateralAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\n  ///                             It can be different from the {sourceAmount_} for some entry kinds.\n  /// @return amountToBorrowOut Result amount of {targetToken_} after conversion\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\n  function findConversionStrategy(\n    bytes memory entryData_,\n    address sourceToken_,\n    uint amountIn_,\n    address targetToken_,\n    uint periodInBlocks_\n  ) external returns (\n    address converter,\n    uint collateralAmountOut,\n    uint amountToBorrowOut,\n    int apr18\n  );\n\n  /// @notice Convert {collateralAmount_} to {amountToBorrow_} using {converter_}\n  ///         Target amount will be transferred to {receiver_}.\n  ///         Exist debts can be rebalanced fully or partially if {rebalanceOnBorrowEnabled} is ON\n  /// @dev Transferring of {collateralAmount_} by TetuConverter-contract must be approved by the caller before the call\n  ///      Only whitelisted users are allowed to make borrows\n  /// @param converter_ A converter received from findBestConversionStrategy.\n  /// @param collateralAmount_ Amount of {collateralAsset_} to be converted.\n  ///                          This amount must be approved to TetuConverter before the call.\n  /// @param amountToBorrow_ Amount of {borrowAsset_} to be borrowed and sent to {receiver_}\n  /// @param receiver_ A receiver of borrowed amount\n  /// @return borrowedAmountOut Exact borrowed amount transferred to {receiver_}\n  function borrow(\n    address converter_,\n    address collateralAsset_,\n    uint collateralAmount_,\n    address borrowAsset_,\n    uint amountToBorrow_,\n    address receiver_\n  ) external returns (\n    uint borrowedAmountOut\n  );\n\n  /// @notice Full or partial repay of the borrow\n  /// @dev A user should transfer {amountToRepay_} to TetuConverter before calling repay()\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\n  ///        A user should transfer {amountToRepay_} to TetuConverter before calling repay().\n  ///        You can know exact total amount of debt using {getStatusCurrent}.\n  ///        if the amount exceed total amount of the debt:\n  ///           - the debt will be fully repaid\n  ///           - remain amount will be swapped from {borrowAsset_} to {collateralAsset_}\n  ///        This amount should be calculated with taking into account possible debt gap,\n  ///        You should call getDebtAmountCurrent(debtGap = true) to get this amount.\n  /// @param receiver_ A receiver of the collateral that will be withdrawn after the repay\n  ///                  The remained amount of borrow asset will be returned to the {receiver_} too\n  /// @return collateralAmountOut Exact collateral amount transferred to {collateralReceiver_}\n  ///         If TetuConverter is not able to make the swap, it reverts\n  /// @return returnedBorrowAmountOut A part of amount-to-repay that wasn't converted to collateral asset\n  ///                                 because of any reasons (i.e. there is no available conversion strategy)\n  ///                                 This amount is returned back to the collateralReceiver_\n  /// @return swappedLeftoverCollateralOut A part of collateral received through the swapping\n  /// @return swappedLeftoverBorrowOut A part of amountToRepay_ that was swapped\n  function repay(\n    address collateralAsset_,\n    address borrowAsset_,\n    uint amountToRepay_,\n    address receiver_\n  ) external returns (\n    uint collateralAmountOut,\n    uint returnedBorrowAmountOut,\n    uint swappedLeftoverCollateralOut,\n    uint swappedLeftoverBorrowOut\n  );\n\n  /// @notice Estimate result amount after making full or partial repay\n  /// @dev It works in exactly same way as repay() but don't make actual repay\n  ///      Anyway, the function is write, not read-only, because it makes updateStatus()\n  /// @param user_ user whose amount-to-repay will be calculated\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\n  ///        This amount should be calculated without possible debt gap.\n  ///        In this way it's differ from {repay}\n  /// @return collateralAmountOut Total collateral amount to be returned after repay in exchange of {amountToRepay_}\n  /// @return swappedAmountOut A part of {collateralAmountOut} that were received by direct swap\n  function quoteRepay(\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    uint amountToRepay_\n  ) external returns (\n    uint collateralAmountOut,\n    uint swappedAmountOut\n  );\n\n  /// @notice Update status in all opened positions\n  ///         After this call getDebtAmount will be able to return exact amount to repay\n  /// @param user_ user whose debts will be returned\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\n  function getDebtAmountCurrent(\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    bool useDebtGap_\n  ) external returns (\n    uint totalDebtAmountOut,\n    uint totalCollateralAmountOut\n  );\n\n  /// @notice Total amount of borrow tokens that should be repaid to close the borrow completely.\n  /// @param user_ user whose debts will be returned\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\n  function getDebtAmountStored(\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    bool useDebtGap_\n  ) external view returns (\n    uint totalDebtAmountOut,\n    uint totalCollateralAmountOut\n  );\n\n  /// @notice User needs to redeem some collateral amount. Calculate an amount of borrow token that should be repaid\n  /// @param user_ user whose debts will be returned\n  /// @param collateralAmountRequired_ Amount of collateral required by the user\n  /// @return borrowAssetAmount Borrowed amount that should be repaid to receive back following amount of collateral:\n  ///                           amountToReceive = collateralAmountRequired_ - unobtainableCollateralAssetAmount\n  /// @return unobtainableCollateralAssetAmount A part of collateral that cannot be obtained in any case\n  ///                                           even if all borrowed amount will be returned.\n  ///                                           If this amount is not 0, you ask to get too much collateral.\n  function estimateRepay(\n    address user_,\n    address collateralAsset_,\n    uint collateralAmountRequired_,\n    address borrowAsset_\n  ) external view returns (\n    uint borrowAssetAmount,\n    uint unobtainableCollateralAssetAmount\n  );\n\n  /// @notice Transfer all reward tokens to {receiver_}\n  /// @return rewardTokensOut What tokens were transferred. Same reward token can appear in the array several times\n  /// @return amountsOut Amounts of transferred rewards, the array is synced with {rewardTokens}\n  function claimRewards(address receiver_) external returns (\n    address[] memory rewardTokensOut,\n    uint[] memory amountsOut\n  );\n\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\n  ///                      It should be transferred on balance of the TetuConverter before the function call\n  /// @param receiver_ Result amount will be sent to this address\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\n  function safeLiquidate(\n    address assetIn_,\n    uint amountIn_,\n    address assetOut_,\n    address receiver_,\n    uint priceImpactToleranceSource_,\n    uint priceImpactToleranceTarget_\n  ) external returns (\n    uint amountOut\n  );\n\n  /// @notice Check if {amountOut_} is too different from the value calculated directly using price oracle prices\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\n  function isConversionValid(\n    address assetIn_,\n    uint amountIn_,\n    address assetOut_,\n    uint amountOut_,\n    uint priceImpactTolerance_\n  ) external view returns (bool);\n\n  /// @notice Close given borrow and return collateral back to the user, governance only\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\n  /// @param poolAdapter_ The pool adapter that represents the borrow\n  /// @param closePosition Close position after repay\n  ///        Usually it should be true, because the function always tries to repay all debt\n  ///        false can be used if user doesn't have enough amount to pay full debt\n  ///              and we are trying to pay \"as much as possible\"\n  /// @return collateralAmountOut Amount of collateral returned to the user\n  /// @return repaidAmountOut Amount of borrow asset paid to the lending platform\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external returns (\n    uint collateralAmountOut,\n    uint repaidAmountOut\n  );\n\n  /// @notice Get active borrows of the user with given collateral/borrowToken\n  /// @dev Simple access to IDebtMonitor.getPositions\n  /// @return poolAdaptersOut The instances of IPoolAdapter\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\n    address[] memory poolAdaptersOut\n  );\n\n  /// @notice Save token from TC-balance to {receiver}\n  /// @dev Normally TetuConverter doesn't have any tokens on balance, they can appear there accidentally only\n  function salvage(address receiver, address token, uint amount) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/ITetuConverterCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice TetuConverter sends callback notifications to its user via this interface\ninterface ITetuConverterCallback {\n  /// @notice Converters calls this function if user should return some amount back.\n  ///         f.e. when the health factor is unhealthy and the converter needs more tokens to fix it.\n  ///         or when the full repay is required and converter needs to get full amount-to-repay.\n  /// @param asset_ Required asset (either collateral or borrow)\n  /// @param amount_ Required amount of the {asset_}\n  /// @return amountOut Exact amount that borrower has sent to balance of TetuConverter\n  function requirePayAmountBack(address asset_, uint amount_) external returns (uint amountOut);\n\n  /// @notice TetuConverter calls this function when it sends any amount to user's balance\n  /// @param assets_ Any asset sent to the balance, i.e. inside repayTheBorrow\n  /// @param amounts_ Amount of {asset_} that has been sent to the user's balance\n  function onTransferAmounts(address[] memory assets_, uint[] memory amounts_) external;\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/interfaces/ITokenAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @dev Compound comptroller doesn't allow to get underlying by cToken,\n///      so platform adapter provider provides such function\ninterface ITokenAddressProvider {\n  /// @notice Get cTokens by underlying\n  function getCTokenByUnderlying(address token1, address token2)\n  external view\n  returns (address cToken1, address cToken2);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/libs/AppDataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nlibrary AppDataTypes {\n\n  enum LendingPlatformKinds {\n    UNKNOWN_0,\n    DFORCE_1,\n    AAVE2_2,\n    AAVE3_3,\n    HUNDRED_FINANCE_4,\n    COMPOUND3_5,\n    MOONWELL_6,\n    ZEROVIX_7,\n    KEOM_8\n  }\n\n  enum ConversionKind {\n    UNKNOWN_0,\n    SWAP_1,\n    BORROW_2\n  }\n\n  /// @notice Input params for BorrowManager.findPool (stack is too deep problem)\n  /// @dev ATTENTION: This struct is immutable because it's sent as parameter to platform adapter...\n  struct InputConversionParams {\n    address collateralAsset;\n    address borrowAsset;\n\n    /// @notice Encoded entry kind and additional params if necessary (set of params depends on the kind)\n    ///         See EntryKinds.sol\\ENTRY_KIND_XXX constants for possible entry kinds\n    bytes entryData;\n\n    uint countBlocks;\n\n    /// @notice The meaning depends on entryData kind, see EntryKinds library for details.\n    ///         For entry kind = 0: Amount of {sourceToken} to be converted to {targetToken}\n    ///         For entry kind = 1: Available amount of {sourceToken}\n    ///         For entry kind = 2: Amount of {targetToken} that should be received after conversion\n    uint amountIn;\n\n    // immutable, see comments above\n  }\n\n  /// @notice Explain how a given lending pool can make specified conversion\n  struct ConversionPlan {\n    /// @notice Template adapter contract that implements required strategy.\n    address converter;\n    /// @notice Current collateral factor [0..1e18], where 1e18 is corresponded to CF=1\n    uint liquidationThreshold18;\n\n    /// @notice Amount to borrow in terms of borrow asset\n    uint amountToBorrow;\n    /// @notice Amount to be used as collateral in terms of collateral asset\n    uint collateralAmount;\n\n    /// @notice Cost for the period calculated using borrow rate in terms of borrow tokens, decimals 36\n    /// @dev It doesn't take into account supply increment and rewards\n    uint borrowCost36;\n    /// @notice Potential supply increment after borrow period recalculated to Borrow Token, decimals 36\n    uint supplyIncomeInBorrowAsset36;\n    /// @notice Potential rewards amount after borrow period in terms of Borrow Tokens, decimals 36\n    uint rewardsAmountInBorrowAsset36;\n    /// @notice Amount of collateral in terms of borrow asset, decimals 36\n    uint amountCollateralInBorrowAsset36;\n\n    /// @notice Loan-to-value, decimals = 18 (wad)\n    uint ltv18;\n    /// @notice How much borrow asset we can borrow in the pool (in borrow tokens)\n    uint maxAmountToBorrow;\n    /// @notice How much collateral asset can be supplied (in collateral tokens).\n    ///         type(uint).max - unlimited, 0 - no supply is possible\n    uint maxAmountToSupply;\n  }\n\n  struct PricesAndDecimals {\n    /// @notice Price of the collateral asset (decimals same as the decimals of {priceBorrow})\n    uint priceCollateral;\n    /// @notice Price of the borrow asset (decimals same as the decimals of {priceCollateral})\n    uint priceBorrow;\n    /// @notice 10**{decimals of the collateral asset}\n    uint rc10powDec;\n    /// @notice 10**{decimals of the borrow asset}\n    uint rb10powDec;\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/libs/AppErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice List of all errors generated by the application\n///         Each error should have unique code TC-XXX and descriptive comment\nlibrary AppErrors {\n  /// @notice Provided address should be not zero\n  string public constant ZERO_ADDRESS = \"TC-1 zero address\";\n  /// @notice Pool adapter for the given set {converter, user, collateral, borrowToken} not found and cannot be created\n  string public constant POOL_ADAPTER_NOT_FOUND = \"TC-2 adapter not found\";\n  /// @notice Health factor is not set or it's less then min allowed value\n  string public constant WRONG_HEALTH_FACTOR = \"TC-3 wrong health factor\";\n  /// @notice Received price is zero\n  string public constant ZERO_PRICE = \"TC-4 zero price\";\n  /// @notice Given platform adapter is not found in Borrow Manager\n  string public constant PLATFORM_ADAPTER_NOT_FOUND = \"TC-6 platform adapter not found\";\n  /// @notice Only pool adapters are allowed to make such operation\n  string public constant POOL_ADAPTER_ONLY = \"TC-7 pool adapter not found\";\n  /// @notice Only TetuConverter is allowed to make such operation\n  string public constant TETU_CONVERTER_ONLY = \"TC-8 tetu converter only\";\n  /// @notice Only Governance is allowed to make such operation\n  string public constant GOVERNANCE_ONLY = \"TC-9 governance only\";\n  /// @notice Cannot close borrow position if the position has not zero collateral or borrow balance\n  string public constant ATTEMPT_TO_CLOSE_NOT_EMPTY_BORROW_POSITION = \"TC-10 position not empty\";\n  /// @notice Borrow position is not registered in DebtMonitor\n  string public constant BORROW_POSITION_IS_NOT_REGISTERED = \"TC-11 position not registered\";\n  /// @notice Passed arrays should have same length\n  string public constant WRONG_LENGTHS = \"TC-12 wrong lengths\";\n  /// @notice Pool adapter expects some amount of collateral on its balance\n  string public constant WRONG_COLLATERAL_BALANCE=\"TC-13 wrong collateral balance\";\n  /// @notice Pool adapter expects some amount of derivative tokens on its balance after borrowing\n  string public constant WRONG_DERIVATIVE_TOKENS_BALANCE=\"TC-14 wrong ctokens balance\";\n  /// @notice Pool adapter expects some amount of borrowed tokens on its balance\n  string public constant WRONG_BORROWED_BALANCE = \"TC-15 wrong borrow balance\";\n  /// @notice cToken is not found for provided underlying\n  string public constant C_TOKEN_NOT_FOUND = \"TC-16 ctoken not found\";\n  /// @notice cToken.mint failed\n  string public constant MINT_FAILED = \"TC-17 mint failed:\";\n  string public constant COMPTROLLER_GET_ACCOUNT_LIQUIDITY_FAILED = \"TC-18 get account liquidity failed\";\n  string public constant COMPTROLLER_GET_ACCOUNT_LIQUIDITY_UNDERWATER = \"TC-19 get account liquidity underwater\";\n  /// @notice borrow failed\n  string public constant BORROW_FAILED = \"TC-20 borrow failed\";\n  string public constant CTOKEN_GET_ACCOUNT_SNAPSHOT_FAILED = \"TC-21 snapshot failed\";\n  string public constant CTOKEN_GET_ACCOUNT_LIQUIDITY_FAILED = \"TC-22 liquidity failed\";\n  string public constant INCORRECT_RESULT_LIQUIDITY = \"TC-23 incorrect liquidity\";\n  string public constant CLOSE_POSITION_FAILED = \"TC-24 close position failed\";\n  string public constant CONVERTER_NOT_FOUND = \"TC-25 converter not found\";\n  string public constant REDEEM_FAILED = \"TC-26 redeem failed\";\n  string public constant REPAY_FAILED = \"TC-27 repay failed\";\n  /// @notice Balance shouldn't be zero\n  string public constant ZERO_BALANCE = \"TC-28 zero balance\";\n  string public constant INCORRECT_VALUE = \"TC-29 incorrect value\";\n  /// @notice Only user can make this action\n  string public constant USER_ONLY = \"TC-30 user only\";\n  /// @notice It's not allowed to close position with a pool adapter and make re-conversion using the same adapter\n  string public constant RECONVERSION_WITH_SAME_CONVERTER_FORBIDDEN = \"TC-31 reconversion forbidden\";\n\n  /// @notice Platform adapter cannot be unregistered because there is active pool adapter (open borrow on the platform)\n  string public constant PLATFORM_ADAPTER_IS_IN_USE = \"TC-33 platform adapter is in use\";\n\n  string public constant DIVISION_BY_ZERO = \"TC-34 division by zero\";\n\n  string public constant UNSUPPORTED_VALUE = \"TC-35: Unsupported value\";\n  string public constant SLIPPAGE_TOO_BIG = \"TC-36: SLIPPAGE TOO BIG\";\n\n  /// @notice The relation \"platform adapter - converter\" is invariant.\n  ///         It's not allowed to assign new platform adapter to the converter\n  string public constant ONLY_SINGLE_PLATFORM_ADAPTER_CAN_USE_CONVERTER = \"TC-37 one platform adapter per conv\";\n\n  /// @notice Provided health factor value is not applicable for other health factors\n  ///         Invariant: min health factor < target health factor < max health factor\n  string public constant WRONG_HEALTH_FACTOR_CONFIG = \"TC-38: wrong health factor config\";\n\n  /// @notice Health factor is not good after rebalancing\n  string public constant WRONG_REBALANCING = \"TC-39: wrong rebalancing\";\n\n  /// @notice It's not allowed to pay debt completely using repayToRebalance\n  ///         Please use ordinal repay for this purpose (it allows to receive the collateral)\n  string public constant REPAY_TO_REBALANCE_NOT_ALLOWED = \"TC-40 repay to rebalance not allowed\";\n\n  /// @notice Received amount is different from expected one\n  string public constant WRONG_AMOUNT_RECEIVED = \"TC-41 wrong amount received\";\n  /// @notice Only one of the keepers is allowed to make such operation\n  string public constant KEEPER_ONLY = \"TC-42 keeper only\";\n\n  /// @notice The amount cannot be zero\n  string public constant ZERO_AMOUNT = \"TC-43 zero amount\";\n\n  /// @notice Value of \"converter\" passed to TetuConverter.borrow is incorrect ( != SwapManager address)\n  string public constant INCORRECT_CONVERTER_TO_SWAP = \"TC-44 incorrect converter\";\n\n  string public constant BORROW_MANAGER_ONLY = \"TC-45 borrow manager only\";\n\n  /// @notice Attempt to make a borrow using unhealthy pool adapter\n  ///         This is not normal situation.\n  ///         Health factor is greater 1 but it's less then minimum allowed value.\n  ///         Keeper doesn't work?\n  string public constant REBALANCING_IS_REQUIRED = \"TC-46 rebalancing is required\";\n\n  /// @notice Position can be closed as \"liquidated\" only if there is no collateral on it\n  string public constant CANNOT_CLOSE_LIVE_POSITION = \"TC-47 cannot close live pos\";\n\n  string public constant ACCESS_DENIED = \"TC-48 access denied\";\n\n  /// @notice Value A is less then B, so we will have overflow on A - B, but it's weird situation\n  ///         If balance is decreased after a supply or increased after a deposit\n  string public constant WEIRD_OVERFLOW = \"TC-49 weird overflow\";\n\n  string public constant AMOUNT_TOO_BIG = \"TC-50 amount too big\";\n\n  string public constant NOT_PENDING_GOVERNANCE = \"TC-51 not pending gov\";\n\n  string public constant INCORRECT_OPERATION = \"TC-52 incorrect op\";\n\n  string public constant ONLY_SWAP_MANAGER = \"TC-53 swap manager only\";\n\n  string public constant TOO_HIGH_PRICE_IMPACT = \"TC-54 price impact\";\n\n  /// @notice It's not possible to make partial repayment and close the position\n  string public constant CLOSE_POSITION_PARTIAL = \"TC-55 close position not allowed\";\n  string public constant ZERO_VALUE_NOT_ALLOWED = \"TC-56 zero not allowed\";\n  string public constant OUT_OF_WHITE_LIST = \"TC-57 whitelist\";\n\n  string public constant INCORRECT_BORROW_ASSET = \"TC-58 incorrect borrow asset\";\n\n  string public constant UNSALVAGEABLE = \"TC-59: unsalvageable\";\n\n  string public constant GELATO_ONLY_OPS = \"TC-60: onlyOps\";\n  string public constant GELATO_ETH_TRANSFER_FAILED = \"TC-61: _transfer: ETH transfer failed\";\n\n  string public constant DEPRECATED_LEGACY_CODE = \"TC-62: legacy\";\n\n  string public constant ASSET_NOT_FOUND = \"TC-63: asset not found\";\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/libs/AppUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./AppErrors.sol\";\nimport \"../openzeppelin/IERC20.sol\";\n\n/// @notice Common utils\nlibrary AppUtils {\n  /// @notice Convert {amount} with [sourceDecimals} to new amount with {targetDecimals}\n  function toMantissa(uint amount, uint8 sourceDecimals, uint8 targetDecimals) internal pure returns (uint) {\n    return sourceDecimals == targetDecimals\n      ? amount\n      : amount * (10 ** targetDecimals) / (10 ** sourceDecimals);\n  }\n\n  function uncheckedInc(uint i) internal pure returns (uint) {\n    unchecked {\n      return i + 1;\n    }\n  }\n\n  /// @notice Remove {itemToRemove} from {items}, move last item of {items} to the position of the removed item\n  function removeItemFromArray(address[] storage items, address itemToRemove) internal {\n    uint lenItems = items.length;\n    for (uint i = 0; i < lenItems; i = uncheckedInc(i)) {\n      if (items[i] == itemToRemove) {\n        if (i < lenItems - 1) {\n          items[i] = items[lenItems - 1];\n        }\n        items.pop();\n        break;\n      }\n    }\n  }\n\n  /// @notice Create new array with only first {countItemsToKeep_} items from {items_} array\n  /// @dev We assume, that trivial case countItemsToKeep_ == 0 is excluded, the function is not called in that case\n  function removeLastItems(address[] memory items_, uint countItemsToKeep_) internal pure returns (address[] memory) {\n    uint lenItems = items_.length;\n    if (lenItems <= countItemsToKeep_) {\n      return items_;\n    }\n\n    address[] memory dest = new address[](countItemsToKeep_);\n    for (uint i = 0; i < countItemsToKeep_; i = uncheckedInc(i)) {\n      dest[i] = items_[i];\n    }\n\n    return dest;\n  }\n\n  /// @dev We assume, that trivial case countItemsToKeep_ == 0 is excluded, the function is not called in that case\n  function removeLastItems(uint[] memory items_, uint countItemsToKeep_) internal pure returns (uint[] memory) {\n    uint lenItems = items_.length;\n    if (lenItems <= countItemsToKeep_) {\n      return items_;\n    }\n\n    uint[] memory dest = new uint[](countItemsToKeep_);\n    for (uint i = 0; i < countItemsToKeep_; i = uncheckedInc(i)) {\n      dest[i] = items_[i];\n    }\n\n    return dest;\n  }\n\n  /// @notice (amount1 - amount2) / amount1/2 < expected difference\n  function approxEqual(uint amount1, uint amount2, uint divisionMax18) internal pure returns (bool) {\n    return amount1 > amount2\n      ? (amount1 - amount2) * 1e18 / (amount2 + 1) < divisionMax18\n      : (amount2 - amount1) * 1e18 / (amount2 + 1) < divisionMax18;\n  }\n\n  /// @notice Insertion sorting algorithm for using with arrays fewer than 10 elements, insert in ascending order.\n  ///         Take into account only  {length_} items of the {items_} array starting from {startIndex_}\n  /// @dev Based on https://medium.com/coinmonks/sorting-in-solidity-without-comparison-4eb47e04ff0d\n  /// @param startIndex_ Start index of the range to be sorted, assume {length_} + {startIndex_} <= {items_}.length\n  /// @param length_ Count items to be sorted, assume {length_} <= {items_}.length\n  /// @param destIndices Ordered list of indices of the {items_}. Assume {destIndices}.length == {items_}.length\n  ///        Index for the i-th item is stored in destIndices[i]\n  function _sortAsc(uint startIndex_, uint length_, int[] memory items_, uint[] memory destIndices) internal pure {\n    unchecked {\n      for (uint i; i < length_; ++i) {\n        destIndices[i + startIndex_] = i + startIndex_;\n      }\n\n      for (uint i = 1; i < length_; i++) {\n        uint key = destIndices[i + startIndex_];\n        uint j = i - 1;\n        while ((int(j) >= 0) && items_[destIndices[startIndex_ + j]] > items_[key]) {\n          destIndices[startIndex_ + j + 1] = destIndices[startIndex_ + j];\n          j--;\n        }\n        destIndices[startIndex_ + j + 1] = key;\n      }\n    }\n  }\n\n  /// @notice Return a-b OR zero if a < b\n  function sub0(uint a, uint b) internal pure returns (uint) {\n    return a > b ? a - b : 0;\n  }\n\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\n  function getAssetIndex(address[] memory tokens_, address asset_, uint lenTokens_) internal pure returns (uint) {\n    for (uint i; i < lenTokens_; i = uncheckedInc(i)) {\n      if (tokens_[i] == asset_) {\n        return i;\n      }\n    }\n    return type(uint).max;\n  }\n\n  function getChainID() internal view returns (uint256) {\n    uint256 id;\n    assembly {\n      id := chainid()\n    }\n    return id;\n  }\n\n  /// @param asset Underlying, it can be native token\n  function getBalance(address nativeToken, address asset) internal view returns (uint) {\n    return nativeToken == asset\n      ? address(this).balance\n      : IERC20(asset).balanceOf(address(this));\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/libs/BookkeeperLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/IERC20.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/EnumerableSet.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../openzeppelin/IERC20Metadata.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"../interfaces/IBookkeeper.sol\";\nimport \"../interfaces/IPoolAdapter.sol\";\nimport \"../interfaces/IBorrowManager.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\nimport \"../libs/AppUtils.sol\";\nimport \"../libs/BookkeeperLib.sol\";\nimport \"../interfaces/IDebtMonitor.sol\";\n\nlibrary BookkeeperLib {\n  using SafeERC20 for IERC20;\n  using AppUtils for uint;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  //region ----------------------------------------------------- Data types\n  enum ActionKind {\n    /// @notice Pool adapter has made a new borrow\n    BORROW_0,\n    /// @notice Pool adapter has made a partial or full repayment\n    REPAY_1\n  }\n\n  struct BaseState {\n    /// @notice pool adapter => info about borrow/repay actions\n    mapping(address => BookkeeperLib.Action[]) actions;\n\n    /// @notice User of the pool adapter => list of pool adapters with not zero debts in the current period\n    mapping(address => EnumerableSet.AddressSet) poolAdaptersPerUser;\n\n    /// @notice pool adapter => checkpoint\n    mapping(address => BookkeeperLib.PoolAdapterCheckpoint) checkpoints;\n\n    /// @notice pool adapter => index of the repay-action in actions => RepayInfo\n    mapping(address => mapping(uint => RepayInfo)) repayInfo;\n\n    /// @notice pool adapter => length of actions array at the moment of start of the period\n    mapping(address => uint[]) periods;\n  }\n\n  /// @notice Borrow or repay action\n  struct Action {\n    /// @notice Action kind. There is additional info for repays in {repayInfo}\n    ActionKind actionKind;\n    /// @notice Total amount supplied by the user as a collateral after the action\n    uint suppliedAmount;\n    /// @notice Total borrowed amount after the action\n    uint borrowedAmount;\n  }\n\n  /// @notice Received gain and paid debt-loss amounts for the given repay-action together with current prices\n  struct RepayInfo {\n    /// @notice Gain (received for supplied amount) received at the current action, in terms of collateral asset\n    uint gain;\n    /// @notice Losses (paid for the borrowed amount) paid in the current action, in terms of borrow asset\n    ///         Pool adapter has debt. Debt is increased in time. The amount by which a debt increases is a loss\n    uint loss;\n    /// @notice [price of collateral, price of borrow asset] for the moment of the action, decimals 18 (USD/Token)\n    uint[2] prices;\n  }\n\n  /// @notice Checkpoint save current state of user's account on lending platform.\n  ///         Difference between checkpoints allow user to calculate increase in debt between checkpoints.\n  ///         It allows to separate two kinds of the increase in debt:\n  ///         1) increase in debt because some time has passed and debt was increased according borrow rate\n  ///         2) increase in debt becuase prices were changed\n  struct PoolAdapterCheckpoint {\n    /// @notice Total amount supplied by the user as a collateral\n    uint suppliedAmount;\n    /// @notice Total borrowed amount\n    uint borrowedAmount;\n\n    /// @notice Amount of collateral registered on the lending platform\n    uint totalCollateral;\n    /// @notice Amount of debt registered on the lending platform\n    uint totalDebt;\n\n    /// @notice Count actions performed at the moment of checkpoint creation\n    uint countActions;\n  }\n\n  struct OnRepayLocal {\n    address user;\n    uint totalCollateral;\n    uint totalDebt;\n    uint debtRatio;\n    uint collateralRatio;\n    uint debt;\n    uint collateral;\n    address collateralAsset;\n    address borrowAsset;\n  }\n\n  struct CheckpointLocal {\n    uint totalCollateral;\n    uint totalDebt;\n    uint countActions;\n    uint borrowedAmount;\n    uint suppliedAmount;\n  }\n\n  struct CheckpointForUserLocal {\n    uint lenTokens;\n    uint indexCollateral;\n    uint indexBorrow;\n    uint gain;\n    uint loss;\n  }\n\n  struct StartPeriodLocal {\n    uint[] decs;\n    uint len;\n    address collateralAsset;\n    address borrowAsset;\n    uint gain;\n    uint loss;\n    uint countActions;\n  }\n  //endregion ----------------------------------------------------- Data types\n\n  //region ----------------------------------------------------- Events\n  event OnBorrow(\n    address poolAdapter,\n    uint collateralAmount,\n    uint borrowedAmount\n  );\n\n  /// @param gain Gain in terms of collateral\n  /// @param losses Debt-losses in terms of borrow asset\n  event OnRepay(\n    address poolAdapter,\n    uint withdrawnCollateral,\n    uint paidAmount,\n    uint gain,\n    uint losses,\n    uint[2] prices\n  );\n\n  event OnCheckpoint(address user, address[] tokens, uint[] deltaGains, uint[] deltaLosses);\n  event OnCheckpointForPoolAdapter(address poolAdapter, uint deltaGain, uint deltaLoss);\n  event OnStartPeriod(address user, address underlying, uint gains, uint losses);\n  event OnAddPoolAdapter(address user, address poolAdapter, bool onBorrow);\n  event OnRemovePoolAdapter(address user, address poolAdapter);\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Checkpoint logic\n\n  /// @notice Calculate gain and debt-loss for period between current moment and stored checkpoint\n  /// @dev Deltas can be calculated only if there were no repay/borrow actions since previous checkpoint\n  function previewCheckpointForPoolAdapter(BaseState storage state_, IPoolAdapter poolAdapter_) internal view returns (\n    uint deltaGain,\n    uint deltaLoss\n  ) {\n    CheckpointLocal memory v;\n    (v.totalCollateral, v.totalDebt, , , , ) = poolAdapter_.getStatus();\n    PoolAdapterCheckpoint memory c = state_.checkpoints[address(poolAdapter_)];\n    Action[] storage actions = state_.actions[address(poolAdapter_)];\n\n    v.countActions = actions.length;\n\n    // we can calculate deltas only if\n    // - there was no liquidation\n    // - there were no repay/borrow actions since previous checkpoint\n    // otherwise it's safer to assume that the deltas are zero\n    if (v.totalDebt >= c.totalDebt && c.countActions == v.countActions ) {\n      deltaGain = v.totalCollateral - c.totalCollateral;\n      deltaLoss = v.totalDebt - c.totalDebt;\n    }\n\n    return (deltaGain, deltaLoss);\n  }\n\n  /// @notice Save checkpoint for the given {poolAdapter_} for the current moment\n  /// @dev Deltas can be calculated only if there were no repay/borrow actions since previous checkpoint\n  function checkpointForPoolAdapter(BaseState storage state_, IPoolAdapter poolAdapter_) internal returns (\n    uint deltaGain,\n    uint deltaLoss\n  ) {\n    CheckpointLocal memory v;\n    (v.totalCollateral, v.totalDebt, , , , ) = poolAdapter_.getStatus();\n    PoolAdapterCheckpoint memory c = state_.checkpoints[address(poolAdapter_)];\n    Action[] storage actions = state_.actions[address(poolAdapter_)];\n\n    v.countActions = actions.length;\n\n    // we can calculate deltas only if\n    // - there was no liquidation\n    // - there were no repay/borrow actions since previous checkpoint\n    // - this is not a first checkpoint\n    // otherwise it's safer to assume that the deltas are zero\n    if (v.totalDebt >= c.totalDebt && c.countActions == v.countActions && c.totalDebt != 0) {\n      deltaGain = v.totalCollateral - c.totalCollateral;\n      deltaLoss = v.totalDebt - c.totalDebt;\n    }\n\n    if (v.countActions != 0) {\n      Action memory action = actions[v.countActions - 1];\n      v.borrowedAmount = action.borrowedAmount;\n      v.suppliedAmount = action.suppliedAmount;\n    }\n\n    state_.checkpoints[address(poolAdapter_)] = PoolAdapterCheckpoint({\n      totalDebt: v.totalDebt,\n      totalCollateral: v.totalCollateral,\n      borrowedAmount: v.borrowedAmount,\n      suppliedAmount: v.suppliedAmount,\n      countActions: v.countActions\n    });\n\n    emit OnCheckpointForPoolAdapter(address(poolAdapter_), deltaGain, deltaLoss);\n    return (deltaGain, deltaLoss);\n  }\n\n  /// @notice Make new checkpoint in all pool adapters of the {user_}, calculate total gains and losses for all assets\n  /// @param user_ User (strategy)\n  /// @param tokens_ List of all possible collateral and borrow assets.\n  /// @return deltaGains Collateral gains for {tokens_}. Gain is a profit that appears because of supply rates.\n  /// @return deltaLosses Increases in debts for {tokens_}. Such losses appears because of borrow rates.\n  function checkpointForUser(\n    BaseState storage state_,\n    address user_,\n    address[] memory tokens_\n  ) internal returns (\n    uint[] memory deltaGains,\n    uint[] memory deltaLosses\n  ) {\n    CheckpointForUserLocal memory v;\n\n    v.lenTokens = tokens_.length;\n    deltaGains = new uint[](v.lenTokens);\n    deltaLosses = new uint[](v.lenTokens);\n\n    EnumerableSet.AddressSet storage set = state_.poolAdaptersPerUser[user_];\n    uint len = set.length();\n    for (uint i; i < len; ++i) {\n      IPoolAdapter poolAdapter = IPoolAdapter(set.at(i));\n      (,, address collateralAsset, address borrowAsset) = poolAdapter.getConfig();\n      v.indexCollateral = AppUtils.getAssetIndex(tokens_, collateralAsset, v.lenTokens);\n      v.indexBorrow = AppUtils.getAssetIndex(tokens_, borrowAsset, v.lenTokens);\n      require(v.indexCollateral != type(uint).max && v.indexBorrow != type(uint).max, AppErrors.ASSET_NOT_FOUND);\n\n      (v.gain, v.loss) = checkpointForPoolAdapter(state_, poolAdapter);\n      deltaGains[v.indexCollateral] += v.gain;\n      deltaLosses[v.indexBorrow] += v.loss;\n    }\n\n    emit OnCheckpoint(user_, tokens_, deltaGains, deltaLosses);\n  }\n\n  /// @notice Calculate gain and debt-loss for all user's pool adapter\n  ///         for period between current moment and stored checkpoint\n  /// @param user_ User (strategy)\n  /// @param tokens_ List of all possible collateral and borrow assets.\n  /// @return deltaGains Collateral gains for {tokens_}. Gain is a profit that appears because of supply rates.\n  /// @return deltaLosses Increases in debts for {tokens_}. Such losses appears because of borrow rates.\n  function previewCheckpointForUser(\n    BaseState storage state_,\n    address user_,\n    address[] memory tokens_\n  ) internal view returns (\n    uint[] memory deltaGains,\n    uint[] memory deltaLosses\n  ) {\n    CheckpointForUserLocal memory v;\n\n    v.lenTokens = tokens_.length;\n    deltaGains = new uint[](v.lenTokens);\n    deltaLosses = new uint[](v.lenTokens);\n\n    EnumerableSet.AddressSet storage set = state_.poolAdaptersPerUser[user_];\n    uint len = set.length();\n    for (uint i; i < len; ++i) {\n      IPoolAdapter poolAdapter = IPoolAdapter(set.at(i));\n      (,, address collateralAsset, address borrowAsset) = poolAdapter.getConfig();\n      v.indexCollateral = AppUtils.getAssetIndex(tokens_, collateralAsset, v.lenTokens);\n      v.indexBorrow = AppUtils.getAssetIndex(tokens_, borrowAsset, v.lenTokens);\n      require(v.indexCollateral != type(uint).max && v.indexBorrow != type(uint).max, AppErrors.ASSET_NOT_FOUND);\n\n      (v.gain, v.loss) = previewCheckpointForPoolAdapter(state_, poolAdapter);\n      deltaGains[v.indexCollateral] += v.gain;\n      deltaLosses[v.indexBorrow] += v.loss;\n    }\n  }\n  //endregion ----------------------------------------------------- Checkpoint logic\n\n  //region ----------------------------------------------------- OnBorrow, OnRepay logic\n  /// @notice Register a new loan\n  /// @param collateralAmount Amount of supplied collateral for the new loan\n  /// @param borrowedAmount Borrowed amount provided for the given {collateralAmount}\n  function onBorrow(\n    BaseState storage state,\n    IPoolAdapter poolAdapter,\n    uint collateralAmount,\n    uint borrowedAmount\n  ) internal {\n    (, address user, , ) = poolAdapter.getConfig();\n\n    (uint totalSuppliedAmount, uint totalBorrowedAmount) = _getLastStoredAmounts(state, address(poolAdapter));\n\n    state.actions[address(poolAdapter)].push(Action({\n      suppliedAmount: totalSuppliedAmount + collateralAmount,\n      borrowedAmount: totalBorrowedAmount + borrowedAmount,\n      actionKind: ActionKind.BORROW_0\n    }));\n\n    if (!state.poolAdaptersPerUser[user].contains(address(poolAdapter))) {\n      state.poolAdaptersPerUser[user].add(address(poolAdapter));\n      emit OnAddPoolAdapter(user, address(poolAdapter), true);\n    }\n    emit OnBorrow(address(poolAdapter), collateralAmount, borrowedAmount);\n  }\n\n  /// @notice Register loan payment\n  /// @param withdrawnCollateral Amount of collateral received by the user during the repaying.\n  /// @param paidAmount Amount paid by the user during the repaying.\n  function onRepay(\n    BaseState storage state,\n    IConverterController controller,\n    IPoolAdapter poolAdapter,\n    uint withdrawnCollateral,\n    uint paidAmount\n  ) internal {\n    OnRepayLocal memory v;\n    (, v.user, v.collateralAsset, v.borrowAsset) = poolAdapter.getConfig();\n    (v.totalCollateral, v.totalDebt,,,,) = poolAdapter.getStatus();\n    IPriceOracle priceOracle = IPriceOracle(controller.priceOracle());\n\n    (uint totalSuppliedAmount, uint totalBorrowedAmount) = _getLastStoredAmounts(state, address(poolAdapter));\n\n    // register new repay action, calculate received gain and paid debt-loss amounts\n    v.collateralRatio = Math.min(1e18, 1e18 * withdrawnCollateral / (v.totalCollateral + withdrawnCollateral));\n    v.debtRatio = Math.min(1e18, 1e18 * paidAmount / (v.totalDebt + paidAmount));\n\n    uint gain = AppUtils.sub0(v.totalCollateral + withdrawnCollateral, totalSuppliedAmount) * v.collateralRatio / 1e18;\n    uint loss = AppUtils.sub0(v.totalDebt + paidAmount, totalBorrowedAmount) * v.debtRatio / 1e18;\n\n    // register new repay-action\n    state.actions[address(poolAdapter)].push(Action({\n      suppliedAmount: totalSuppliedAmount * (1e18 - v.collateralRatio) / 1e18,\n      borrowedAmount: totalBorrowedAmount * (1e18 - v.debtRatio) / 1e18,\n      actionKind: ActionKind.REPAY_1\n    }));\n\n    uint[2] memory prices = [\n      priceOracle.getAssetPrice(v.collateralAsset),\n      priceOracle.getAssetPrice(v.borrowAsset)\n    ];\n    state.repayInfo[address(poolAdapter)][state.actions[address(poolAdapter)].length - 1] = RepayInfo({\n      gain: gain,\n      loss: loss,\n      prices: prices\n    });\n\n    if (!state.poolAdaptersPerUser[v.user].contains(address(poolAdapter))) {\n      state.poolAdaptersPerUser[v.user].add(address(poolAdapter));\n      emit OnAddPoolAdapter(v.user, address(poolAdapter), false);\n    }\n    emit OnRepay(address(poolAdapter), withdrawnCollateral, paidAmount, gain, loss, prices);\n  }\n\n  function _getLastStoredAmounts(BaseState storage state, address poolAdapter) internal view returns (\n    uint suppliedAmount,\n    uint borrowedAmount\n  ) {\n    Action[] memory actions = state.actions[poolAdapter];\n    uint countActions = actions.length;\n    if (countActions != 0) {\n      // get last stored supplied and borrowed amount\n      Action memory lastAction = actions[countActions - 1];\n      suppliedAmount = lastAction.suppliedAmount;\n      borrowedAmount = lastAction.borrowedAmount;\n    }\n\n    return (suppliedAmount, borrowedAmount);\n  }\n  //endregion ----------------------------------------------------- OnBorrow, OnRepay logic\n\n  //region ----------------------------------------------------- Logic for period\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the user\n  ///         for the current period, start new period.\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\n  function startPeriod(\n    BaseState storage state_,\n    IDebtMonitor debtMonitor,\n    address user_,\n    address underlying_\n  ) internal returns (\n    uint gains,\n    uint losses\n  ) {\n    StartPeriodLocal memory v;\n\n    EnumerableSet.AddressSet storage set = state_.poolAdaptersPerUser[user_];\n    v.len = set.length();\n    v.decs = new uint[](2);\n    for (uint i = v.len; i > 0; i--) {\n      IPoolAdapter poolAdapter = IPoolAdapter(set.at(i - 1));\n      (,, v.collateralAsset, v.borrowAsset) = poolAdapter.getConfig();\n      v.decs[0] = 10 ** IERC20Metadata(v.collateralAsset).decimals();\n      v.decs[1] = 10 ** IERC20Metadata(v.borrowAsset).decimals();\n\n      (v.gain, v.loss, v.countActions) = onHardwork(state_, poolAdapter, underlying_ == v.collateralAsset, v.decs);\n      gains += v.gain;\n      losses += v.loss;\n\n      state_.periods[address(poolAdapter)].push(v.countActions);\n\n      // remove pool adapters without any debts from the set\n      if (! debtMonitor.isPositionOpenedEx(address(poolAdapter))) {\n        set.remove(address(poolAdapter));\n        emit OnRemovePoolAdapter(user_, address(poolAdapter));\n      }\n    }\n\n    emit OnStartPeriod(user_, underlying_, gains, losses);\n    return (gains, losses);\n  }\n\n  /// @notice Calculate total amount of gains and looses in underlying by all pool adapters of the user\n  ///         for the current period, DON'T start new period.\n  /// @param underlying_ Asset in which we calculate gains and loss. Assume that it's either collateral or borrow asset.\n  /// @return gains Total amount of gains (supply-profit) of the {user_} by all user's pool adapters\n  /// @return losses Total amount of losses (paid increases to debt) of the {user_} by all user's pool adapters\n  function previewPeriod(BaseState storage state_, address user_, address underlying_) internal view returns (\n    uint gains,\n    uint losses\n  ) {\n    StartPeriodLocal memory v;\n\n    EnumerableSet.AddressSet storage set = state_.poolAdaptersPerUser[user_];\n    v.len = set.length();\n    v.decs = new uint[](2);\n    for (uint i = v.len; i > 0; i--) {\n      IPoolAdapter poolAdapter = IPoolAdapter(set.at(i - 1));\n      (,, v.collateralAsset, v.borrowAsset) = poolAdapter.getConfig();\n      v.decs[0] = 10 ** IERC20Metadata(v.collateralAsset).decimals();\n      v.decs[1] = 10 ** IERC20Metadata(v.borrowAsset).decimals();\n\n      (v.gain, v.loss, v.countActions) = onHardwork(state_, poolAdapter, underlying_ == v.collateralAsset, v.decs);\n      gains += v.gain;\n      losses += v.loss;\n    }\n\n    return (gains, losses);\n  }\n\n  /// @notice Calculate gains and losses of the {poolAdapter_} for the current period\n  /// @param isCollateralUnderlying_ True if collateral is underlying (assume that otherwise borrow asset is underlying)\n  /// @param decs 10**decimals for [collateral, borrow asset]\n  /// @return gains Total amount of gains (supply-profit) for all repay-actions made in the current period\n  /// @return loss Total amount of losses (paid increases to debt) for all repay-actions made in the current period\n  /// @return countActions Current count of actions\n  function onHardwork(\n    BaseState storage state_,\n    IPoolAdapter poolAdapter_,\n    bool isCollateralUnderlying_,\n    uint[] memory decs\n  ) internal view returns (\n    uint gains,\n    uint loss,\n    uint countActions\n  ) {\n    BookkeeperLib.Action[] storage actions = state_.actions[address(poolAdapter_)];\n    countActions = actions.length;\n\n    uint[] storage periods = state_.periods[address(poolAdapter_)];\n    uint countPeriods = periods.length;\n    // count of the actions at the moment of the beginning of the period\n    uint countActionsStart = countPeriods == 0\n      ? 0\n      : periods[countPeriods - 1];\n    for (uint i = countActions; i > countActionsStart; i--) {\n      ActionKind actionKind = actions[i - 1].actionKind;\n      if (actionKind == ActionKind.BORROW_0) continue;\n      if (actionKind == ActionKind.REPAY_1) {\n        // let's calculate received gains and losses in terms of given asset\n        RepayInfo memory repayInfo = state_.repayInfo[address(poolAdapter_)][i - 1];\n        if (isCollateralUnderlying_) {\n          gains += repayInfo.gain;\n          loss += repayInfo.loss * repayInfo.prices[1] * decs[0] / repayInfo.prices[0] / decs[1];\n        } else {\n          loss += repayInfo.loss;\n          gains += repayInfo.gain * repayInfo.prices[0] * decs[1] / repayInfo.prices[1] / decs[0];\n        }\n      } else {\n        // we have reached moment of starting of the current period\n        break;\n      }\n    }\n\n    return (gains, loss, countActions);\n  }\n  //endregion ----------------------------------------------------- Logic for period\n\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/libs/BorrowManagerLogicLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./AppDataTypes.sol\";\nimport \"../openzeppelin/EnumerableSet.sol\";\nimport \"../openzeppelin/EnumerableMap.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/IPlatformAdapter.sol\";\nimport \"../interfaces/IConverterController.sol\";\nimport \"./ConverterLogicLib.sol\";\nimport \"./AppUtils.sol\";\nimport \"./EntryKinds.sol\";\n\n/// @notice BorrowManager-contract logic-related functions\nlibrary BorrowManagerLogicLib {\n  using AppUtils for uint;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  //region ----------------------------------------------------- Constants\n  /// @notice Reward APR is taken into account with given factor\n  ///         Result APR = borrow-apr - supply-apr - Factor/Denominator * rewards-APR\n  uint public constant REWARDS_FACTOR_DENOMINATOR_18 = 1e18;\n\n  uint internal constant DENOMINATOR = 100_000;\n\n  /// @notice Index of the threshold for too-healthy-case in thresholds array\n  uint internal constant INDEX_TOO_HEALTHY = 0;\n  /// @notice Index of the thresholds for unhealthy-case in thresholds array\n  uint internal constant INDEX_UNHEALTHY = 1;\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Data types\n  struct FindConverterLocal {\n    uint len;\n    IPlatformAdapter[] platformAdapters;\n    uint countCandidates;\n    bool needMore;\n    uint totalCandidates;\n  }\n\n  struct BorrowCandidate {\n    address converter;\n    uint collateralAmount;\n    uint amountToBorrow;\n    int apr18;\n    /// @notice Health factor of the exist debt; 0 for new conversion strategies\n    uint healthFactor18;\n  }\n\n  struct InputParamsAdditional {\n    IConverterController controller;\n    IBorrowManager borrowManager;\n\n    /// @notice Reward APR is taken into account with given factor, decimals 18.\n    uint rewardsFactor;\n\n    /// @notice Target health factor for the {collateralAsset}\n    uint16 targetHealthFactor2;\n\n    /// @notice the maximum percentage by which the collateral amount can be changed when rebalancing\n    ///             0: for the case when health factor is too healthy, see INDEX_TOO_HEALTHY\n    ///             1: for the case when health factor is unhealthy, see INDEX_UNHEALTHY\n    ///         Decimals are set by DENOMINATOR, so 50_000 means 0.5 or 50%\n    uint[2] thresholds;\n  }\n\n  struct FindCandidatesForExistDebtsLocal {\n    uint16 minHealthFactor2;\n\n    uint fullBorrowCounter;\n    uint len;\n    uint index;\n  }\n\n  //endregion ----------------------------------------------------- Data types\n\n  //region ----------------------------------------------------- Find best pool for borrowing\n  /// @notice Find lending pool capable of providing {targetAmount} and having best normalized borrow rate\n  ///         Results are ordered in ascending order of APR, so the best available converter is first one.\n  /// @param p_ Conversion params\n  /// @param pas_ All platform adapters that support required pair of assets\n  /// @param user_ Borrower. You can disable rebalance-of-exist-debts by sending {user_} = 0\n  /// @return converters Result template-pool-adapters\n  /// @return collateralAmounts Amounts that should be provided as a collateral\n  /// @return borrowAmounts Amounts that should be borrowed\n  /// @return aprs18 Annual Percentage Rates == (total cost - total income) / amount of collateral, decimals 18\n  function findConverter(\n    AppDataTypes.InputConversionParams memory p_,\n    InputParamsAdditional memory pa_,\n    EnumerableSet.AddressSet storage pas_,\n    address user_\n  ) internal view returns (\n    address[] memory converters,\n    uint[] memory collateralAmounts,\n    uint[] memory borrowAmounts,\n    int[] memory aprs18\n  ) {\n    FindConverterLocal memory v;\n\n    // get all platform adapters that support required pair of assets\n    v.len = pas_.length();\n\n    // copy all platform adapters to local array\n    v.platformAdapters = new IPlatformAdapter[](v.len);\n    for (uint i; i < v.len; i = i.uncheckedInc()) {\n      v.platformAdapters[i] = IPlatformAdapter(pas_.at(i));\n    }\n\n    BorrowCandidate[] memory candidates = new BorrowCandidate[](v.len);\n\n    // find all exist valid debts and calculate how to make new borrow with rebalancing of the exist debt\n    // add BorrowCandidate to {candidates} for such debts and clear up corresponded items in {platformAdapters}\n    if (user_ == address(0)) {\n      v.needMore = true; // rebalance of exist debts are disabled\n    } else {\n      (v.countCandidates, v.needMore) = _findCandidatesForExistDebts(v.platformAdapters, p_, pa_, candidates, user_);\n    }\n\n    v.totalCandidates = (v.needMore && v.len != 0)\n      // find borrow-candidates for all other platform adapters\n      ? _findNewCandidates(v.platformAdapters, v.countCandidates, p_, pa_, candidates)\n      : v.countCandidates;\n\n    return _prepareOutput(v.countCandidates, v.totalCandidates, candidates);\n  }\n\n  /// @notice Copy {data_} to output arrays\n  ///         First {countDebts_} contain data for exist debts, they are copied as is\n  ///         Other part of {data_} is at first ordered by apr and then the data are copied to output arrays\n  /// @param countDebts_ Count items of {data_} corresponded to the exist debts\n  /// @param count_ Total count of valid items in {data_}\n  /// @param data_ All found conversion strategies.\n  ///              First {countDebts_} positions contains data for exist debts (new borrow + rebalance),\n  ///              all others are new conversion strategies\n  /// @param converters Array with size equal to {count_}\n  ///                   First {countDebts_} contains data for the exist debts\n  ///                   All other items contains data for new positions that can be opened. These items are ordered by APR.\n  function _prepareOutput(uint countDebts_, uint count_, BorrowCandidate[] memory data_) internal pure returns (\n    address[] memory converters,\n    uint[] memory collateralAmounts,\n    uint[] memory borrowAmounts,\n    int[] memory aprs18\n  ) {\n    if (count_ != 0) {\n      // shrink output arrays to {countFoundItems} items and order results in ascending order of APR\n      converters = new address[](count_);\n      collateralAmounts = new uint[](count_);\n      borrowAmounts = new uint[](count_);\n      aprs18 = new int[](count_);\n\n      // sort new conversion strategies by APR and exist debts by health factor\n      // to reduce number of variables put APR and health factors to the same array, but sort and use them independently\n      int[] memory orderBy = new int[](count_);\n      for (uint i; i < count_; i = AppUtils.uncheckedInc(i)) {\n        orderBy[i] = (i < countDebts_)\n          ? int(data_[i].healthFactor18)\n          : data_[i].apr18;\n      }\n\n      uint countNewPos = count_ - countDebts_;\n      uint[] memory indices = new uint[](count_);\n\n      // order new positions by apr: lowest apr is best, such positions should be first\n      AppUtils._sortAsc(countDebts_, countNewPos, orderBy, indices);\n\n      // order exist debts by health factor: lowest health factor is most problematic, such positions should be first\n      AppUtils._sortAsc(0, countDebts_, orderBy, indices);\n\n      for (uint i; i < count_; i = AppUtils.uncheckedInc(i)) {\n        uint index = indices[i];\n        converters[i] = data_[index].converter;\n        collateralAmounts[i] = data_[index].collateralAmount;\n        borrowAmounts[i] = data_[index].amountToBorrow;\n        aprs18[i] = data_[index].apr18;\n      }\n    }\n\n    return (converters, collateralAmounts, borrowAmounts, aprs18);\n  }\n  //endregion ----------------------------------------------------- Find best pool for borrowing\n\n  //region ----------------------------------------------------- Find exist pool adapter to rebalance\n\n  /// @notice Enumerate {platformAdapters}, try to find exist pool adapters, calculate plans for new borrow.\n  ///         Each plan should make full/partial rebalance of the debt. Save results to {dest}.\n  ///         Reset to zero addresses of platform adapters for all found debts in {platformAdapters}.\n  /// @return count Total count of found pool adapters = count of plans saved to {dest}\n  /// @return needMore True if all found pool adapters are not able to use whole provided collateral,\n  ///                  so new lending platforms should be used in addition\n  function _findCandidatesForExistDebts(\n    IPlatformAdapter[] memory platformAdapters,\n    AppDataTypes.InputConversionParams memory p_,\n    InputParamsAdditional memory pa_,\n    BorrowCandidate[] memory dest,\n    address user_\n  ) internal view returns (\n    uint count,\n    bool needMore\n  ) {\n    FindCandidatesForExistDebtsLocal memory v;\n    v.minHealthFactor2 = pa_.controller.minHealthFactor2();\n\n    v.fullBorrowCounter = 0;\n    v.len = platformAdapters.length;\n    v.index;\n    while (v.index < v.len) {\n      address poolAdapter;\n      (v.index, poolAdapter, ) = _getExistValidPoolAdapter(\n        platformAdapters,\n        v.index,\n        user_,\n        p_.collateralAsset,\n        p_.borrowAsset,\n        pa_.borrowManager,\n        v.minHealthFactor2\n      );\n      if (poolAdapter != address(0)) {\n        (BorrowCandidate memory c, bool partialBorrow) = _findConversionStrategyForExistDebt(\n          IPoolAdapter(poolAdapter),\n          platformAdapters[v.index],\n          p_,\n          pa_\n        );\n        if (c.converter != address(0)) {\n          dest[count++] = c;\n          platformAdapters[v.index] = IPlatformAdapter(address(0)); // prevent using of this platform adapter in _findNewCandidates\n          if (!partialBorrow) {\n            v.fullBorrowCounter++;\n          }\n        }\n      }\n      v.index++;\n    }\n\n    return (count, v.fullBorrowCounter == 0);\n  }\n\n  /// @notice Try to find exist borrow for the given user\n  /// @param platformAdapters_ All currently active platform adapters\n  /// @param index0_ Start to search from the item of {platformAdapters} with the given index\n  /// @param user_ The user who tries to borrow {borrowAsset_} under {collateralAsset_}\n  /// @param minHealthFactor2 Min allowed health factor from controller\n  /// @return indexPlatformAdapter Index of the platform adapter to which the {poolAdapter} belongs.\n  ///                              The index indicates position of the platform adapter in {platformAdapters}.\n  ///                              Return platformAdapters.len if the pool adapter wasn't found.\n  /// @return poolAdapter First exist valid pool adapter found for the user-borrowAsset-collateralAsset\n  ///                     \"valid\" means that the pool adapter is not dirty and can be use for new borrows\n  /// @return healthFactor18 Current health factor of the pool adapter\n  function _getExistValidPoolAdapter(\n    IPlatformAdapter[] memory platformAdapters_,\n    uint index0_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    IBorrowManager borrowManager_,\n    uint16 minHealthFactor2\n  ) internal view returns (\n    uint indexPlatformAdapter,\n    address poolAdapter,\n    uint healthFactor18\n  ) {\n    uint len = platformAdapters_.length;\n\n    for (uint i = index0_; i < len; i = i.uncheckedInc()) {\n      address[] memory converters = platformAdapters_[i].converters();\n      for (uint j; j < converters.length; j = j.uncheckedInc()) {\n        poolAdapter = borrowManager_.getPoolAdapter(converters[j], user_, collateralAsset_, borrowAsset_);\n        if (poolAdapter != address(0)) {\n          (,, healthFactor18,,,) = IPoolAdapter(poolAdapter).getStatus();\n          ConverterLogicLib.HealthStatus status = ConverterLogicLib.getHealthStatus(healthFactor18, minHealthFactor2);\n          if (status != ConverterLogicLib.HealthStatus.DIRTY_1) {\n            return (i, poolAdapter, healthFactor18); // health factor > 1\n          } // we are inside a view function, so just skip dirty pool adapters\n        }\n      }\n    }\n\n    return (len, address(0), 0);\n  }\n\n  /// @notice Get plan for new borrow with rebalancing of exist borrow (in both directions)\n  /// @return dest Parameters of the conversion strategy\n  function _findConversionStrategyForExistDebt(\n    IPoolAdapter poolAdapter_,\n    IPlatformAdapter platformAdapter_,\n    AppDataTypes.InputConversionParams memory p_,\n    InputParamsAdditional memory pa_\n  ) internal view returns (\n    BorrowCandidate memory dest,\n    bool partialBorrow\n  ) {\n    (uint collateralAmount, uint amountToPay, uint healthFactor18,,,) = poolAdapter_.getStatus();\n\n    // check debt status, take amounts that are required to rebalance the debt (in both directions)\n    (, int collateralAmountToFix) = ConverterLogicLib.getRebalanceAmounts(\n      uint(pa_.targetHealthFactor2) * 1e16,\n      collateralAmount,\n      amountToPay,\n      healthFactor18\n    );\n\n    // the user already has a debt with same collateral+borrow assets\n    // so, we should use same pool adapter for new borrow AND rebalance exist debt in both directions if necessary\n    AppDataTypes.ConversionPlan memory plan = _getPlanWithRebalancing(\n      platformAdapter_,\n      p_,\n      pa_.targetHealthFactor2,\n      pa_.thresholds,\n      collateralAmountToFix\n    );\n\n    if (plan.converter != address(0)) {\n      partialBorrow = plan.maxAmountToBorrow == plan.amountToBorrow || plan.maxAmountToSupply == plan.collateralAmount;\n      dest = BorrowCandidate({\n        converter: plan.converter,\n        amountToBorrow: plan.amountToBorrow,\n        collateralAmount: plan.collateralAmount,\n        apr18: _getApr18(plan, pa_.rewardsFactor),\n        healthFactor18: healthFactor18\n      });\n    }\n\n    return (dest, partialBorrow);\n  }\n\n  /// @notice Get conversion plan to borrow required amount + to rebalance exist debt\n  /// @param platformAdapter_ Lending platform\n  /// @param p_ Params of the borrow\n  /// @param targetHealthFactor2_ Target health factor of the collateral asset\n  /// @param thresholds the maximum percentage by which the collateral amount can be changed\n  ///                   when rebalancing is made because of:\n  ///                   0: health factor is not healthy\n  ///                   1: health factor is unhealthy\n  ///                   Decimals are set by DENOMINATOR, so 50_000 means 0.5 or 50%\n  /// @param collateralAmountToFix_ Amount of collateral that is required by lending platform to rebalance exist debt.\n  ///                               Positive amount means, that the debt is unhealthy and we need to add more collateral to fix it.\n  ///                               Negative amount means, that the debt is too healthy (its health factor > target one)\n  ///                               and so we can use exist collateral to borrow more debt.\n  function _getPlanWithRebalancing(\n    IPlatformAdapter platformAdapter_,\n    AppDataTypes.InputConversionParams memory p_,\n    uint16 targetHealthFactor2_,\n    uint[2] memory thresholds,\n    int collateralAmountToFix_\n  ) internal view returns (\n    AppDataTypes.ConversionPlan memory plan\n  ) {\n    AppDataTypes.InputConversionParams memory input = AppDataTypes.InputConversionParams({\n      collateralAsset: p_.collateralAsset,\n      borrowAsset: p_.borrowAsset,\n      entryData: p_.entryData,\n      countBlocks: p_.countBlocks,\n      amountIn: p_.amountIn\n    });\n\n    uint entryKind = EntryKinds.getEntryKind(p_.entryData);\n    uint collateralDelta;\n\n    if (collateralAmountToFix_ != 0) {\n      // fix amountIn\n      if (entryKind == EntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0\n        || entryKind == EntryKinds.ENTRY_KIND_EXACT_PROPORTION_1\n      ) {\n        (input.amountIn, collateralDelta) = _fixCollateralAmount(input.amountIn, collateralAmountToFix_, true, thresholds);\n      }\n    }\n\n    plan = platformAdapter_.getConversionPlan(input, targetHealthFactor2_);\n\n    if (collateralAmountToFix_ != 0) {\n      // fix plan.collateralAmount\n      if (entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2) {\n        (plan.collateralAmount, ) = _fixCollateralAmount(plan.collateralAmount, collateralAmountToFix_, false, thresholds);\n      } else {\n        plan.collateralAmount = collateralAmountToFix_ < 0\n          ? AppUtils.sub0(plan.collateralAmount, collateralDelta)\n          : plan.collateralAmount + collateralDelta;\n      }\n    }\n\n    // take into account possible supply cap after fixing plan.collateralAmount\n    if (plan.collateralAmount > plan.maxAmountToSupply) {\n      plan.collateralAmount = plan.maxAmountToSupply;\n    }\n  }\n\n  /// @notice Calculate amount_ + delta_ with taking into account thresholds for positive/negative deltas\n  /// @dev This function doesn't take into account possible supply cap, result value should be checked and fixed outside\n  /// @param amount_ Collateral amount\n  /// @param delta_ Collateral amount should be incremented on delta_.\n  ///               Negative {delta_} means \"health factor is too healthy\" situation => we can reduce collateral\n  /// @param inputAmount true - we modify collateral amount before calculation of the borrow amount\n  ///                    false - we modify collateral amount after calculation of the borrow amount\n  /// @param thresholds the maximum percentage by which the collateral amount can be changed\n  ///                   when rebalancing is made because of:\n  ///                   0: health factor is not healthy\n  ///                   1: health factor is unhealthy\n  ///                   Decimals are set by DENOMINATOR, so 50_000 means 0.5 or 50%\n  /// @return fixedAmount amount_ + X, where X = delta_ reduced according to the thresholds\n  /// @return collateralDelta value of X, see comment above\n  function _fixCollateralAmount(uint amount_, int delta_, bool inputAmount, uint[2] memory thresholds) internal pure returns (\n    uint fixedAmount,\n    uint collateralDelta\n  ) {\n    bool tooHealthy = delta_ < 0;\n    collateralDelta = tooHealthy\n      ? uint(- delta_)\n      : uint(delta_);\n    uint maxAllowedDelta = amount_ * (\n      tooHealthy\n        ? thresholds[INDEX_TOO_HEALTHY]\n        : thresholds[INDEX_UNHEALTHY]\n    ) / DENOMINATOR;\n    if (collateralDelta > maxAllowedDelta) {\n      collateralDelta = maxAllowedDelta;\n    }\n    fixedAmount = tooHealthy == inputAmount\n      ? amount_ + collateralDelta\n      : amount_ - collateralDelta;\n  }\n\n  //endregion ----------------------------------------------------- Find exist pool adapter to rebalance\n\n  //region ----------------------------------------------------- Find new lending platforms to borrow\n  /// @notice Enumerate all pools suitable for borrowing and enough liquidity.\n  /// Assume, that currently the user doesn't have any debts with same collateral+borrow assets pair.\n  /// So, the function just finds all available possibilities.\n  ///\n  /// General explanation how max-target-amount is calculated in all pool adapters:\n  /// Health factor = HF [-], Collateral amount = C [USD]\n  /// Source amount that can be used for the collateral = SA [SA], Borrow amount = BS [USD]\n  /// Price of the source amount = PS [USD/SA] (1 [SA] = PS[USD])\n  /// Price of the target amount = PT [USD/TA] (1 [TA] = PT[USD])\n  /// Pool params: Collateral factor of the pool = PCF [-], Available cash in the pool = PTA [TA]\n  ///\n  /// C = SA * PS, BS = C / HF * PCF\n  /// Max target amount capable to be borrowed: ResultTA = BS / PT [TA].\n  /// We can use the pool only if ResultTA >= PTA >= required-target-amount\n  /// @param platformAdapters_ List of available platform adapters.\n  ///                         {startDestIndex} items are 0 in this list, they will be skipped.\n  /// @param startDestIndex_ Index of first available position in {dest_}\n  /// @param dest_ New position should be saved here starting from {startDestIndex} position\n  ///              The length of array is equal to the length of platformAdapters\n  /// @return totalCount Count of valid items in dest_, it must be >= startDestIndex\n  function _findNewCandidates(\n    IPlatformAdapter[] memory platformAdapters_,\n    uint startDestIndex_,\n    AppDataTypes.InputConversionParams memory p_,\n    InputParamsAdditional memory pa_,\n    BorrowCandidate[] memory dest_\n  ) internal view returns (\n    uint totalCount\n  ) {\n    totalCount = startDestIndex_;\n\n    uint len = platformAdapters_.length;\n\n    for (uint i; i < len; i = i.uncheckedInc()) {\n      if (address(platformAdapters_[i]) == address(0)) continue;\n\n      AppDataTypes.ConversionPlan memory plan = platformAdapters_[i].getConversionPlan(p_, pa_.targetHealthFactor2);\n\n      if (\n        plan.converter != address(0)\n        // check if we are able to supply required collateral\n        && plan.maxAmountToSupply > p_.amountIn\n        // take only the pool with enough liquidity\n        && plan.maxAmountToBorrow >= plan.amountToBorrow\n      ) {\n        dest_[totalCount++] = BorrowCandidate({\n          apr18: _getApr18(plan, pa_.rewardsFactor),\n          amountToBorrow: plan.amountToBorrow,\n          collateralAmount: plan.collateralAmount,\n          converter: plan.converter,\n          healthFactor18: 0\n        });\n      }\n    }\n  }\n  //endregion ----------------------------------------------------- Find new lending platforms to borrow\n\n  //region ----------------------------------------------------- Utils\n  /// @return Return APR with decimals 18. Positive value means cost, negative - income.\n  function _getApr18(AppDataTypes.ConversionPlan memory plan_, uint rewardsFactor_) internal pure returns (int) {\n    // combine all costs and incomes and calculate result APR. Rewards are taken with the given weight.\n    // Positive value means cost, negative - income\n    // APR = (cost - income) / collateralAmount, decimals 18, all amounts are given in terms of borrow asset.\n    //\n    // SCB-824: Rewards are not able to reduce borrowCost more than on the value borrowCost36 * rewardsFactor_\n    int income = int(plan_.supplyIncomeInBorrowAsset36)\n      + int(Math.min(\n        plan_.rewardsAmountInBorrowAsset36,\n        plan_.borrowCost36 * rewardsFactor_ / REWARDS_FACTOR_DENOMINATOR_18\n      ));\n\n    return (int(plan_.borrowCost36) - income) * int(1e18) / int(plan_.amountCollateralInBorrowAsset36);\n  }\n\n  //endregion ----------------------------------------------------- Utils\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/libs/ConverterLogicLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IBorrowManager.sol\";\nimport \"../interfaces/IPoolAdapter.sol\";\n\n/// @notice TetuConverter-app logic-related utils\nlibrary ConverterLogicLib {\n  enum HealthStatus {\n    /// @notice Healthy (normal), threshold < health factor. It's ok to make new borrow using the pool adapter\n    NORMAL_0,\n    /// @notice Unhealthy, health factor < 1. It means that liquidation happens and the pool adapter is not usable.\n    DIRTY_1,\n    /// @notice Unhealthy, 1 < health factor < threshold. It means, that rebalance is required ASAP\n    REBALANCE_REQUIRED_2\n  }\n\n  /// @notice Get borrow/collateral amount required to rebalance and move {healthFactor18} => {targetHealthFactor18}\n  ///         Results amount will be negative if healthFactor18 > targetHealthFactor18\n  ///         and so we need to make additional borrow for the exist collateral.\n  /// @param targetHealthFactor18 Health factor of collateral asset, decimals 18\n  /// @param collateralAmount Current collateral amount of the given pool adapter\n  /// @param amountToPay Current debts amount of the given pool adapter\n  /// @param healthFactor18 Current health factor of the given pool adapter\n  /// @return requiredBorrowAssetAmount Amount of borrow asset required for rebalancing\n  ///        Positive amount means, that this amount should be send to the pool adapter to restore health to the target factor\n  ///        Negative amount means, that is can be borrowed in addition without adding new collateral.\n  /// @return requiredCollateralAssetAmount Amount of collateral asset required for rebalancing.\n  ///        Positive amount means, that such amount should be send to the pool adapter to restore health to the target factor\n  ///        Negative amount means, that such collateral amount can be redeemed from the lending platform without repay\n  function getRebalanceAmounts(\n    uint targetHealthFactor18,\n    uint collateralAmount,\n    uint amountToPay,\n    uint healthFactor18\n  ) internal pure returns (\n    int requiredBorrowAssetAmount,\n    int requiredCollateralAssetAmount\n  ) {\n    // If full liquidation happens we will have collateralAmount = 0 and amountToPay > 0\n    // In this case the open position should be just closed (we lost all collateral)\n    // We cannot do it here because it's read-only function.\n    // We should call a IKeeperCallback in the same way as for rebalancing, but with requiredAmountCollateralAsset=0\n\n    // Health Factor = Collateral Factor * CollateralAmount * Price_collateral / (BorrowAmount * Price_borrow)\n    // => requiredAmountBorrowAsset = BorrowAmount * (HealthFactorCurrent/HealthFactorTarget - 1)\n    // => requiredAmountCollateralAsset = CollateralAmount * (HealthFactorTarget/HealthFactorCurrent - 1)\n    requiredBorrowAssetAmount = (int(amountToPay) - int(amountToPay * healthFactor18 / targetHealthFactor18));\n    requiredCollateralAssetAmount = (int(collateralAmount * targetHealthFactor18 / healthFactor18) - int(collateralAmount));\n  }\n\n  /// @notice Check health of the given pool adapter\n  /// @param requiredBorrowAssetAmount Amount of borrow asset that should be send to the pool adapter to restore health to the target factor\n  /// @param requiredCollateralAssetAmount Amount of collateral asset that should be send to the pool adapter to restore health to the target factor\n  function checkPositionHealth(IPoolAdapter pa, IBorrowManager borrowManager, uint minHealthFactor18) internal view returns (\n    uint requiredBorrowAssetAmount,\n    uint requiredCollateralAssetAmount\n  ) {\n    (,,address collateralAsset,) = pa.getConfig();\n    uint healthFactorTarget18 = uint(borrowManager.getTargetHealthFactor2(collateralAsset)) * 10 ** (18 - 2);\n\n    (uint collateralAmount, uint amountToPay, uint healthFactor18,,,) = pa.getStatus();\n\n    if (_isPositionUnhealthy(healthFactor18, healthFactorTarget18, minHealthFactor18)) {\n      (int borrow, int collateral) = getRebalanceAmounts(healthFactorTarget18, collateralAmount, amountToPay, healthFactor18);\n      // if borrow/collateral amounts are negative\n      // it means, that we can borrow additional amount without adding new collateral\n      // there are no problems with the health in this case\n      return (borrow > 0 ? uint(borrow) : 0, collateral > 0 ? uint(collateral) : 0);\n    } else {\n      return (requiredBorrowAssetAmount, requiredCollateralAssetAmount);\n    }\n  }\n\n  /// @notice Check health status of the pool adapter\n  /// @param healthFactor18 Current health factor of the pool adapter, decimals 18\n  /// @param minHealthFactor2 Min allowed health factor, decimals 2\n  /// @return HealthStatus Health status of the pool adapter\n  function getHealthStatus(uint healthFactor18, uint16 minHealthFactor2) internal pure returns (HealthStatus) {\n    if (healthFactor18 < 1e18) {\n      // the pool adapter is unhealthy, we should mark it as dirty and create new pool adapter for the borrow\n      return HealthStatus.DIRTY_1;\n    } else if (healthFactor18 <= (uint(minHealthFactor2) * 10 ** (18 - 2))) {\n      // the pool adapter is unhealthy, a rebalance is required ASAP to prevent the liquidation\n      return HealthStatus.REBALANCE_REQUIRED_2;\n    }\n\n    return HealthStatus.NORMAL_0;\n  }\n\n  /// @notice Check if the position is unhealthy\n  /// @param healthFactor Current health factor of the pool adapter\n  /// @param targetHealthFactor Target health factor of the collateral asset of the given pool adapter\n  /// @param minHealthFactor Min allowed health factor\n  function _isPositionUnhealthy(uint healthFactor, uint targetHealthFactor, uint minHealthFactor) internal pure returns (bool) {\n    targetHealthFactor; // hide warning\n    return healthFactor < minHealthFactor;\n  }\n}"
    },
    "@tetu_io/tetu-converter/contracts/libs/EntryKinds.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./AppDataTypes.sol\";\nimport \"./AppErrors.sol\";\n\n/// @notice Utils and constants related to entryKind param of ITetuConverter.findBorrowStrategy\nlibrary EntryKinds {\n  /// @notice Amount of collateral is fixed. Amount of borrow should be max possible.\n  uint constant public ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0 = 0;\n\n  /// @notice Split provided source amount S on two parts: C1 and C2 (C1 + C2 = S)\n  ///         C2 should be used as collateral to make a borrow B.\n  ///         Results amounts of C1 and B (both in terms of USD) must be in the given proportion\n  uint constant public ENTRY_KIND_EXACT_PROPORTION_1 = 1;\n\n  /// @notice Borrow given amount using min possible collateral\n  uint constant public ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2 = 2;\n\n\n  /// @notice Decode entryData, extract first uint - entry kind\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\n    if (entryData_.length == 0) {\n      return ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0;\n    }\n    return abi.decode(entryData_, (uint));\n  }\n\n  /// @notice Use {collateralAmount} as a collateral to receive max available {amountToBorrowOut}\n  ///         for the given {healthFactor18} and {liquidationThreshold18}\n  /// @param collateralAmount Available collateral amount\n  /// @param healthFactor18 Required health factor, decimals 18\n  /// @param liquidationThreshold18 Liquidation threshold of the selected landing platform, decimals 18\n  /// @param priceDecimals36 True if the prices in {pd} have decimals 36 (DForce, HundredFinance)\n  ///                        In this case, we can have overloading if collateralAmount is high enough,\n  ///                        so we need a special logic to avoid it\n  function exactCollateralInForMaxBorrowOut(\n    uint collateralAmount,\n    uint healthFactor18,\n    uint liquidationThreshold18,\n    AppDataTypes.PricesAndDecimals memory pd,\n    bool priceDecimals36\n  ) internal pure returns (\n    uint amountToBorrowOut\n  ) {\n    if (priceDecimals36) {\n      amountToBorrowOut =\n        1e18 * collateralAmount / healthFactor18\n        * (liquidationThreshold18 * pd.priceCollateral / pd.priceBorrow) // avoid overloading\n        * pd.rb10powDec\n        / 1e18\n        / pd.rc10powDec;\n    } else {\n      amountToBorrowOut =\n        1e18 * collateralAmount / healthFactor18\n        * liquidationThreshold18 * pd.priceCollateral / pd.priceBorrow\n        * pd.rb10powDec\n        / 1e18\n        / pd.rc10powDec;\n    }\n  }\n\n  /// @notice Borrow given {borrowAmount} using min possible collateral\n  /// @param borrowAmount Required amount to borrow\n  /// @param healthFactor18 Required health factor, decimals 18\n  /// @param liquidationThreshold18 Liquidation threshold of the selected landing platform, decimals 18\n  /// @param priceDecimals36 True if the prices in {pd} have decimals 36 (DForce, HundredFinance)\n  ///                        In this case, we can have overloading if collateralAmount is high enough,\n  ///                        so we need a special logic to avoid it\n  function exactBorrowOutForMinCollateralIn(\n    uint borrowAmount,\n    uint healthFactor18,\n    uint liquidationThreshold18,\n    AppDataTypes.PricesAndDecimals memory pd,\n    bool priceDecimals36\n  ) internal pure returns (\n    uint amountToCollateralOut\n  ) {\n    if (priceDecimals36) {\n      amountToCollateralOut = borrowAmount\n        * pd.priceBorrow / pd.priceCollateral\n        * healthFactor18 / liquidationThreshold18\n        * pd.rc10powDec\n        / pd.rb10powDec;\n    } else {\n      amountToCollateralOut = borrowAmount\n        * healthFactor18\n        * pd.priceBorrow / (liquidationThreshold18 * pd.priceCollateral)\n        * pd.rc10powDec\n        / pd.rb10powDec;\n    }\n  }\n\n  /// @notice Split {collateralAmount} on two parts: C1 and {collateralAmountOut}.\n  ///         {collateralAmountOut} will be used as collateral to borrow {amountToBorrowOut}.\n  ///         Result cost of {amountToBorrowOut} and C1 should be equal or almost equal.\n  /// @param collateralAmount Available collateral amount, we should use less amount.\n  /// @param healthFactor18 Required health factor, decimals 18\n  /// @param liquidationThreshold18 Liquidation threshold of the selected landing platform, decimals 18\n  /// @param priceDecimals36 True if the prices in {pd} have decimals 36 (DForce, HundredFinance)\n  ///                        In this case, we can have overloading if collateralAmount is high enough,\n  ///                        so we need a special logic to avoid it\n  /// @param entryData Additional encoded data: required proportions of C1' and {amountToBorrowOut}', X:Y\n  ///                  Encoded data: (uint entryKind, uint X, uint Y)\n  ///                  X - portion of C1, Y - portion of {amountToBorrowOut}\n  ///                  2:1 means, that we will have 2 parts of source asset and 1 part of borrowed asset in result.\n  ///                  entryKind must be equal to 1 (== ENTRY_KIND_EQUAL_COLLATERAL_AND_BORROW_OUT_1)\n  function exactProportion(\n    uint collateralAmount,\n    uint healthFactor18,\n    uint liquidationThreshold18,\n    AppDataTypes.PricesAndDecimals memory pd,\n    bytes memory entryData,\n    bool priceDecimals36\n  ) internal pure returns (\n    uint collateralAmountOut,\n    uint amountToBorrowOut\n  ) {\n    collateralAmountOut = getCollateralAmountToConvert(\n      entryData,\n      collateralAmount,\n      healthFactor18,\n      liquidationThreshold18\n    );\n    amountToBorrowOut = exactCollateralInForMaxBorrowOut(\n      collateralAmountOut,\n      healthFactor18,\n      liquidationThreshold18,\n      pd,\n      priceDecimals36\n    );\n  }\n\n  /// @notice Split {sourceAmount_} on two parts: C1 and C2. Swap C2 => {targetAmountOut}\n  ///         Result cost of {targetAmountOut} and C1 should be equal or almost equal\n  function getCollateralAmountToConvert(\n    bytes memory entryData,\n    uint collateralAmount,\n    uint healthFactor18,\n    uint liquidationThreshold18\n  ) internal pure returns (\n    uint collateralAmountOut\n  ) {\n    // C = C1 + C2, HF = healthFactor18, LT = liquidationThreshold18\n    // C' = C1' + C2' where C' is C recalculated to USD\n    // C' = C * PC / DC, where PC is price_C, DC = 10**decimals_C\n    // Y*B' = X*(C' - C1')*LT/HF ~ C1` => C1' = C' * a / (1 + a), C2' = C' / (1 + a)\n    // where a = (X * LT)/(HF * Y)\n\n    (, uint x, uint y) = abi.decode(entryData, (uint, uint, uint));\n    require(x != 0 && y != 0, AppErrors.ZERO_VALUE_NOT_ALLOWED);\n\n    uint a = (x * liquidationThreshold18 * 1e18) / (healthFactor18 * y);\n    return collateralAmount * 1e18 / (1e18 + a);\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/libs/SlotsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\n/// @author bogdoslav\nlibrary SlotsLib {\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant SLOT_LIB_VERSION = \"1.0.0\";\n\n  // ************* GETTERS *******************\n\n  /// @dev Gets a slot as bytes32\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  /// @dev Gets a slot as an address\n  function getAddress(bytes32 slot) internal view returns (address result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  /// @dev Gets a slot as uint256\n  function getUint(bytes32 slot) internal view returns (uint result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  // ************* ARRAY GETTERS *******************\n\n  /// @dev Gets an array length\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  /// @dev Gets a slot array by index as address\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      result := sload(pointer)\n    }\n  }\n\n  /// @dev Gets a slot array by index as uint\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function uintAt(bytes32 slot, uint index) internal view returns (uint result) {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      result := sload(pointer)\n    }\n  }\n\n  // ************* SETTERS *******************\n\n  /// @dev Sets a slot with bytes32\n  /// @notice Check address for 0 at the setter\n  function set(bytes32 slot, bytes32 value) internal {\n    assembly {\n      sstore(slot, value)\n    }\n  }\n\n  /// @dev Sets a slot with address\n  /// @notice Check address for 0 at the setter\n  function set(bytes32 slot, address value) internal {\n    assembly {\n      sstore(slot, value)\n    }\n  }\n\n  /// @dev Sets a slot with uint\n  function set(bytes32 slot, uint value) internal {\n    assembly {\n      sstore(slot, value)\n    }\n  }\n\n  // ************* ARRAY SETTERS *******************\n\n  /// @dev Sets a slot array at index with address\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function setAt(bytes32 slot, uint index, address value) internal {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      sstore(pointer, value)\n    }\n  }\n\n  /// @dev Sets a slot array at index with uint\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function setAt(bytes32 slot, uint index, uint value) internal {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      sstore(pointer, value)\n    }\n  }\n\n  /// @dev Sets an array length\n  function setLength(bytes32 slot, uint length) internal {\n    assembly {\n      sstore(slot, length)\n    }\n  }\n\n  /// @dev Pushes an address to the array\n  function push(bytes32 slot, address value) internal {\n    uint length = arrayLength(slot);\n    setAt(slot, length, value);\n    setLength(slot, length + 1);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/libs/SwapLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./AppErrors.sol\";\nimport \"../openzeppelin/IERC20Metadata.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\n\n/// @notice Various swap-related routines\nlibrary SwapLib {\n  uint public constant PRICE_IMPACT_NUMERATOR = 100_000;\n  uint public constant PRICE_IMPACT_TOLERANCE_DEFAULT = PRICE_IMPACT_NUMERATOR * 2 / 100; // 2%\n\n\n  /// @notice Convert amount of {assetIn_} to the corresponded amount of {assetOut_} using price oracle prices\n  /// @return Result amount in terms of {assetOut_}\n  function convertUsingPriceOracle(\n    IPriceOracle priceOracle_,\n    address assetIn_,\n    uint amountIn_,\n    address assetOut_\n  ) internal view returns (uint) {\n    uint priceOut = priceOracle_.getAssetPrice(assetOut_);\n    uint priceIn = priceOracle_.getAssetPrice(assetIn_);\n    require(priceOut != 0 && priceIn != 0, AppErrors.ZERO_PRICE);\n\n    return amountIn_\n      * 10**IERC20Metadata(assetOut_).decimals()\n      * priceIn\n      / priceOut\n      / 10**IERC20Metadata(assetIn_).decimals();\n  }\n\n  /// @notice Check if {amountOut_} is less than expected more than allowed by {priceImpactTolerance_}\n  ///         Expected amount is calculated using embedded price oracle.\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\n  function isConversionValid(\n    IPriceOracle priceOracle_,\n    address assetIn_,\n    uint amountIn_,\n    address assetOut_,\n    uint amountOut_,\n    uint priceImpactTolerance_\n  ) internal view returns (bool) {\n    uint priceOut = priceOracle_.getAssetPrice(assetOut_);\n    uint priceIn = priceOracle_.getAssetPrice(assetIn_);\n    require(priceOut != 0 && priceIn != 0, AppErrors.ZERO_PRICE);\n\n    uint expectedAmountOut = amountIn_\n      * 10**IERC20Metadata(assetOut_).decimals()\n      * priceIn\n      / priceOut\n      / 10**IERC20Metadata(assetIn_).decimals();\n    return amountOut_ > expectedAmountOut\n      ? true // we assume here, that higher output amount is not a problem\n      : (expectedAmountOut - amountOut_) <= expectedAmountOut * priceImpactTolerance_ / SwapLib.PRICE_IMPACT_NUMERATOR;\n  }\n}"
    },
    "@tetu_io/tetu-converter/contracts/libs/TetuConverterLogicLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./AppErrors.sol\";\nimport \"./AppUtils.sol\";\nimport \"./SwapLib.sol\";\nimport \"./ConverterLogicLib.sol\";\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/IERC20Metadata.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../interfaces/IBorrowManager.sol\";\nimport \"../interfaces/IDebtMonitor.sol\";\nimport \"../interfaces/IPoolAdapter.sol\";\nimport \"../interfaces/IConverterController.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\nimport \"../interfaces/ITetuConverterCallback.sol\";\nimport \"../integrations/tetu/ITetuLiquidator.sol\";\n\n/// @notice TetuConverter-contract logic-related functions (The lib is necessary to reduce contract size)\nlibrary TetuConverterLogicLib {\n  using SafeERC20 for IERC20;\n\n//#region ------------------------------------------------- Constants\n  uint constant internal DEBT_GAP_DENOMINATOR = 100_000;\n  /// @dev Absolute value of debt-gap-addon for any token\n  /// @notice A value of the debt gap, calculate using debt-gap percent, cannot be less than the following\n  uint internal constant MIN_DEBT_GAP_ADDON = 10;\n//#endregion ------------------------------------------------- Constants\n\n//#region ------------------------------------------------- Data types\n  struct RepayTheBorrowParams {\n    IPoolAdapter pa;\n    uint balanceBefore;\n    bool skipRepay;\n    address[] assets;\n    uint[] amounts;\n    address user;\n    address collateralAsset;\n    address borrowAsset;\n  }\n\n  /// @dev We need to combine local params to struct to avoid stack too deep in coverage\n  struct RequireRepayParams {\n    address user;\n    address collateralAsset;\n    uint amountToPay;\n    bool skipRepay;\n    uint amount;\n  }\n\n//#endregion ------------------------------------------------- Data types\n\n//#region ------------------------------------------------- Events\n  event OnRequireRepayCloseLiquidatedPosition(address poolAdapter, uint statusAmountToPay);\n  event OnRequireRepayRebalancing(address poolAdapter, uint amount, bool isCollateral, uint statusAmountToPay, uint healthFactorAfterRepay18);\n  event OnSafeLiquidate(address sourceToken, uint sourceAmount, address targetToken, address receiver, uint outputAmount);\n  event OnRepayTheBorrow(address poolAdapter, uint collateralOut, uint repaidAmountOut);\n//#endregion ------------------------------------------------- Events\n\n//#region ------------------------------------------------- IKeeperCallback\n  /// @notice This function is called by a keeper if there is unhealthy borrow\n  ///         The called contract should send either collateral-amount or borrowed-amount to TetuConverter\n  /// @param requiredBorrowedAmount_ The borrower should return given borrowed amount back to TetuConverter\n  ///                                in order to restore health factor to target value\n  /// @param requiredCollateralAmount_ The borrower should send given amount of collateral to TetuConverter\n  ///                                  in order to restore health factor to target value\n  /// @param poolAdapter_ Address of the pool adapter that has problem health factor\n  function requireRepay(\n    IConverterController controller_,\n    uint requiredBorrowedAmount_,\n    uint requiredCollateralAmount_,\n    address poolAdapter_\n  ) external {\n    RequireRepayParams memory p;\n\n    IPoolAdapter pa = IPoolAdapter(poolAdapter_);\n    (, p.user, p.collateralAsset,) = pa.getConfig();\n    pa.updateStatus();\n    (, p.amountToPay,,,,) = pa.getStatus();\n\n    if (requiredCollateralAmount_ == 0) {\n      // Full liquidation happens, we have lost all collateral amount\n      // We need to close the position as is and drop away the pool adapter without paying any debt\n      IDebtMonitor(IConverterController(controller_).debtMonitor()).closeLiquidatedPosition(address(pa));\n      emit OnRequireRepayCloseLiquidatedPosition(address(pa), p.amountToPay);\n    } else {\n      // rebalancing\n      // we assume here, that requiredBorrowedAmount_ should be less than amountToPay even if it includes the debt-gap\n      require(p.amountToPay != 0 && requiredBorrowedAmount_ < p.amountToPay, AppErrors.REPAY_TO_REBALANCE_NOT_ALLOWED);\n\n      // for definiteness ask the user to send us collateral asset\n      (p.skipRepay, p.amount) = _requirePayAmountBackToRebalance(\n        ITetuConverterCallback(p.user),\n        pa,\n        p.collateralAsset,\n        requiredCollateralAmount_,\n        IBorrowManager(controller_.borrowManager()),\n        uint(controller_.minHealthFactor2()) * 10 ** (18 - 2)\n      );\n\n      if (! p.skipRepay) {\n        uint resultHealthFactor18 = pa.repayToRebalance(p.amount, true);\n        emit OnRequireRepayRebalancing(address(pa), p.amount, true, p.amountToPay, resultHealthFactor18);\n      }\n    }\n  }\n\n  /// @notice Ask user (a strategy) to transfer {amount_} of {asset_} on the converter balance to restore health status of {pa}\n  /// @dev Call user_.requirePayAmountBack one or two times\n  /// @param user_ The strategy - owner of the {pa_}\n  /// @param pa_ Pool adapter with the debt that should be rebalanced\n  /// @param asset_ Collateral asset of pa\n  /// @param amount_ Amount required by {pa_} to rebalance the debt\n  /// @return skipRepay Repay is not required anymore because the borrow was closed\n  ///                   (or its health factor was restored to healthy value)\n  ///                   during receiving requested amount on the user's side\n  /// @return amountToPay What amount of collateral was received from the user\n  function _requirePayAmountBackToRebalance(\n    ITetuConverterCallback user_,\n    IPoolAdapter pa_,\n    address asset_,\n    uint amount_,\n    IBorrowManager borrowManager_,\n    uint healthFactorThreshold18\n  ) internal returns (\n    bool skipRepay,\n    uint amountToPay\n  ) {\n    (uint amountReturnedByUser, uint amountReceivedOnBalance) = _callRequirePayAmountBack(user_, asset_, amount_);\n\n    // The results of calling requirePayAmountBack depend on whether the required amount is on the user's balance:\n    // 1. The {amount_} exists on the balance\n    //    User sends the amount to TetuConverter, returns {amount_}\n    // 2. The {amount_} doesn't exist on the balance.\n    //    User tries to receive {amount_} and sends {amount_*} (it's probably less than original {amount_}\n    //    that converter can claims by next call of requirePayAmountBack\n    if (amountReceivedOnBalance == 0) {\n      // case 2: the {amount_} didn't exist on balance. We should claim amountReturnedByUser by second call\n\n      // strategy cas received some amount on balance\n      // it means that it probably has closed some debts\n      // there is a chance that {pa_} doesn't require rebalancing anymore or require less amount\n      // check what amount is required by {pa_} now\n      (, uint requiredCollateralToPay) = ConverterLogicLib.checkPositionHealth(pa_, borrowManager_, healthFactorThreshold18);\n\n      if (requiredCollateralToPay == 0) {\n        skipRepay = true;\n      } else {\n        require(amountReturnedByUser != 0, AppErrors.ZERO_AMOUNT); // user has any assets to send to converter\n        (amountReturnedByUser, amountReceivedOnBalance) = _callRequirePayAmountBack(\n          user_,\n          asset_,\n          Math.min(amountReturnedByUser, requiredCollateralToPay)\n        );\n      }\n    }\n\n    // ensure that we have received any amount .. and use it for repayment\n    // probably we've received less then expected - it's ok, just let's use as much as possible\n    // DebtMonitor will ask to make rebalancing once more if necessary\n    require(\n      (skipRepay || amountReceivedOnBalance != 0) // user didn't send promised assets\n      && (amountReceivedOnBalance <= amount_), // we can receive less amount (partial rebalancing)\n      AppErrors.WRONG_AMOUNT_RECEIVED\n    );\n\n    return (skipRepay, amountReceivedOnBalance);\n  }\n\n  function _callRequirePayAmountBack(ITetuConverterCallback user_, address asset_, uint amount_) internal returns (\n    uint amountReturnedByUser,\n    uint amountReceivedOnBalance\n  ) {\n    uint balanceBefore = IERC20(asset_).balanceOf(address(this));\n    amountReturnedByUser = user_.requirePayAmountBack(asset_, amount_);\n    uint balanceAfter = IERC20(asset_).balanceOf(address(this));\n\n    require(balanceAfter >= balanceBefore, AppErrors.WEIRD_OVERFLOW);\n    amountReceivedOnBalance = balanceAfter - balanceBefore;\n  }\n//#endregion ------------------------------------------------- IKeeperCallback\n\n//#region ------------------------------------------------- repayTheBorrow\n\n  /// @notice Close given borrow and return collateral back to the user, governance only\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\n  /// @param poolAdapter_ The pool adapter that represents the borrow\n  /// @param closePosition Close position after repay\n  ///        Usually it should be true, because the function always tries to repay all debt\n  ///        false can be used if user doesn't have enough amount to pay full debt\n  ///              and we are trying to pay \"as much as possible\"\n  /// @return collateralAmountOut Amount of collateral returned to the user\n  /// @return repaidAmountOut Amount of borrow asset paid to the lending platform\n  function repayTheBorrow(\n    IConverterController controller_,\n    address poolAdapter_,\n    bool closePosition\n  ) external returns (\n    uint collateralAmountOut,\n    uint repaidAmountOut\n  ) {\n    RepayTheBorrowParams memory v;\n\n    // update internal debts and get actual amount to repay\n    v.pa = IPoolAdapter(poolAdapter_);\n    (,v.user, v.collateralAsset, v.borrowAsset) = v.pa.getConfig();\n    v.pa.updateStatus();\n\n    // add debt gap if necessary\n    {\n      bool debtGapRequired;\n      (collateralAmountOut, repaidAmountOut,,,, debtGapRequired) = v.pa.getStatus();\n      if (debtGapRequired) {\n        repaidAmountOut = getAmountWithDebtGap(repaidAmountOut, controller_.debtGap());\n      }\n    }\n    require(collateralAmountOut != 0 && repaidAmountOut != 0, AppErrors.REPAY_FAILED);\n\n    // ask the user for the amount-to-repay; use exist balance for safety, normally it should be 0\n    v.balanceBefore = IERC20(v.borrowAsset).balanceOf(address(this));\n\n    // for definiteness ask the user to send us collateral asset\n    (v.skipRepay, repaidAmountOut) = _requirePayAmountBackToClosePosition(\n      ITetuConverterCallback(v.user),\n      v.pa,\n      v.borrowAsset,\n      repaidAmountOut - v.balanceBefore,\n      controller_.debtGap()\n    );\n\n    if (! v.skipRepay) {\n      uint balanceAfter = IERC20(v.borrowAsset).balanceOf(address(this));\n\n      // ensure that we have received required amount fully or partially\n      if (closePosition) {\n        require(balanceAfter >= v.balanceBefore + repaidAmountOut, AppErrors.WRONG_AMOUNT_RECEIVED);\n      } else {\n        require(balanceAfter > v.balanceBefore, AppErrors.ZERO_BALANCE);\n        repaidAmountOut = balanceAfter - v.balanceBefore;\n      }\n\n      // make full repay and close the position\n      v.balanceBefore = IERC20(v.borrowAsset).balanceOf(v.user);\n      collateralAmountOut = v.pa.repay(repaidAmountOut, v.user, closePosition);\n      emit OnRepayTheBorrow(poolAdapter_, collateralAmountOut, repaidAmountOut);\n      balanceAfter = IERC20(v.borrowAsset).balanceOf(v.user);\n\n      v.assets = new address[](2);\n      v.assets[0] = v.borrowAsset;\n      v.assets[1] = v.collateralAsset;\n\n      v.amounts = new uint[](2);\n      // repay is able to return small amount of borrow-asset back to the user, we should pass it to onTransferAmounts\n      v.amounts[0] = balanceAfter > v.balanceBefore ? balanceAfter - v.balanceBefore : 0;\n      if (v.amounts[0] > 0) { // exclude returned part of the debt gap from repaidAmountOut\n        repaidAmountOut = repaidAmountOut > v.amounts[0]\n          ? repaidAmountOut - v.amounts[0]\n          : 0;\n      }\n      v.amounts[1] = collateralAmountOut;\n      ITetuConverterCallback(v.user).onTransferAmounts(v.assets, v.amounts);\n\n      return (collateralAmountOut, repaidAmountOut);\n    } else {\n      return (0, 0);\n    }\n  }\n\n  /// @notice Ask user (a strategy) to transfer {amount_} of {asset_} on converter balance\n  ///         to be able to close the position\n  /// @dev Call user_.requirePayAmountBack one or two times\n  /// @param user_ The strategy - owner of the {pa_}\n  /// @param pa_ Pool adapter which debt should be closed\n  /// @param asset_ Borrowed asset of the {pa}\n  /// @param amount_ Amount required by {pa_} to rebalance the debt\n  /// @return skipRepay Repay is not required anymore because the borrow was completely closed\n  ///                   during receiving requested amount on the user's side\n  ///                   or because it was liquidated (collateral amount is zero)\n  /// @return amountToPay What amount of borrow asset was received from the user\n  function _requirePayAmountBackToClosePosition(\n    ITetuConverterCallback user_,\n    IPoolAdapter pa_,\n    address asset_,\n    uint amount_,\n    uint debtGap\n  ) internal returns (\n    bool skipRepay,\n    uint amountToPay\n  ) {\n    (uint amountReturnedByUser, uint amountReceivedOnBalance) = _callRequirePayAmountBack(user_, asset_, amount_);\n\n    // The results of calling requirePayAmountBack depend on whether the required amount is on the user's balance:\n    // 1. The {amount_} exists on the balance\n    //    User sends the amount to TetuConverter, returns {amount_}\n    // 2. The {amount_} doesn't exist on the balance.\n    //    User tries to receive {amount_} and sends {amount_*} (it's probably less than original {amount_}\n    //    that converter can claims by next call of requirePayAmountBack\n    if (amountReceivedOnBalance == 0) {\n      // case 2: the {amount_} didn't exist on balance. We should claim amountReturnedByUser by second call\n\n      // strategy cas received some amount on balance\n      // it means that it probably has closed some debts\n      // there is a chance that {pa_} doesn't require rebalancing anymore or require less amount\n      // check what amount is required by {pa_} now\n      (uint collateralAmount, uint debtAmount,,,, bool debtGapRequired) = pa_.getStatus();\n      if (debtGapRequired) {\n        debtAmount = getAmountWithDebtGap(debtAmount, debtGap);\n      }\n\n      if (collateralAmount == 0) {\n        skipRepay = true; // debt is closed or liquidated\n      } else {\n        require(amountReturnedByUser != 0, AppErrors.ZERO_AMOUNT); // user has any assets to send to converter\n        (, amountReceivedOnBalance) = _callRequirePayAmountBack(\n          user_,\n          asset_,\n          Math.min(amountReturnedByUser, debtAmount)\n        );\n      }\n    }\n\n    // ensure that we have received any amount .. and use it for repayment\n    // probably we've received less then expected - it's ok, just let's use as much as possible\n    // DebtMonitor will ask to make rebalancing once more if necessary\n    require(\n      (skipRepay || amountReceivedOnBalance != 0) // user didn't send promised assets\n      && (amountReceivedOnBalance <= amount_), // we can receive less amount (partial rebalancing)\n      AppErrors.WRONG_AMOUNT_RECEIVED\n    );\n\n    return (skipRepay, amountReceivedOnBalance);\n  }\n//#endregion ------------------------------------------------- repayTheBorrow\n\n//#region ------------------------------------------------- Safe liquidation\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\n  ///                      It should be transferred on balance of the TetuConverter before the function call\n  /// @param receiver_ Result amount will be sent to this address\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\n  function safeLiquidate(\n    IConverterController controller_,\n    address assetIn_,\n    uint amountIn_,\n    address assetOut_,\n    address receiver_,\n    uint priceImpactToleranceSource_,\n    uint priceImpactToleranceTarget_\n  ) external returns (\n    uint amountOut\n  ) {\n    ITetuLiquidator tetuLiquidator = ITetuLiquidator(controller_.tetuLiquidator());\n    uint targetTokenBalanceBefore = IERC20(assetOut_).balanceOf(address(this));\n\n    IERC20(assetIn_).safeApprove(address(tetuLiquidator), amountIn_);\n    tetuLiquidator.liquidate(assetIn_, assetOut_, amountIn_, priceImpactToleranceSource_);\n\n    amountOut = IERC20(assetOut_).balanceOf(address(this)) - targetTokenBalanceBefore;\n    IERC20(assetOut_).safeTransfer(receiver_, amountOut);\n\n    require(  // The result amount shouldn't be too different from the value calculated directly using price oracle prices\n      SwapLib.isConversionValid(IPriceOracle(controller_.priceOracle()), assetIn_, amountIn_, assetOut_, amountOut, priceImpactToleranceTarget_),\n      AppErrors.TOO_HIGH_PRICE_IMPACT\n    );\n    emit OnSafeLiquidate(assetIn_, amountIn_, assetOut_, receiver_, amountOut);\n  }\n//#endregion ------------------------------------------------- Safe liquidation\n\n  //region ----------------------------------------------------- Utils\n  /// @notice Add {debtGap} to the {amount}\n  /// @param debtGap debt-gap percent [0..1), decimals DEBT_GAP_DENOMINATOR\n  function getAmountWithDebtGap(uint amount, uint debtGap) public pure returns (uint) {\n    // Real value of debt gap in AAVE can be very low but it's greater than zero\n    // so, even if the amount is very low, the result debt gap addon must be greater than zero\n    // we assume here, that it should be not less than MIN_DEBT_GAP_ADDON\n    return Math.max(amount * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR, amount + MIN_DEBT_GAP_ADDON);\n  }\n  //endregion ----------------------------------------------------- Utils\n}\n\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity 0.8.17;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), errorMessage);\n        return value;\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\n        return map._keys.values();\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key), errorMessage));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        AddressToUintMap storage map,\n        address key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (key, uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, key);\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, key, errorMessage));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity 0.8.17;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity 0.8.17;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity 0.8.17;\n\nimport \"./Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity 0.8.17;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Permit.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/openzeppelin/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity 0.8.17;\n\nimport \"./Math.sol\";\nimport \"./SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/oracles/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../libs/AppErrors.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\nimport \"../integrations/aave3/IAavePriceOracle.sol\";\n\n/// @notice Trivial implementation of a price oracle as a wrapper of AAVE3 price oracle\ncontract PriceOracle is IPriceOracle {\n  IAavePriceOracle public immutable priceOracle;\n\n  constructor(address aave3priceOracle_) {\n    require(aave3priceOracle_ != address(0), AppErrors.ZERO_ADDRESS);\n    priceOracle = IAavePriceOracle(aave3priceOracle_);\n  }\n\n  /// @notice Return asset price in USD, decimals 18\n  function getAssetPrice(address asset) external view override returns (uint256) {\n    // AAVE3 price oracle returns price with decimals 1e8, we need decimals 18\n    try priceOracle.getAssetPrice(asset) returns (uint value) {\n      return value * 1e10;\n    } catch {}\n\n    return 0; // unknown asset or unknown price\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/oracles/PriceOracleKeomZkevm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../libs/AppErrors.sol\";\nimport \"../interfaces/IPriceOracle.sol\";\nimport \"../integrations/compound/ICompoundPriceOracle.sol\";\nimport \"../openzeppelin/IERC20Metadata.sol\";\nimport \"hardhat/console.sol\";\n\n/// @notice Trivial implementation of a price oracle as a wrapper of Keom price oracle on zkEVM.\n///         Key difference: it returns prices with decimals 18\ncontract PriceOracleKeomZkevm is IPriceOracle {\n  ICompoundPriceOracle public immutable priceOracle;\n\n  constructor(address compoundPriceOracle) {\n    require(compoundPriceOracle != address(0), AppErrors.ZERO_ADDRESS);\n    priceOracle = ICompoundPriceOracle(compoundPriceOracle);\n  }\n\n  /// @notice Return asset price in USD, decimals 18\n  function getAssetPrice(address asset) external view override returns (uint256) {\n    // get kToken by asset\n    address kToken;\n    if (asset == 0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035) { // usdc\n      kToken = 0x68d9baA40394dA2e2c1ca05d30BF33F52823ee7B; // kUsdc\n    } else if (asset == 0x1E4a5963aBFD975d8c9021ce480b42188849D41d) { // USDT\n      kToken = 0xad41C77d99E282267C1492cdEFe528D7d5044253; // kUsdt\n    } else if (asset == 0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9) { // WETH\n      kToken = 0xee1727f5074E747716637e1776B7F7C7133f16b1; // kWeth\n    } else if (asset == 0xa2036f0538221a77A3937F1379699f44945018d0) { // Matic\n      kToken = 0x8903Dc1f4736D2FcB90C1497AebBABA133DaAC76; // kMatic\n    }\n\n    if (kToken != address(0)) {\n      console.log(\"kToken\", kToken);\n      // Compound price oracle returns price with decimals (36 - assetDecimals), we need decimals 18\n      try priceOracle.getUnderlyingPrice(kToken) returns (uint value) {\n        return value * 10 ** IERC20Metadata(asset).decimals() / 1e18;\n      } catch {\n        console.log(\"error\");\n      }\n    }\n\n    return 0; // unknown asset or unknown price\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/aave3/Aave3AprLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../aaveShared/AaveSharedLib.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../integrations/aave3/IAaveReserveInterestRateStrategy.sol\";\nimport \"../../integrations/aave3/IAavePriceOracle.sol\";\nimport \"../../integrations/aave3/IAavePool.sol\";\nimport \"../../integrations/aave3/IAaveToken.sol\";\nimport \"../../integrations/aave3/IAaveStableDebtToken.sol\";\nimport \"../../integrations/aave3/Aave3ReserveConfiguration.sol\";\nimport \"../../integrations/aave3/IAaveProtocolDataProvider.sol\";\nimport \"../../integrations/aave3/IAaveAddressesProvider.sol\";\n\n/// @notice Library for AAVE v2 to calculate APR: borrow APR and supply APR\nlibrary Aave3AprLib {\n  using Aave3ReserveConfiguration for Aave3DataTypes.ReserveConfigurationMap;\n\n  uint constant public COUNT_SECONDS_PER_YEAR = 365 days; // 31536000;\n  uint constant public RAY = 1e27;\n  uint constant public HALF_RAY = 0.5e27;\n\n  //-----------------------------------------------------///////////////////\n  /// Calculate borrow and liquidity rate - in same way as in AAVE v3 protocol\n  ///\n  /// See ReserveLogic.sol getNormalizedIncome implementation\n  /// Function getNormalizedIncome/getNormalizedDebt return income-ratios\n  ///     \"A value of 1e27 means there is no debt/income. As time passes, the debt/income is accrued\"\n  ///     \"A value of 2*1e27 means that for each unit of debt/income, one unit worth of interest has been accumulated\"\n  /// The functions are implemented like following:\n  ///     return 0.5 + index * (1 + RATE * dT / (Sy * 1e27))\n  /// where\n  ///     RATE is liquidity-rate or variable-borrow-rate\n  ///     index is liquidityIndex or variableBorrowIndex\n  ///     dt is time in seconds\n  ///     Sy = seconds per year\n  /// So, we can use RATE to calculate APR (for borrow or supply)\n  /// because following expression\n  ///     (RATE * dT / (Sy * 1e27)) * amount\n  /// gives us increment of the amount for period dt (in seconds)\n  ///\n  /// BUT: we need APR per block, not per second\n  /// So, we need to recalculate APR from seconds to blocks\n  /// As result, we can rewrite above formula as following:\n  ///    APR-sec = RATE * dT / (Sy * 1e27)\n  ///    APR-block = RATE * dB / (Sy * 1e27) * blocks-per-day * 365 / Sy\n  ///       where dB is period in blocks\n  ///\n  /// Functions getNormalizedIncome and getNormalizedDebt are different, they use\n  ///       calculateLinearInterest and calculateCompoundedInterest\n  /// We need to calculate APR for 1 block, so we use linear formula in both cases.\n  //-----------------------------------------------------///////////////////\n\n  /// @notice Calculate estimate variable borrow rate after borrowing {amountToBorrow_}\n  function getVariableBorrowRateRays(\n    Aave3DataTypes.ReserveData memory rb_,\n    address borrowAsset_,\n    uint amountToBorrow_,\n    uint totalStableDebt_,\n    uint totalVariableDebt_\n  ) internal view returns (uint) {\n\n    if (amountToBorrow_ == 0) {\n      return rb_.currentVariableBorrowRate;\n    }\n\n    // see aave-v3-core, DefaultReserveInterestRateStrategy, calculateInterestRates impl\n    // to calculate new BR, we need to reduce liquidity on borrowAmount and increase the debt on the same amount\n    (,, uint variableBorrowRateRays) = IAaveReserveInterestRateStrategy(\n      rb_.interestRateStrategyAddress\n    ).calculateInterestRates(\n      Aave3DataTypes.CalculateInterestRatesParams({\n        unbacked: 0, // this value is not used to calculate variable BR\n        liquidityAdded: 0,\n        liquidityTaken: amountToBorrow_,\n        totalStableDebt: totalStableDebt_,\n        totalVariableDebt: totalVariableDebt_ + amountToBorrow_,\n        // we can pass dummy value here, because averageStableBorrowRate is not used in variableBorrowRate-calculations\n        averageStableBorrowRate: rb_.currentStableBorrowRate,\n        reserveFactor: rb_.configuration.getReserveFactor(),\n        reserve: borrowAsset_,\n        aToken: rb_.aTokenAddress\n      })\n    );\n\n    return variableBorrowRateRays;\n  }\n\n  /// @notice calculate liquidityRate for collateral token after supplying {amountToSupply_}\n  function getLiquidityRateRays(\n    Aave3DataTypes.ReserveData memory rc_,\n    address collateralAsset_,\n    uint amountToSupply_,\n    uint totalStableDebt_,\n    uint totalVariableDebt_\n  ) internal view returns (uint) {\n\n    // see aave-v3-core, ReserveLogic.sol, updateInterestRates\n    (, uint avgStableRate) = IAaveStableDebtToken(rc_.stableDebtTokenAddress).getTotalSupplyAndAvgRate();\n\n    // see aave-v3-core, DefaultReserveInterestRateStrategy, calculateInterestRates impl\n    (uint liquidityRateRays,,) = IAaveReserveInterestRateStrategy(\n      rc_.interestRateStrategyAddress\n    ).calculateInterestRates(\n      Aave3DataTypes.CalculateInterestRatesParams({\n        unbacked: rc_.unbacked,\n        liquidityAdded: amountToSupply_,\n        liquidityTaken: 0,\n        totalStableDebt: totalStableDebt_,\n        totalVariableDebt: totalVariableDebt_,\n        averageStableBorrowRate: avgStableRate,\n        reserveFactor: rc_.configuration.getReserveFactor(),\n        reserve: collateralAsset_,\n        aToken: rc_.aTokenAddress\n      })\n    );\n\n    return liquidityRateRays;\n  }\n\n  /// @notice Estimate value of variable borrow rate after borrowing {amountToBorrow_}\n  function getBorrowRateAfterBorrow(address pool_, address borrowAsset_, uint amountToBorrow_) internal view returns (uint) {\n    IAavePool pool = IAavePool(pool_);\n    Aave3DataTypes.ReserveData memory rb = pool.getReserveData(borrowAsset_);\n\n    (,,,\n    uint256 totalStableDebt,\n    uint256 totalVariableDebt\n    ,,,,,,,) = IAaveProtocolDataProvider(\n      (IAaveAddressesProvider(pool.ADDRESSES_PROVIDER())).getPoolDataProvider()\n    ).getReserveData(borrowAsset_);\n\n    return Aave3AprLib.getVariableBorrowRateRays(\n      rb,\n      borrowAsset_,\n      amountToBorrow_,\n      totalStableDebt,\n      totalVariableDebt\n    );\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/aave3/Aave3PlatformAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./Aave3AprLib.sol\";\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/EntryKinds.sol\";\nimport \"../../interfaces/IPlatformAdapter.sol\";\nimport \"../../interfaces/IPoolAdapterInitializer.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../integrations/aave3/IAavePool.sol\";\nimport \"../../integrations/aave3/IAaveAddressesProvider.sol\";\nimport \"../../integrations/aave3/IAaveProtocolDataProvider.sol\";\nimport \"../../integrations/aave3/Aave3ReserveConfiguration.sol\";\nimport \"../../integrations/aave3/IAavePriceOracle.sol\";\nimport \"../../integrations/aave3/IAaveToken.sol\";\n\n/// @notice Adapter to read current pools info from AAVE-v3-protocol, see https://docs.aave.com/hub/\ncontract Aave3PlatformAdapter is IPlatformAdapter {\n  using SafeERC20 for IERC20;\n  using AppUtils for uint;\n  using Aave3ReserveConfiguration for Aave3DataTypes.ReserveConfigurationMap;\n\n  //region ----------------------------------------------------- Constants\n  uint256 internal constant RAY = 1e27;\n  uint256 internal constant HALF_RAY = 0.5e27;\n\n  /// @notice We allow to borrow only 90% of max allowed amount, see the code below for explanation\n  uint public constant MAX_BORROW_AMOUNT_FACTOR = 90;\n  uint constant public MAX_BORROW_AMOUNT_FACTOR_DENOMINATOR = 100;\n  string public constant override PLATFORM_ADAPTER_VERSION = \"1.0.4\";\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Data types\n  /// @notice Local vars inside _getConversionPlan - to avoid stack too deep\n  struct LocalsGetConversionPlan {\n    uint8 categoryCollateral;\n    IAavePool pool;\n    IAaveAddressesProvider addressProvider;\n    IAavePriceOracle priceOracle;\n    IConverterController controller;\n    Aave3DataTypes.ReserveData rc;\n    Aave3DataTypes.ReserveData rb;\n    uint totalAToken;\n    uint totalStableDebt;\n    uint totalVariableDebt;\n    uint blocksPerDay;\n    /// @notice vars.rc.configuration.getDebtCeiling(); rcDebtCeiling != 0 => isolation mode is used\n    uint rcDebtCeiling;\n    uint healthFactor18;\n    uint entryKind;\n  }\n  //endregion ----------------------------------------------------- Data types\n\n  //region ----------------------------------------------------- Variables\n  IConverterController immutable public controller;\n  IAavePool immutable public pool;\n  /// @dev Same as controller.borrowManager(); we cache it for gas optimization\n  address immutable public borrowManager;\n\n  address immutable public converterNormal;\n  address immutable public converterEMode;\n\n  /// @notice True if the platform is frozen and new borrowing is not possible (at this moment)\n  bool public override frozen;\n  //endregion ----------------------------------------------------- Variables\n\n  //region ----------------------------------------------------- Events\n  event OnPoolAdapterInitialized(address converter, address poolAdapter, address user, address collateralAsset, address borrowAsset);\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Constructor and initialization\n\n  constructor(address controller_, address borrowManager_, address poolAave_, address templateAdapterNormal_, address templateAdapterEMode_) {\n    require(\n      poolAave_ != address(0)\n      && borrowManager_ != address(0)\n      && templateAdapterNormal_ != address(0)\n      && templateAdapterEMode_ != address(0)\n      && controller_ != address(0),\n      AppErrors.ZERO_ADDRESS\n    );\n\n    pool = IAavePool(poolAave_);\n    controller = IConverterController(controller_);\n    borrowManager = borrowManager_;\n\n    converterNormal = templateAdapterNormal_;\n    converterEMode = templateAdapterEMode_;\n  }\n\n  function initializePoolAdapter(address converter_, address poolAdapter_, address user_, address collateralAsset_, address borrowAsset_) external override {\n    require(msg.sender == borrowManager, AppErrors.BORROW_MANAGER_ONLY);\n    require(converterNormal == converter_ || converterEMode == converter_, AppErrors.CONVERTER_NOT_FOUND);\n\n    // All AAVE-pool-adapters support IPoolAdapterInitializer\n    IPoolAdapterInitializer(poolAdapter_).initialize(\n      address(controller),\n      address(pool),\n      user_,\n      collateralAsset_,\n      borrowAsset_,\n      converter_\n    );\n\n    emit OnPoolAdapterInitialized(converter_, poolAdapter_, user_, collateralAsset_, borrowAsset_);\n  }\n\n  /// @notice Set platform to frozen/unfrozen state. In frozen state any new borrowing is forbidden.\n  function setFrozen(bool frozen_) external {\n    require(msg.sender == controller.governance(), AppErrors.GOVERNANCE_ONLY);\n    frozen = frozen_;\n  }\n  //endregion ----------------------------------------------------- Constructor and initialization\n\n  //region ----------------------------------------------------- View\n\n  function converters() external view override returns (address[] memory) {\n    address[] memory dest = new address[](2);\n    dest[0] = converterNormal;\n    dest[1] = converterEMode;\n    return dest;\n  }\n\n  function platformKind() external pure returns (AppDataTypes.LendingPlatformKinds) {\n    return AppDataTypes.LendingPlatformKinds.AAVE3_3;\n  }\n  //endregion ----------------------------------------------------- View\n\n  //region ----------------------------------------------------- Get conversion plan\n  function getConversionPlan (AppDataTypes.InputConversionParams memory params, uint16 healthFactor2_) external view override returns (\n    AppDataTypes.ConversionPlan memory plan\n  ) {\n    if (! frozen) {\n      AppDataTypes.PricesAndDecimals memory pd;\n      LocalsGetConversionPlan memory vars;\n      vars.controller = controller;\n\n      require(params.collateralAsset != address(0) && params.borrowAsset != address(0), AppErrors.ZERO_ADDRESS);\n      require(params.amountIn != 0 && params.countBlocks != 0, AppErrors.INCORRECT_VALUE);\n      require(healthFactor2_ >= vars.controller.minHealthFactor2(), AppErrors.WRONG_HEALTH_FACTOR);\n\n      vars.pool = pool;\n      vars.addressProvider = IAaveAddressesProvider(vars.pool.ADDRESSES_PROVIDER());\n      vars.priceOracle = IAavePriceOracle(vars.addressProvider.getPriceOracle());\n\n      vars.rc = vars.pool.getReserveData(params.collateralAsset);\n      if (_isUsable(vars.rc.configuration) &&  _isCollateralUsageAllowed(vars.rc.configuration)) {\n        vars.rb = vars.pool.getReserveData(params.borrowAsset);\n\n        if (_isUsable(vars.rb.configuration) && vars.rb.configuration.getBorrowingEnabled()) {\n          pd.rc10powDec = 10**vars.rc.configuration.getDecimals();\n          pd.rb10powDec = 10**vars.rb.configuration.getDecimals();\n\n          /// Some assets can be used as collateral in isolation mode only\n          /// see comment to getDebtCeiling(): The debt ceiling (0 = isolation mode disabled)\n          vars.rcDebtCeiling = vars.rc.configuration.getDebtCeiling();\n          if (vars.rcDebtCeiling == 0 || _isUsableInIsolationMode(vars.rb.configuration)) {\n\n            //-------------------------------- Calculate maxAmountToSupply and maxAmountToBorrow\n            // by default, we can borrow all available cache\n            (vars.totalAToken, vars.totalStableDebt, vars.totalVariableDebt) = _getReserveData(vars.rb);\n\n            plan.maxAmountToBorrow = vars.totalAToken > vars.totalStableDebt + vars.totalVariableDebt\n              ? vars.totalAToken - vars.totalStableDebt - vars.totalVariableDebt\n              : 0;\n\n            // supply/borrow caps are given in \"whole tokens\" == without decimals\n            // see AAVE3-code, ValidationLogic.sol, validateBorrow\n            { // take into account borrow cap, supply cap and debts ceiling\n              uint borrowCap = vars.rb.configuration.getBorrowCap();\n              if (borrowCap != 0) {\n                borrowCap *= pd.rb10powDec;\n                uint totalDebt = vars.totalStableDebt + vars.totalVariableDebt;\n                if (totalDebt > borrowCap) {\n                  plan.maxAmountToBorrow = 0;\n                } else {\n                  if (totalDebt + plan.maxAmountToBorrow > borrowCap) {\n                    // we should use actual values of totalStableDebt and totalVariableDebt\n                    // they can be a bit different from stored values\n                    // as result, it's not possible to borrow exact max amount\n                    // it's necessary to borrow a bit less amount\n                    // so, we allow to borrow only 90% of max amount\n                    plan.maxAmountToBorrow = (borrowCap - totalDebt)\n                      * MAX_BORROW_AMOUNT_FACTOR\n                      / MAX_BORROW_AMOUNT_FACTOR_DENOMINATOR;\n                  }\n                }\n              }\n              if (vars.rcDebtCeiling != 0) {\n                // The isolation mode is enabled.\n                // The total exposure cannot be bigger than the collateral debt ceiling, see aave-v3-core: validateBorrow()\n                // Suppose, the collateral is an isolated asset with the debt ceiling $10M\n                // The user will therefore be allowed to borrow up to $10M of stable coins\n                // Debt ceiling does not include interest accrued over time, only the principal borrowed\n                uint maxAmount = vars.rcDebtCeiling > vars.rc.isolationModeTotalDebt\n                  ? (vars.rcDebtCeiling - vars.rc.isolationModeTotalDebt)\n                    * pd.rb10powDec\n                    / 10 ** Aave3ReserveConfiguration.DEBT_CEILING_DECIMALS\n                  : 0;\n\n                if (plan.maxAmountToBorrow > maxAmount) {\n                  plan.maxAmountToBorrow = maxAmount;\n                }\n              }\n            }\n            {\n              // see sources of AAVE3\\ValidationLogic.sol\\validateSupply\n              uint supplyCap = vars.rc.configuration.getSupplyCap();\n              if (supplyCap == 0) {\n                plan.maxAmountToSupply = type(uint).max; // unlimited\n              } else {\n                supplyCap  *= pd.rc10powDec;\n                uint totalSupply = (\n                  IAaveToken(vars.rc.aTokenAddress).scaledTotalSupply() * vars.rc.liquidityIndex + HALF_RAY\n                ) / RAY;\n                plan.maxAmountToSupply = supplyCap > totalSupply\n                  ? supplyCap - totalSupply\n                  : 0;\n              }\n            }\n            if (plan.maxAmountToSupply != 0 && plan.maxAmountToBorrow != 0) {\n              //-------------------------------- converter, LTV and liquidation threshold\n              // get liquidation threshold (== collateral factor) and loan-to-value\n              vars.categoryCollateral = uint8(vars.rc.configuration.getEModeCategory());\n              if (vars.categoryCollateral != 0 && vars.categoryCollateral == vars.rb.configuration.getEModeCategory()) {\n\n                // if both assets belong to the same e-mode-category, we can use category's ltv (higher than default)\n                // we assume here, that e-mode is always used if it's available\n                Aave3DataTypes.EModeCategory memory categoryData = vars.pool.getEModeCategoryData(vars.categoryCollateral);\n                // ltv: 8500 for 0.85, we need decimals 18.\n                plan.ltv18 = uint(categoryData.ltv) * 10**(18-4);\n                plan.liquidationThreshold18 = uint(categoryData.liquidationThreshold) * 10**(18-4);\n                plan.converter = converterEMode;\n              } else {\n                // we should use both LTV and liquidationThreshold of collateral asset (not borrow asset)\n                // see test \"Borrow: check LTV and liquidationThreshold\"\n                plan.ltv18 = uint(vars.rc.configuration.getLtv()) * 10**(18-4);\n                plan.liquidationThreshold18 = uint(vars.rc.configuration.getLiquidationThreshold()) * 10**(18-4);\n                plan.converter = converterNormal; // can be changed later\n              }\n\n              //-------------------------------- Prices and health factor\n              vars.blocksPerDay = vars.controller.blocksPerDay();\n              pd.priceCollateral = vars.priceOracle.getAssetPrice(params.collateralAsset);\n              pd.priceBorrow = vars.priceOracle.getAssetPrice(params.borrowAsset);\n\n              // AAVE has min allowed health factor at the borrow moment: liquidationThreshold18/LTV, i.e. 0.85/0.8=1.06...\n              // Target health factor can be smaller but it's not possible to make a borrow with such low health factor\n              // see explanation of health factor value in IConverterController.sol\n              vars.healthFactor18 = plan.liquidationThreshold18 * 1e18 / plan.ltv18;\n              if (vars.healthFactor18 < uint(healthFactor2_)* 10**(18 - 2)) {\n                vars.healthFactor18 = uint(healthFactor2_) * 10**(18 - 2);\n              } else {\n                // healthFactor = liquidationThreshold18 / ltv18 - is min allowed health factor\n                // but real health factor should be higher - we need some reserve\n                vars.healthFactor18 = vars.healthFactor18 * healthFactor2_ / vars.controller.minHealthFactor2();\n              }\n\n              //------------------------------- Calculate collateralAmount and amountToBorrow\n              // calculate amount that can be borrowed and amount that should be provided as the collateral\n              vars.entryKind = EntryKinds.getEntryKind(params.entryData);\n              if (vars.entryKind == EntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\n                plan.collateralAmount = params.amountIn;\n                plan.amountToBorrow = EntryKinds.exactCollateralInForMaxBorrowOut(\n                  params.amountIn,\n                  vars.healthFactor18,\n                  plan.liquidationThreshold18,\n                  pd,\n                  false // prices have decimals 18, not 36\n                );\n              } else if (vars.entryKind == EntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\n                (plan.collateralAmount, plan.amountToBorrow) = EntryKinds.exactProportion(\n                  params.amountIn,\n                  vars.healthFactor18,\n                  plan.liquidationThreshold18,\n                  pd,\n                  params.entryData,\n                  false // prices have decimals 18, not 36\n                );\n              } else if (vars.entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2) {\n                plan.amountToBorrow = params.amountIn;\n                plan.collateralAmount = EntryKinds.exactBorrowOutForMinCollateralIn(\n                  params.amountIn,\n                  vars.healthFactor18,\n                  plan.liquidationThreshold18,\n                  pd,\n                  false // prices have decimals 18, not 36\n                );\n              }\n              //------------------------------- Validate the borrow\n              if (plan.amountToBorrow == 0 || plan.collateralAmount == 0) {\n                plan.converter = address(0);\n              } else {\n                // reduce collateral amount and borrow amount proportionally to fit available limits\n                if (plan.collateralAmount > plan.maxAmountToSupply) {\n                  plan.amountToBorrow = plan.amountToBorrow * plan.maxAmountToSupply / plan.collateralAmount;\n                  plan.collateralAmount = plan.maxAmountToSupply;\n                }\n\n                if (plan.amountToBorrow > plan.maxAmountToBorrow) {\n                  plan.collateralAmount = plan.collateralAmount * plan.maxAmountToBorrow / plan.amountToBorrow;\n                  plan.amountToBorrow = plan.maxAmountToBorrow;\n                }\n                //------------------------------- values for APR\n                plan.borrowCost36 = AaveSharedLib.getCostForPeriodBefore(\n                  AaveSharedLib.State({\n                    liquidityIndex: vars.rb.variableBorrowIndex,\n                    lastUpdateTimestamp: uint(vars.rb.lastUpdateTimestamp),\n                    rate: vars.rb.currentVariableBorrowRate\n                  }),\n                  plan.amountToBorrow,\n                  //predicted borrow rate after the borrow\n                  Aave3AprLib.getVariableBorrowRateRays(\n                    vars.rb,\n                    params.borrowAsset,\n                    plan.amountToBorrow,\n                    vars.totalStableDebt, // assume, that it still contains value for the borrow asset\n                    vars.totalVariableDebt // assume, that it still contains value for the borrow asset\n                  ),\n                  params.countBlocks,\n                  vars.blocksPerDay,\n                  block.timestamp, // assume, that we make borrow in the current block\n                  1e18 // multiplier to increase result precision\n                )\n                * 1e18 // we need decimals 36, but the result is already multiplied on 1e18 by multiplier above\n                / pd.rb10powDec;\n\n                // calculate supply-APR, see detailed explanation in Aave3AprLib\n                (vars.totalAToken, vars.totalStableDebt, vars.totalVariableDebt) = _getReserveData(vars.rc);\n\n                plan.supplyIncomeInBorrowAsset36 = AaveSharedLib.getCostForPeriodBefore(\n                  AaveSharedLib.State({\n                    liquidityIndex: vars.rc.liquidityIndex,\n                    lastUpdateTimestamp: uint(vars.rc.lastUpdateTimestamp),\n                    rate: vars.rc.currentLiquidityRate\n                  }),\n                  plan.collateralAmount,\n                  Aave3AprLib.getLiquidityRateRays(\n                    vars.rc,\n                    params.collateralAsset,\n                    plan.collateralAmount,\n                    vars.totalStableDebt,\n                    vars.totalVariableDebt\n                  ),\n                  params.countBlocks,\n                  vars.blocksPerDay,\n                  block.timestamp, // assume, that we supply collateral in the current block\n                  1e18 // multiplier to increase result precision\n                )\n                // we need a value in terms of borrow tokens but with decimals 18\n                * 1e18 // we need decimals 36, but the result is already multiplied on 1e18 by multiplier above\n                * pd.priceCollateral / pd.priceBorrow\n                / pd.rc10powDec;\n\n                plan.amountCollateralInBorrowAsset36 = plan.collateralAmount\n                  * (1e36 * pd.priceCollateral / pd.priceBorrow)\n                  / pd.rc10powDec;\n              }\n            } // else either max borrow or max supply amount is zero\n          } // else not usable\n        } // else the borrowing is not enabled\n      } // else the collateral is not allowed\n    } // else frozen\n\n    if (plan.converter == address(0)) {\n      AppDataTypes.ConversionPlan memory planNotFound;\n      return planNotFound;\n    } else {\n      return plan;\n    }\n  }\n\n  /// @notice Get total amounts for the given asset\n  /// @dev We don't use dataProvider.getReserveData, because it returns 13 variables and we have stack-too-deep problem\n  ///      on coverage if include this file to converter.sol in tetu-v2-strategies, see SCB-799\n  function _getReserveData(Aave3DataTypes.ReserveData memory reserve) internal view returns (\n    uint totalAToken,\n    uint totalStableDebt,\n    uint totalVariableDebt\n  ) {\n    // see aave-v3-core, AaveProtocolDataProvider.sol, getReserveData implementation\n    totalAToken = IERC20(reserve.aTokenAddress).totalSupply();\n    totalStableDebt = IERC20(reserve.stableDebtTokenAddress).totalSupply();\n    totalVariableDebt = IERC20(reserve.variableDebtTokenAddress).totalSupply();\n  }\n\n  //endregion ----------------------------------------------------- Get conversion plan\n\n  //region ----------------------------------------------------- Utils\n\n  /// @notice Check if the asset can be used as a collateral\n  /// @dev Some assets cannot be used as collateral: https://docs.aave.com/risk/asset-risk/risk-parameters#collaterals\n  /// @param data Aave3DataTypes.ReserveData.configuration.data\n  function _isCollateralUsageAllowed(Aave3DataTypes.ReserveConfigurationMap memory data) internal pure returns (bool) {\n    // see AaveProtocolDataProvider.getReserveConfigurationData impl\n    return data.getLiquidationThreshold() != 0;\n  }\n\n  /// @notice Check if the asset active, not frozen, not paused\n  /// @param data Aave3DataTypes.ReserveData.configuration.data\n  function _isUsable(Aave3DataTypes.ReserveConfigurationMap memory data) internal pure returns (bool) {\n    return data.getActive() && ! data.getFrozen() && ! data.getPaused();\n  }\n\n  /// @notice Only certain assets can be borrowed in isolation mode—specifically, approved stablecoins.\n  /// @dev https://docs.aave.com/developers/whats-new/isolation-mode\n  function _isUsableInIsolationMode(Aave3DataTypes.ReserveConfigurationMap memory borrowData) internal pure returns (bool) {\n    return borrowData.getBorrowableInIsolation();\n  }\n  //endregion ----------------------------------------------------- Utils\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/aave3/Aave3PoolAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./Aave3PoolAdapterBase.sol\";\n\n/// @notice PoolAdapter for AAVE-v3-protocol that uses ordinal borrow mode (not E-mode)\ncontract Aave3PoolAdapter\n  // we use inheritance to split normal/E-mode\n  // because all pool adapters are created using minimal proxy pattern\n  // and there is no way to pass additional params to standard initialize function\n  is Aave3PoolAdapterBase\n{\n\n  /// @dev This adapter is for not-e-mode, so this function is empty\n  function prepareToBorrow() internal override {\n    //nothing to do\n  }\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/aave3/Aave3PoolAdapterBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../openzeppelin/Initializable.sol\";\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../interfaces/IPoolAdapter.sol\";\nimport \"../../interfaces/IDebtMonitor.sol\";\nimport \"../../interfaces/IPoolAdapterInitializer.sol\";\nimport \"../../interfaces/IBookkeeper.sol\";\nimport \"../../integrations/aave3/IAavePool.sol\";\nimport \"../../integrations/aave3/IAavePriceOracle.sol\";\nimport \"../../integrations/aave3/IAaveAddressesProvider.sol\";\nimport \"../../integrations/aave3/Aave3ReserveConfiguration.sol\";\nimport \"../../integrations/aave3/IAaveToken.sol\";\nimport \"../../integrations/dforce/SafeRatioMath.sol\";\nimport \"../aaveShared/AaveSharedLib.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../libs/AppErrors.sol\";\n\n/// @notice Implementation of IPoolAdapter for AAVE-v3-protocol, see https://docs.aave.com/hub/\n/// @dev Instances of this contract are created using proxy-minimal pattern, so no constructor\nabstract contract Aave3PoolAdapterBase is IPoolAdapter, IPoolAdapterInitializer, Initializable {\n  using SafeERC20 for IERC20;\n  using Aave3ReserveConfiguration for Aave3DataTypes.ReserveConfigurationMap;\n  using SafeRatioMath for uint;\n\n  //region ----------------------------------------------------- Constants\n  /// @notice We allow to receive less atokens then provided collateral on following value\n  /// @dev Sometime, we provide collateral=1000000000000000000000 and receive atokens=999999999999999999999\n  uint constant public ATOKEN_MAX_DELTA = 10;\n  string public constant POOL_ADAPTER_VERSION = \"1.0.4\";\n\n  /// @notice 1 - stable, 2 - variable\n  uint constant public RATE_MODE = 2;\n  uint constant public SECONDS_PER_YEAR = 31536000;\n\n  /// @notice repay allows to reduce health factor of following value (decimals 18):\n  uint constant public MAX_ALLOWED_HEALTH_FACTOR_REDUCTION = 1e13; // 0.001%\n\n  /// @notice amount of collateral in terms of base currency that cannot be used in any case during partial repayment\n  ///         we need such reserve because of SCB-796\n  ///         without it health factor can reduce after partial repayment in edge cases because of rounding\n  ///         Base currency has 8 decimals, usdc/usdt have 6 decimals.. we need > 100 tokens in reserve\n  uint constant internal COLLATERAL_RESERVE_BASE_CURRENCY = 1000;\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Variables\n  address public collateralAsset;\n  address public borrowAsset;\n  address public user;\n\n  IConverterController public controller;\n  IAavePool internal _pool;\n  /// @notice Address of original PoolAdapter contract that was cloned to make the instance of the pool adapter\n  address internal originConverter;\n\n  /// @notice Total amount of all supplied and withdrawn amounts of collateral in ATokens\n  uint public collateralBalanceATokens;\n  //endregion ----------------------------------------------------- Variables\n\n  //region ----------------------------------------------------- Events\n  event OnInitialized(address controller, address pool, address user, address collateralAsset, address borrowAsset, address originConverter);\n  event OnBorrow(uint collateralAmount, uint borrowAmount, address receiver, uint resultHealthFactor18, uint collateralBalanceATokens);\n  event OnBorrowToRebalance(uint borrowAmount, address receiver, uint resultHealthFactor18);\n  event OnRepay(uint amountToRepay, address receiver, bool closePosition, uint resultHealthFactor18, uint collateralBalanceATokens);\n  event OnRepayToRebalance(uint amount, bool isCollateral, uint resultHealthFactor18, uint collateralBalanceATokens);\n  event OnSalvage(address receiver, address token, uint amount);\n\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Data types\n  struct RepayLocal {\n    address assetBorrow;\n    address assetCollateral;\n    IAavePool pool;\n    uint aTokensBeforeRepay;\n    uint aTokensAfterRepay;\n    uint amountCollateralToWithdraw;\n    uint healthFactorBefore;\n    uint healthFactorAfter;\n    uint collateralBalanceATokens;\n  }\n  //endregion ----------------------------------------------------- Data types\n\n  //region ----------------------------------------------------- Initialization and customization\n\n  function initialize(\n    address controller_,\n    address pool_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    address originConverter_\n  ) override external\n    // Borrow Manager creates a pool adapter using minimal proxy pattern, adds it the the set of known pool adapters\n    // and initializes it immediately. We should ensure only that the re-initialization is not possible\n  initializer\n  {\n    require(\n      controller_ != address(0)\n      && pool_ != address(0)\n      && user_ != address(0)\n      && collateralAsset_ != address(0)\n      && borrowAsset_ != address(0)\n      && originConverter_ != address(0),\n      AppErrors.ZERO_ADDRESS\n    );\n\n    controller = IConverterController(controller_);\n    user = user_;\n    collateralAsset = collateralAsset_;\n    borrowAsset = borrowAsset_;\n    originConverter = originConverter_;\n\n    _pool = IAavePool(pool_);\n\n    // The pool adapter doesn't keep assets on its balance, so it's safe to use infinity approve\n    // All approves replaced by infinity-approve were commented in the code below\n    IERC20(collateralAsset_).safeApprove(pool_, 2 ** 255); // 2*255 is more gas-efficient than type(uint).max\n    IERC20(borrowAsset_).safeApprove(pool_, 2 ** 255);\n\n    emit OnInitialized(controller_, pool_, user_, collateralAsset_, borrowAsset_, originConverter_);\n  }\n\n  /// @notice Enter to E-mode if necessary\n  function prepareToBorrow() internal virtual;\n\n  /// @notice Save any not aToken from balance to {receiver}\n  /// @dev Normally this contract doesn't have any tokens on balance except aTokens\n  function salvage(address receiver, address token, uint amount) external {\n    require(msg.sender == controller.governance(), AppErrors.GOVERNANCE_ONLY);\n    IAavePool __pool = _pool;\n    Aave3DataTypes.ReserveData memory rc = __pool.getReserveData(collateralAsset);\n    Aave3DataTypes.ReserveData memory rb = __pool.getReserveData(borrowAsset);\n    require(token != rc.aTokenAddress && token != rb.aTokenAddress, AppErrors.UNSALVAGEABLE);\n\n    IERC20(token).safeTransfer(receiver, amount);\n    emit OnSalvage(receiver, token, amount);\n  }\n  //endregion ----------------------------------------------------- Initialization and customization\n\n  //region ----------------------------------------------------- Restrictions\n\n  /// @notice Ensure that the caller is TetuConverter\n  function _onlyTetuConverter(IConverterController controller_) internal view {\n    require(controller_.tetuConverter() == msg.sender, AppErrors.TETU_CONVERTER_ONLY);\n  }\n\n  function updateStatus() external override {\n    // empty function, no restrictions\n    // nothing to do; getStatus always return actual amounts in AAVE\n    // there is reserve.updateStatus function, i.e. see SupplyLogic.sol, executeWithdraw but it is internal\n  }\n  //endregion ----------------------------------------------------- Restrictions\n\n  //region ----------------------------------------------------- Borrow logic\n\n  /// @notice Supply collateral to the pool and borrow specified amount\n  /// @dev No re-balancing here; Collateral amount must be approved to the pool adapter before the call of this function\n  /// @param collateralAmount_ Amount of collateral, must be approved to the pool adapter before the call of borrow()\n  /// @param borrowAmount_ Amount that should be borrowed in result\n  /// @param receiver_ Receiver of the borrowed amount\n  /// @return Result borrowed amount sent to the {receiver_}\n  function borrow(uint collateralAmount_, uint borrowAmount_, address receiver_) external override returns (uint) {\n    IConverterController c = controller;\n    _onlyTetuConverter(c);\n\n    IAavePool pool = _pool;\n    address _borrowAsset = borrowAsset;\n    address _collateralAsset = collateralAsset;\n\n    uint newCollateralBalanceATokens = _supply(pool, _collateralAsset, collateralAmount_) + collateralBalanceATokens;\n    collateralBalanceATokens = newCollateralBalanceATokens;\n\n    // enter to E-mode if necessary\n    prepareToBorrow();\n\n    // make borrow, send borrowed amount to the receiver\n    // we cannot transfer borrowed amount directly to receiver because the debt is incurred by amount receiver\n    uint balanceBorrowAsset0 = IERC20(_borrowAsset).balanceOf(address(this));\n    pool.borrow(_borrowAsset, borrowAmount_, RATE_MODE, 0, address(this));\n\n    // ensure that we have received required borrowed amount, send the amount to the receiver\n    require(\n      borrowAmount_ + balanceBorrowAsset0 == IERC20(_borrowAsset).balanceOf(address(this)),\n      AppErrors.WRONG_BORROWED_BALANCE\n    );\n    IERC20(_borrowAsset).safeTransfer(receiver_, borrowAmount_);\n\n    // register the borrow in DebtMonitor\n    IDebtMonitor(c.debtMonitor()).onOpenPosition();\n\n    // ensure that current health factor is greater than min allowed\n    (,,,,, uint256 healthFactor) = pool.getUserAccountData(address(this));\n    _validateHealthFactor(c, healthFactor, 0);\n\n    _registerInBookkeeperBorrow(c, collateralAmount_, borrowAmount_);\n    emit OnBorrow(collateralAmount_, borrowAmount_, receiver_, healthFactor, newCollateralBalanceATokens);\n    return borrowAmount_;\n  }\n\n  /// @notice Supply collateral to AAVE-pool\n  /// @return Amount of received A-tokens\n  function _supply(IAavePool pool_, address assetCollateral_, uint collateralAmount_) internal returns (uint) {\n    Aave3DataTypes.ReserveData memory rc = pool_.getReserveData(assetCollateral_);\n    uint aTokensBalanceBeforeSupply = IERC20(rc.aTokenAddress).balanceOf(address(this));\n\n    IERC20(assetCollateral_).safeTransferFrom(msg.sender, address(this), collateralAmount_);\n\n    // Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n    // E.g. User supplies 100 USDC and gets in return 100 aUSDC\n\n    // replaced by infinity approve: IERC20(assetCollateral_).safeApprove(address(pool_), collateralAmount_);\n    pool_.supply(assetCollateral_, collateralAmount_, address(this), 0);\n    pool_.setUserUseReserveAsCollateral(assetCollateral_, true);\n\n    // ensure that we received a-tokens; don't transfer them anywhere\n    uint aTokensBalanceAfterSupply = IERC20(rc.aTokenAddress).balanceOf(address(this));\n    require(aTokensBalanceAfterSupply >= aTokensBalanceBeforeSupply, AppErrors.WEIRD_OVERFLOW);\n\n    uint aTokensAmount = aTokensBalanceAfterSupply - aTokensBalanceBeforeSupply;\n    require(aTokensAmount + ATOKEN_MAX_DELTA >= collateralAmount_, AppErrors.WRONG_DERIVATIVE_TOKENS_BALANCE);\n\n    return aTokensAmount;\n  }\n\n  /// @notice Borrow additional amount {borrowAmount_} using exist collateral and send it to {receiver_}\n  /// @dev Re-balance: too big health factor => target health factor\n  /// @return resultHealthFactor18 Result health factor after borrow\n  /// @return borrowedAmountOut Exact amount sent to the borrower\n  function borrowToRebalance(uint borrowAmount_, address receiver_) external override returns (\n    uint resultHealthFactor18,\n    uint borrowedAmountOut\n  ) {\n    IConverterController c = controller;\n    _onlyTetuConverter(c);\n\n    IAavePool pool = _pool;\n\n    address assetBorrow = borrowAsset;\n\n    // ensure that the position is opened\n    require(IDebtMonitor(c.debtMonitor()).isPositionOpened(), AppErrors.BORROW_POSITION_IS_NOT_REGISTERED);\n\n    // enter to E-mode if necessary\n    prepareToBorrow();\n\n    // make borrow, send borrowed amount to the receiver\n    // we cannot transfer borrowed amount directly to receiver because the debt is incurred by amount receiver\n    uint balanceBorrowAsset0 = IERC20(assetBorrow).balanceOf(address(this));\n    pool.borrow(assetBorrow, borrowAmount_, RATE_MODE, 0, address(this));\n\n    // ensure that we have received required borrowed amount, send the amount to the receiver\n    require(\n      borrowAmount_ + balanceBorrowAsset0 == IERC20(assetBorrow).balanceOf(address(this)),\n      AppErrors.WRONG_BORROWED_BALANCE\n    );\n    IERC20(assetBorrow).safeTransfer(receiver_, borrowAmount_);\n\n    // ensure that current health factor is greater than min allowed\n    (,,,,, resultHealthFactor18) = pool.getUserAccountData(address(this));\n    _validateHealthFactor(c, resultHealthFactor18, 0);\n\n    _registerInBookkeeperBorrow(c, 0, borrowAmount_);\n    emit OnBorrowToRebalance(borrowAmount_, receiver_, resultHealthFactor18);\n    return (resultHealthFactor18, borrowAmount_);\n  }\n  //endregion ----------------------------------------------------- Borrow logic\n\n  //region ----------------------------------------------------- Repay logic\n\n  /// @notice Repay borrowed amount, return collateral to the user\n  /// @param amountToRepay_ Exact amount of borrow asset that should be repaid\n  ///        The amount should be approved for the pool adapter before the call of repay()\n  ///        In the case of full repay this amount should be a slighter higher than total amount of debt\n  ///        to avoid dust tokens problem. The caller should increase amount-to-repay, returned by getStatus,\n  ///        on debt-gap percent (see controller).\n  /// @param closePosition_ true to pay full borrowed amount\n  /// @param receiver_ Receiver of withdrawn collateral\n  /// @return Amount of collateral asset sent to the {receiver_}\n  function repay(uint amountToRepay_, address receiver_, bool closePosition_) external override returns (uint) {\n    RepayLocal memory v;\n\n    IConverterController c = controller;\n    _onlyTetuConverter(c);\n\n    v.assetBorrow = borrowAsset;\n    v.assetCollateral = collateralAsset;\n    v.pool = _pool;\n    IERC20(v.assetBorrow).safeTransferFrom(msg.sender, address(this), amountToRepay_);\n\n    Aave3DataTypes.ReserveData memory rc = v.pool.getReserveData(v.assetCollateral);\n    v.aTokensBeforeRepay = IERC20(rc.aTokenAddress).balanceOf(address(this));\n\n    // how much collateral we are going to return\n    (v.amountCollateralToWithdraw, v.healthFactorBefore) = _getCollateralAmountToReturn(\n      v.pool,\n      amountToRepay_,\n      v.assetCollateral,\n      v.assetBorrow,\n      closePosition_,\n      rc.configuration.getDecimals(),\n      IAavePriceOracle(IAaveAddressesProvider(IAavePool(v.pool).ADDRESSES_PROVIDER()).getPriceOracle())\n    );\n\n    // transfer borrow amount back to the pool, infinity approve is assumed\n    v.pool.repay(v.assetBorrow, (closePosition_ ? type(uint).max : amountToRepay_), RATE_MODE, address(this));\n\n    // withdraw the collateral; if the borrow was liquidated the collateral is zero and we should have revert here\n    // because it's not worth to make repayment in this case\n    {\n      // in the case of full repay {amountCollateralToWithdraw} contains type(uint).max\n      // so, we need to calculate actual amount of returned collateral through balance difference\n      uint balanceUserCollateralBefore = IERC20(v.assetCollateral).balanceOf(receiver_);\n      v.pool.withdraw(v.assetCollateral, v.amountCollateralToWithdraw, receiver_); // amountCollateralToWithdraw can be equal to type(uint).max\n      uint balanceUserCollateralAfter = IERC20(v.assetCollateral).balanceOf(receiver_);\n      v.amountCollateralToWithdraw = AppUtils.sub0(balanceUserCollateralAfter, balanceUserCollateralBefore);\n    }\n\n    // close position in debt monitor / validate result health factor\n    {\n      uint totalCollateralBase;\n      uint totalDebtBase;\n      (totalCollateralBase, totalDebtBase,,,, v.healthFactorAfter) = v.pool.getUserAccountData(address(this));\n\n      if (totalCollateralBase == 0 && totalDebtBase == 0) {\n        IDebtMonitor(c.debtMonitor()).onClosePosition();\n      } else {\n        require(!closePosition_, AppErrors.CLOSE_POSITION_FAILED);\n        _validateHealthFactor(c, v.healthFactorAfter, v.healthFactorBefore);\n      }\n    }\n\n    {\n      // user has transferred a little bigger amount than actually need to close position\n      // because of the dust-tokens problem. Let's return remain amount back to the user\n      uint borrowBalance = IERC20(v.assetBorrow).balanceOf(address(this));\n      if (borrowBalance != 0) {\n        // we assume here that the pool adapter has balance of 0 in normal case, any leftover should be send to\n        IERC20(v.assetBorrow).safeTransfer(receiver_, borrowBalance);\n        // adjust amountToRepay_ to returned amount to send correct amount to OnRepay event\n        if (amountToRepay_ > borrowBalance) {\n          amountToRepay_ -= borrowBalance;\n        }\n      }\n    }\n\n    // update value of internal collateralBalanceATokens\n    v.aTokensAfterRepay = IERC20(rc.aTokenAddress).balanceOf(address(this));\n    require(v.aTokensBeforeRepay >= v.aTokensAfterRepay, AppErrors.WEIRD_OVERFLOW);\n\n    v.collateralBalanceATokens = AppUtils.sub0(collateralBalanceATokens, v.aTokensBeforeRepay - v.aTokensAfterRepay);\n    collateralBalanceATokens = v.collateralBalanceATokens;\n\n    emit OnRepay(amountToRepay_, receiver_, closePosition_, v.healthFactorAfter, v.collateralBalanceATokens);\n\n    _registerInBookkeeperRepay(c, v.amountCollateralToWithdraw, amountToRepay_);\n    return v.amountCollateralToWithdraw;\n  }\n\n  /// @notice Get a part of collateral safe to return after repaying {amountToRepay_}\n  /// @param amountToRepay_ Amount to be repaid [in borrowed tokens]\n  /// @return amountCollateralToWithdraw Amount of collateral [in collateral tokens]\n  ///         to be returned in exchange of {borrowedAmount_}\n  ///         Return type(uint).max if it's full repay and the position should be closed\n  /// @return healthFactor18 Current value of the health factor\n  function _getCollateralAmountToReturn(\n    IAavePool pool_,\n    uint amountToRepay_,\n    address assetCollateral_,\n    address assetBorrow_,\n    bool closePosition_,\n    uint collateralDecimals,\n    IAavePriceOracle priceOracle_\n  ) internal view returns (\n    uint amountCollateralToWithdraw,\n    uint healthFactor18\n  ) {\n    // ensure that we really have a debt\n    uint256 totalCollateralBase;\n    uint256 totalDebtBase;\n    (totalCollateralBase, totalDebtBase,,,, healthFactor18) = pool_.getUserAccountData(address(this));\n    require(totalDebtBase != 0, AppErrors.ZERO_BALANCE);\n\n    uint borrowPrice = priceOracle_.getAssetPrice(assetBorrow_);\n    require(borrowPrice != 0, AppErrors.ZERO_PRICE);\n\n    uint amountToRepayBase = amountToRepay_ * borrowPrice / (10 ** IERC20Metadata(assetBorrow_).decimals());\n\n    if (closePosition_ || amountToRepayBase >= totalDebtBase) {\n      // we cannot close position and pay the debt only partly\n      require(totalDebtBase <= amountToRepayBase, AppErrors.CLOSE_POSITION_PARTIAL);\n      return (type(uint).max, healthFactor18);\n    } else {\n      // the assets prices in the base currency\n      uint collateralPrice = priceOracle_.getAssetPrice(assetCollateral_);\n      require(collateralPrice != 0, AppErrors.ZERO_PRICE);\n\n      return (\n      // SCB-796:\n      //   We need to calculate total amount in terms of the collateral asset at first and only then take part of it.\n      //   Also we should keep a few tokens untouched as a reserve\n      //   to prevent decreasing of health factor in edge cases because of rounding error\n      //   (we are going to return 0.000014 usdc, but 0.000015 are returned)\n      //\n      // totalCollateralBase and collateralPrice have decimals of base current, part has decimals 18\n      // in result we have an amount in terms of collateral asset.\n      // == totalCollateral * part, part = amountToRepay / totalDebt < 1; \"part\" is collateral that should be returned\n        (\n          (totalCollateralBase > COLLATERAL_RESERVE_BASE_CURRENCY\n            ? totalCollateralBase - COLLATERAL_RESERVE_BASE_CURRENCY\n            : totalCollateralBase\n          ) * (10 ** collateralDecimals) / collateralPrice\n        ) * amountToRepayBase / totalDebtBase,\n        // WRONG: totalCollateralBase * (10 ** collateralDecimals) * part / 1e18 / collateralPrice,\n\n        healthFactor18\n      );\n    }\n  }\n\n  /// @notice Repay with rebalancing. Send amount of collateral/borrow asset to the pool adapter\n  ///         to recover the health factor to target state.\n  /// @dev It's not allowed to close position here (pay full debt) because no collateral will be returned.\n  /// @param amount_ Exact amount of asset that is transferred to the balance of the pool adapter.\n  ///                It can be amount of collateral asset or borrow asset depended on {isCollateral_}\n  ///                It must be stronger less then total borrow debt.\n  ///                The amount should be approved for the pool adapter before the call.\n  /// @param isCollateral_ true/false indicates that {amount_} is the amount of collateral/borrow asset\n  /// @return resultHealthFactor18 Result health factor after repay, decimals 18\n  function repayToRebalance(uint amount_, bool isCollateral_) external override returns (\n    uint resultHealthFactor18\n  ) {\n    IConverterController c = controller;\n    _onlyTetuConverter(c);\n\n    IAavePool pool = _pool;\n    IAavePriceOracle priceOracle = IAavePriceOracle(IAaveAddressesProvider(IAavePool(pool).ADDRESSES_PROVIDER()).getPriceOracle());\n\n    (,uint256 totalDebtBase0,,,, uint healthFactorBefore) = pool.getUserAccountData(address(this));\n    uint newCollateralBalanceATokens = collateralBalanceATokens;\n    if (isCollateral_) {\n      newCollateralBalanceATokens = _supply(pool, collateralAsset, amount_) + newCollateralBalanceATokens;\n      collateralBalanceATokens = newCollateralBalanceATokens;\n      _registerInBookkeeperBorrow(c, amount_, 0);\n    } else {\n      address assetBorrow = borrowAsset;\n      // ensure, that amount to repay is less then the total debt\n      uint priceBorrowAsset = priceOracle.getAssetPrice(assetBorrow);\n      uint totalAmountToPay = totalDebtBase0 == 0\n        ? 0\n        : totalDebtBase0 * (10 ** pool.getConfiguration(assetBorrow).getDecimals()) / priceBorrowAsset;\n      require(totalDebtBase0 != 0 && amount_ < totalAmountToPay, AppErrors.REPAY_TO_REBALANCE_NOT_ALLOWED);\n\n      IERC20(assetBorrow).safeTransferFrom(msg.sender, address(this), amount_);\n\n      // transfer borrowed amount back to the pool\n      // replaced by infinity approve: IERC20(assetBorrow).approve(address(pool), amount_);\n\n      pool.repay(assetBorrow, amount_, RATE_MODE, address(this));\n      _registerInBookkeeperRepay(c, 0, amount_);\n    }\n\n    // validate result health factor\n    (,,,,, uint256 healthFactorAfter) = pool.getUserAccountData(address(this));\n    _validateHealthFactor(controller, healthFactorAfter, healthFactorBefore);\n\n    emit OnRepayToRebalance(amount_, isCollateral_, healthFactorAfter, newCollateralBalanceATokens);\n    return healthFactorAfter;\n  }\n\n  /// @notice If we paid {amountToRepay_}, how much collateral would we receive?\n  function getCollateralAmountToReturn(uint amountToRepay_, bool closePosition_) external view override returns (uint) {\n    address assetCollateral = collateralAsset;\n    IAavePool pool = _pool;\n    IAavePriceOracle priceOracle = IAavePriceOracle(IAaveAddressesProvider(IAavePool(pool).ADDRESSES_PROVIDER()).getPriceOracle());\n\n    if (closePosition_) { // full repay\n      (uint256 totalCollateralBase,,,,,) = pool.getUserAccountData(address(this));\n\n      uint collateralPrice = priceOracle.getAssetPrice(assetCollateral);\n      require(collateralPrice != 0, AppErrors.ZERO_PRICE);\n\n      return totalCollateralBase * (10 ** pool.getConfiguration(assetCollateral).getDecimals()) / collateralPrice;\n    } else { // partial repay\n      Aave3DataTypes.ReserveData memory rc = pool.getReserveData(assetCollateral);\n      (uint amountCollateralToWithdraw,) = _getCollateralAmountToReturn(\n        pool,\n        amountToRepay_,\n        assetCollateral,\n        borrowAsset,\n        false,\n        rc.configuration.getDecimals(),\n        priceOracle\n      );\n      return amountCollateralToWithdraw;\n    }\n  }\n  //endregion ----------------------------------------------------- Repay logic\n\n  //region ----------------------------------------------------- Rewards\n  function claimRewards(address receiver_) external pure override returns (address rewardToken, uint amount) {\n    //nothing to do, AAVE3 doesn't have rewards on polygon\n    receiver_; // hide warning\n    return (rewardToken, amount);\n  }\n  //endregion ----------------------------------------------------- Rewards\n\n  //region ----------------------------------------------------- View current status\n  function getConversionKind() external pure override returns (AppDataTypes.ConversionKind) {\n    return AppDataTypes.ConversionKind.BORROW_2;\n  }\n\n  /// @inheritdoc IPoolAdapter\n  function getConfig() external view override returns (address origin, address outUser, address outCollateralAsset, address outBorrowAsset) {\n    return (originConverter, user, collateralAsset, borrowAsset);\n  }\n\n  /// @inheritdoc IPoolAdapter\n  function getStatus() external view override returns (\n    uint collateralAmount,\n    uint amountToPay,\n    uint healthFactor18,\n    bool opened,\n    uint collateralAmountLiquidated,\n    bool debtGapRequired\n  ) {\n    IAavePool __pool = _pool;\n    IAavePriceOracle priceOracle = IAavePriceOracle(IAaveAddressesProvider(IAavePool(__pool).ADDRESSES_PROVIDER()).getPriceOracle());\n\n    (uint totalCollateralBase, uint totalDebtBase,,,, uint hf18) = __pool.getUserAccountData(address(this));\n\n    address assetBorrow = borrowAsset;\n    address assetCollateral = collateralAsset;\n\n    uint collateralPrice = priceOracle.getAssetPrice(assetCollateral);\n    uint borrowPrice = priceOracle.getAssetPrice(assetBorrow);\n    require(collateralPrice != 0 && borrowPrice != 0, AppErrors.ZERO_PRICE);\n\n    Aave3DataTypes.ReserveData memory rc = __pool.getReserveData(assetCollateral);\n    {\n      uint aTokensBalance = IERC20(rc.aTokenAddress).balanceOf(address(this));\n      uint collateralBalanceATokensLocal = collateralBalanceATokens;\n      collateralAmountLiquidated = aTokensBalance > collateralBalanceATokensLocal\n        ? 0\n        : (collateralBalanceATokensLocal - aTokensBalance);\n    }\n\n    return (\n    // Total amount of provided collateral in [collateral asset]\n      totalCollateralBase * (10 ** rc.configuration.getDecimals()) / collateralPrice,\n\n    // Total amount of borrowed debt in [borrow asset]. 0 - for closed borrow positions.\n      totalDebtBase == 0\n        ? 0\n        : (totalDebtBase * (10 ** __pool.getConfiguration(assetBorrow).getDecimals())) / borrowPrice,\n    // Current health factor, decimals 18\n      hf18,\n      totalCollateralBase != 0 || totalDebtBase != 0,\n      collateralAmountLiquidated, // todo it should return amount of collateral, not amount of a-tokens\n\n    // Debt gap should be used to pay the debt to workaround dust tokens problem.\n    // It means that the user should pay slightly higher amount than the current totalDebtBase.\n    // It give us a possibility to pass type(uint).max to repay function.\n    // see https://docs.aave.com/developers/core-contracts/pool#repay\n    // and \"Aave_Protocol_Whitepaper_v1_0.pdf\", section 3.8.1 \"It’s impossible to transfer the whole balance at once\"\n      true\n    );\n  }\n  //endregion ----------------------------------------------------- View current status\n\n  //region ----------------------------------------------------- Utils\n\n  /// @notice Validate that result health factor is correct, SCB-794\n  ///         1) If we make a borrow the health factor is correct if it's greater than the min allowed threshold.\n  ///         2) If we make repaying, the health factor is correct if\n  ///                   it's greater than the min allowed threshold\n  ///                   or it wasn't reduced too much\n  /// @param healthFactorAfter Value of health factor after the operation - the value to check\n  /// @param healthFactorBefore Value of health factor before the operation. 0 if borrow.\n  function _validateHealthFactor(\n    IConverterController controller_,\n    uint healthFactorAfter,\n    uint healthFactorBefore\n  ) internal view {\n    uint threshold = uint(controller_.minHealthFactor2()) * 10 ** (18 - 2);\n    uint reduction = healthFactorBefore > healthFactorAfter\n      ? healthFactorBefore - healthFactorAfter\n      : 0;\n    require(\n      healthFactorAfter >= threshold\n      || (healthFactorBefore != 0 && reduction < MAX_ALLOWED_HEALTH_FACTOR_REDUCTION),\n      AppErrors.WRONG_HEALTH_FACTOR\n    );\n  }\n\n  /// @notice Register borrow operation in Bookkeeper\n  function _registerInBookkeeperBorrow(\n    IConverterController controller_,\n    uint amountCollateral,\n    uint amountBorrow\n  ) internal {\n    IBookkeeper(controller_.bookkeeper()).onBorrow(amountCollateral, amountBorrow);\n  }\n\n  /// @notice Register repay operation in Bookkeeper\n  function _registerInBookkeeperRepay(\n    IConverterController controller_,\n    uint withdrawnCollateral,\n    uint paidAmount\n  ) internal {\n    IBookkeeper(controller_.bookkeeper()).onRepay(withdrawnCollateral, paidAmount);\n  }\n  //endregion ----------------------------------------------------- Utils\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/aave3/Aave3PoolAdapterEMode.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./Aave3PoolAdapterBase.sol\";\nimport \"../../integrations/aave3/Aave3ReserveConfiguration.sol\";\n\n/// @notice PoolAdapter for AAVE-v3-protocol that uses high efficiency borrow mode (E-mode)\n/// @dev https://docs.aave.com/faq/aave-v3-features#high-efficiency-mode-e-mode\ncontract Aave3PoolAdapterEMode\n  // we use inheritance to split normal/E-mode\n  // because all pool adapters are created using minimal proxy pattern\n  // and there is no way to pass additional params to standard initialize function\n  is Aave3PoolAdapterBase\n{\n\n  using Aave3ReserveConfiguration for Aave3DataTypes.ReserveConfigurationMap;\n\n  /// @notice Enter to E-mode\n  function prepareToBorrow() internal override {\n    Aave3DataTypes.ReserveData memory d = _pool.getReserveData(borrowAsset);\n    _pool.setUserEMode(uint8(d.configuration.getEModeCategory()));\n  }\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/aaveShared/AaveSharedLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @notice Utils shared by all AAVE protocols\nlibrary AaveSharedLib {\n  uint constant public COUNT_SECONDS_PER_YEAR = 365 days; // 31536000;\n  uint constant public RAY = 1e27;\n  uint constant public HALF_RAY = 0.5e27;\n\n  struct State {\n    uint liquidityIndex;\n    uint lastUpdateTimestamp;\n    uint rate;\n  }\n\n  //-----------------------------------------------------\n  // APR for period = result income/debt in period\n  //                  without any compound\n  // APR = user-balance-after - user-balance-before\n  // where user-balance = scaled-user-balance * N * price\n  // So,\n  //      APR = (SB_1 - SB_0) * N * price\n  // where N = normalized income / debt (for collateral / borrow)\n  //       N = rayMul(RAY + rate * dT / Sy, LI)\n  //       rayMul(x, y) => (x * y + HALF_RAY) / RAY\n  // where Sy = seconds per year = 31536000\n  //       dT = period in seconds\n  //       LI = liquidity index\n  //-----------------------------------------------------\n\n  /// @notice Calculate APR for period {countBlocks}.\n  ///         Assume that the calculations are made in the point AFTER supply/borrow operation.\n  ///         \"Cost\" is total amount of generated income/debt for the period in the terms of amount's asset\n  /// @param amount Amount of collateral or borrow\n  /// @param reserveNormalized Current value of normalized income / debt\n  /// @param liquidityIndex Value of liquidityIndex / variableBorrowIndex\n  /// @param predictedRate Predicted value of liquidity/borrow rate\n  /// @param countBlocks Duration of the period in blocks\n  /// @param blocksPerDay Count blocks per day (about 40 ths)\n  /// @param aprMultiplier Multiplier for result value (to increase precision)\n  /// @return Cost value in terms of source amount's asset tokens multiplied on aprMultiplier\n  function getCostForPeriodAfter(\n    uint amount,\n    uint reserveNormalized,\n    uint liquidityIndex,\n    uint predictedRate,\n    uint countBlocks,\n    uint blocksPerDay,\n    uint aprMultiplier\n  ) internal pure returns (uint) {\n    // calculate income/debt in the period of {countBlocks} since the supply/borrow operation\n    uint reserveNormalizedAfterPeriod = rayMul(\n      RAY + predictedRate * (\n        countBlocks * COUNT_SECONDS_PER_YEAR / (blocksPerDay * 365)  // count seconds\n        ) / COUNT_SECONDS_PER_YEAR,\n      liquidityIndex\n    );\n\n    return reserveNormalizedAfterPeriod < reserveNormalized\n      ? 0\n      : amount\n        * aprMultiplier\n        * (reserveNormalizedAfterPeriod - reserveNormalized)\n        / reserveNormalized;\n  }\n\n  /// @notice Calculate costs for period {countBlocks}.\n  ///         We assume, that the calculation is made just before the supply/borrow operation\n  ///         \"Costs\" is total amount of generated income/debt for the period in the terms of amount's asset\n  /// @param amount Amount of collateral or borrow\n  /// @param state Current state (before the supply/borrow operation)\n  /// @param predictedRate Predicted value of liquidity/borrow rate\n  /// @param countBlocks Duration of the period in blocks\n  /// @param blocksPerDay Count blocks per day (about 40 ths)\n  /// @param aprMultiplier Multiplier for result value (to increase precision)\n  /// @return Cost value in terms of source amount's asset tokens multiplied on aprMultiplier\n  function getCostForPeriodBefore(\n    State memory state,\n    uint amount,\n    uint predictedRate,\n    uint countBlocks,\n    uint blocksPerDay,\n    uint operationTimestamp,\n    uint aprMultiplier\n  ) internal pure returns (uint) {\n    // recalculate reserveNormalized and liquidityIndex after the supply/borrow operation\n    // For borrow we have only approx calculations here because we don't take into account compound effect\n    // for the period [state.lastUpdateTimestamp ... operationTimestamp]\n    uint liquidityIndexAfter = getNextLiquidityIndex(state, operationTimestamp);\n\n    return getCostForPeriodAfter(\n      amount,\n      liquidityIndexAfter, // reserveNormalizedAfter is the same as liquidityIndexAfter\n      liquidityIndexAfter,\n      predictedRate,\n      countBlocks,\n      blocksPerDay,\n      aprMultiplier\n    );\n  }\n\n  /// @notice Recalculate liquidityIndex after the supply/borrow operation\n  /// @param state State just before the supply/borrow operation\n  function getNextLiquidityIndex(\n    State memory state,\n    uint operationTimestamp\n  ) internal pure returns (uint) {\n    return rayMul(\n      RAY + (state.rate * (operationTimestamp - state.lastUpdateTimestamp) / COUNT_SECONDS_PER_YEAR),\n      state.liquidityIndex\n    );\n  }\n\n  function rayMul(uint x, uint y) internal pure returns (uint) {\n    return (x * y + HALF_RAY) / RAY;\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/aaveTwo/AaveTwoAprLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../aaveShared/AaveSharedLib.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoReserveInterestRateStrategy.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoPriceOracle.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoPool.sol\";\nimport \"../../integrations/aaveTwo/AaveTwoReserveConfiguration.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoAToken.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoStableDebtToken.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoProtocolDataProvider.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoLendingPoolAddressesProvider.sol\";\n\n/// @notice Library for AAVE v2 to calculate APR: borrow APR and supply APR\nlibrary AaveTwoAprLib {\n  using AaveTwoReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\n  /// @notice https://docs.aave.com/developers/v/2.0/the-core-protocol/protocol-data-provider\n  ///        Each market has a separate Protocol Data Provider.\n  ///        To get the address for a particular market, call getAddress() using the value 0x1.\n  uint internal constant ID_DATA_PROVIDER = 0x1000000000000000000000000000000000000000000000000000000000000000;\n\n  //-----------------------------------------------------\n  // Calculate borrow and liquidity rate in advance\n  // in same way as in AAVE v2 protocol\n  //-----------------------------------------------------\n\n  /// @notice Calculate estimate variable borrow rate after borrowing {amountToBorrow_}\n  /// @dev See explanations in Aave3AprLib.sol\n  function getVariableBorrowRateRays(\n    DataTypes.ReserveData memory rb_,\n    address borrowAsset_,\n    uint amountToBorrow_,\n    uint totalStableDebt_,\n    uint totalVariableDebt_\n  ) internal view returns (uint) {\n    if (amountToBorrow_ == 0) {\n      return rb_.currentVariableBorrowRate;\n    }\n\n    uint factor = rb_.configuration.getReserveFactor();\n    // see aave-v2-core, DefaultReserveInterestRateStrategy, calculateInterestRates impl\n    // to calculate new BR, we need to reduce liquidity on borrowAmount and increase the debt on the same amount\n    (,, uint variableBorrowRateRays) = IAaveTwoReserveInterestRateStrategy(\n      rb_.interestRateStrategyAddress\n    ).calculateInterestRates(\n        borrowAsset_,\n        rb_.aTokenAddress,\n        0,\n        amountToBorrow_,\n        totalStableDebt_,\n        totalVariableDebt_ + amountToBorrow_,\n        // we can pass dummy value here, because averageStableBorrowRate is not used in variableBorrowRate-calculations\n        rb_.currentStableBorrowRate,\n        factor\n      );\n\n    return variableBorrowRateRays;\n  }\n\n  /// @notice calculate liquidityRate for collateral token after supplying {amountToSupply_} in terms of borrow tokens\n  function getLiquidityRateRays(\n    DataTypes.ReserveData memory rc_,\n    address collateralAsset_,\n    uint amountToSupply_,\n    uint totalStableDebt_,\n    uint totalVariableDebt_\n  ) internal view returns (uint) {\n    // see aave-v3-core, ReserveLogic.sol, updateInterestRates\n    (, uint avgStableRate) = IAaveTwoStableDebtToken(rc_.stableDebtTokenAddress).getTotalSupplyAndAvgRate();\n\n    // see aave-v3-core, DefaultReserveInterestRateStrategy, calculateInterestRates impl\n    uint factor = rc_.configuration.getReserveFactor();\n    (uint liquidityRateRays,,) = IAaveTwoReserveInterestRateStrategy(rc_.interestRateStrategyAddress)\n      .calculateInterestRates(\n        collateralAsset_,\n        rc_.aTokenAddress,\n        amountToSupply_,\n        0,\n        totalStableDebt_,\n        totalVariableDebt_,\n        avgStableRate,\n        factor\n      );\n\n    return liquidityRateRays;\n  }\n\n  /// @notice Estimate value of variable borrow rate after borrowing {amountToBorrow_}\n  function getBorrowRateAfterBorrow(\n    address pool_,\n    address borrowAsset_,\n    uint amountToBorrow_\n  ) internal view returns (uint) {\n    IAaveTwoPool pool = IAaveTwoPool(pool_);\n    DataTypes.ReserveData memory rb = pool.getReserveData(borrowAsset_);\n\n    (, uint totalStableDebt, uint totalVariableDebt,,,,,,,) = IAaveTwoProtocolDataProvider(\n      IAaveTwoLendingPoolAddressesProvider(pool.getAddressesProvider()).getAddress(bytes32(ID_DATA_PROVIDER))\n    ).getReserveData(borrowAsset_);\n\n    return AaveTwoAprLib.getVariableBorrowRateRays(\n      rb,\n      borrowAsset_,\n      amountToBorrow_,\n      totalStableDebt,\n      totalVariableDebt\n    );\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/aaveTwo/AaveTwoPlatformAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../libs/EntryKinds.sol\";\nimport \"../../interfaces/IPlatformAdapter.sol\";\nimport \"../../interfaces/IPoolAdapterInitializer.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoPool.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoLendingPoolAddressesProvider.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoPriceOracle.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoProtocolDataProvider.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoAToken.sol\";\nimport \"../../integrations/aaveTwo/AaveTwoReserveConfiguration.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoReserveInterestRateStrategy.sol\";\nimport \"./AaveTwoAprLib.sol\";\n\n/// @notice Adapter to read current pools info from AAVE-v2-protocol, see https://docs.aave.com/hub/\ncontract AaveTwoPlatformAdapter is IPlatformAdapter {\n  using SafeERC20 for IERC20;\n  using AaveTwoReserveConfiguration for DataTypes.ReserveConfigurationMap;\n\n  //region ----------------------------------------------------- Constants\n  string public constant override PLATFORM_ADAPTER_VERSION = \"1.0.4\";\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Data types\n\n  /// @notice Local vars inside getConversionPlan - to avoid stack too deep\n  struct LocalsGetConversionPlan {\n    IAaveTwoPool pool;\n    IAaveTwoLendingPoolAddressesProvider addressProvider;\n    IAaveTwoPriceOracle priceOracle;\n    IConverterController controller;\n    DataTypes.ReserveData rc;\n    DataTypes.ReserveData rb;\n    uint availableLiquidity;\n    uint totalStableDebt;\n    uint totalVariableDebt;\n    uint blocksPerDay;\n    uint healthFactor18;\n    uint entryKind;\n  }\n  //endregion ----------------------------------------------------- Data types\n\n  //region ----------------------------------------------------- Variables\n\n  IConverterController immutable public controller;\n  IAaveTwoPool immutable public pool;\n  /// @notice template-pool-adapter\n  address immutable public converter;\n  /// @dev Same as controller.borrowManager(); we cache it for gas optimization\n  address immutable public borrowManager;\n\n  /// @notice True if the platform is frozen and new borrowing is not possible (at this moment)\n  bool public override frozen;\n  //endregion ----------------------------------------------------- Variables\n\n  //region ----------------------------------------------------- Events\n  event OnPoolAdapterInitialized(address converter, address poolAdapter, address user, address collateralAsset, address borrowAsset);\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Constructor and initialization\n\n  constructor (address controller_, address borrowManager_, address poolAave_, address templateAdapterNormal_) {\n    require(\n      poolAave_ != address(0)\n      && borrowManager_ != address(0)\n      && templateAdapterNormal_ != address(0)\n      && controller_ != address(0),\n      AppErrors.ZERO_ADDRESS\n    );\n    pool = IAaveTwoPool(poolAave_);\n    controller = IConverterController(controller_);\n    converter = templateAdapterNormal_;\n    borrowManager = borrowManager_;\n  }\n\n  function initializePoolAdapter(address converter_, address poolAdapter_, address user_, address collateralAsset_, address borrowAsset_) external override {\n    require(msg.sender == borrowManager, AppErrors.BORROW_MANAGER_ONLY);\n    require(converter == converter_, AppErrors.CONVERTER_NOT_FOUND);\n\n    // All AAVE-pool-adapters support IPoolAdapterInitializer\n    IPoolAdapterInitializer(poolAdapter_).initialize(\n      address(controller),\n      address(pool),\n      user_,\n      collateralAsset_,\n      borrowAsset_,\n      converter_\n    );\n\n    emit OnPoolAdapterInitialized(converter_, poolAdapter_, user_, collateralAsset_, borrowAsset_);\n  }\n\n  /// @notice Set platform to frozen/unfrozen state. In frozen state any new borrowing is forbidden.\n  function setFrozen(bool frozen_) external {\n    require(msg.sender == controller.governance(), AppErrors.GOVERNANCE_ONLY);\n    frozen = frozen_;\n  }\n  //endregion ----------------------------------------------------- Constructor and initialization\n\n  //region ----------------------------------------------------- View\n\n  function converters() external view override returns (address[] memory) {\n    address[] memory dest = new address[](1);\n    dest[0] = converter;\n    return dest;\n  }\n\n  function platformKind() external pure returns (AppDataTypes.LendingPlatformKinds) {\n    return AppDataTypes.LendingPlatformKinds.AAVE2_2;\n  }\n\n  //endregion ----------------------------------------------------- View\n\n  //region ----------------------------------------------------- Get conversion plan\n\n  function getConversionPlan(AppDataTypes.InputConversionParams memory params, uint16 healthFactor2_) external view override returns (\n    AppDataTypes.ConversionPlan memory plan\n  ) {\n    if (! frozen) {\n      AppDataTypes.PricesAndDecimals memory pd;\n      LocalsGetConversionPlan memory vars;\n      vars.controller = controller;\n\n      require(params.collateralAsset != address(0) && params.borrowAsset != address(0), AppErrors.ZERO_ADDRESS);\n      require(params.amountIn != 0 && params.countBlocks != 0, AppErrors.INCORRECT_VALUE);\n      require(healthFactor2_ >= vars.controller.minHealthFactor2(), AppErrors.WRONG_HEALTH_FACTOR);\n\n      vars.pool = pool;\n\n      vars.addressProvider = IAaveTwoLendingPoolAddressesProvider(vars.pool.getAddressesProvider());\n      vars.priceOracle = IAaveTwoPriceOracle(vars.addressProvider.getPriceOracle());\n\n      vars.rc = vars.pool.getReserveData(params.collateralAsset);\n\n      if (_isUsable(vars.rc.configuration) &&  _isCollateralUsageAllowed(vars.rc.configuration)) {\n        vars.rb = vars.pool.getReserveData(params.borrowAsset);\n        if (_isUsable(vars.rb.configuration) && vars.rb.configuration.getBorrowingEnabled()) {\n          //------------------------------- Calculate maxAmountToSupply and maxAmountToBorrow\n          // availableLiquidity is IERC20(borrowToken).balanceOf(atoken)\n          (vars.availableLiquidity, vars.totalStableDebt, vars.totalVariableDebt) = _getReserveData(params.borrowAsset, vars.rb);\n\n          plan.maxAmountToSupply = type(uint).max; // unlimited; fix validation below after changing this value\n          plan.maxAmountToBorrow = vars.availableLiquidity;\n\n          if (/* plan.maxAmountToSupply != 0 &&*/ plan.maxAmountToBorrow != 0) {\n            pd.rc10powDec = 10**vars.rc.configuration.getDecimals();\n            pd.rb10powDec = 10**vars.rb.configuration.getDecimals();\n\n            //-------------------------------- converter, LTV and liquidation threshold\n            // get liquidation threshold (== collateral factor) and loan-to-value (LTV)\n            // we should use both LTV and liquidationThreshold of collateral asset (not borrow asset)\n            // see test \"Borrow: check LTV and liquidationThreshold\"\n            plan.ltv18 = uint(vars.rc.configuration.getLtv()) * 10**(18-4);\n            plan.liquidationThreshold18 = uint(vars.rc.configuration.getLiquidationThreshold()) * 10**(18-4);\n            plan.converter = converter; // can be changed later\n\n            //-------------------------------- Prices and health factor\n            vars.blocksPerDay = vars.controller.blocksPerDay();\n            pd.priceCollateral = vars.priceOracle.getAssetPrice(params.collateralAsset);\n            pd.priceBorrow = vars.priceOracle.getAssetPrice(params.borrowAsset);\n\n            // AAVE has min allowed health factor at the borrow moment: liquidationThreshold18/LTV, i.e. 0.85/0.8=1.06...\n            // Target health factor can be smaller but it's not possible to make a borrow with such low health factor\n            // see explanation of health factor value in IConverterController.sol\n            vars.healthFactor18 = plan.liquidationThreshold18 * 1e18 / plan.ltv18;\n            if (vars.healthFactor18 < uint(healthFactor2_) * 10**(18 - 2)) {\n              vars.healthFactor18 = uint(healthFactor2_) * 10**(18 - 2);\n            } else {\n              // healthFactor = liquidationThreshold18 / ltv18 - is min allowed health factor\n              // but real health factor should be higher - we need some reserve\n              vars.healthFactor18 = vars.healthFactor18 * healthFactor2_ / vars.controller.minHealthFactor2();\n            }\n\n            //------------------------------- Calculate collateralAmount and amountToBorrow\n            // calculate amount that can be borrowed and amount that should be provided as the collateral\n            vars.entryKind = EntryKinds.getEntryKind(params.entryData);\n            if (vars.entryKind == EntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\n              plan.collateralAmount = params.amountIn;\n              plan.amountToBorrow = EntryKinds.exactCollateralInForMaxBorrowOut(\n                params.amountIn,\n                vars.healthFactor18,\n                plan.liquidationThreshold18,\n                pd,\n                false // prices have decimals 18, not 36\n              );\n            } else if (vars.entryKind == EntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\n              (plan.collateralAmount, plan.amountToBorrow) = EntryKinds.exactProportion(\n                params.amountIn,\n                vars.healthFactor18,\n                plan.liquidationThreshold18,\n                pd,\n                params.entryData,\n                false // prices have decimals 18, not 36\n              );\n            } else if (vars.entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2) {\n              plan.amountToBorrow = params.amountIn;\n              plan.collateralAmount = EntryKinds.exactBorrowOutForMinCollateralIn(\n                params.amountIn,\n                vars.healthFactor18,\n                plan.liquidationThreshold18,\n                pd,\n                false // prices have decimals 18, not 36\n              );\n            }\n\n            //------------------------------- Validate the borrow\n            if (plan.amountToBorrow == 0 || plan.collateralAmount == 0) {\n              plan.converter = address(0);\n            } else {\n              // reduce collateral amount and borrow amount proportionally to fit available limits\n              // we don't need to check \"plan.collateralAmount > plan.maxAmountToSupply\" as in AAVE3\n              // because maxAmountToSupply is always equal to type(uint).max\n              if (plan.amountToBorrow > plan.maxAmountToBorrow) {\n                plan.collateralAmount = plan.collateralAmount * plan.maxAmountToBorrow / plan.amountToBorrow;\n                plan.amountToBorrow = plan.maxAmountToBorrow;\n              }\n\n              //------------------------------- values for APR\n              plan.borrowCost36 = AaveSharedLib.getCostForPeriodBefore(\n                AaveSharedLib.State({\n                  liquidityIndex: vars.rb.variableBorrowIndex,\n                  lastUpdateTimestamp: uint(vars.rb.lastUpdateTimestamp),\n                  rate: vars.rb.currentVariableBorrowRate\n                }),\n                plan.amountToBorrow,\n              //predicted borrow ray after the borrow\n                AaveTwoAprLib.getVariableBorrowRateRays(\n                  vars.rb,\n                  params.borrowAsset,\n                  plan.amountToBorrow,\n                  vars.totalStableDebt,\n                  vars.totalVariableDebt\n                ),\n                params.countBlocks,\n                vars.blocksPerDay,\n                block.timestamp, // assume, that we make borrow in the current block\n                1e18 // multiplier to increase result precision\n              )\n              * 10**18 // we need decimals 36, but the result is already multiplied on 1e18 by multiplier above\n              / pd.rb10powDec;\n              (, vars.totalStableDebt, vars.totalVariableDebt) = _getReserveData(params.collateralAsset, vars.rc);\n\n              // calculate supply-APR, see detailed explanation in Aave3AprLib\n              plan.supplyIncomeInBorrowAsset36 = AaveSharedLib.getCostForPeriodBefore(\n                AaveSharedLib.State({\n                  liquidityIndex: vars.rc.liquidityIndex,\n                  lastUpdateTimestamp: uint(vars.rc.lastUpdateTimestamp),\n                  rate: vars.rc.currentLiquidityRate\n                }),\n                plan.collateralAmount,\n                AaveTwoAprLib.getLiquidityRateRays(\n                  vars.rc,\n                  params.collateralAsset,\n                  plan.collateralAmount,\n                  vars.totalStableDebt,\n                  vars.totalVariableDebt\n                ),\n                params.countBlocks,\n                vars.blocksPerDay,\n                block.timestamp, // assume, that we supply collateral in the current block\n                1e18 // multiplier to increase result precision\n              )\n              // we need a value in terms of borrow tokens with decimals 18\n              * 1e18 // we need decimals 36, but the result is already multiplied on 1e18 by multiplier above\n              * pd.priceCollateral\n              / pd.priceBorrow\n              / pd.rc10powDec;\n\n              plan.amountCollateralInBorrowAsset36 =\n                plan.collateralAmount\n                * 1e18\n                * pd.priceCollateral\n                / pd.priceBorrow\n                * 1e18\n                / pd.rc10powDec;\n            }\n          } // else either max borrow or max supply amount is zero\n        } // else the borrowing is not enabled\n      } // else the collateral is not allowed\n    }\n\n    if (plan.converter == address(0)) {\n      AppDataTypes.ConversionPlan memory planNotFound;\n      return planNotFound;\n    } else {\n      return plan;\n    }\n  }\n\n  /// @notice Get total amounts for the given asset\n  /// @dev We don't use dataProvider.getReserveData, because it returns 13 variables and we have stack-too-deep problem\n  ///      on coverage if include this file to converter.sol in tetu-v2-strategies, see SCB-799\n  function _getReserveData(address asset, DataTypes.ReserveData memory reserve) internal view returns (\n    uint availableLiquidity,\n    uint totalStableDebt,\n    uint totalVariableDebt\n  ) {\n    // see aave-v2-protocol, AaveProtocolDataProvider.sol, getReserveData implementation\n    availableLiquidity = IERC20(asset).balanceOf(reserve.aTokenAddress);\n    totalStableDebt = IERC20(reserve.stableDebtTokenAddress).totalSupply();\n    totalVariableDebt = IERC20(reserve.variableDebtTokenAddress).totalSupply();\n  }\n  //endregion ----------------------------------------------------- Get conversion plan\n\n  //region ----------------------------------------------------- Utils\n\n  /// @notice Check if the asset can be used as a collateral\n  /// @dev Some assets cannot be used as collateral: https://docs.aave.com/risk/asset-risk/risk-parameters#collaterals\n  /// @param data DataTypes.ReserveData.configuration.data\n  function _isCollateralUsageAllowed(DataTypes.ReserveConfigurationMap memory data) internal pure returns (bool) {\n    // see AaveProtocolDataProvider.getReserveConfigurationData impl\n    return data.getLiquidationThreshold() != 0;\n  }\n\n  /// @notice Check if the asset active, not frozen, not paused\n  /// @param data DataTypes.ReserveData.configuration.data\n  function _isUsable(DataTypes.ReserveConfigurationMap memory data) internal pure returns (bool) {\n    return data.getActive() && ! data.getFrozen();\n  }\n  //endregion ----------------------------------------------------- Utils\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/aaveTwo/AaveTwoPoolAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../openzeppelin/Initializable.sol\";\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"../../interfaces/IPoolAdapter.sol\";\nimport \"../../interfaces/IPoolAdapterInitializer.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../interfaces/IDebtMonitor.sol\";\nimport \"../../interfaces/IBookkeeper.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoPool.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoPriceOracle.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoLendingPoolAddressesProvider.sol\";\nimport \"../../integrations/aaveTwo/AaveTwoReserveConfiguration.sol\";\nimport \"../../integrations/aaveTwo/IAaveTwoAToken.sol\";\nimport \"../../integrations/dforce/SafeRatioMath.sol\";\nimport \"../aaveShared/AaveSharedLib.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/AppUtils.sol\";\n\n/// @notice Implementation of IPoolAdapter for AAVE-v2-protocol, see https://docs.aave.com/hub/\n/// @dev Instances of this contract are created using proxy-minimal pattern, so no constructor\ncontract AaveTwoPoolAdapter is IPoolAdapter, IPoolAdapterInitializer, Initializable {\n  using SafeERC20 for IERC20;\n  using AaveTwoReserveConfiguration for DataTypes.ReserveConfigurationMap;\n  using SafeRatioMath for uint;\n\n  //region ----------------------------------------------------- Constants\n  /// @notice We allow to receive less atokens then provided collateral on following value\n  /// @dev Sometime, we provide collateral=1000000000000000000000 and receive atokens=999999999999999999999\n  uint constant public ATOKEN_MAX_DELTA = 10;\n  string public constant POOL_ADAPTER_VERSION = \"1.0.4\";\n\n  /// @notice 1 - stable, 2 - variable\n  uint constant public RATE_MODE = 2;\n\n  /// @notice repay allows to reduce health factor of following value (decimals 18):\n  uint constant public MAX_ALLOWED_HEALTH_FACTOR_REDUCTION = 1e13; // 0.001%\n\n  /// @notice amount of collateral in terms of ETH that cannot be used in any case during partial repayment\n  ///         we need such reserve because of SCB-796\n  ///         without it health factor can reduce after partial repayment in edge cases because of rounding\n  ///         ETH has 8 decimals, usdc/usdt have 6 decimals.. we need > 100 tokens in reserve\n  uint constant internal COLLATERAL_RESERVE_BASE_CURRENCY = 1000;\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Variables\n  address public collateralAsset;\n  address public borrowAsset;\n  address public user;\n\n  IConverterController public controller;\n  IAaveTwoPool internal _pool;\n\n  /// @notice Address of original PoolAdapter contract that was cloned to make the instance of the pool adapter\n  address originConverter;\n\n  /// @notice Total amount of all supplied and withdrawn amounts of collateral in A-tokens\n  uint public collateralBalanceATokens;\n  //endregion ----------------------------------------------------- Variables\n\n  //region ----------------------------------------------------- Events\n  event OnInitialized(address controller, address pool, address user, address collateralAsset, address borrowAsset, address originConverter);\n  event OnBorrow(uint collateralAmount, uint borrowAmount, address receiver, uint resultHealthFactor18, uint collateralBalanceATokens);\n  event OnBorrowToRebalance(uint borrowAmount, address receiver, uint resultHealthFactor18);\n  event OnRepay(uint amountToRepay, address receiver, bool closePosition, uint resultHealthFactor18, uint collateralBalanceATokens);\n  event OnRepayToRebalance(uint amount, bool isCollateral, uint resultHealthFactor18, uint collateralBalanceATokens);\n  event OnSalvage(address receiver, address token, uint amount);\n\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Data types\n  struct RepayLocal {\n    address assetBorrow;\n    address assetCollateral;\n    IAaveTwoPool pool;\n    uint aTokensBeforeSupply;\n    uint aTokensAfterSupply;\n    uint amountCollateralToWithdraw;\n    uint healthFactorBefore;\n    uint healthFactorAfter;\n    uint collateralBalanceATokens;\n  }\n  //endregion ----------------------------------------------------- Data types\n\n\n  //region ----------------------------------------------------- Initialization\n\n  function initialize(\n    address controller_,\n    address pool_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    address originConverter_\n  ) override external\n    // Borrow Manager creates a pool adapter using minimal proxy pattern, adds it the the set of known pool adapters\n    // and initializes it immediately. We should ensure only that the re-initialization is not possible\n  initializer\n  {\n    require(\n      controller_ != address(0)\n      && user_ != address(0)\n      && pool_ != address(0)\n      && collateralAsset_ != address(0)\n      && borrowAsset_ != address(0)\n      && originConverter_ != address(0),\n      AppErrors.ZERO_ADDRESS\n    );\n\n    controller = IConverterController(controller_);\n    user = user_;\n    collateralAsset = collateralAsset_;\n    borrowAsset = borrowAsset_;\n    originConverter = originConverter_;\n\n    _pool = IAaveTwoPool(pool_);\n\n    // The pool adapter doesn't keep assets on its balance, so it's safe to use infinity approve\n    // All approves replaced by infinity-approve were commented in the code below\n    IERC20(collateralAsset_).safeApprove(pool_, 2**255); // 2*255 is more gas-efficient than type(uint).max\n    IERC20(borrowAsset_).safeApprove(pool_, 2**255); // 2*255 is more gas-efficient than type(uint).max\n\n    emit OnInitialized(controller_, pool_, user_, collateralAsset_, borrowAsset_, originConverter_);\n  }\n\n  /// @notice Save any not aToken from balance to {receiver}\n  /// @dev Normally this contract doesn't have any tokens on balance except aTokens\n  function salvage(address receiver, address token, uint amount) external {\n    require(msg.sender == controller.governance(), AppErrors.GOVERNANCE_ONLY);\n    IAaveTwoPool __pool = _pool;\n    DataTypes.ReserveData memory rc = __pool.getReserveData(collateralAsset);\n    DataTypes.ReserveData memory rb = __pool.getReserveData(borrowAsset);\n    require(token != rc.aTokenAddress && token != rb.aTokenAddress, AppErrors.UNSALVAGEABLE);\n\n    IERC20(token).safeTransfer(receiver, amount);\n    emit OnSalvage(receiver, token, amount);\n  }\n\n  //endregion ----------------------------------------------------- Initialization\n\n  //region ----------------------------------------------------- Restrictions\n\n  /// @notice Ensure that the caller is TetuConverter\n  function _onlyTetuConverter(IConverterController controller_) internal view {\n    require(controller_.tetuConverter() == msg.sender, AppErrors.TETU_CONVERTER_ONLY);\n  }\n\n  function updateStatus() external override {\n    // empty function, no restrictions\n    // nothing to do; getStatus always return actual amounts in AAVE\n  }\n  //endregion ----------------------------------------------------- Restrictions\n\n  //region ----------------------------------------------------- Borrow logic\n\n  /// @notice Supply collateral to the pool and borrow specified amount\n  /// @dev No re-balancing here; Collateral amount must be approved to the pool adapter before the call of this function\n  /// @param collateralAmount_ Amount of collateral, must be approved to the pool adapter before the call of borrow()\n  /// @param borrowAmount_ Amount that should be borrowed in result\n  /// @param receiver_ Receiver of the borrowed amount\n  /// @return Result borrowed amount sent to the {receiver_}\n  function borrow(\n    uint collateralAmount_,\n    uint borrowAmount_,\n    address receiver_\n  ) external override returns (uint) {\n    IConverterController c = controller;\n    _onlyTetuConverter(c);\n\n    IAaveTwoPool pool = _pool;\n    address assetBorrow = borrowAsset;\n\n    uint newCollateralBalanceATokens = _supply(pool, collateralAsset, collateralAmount_) + collateralBalanceATokens;\n    collateralBalanceATokens = newCollateralBalanceATokens;\n\n    // make borrow, send borrowed amount to the receiver\n    // we cannot transfer borrowed amount directly to receiver because the debt is incurred by amount receiver\n    uint balanceBorrowAsset0 = IERC20(assetBorrow).balanceOf(address(this));\n    pool.borrow(\n      assetBorrow,\n      borrowAmount_,\n      RATE_MODE,\n      0, // no referral code\n      address(this)\n    );\n\n    // ensure that we have received required borrowed amount, send the amount to the receiver\n    require(\n      borrowAmount_ + balanceBorrowAsset0 == IERC20(assetBorrow).balanceOf(address(this)),\n      AppErrors.WRONG_BORROWED_BALANCE\n    );\n    IERC20(assetBorrow).safeTransfer(receiver_, borrowAmount_);\n\n    // register the borrow in DebtMonitor\n    IDebtMonitor(c.debtMonitor()).onOpenPosition();\n\n    // ensure that current health factor is greater than min allowed\n    (,,,,, uint256 healthFactor) = pool.getUserAccountData(address(this));\n    _validateHealthFactor(c, healthFactor, 0);\n\n    _registerInBookkeeperBorrow(c, collateralAmount_, borrowAmount_);\n    emit OnBorrow(collateralAmount_, borrowAmount_, receiver_, healthFactor, newCollateralBalanceATokens);\n    return borrowAmount_;\n  }\n\n  /// @notice Supply collateral to AAVE-pool\n  /// @return Amount of received A-tokens\n  function _supply(\n    IAaveTwoPool pool_,\n    address assetCollateral_,\n    uint collateralAmount_\n  ) internal returns (uint) {\n    //a-tokens\n    DataTypes.ReserveData memory d = pool_.getReserveData(assetCollateral_);\n    uint aTokensBalanceBeforeSupply = IERC20(d.aTokenAddress).balanceOf(address(this));\n\n    IERC20(assetCollateral_).safeTransferFrom(msg.sender, address(this), collateralAmount_);\n\n    // Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n    // E.g. User supplies 100 USDC and gets in return 100 aUSDC\n    // replaced by infinity approve: IERC20(assetCollateral_).safeApprove(address(pool_), collateralAmount_);\n    pool_.deposit(\n      assetCollateral_,\n      collateralAmount_,\n      address(this),\n      0 // no referral code\n    );\n    pool_.setUserUseReserveAsCollateral(assetCollateral_, true);\n\n    uint aTokensBalanceAfterSupply = IERC20(d.aTokenAddress).balanceOf(address(this));\n\n    // deposit() shouldn't reduce balance..\n    // but let's check it to avoid even possibility of the overflow in aTokensAmount calculation\n    require(aTokensBalanceAfterSupply >= aTokensBalanceBeforeSupply, AppErrors.WEIRD_OVERFLOW);\n\n    uint aTokensAmount = aTokensBalanceAfterSupply - aTokensBalanceBeforeSupply;\n    require(aTokensAmount + ATOKEN_MAX_DELTA >= collateralAmount_, AppErrors.WRONG_DERIVATIVE_TOKENS_BALANCE);\n\n    return aTokensAmount;\n  }\n\n  /// @notice Borrow additional amount {borrowAmount_} using exist collateral and send it to {receiver_}\n  /// @dev Re-balance: too big health factor => target health factor\n  /// @return resultHealthFactor18 Result health factor after borrow\n  /// @return borrowedAmountOut Exact amount sent to the borrower\n  function borrowToRebalance(\n    uint borrowAmount_,\n    address receiver_\n  ) external override returns (\n    uint resultHealthFactor18,\n    uint borrowedAmountOut\n  ) {\n    IConverterController c = controller;\n    _onlyTetuConverter(c);\n\n    IAaveTwoPool pool = _pool;\n    address assetBorrow = borrowAsset;\n\n    // ensure that the position is opened\n    require(IDebtMonitor(c.debtMonitor()).isPositionOpened(), AppErrors.BORROW_POSITION_IS_NOT_REGISTERED);\n\n    // make borrow, send borrowed amount to the receiver\n    // we cannot transfer borrowed amount directly to receiver because the debt is incurred by amount receiver\n    uint balanceBorrowAsset0 = IERC20(assetBorrow).balanceOf(address(this));\n    pool.borrow(\n      assetBorrow,\n      borrowAmount_,\n      RATE_MODE,\n      0, // no referral code\n      address(this)\n    );\n\n    // ensure that we have received required borrowed amount, send the amount to the receiver\n    // we assume here, that syncBalance(true) is called before the call of this function\n    require(\n      borrowAmount_ + balanceBorrowAsset0 == IERC20(assetBorrow).balanceOf(address(this)),\n      AppErrors.WRONG_BORROWED_BALANCE\n    );\n    IERC20(assetBorrow).safeTransfer(receiver_, borrowAmount_);\n\n    // ensure that current health factor is greater than min allowed\n    (,,,,, resultHealthFactor18) = pool.getUserAccountData(address(this));\n    _validateHealthFactor(c, resultHealthFactor18, 0);\n\n    _registerInBookkeeperBorrow(c, 0, borrowAmount_);\n    emit OnBorrowToRebalance(borrowAmount_, receiver_, resultHealthFactor18);\n    return (resultHealthFactor18, borrowAmount_);\n  }\n  //endregion ----------------------------------------------------- Borrow logic\n\n  //region ----------------------------------------------------- Repay logic\n\n  /// @notice Repay borrowed amount, return collateral to the user\n  /// @param amountToRepay_ Exact amount of borrow asset that should be repaid\n  ///                       The amount should be approved for the pool adapter before the call of repay()\n  /// @param closePosition_ true to pay full borrowed amount\n  /// @param receiver_ Receiver of withdrawn collateral\n  /// @return Amount of collateral asset sent to the {receiver_}\n  function repay(uint amountToRepay_, address receiver_, bool closePosition_) external override returns (uint) {\n    RepayLocal memory v;\n\n    IConverterController c = controller;\n    _onlyTetuConverter(c);\n\n    v.assetCollateral = collateralAsset;\n    v.assetBorrow = borrowAsset;\n    v.pool = _pool;\n\n    IERC20(v.assetBorrow).safeTransferFrom(msg.sender, address(this), amountToRepay_);\n    DataTypes.ReserveData memory rc = v.pool.getReserveData(v.assetCollateral);\n    v.aTokensBeforeSupply = IERC20(rc.aTokenAddress).balanceOf(address(this));\n\n    // how much collateral we are going to return\n    (v.amountCollateralToWithdraw, v.healthFactorBefore) = _getCollateralAmountToReturn(\n      v.pool,\n      amountToRepay_,\n      v.assetCollateral,\n      v.assetBorrow,\n      closePosition_,\n      rc.configuration.getDecimals(),\n      IAaveTwoPriceOracle(IAaveTwoLendingPoolAddressesProvider(IAaveTwoPool(v.pool).getAddressesProvider()).getPriceOracle())\n    );\n\n    // transfer borrow amount back to the pool\n    // replaced by infinity approve: IERC20(assetBorrow).approve(address(pool), amountToRepay_);\n\n    v.pool.repay(v.assetBorrow, (closePosition_ ? type(uint).max : amountToRepay_), RATE_MODE, address(this));\n\n    // withdraw the collateral\n\n    {\n      // if the position is closed, amountCollateralToWithdraw contains type(uint).max\n      // so, we need to calculate actual amount of returned collateral through balance difference\n      uint balanceUserCollateralBefore = IERC20(v.assetCollateral).balanceOf(receiver_);\n      v.pool.withdraw(v.assetCollateral, v.amountCollateralToWithdraw, receiver_); // amountCollateralToWithdraw == type(uint).max\n      uint balanceUserCollateralAfter = IERC20(v.assetCollateral).balanceOf(receiver_);\n      v.amountCollateralToWithdraw = AppUtils.sub0(balanceUserCollateralAfter, balanceUserCollateralBefore);\n    }\n\n    {\n      // user has transferred a little bigger amount than actually need to close position\n      // because of the dust-tokens problem. Let's return remain amount back to the user\n      uint borrowBalance = IERC20(v.assetBorrow).balanceOf(address(this));\n      if (borrowBalance != 0) {\n        // we assume here that the pool adapter has balance of 0 in normal case, any leftover should be send to\n        IERC20(v.assetBorrow).safeTransfer(receiver_, borrowBalance);\n        // adjust amountToRepay_ to returned amount to send correct amount to OnRepay event\n        if (amountToRepay_ > borrowBalance) {\n          amountToRepay_ -= borrowBalance;\n        }\n      }\n    }\n\n    // validate result status\n    {\n      uint totalCollateralBase;\n      uint totalDebtBase;\n      (totalCollateralBase, totalDebtBase,,,, v.healthFactorAfter) = v.pool.getUserAccountData(address(this));\n      if (totalCollateralBase == 0 && totalDebtBase == 0) {\n        IDebtMonitor(c.debtMonitor()).onClosePosition();\n      } else {\n        require(!closePosition_, AppErrors.CLOSE_POSITION_FAILED);\n        _validateHealthFactor(c, v.healthFactorAfter, v.healthFactorBefore);\n      }\n    }\n\n    v.aTokensAfterSupply = IERC20(rc.aTokenAddress).balanceOf(address(this));\n\n    require(v.aTokensBeforeSupply >= v.aTokensAfterSupply, AppErrors.WEIRD_OVERFLOW);\n    v.collateralBalanceATokens = AppUtils.sub0(collateralBalanceATokens, v.aTokensBeforeSupply - v.aTokensAfterSupply);\n    collateralBalanceATokens = v.collateralBalanceATokens;\n\n    _registerInBookkeeperRepay(c, v.amountCollateralToWithdraw, amountToRepay_);\n    emit OnRepay(amountToRepay_, receiver_, closePosition_, v.healthFactorAfter, v.collateralBalanceATokens);\n    return v.amountCollateralToWithdraw;\n  }\n\n  /// @notice Get a part of collateral safe to return after repaying {amountToRepay_}\n  /// @param amountToRepay_ Amount to be repaid [in borrowed tokens]\n  /// @return amountCollateralToWithdraw Amount of collateral [in collateral tokens]\n  ///         to be returned in exchange of {borrowedAmount_}\n  ///         Return type(uint).max if it's full repay and the position should be closed\n  /// @return healthFactor18 Current value of the health factor\n  function _getCollateralAmountToReturn(\n    IAaveTwoPool pool_,\n    uint amountToRepay_,\n    address assetCollateral_,\n    address assetBorrow_,\n    bool closePosition_,\n    uint collateralDecimals,\n    IAaveTwoPriceOracle priceOracle_\n  ) internal view returns (\n    uint amountCollateralToWithdraw,\n    uint healthFactor18\n  ) {\n    // get total amount of the borrow position\n    uint256 totalCollateralBase;\n    uint256 totalDebtBase;\n    (totalCollateralBase, totalDebtBase,,,, healthFactor18) = pool_.getUserAccountData(address(this));\n    require(totalDebtBase != 0, AppErrors.ZERO_BALANCE);\n\n    uint borrowPrice =  priceOracle_.getAssetPrice(assetBorrow_);\n    require(borrowPrice != 0, AppErrors.ZERO_PRICE);\n\n    uint amountToRepayBase = amountToRepay_ * borrowPrice / (10 ** IERC20Metadata(assetBorrow_).decimals());\n\n    if (closePosition_ || amountToRepayBase >= totalDebtBase) {\n      // we cannot close position and pay the debt only partly\n      require(totalDebtBase <= amountToRepayBase, AppErrors.CLOSE_POSITION_PARTIAL);\n      return (type(uint).max, healthFactor18);\n    } else {\n      // the assets prices in the base currency\n      uint collateralPrice = priceOracle_.getAssetPrice(assetCollateral_);\n      require(collateralPrice != 0, AppErrors.ZERO_PRICE);\n\n      return (\n      // SCB-796:\n      //   We need to calculate total amount in terms of the collateral asset at first and only then take part of it.\n      //   Also we should keep a few tokens untouched as a reserve\n      //   to prevent decreasing of health factor in edge cases because of rounding error\n      //   (we are going to return 0.000014 usdc, but 0.000015 are returned)\n      //\n      // totalCollateralBase and collateralPrice have decimals of ETH\n      // in result we have an amount in terms of collateral asset.\n      //\n      // == totalCollateral * part, part = amountToRepay / totalDebt < 1; \"part\" is collateral that should be returned\n        (\n          (totalCollateralBase > COLLATERAL_RESERVE_BASE_CURRENCY\n            ? totalCollateralBase - COLLATERAL_RESERVE_BASE_CURRENCY\n            : totalCollateralBase\n          ) * (10 ** collateralDecimals) / collateralPrice\n        ) * amountToRepayBase / totalDebtBase,\n      // WRONG: totalCollateralBase * (10 ** collateralDecimals) * part / 1e18 / collateralPrice,\n\n        healthFactor18\n      );\n    }\n  }\n\n  /// @notice If we paid {amountToRepay_}, how much collateral would we receive?\n  function getCollateralAmountToReturn(uint amountToRepay_, bool closePosition_) external view override returns (uint) {\n    address assetCollateral = collateralAsset;\n    IAaveTwoPool pool = _pool;\n    IAaveTwoPriceOracle priceOracle = IAaveTwoPriceOracle(\n      IAaveTwoLendingPoolAddressesProvider(IAaveTwoPool(pool).getAddressesProvider()).getPriceOracle()\n    );\n\n    if (closePosition_) {\n      // full repay\n      (uint256 totalCollateralBase,,,,,) = pool.getUserAccountData(address(this));\n\n      uint collateralPrice = priceOracle.getAssetPrice(assetCollateral);\n      require(collateralPrice != 0, AppErrors.ZERO_PRICE);\n\n      return totalCollateralBase * (10 ** pool.getConfiguration(assetCollateral).getDecimals()) / collateralPrice;\n    } else {\n      // partial repay\n      DataTypes.ReserveData memory rc = pool.getReserveData(assetCollateral);\n      (uint amountCollateralToWithdraw,) = _getCollateralAmountToReturn(\n        pool,\n        amountToRepay_,\n        assetCollateral,\n        borrowAsset,\n        false,\n        rc.configuration.getDecimals(),\n        priceOracle\n      );\n      return amountCollateralToWithdraw;\n    }\n  }\n\n  /// @notice Repay with rebalancing. Send amount of collateral/borrow asset to the pool adapter\n  ///         to recover the health factor to target state.\n  /// @dev It's not allowed to close position here (pay full debt) because no collateral will be returned.\n  /// @param amount_ Exact amount of asset that is transferred to the balance of the pool adapter.\n  ///                It can be amount of collateral asset or borrow asset depended on {isCollateral_}\n  ///                It must be stronger less then total borrow debt.\n  ///                The amount should be approved for the pool adapter before the call.\n  /// @param isCollateral_ true/false indicates that {amount_} is the amount of collateral/borrow asset\n  /// @return resultHealthFactor18 Result health factor after repay, decimals 18\n  function repayToRebalance(\n    uint amount_,\n    bool isCollateral_\n  ) external override returns (\n    uint resultHealthFactor18\n  ) {\n    IConverterController c = controller;\n    _onlyTetuConverter(c);\n\n    address assetBorrow = borrowAsset;\n    IAaveTwoPool pool = _pool;\n    IAaveTwoPriceOracle priceOracle = IAaveTwoPriceOracle(\n      IAaveTwoLendingPoolAddressesProvider(IAaveTwoPool(pool).getAddressesProvider()).getPriceOracle()\n    );\n\n    (,uint256 totalDebtBase0,,,, uint healthFactorBefore) = pool.getUserAccountData(address(this));\n    uint newCollateralBalanceATokens = collateralBalanceATokens;\n    if (isCollateral_) {\n      newCollateralBalanceATokens = _supply(pool, collateralAsset, amount_) + newCollateralBalanceATokens;\n      collateralBalanceATokens = newCollateralBalanceATokens;\n      _registerInBookkeeperBorrow(c, amount_, 0);\n    } else {\n      // ensure, that amount to repay is less then the total debt\n      uint priceBorrowAsset = priceOracle.getAssetPrice(assetBorrow);\n      uint totalAmountToPay = totalDebtBase0 == 0\n        ? 0\n        : totalDebtBase0 * (10 ** pool.getConfiguration(assetBorrow).getDecimals()) / priceBorrowAsset;\n      require(totalDebtBase0 != 0 && amount_ < totalAmountToPay, AppErrors.REPAY_TO_REBALANCE_NOT_ALLOWED);\n\n      IERC20(assetBorrow).safeTransferFrom(msg.sender, address(this), amount_);\n\n      // transfer borrow amount back to the pool\n      // replaced by infinity approve: IERC20(assetBorrow).safeApprove(address(pool), amount_);\n\n      pool.repay(assetBorrow, amount_, RATE_MODE, address(this));\n      _registerInBookkeeperRepay(c, 0, amount_);\n    }\n\n    // validate result status\n    (,,,,, uint256 healthFactor) = pool.getUserAccountData(address(this));\n    _validateHealthFactor(c, healthFactor, healthFactorBefore);\n\n    emit OnRepayToRebalance(amount_, isCollateral_, healthFactor, newCollateralBalanceATokens);\n    return healthFactor;\n  }\n  //endregion ----------------------------------------------------- Repay logic\n\n  //region ----------------------------------------------------- View current status\n\n  function getConversionKind() external pure override returns (AppDataTypes.ConversionKind) {\n    return AppDataTypes.ConversionKind.BORROW_2;\n  }\n\n  /// @inheritdoc IPoolAdapter\n  function getConfig() external view override returns (\n    address origin,\n    address outUser,\n    address outCollateralAsset,\n    address outBorrowAsset\n  ) {\n    return (originConverter, user, collateralAsset, borrowAsset);\n  }\n\n  /// @inheritdoc IPoolAdapter\n  function getStatus() external view override returns (\n    uint collateralAmount,\n    uint amountToPay,\n    uint healthFactor18,\n    bool opened,\n    uint collateralAmountLiquidated,\n    bool debtGapRequired\n  ) {\n    IAaveTwoPool pool = _pool;\n\n    (uint256 totalCollateralBase, uint256 totalDebtBase,,,, uint256 hf18) = pool.getUserAccountData(address(this));\n\n    address assetCollateral = collateralAsset;\n    address assetBorrow = borrowAsset;\n\n    uint collateralPrice;\n    uint borrowPrice;\n    {\n      IAaveTwoPriceOracle priceOracle = IAaveTwoPriceOracle(\n        IAaveTwoLendingPoolAddressesProvider(IAaveTwoPool(pool).getAddressesProvider()).getPriceOracle()\n      );\n      collateralPrice = priceOracle.getAssetPrice(assetCollateral);\n      borrowPrice = priceOracle.getAssetPrice(assetBorrow);\n      require(collateralPrice != 0 && borrowPrice != 0, AppErrors.ZERO_PRICE);\n    }\n\n    DataTypes.ReserveData memory rc = pool.getReserveData(assetCollateral);\n    uint aTokensBalance = IERC20(rc.aTokenAddress).balanceOf(address(this));\n\n    return (\n    // Total amount of provided collateral in [collateral asset]\n      totalCollateralBase * (10 ** pool.getConfiguration(assetCollateral).getDecimals()) / collateralPrice,\n    // Total amount of borrowed debt in [borrow asset]. 0 - for closed borrow positions.\n      totalDebtBase == 0\n        ? 0\n        : totalDebtBase * (10 ** pool.getConfiguration(assetBorrow).getDecimals()) / borrowPrice,\n    // Current health factor, decimals 18\n      hf18,\n      totalCollateralBase != 0 || totalDebtBase != 0,\n      aTokensBalance > collateralBalanceATokens\n        ? 0\n        : (collateralBalanceATokens - aTokensBalance), // todo it should return amount of collateral, not amount of a-tokens\n    // Debt gap should be used to pay the debt to workaround dust tokens problem.\n    // It means that the user should pay slightly higher amount than the current totalDebtBase.\n    // It give us a possibility to pass type(uint).max to repay function.\n    // see https://docs.aave.com/developers/core-contracts/pool#repay\n    // and \"Aave_Protocol_Whitepaper_v1_0.pdf\", section 3.8.1 \"It’s impossible to transfer the whole balance at once\"\n      true\n    );\n  }\n  //endregion ----------------------------------------------------- View current status\n\n  //region ----------------------------------------------------- Rewards\n  function claimRewards(address receiver_) external pure override returns (\n    address rewardToken,\n    uint amount\n  ) {\n    //nothing to do, AAVE v2 doesn't have rewards on polygon anymore\n    receiver_; // hide warning\n    return (rewardToken, amount);\n  }\n  //endregion ----------------------------------------------------- Rewards\n\n  //region ----------------------------------------------------- Utils\n\n  /// @notice Validate that result health factor is correct, SCB-794\n  ///         1) If we make a borrow the health factor is correct if it's greater than the min allowed threshold.\n  ///         2) If we make repaying, the health factor is correct if\n  ///                   it's greater than the min allowed threshold\n  ///                   or it wasn't reduced too much\n  /// @param healthFactorAfter Value of health factor after the operation - the value to check\n  /// @param healthFactorBefore Value of health factor before the operation. 0 if borrow.\n  function _validateHealthFactor(\n    IConverterController controller_,\n    uint healthFactorAfter,\n    uint healthFactorBefore\n  ) internal view {\n    uint threshold = uint(controller_.minHealthFactor2()) * 10 ** (18 - 2);\n    uint reduction = healthFactorBefore > healthFactorAfter\n      ? healthFactorBefore - healthFactorAfter\n      : 0;\n    require(\n      healthFactorAfter >= threshold\n      || (healthFactorBefore != 0 && reduction < MAX_ALLOWED_HEALTH_FACTOR_REDUCTION),\n      AppErrors.WRONG_HEALTH_FACTOR\n    );\n  }\n\n  /// @notice Register borrow operation in Bookkeeper\n  function _registerInBookkeeperBorrow(\n    IConverterController controller_,\n    uint amountCollateral,\n    uint amountBorrow\n  ) internal {\n    IBookkeeper(controller_.bookkeeper()).onBorrow(amountCollateral, amountBorrow);\n  }\n\n  /// @notice Register repay operation in Bookkeeper\n  function _registerInBookkeeperRepay(\n    IConverterController controller_,\n    uint withdrawnCollateral,\n    uint paidAmount\n  ) internal {\n    IBookkeeper(controller_.bookkeeper()).onRepay(withdrawnCollateral, paidAmount);\n  }\n\n  //endregion ----------------------------------------------------- Utils\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/compound/CompoundAprLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../integrations/compound/ICTokenBase.sol\";\nimport \"../../integrations/compound/ICompoundInterestRateModel.sol\";\nimport \"../../integrations/compound/ICompoundPriceOracle.sol\";\nimport \"./CompoundLib.sol\";\n\n/// @notice Compound utils: predict borrow and supply rate in advance, calculate borrow and supply APR\n///         Borrow APR = the amount by which the debt increases per block; the amount is in terms of borrow tokens\n///         Supply APR = the amount by which the income increases per block; the amount is in terms of BORROW tokens too\nlibrary CompoundAprLib {\n\n  //region ----------------------------------------------------- Data type\n  struct Core {\n    ICTokenBase cTokenCollateral;\n    ICTokenBase cTokenBorrow;\n    address collateralAsset;\n    address borrowAsset;\n  }\n  //endregion ----------------------------------------------------- Data type\n\n  //region ----------------------------------------------------- Addresses\n\n  /// @notice Get core address of DForce\n  function getCore(\n    CompoundLib.ProtocolFeatures memory f_,\n    address cTokenCollateral_,\n    address cTokenBorrow_\n  ) internal view returns (Core memory) {\n    return Core({\n      cTokenCollateral: ICTokenBase(cTokenCollateral_),\n      cTokenBorrow: ICTokenBase(cTokenBorrow_),\n      collateralAsset: CompoundLib.getUnderlying(f_, cTokenCollateral_),\n      borrowAsset: CompoundLib.getUnderlying(f_, cTokenBorrow_)\n    });\n  }\n  //endregion ----------------------------------------------------- Addresses\n\n  //region ----------------------------------------------------- Estimate APR (rates per block)\n\n  /// @notice Calculate cost and incomes, take into account borrow rate and supply rate.\n  /// @return borrowCost36 Estimated borrow cost for the period, borrow tokens, decimals 36\n  /// @return supplyIncomeInBorrowAsset36 Current supply income for the period (in terms of borrow tokens), decimals 36\n  function getRawCostAndIncomes(\n    Core memory core,\n    uint collateralAmount_,\n    uint countBlocks_,\n    uint amountToBorrow_,\n    AppDataTypes.PricesAndDecimals memory pad_\n  ) internal view returns (\n    uint borrowCost36,\n    uint supplyIncomeInBorrowAsset36\n  ) {\n    supplyIncomeInBorrowAsset36 = getSupplyIncomeInBorrowAsset36(\n      getEstimatedSupplyRate(\n        ICompoundInterestRateModel(core.cTokenCollateral.interestRateModel()),\n        core.cTokenCollateral,\n        collateralAmount_\n      ),\n      countBlocks_,\n      pad_.rc10powDec,\n      pad_.priceCollateral,\n      pad_.priceBorrow,\n      collateralAmount_\n    );\n\n    // estimate borrow rate value after the borrow and calculate result APR\n    borrowCost36 = getBorrowCost36(\n      getEstimatedBorrowRate(\n        ICompoundInterestRateModel(core.cTokenBorrow.interestRateModel()),\n        core.cTokenBorrow,\n        amountToBorrow_\n      ),\n      amountToBorrow_,\n      countBlocks_,\n      pad_.rb10powDec\n    );\n  }\n\n  /// @notice Calculate supply income in terms of borrow asset with decimals 36\n  /// @param supplyRatePerBlock Decimals 18\n  /// @param collateral10PowDecimals 10**collateralAssetDecimals\n  function getSupplyIncomeInBorrowAsset36(\n    uint supplyRatePerBlock,\n    uint countBlocks,\n    uint collateral10PowDecimals,\n    uint priceCollateral,\n    uint priceBorrow,\n    uint suppliedAmount\n  ) internal pure returns (uint) {\n    // original code:\n    //    rmul(supplyRatePerBlock * countBlocks, suppliedAmount) * priceCollateral / priceBorrow,\n    // but we need result decimals 36\n    // so, we replace rmul by ordinal mul and take into account /1e18\n    return\n      supplyRatePerBlock * countBlocks * suppliedAmount * priceCollateral / priceBorrow\n      * 1e18 // not 36 because we replaced rmul by mul\n      / collateral10PowDecimals;\n  }\n\n  /// @notice Calculate borrow cost in terms of borrow tokens with decimals 36\n  /// @dev see LendingContractsV2, Base.sol, _updateInterest\n  ///      see Compound-protocol, CToken.sol, accrueInterest\n  /// @param borrowRatePerBlock Decimals 18\n  /// @param borrow10PowDecimals 10**borrowAssetDecimals\n  function getBorrowCost36(\n    uint borrowRatePerBlock,\n    uint borrowedAmount,\n    uint countBlocks,\n    uint borrow10PowDecimals\n  ) internal pure returns (uint) {\n    // simpleInterestFactor = borrowRate * blockDelta\n    // interestAccumulated = simpleInterestFactor * totalBorrows\n    // newTotalBorrows = interestAccumulated + totalBorrows\n    uint simpleInterestFactor = borrowRatePerBlock * countBlocks;\n\n    // Replace rmul(simpleInterestFactor, borrowedAmount) by ordinal mul and take into account /1e18\n    return\n      simpleInterestFactor * borrowedAmount\n      * 1e18 // not 36 because we replaced rmul by mul\n      / borrow10PowDecimals;\n  }\n  //endregion ----------------------------------------------------- Estimate APR (rates per block)\n\n  //region ----------------------------------------------------- Estimate borrow rate\n\n  /// @notice Estimate value of variable borrow rate after borrowing {amountToBorrow_}\n  /// @dev repeats compound-protocol, CToken.sol, borrowRatePerBlock() impl\n  function getEstimatedBorrowRate(\n    ICompoundInterestRateModel interestRateModel_,\n    ICTokenBase cTokenBorrow_,\n    uint amountToBorrow_\n  ) internal view returns (uint) {\n    return interestRateModel_.getBorrowRate(\n      cTokenBorrow_.getCash() - amountToBorrow_,\n      cTokenBorrow_.totalBorrows() + amountToBorrow_,\n      cTokenBorrow_.totalReserves()\n    );\n  }\n\n  /// @notice Estimate value of variable borrow rate after borrowing {amountToBorrow_}\n  function getBorrowRateAfterBorrow(address borrowCToken, uint amountToBorrow_) internal view returns (uint) {\n    return getEstimatedBorrowRate(\n      ICompoundInterestRateModel(ICTokenBase(borrowCToken).interestRateModel()),\n      ICTokenBase(borrowCToken),\n      amountToBorrow_\n    );\n  }\n\n  //endregion ----------------------------------------------------- Estimate borrow rate\n\n  //region ----------------------------------------------------- Estimate supply rate\n\n  /// @dev repeats compound-protocol, CToken.sol, supplyRatePerBlock() impl\n  function getEstimatedSupplyRate(\n    ICompoundInterestRateModel interestRateModel_,\n    ICTokenBase cToken_,\n    uint amountToSupply_\n  ) internal view returns(uint) {\n    return interestRateModel_.getSupplyRate(\n\n      // Cash balance of this cToken in the underlying asset\n      cToken_.getCash() + amountToSupply_,\n      cToken_.totalBorrows(),\n      cToken_.totalReserves(),\n      cToken_.reserveFactorMantissa()\n    );\n  }\n  //endregion ----------------------------------------------------- Estimate supply rate\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/compound/CompoundLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../integrations/compound/ICompoundPriceOracle.sol\";\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../integrations/compound/ICTokenBase.sol\";\nimport \"../../integrations/compound/ICompoundInterestRateModel.sol\";\nimport \"../../integrations/compound/ICompoundPriceOracle.sol\";\n\nlibrary CompoundLib {\n\n  /// @notice Protocol uses ComptrollerStorage, so comptroller supports ICompoundComptrollerBaseV1\n  uint constant public COMPOUND_STORAGE_V1 = 1;\n\n  /// @notice Protocol uses ComptrollerV2Storage, so comptroller supports ICompoundComptrollerBaseV2\n  uint constant public COMPOUND_STORAGE_V2 = 2;\n\n  /// @notice Protocol's cToken doesn't support ICTokenBase.\n  ///         In this case, the caller of CompoundPoolAdapterLib must support ICompoundPoolAdapterLibCaller.\n  uint constant public COMPOUND_STORAGE_CUSTOM = 0;\n\n  struct ProtocolFeatures {\n    /// @param Address of native token for the current chain, i.e. WMATIC on Polygon or WETH9 on Base\n    address nativeToken;\n\n    /// @param Address of cToken for the native token, i.e. hMATIC on Polygon or mWETH on Base\n    address cTokenNative;\n\n    /// @notice What version of interface ICompoundComptrollerBaseVXXX the comptroller supports.\n    uint compoundStorageVersion;\n  }\n\n  function getPrice(ICompoundPriceOracle priceOracle, address token) internal view returns (uint) {\n    try priceOracle.getUnderlyingPrice(token) returns (uint value) {\n      require(value != 0, AppErrors.ZERO_PRICE);\n      return value;\n    } catch {\n      revert(AppErrors.ZERO_PRICE);\n    }\n  }\n\n  function getUnderlying(CompoundLib.ProtocolFeatures memory f_, address cToken) internal view returns (address) {\n    return cToken == f_.cTokenNative\n      ? f_.nativeToken\n      : ICTokenBase(cToken).underlying();\n  }\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/compound/CompoundPlatformAdapterLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./CompoundLib.sol\";\nimport \"./CompoundAprLib.sol\";\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../openzeppelin/Initializable.sol\";\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../integrations/compound/ICompoundComptrollerBase.sol\";\nimport \"../../integrations/compound/ICTokenBase.sol\";\nimport \"../../interfaces/IController.sol\";\nimport \"../../integrations/compound/INativeToken.sol\";\nimport \"../../integrations/compound/ICTokenNative.sol\";\nimport \"../../integrations/compound/ICompoundPriceOracle.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../integrations/compound/ICompoundComptrollerBaseV1.sol\";\nimport \"../../integrations/compound/ICompoundComptrollerBaseV2.sol\";\nimport \"../../integrations/compound/ICompoundComptrollerBaseV2Zerovix.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../interfaces/IPoolAdapterInitializerWithAP.sol\";\nimport \"../../libs/EntryKinds.sol\";\n\nlibrary CompoundPlatformAdapterLib {\n  using SafeERC20 for IERC20;\n\n  //region ----------------------------------------------------- Data types\n  struct State {\n    IConverterController controller;\n    ICompoundComptrollerBase comptroller;\n    /// @notice Template of pool adapter\n    address converter;\n\n    /// @notice All enabled pairs underlying : cTokens. All assets usable for collateral/to borrow.\n    /// @dev There is no underlying for native token, we store native-token:cToken-for-native-token\n    mapping(address => address) activeAssets;\n\n    /// @notice True if the platform is frozen and new borrowing is not possible (at this moment)\n    bool frozen;\n  }\n\n  /// @notice Local vars inside getConversionPlan - to avoid stack too deep\n  struct ConversionPlanLocal {\n    ICompoundComptrollerBase comptroller;\n    address cTokenCollateral;\n    address cTokenBorrow;\n  }\n  //endregion ----------------------------------------------------- Data types\n\n  //region ----------------------------------------------------- Events\n  event OnPoolAdapterInitialized(\n    address converter,\n    address poolAdapter,\n    address user,\n    address collateralAsset,\n    address borrowAsset\n  );\n  event OnRegisterCTokens(address[] cTokens);\n  event OnChangeFrozen(bool frozen);\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Access\n  /// @notice Ensure that the caller is governance\n  function _onlyGovernance(State storage state) internal view {\n    require(state.controller.governance() == msg.sender, AppErrors.GOVERNANCE_ONLY);\n  }\n  //endregion ----------------------------------------------------- Access\n\n  //region ----------------------------------------------------- Initialization and setup\n  function init (\n    State storage state,\n    CompoundLib.ProtocolFeatures memory f_,\n    address controller_,\n    address comptroller_,\n    address templatePoolAdapter_,\n    address[] memory activeCTokens_\n  ) internal {\n    require(\n      comptroller_ != address(0)\n      && templatePoolAdapter_ != address(0)\n      && controller_ != address(0),\n      AppErrors.ZERO_ADDRESS\n    );\n\n    state.comptroller = ICompoundComptrollerBase(comptroller_);\n    state.controller = IConverterController(controller_);\n    state.converter = templatePoolAdapter_;\n\n    _registerCTokens(state, f_, activeCTokens_);\n  }\n\n  /// @notice Initialize {poolAdapter_} created from {converter_} using minimal proxy pattern\n  function initializePoolAdapter(\n    State storage state,\n    address converter_,\n    address poolAdapter_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_\n  ) internal {\n    IConverterController _controller = state.controller;\n\n    require(msg.sender == _controller.borrowManager(), AppErrors.BORROW_MANAGER_ONLY);\n    require(state.converter == converter_, AppErrors.CONVERTER_NOT_FOUND);\n\n    // assume here that the pool adapter supports IPoolAdapterInitializer\n    IPoolAdapterInitializerWithAP(poolAdapter_).initialize(\n      address(_controller),\n      address(this),\n      address(state.comptroller),\n      user_,\n      collateralAsset_,\n      borrowAsset_,\n      converter_\n    );\n    emit OnPoolAdapterInitialized(converter_, poolAdapter_, user_, collateralAsset_, borrowAsset_);\n  }\n\n  /// @notice Set platform to frozen/unfrozen state. In frozen state any new borrowing is forbidden.\n  function setFrozen(State storage state, bool frozen_) internal {\n    _onlyGovernance(state);\n    state.frozen = frozen_;\n    emit OnChangeFrozen(frozen_);\n  }\n\n  /// @notice Register new CTokens supported by the market\n  /// @dev It's possible to add CTokens only because, we can add unregister function if necessary\n  function registerCTokens(\n    State storage state,\n    CompoundLib.ProtocolFeatures memory f_,\n    address[] memory cTokens_\n  ) internal {\n    _onlyGovernance(state);\n    _registerCTokens(state, f_, cTokens_);\n    emit OnRegisterCTokens(cTokens_);\n  }\n\n  function _registerCTokens(\n    State storage state,\n    CompoundLib.ProtocolFeatures memory f_,\n    address[] memory cTokens_\n  ) internal {\n    uint len = cTokens_.length;\n    for (uint i; i < len; i = AppUtils.uncheckedInc(i)) {\n      // Special case: there is no underlying for native token, so we store nativeToken:cTokenForNativeToken\n      state.activeAssets[CompoundLib.getUnderlying(f_, cTokens_[i])] = cTokens_[i];\n    }\n  }\n  //endregion ----------------------------------------------------- Initialization and setup\n\n  //region ----------------------------------------------------- View\n  function getCTokenByUnderlying(State storage state, address token1_, address token2_) internal view returns (\n    address cToken1,\n    address cToken2\n  ) {\n    return (state.activeAssets[token1_], state.activeAssets[token2_]);\n  }\n  //endregion ----------------------------------------------------- View\n\n\n  //region ----------------------------------------------------- Get conversion plan\n  /// @notice Reduce collateral amount and borrow amount proportionally to fit available limits\n  function reduceAmountsByMax(\n    AppDataTypes.ConversionPlan memory plan,\n    uint collateralAmount_,\n    uint amountToBorrow_\n  ) internal pure returns (\n    uint collateralAmount,\n    uint amountToBorrow\n  ) {\n    if (amountToBorrow_ > plan.maxAmountToBorrow) {\n      collateralAmount_= collateralAmount_ * plan.maxAmountToBorrow / amountToBorrow_;\n      amountToBorrow_ = plan.maxAmountToBorrow;\n    }\n    if (collateralAmount_ > plan.maxAmountToSupply) {\n      amountToBorrow_ = amountToBorrow_ * plan.maxAmountToSupply / collateralAmount_;\n      collateralAmount_ = plan.maxAmountToSupply;\n    }\n    return (collateralAmount_, amountToBorrow_);\n  }\n\n  /// @notice Calculate amounts required to calculate APR. Don't calculate rewards amount (assume there are no rewards)\n  /// @return borrowCost36 Cost for the period calculated using borrow rate in terms of borrow tokens, decimals 36\n  /// @return supplyIncomeInBorrowAsset36 Potential supply increment after borrow period, recalculated to borrow asset, decimals 36\n  /// @return amountCollateralInBorrowAsset36 Amount of collateral recalculated to borrow asset, decimals 36\n  function getValuesForApr(\n    uint collateralAmount,\n    uint amountToBorrow,\n    CompoundLib.ProtocolFeatures memory f_,\n    address cTokenCollateral,\n    address cTokenBorrow,\n    uint countBlocks,\n    AppDataTypes.PricesAndDecimals memory pd_\n  ) internal view returns (\n    uint borrowCost36,\n    uint supplyIncomeInBorrowAsset36,\n    uint amountCollateralInBorrowAsset36\n  ) {\n    (borrowCost36, supplyIncomeInBorrowAsset36) = CompoundAprLib.getRawCostAndIncomes(\n      CompoundAprLib.getCore(f_, cTokenCollateral, cTokenBorrow),\n      collateralAmount,\n      countBlocks,\n      amountToBorrow,\n      pd_\n    );\n\n    amountCollateralInBorrowAsset36 =\n      collateralAmount * (10**36 * pd_.priceCollateral / pd_.priceBorrow)\n      / pd_.rc10powDec;\n  }\n\n  function getMaxAmountToBorrow(ConversionPlanLocal memory v) internal view returns (uint maxAmountToBorrow) {\n    maxAmountToBorrow = ICTokenBase(v.cTokenBorrow).getCash();\n    uint borrowCap = v.comptroller.borrowCaps(v.cTokenBorrow);\n    if (borrowCap != 0) {\n      uint totalBorrows = ICTokenBase(v.cTokenBorrow).totalBorrows();\n      if (totalBorrows > borrowCap) {\n        maxAmountToBorrow = 0;\n      } else {\n        if (totalBorrows + maxAmountToBorrow > borrowCap) {\n          maxAmountToBorrow = borrowCap - totalBorrows;\n        }\n      }\n    }\n  }\n\n  /// @notice Check {p_} values, ensure that selected assets are active and prepare {dest}\n  /// @return True if all params are valid and {dest} is successfully prepared\n  function initConversionPlanLocal(\n    State storage state,\n    AppDataTypes.InputConversionParams memory p_,\n    ConversionPlanLocal memory dest\n  ) internal view returns (bool) {\n    if (! state.frozen) {\n      dest.cTokenCollateral = state.activeAssets[p_.collateralAsset];\n      if (dest.cTokenCollateral != address(0)) {\n        dest.cTokenBorrow = state.activeAssets[p_.borrowAsset];\n        if (dest.cTokenBorrow != address(0)) {\n          dest.comptroller = state.comptroller;\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /// @notice Get prices and decimals of collateral and borrow assets, store them to {dest}\n  function initPricesAndDecimals(\n    AppDataTypes.PricesAndDecimals memory dest,\n    address collateralAsset,\n    address borrowAsset,\n    ConversionPlanLocal memory vars\n  ) internal view {\n    ICompoundPriceOracle priceOracle = ICompoundPriceOracle(vars.comptroller.oracle());\n\n    dest.rc10powDec = 10**IERC20Metadata(collateralAsset).decimals();\n    dest.rb10powDec = 10**IERC20Metadata(borrowAsset).decimals();\n    dest.priceCollateral = CompoundLib.getPrice(priceOracle, vars.cTokenCollateral) * dest.rc10powDec;\n    dest.priceBorrow = CompoundLib.getPrice(priceOracle, vars.cTokenBorrow) * dest.rb10powDec;\n  }\n\n  /// @notice Calculate {collateralAmount} and {amountToBorrow} by {amountIn} according to the given entry kind\n  /// @param priceDecimals36 Prices have decimals 36\n  function getAmountsForEntryKind(\n    AppDataTypes.InputConversionParams memory p_,\n    uint liquidationThreshold18,\n    uint16 healthFactor2_,\n    AppDataTypes.PricesAndDecimals memory pd,\n    bool priceDecimals36\n  ) internal pure returns (\n    uint collateralAmount,\n    uint amountToBorrow\n  ) {\n    uint hf = uint(healthFactor2_) * 10**16;\n    uint entryKind = EntryKinds.getEntryKind(p_.entryData);\n    if (entryKind == EntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\n      collateralAmount = p_.amountIn;\n      amountToBorrow = EntryKinds.exactCollateralInForMaxBorrowOut(p_.amountIn, hf, liquidationThreshold18, pd, priceDecimals36);\n    } else if (entryKind == EntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\n      (collateralAmount,\n        amountToBorrow) = EntryKinds.exactProportion(p_.amountIn, hf, liquidationThreshold18, pd, p_.entryData, priceDecimals36);\n    } else if (entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2) {\n      amountToBorrow = p_.amountIn;\n      collateralAmount = EntryKinds.exactBorrowOutForMinCollateralIn(p_.amountIn, hf, liquidationThreshold18, pd, priceDecimals36);\n    }\n\n    return (collateralAmount, amountToBorrow);\n  }\n  //endregion ----------------------------------------------------- Get conversion plan\n\n  //region ----------------------------------------------------- Calculate borrow rate after borrowing in advance\n\n  /// @notice Estimate value of variable borrow rate after borrowing {amountToBorrow_}\n  function getBorrowRateAfterBorrow(\n    State storage state,\n    address borrowAsset_,\n    uint amountToBorrow_\n  ) internal view returns (uint) {\n    address borrowCToken = state.activeAssets[borrowAsset_];\n    return CompoundAprLib.getEstimatedBorrowRate(\n      ICompoundInterestRateModel(ICTokenBase(borrowCToken).interestRateModel()),\n      ICTokenBase(borrowCToken),\n      amountToBorrow_\n    );\n  }\n  //endregion ----------------------------------------------------- Calculate borrow rate after borrowing in advance\n\n  //region ----------------------------------------------------- Utils\n\n  /// @notice Check if the c-tokens are active and return LTV and liquidityThreshold values for the borrow\n  function getMarketsInfo(\n    State storage state,\n    CompoundLib.ProtocolFeatures memory f_,\n    address cTokenCollateral_,\n    address cTokenBorrow_\n  ) internal view returns (\n    uint ltv18,\n    uint liquidityThreshold18\n  ) {\n    ICompoundComptrollerBase comptroller = state.comptroller;\n    if (\n      !comptroller.borrowGuardianPaused(cTokenBorrow_) // borrowing is not paused\n    && !comptroller.mintGuardianPaused(cTokenCollateral_) // minting is not paused\n    ) {\n      bool isListed;\n      uint256 collateralFactorMantissa;\n      if (f_.compoundStorageVersion == CompoundLib.COMPOUND_STORAGE_V1) {\n        (isListed, collateralFactorMantissa) = ICompoundComptrollerBaseV1(address(comptroller)).markets(cTokenBorrow_);\n      } else { // CompoundLib.COMPOUND_STORAGE_V2\n        (isListed, collateralFactorMantissa,) = ICompoundComptrollerBaseV2(address(comptroller)).markets(cTokenBorrow_);\n      }\n\n      if (isListed) {\n        ltv18 = collateralFactorMantissa;\n        if (f_.compoundStorageVersion == CompoundLib.COMPOUND_STORAGE_V1) {\n          (isListed, collateralFactorMantissa) = ICompoundComptrollerBaseV1(address(comptroller)).markets(cTokenCollateral_);\n        } else { // CompoundLib.COMPOUND_STORAGE_V2\n          (isListed, collateralFactorMantissa,) = ICompoundComptrollerBaseV2(address(comptroller)).markets(cTokenCollateral_);\n        }\n        if (isListed) {\n          liquidityThreshold18 = collateralFactorMantissa;\n        } else {\n          ltv18 = 0; // not efficient, but it's error case\n        }\n      }\n    }\n\n    return (ltv18, liquidityThreshold18);\n  }\n  //endregion ----------------------------------------------------- Utils\n}"
    },
    "@tetu_io/tetu-converter/contracts/protocols/compound/CompoundPoolAdapterLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./CompoundLib.sol\";\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../openzeppelin/Initializable.sol\";\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"../../openzeppelin/Strings.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../interfaces/IController.sol\";\nimport \"../../interfaces/IBookkeeper.sol\";\nimport \"../../interfaces/ITokenAddressProvider.sol\";\nimport \"../../interfaces/IDebtMonitor.sol\";\nimport \"../../integrations/compound/ICompoundComptrollerBase.sol\";\nimport \"../../integrations/compound/ICTokenBase.sol\";\nimport \"../../integrations/compound/INativeToken.sol\";\nimport \"../../integrations/compound/ICTokenNative.sol\";\nimport \"../../integrations/compound/ICompoundPriceOracle.sol\";\nimport \"../../integrations/compound/ICompoundComptrollerBaseV1.sol\";\nimport \"../../integrations/compound/ICompoundComptrollerBaseV2.sol\";\nimport \"../../integrations/compound/ICompoundComptrollerBaseV2Zerovix.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../integrations/compound/ICompoundPoolAdapterLibCaller.sol\";\n\nlibrary CompoundPoolAdapterLib {\n  using SafeERC20 for IERC20;\n\n  //region ----------------------------------------------------- Constants\n  uint constant internal EXCHANGE_RATE_DECIMALS = 18;\n  uint constant internal DECIMALS_18 = 18;\n  uint constant internal COLLATERAL_FACTOR_DECIMALS = 18;\n\n  /// @notice Small amount (equal for all tokens) to implement \"almost equal\" logic\n  uint constant internal DUST_AMOUNT = 1000;\n\n  /// @notice repay allows to reduce health factor of following value (decimals 18):\n  uint constant public MAX_ALLOWED_HEALTH_FACTOR_REDUCTION = 1e13; // 0.001%\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Data types\n  struct State {\n    address collateralAsset;\n    address borrowAsset;\n    address collateralCToken;\n    address borrowCToken;\n    address user;\n\n    IConverterController controller;\n    ICompoundComptrollerBase comptroller;\n\n    /// @notice Address of original PoolAdapter contract that was cloned to make the instance of the pool adapter\n    address originConverter;\n\n    /// @notice Total amount of all supplied and withdrawn amounts of collateral in collateral tokens\n    uint collateralTokensBalance;\n  }\n\n  /// @notice To avoid stack too deep\n  struct RepayLocal {\n    uint error;\n    uint healthFactor18;\n    uint collateralTokensBalance;\n\n    address assetBorrow;\n    address assetCollateral;\n    address cTokenBorrow;\n    address cTokenCollateral;\n    ICompoundComptrollerBase comptroller;\n\n    uint collateralTokensToWithdraw;\n    uint tokenBalanceBefore;\n    uint healthFactorBefore;\n    uint balanceCollateralAssetBeforeRedeem;\n    uint balanceCollateralAssetAfterRedeem;\n    uint collateralAmountToReturn;\n  }\n\n  struct GetStatusLocal {\n    ICompoundComptrollerBase comptroller;\n    address cTokenBorrow;\n    address cTokenCollateral;\n    uint collateralBase;\n    uint collateralAmountLiquidated;\n    uint collateralTokensBalance;\n  }\n\n  struct BorrowLocal {\n    uint error;\n\n    IConverterController controller;\n    ICompoundComptrollerBase comptroller;\n    address cTokenCollateral;\n    address cTokenBorrow;\n    address assetCollateral;\n    address assetBorrow;\n\n    address[] markets;\n  }\n\n  struct PricesData {\n    /// @notice Collateral underlying price, decimals = [36 - decimals of the collateral asset]\n    uint priceCollateral;\n    /// @notice Borrow underlying price, decimals = [36 - decimals of the borrow asset]\n    uint priceBorrow;\n  }\n\n  struct AccountData {\n    uint collateralTokenBalance;\n    /// @notice Decimals 18. [token amount] * [exchange rate] = [asset amount]\n    uint exchangeRateCollateral;\n    uint borrowBalance;\n  }\n  //endregion ----------------------------------------------------- Data types\n\n  //region ----------------------------------------------------- Events\n  event OnInitialized(\n    address controller,\n    address cTokenAddressProvider,\n    address comptroller,\n    address user,\n    address collateralAsset,\n    address borrowAsset,\n    address originConverter\n  );\n  event OnBorrow(uint collateralAmount, uint borrowAmount, address receiver, uint resultHealthFactor18);\n  event OnBorrowToRebalance(uint borrowAmount, address receiver, uint resultHealthFactor18);\n  event OnRepay(uint amountToRepay, address receiver, bool closePosition, uint resultHealthFactor18);\n  event OnRepayToRebalance(uint amount, bool isCollateral, uint resultHealthFactor18);\n  //endregion ----------------------------------------------------- Events\n\n  //region ----------------------------------------------------- Restrictions\n\n  /// @notice Ensure that the caller is TetuConverter\n  function _onlyTetuConverter(IConverterController controller_) internal view {\n    require(controller_.tetuConverter() == msg.sender, AppErrors.TETU_CONVERTER_ONLY);\n  }\n  //endregion ----------------------------------------------------- Restrictions\n\n  //region ----------------------------------------------------- Initialization\n\n  function initialize(\n    State storage dest,\n    address controller_,\n    address cTokenAddressProvider_,\n    address comptroller_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    address originConverter_\n  ) internal {\n    require(\n      controller_ != address(0)\n      && comptroller_ != address(0)\n      && user_ != address(0)\n      && collateralAsset_ != address(0)\n      && borrowAsset_ != address(0)\n      && cTokenAddressProvider_ != address(0)\n      && originConverter_ != address(0),\n      AppErrors.ZERO_ADDRESS\n    );\n\n    dest.controller = IConverterController(controller_);\n    dest.user = user_;\n    dest.collateralAsset = collateralAsset_;\n    dest.borrowAsset = borrowAsset_;\n    dest.originConverter = originConverter_;\n\n    (address cTokenCollateral,\n      address cTokenBorrow\n    ) = ITokenAddressProvider(cTokenAddressProvider_).getCTokenByUnderlying(collateralAsset_, borrowAsset_);\n\n    require(cTokenCollateral != address(0), AppErrors.C_TOKEN_NOT_FOUND);\n    require(cTokenBorrow != address(0), AppErrors.C_TOKEN_NOT_FOUND);\n\n    dest.collateralCToken = cTokenCollateral;\n    dest.borrowCToken = cTokenBorrow;\n    dest.comptroller = ICompoundComptrollerBase(comptroller_);\n\n    // The pool adapter doesn't keep assets on its balance, so it's safe to use infinity approve\n    // All approves replaced by infinity-approve were commented in the code below\n    IERC20(collateralAsset_).safeApprove(cTokenCollateral, 2 ** 255);\n    IERC20(borrowAsset_).safeApprove(cTokenBorrow, 2 ** 255);\n\n    emit OnInitialized(controller_, cTokenAddressProvider_, comptroller_, user_, collateralAsset_, borrowAsset_, originConverter_);\n  }\n  //endregion ----------------------------------------------------- Initialization\n\n  //region ----------------------------------------------------- Borrow logic\n  /// @notice Update internal stored variables to current values\n  function updateStatus(State storage state) internal {\n    // Update borrowBalance to actual value\n    _onlyTetuConverter(state.controller);\n    ICTokenCurrent(state.borrowCToken).borrowBalanceCurrent(address(this));\n    ICTokenCurrent(state.collateralCToken).exchangeRateCurrent();\n  }\n\n  /// @notice Supply collateral to the pool and borrow specified amount\n  /// @dev No re-balancing here; Collateral amount must be approved to the pool adapter before the call of this function\n  /// @param f_ Specific features of the given lending platform\n  /// @param collateralAmount_ Amount of collateral, must be approved to the pool adapter before the call of borrow()\n  /// @param borrowAmount_ Amount that should be borrowed in result\n  /// @param receiver_ Receiver of the borrowed amount\n  /// @return Result borrowed amount sent to the {receiver_}\n  function borrow(\n    State storage state,\n    CompoundLib.ProtocolFeatures memory f_,\n    uint collateralAmount_,\n    uint borrowAmount_,\n    address receiver_\n  ) internal returns (uint) {\n    BorrowLocal memory v;\n\n    v.controller = state.controller;\n    _onlyTetuConverter(v.controller);\n\n    v.comptroller = state.comptroller;\n    v.cTokenCollateral = state.collateralCToken;\n    v.cTokenBorrow = state.borrowCToken;\n    v.assetCollateral = state.collateralAsset;\n    v.assetBorrow = state.borrowAsset;\n\n    IERC20(v.assetCollateral).safeTransferFrom(msg.sender, address(this), collateralAmount_);\n\n    // enter markets (repeat entering is not a problem)\n    v.markets = new address[](2);\n    v.markets[0] = v.cTokenCollateral;\n    v.markets[1] = v.cTokenBorrow;\n    v.comptroller.enterMarkets(v.markets);\n\n    // supply collateral\n    uint tokenBalanceBeforeBorrow = _supply(f_, v.cTokenCollateral, collateralAmount_);\n\n    // make borrow\n    uint balanceBorrowAssetBefore = AppUtils.getBalance(f_.nativeToken, v.assetBorrow);\n\n    if (f_.compoundStorageVersion == CompoundLib.COMPOUND_STORAGE_CUSTOM) {\n      ICompoundPoolAdapterLibCaller(address(this))._borrow(v.assetBorrow, v.cTokenBorrow, borrowAmount_);\n    } else {\n      v.error = ICTokenBase(v.cTokenBorrow).borrow(borrowAmount_);\n      require(v.error == 0, string(abi.encodePacked(AppErrors.BORROW_FAILED, Strings.toString(v.error))));\n      // ensure that we have received required borrowed amount, send the amount to the receiver\n      if (f_.nativeToken == v.assetBorrow) {\n        INativeToken(v.assetBorrow).deposit{value: borrowAmount_}();\n      }\n    }\n    uint balanceBorrowAssetAfter = IERC20(v.assetBorrow).balanceOf(address(this));\n    require(\n      borrowAmount_ + balanceBorrowAssetBefore <= balanceBorrowAssetAfter,\n      AppErrors.WRONG_BORROWED_BALANCE\n    );\n    IERC20(v.assetBorrow).safeTransfer(receiver_, balanceBorrowAssetAfter - balanceBorrowAssetBefore);\n\n    // register the borrow in DebtMonitor\n    IDebtMonitor(v.controller.debtMonitor()).onOpenPosition();\n\n    // ensure that current health factor is greater than min allowed\n    (uint healthFactor, uint tokenBalanceAfterBorrow) = _validateHealthStatusAfterBorrow(\n      f_, v.controller, v.comptroller, v.cTokenCollateral, v.cTokenBorrow\n    );\n    state.collateralTokensBalance += AppUtils.sub0(tokenBalanceAfterBorrow, tokenBalanceBeforeBorrow);\n\n    _registerInBookkeeperBorrow(v.controller, collateralAmount_, balanceBorrowAssetAfter - balanceBorrowAssetBefore);\n    emit OnBorrow(collateralAmount_, balanceBorrowAssetAfter - balanceBorrowAssetBefore, receiver_, healthFactor);\n    return balanceBorrowAssetAfter - balanceBorrowAssetBefore;\n  }\n\n  /// @notice Borrow additional amount {borrowAmount_} using exist collateral and send it to {receiver_}\n  /// @dev Re-balance: too big health factor => target health factor\n  /// @return resultHealthFactor18 Result health factor after borrow\n  /// @return borrowedAmountOut Exact amount sent to the borrower\n  function borrowToRebalance(\n    State storage state,\n    CompoundLib.ProtocolFeatures memory f_,\n    uint borrowAmount_,\n    address receiver_\n  ) internal pure returns (\n    uint resultHealthFactor18,\n    uint borrowedAmountOut\n  ) {\n    state;\n    f_;\n    borrowAmount_;\n    receiver_;\n    resultHealthFactor18;\n    borrowedAmountOut;\n    revert(AppErrors.DEPRECATED_LEGACY_CODE);\n  }\n\n  //endregion ----------------------------------------------------- Borrow logic\n\n  //region ----------------------------------------------------- Repay logic\n\n  /// @notice Repay borrowed amount, return collateral to the user\n  /// @param f_ Specific features of the given lending platform\n  /// @param amountToRepay_ Exact amount of borrow asset that should be repaid\n  ///                       The amount should be approved for the pool adapter before the call of repay()\n  /// @param closePosition_ true to pay full borrowed amount\n  /// @param receiver_ Receiver of withdrawn collateral\n  /// @return Amount of collateral asset sent to the {receiver_}\n  function repay(\n    State storage state,\n    CompoundLib.ProtocolFeatures memory f_,\n    uint amountToRepay_,\n    address receiver_,\n    bool closePosition_\n  ) internal returns (uint) {\n    IConverterController controller = state.controller;\n    _onlyTetuConverter(controller);\n\n    RepayLocal memory v;\n    v.assetBorrow = state.borrowAsset;\n    v.assetCollateral = state.collateralAsset;\n    v.cTokenBorrow = state.borrowCToken;\n    v.cTokenCollateral = state.collateralCToken;\n    v.collateralTokensBalance = state.collateralTokensBalance;\n    v.comptroller = state.comptroller;\n\n    IERC20(v.assetBorrow).safeTransferFrom(msg.sender, address(this), amountToRepay_);\n\n    // Update borrowBalance to actual value, we must do it before calculation of collateral to withdraw\n    ICTokenCurrent(v.cTokenBorrow).borrowBalanceCurrent(address(this));\n\n    // how much collateral we are going to return\n    AccountData memory data;\n    _initAccountData(v.cTokenCollateral, v.cTokenBorrow, data);\n\n    PricesData memory prices;\n    _initPricesData(v.comptroller, v.cTokenCollateral, v.cTokenBorrow, prices);\n\n    v.collateralTokensToWithdraw = _getCollateralTokensToRedeem(data, closePosition_, amountToRepay_);\n    v.tokenBalanceBefore = data.collateralTokenBalance;\n    (v.healthFactorBefore,,,) = _getAccountValues(f_, v.comptroller, v.cTokenCollateral, data, prices);\n\n    // transfer borrow amount back to the pool\n    if (f_.compoundStorageVersion == CompoundLib.COMPOUND_STORAGE_CUSTOM) {\n      ICompoundPoolAdapterLibCaller(address(this))._repayBorrow(v.assetBorrow, v.cTokenBorrow, amountToRepay_);\n    } else {\n      if (v.cTokenBorrow == f_.cTokenNative) {\n        INativeToken(f_.nativeToken).withdraw(amountToRepay_);\n        ICTokenNative(payable(v.cTokenBorrow)).repayBorrow{value: amountToRepay_}();\n      } else {\n        // infinity approve\n        v.error = ICTokenBase(v.cTokenBorrow).repayBorrow(amountToRepay_);\n        require(v.error == 0, string(abi.encodePacked(AppErrors.REPAY_FAILED, Strings.toString(v.error))));\n      }\n    }\n\n    // withdraw the collateral\n    if (f_.compoundStorageVersion == CompoundLib.COMPOUND_STORAGE_CUSTOM) {\n      v.collateralAmountToReturn = ICompoundPoolAdapterLibCaller(address(this))._redeem(\n        v.assetCollateral,\n        v.cTokenCollateral,\n        v.collateralTokensToWithdraw\n      );\n    } else {\n      v.balanceCollateralAssetBeforeRedeem = AppUtils.getBalance(f_.nativeToken, v.assetCollateral);\n      v.error = ICTokenBase(v.cTokenCollateral).redeem(v.collateralTokensToWithdraw);\n      require(v.error == 0, string(abi.encodePacked(AppErrors.REDEEM_FAILED, Strings.toString(v.error))));\n\n      // transfer collateral back to the user\n      v.balanceCollateralAssetAfterRedeem = AppUtils.getBalance(f_.nativeToken, v.assetCollateral);\n      v.collateralAmountToReturn = AppUtils.sub0(v.balanceCollateralAssetAfterRedeem, v.balanceCollateralAssetBeforeRedeem);\n\n      if (v.assetCollateral == f_.nativeToken) {\n        INativeToken(f_.nativeToken).deposit{value: v.collateralAmountToReturn}();\n      }\n    }\n\n    // we don't check equality [token amount] * [exchange rate] = [asset amount]\n    // we can do it, but it's too dangerous to have additional revert in repay\n\n    IERC20(v.assetCollateral).safeTransfer(receiver_, v.collateralAmountToReturn);\n\n    // validate result status\n    _initAccountData(v.cTokenCollateral, v.cTokenBorrow, data);\n\n    if (data.collateralTokenBalance == 0 &&  data.borrowBalance == 0) {\n      IDebtMonitor(controller.debtMonitor()).onClosePosition();\n      // We don't exit the market to avoid additional gas consumption\n    } else {\n      require(!closePosition_, AppErrors.CLOSE_POSITION_FAILED);\n      (v.healthFactor18,,,) = _getAccountValues(f_, v.comptroller, v.cTokenCollateral, data, prices);\n      _validateHealthFactor(controller, v.healthFactor18, v.healthFactorBefore);\n    }\n\n    require(\n      v.tokenBalanceBefore >= data.collateralTokenBalance\n      && v.collateralTokensBalance >= v.tokenBalanceBefore - data.collateralTokenBalance,\n      AppErrors.WEIRD_OVERFLOW\n    );\n    state.collateralTokensBalance = v.collateralTokensBalance - (v.tokenBalanceBefore - data.collateralTokenBalance);\n\n    _registerInBookkeeperRepay(controller, v.collateralAmountToReturn, amountToRepay_);\n    emit OnRepay(amountToRepay_, receiver_, closePosition_, v.healthFactor18);\n    return v.collateralAmountToReturn;\n  }\n\n  /// @notice Repay with rebalancing. Send amount of collateral/borrow asset to the pool adapter\n  ///         to recover the health factor to target state.\n  /// @dev It's not allowed to close position here (pay full debt) because no collateral will be returned.\n  /// @param f_ Specific features of the given lending platform\n  /// @param amountIn_ Exact amount of asset that is transferred to the balance of the pool adapter.\n  ///                It can be amount of collateral asset or borrow asset depended on {isCollateral_}\n  ///                It must be stronger less then total borrow debt.\n  ///                The amount should be approved for the pool adapter before the call.\n  /// @param isCollateral_ true/false indicates that {amount_} is the amount of collateral/borrow asset\n  /// @return resultHealthFactor18 Result health factor after repay, decimals 18\n  function repayToRebalance(\n    State storage state,\n    CompoundLib.ProtocolFeatures memory f_,\n    uint amountIn_,\n    bool isCollateral_\n  ) internal returns (\n    uint resultHealthFactor18\n  ) {\n    IConverterController controller = state.controller;\n    _onlyTetuConverter(controller);\n\n    address cTokenBorrow = state.borrowCToken;\n    address cTokenCollateral = state.collateralCToken;\n    ICompoundComptrollerBase comptroller = state.comptroller;\n    uint tokenBalanceBefore;\n\n    PricesData memory prices;\n    _initPricesData(comptroller, cTokenCollateral, cTokenBorrow, prices);\n\n    AccountData memory data;\n    _initAccountData(cTokenCollateral, cTokenBorrow, data);\n    (uint healthFactorBefore ,,,) = _getAccountValues(f_, comptroller, cTokenCollateral, data, prices);\n\n    // ensure that the position is opened\n    require(IDebtMonitor(controller.debtMonitor()).isPositionOpened(), AppErrors.BORROW_POSITION_IS_NOT_REGISTERED);\n\n    if (isCollateral_) {\n      address assetCollateral = state.collateralAsset;\n      IERC20(assetCollateral).safeTransferFrom(msg.sender, address(this), amountIn_);\n      tokenBalanceBefore = _supply(f_, cTokenCollateral, amountIn_);\n      _registerInBookkeeperBorrow(controller, amountIn_, 0);\n    } else {\n      address assetBorrow = state.borrowAsset;\n\n      // ensure, that amount to repay is less then the total debt\n      tokenBalanceBefore = data.collateralTokenBalance;\n\n      require(data.borrowBalance != 0 && amountIn_ < data.borrowBalance, AppErrors.REPAY_TO_REBALANCE_NOT_ALLOWED);\n\n      IERC20(assetBorrow).safeTransferFrom(msg.sender, address(this), amountIn_);\n      // the amount is received through safeTransferFrom so we don't need following additional check:\n      //    require(IERC20(assetBorrow).balanceOf(address(this)) >= amount_, AppErrors.MINT_FAILED);\n\n      // transfer borrow amount back to the pool\n      if (f_.compoundStorageVersion == CompoundLib.COMPOUND_STORAGE_CUSTOM) {\n        ICompoundPoolAdapterLibCaller(address(this))._repayBorrow(assetBorrow, cTokenBorrow, amountIn_);\n      } else {\n        if (f_.cTokenNative == cTokenBorrow) {\n          INativeToken(f_.nativeToken).withdraw(amountIn_);\n          ICTokenNative(payable(cTokenBorrow)).repayBorrow{value: amountIn_}();\n        } else {\n          // infinity approve\n          uint error = ICTokenBase(cTokenBorrow).repayBorrow(amountIn_);\n          require(error == 0, string(abi.encodePacked(AppErrors.REPAY_FAILED, Strings.toString(error))));\n        }\n      }\n      _registerInBookkeeperRepay(controller, 0, amountIn_);\n    }\n\n    // validate result status\n    _initAccountData(cTokenCollateral, cTokenBorrow, data);\n    (uint healthFactor18 ,,,) = _getAccountValues(f_, comptroller, cTokenCollateral, data, prices);\n    _validateHealthFactor(controller, healthFactor18, healthFactorBefore);\n\n    require(data.collateralTokenBalance >= tokenBalanceBefore, AppErrors.WEIRD_OVERFLOW);\n    state.collateralTokensBalance += data.collateralTokenBalance - tokenBalanceBefore;\n\n    emit OnRepayToRebalance(amountIn_, isCollateral_, healthFactor18);\n    return healthFactor18;\n  }\n  //endregion ----------------------------------------------------- Repay logic\n\n  //region ----------------------------------------------------- View current status\n\n  /// @notice Get current status of the borrow position\n  /// @dev It returns STORED status. To get current status it's necessary to call updateStatus\n  ///      at first to update interest and recalculate status.\n  /// @param f_ Specific features of the given lending platform\n  /// @return collateralAmount Total amount of provided collateral, collateral currency\n  /// @return amountToPay Total amount of borrowed debt in [borrow asset]. 0 - for closed borrow positions.\n  /// @return healthFactor18 Current health factor, decimals 18\n  /// @return opened The position is opened (there is not empty collateral/borrow balance)\n  /// @return collateralAmountLiquidated How much collateral was liquidated\n  /// @return debtGapRequired When paying off a debt, the amount of the payment must be greater\n  ///         than the amount of the debt by a small amount (debt gap, see IConverterController.debtGap)\n  ///         getStatus returns it (same as getConfig) to exclude additional call of getConfig by the caller\n  function getStatus(State storage state, CompoundLib.ProtocolFeatures memory f_) internal view returns (\n    uint collateralAmount,\n    uint amountToPay,\n    uint healthFactor18,\n    bool opened,\n    uint collateralAmountLiquidated,\n    bool debtGapRequired\n  ) {\n    GetStatusLocal memory v;\n    v.comptroller = state.comptroller;\n    v.cTokenBorrow = state.borrowCToken;\n    v.cTokenCollateral = state.collateralCToken;\n    v.collateralTokensBalance = state.collateralTokensBalance;\n\n    // we need to repeat Comptroller.getHypotheticalAccountLiquidityInternal\n    // but for single collateral and single borrow only\n    // Collateral factor = CF, exchange rate = ER, price = P\n    // Liquidity = sumCollateral - sumBorrowPlusEffects\n    // where sumCollateral = ERMP * Collateral::TokenBalance\n    //       sumBorrowPlusEffects = Borrow::P * Borrow::BorrowBalance\n    //       ERMP = Collateral::ER * Collateral::P\n    // TokenBalance and BorrowBalance can be received through Token.getAccountSnapshot\n    // Liquidity - through Comptroller.getAccountLiquidity\n    //\n    // Health factor = (Collateral::CF * sumCollateral) / sumBorrowPlusEffects\n    //               = (Liquidity + sumBorrowPlusEffects) / sumBorrowPlusEffects\n\n    AccountData memory data;\n    _initAccountData(v.cTokenCollateral, v.cTokenBorrow, data);\n\n    PricesData memory prices;\n    _initPricesData(v.comptroller, v.cTokenCollateral, v.cTokenBorrow, prices);\n\n    (healthFactor18, v.collateralBase,, ) = _getAccountValues(f_, v.comptroller, v.cTokenCollateral, data, prices);\n\n    v.collateralAmountLiquidated = AppUtils.sub0(v.collateralTokensBalance, data.collateralTokenBalance)\n      * data.exchangeRateCollateral / 10 ** EXCHANGE_RATE_DECIMALS;\n\n    return (\n    // Total amount of provided collateral [collateral asset]\n      _fromBaseAmount(v.collateralBase, prices.priceCollateral),\n    // Total amount of borrowed debt in [borrow asset]. 0 - for closed borrow positions.\n      data.borrowBalance,\n    // Current health factor, decimals 18\n      healthFactor18,\n      data.collateralTokenBalance != 0 || data.borrowBalance != 0,\n    // Amount of liquidated collateral == amount of lost\n      v.collateralAmountLiquidated,\n      false\n    );\n  }\n\n  /// @notice If we paid {amountToRepay_}, how much collateral would we receive?\n  /// @return amountCollateralOut Amount of collateral asset that can be redeemed after repaying of {amountToRepay_}\n  function getCollateralAmountToReturn(State storage state, uint amountToRepay_, bool closePosition_)\n  internal view returns (\n    uint amountCollateralOut\n  ) {\n    AccountData memory data;\n    _initAccountData(state.collateralCToken, state.borrowCToken, data);\n\n    uint tokensToReturn = _getCollateralTokensToRedeem(data, closePosition_, amountToRepay_);\n    amountCollateralOut = tokensToReturn * data.exchangeRateCollateral / 10 ** EXCHANGE_RATE_DECIMALS;\n  }\n  //endregion ----------------------------------------------------- View current status\n\n  //region ----------------------------------------------------- Internal logic\n  /// @notice Supply collateral to compound market\n  /// @param cToken_ cToken of the collateral asset\n  /// @param amount_ Collateral amount\n  /// @return tokenBalanceBefore Collateral token balance before supply\n  function _supply(CompoundLib.ProtocolFeatures memory f_, address cToken_, uint amount_) internal returns (\n    uint tokenBalanceBefore\n  ) {\n    // the amount is received through safeTransferFrom before calling of _supply(), no need additional check:\n    //    require(tokenBalanceBefore >= collateralAmount_, AppErrors.MINT_FAILED);\n    tokenBalanceBefore = IERC20(cToken_).balanceOf(address(this));\n\n    if (f_.compoundStorageVersion == CompoundLib.COMPOUND_STORAGE_CUSTOM) {\n      ICompoundPoolAdapterLibCaller(address(this))._mint(cToken_, amount_);\n    } else {\n      if (f_.cTokenNative == cToken_) {\n        INativeToken(f_.nativeToken).withdraw(amount_);\n        ICTokenNative(payable(cToken_)).mint{value: amount_}();\n      } else { // assume infinity approve: IERC20(assetCollateral_).approve(cTokenCollateral_, collateralAmount_);\n        uint error = ICTokenBase(cToken_).mint(amount_);\n        require(error == 0, string(abi.encodePacked(AppErrors.MINT_FAILED, Strings.toString(error))));\n      }\n    }\n  }\n\n  /// @return healthFactor18 Current health factor, decimal 18\n  /// @return collateralTokenBalance Current amount of collateral cTokens\n  function _validateHealthStatusAfterBorrow(\n    CompoundLib.ProtocolFeatures memory f_,\n    IConverterController controller_,\n    ICompoundComptrollerBase comptroller_,\n    address cTokenCollateral_,\n    address cTokenBorrow_\n  ) internal view returns (\n    uint healthFactor18,\n    uint collateralTokenBalance\n  ) {\n    PricesData memory prices;\n    _initPricesData(comptroller_, cTokenCollateral_, cTokenBorrow_, prices);\n\n    AccountData memory data;\n    _initAccountData(cTokenCollateral_, cTokenBorrow_, data);\n\n    uint safeDebtAmountBase;\n    uint borrowBase;\n    (healthFactor18,, safeDebtAmountBase, borrowBase) = _getAccountValues(\n      f_, comptroller_, cTokenCollateral_, data, prices\n    );\n    require(borrowBase != 0 && safeDebtAmountBase > borrowBase, AppErrors.INCORRECT_RESULT_LIQUIDITY);\n\n    (uint error ,,) = comptroller_.getAccountLiquidity(address(this)); // todo do we need this call?\n    require(error == 0, string(abi.encodePacked(AppErrors.CTOKEN_GET_ACCOUNT_LIQUIDITY_FAILED, Strings.toString(error))));\n\n    _validateHealthFactor(controller_, healthFactor18, 0);\n    return (healthFactor18, data.collateralTokenBalance);\n  }\n\n  /// @return collateralTokenToRedeem Amount of collateral tokens to redeem\n  function _getCollateralTokensToRedeem(AccountData memory data, bool closePosition_, uint amountToRepay_)\n  internal pure returns (\n    uint collateralTokenToRedeem\n  ) {\n    require(data.borrowBalance != 0, AppErrors.ZERO_BALANCE);\n\n    if (closePosition_) {\n      require(data.borrowBalance <= amountToRepay_, AppErrors.CLOSE_POSITION_PARTIAL);\n      collateralTokenToRedeem = data.collateralTokenBalance;\n    } else {\n      require(amountToRepay_ <= data.borrowBalance, AppErrors.WRONG_BORROWED_BALANCE);\n      collateralTokenToRedeem = data.collateralTokenBalance * amountToRepay_ / data.borrowBalance;\n    }\n  }\n  //endregion ----------------------------------------------------- Internal logic\n\n  //region ----------------------------------------------------- Utils\n  /// @notice Get all data required to calculate current status, save results to {dest}\n  function _initAccountData(address cTokenCollateral, address cTokenBorrow, AccountData memory dest) internal view {\n    uint error;\n\n    (error, dest.collateralTokenBalance,, dest.exchangeRateCollateral) = ICTokenBase(cTokenCollateral).getAccountSnapshot(address(this));\n    require(error == 0, string(abi.encodePacked(AppErrors.CTOKEN_GET_ACCOUNT_SNAPSHOT_FAILED, Strings.toString(error))));\n\n    (error,, dest.borrowBalance,) = ICTokenBase(cTokenBorrow).getAccountSnapshot(address(this));\n    require(error == 0, string(abi.encodePacked(AppErrors.CTOKEN_GET_ACCOUNT_SNAPSHOT_FAILED, Strings.toString(error))));\n  }\n\n  function _initPricesData(\n    ICompoundComptrollerBase comptroller,\n    address cTokenCollateral,\n    address cTokenBorrow,\n    PricesData memory dest\n  ) internal view {\n    ICompoundPriceOracle priceOracle = ICompoundPriceOracle(comptroller.oracle());\n    dest.priceCollateral = CompoundLib.getPrice(priceOracle, cTokenCollateral);\n    dest.priceBorrow = CompoundLib.getPrice(priceOracle, cTokenBorrow);\n  }\n\n  /// @param collateralFactor Collateral factor, decimals 18\n  /// @param collateralAmountBase Total collateral amount, in base currency\n  /// @param borrowAmountBase Total borrow amount + effects, in base currency\n  /// @return safeDebtAmountBase Amount of debt that is safe to be borrowed under given collateral, in base currency\n  /// @return healthFactor18 Current health factor, decimals 18. Return type(uint).max if there is no borrow.\n  function _getHealthFactor(uint collateralFactor, uint collateralAmountBase, uint borrowAmountBase) internal pure returns (\n    uint safeDebtAmountBase,\n    uint healthFactor18\n  ) {\n    safeDebtAmountBase = collateralFactor * collateralAmountBase / 10 ** COLLATERAL_FACTOR_DECIMALS;\n    healthFactor18 = borrowAmountBase == 0\n      ? type(uint).max\n      : safeDebtAmountBase * 10 ** 18 / borrowAmountBase;\n\n    return (safeDebtAmountBase, healthFactor18);\n  }\n\n  /// @notice Calculate auxiliary values using {data_}\n  /// @return healthFactor18 Current health factor, decimals 18\n  /// @return collateralBase Amount of collateral in base currency (USD), decimals 18\n  /// @return safeDebtAmountBase Safe amount of debt for the current collateral, in terms of base currency (USD)\n  function _getAccountValues(\n    CompoundLib.ProtocolFeatures memory f_,\n    ICompoundComptrollerBase comptroller_,\n    address cTokenCollateral_,\n    AccountData memory data_,\n    PricesData memory prices_\n  ) internal view returns (\n    uint healthFactor18,\n    uint collateralBase,\n    uint safeDebtAmountBase,\n    uint borrowBase\n  ) {\n    (collateralBase, borrowBase) = _getBaseAmounts(data_, prices_);\n    uint collateralFactor = _getCollateralFactor(f_, comptroller_, cTokenCollateral_);\n    (safeDebtAmountBase, healthFactor18) = _getHealthFactor(collateralFactor, collateralBase, borrowBase);\n  }\n\n  /// @notice Validate that result health factor is correct, SCB-794\n  ///         1) If we make a borrow the health factor is correct if it's greater than the min allowed threshold.\n  ///         2) If we make repaying, the health factor is correct if\n  ///                   it's greater than the min allowed threshold\n  ///                   or it wasn't reduced too much\n  /// @param healthFactorAfter Value of health factor after the operation - the value to check\n  /// @param healthFactorBefore Value of health factor before the operation. 0 if borrow.\n  function _validateHealthFactor(\n    IConverterController controller_,\n    uint healthFactorAfter,\n    uint healthFactorBefore\n  ) internal view {\n    uint threshold = uint(controller_.minHealthFactor2()) * 10 ** (18 - 2);\n    uint reduction = healthFactorBefore > healthFactorAfter\n      ? healthFactorBefore - healthFactorAfter\n      : 0;\n    require(\n      healthFactorAfter >= threshold\n      || (healthFactorBefore != 0 && reduction < MAX_ALLOWED_HEALTH_FACTOR_REDUCTION),\n      AppErrors.WRONG_HEALTH_FACTOR\n    );\n  }\n\n  /// @notice Recalculate amount of collateral tokens and amount of debt to base currency (USD)\n  /// @return collateralBase Amount of collateral in base currency (USD), decimals 18\n  /// @return borrowBase Amount of debt in base currency (USD), decimals 18\n  function _getBaseAmounts(AccountData memory data, PricesData memory prices) internal pure returns (\n    uint collateralBase,\n    uint borrowBase\n  ) {\n    // Price has decimals [36 - decimals of the token]\n    // result base-amounts have decimals 18\n    collateralBase = _toBaseAmount(\n      (data.collateralTokenBalance * data.exchangeRateCollateral / 10 ** EXCHANGE_RATE_DECIMALS),\n      prices.priceCollateral\n    );\n    borrowBase = _toBaseAmount(data.borrowBalance, prices.priceBorrow);\n  }\n\n  /// @param amount_ Amount of asset\n  /// @param price_ Price of the asset: $ / [asset], decimals = [36 - decimals of the asset]\n  /// @return {amount_} in terms of base currency (USD) with decimals 18\n  function _toBaseAmount(uint amount_, uint price_) internal pure returns (uint) {\n    return amount_ * price_ / 10 ** DECIMALS_18;\n  }\n\n  /// @param baseAmount_ Amount in base currency (USD), decimals 18\n  /// @param price_ Price of the asset: $ / [asset], decimals = [36 - decimals of the asset]\n  /// @return {baseAmount_} in terms of asset, decimals = decimals of the asset\n  function _fromBaseAmount(uint baseAmount_, uint price_) internal pure returns (uint) {\n    return baseAmount_ * 10**DECIMALS_18 / price_;\n  }\n  //endregion ----------------------------------------------------- Utils\n\n  //region ----------------------------------------------------- Protocol features logic\n  /// @return collateralFactor Decimals = COLLATERAL_FACTOR_DECIMALS\n  function _getCollateralFactor(\n    CompoundLib.ProtocolFeatures memory f_,\n    ICompoundComptrollerBase comptroller_,\n    address cTokenCollateral_\n  ) internal view returns (uint collateralFactor) {\n    if (f_.compoundStorageVersion == CompoundLib.COMPOUND_STORAGE_CUSTOM) {\n      collateralFactor = ICompoundPoolAdapterLibCaller(address(this))._markets(cTokenCollateral_);\n    } else {\n      if (f_.compoundStorageVersion == CompoundLib.COMPOUND_STORAGE_V1) {\n        (, collateralFactor) = ICompoundComptrollerBaseV1(address(comptroller_)).markets(cTokenCollateral_);\n      } else { // CompoundLib.COMPOUND_STORAGE_V2\n        (, collateralFactor ,) = ICompoundComptrollerBaseV2(address(comptroller_)).markets(cTokenCollateral_);\n      }\n    }\n  }\n\n  /// @notice Register borrow operation in Bookkeeper\n  function _registerInBookkeeperBorrow(\n    IConverterController controller_,\n    uint amountCollateral,\n    uint amountBorrow\n  ) internal {\n    IBookkeeper(controller_.bookkeeper()).onBorrow(amountCollateral, amountBorrow);\n  }\n\n  /// @notice Register repay operation in Bookkeeper\n  function _registerInBookkeeperRepay(\n    IConverterController controller_,\n    uint withdrawnCollateral,\n    uint paidAmount\n  ) internal {\n    IBookkeeper(controller_.bookkeeper()).onRepay(withdrawnCollateral, paidAmount);\n  }\n  //endregion ----------------------------------------------------- Protocol features logic\n}"
    },
    "@tetu_io/tetu-converter/contracts/protocols/hundred-finance/HfAprLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../integrations/hundred-finance/IHfCToken.sol\";\nimport \"../../integrations/hundred-finance/IHfInterestRateModel.sol\";\nimport \"../../integrations/hundred-finance/IHfComptroller.sol\";\nimport \"../../integrations/hundred-finance/IHfPriceOracle.sol\";\n\n/// @notice Hundred finance utils: predict borrow and supply rate in advance, calculate borrow and supply APR\n///         Borrow APR = the amount by which the debt increases per block; the amount is in terms of borrow tokens\n///         Supply APR = the amount by which the income increases per block; the amount is in terms of BORROW tokens too\nlibrary HfAprLib {\n  address internal constant WMATIC = address(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\n  address internal constant hMATIC = address(0xEbd7f3349AbA8bB15b897e03D6c1a4Ba95B55e31);\n\n  //region ----------------------------------------------------- Data type\n  struct HfCore {\n    IHfCToken cTokenCollateral;\n    IHfCToken cTokenBorrow;\n    address collateralAsset;\n    address borrowAsset;\n  }\n  //endregion ----------------------------------------------------- Data type\n\n  //region ----------------------------------------------------- Addresses\n\n  /// @notice Get core address of DForce\n  function getCore(\n    address cTokenCollateral_,\n    address cTokenBorrow_\n  ) internal view returns (HfCore memory) {\n    return HfCore({\n      cTokenCollateral: IHfCToken(cTokenCollateral_),\n      cTokenBorrow: IHfCToken(cTokenBorrow_),\n      collateralAsset: getUnderlying(cTokenCollateral_),\n      borrowAsset: getUnderlying(cTokenBorrow_)\n    });\n  }\n  //endregion ----------------------------------------------------- Addresses\n\n  //region ----------------------------------------------------- Estimate APR\n\n  /// @notice Calculate cost and incomes, take into account borrow rate and supply rate.\n  /// @return borrowCost36 Estimated borrow cost for the period, borrow tokens, decimals 36\n  /// @return supplyIncomeInBorrowAsset36 Current supply income for the period (in terms of borrow tokens), decimals 36\n  function getRawCostAndIncomes(\n    HfCore memory core,\n    uint collateralAmount_,\n    uint countBlocks_,\n    uint amountToBorrow_,\n    AppDataTypes.PricesAndDecimals memory pad_\n  ) internal view returns (\n    uint borrowCost36,\n    uint supplyIncomeInBorrowAsset36\n  ) {\n    supplyIncomeInBorrowAsset36 = getSupplyIncomeInBorrowAsset36(\n      getEstimatedSupplyRate(\n        IHfInterestRateModel(core.cTokenCollateral.interestRateModel()),\n        core.cTokenCollateral,\n        collateralAmount_\n      ),\n      countBlocks_,\n      pad_.rc10powDec,\n      pad_.priceCollateral,\n      pad_.priceBorrow,\n      collateralAmount_\n    );\n\n    // estimate borrow rate value after the borrow and calculate result APR\n    borrowCost36 = getBorrowCost36(\n      getEstimatedBorrowRate(\n        IHfInterestRateModel(core.cTokenBorrow.interestRateModel()),\n        core.cTokenBorrow,\n        amountToBorrow_\n      ),\n      amountToBorrow_,\n      countBlocks_,\n      pad_.rb10powDec\n    );\n  }\n\n  /// @notice Calculate supply income in terms of borrow asset with decimals 36\n  function getSupplyIncomeInBorrowAsset36(\n    uint supplyRatePerBlock,\n    uint countBlocks,\n    uint collateral10PowDecimals,\n    uint priceCollateral,\n    uint priceBorrow,\n    uint suppliedAmount\n  ) internal pure returns (uint) {\n    // original code:\n    //    rmul(supplyRatePerBlock * countBlocks, suppliedAmount) * priceCollateral / priceBorrow,\n    // but we need result decimals 36\n    // so, we replace rmul by ordinal mul and take into account /1e18\n    return\n      supplyRatePerBlock * countBlocks * suppliedAmount * priceCollateral / priceBorrow\n      * 1e18 // not 36 because we replaced rmul by mul\n      / collateral10PowDecimals;\n  }\n\n  /// @notice Calculate borrow cost in terms of borrow tokens with decimals 36\n  /// @dev see LendingContractsV2, Base.sol, _updateInterest\n  function getBorrowCost36(\n    uint borrowRatePerBlock,\n    uint borrowedAmount,\n    uint countBlocks,\n    uint borrow10PowDecimals\n  ) internal pure returns (uint) {\n    // simpleInterestFactor = borrowRate * blockDelta\n    // interestAccumulated = simpleInterestFactor * totalBorrows\n    // newTotalBorrows = interestAccumulated + totalBorrows\n    uint simpleInterestFactor = borrowRatePerBlock * countBlocks;\n\n    // Replace rmul(simpleInterestFactor, borrowedAmount) by ordinal mul and take into account /1e18\n    return\n      simpleInterestFactor * borrowedAmount\n      * 1e18 // not 36 because we replaced rmul by mul\n      / borrow10PowDecimals;\n  }\n  //endregion ----------------------------------------------------- Estimate APR\n\n  //region ----------------------------------------------------- Estimate borrow rate\n\n  /// @notice Estimate value of variable borrow rate after borrowing {amountToBorrow_}\n  /// @dev repeats compound-protocol, CToken.sol, borrowRatePerBlock() impl\n  function getEstimatedBorrowRate(\n    IHfInterestRateModel interestRateModel_,\n    IHfCToken cTokenBorrow_,\n    uint amountToBorrow_\n  ) internal view returns (uint) {\n    return interestRateModel_.getBorrowRate(\n      cTokenBorrow_.getCash() - amountToBorrow_,\n      cTokenBorrow_.totalBorrows() + amountToBorrow_,\n      cTokenBorrow_.totalReserves()\n    );\n  }\n  //endregion ----------------------------------------------------- Estimate borrow rate\n\n  //region ----------------------------------------------------- Estimate supply rate\n\n  /// @dev repeats compound-protocol, CToken.sol, supplyRatePerBlock() impl\n  function getEstimatedSupplyRate(\n    IHfInterestRateModel interestRateModel_,\n    IHfCToken cToken_,\n    uint amountToSupply_\n  ) internal view returns(uint) {\n    return interestRateModel_.getSupplyRate(\n\n      // Cash balance of this cToken in the underlying asset\n      cToken_.getCash() + amountToSupply_,\n      cToken_.totalBorrows(),\n      cToken_.totalReserves(),\n      cToken_.reserveFactorMantissa()\n    );\n  }\n  //endregion ----------------------------------------------------- Estimate supply rate\n\n  //region ----------------------------------------------------- Utils to inline\n  function getPrice(IHfPriceOracle priceOracle, address token) internal view returns (uint) {\n    uint price = priceOracle.getUnderlyingPrice(token);\n    require(price != 0, AppErrors.ZERO_PRICE);\n    return price;\n  }\n\n  function getUnderlying(address token) internal view returns (address) {\n    return token == hMATIC\n      ? WMATIC\n      : IHfCToken(token).underlying();\n  }\n  //endregion ----------------------------------------------------- Utils to inline\n\n  //region ----------------------------------------------------- Calculate borrow rate after borrowing in advance\n\n  /// @notice Estimate value of variable borrow rate after borrowing {amountToBorrow_}\n  function getBorrowRateAfterBorrow(address borrowCToken, uint amountToBorrow_) internal view returns (uint) {\n    return HfAprLib.getEstimatedBorrowRate(\n      IHfInterestRateModel(IHfCToken(borrowCToken).interestRateModel()),\n      IHfCToken(borrowCToken),\n      amountToBorrow_\n    );\n  }\n  //endregion ----------------------------------------------------- Calculate borrow rate after borrowing in advance\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/hundred-finance/HfLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../compound/CompoundLib.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../integrations/tetu/ITetuLiquidator.sol\";\n\nlibrary HfLib {\n  /// @notice For any assets\n  uint constant public MIN_ALLOWED_AMOUNT_TO_LIQUIDATE = 1000;\n\n  function initProtocolFeatures(CompoundLib.ProtocolFeatures memory dest) internal pure {\n    dest.nativeToken = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n    dest.cTokenNative = 0xEbd7f3349AbA8bB15b897e03D6c1a4Ba95B55e31;\n    dest.compoundStorageVersion = CompoundLib.COMPOUND_STORAGE_V2;\n  }\n}"
    },
    "@tetu_io/tetu-converter/contracts/protocols/hundred-finance/HfPlatformAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./HfAprLib.sol\";\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"./HfLib.sol\";\nimport \"../compound/CompoundLib.sol\";\nimport \"../compound/CompoundPlatformAdapterLib.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../interfaces/IPlatformAdapter.sol\";\nimport \"../../interfaces/ITokenAddressProvider.sol\";\n\n/// @notice Adapter to read current pools info from HundredFinance-protocol, see https://docs.hundred.finance/\ncontract HfPlatformAdapter is IPlatformAdapter, ITokenAddressProvider {\n  using SafeERC20 for IERC20;\n  using AppUtils for uint;\n\n  //region ----------------------------------------------------- Constants\n  string public constant override PLATFORM_ADAPTER_VERSION = \"2.0.0\";\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Variables\n  CompoundPlatformAdapterLib.State internal _state;\n  //endregion ----------------------------------------------------- Variables\n\n  //region ----------------------------------------------------- Constructor and initialization\n  /// @param template_ Template of the pool adapter\n  constructor (address controller_, address comptroller_, address template_, address[] memory activeCTokens_) {\n    CompoundLib.ProtocolFeatures memory f;\n    HfLib.initProtocolFeatures(f);\n\n    CompoundPlatformAdapterLib.init(_state, f, controller_, comptroller_, template_, activeCTokens_);\n  }\n\n  /// @notice Initialize {poolAdapter_} created from {converter_} using minimal proxy pattern\n  function initializePoolAdapter(\n    address converter_,\n    address poolAdapter_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_\n  ) external override {\n    CompoundPlatformAdapterLib.initializePoolAdapter(_state, converter_, poolAdapter_, user_, collateralAsset_, borrowAsset_);\n  }\n\n  /// @notice Set platform to frozen/unfrozen state. In frozen state any new borrowing is forbidden.\n  function setFrozen(bool frozen_) external {\n    CompoundPlatformAdapterLib.setFrozen(_state, frozen_);\n  }\n\n  /// @notice Register new CTokens supported by the market\n  /// @dev It's possible to add CTokens only because, we can add unregister function if necessary\n  function registerCTokens(address[] memory cTokens_) external {\n    CompoundLib.ProtocolFeatures memory f;\n    HfLib.initProtocolFeatures(f);\n\n    CompoundPlatformAdapterLib.registerCTokens(_state, f, cTokens_);\n  }\n  //endregion ----------------------------------------------------- Constructor and initialization\n\n  //region ----------------------------------------------------- View\n  function converters() external view override returns (address[] memory) {\n    address[] memory dest = new address[](1);\n    dest[0] = _state.converter;\n    return dest;\n  }\n\n  function getCTokenByUnderlying(address token1_, address token2_) external view override returns (\n    address cToken1,\n    address cToken2\n  ) {\n    return CompoundPlatformAdapterLib.getCTokenByUnderlying(_state, token1_, token2_);\n  }\n\n  function platformKind() external pure returns (AppDataTypes.LendingPlatformKinds) {\n    return AppDataTypes.LendingPlatformKinds.HUNDRED_FINANCE_4;\n  }\n\n  function frozen() external view returns (bool) {\n    return _state.frozen;\n  }\n\n  function controller() external view returns (address) {\n    return address(_state.controller);\n  }\n  function comptroller() external view returns (address) {\n    return address(_state.comptroller);\n  }\n  function activeAssets(address cToken) external view returns (address) {\n    return _state.activeAssets[cToken];\n  }\n  //endregion ----------------------------------------------------- View\n\n\n  //region ----------------------------------------------------- Get conversion plan\n  function getConversionPlan (\n    AppDataTypes.InputConversionParams memory p_,\n    uint16 healthFactor2_\n  ) external override view returns (\n    AppDataTypes.ConversionPlan memory plan\n  ) {\n    require(p_.collateralAsset != address(0) && p_.borrowAsset != address(0), AppErrors.ZERO_ADDRESS);\n    require(p_.amountIn != 0 && p_.countBlocks != 0, AppErrors.INCORRECT_VALUE);\n    require(healthFactor2_ >= _state.controller.minHealthFactor2(), AppErrors.WRONG_HEALTH_FACTOR);\n\n    CompoundPlatformAdapterLib.ConversionPlanLocal memory v;\n    if (CompoundPlatformAdapterLib.initConversionPlanLocal(_state, p_, v)) {\n\n      // LTV and liquidation threshold\n      CompoundLib.ProtocolFeatures memory f;\n      HfLib.initProtocolFeatures(f);\n\n      (plan.ltv18, plan.liquidationThreshold18) = CompoundPlatformAdapterLib.getMarketsInfo(\n        _state, f, v.cTokenCollateral, v.cTokenBorrow\n      );\n      if (plan.ltv18 != 0 && plan.liquidationThreshold18 != 0) {\n\n        // Calculate maxAmountToSupply and maxAmountToBorrow\n        plan.maxAmountToBorrow = CompoundPlatformAdapterLib.getMaxAmountToBorrow(v);\n        plan.maxAmountToSupply = type(uint).max; // unlimited; fix validation below after changing this value\n\n        if (plan.maxAmountToBorrow != 0 && plan.maxAmountToSupply != 0) {\n          // Prices and health factor\n          AppDataTypes.PricesAndDecimals memory pd;\n          CompoundPlatformAdapterLib.initPricesAndDecimals(pd, p_.collateralAsset, p_.borrowAsset, v);\n          // ltv and liquidation threshold are exactly the same in HundredFinance\n          // so, there is no min health factor, we can directly use healthFactor2_ in calculations below\n\n          // Calculate collateralAmount and amountToBorrow\n          // we assume that liquidationThreshold18 == ltv18 in this protocol, so the minimum health factor is 1\n          (plan.collateralAmount, plan.amountToBorrow) = CompoundPlatformAdapterLib.getAmountsForEntryKind(\n            p_, plan.liquidationThreshold18, healthFactor2_, pd, true\n          );\n\n          // Validate the borrow, calculate amounts for APR\n          if (plan.amountToBorrow != 0 && plan.collateralAmount != 0) {\n            plan.converter = _state.converter;\n            (plan.collateralAmount, plan.amountToBorrow) = CompoundPlatformAdapterLib.reduceAmountsByMax(\n              plan, plan.collateralAmount, plan.amountToBorrow\n            );\n            (\n              plan.borrowCost36, plan.supplyIncomeInBorrowAsset36, plan.amountCollateralInBorrowAsset36\n            ) = CompoundPlatformAdapterLib.getValuesForApr(\n              plan.collateralAmount, plan.amountToBorrow, f, v.cTokenCollateral, v.cTokenBorrow, p_.countBlocks, pd\n            );\n          }\n        }\n      }\n    }\n\n    if (plan.converter == address(0)) {\n      AppDataTypes.ConversionPlan memory planNotFound;\n      return planNotFound;\n    } else {\n      return plan;\n    }\n  }\n\n  //endregion ----------------------------------------------------- Get conversion plan\n\n  //region ----------------------------------------------------- Utils\n\n  /// @notice Check if the c-tokens are active and return LTV and liquidityThreshold values for the borrow\n  function getMarketsInfo(address cTokenCollateral_, address cTokenBorrow_) public view returns (\n    uint ltv18,\n    uint liquidityThreshold18\n  ) {\n    CompoundLib.ProtocolFeatures memory f;\n    HfLib.initProtocolFeatures(f);\n\n    return CompoundPlatformAdapterLib.getMarketsInfo(_state, f, cTokenCollateral_, cTokenBorrow_);\n  }\n  //endregion ----------------------------------------------------- Utils\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/hundred-finance/HfPoolAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../openzeppelin/Initializable.sol\";\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"./HfLib.sol\";\nimport \"../compound/CompoundPoolAdapterLib.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../interfaces/IDebtMonitor.sol\";\nimport \"../../interfaces/IPoolAdapter.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../interfaces/IPoolAdapterInitializerWithAP.sol\";\nimport \"../../interfaces/ITokenAddressProvider.sol\";\n\n/// @notice Implementation of IPoolAdapter for HundredFinance-protocol, see https://docs.hundred.finance/\n/// @dev Instances of this contract are created using proxy-minimal pattern, so no constructor\ncontract HfPoolAdapter is IPoolAdapter, IPoolAdapterInitializerWithAP, Initializable {\n  using SafeERC20 for IERC20;\n\n  //region ----------------------------------------------------- Constants and variables\n  string public constant POOL_ADAPTER_VERSION = \"2.0.1\";\n\n  CompoundPoolAdapterLib.State internal _state;\n  //endregion ----------------------------------------------------- Constants and variables\n\n  //region ----------------------------------------------------- Initialization\n\n  function initialize(\n    address controller_,\n    address cTokenAddressProvider_,\n    address comptroller_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    address originConverter_\n  ) override external\n    // Borrow Manager creates a pool adapter using minimal proxy pattern, adds it the the set of known pool adapters\n    // and initializes it immediately. We should ensure only that the re-initialization is not possible\n  initializer\n  {\n    CompoundPoolAdapterLib.initialize(\n      _state,\n      controller_,\n      cTokenAddressProvider_,\n      comptroller_,\n      user_,\n      collateralAsset_,\n      borrowAsset_,\n      originConverter_\n    );\n  }\n  //endregion ----------------------------------------------------- Initialization\n\n  //region ----------------------------------------------------- Borrow logic\n  function updateStatus() external override {\n    CompoundPoolAdapterLib.updateStatus(_state);\n  }\n\n  /// @notice Supply collateral to the pool and borrow specified amount\n  /// @dev No re-balancing here; Collateral amount must be approved to the pool adapter before the call of this function\n  /// @param collateralAmount_ Amount of collateral, must be approved to the pool adapter before the call of borrow()\n  /// @param borrowAmount_ Amount that should be borrowed in result\n  /// @param receiver_ Receiver of the borrowed amount\n  /// @return Result borrowed amount sent to the {receiver_}\n  function borrow(uint collateralAmount_, uint borrowAmount_, address receiver_) external override returns (uint) {\n    CompoundLib.ProtocolFeatures memory f;\n    HfLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.borrow(_state, f, collateralAmount_, borrowAmount_, receiver_);\n  }\n\n  /// @notice Borrow additional amount {borrowAmount_} using exist collateral and send it to {receiver_}\n  /// @dev Re-balance: too big health factor => target health factor\n  /// @return resultHealthFactor18 Result health factor after borrow\n  /// @return borrowedAmountOut Exact amount sent to the borrower\n  function borrowToRebalance(uint borrowAmount_, address receiver_) external view override returns (\n    uint resultHealthFactor18,\n    uint borrowedAmountOut\n  ) {\n    CompoundLib.ProtocolFeatures memory f;\n    HfLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.borrowToRebalance(_state, f, borrowAmount_, receiver_);\n  }\n  //endregion ----------------------------------------------------- Borrow logic\n\n  //region ----------------------------------------------------- Repay logic\n\n  /// @notice Repay borrowed amount, return collateral to the user\n  /// @param amountToRepay_ Exact amount of borrow asset that should be repaid\n  ///                       The amount should be approved for the pool adapter before the call of repay()\n  /// @param closePosition_ true to pay full borrowed amount\n  /// @param receiver_ Receiver of withdrawn collateral\n  /// @return Amount of collateral asset sent to the {receiver_}\n  function repay(uint amountToRepay_, address receiver_, bool closePosition_) external override returns (uint) {\n    CompoundLib.ProtocolFeatures memory f;\n    HfLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.repay(_state, f, amountToRepay_, receiver_, closePosition_);\n  }\n\n  /// @notice Repay with rebalancing. Send amount of collateral/borrow asset to the pool adapter\n  ///         to recover the health factor to target state.\n  /// @dev It's not allowed to close position here (pay full debt) because no collateral will be returned.\n  /// @param amount_ Exact amount of asset that is transferred to the balance of the pool adapter.\n  ///                It can be amount of collateral asset or borrow asset depended on {isCollateral_}\n  ///                It must be stronger less then total borrow debt.\n  ///                The amount should be approved for the pool adapter before the call.\n  /// @param isCollateral_ true/false indicates that {amount_} is the amount of collateral/borrow asset\n  /// @return resultHealthFactor18 Result health factor after repay, decimals 18\n  function repayToRebalance(uint amount_, bool isCollateral_) external override returns (uint resultHealthFactor18) {\n    CompoundLib.ProtocolFeatures memory f;\n    HfLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.repayToRebalance(_state, f, amount_, isCollateral_);\n  }\n\n  /// @notice If we paid {amountToRepay_}, how much collateral would we receive?\n  function getCollateralAmountToReturn(uint amountToRepay_, bool closePosition_) external view override returns (uint) {\n    return CompoundPoolAdapterLib.getCollateralAmountToReturn(_state, amountToRepay_, closePosition_);\n  }\n  //endregion ----------------------------------------------------- Repay logic\n\n  //region ----------------------------------------------------- Rewards\n  function claimRewards(address receiver_) external pure override returns (\n    address rewardToken,\n    uint amount\n  ) {\n    // there are no rewards on Polygon\n    receiver_; // hide warning\n    return (rewardToken, amount);\n  }\n  //endregion ----------------------------------------------------- Rewards\n\n  //region ----------------------------------------------------- View current status\n\n  /// @inheritdoc IPoolAdapter\n  function getConfig() external view override returns (\n    address origin,\n    address outUser,\n    address outCollateralAsset,\n    address outBorrowAsset\n  ) {\n    return (_state.originConverter, _state.user, _state.collateralAsset, _state.borrowAsset);\n  }\n\n  /// @inheritdoc IPoolAdapter\n  function getStatus() external view override returns (\n    uint collateralAmount,\n    uint amountToPay,\n    uint healthFactor18,\n    bool opened,\n    uint collateralAmountLiquidated,\n    bool debtGapRequired\n  ) {\n    CompoundLib.ProtocolFeatures memory f;\n    HfLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.getStatus(_state, f);\n  }\n\n  function getConversionKind() external pure override returns (AppDataTypes.ConversionKind) {\n    return AppDataTypes.ConversionKind.BORROW_2;\n  }\n\n  function controller() external view returns (address) {\n    return address(_state.controller);\n  }\n  function comptroller() external view returns (address) {\n    return address(_state.comptroller);\n  }\n  function collateralTokensBalance() external view returns (uint) {\n    return _state.collateralTokensBalance;\n  }\n  //endregion ----------------------------------------------------- View current status\n\n  //region ----------------------------------------------------- Native tokens\n  receive() external payable {\n    // this is needed for the native token unwrapping\n    // no restrictions because this adpater is not used in production, it's for tests only\n  }\n  //endregion ----------------------------------------------------- Native tokens\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/moonwell/MoonwellLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../compound/CompoundLib.sol\";\nimport \"./MoonwellRewardsLib.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../integrations/tetu/ITetuLiquidator.sol\";\n\nlibrary MoonwellLib {\n  /// @notice For any assets\n  uint constant public MIN_ALLOWED_AMOUNT_TO_LIQUIDATE = 1000;\n\n  function initProtocolFeatures(CompoundLib.ProtocolFeatures memory dest) internal pure {\n    dest.nativeToken = 0x4200000000000000000000000000000000000006;\n    dest.cTokenNative = address(0);\n    dest.compoundStorageVersion = CompoundLib.COMPOUND_STORAGE_V1;\n  }\n\n  /// @notice Estimate total number of rewards that will be received after\n  ///         supplying of {amountToSupply} of collateral asset and borrowing\n  ///         {amountToBorrow} of borrow asset, recalculate these amounts to the total amount in terms of borrow asset\n  /// @param cTokenCollateral mToken related to the collateral asset\n  /// @param cTokenBorrow mToken related to the borrow asset\n  /// @param amountToSupply Amount of collateral asset to be supplied, in terms of collateral asset\n  /// @param amountToBorrow Amount of borrow asset to be borrowed, in terms of borrow asset\n  /// @param borrowPeriodTimestamp_ Expected borrow period, in seconds\n  /// @return rewardsSupply Estimated amount of supply reward tokens, in terms of {borrowAsset}\n  /// @return rewardsBorrow Estimated amount of borrow reward tokens, in terms of {borrowAsset}\n  function estimateRewardAmounts(\n    address cTokenCollateral,\n    address cTokenBorrow,\n    uint amountToSupply,\n    uint amountToBorrow,\n    uint32 borrowPeriodTimestamp_,\n    address rewardDistributor,\n    ITetuLiquidator tetuLiquidator,\n    address borrowAsset\n  ) internal view returns (\n    uint rewardsSupply,\n    uint rewardsBorrow\n  ) {\n    MultiRewardDistributorCommon.RewardInfo[] memory outputRewardData;\n    outputRewardData = MoonwellRewardsLib.getOutstandingRewardsForUser(\n      IMToken(cTokenCollateral),\n      borrowPeriodTimestamp_,\n      amountToSupply,\n      0,\n      IMoonwellMultiRewardDistributor(rewardDistributor)\n    );\n    rewardsSupply = _getRewardTotalAmount(outputRewardData, tetuLiquidator, borrowAsset);\n    outputRewardData = MoonwellRewardsLib.getOutstandingRewardsForUser(\n      IMToken(cTokenBorrow),\n      borrowPeriodTimestamp_,\n      0,\n      amountToBorrow,\n      IMoonwellMultiRewardDistributor(rewardDistributor)\n    );\n    rewardsBorrow = _getRewardTotalAmount(outputRewardData, tetuLiquidator, borrowAsset);\n  }\n\n  /// @notice Enumerate all rewards in {data}, converter to {assetOut}, return total amount\n  /// @return Total amount of all rewards in terms of {assetOut}\n  function _getRewardTotalAmount(\n    MultiRewardDistributorCommon.RewardInfo[] memory data,\n    ITetuLiquidator tetuLiquidator,\n    address assetOut\n  ) internal view returns (uint) {\n    uint dest;\n    for (uint i; i < data.length; ++i) {\n      if (data[i].totalAmount > MIN_ALLOWED_AMOUNT_TO_LIQUIDATE) {\n        uint priceOut = tetuLiquidator.getPrice(data[i].emissionToken, assetOut, data[i].totalAmount);\n        dest += priceOut;\n      }\n    }\n    return dest;\n  }\n}"
    },
    "@tetu_io/tetu-converter/contracts/protocols/moonwell/MoonwellPlatformAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./MoonwellLib.sol\";\nimport \"../compound/CompoundPlatformAdapterLib.sol\";\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"../../libs/AppDataTypes.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../libs/EntryKinds.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../interfaces/IPlatformAdapter.sol\";\nimport \"../../interfaces/IPoolAdapterInitializerWithAP.sol\";\nimport \"../../interfaces/ITokenAddressProvider.sol\";\nimport \"../../integrations/moonwell/IMoonwellComptroller.sol\";\n\n/// @notice Adapter to read current pools info from Moonwell-protocol, see https://docs.moonwell.fi/\ncontract MoonwellPlatformAdapter is IPlatformAdapter, ITokenAddressProvider {\n  using SafeERC20 for IERC20;\n  using AppUtils for uint;\n\n  //region ----------------------------------------------------- Constants\n  string public constant override PLATFORM_ADAPTER_VERSION = \"1.0.0\";\n  uint constant public COUNT_SECONDS_PER_YEAR = 365 days; // 31536000;\n  //endregion ----------------------------------------------------- Constants\n\n  //region ----------------------------------------------------- Variables\n  CompoundPlatformAdapterLib.State internal _state;\n  //endregion ----------------------------------------------------- Variables\n\n  //region ----------------------------------------------------- Constructor and initialization\n  /// @param template_ Template of the pool adapter\n  constructor (address controller_, address comptroller_, address template_, address[] memory activeCTokens_) {\n    CompoundLib.ProtocolFeatures memory f;\n    MoonwellLib.initProtocolFeatures(f);\n\n    CompoundPlatformAdapterLib.init(_state, f, controller_, comptroller_, template_, activeCTokens_);\n  }\n\n  /// @notice Initialize {poolAdapter_} created from {converter_} using minimal proxy pattern\n  function initializePoolAdapter(\n    address converter_,\n    address poolAdapter_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_\n  ) external override {\n    CompoundPlatformAdapterLib.initializePoolAdapter(_state, converter_, poolAdapter_, user_, collateralAsset_, borrowAsset_);\n  }\n\n  /// @notice Set platform to frozen/unfrozen state. In frozen state any new borrowing is forbidden.\n  function setFrozen(bool frozen_) external {\n    CompoundPlatformAdapterLib.setFrozen(_state, frozen_);\n  }\n\n  /// @notice Register new CTokens supported by the market\n  /// @dev It's possible to add CTokens only because, we can add unregister function if necessary\n  function registerCTokens(address[] memory cTokens_) external {\n    CompoundLib.ProtocolFeatures memory f;\n    MoonwellLib.initProtocolFeatures(f);\n\n    CompoundPlatformAdapterLib.registerCTokens(_state, f, cTokens_);\n  }\n  //endregion ----------------------------------------------------- Constructor and initialization\n\n  //region ----------------------------------------------------- View\n  function converters() external view override returns (address[] memory) {\n    address[] memory dest = new address[](1);\n    dest[0] = _state.converter;\n    return dest;\n  }\n\n  function getCTokenByUnderlying(address token1_, address token2_) external view override returns (\n    address cToken1,\n    address cToken2\n  ) {\n    return CompoundPlatformAdapterLib.getCTokenByUnderlying(_state, token1_, token2_);\n  }\n\n  function platformKind() external pure returns (AppDataTypes.LendingPlatformKinds) {\n    return AppDataTypes.LendingPlatformKinds.MOONWELL_6;\n  }\n\n  function frozen() external view returns (bool) {\n    return _state.frozen;\n  }\n\n  function controller() external view returns (address) {\n    return address(_state.controller);\n  }\n  function comptroller() external view returns (address) {\n    return address(_state.comptroller);\n  }\n  function activeAssets(address cToken) external view returns (address) {\n    return _state.activeAssets[cToken];\n  }\n  //endregion ----------------------------------------------------- View\n\n\n  //region ----------------------------------------------------- Get conversion plan\n  function getConversionPlan (\n    AppDataTypes.InputConversionParams memory p_,\n    uint16 healthFactor2_\n  ) external override view returns (\n    AppDataTypes.ConversionPlan memory plan\n  ) {\n    require(p_.collateralAsset != address(0) && p_.borrowAsset != address(0), AppErrors.ZERO_ADDRESS);\n    require(p_.amountIn != 0 && p_.countBlocks != 0, AppErrors.INCORRECT_VALUE);\n    require(healthFactor2_ >= _state.controller.minHealthFactor2(), AppErrors.WRONG_HEALTH_FACTOR);\n\n    CompoundPlatformAdapterLib.ConversionPlanLocal memory v;\n    if (CompoundPlatformAdapterLib.initConversionPlanLocal(_state, p_, v)) {\n\n      // LTV and liquidation threshold\n      CompoundLib.ProtocolFeatures memory f;\n      MoonwellLib.initProtocolFeatures(f);\n\n      (plan.ltv18, plan.liquidationThreshold18) = CompoundPlatformAdapterLib.getMarketsInfo(\n        _state, f, v.cTokenCollateral, v.cTokenBorrow\n      );\n      if (plan.ltv18 != 0 && plan.liquidationThreshold18 != 0) {\n\n        // Calculate maxAmountToSupply and maxAmountToBorrow\n        plan.maxAmountToBorrow = CompoundPlatformAdapterLib.getMaxAmountToBorrow(v);\n        plan.maxAmountToSupply = type(uint).max; // unlimited; fix validation below after changing this value\n\n        if (plan.maxAmountToBorrow != 0 && plan.maxAmountToSupply != 0) {\n          // Prices and health factor\n          AppDataTypes.PricesAndDecimals memory pd;\n          CompoundPlatformAdapterLib.initPricesAndDecimals(pd, p_.collateralAsset, p_.borrowAsset, v);\n          // ltv and liquidation threshold are exactly the same in HundredFinance\n          // so, there is no min health factor, we can directly use healthFactor2_ in calculations below\n\n          // Calculate collateralAmount and amountToBorrow\n          // we assume that liquidationThreshold18 == ltv18 in this protocol, so the minimum health factor is 1\n          (plan.collateralAmount, plan.amountToBorrow) = CompoundPlatformAdapterLib.getAmountsForEntryKind(\n            p_, plan.liquidationThreshold18, healthFactor2_, pd, true\n          );\n\n          // Validate the borrow, calculate amounts for APR\n          if (plan.amountToBorrow != 0 && plan.collateralAmount != 0) {\n            plan.converter = _state.converter;\n            (plan.collateralAmount, plan.amountToBorrow) = CompoundPlatformAdapterLib.reduceAmountsByMax(\n              plan, plan.collateralAmount, plan.amountToBorrow\n            );\n            (\n              plan.borrowCost36, plan.supplyIncomeInBorrowAsset36, plan.amountCollateralInBorrowAsset36\n            ) = CompoundPlatformAdapterLib.getValuesForApr(\n              plan.collateralAmount, plan.amountToBorrow, f, v.cTokenCollateral, v.cTokenBorrow, p_.countBlocks, pd\n            );\n\n            plan.rewardsAmountInBorrowAsset36 = estimateRewardsAmountInBorrowAsset36(p_, v, plan, pd);\n          }\n        }\n      }\n    }\n\n    if (plan.converter == address(0)) {\n      AppDataTypes.ConversionPlan memory planNotFound;\n      return planNotFound;\n    } else {\n      return plan;\n    }\n  }\n\n  /// @notice Estimate amount of any rewards that can be received for the borrowing according the {plan}\n  function estimateRewardsAmountInBorrowAsset36(\n    AppDataTypes.InputConversionParams memory p_,\n    CompoundPlatformAdapterLib.ConversionPlanLocal memory v,\n    AppDataTypes.ConversionPlan memory plan,\n    AppDataTypes.PricesAndDecimals memory pd\n  ) public view returns (uint) {\n    uint periodSec = p_.countBlocks * COUNT_SECONDS_PER_YEAR / (_state.controller.blocksPerDay() * 365);\n    (uint rewardsSupply, uint rewardsBorrow) = MoonwellLib.estimateRewardAmounts(\n      v.cTokenCollateral,\n      v.cTokenBorrow,\n      plan.collateralAmount,\n      plan.amountToBorrow,\n      uint32(periodSec == 0 ? 1 : periodSec),\n      IMoonwellComptroller(address(v.comptroller)).rewardDistributor(),\n      ITetuLiquidator(_state.controller.tetuLiquidator()),\n      p_.borrowAsset\n    );\n    return (rewardsSupply + rewardsBorrow) * 10**36 / pd.rb10powDec;\n  }\n  //endregion ----------------------------------------------------- Get conversion plan\n\n  //region ----------------------------------------------------- Utils\n\n  /// @notice Check if the c-tokens are active and return LTV and liquidityThreshold values for the borrow\n  function getMarketsInfo(address cTokenCollateral_, address cTokenBorrow_) public view returns (\n    uint ltv18,\n    uint liquidityThreshold18\n  ) {\n    CompoundLib.ProtocolFeatures memory f;\n    MoonwellLib.initProtocolFeatures(f);\n\n    return CompoundPlatformAdapterLib.getMarketsInfo(_state, f, cTokenCollateral_, cTokenBorrow_);\n  }\n  //endregion ----------------------------------------------------- Utils\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/moonwell/MoonwellPoolAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../openzeppelin/SafeERC20.sol\";\nimport \"../../openzeppelin/IERC20.sol\";\nimport \"../../openzeppelin/Initializable.sol\";\nimport \"../../openzeppelin/IERC20Metadata.sol\";\nimport \"./MoonwellLib.sol\";\nimport \"../compound/CompoundPoolAdapterLib.sol\";\nimport \"../../libs/AppErrors.sol\";\nimport \"../../libs/AppUtils.sol\";\nimport \"../../interfaces/IDebtMonitor.sol\";\nimport \"../../interfaces/IPoolAdapter.sol\";\nimport \"../../interfaces/IConverterController.sol\";\nimport \"../../interfaces/IPoolAdapterInitializerWithAP.sol\";\nimport \"../../interfaces/ITokenAddressProvider.sol\";\nimport \"../../integrations/IWmatic.sol\";\nimport \"../../integrations/moonwell/IMoonwellComptroller.sol\";\n\n/// @notice Implementation of IPoolAdapter for Moonwell-protocol, see https://docs.moonwell.fi/\n/// @dev Instances of this contract are created using proxy-minimal pattern, so no constructor\ncontract MoonwellPoolAdapter is IPoolAdapter, IPoolAdapterInitializerWithAP, Initializable {\n  using SafeERC20 for IERC20;\n\n  //region ----------------------------------------------------- Constants and variables\n  string public constant POOL_ADAPTER_VERSION = \"1.0.1\";\n  address public constant WELL_TOKEN = 0xFF8adeC2221f9f4D8dfbAFa6B9a297d17603493D;\n\n  CompoundPoolAdapterLib.State internal _state;\n  //endregion ----------------------------------------------------- Constants and variables\n\n  //region ----------------------------------------------------- Initialization\n\n  function initialize(\n    address controller_,\n    address cTokenAddressProvider_,\n    address comptroller_,\n    address user_,\n    address collateralAsset_,\n    address borrowAsset_,\n    address originConverter_\n  ) override external\n    // Borrow Manager creates a pool adapter using minimal proxy pattern, adds it the the set of known pool adapters\n    // and initializes it immediately. We should ensure only that the re-initialization is not possible\n  initializer\n  {\n    CompoundPoolAdapterLib.initialize(\n      _state,\n      controller_,\n      cTokenAddressProvider_,\n      comptroller_,\n      user_,\n      collateralAsset_,\n      borrowAsset_,\n      originConverter_\n    );\n  }\n  //endregion ----------------------------------------------------- Initialization\n\n  //region ----------------------------------------------------- Borrow logic\n  function updateStatus() external override {\n    CompoundPoolAdapterLib.updateStatus(_state);\n  }\n\n  /// @notice Supply collateral to the pool and borrow specified amount\n  /// @dev No re-balancing here; Collateral amount must be approved to the pool adapter before the call of this function\n  /// @param collateralAmount_ Amount of collateral, must be approved to the pool adapter before the call of borrow()\n  /// @param borrowAmount_ Amount that should be borrowed in result\n  /// @param receiver_ Receiver of the borrowed amount\n  /// @return Result borrowed amount sent to the {receiver_}\n  function borrow(uint collateralAmount_, uint borrowAmount_, address receiver_) external override returns (uint) {\n    CompoundLib.ProtocolFeatures memory f;\n    MoonwellLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.borrow(_state, f, collateralAmount_, borrowAmount_, receiver_);\n  }\n\n  /// @notice Borrow additional amount {borrowAmount_} using exist collateral and send it to {receiver_}\n  /// @dev Re-balance: too big health factor => target health factor\n  /// @return resultHealthFactor18 Result health factor after borrow\n  /// @return borrowedAmountOut Exact amount sent to the borrower\n  function borrowToRebalance(uint borrowAmount_, address receiver_) external view override returns (\n    uint resultHealthFactor18,\n    uint borrowedAmountOut\n  ) {\n    CompoundLib.ProtocolFeatures memory f;\n    MoonwellLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.borrowToRebalance(_state, f, borrowAmount_, receiver_);\n  }\n  //endregion ----------------------------------------------------- Borrow logic\n\n  //region ----------------------------------------------------- Repay logic\n\n  /// @notice Repay borrowed amount, return collateral to the user\n  /// @param amountToRepay_ Exact amount of borrow asset that should be repaid\n  ///                       The amount should be approved for the pool adapter before the call of repay()\n  /// @param closePosition_ true to pay full borrowed amount\n  /// @param receiver_ Receiver of withdrawn collateral\n  /// @return Amount of collateral asset sent to the {receiver_}\n  function repay(uint amountToRepay_, address receiver_, bool closePosition_) external override returns (uint) {\n    CompoundLib.ProtocolFeatures memory f;\n    MoonwellLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.repay(_state, f, amountToRepay_, receiver_, closePosition_);\n  }\n\n  /// @notice Repay with rebalancing. Send amount of collateral/borrow asset to the pool adapter\n  ///         to recover the health factor to target state.\n  /// @dev It's not allowed to close position here (pay full debt) because no collateral will be returned.\n  /// @param amount_ Exact amount of asset that is transferred to the balance of the pool adapter.\n  ///                It can be amount of collateral asset or borrow asset depended on {isCollateral_}\n  ///                It must be stronger less then total borrow debt.\n  ///                The amount should be approved for the pool adapter before the call.\n  /// @param isCollateral_ true/false indicates that {amount_} is the amount of collateral/borrow asset\n  /// @return resultHealthFactor18 Result health factor after repay, decimals 18\n  function repayToRebalance(uint amount_, bool isCollateral_) external override returns (uint resultHealthFactor18) {\n    CompoundLib.ProtocolFeatures memory f;\n    MoonwellLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.repayToRebalance(_state, f, amount_, isCollateral_);\n  }\n\n  /// @notice If we paid {amountToRepay_}, how much collateral would we receive?\n  function getCollateralAmountToReturn(uint amountToRepay_, bool closePosition_) external view override returns (uint) {\n    return CompoundPoolAdapterLib.getCollateralAmountToReturn(_state, amountToRepay_, closePosition_);\n  }\n  //endregion ----------------------------------------------------- Repay logic\n\n  //region ----------------------------------------------------- Rewards\n  function claimRewards(address receiver_) external override returns (\n    address rewardToken,\n    uint amount\n  ) {\n    IMoonwellComptroller _comptroller = IMoonwellComptroller(address(_state.comptroller));\n\n    address[] memory markets = new address[](2);\n    markets[0] = _state.collateralCToken;\n    markets[1] = _state.borrowCToken;\n    _comptroller.claimReward(address(this), markets);\n\n    amount = IERC20(WELL_TOKEN).balanceOf(address(this));\n    if (amount != 0) {\n      IERC20(WELL_TOKEN).transfer(receiver_, amount);\n      rewardToken = WELL_TOKEN;\n    }\n\n    return (rewardToken, amount);\n  }\n  //endregion ----------------------------------------------------- Rewards\n\n  //region ----------------------------------------------------- View current status\n\n  /// @inheritdoc IPoolAdapter\n  function getConfig() external view override returns (\n    address origin,\n    address outUser,\n    address outCollateralAsset,\n    address outBorrowAsset\n  ) {\n    return (_state.originConverter, _state.user, _state.collateralAsset, _state.borrowAsset);\n  }\n\n  /// @inheritdoc IPoolAdapter\n  function getStatus() external view override returns (\n    uint collateralAmount,\n    uint amountToPay,\n    uint healthFactor18,\n    bool opened,\n    uint collateralAmountLiquidated,\n    bool debtGapRequired\n  ) {\n    CompoundLib.ProtocolFeatures memory f;\n    MoonwellLib.initProtocolFeatures(f);\n\n    return CompoundPoolAdapterLib.getStatus(_state, f);\n  }\n\n  function getConversionKind() external pure override returns (AppDataTypes.ConversionKind) {\n    return AppDataTypes.ConversionKind.BORROW_2;\n  }\n\n  function controller() external view returns (address) {\n    return address(_state.controller);\n  }\n  function comptroller() external view returns (address) {\n    return address(_state.comptroller);\n  }\n  function collateralTokensBalance() external view returns (uint) {\n    return _state.collateralTokensBalance;\n  }\n  //endregion ----------------------------------------------------- View current status\n\n  //region ----------------------------------------------------- Native tokens\n  receive() external payable {\n    // this is needed for the native token unwrapping\n    // no restrictions because this adpater is not used in production, it's for tests only\n  }\n  //endregion ----------------------------------------------------- Native tokens\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/protocols/moonwell/MoonwellRewardsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../integrations/moonwell/IMToken.sol\";\nimport \"../../integrations/moonwell/IMoonwellMultiRewardDistributor.sol\";\n\n/// @notice Routines to calculate supply and borrow reward amounts in advance\n///         Based on the code from MultiRewardDistributor.sol, see https://github.com/moonwell-fi/moonwell-contracts-v2\nlibrary MoonwellRewardsLib {\n\n  /// @notice The initialIndexConstant, used to initialize indexes, and taken from the Comptroller\n  uint224 public constant initialIndexConstant = 1e36;\n  uint constant expScale = 1e18;\n  uint constant doubleScale = 1e36;\n\n  //region ----------------------------------------------------------- Data types\n  struct IndexUpdate {\n    uint224 newIndex;\n    uint32 newTimestamp;\n  }\n\n  struct Exp {\n    uint mantissa;\n  }\n\n  struct Double {\n    uint mantissa;\n  }\n\n  struct MTokenData {\n    uint mTokenBalance;\n    uint borrowBalanceStored;\n  }\n\n  // Some structs we can't move to the interface\n  struct CurrentMarketData {\n    uint256 totalMTokens;\n    uint256 totalBorrows;\n    Exp marketBorrowIndex;\n  }\n\n  struct CalculatedData {\n    CurrentMarketData marketData;\n    MTokenData mTokenInfo;\n  }\n\n  struct LocalVars {\n    MultiRewardDistributorCommon.MarketConfig[] configs;\n    MultiRewardDistributorCommon.MarketConfig config;\n    CalculatedData calcData;\n    IndexUpdate supplyUpdateNow;\n    IndexUpdate supplyUpdate;\n    IndexUpdate borrowUpdateNow;\n    IndexUpdate borrowUpdate;\n    uint256 index;\n    uint userSupplyIndex;\n    uint userBorrowIndex;\n    uint256 supplierRewardsAccrued;\n    uint256 borrowerRewardsAccrued;\n  }\n  //endregion ----------------------------------------------------------- Data types\n\n  //region ----------------------------------------------------------- Public function\n  function getOutstandingRewardsForUser(\n    IMToken mToken_,\n    uint32 borrowPeriodTimestamp_,\n    uint amountToSupply_,\n    uint amountToBorrow_,\n    IMoonwellMultiRewardDistributor rewardDistributor\n  ) internal view returns (\n    MultiRewardDistributorCommon.RewardInfo[] memory outputRewardData\n  ) {\n    LocalVars memory v;\n\n    // Global config for this mToken\n    v.configs = rewardDistributor.getAllMarketConfigs(address(mToken_));\n    outputRewardData = new MultiRewardDistributorCommon.RewardInfo[](v.configs.length);\n\n    uint amountMTokensToSupply =  amountToSupply_ * 1e18 / mToken_.exchangeRateStored();\n\n    v.calcData = CalculatedData({\n        marketData: CurrentMarketData({\n        totalMTokens: mToken_.totalSupply(),\n        totalBorrows: mToken_.totalBorrows(),\n        marketBorrowIndex: Exp({mantissa: mToken_.borrowIndex()})\n      }),\n      mTokenInfo: MTokenData({\n      // we assume that new user is going to make new borrow\n        mTokenBalance: amountMTokensToSupply,\n        borrowBalanceStored: amountToBorrow_\n      })\n    });\n\n    for (v.index = 0; v.index < v.configs.length; v.index++) {\n      v.config = v.configs[v.index];\n\n      if (amountMTokensToSupply != 0) {\n        // Calculate new global supply index: current value => current block\n        v.supplyUpdateNow = calculateNewIndex(\n          v.config.supplyEmissionsPerSec,\n          v.config.supplyGlobalTimestamp,\n          v.config.supplyGlobalIndex,\n          v.config.endTime,\n          v.calcData.marketData.totalMTokens,\n          uint32(block.timestamp)\n        );\n        // Calculate new global supply index: current block => borrow period\n        v.supplyUpdate = calculateNewIndex(\n          v.config.supplyEmissionsPerSec,\n          v.supplyUpdateNow.newTimestamp,\n          v.supplyUpdateNow.newIndex,\n          v.config.endTime,\n          v.calcData.marketData.totalMTokens + amountMTokensToSupply,\n          v.supplyUpdateNow.newTimestamp + borrowPeriodTimestamp_\n        );\n        // Calculate outstanding supplier side rewards\n        v.supplierRewardsAccrued = calculateSupplyRewardsForUser(\n          v.supplyUpdate.newIndex,\n          v.calcData.mTokenInfo.mTokenBalance,\n          v.supplyUpdateNow.newIndex\n        );\n      }\n\n      if (amountToBorrow_ != 0) {\n        // Calculate our new global borrow index\n        v.borrowUpdateNow = calculateNewIndex(\n          v.config.borrowEmissionsPerSec,\n          v.config.borrowGlobalTimestamp,\n          v.config.borrowGlobalIndex,\n          v.config.endTime,\n          div_(\n            v.calcData.marketData.totalBorrows,\n            v.calcData.marketData.marketBorrowIndex\n          ),\n          uint32(block.timestamp)\n        );\n        v.borrowUpdate = calculateNewIndex(\n          v.config.borrowEmissionsPerSec,\n          v.borrowUpdateNow.newTimestamp,\n          v.borrowUpdateNow.newIndex,\n          v.config.endTime,\n          div_(\n            v.calcData.marketData.totalBorrows + amountToBorrow_,\n            v.calcData.marketData.marketBorrowIndex\n          ),\n          v.borrowUpdateNow.newTimestamp + borrowPeriodTimestamp_\n        );\n        v.borrowerRewardsAccrued = calculateBorrowRewardsForUser(\n          v.borrowUpdate.newIndex,\n          v.calcData.marketData.marketBorrowIndex,\n          v.calcData.mTokenInfo,\n          v.borrowUpdateNow.newIndex\n        );\n      }\n\n      outputRewardData[v.index] = MultiRewardDistributorCommon.RewardInfo({\n        emissionToken: v.config.emissionToken,\n        totalAmount: v.borrowerRewardsAccrued + v.supplierRewardsAccrued,\n        supplySide: v.supplierRewardsAccrued,\n        borrowSide: v.borrowerRewardsAccrued\n      });\n    }\n\n    return outputRewardData;\n  }\n  //endregion ----------------------------------------------------------- Public function\n\n  //region ----------------------------------------------------------- Internal logic\n  /// @notice An internal view to calculate the total owed supplier rewards for a given supplier address\n  /// @param _globalSupplyIndex The global supply index for a market\n  /// @param _supplierTokens The amount of this market's mTokens owned by a user\n  /// @param userSupplyIndex _emissionConfig.supplierIndices[_supplier], _supplier is the address of the supplier\n  function calculateSupplyRewardsForUser(\n    uint224 _globalSupplyIndex,\n    uint256 _supplierTokens,\n    uint256 userSupplyIndex\n  ) internal pure returns (uint256) {\n    // If our user's index isn't set yet, set to the current global supply index\n    if (userSupplyIndex == 0 && _globalSupplyIndex >= initialIndexConstant) {\n      userSupplyIndex = initialIndexConstant; //_globalSupplyIndex;\n    }\n\n    // Calculate change in the cumulative sum of the reward per cToken accrued\n    Double memory deltaIndex = Double({\n      mantissa: sub_(_globalSupplyIndex, userSupplyIndex)\n    });\n\n    // Calculate reward accrued: cTokenAmount * accruedPerCToken\n    return mul_(_supplierTokens, deltaIndex);\n  }\n\n  /// @notice An internal view to calculate the total owed borrower rewards for a given borrower address\n  /// @param _globalBorrowIndex The global borrow index for a market\n  /// @param _marketBorrowIndex The mToken's borrowIndex\n  /// @param _mTokenData A struct holding a borrower's\n  /// @param userBorrowIndex _emissionConfig.borrowerIndices[_borrower],\n  ///        where _borrower is the address of the supplier mToken balance and borrowed balance\n  function calculateBorrowRewardsForUser(\n    uint224 _globalBorrowIndex,\n    Exp memory _marketBorrowIndex,\n    MTokenData memory _mTokenData,\n    uint256 userBorrowIndex\n  ) internal pure returns (uint256) {\n    // If our user's index isn't set yet, set to the current global borrow index\n    if (userBorrowIndex == 0 && _globalBorrowIndex >= initialIndexConstant) {\n      userBorrowIndex = initialIndexConstant; //userBorrowIndex = _globalBorrowIndex;\n    }\n\n    // Calculate change in the cumulative sum of the reward per cToken accrued\n    Double memory deltaIndex = Double({\n      mantissa: sub_(_globalBorrowIndex, userBorrowIndex)\n    });\n\n    uint borrowerAmount = div_(\n      _mTokenData.borrowBalanceStored,\n      _marketBorrowIndex\n    );\n\n    // Calculate reward accrued: mTokenAmount * accruedPerMToken\n    return mul_(borrowerAmount, deltaIndex);\n  }\n\n  /// @notice An internal view to calculate the global reward indices while taking into account emissions end times.\n  /// @dev Denominator here is whatever fractional denominator is used to calculate the index. On the supply side\n  ///      it's simply mToken.totalSupply(), while on the borrow side it's (mToken.totalBorrows() / mToken.borrowIndex())\n  /// @param _emissionsPerSecond The configured emissions per second for this index\n  /// @param _currentTimestamp The current index timestamp\n  /// @param _currentIndex The current index\n  /// @param _rewardEndTime The end time for this reward config\n  /// @param _denominator The denominator used in the calculation (supply side == mToken.totalSupply,\n  ///        borrow side is (mToken.totalBorrows() / mToken.borrowIndex()).\n  /// @param blockTimestamp Timestamp of the final block where the borrow ends\n  function calculateNewIndex(\n    uint256 _emissionsPerSecond,\n    uint32 _currentTimestamp,\n    uint224 _currentIndex,\n    uint256 _rewardEndTime,\n    uint256 _denominator,\n    uint32 blockTimestamp\n  ) internal pure returns (IndexUpdate memory) {\n    uint256 deltaTimestamps = sub_(\n      blockTimestamp,\n      uint256(_currentTimestamp)\n    );\n\n    // If our current block timestamp is newer than our emission end time, we need to halt\n    // reward emissions by stinting the growth of the global index, but importantly not\n    // the global timestamp. Should not be gte because the equivalent case makes a\n    // 0 deltaTimestamp which doesn't accrue the last bit of rewards properly.\n    if (blockTimestamp > _rewardEndTime) {\n      // If our current index timestamp is less than our end time it means this\n      // is the first time the endTime threshold has been breached, and we have\n      // some left over rewards to accrue, so clamp deltaTimestamps to the whatever\n      // window of rewards still remains.\n      if (_currentTimestamp < _rewardEndTime) {\n        deltaTimestamps = sub_(_rewardEndTime, _currentTimestamp);\n      } else {\n        // Otherwise just set deltaTimestamps to 0 to ensure that we short circuit in the next step\n        deltaTimestamps = 0;\n      }\n    }\n\n    // Short circuit to update the timestamp but *not* the index if there's nothing to calculate\n    if (deltaTimestamps == 0 || _emissionsPerSecond == 0) {\n      return\n        IndexUpdate({\n          newIndex: _currentIndex,\n          newTimestamp: blockTimestamp\n        });\n    }\n\n    // At this point we know we have to calculate a new index, so do so\n    uint256 tokenAccrued = mul_(deltaTimestamps, _emissionsPerSecond);\n    Double memory ratio = _denominator > 0\n      ? fraction(tokenAccrued, _denominator)\n      : Double({mantissa: 0});\n\n    uint224 newIndex = safe224(\n      add_(Double({mantissa: _currentIndex}), ratio).mantissa,\n      \"new index exceeds 224 bits\"\n    );\n\n    return IndexUpdate({newIndex: newIndex, newTimestamp: blockTimestamp});\n  }\n  //endregion ----------------------------------------------------------- Internal logic\n\n  //region ----------------------------------------------------------- Math utils\n  function div_(uint a, Exp memory b) pure internal returns (uint) {\n    return div_(mul_(a, expScale), b.mantissa);\n  }\n\n  function div_(uint a, uint b) pure internal returns (uint) {\n    return div_(a, b, \"divide by zero\");\n  }\n\n  function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n    require(b > 0, errorMessage);\n    return a / b;\n  }\n\n  function sub_(uint a, uint b) pure internal returns (uint) {\n    return sub_(a, b, \"subtraction underflow\");\n  }\n\n  function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n    require(b <= a, errorMessage);\n    return a - b;\n  }\n\n  function mul_(uint a, Double memory b) pure internal returns (uint) {\n    return mul_(a, b.mantissa) / doubleScale;\n  }\n\n  function mul_(uint a, uint b) pure internal returns (uint) {\n    return mul_(a, b, \"multiplication overflow\");\n  }\n\n  function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n    uint c = a * b;\n    require(c / a == b, errorMessage);\n    return c;\n  }\n\n  function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\n    require(n < 2**32, errorMessage);\n    return uint32(n);\n  }\n\n  function fraction(uint a, uint b) pure internal returns (Double memory) {\n    return Double({mantissa: div_(mul_(a, doubleScale), b)});\n  }\n\n  function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\n    require(n < 2**224, errorMessage);\n    return uint224(n);\n  }\n\n  function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\n    return Double({mantissa: add_(a.mantissa, b.mantissa)});\n  }\n\n  function add_(uint a, uint b) pure internal returns (uint) {\n    return add_(a, b, \"addition overflow\");\n  }\n\n  function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n    uint c = a + b;\n    require(c >= a, errorMessage);\n    return c;\n  }\n  //endregion ----------------------------------------------------------- Math utils\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/proxy/ControllableV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/Initializable.sol\";\nimport \"../libs/SlotsLib.sol\";\nimport \"../libs/AppErrors.sol\";\nimport \"../interfaces/IConverterControllable.sol\";\nimport \"../interfaces/IConverterController.sol\";\n\n/// @title Implement basic functionality for any contract that require strict control\n/// @dev Can be used with upgradeable pattern.\n///      Require call __Controllable_init() in any case.\n/// @author belbix\nabstract contract ControllableV3 is Initializable, IConverterControllable {\n  using SlotsLib for bytes32;\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant CONTROLLABLE_VERSION = \"3.0.0\";\n\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.controller\")) - 1);\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.created\")) - 1);\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.created_block\")) - 1);\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.revision\")) - 1);\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.prev_logic\")) - 1);\n\n  event ContractInitialized(address controller, uint ts, uint block);\n  event RevisionIncreased(uint value, address oldLogic);\n\n  constructor() {\n    _disableInitializers();\n  }\n\n  /// @notice Initialize contract after setup it as proxy implementation\n  ///         Save block.timestamp in the \"created\" variable\n  /// @dev Use it only once after first logic setup\n  /// @param controller_ Controller address\n  function __Controllable_init(address controller_) public onlyInitializing {\n    require(controller_ != address(0), AppErrors.ZERO_ADDRESS);\n    require(IConverterController(controller_).governance() != address(0), \"Zero governance\");\n    _CONTROLLER_SLOT.set(controller_);\n    _CREATED_SLOT.set(block.timestamp);\n    _CREATED_BLOCK_SLOT.set(block.number);\n    emit ContractInitialized(controller_, block.timestamp, block.number);\n  }\n\n  /// @dev Return true if given address is controller\n  function isController(address _value) public override view returns (bool) {\n    return _value == controller();\n  }\n  /// @dev Return true if given address is controller of tetu-contracts-v2 that is allowed to update proxy contracts\n  function isProxyUpdater(address _value) public override view returns (bool) {\n    return IConverterController(controller()).proxyUpdater() == _value;\n  }\n\n  /// @notice Return true if given address is setup as governance in ConverterController\n  function isGovernance(address _value) public override view returns (bool) {\n    return IConverterController(controller()).governance() == _value;\n  }\n\n  /// @dev Contract upgrade counter\n  function revision() external view returns (uint){\n    return _REVISION_SLOT.getUint();\n  }\n\n  /// @dev Previous logic implementation\n  function previousImplementation() external view returns (address){\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\n  }\n\n  // ************* SETTERS/GETTERS *******************\n\n  /// @notice Return ConverterController address saved in the contract slot\n  function controller() public view override returns (address) {\n    return _CONTROLLER_SLOT.getAddress();\n  }\n\n  /// @notice Return creation timestamp\n  /// @return Creation timestamp\n  function created() external view override returns (uint256) {\n    return _CREATED_SLOT.getUint();\n  }\n\n  /// @notice Return creation block number\n  /// @return Creation block number\n  function createdBlock() external override view returns (uint256) {\n    return _CREATED_BLOCK_SLOT.getUint();\n  }\n\n  /// @dev Revision should be increased on each contract upgrade\n  function increaseRevision(address oldLogic) external override {\n    require(msg.sender == address(this), \"Increase revision forbidden\");\n    uint r = _REVISION_SLOT.getUint() + 1;\n    _REVISION_SLOT.set(r);\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\n    emit RevisionIncreased(r, oldLogic);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/proxy/ProxyControlled.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IControllable.sol\";\nimport \"../interfaces/IProxyControlled.sol\";\nimport \"../interfaces/IConverterControllable.sol\";\nimport \"./UpgradeableProxy.sol\";\n\n/// @title EIP1967 Upgradable proxy implementation.\n/// @dev Only Controller has access and should implement time-lock for upgrade action.\n/// @author belbix\ncontract ProxyControlled is UpgradeableProxy, IProxyControlled {\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant PROXY_CONTROLLED_VERSION = \"1.0.0\";\n\n  /// @dev Initialize proxy implementation. Need to call after deploy new proxy.\n  function initProxy(address _logic) external override {\n    //make sure that given logic is controllable and not inited\n    require(IConverterControllable(_logic).created() >= 0, \"Proxy: Wrong implementation\");\n    _init(_logic);\n  }\n\n  /// @notice Upgrade contract logic\n  /// @dev Upgrade allowed only for Controller of tetu-contracts-v2 and should be done only after time-lock period\n  /// @param _newImplementation Implementation address\n  function upgrade(address _newImplementation) external override {\n    require(IConverterControllable(address(this)).isProxyUpdater(msg.sender), \"Proxy: Forbidden\");\n    IConverterControllable(address(this)).increaseRevision(_implementation());\n    _upgradeTo(_newImplementation);\n    // the new contract must have the same ABI and you must have the power to change it again\n    require(IConverterControllable(address(this)).isProxyUpdater(msg.sender), \"Proxy: Wrong implementation\");\n  }\n\n  /// @notice Return current logic implementation\n  function implementation() external override view returns (address) {\n    return _implementation();\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/proxy/UpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/Proxy.sol\";\nimport \"../openzeppelin/Address.sol\";\n\n/// @title OpenZeppelin https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4/contracts/proxy/UpgradeableProxy.sol\n/// @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n///      implementation address that can be changed. This address is stored in storage in the location specified by\n///      https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n///      implementation behind the proxy.\n///      Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n///      {TransparentUpgradeableProxy}.\nabstract contract UpgradeableProxy is Proxy {\n\n  /// @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n  ///      If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n  ///      function call, and allows initializating the storage of the proxy like a Solidity constructor.\n  constructor() payable {\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n  }\n\n  /// @dev Emitted when the implementation is upgraded.\n  event Upgraded(address indexed implementation);\n\n  ///@dev Storage slot with the address of the current implementation.\n  ///     This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n  ///     validated in the constructor.\n  bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  /// @dev Post deploy initialisation for compatability with EIP-1167 factory\n  function _init(address _logic) internal {\n    require(_implementation() == address(0), \"Already inited\");\n    _setImplementation(_logic);\n  }\n\n  /// @dev Returns the current implementation address.\n  function _implementation() internal view virtual override returns (address impl) {\n    bytes32 slot = _IMPLEMENTATION_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /// @dev Upgrades the proxy to a new implementation.\n  ///      Emits an {Upgraded} event.\n  function _upgradeTo(address newImplementation) internal virtual {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /// @dev Stores a new address in the EIP1967 implementation slot.\n  function _setImplementation(address newImplementation) private {\n    require(Address.isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n    bytes32 slot = _IMPLEMENTATION_SLOT;\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-converter/contracts/tests/keeper/KeeperCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../integrations/gelato/IResolver.sol\";\nimport \"hardhat/console.sol\";\nimport \"../../integrations/gelato/IOps.sol\";\n\ncontract KeeperCaller is IOps {\n  enum LastCallResults {\n    NOT_CALLED_0,\n    SUCCESS_1,\n    FAILED_2\n  }\n  address public keeperChecker;\n  address public keeperExecutor;\n  LastCallResults public lastCallResults;\n\n  function setupKeeper(\n    address keeperChecker_,\n    address keeperExecutor_\n  ) external {\n    keeperChecker = keeperChecker_;\n    keeperExecutor = keeperExecutor_;\n  }\n\n  function gelato() external view override returns (address payable) {\n    console.log(\"is gelato\", address(this));\n    return payable(address(this));\n  }\n\n  function taskTreasury() external view override returns (address) {\n    return address(this);\n  }\n\n  function callChecker() external {\n    console.log(\"KeeperCaller.callChecker\", address(keeperChecker));\n    (\n      bool canExecOut,\n      bytes memory execPayloadOut\n    ) = IResolver(keeperChecker).checker();\n    console.log(\"KeeperCaller.canExecOut\", canExecOut);\n\n    if (canExecOut) {\n      console.log(\"KeeperCaller.execute\", address(keeperExecutor));\n      (bool success,) = address(keeperExecutor).call(execPayloadOut);\n      console.log(\"KeeperCaller.execute success\", success);\n      lastCallResults = success\n        ? LastCallResults.SUCCESS_1\n        : LastCallResults.FAILED_2;\n    } else {\n      lastCallResults = LastCallResults.NOT_CALLED_0;\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/Controller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./interfaces/ILiquidatorController.sol\";\nimport \"./interfaces/IProxyControlled.sol\";\n\n\ncontract Controller is ILiquidatorController {\n\n  // *************************************************************\n  //                        VARIABLES\n  // *************************************************************\n\n  address public override governance;\n  address public pendingGovernance;\n  mapping(address => bool) public operators;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event SetGovernance(address value);\n  event ChangeOperatorStatus(address operator, bool status);\n\n  // *************************************************************\n  //                      CONSTRUCTOR\n  // *************************************************************\n\n  constructor () {\n    governance = msg.sender;\n    operators[msg.sender] = true;\n  }\n\n  // *************************************************************\n  //                     RESTRICTIONS\n  // *************************************************************\n\n  modifier onlyGovernance() {\n    require(msg.sender == governance, \"!gov\");\n    _;\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  function isOperator(address _adr) external view override returns (bool) {\n    return operators[_adr];\n  }\n\n  // *************************************************************\n  //                     GOV ACTIONS\n  // *************************************************************\n\n  function updateProxies(address[] memory proxies, address[] memory newLogics) external onlyGovernance {\n    require(proxies.length == newLogics.length, \"Wrong arrays\");\n    for (uint i; i < proxies.length; i++) {\n      IProxyControlled(proxies[i]).upgrade(newLogics[i]);\n    }\n  }\n\n  function changeOperatorStatus(address operator, bool status) external onlyGovernance {\n    operators[operator] = status;\n    emit ChangeOperatorStatus(operator, status);\n  }\n\n  function setGovernance(address _value) external onlyGovernance {\n    pendingGovernance = _value;\n    emit SetGovernance(_value);\n  }\n\n  function acceptGovernance() external {\n    require(msg.sender == pendingGovernance, \"Not pending gov\");\n    governance = pendingGovernance;\n  }\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/dex/uniswap3/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/dex/uniswap3/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/dex/uniswap3/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/dex/uniswap3/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/dex/uniswap3/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/dex/uniswap3/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/dex/uniswap3/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/dex/uniswap3/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint amount\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n  /**\n   * @dev Returns the name of the token.\n     */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the symbol of the token.\n     */\n  function symbol() external view returns (string memory);\n\n  /**\n   * @dev Returns the decimals places of the token.\n     */\n  function decimals() external view returns (uint8);\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/interfaces/ILiquidatorControllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ILiquidatorControllable {\n\n  function isController(address _contract) external view returns (bool);\n\n  function isGovernance(address _contract) external view returns (bool);\n\n  function created() external view returns (uint256);\n\n  function createdBlock() external view returns (uint256);\n\n  function controller() external view returns (address);\n\n  function increaseRevision(address oldLogic) external;\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/interfaces/ILiquidatorController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ILiquidatorController {\n\n  function governance() external view returns (address);\n\n  function isOperator(address _adr) external view returns (bool);\n\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/interfaces/IProxyControlled.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IProxyControlled {\n\n  function initProxy(address _logic) external;\n\n  function upgrade(address _newImplementation) external;\n\n  function implementation() external returns (address);\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/interfaces/ISwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ISwapper {\n\n  function swap(\n    address pool,\n    address tokenIn,\n    address tokenOut,\n    address recipient,\n    uint priceImpactTolerance\n  ) external;\n\n  function getPrice(\n    address pool,\n    address tokenIn,\n    address tokenOut,\n    uint amount\n  ) external view returns (uint);\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/interfaces/ITetuLiquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ITetuLiquidator {\n\n  struct PoolData {\n    address pool;\n    address swapper;\n    address tokenIn;\n    address tokenOut;\n  }\n\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\n\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\n\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\n\n  function buildRoute(\n    address tokenIn,\n    address tokenOut\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\n\n  function liquidate(\n    address tokenIn,\n    address tokenOut,\n    uint amount,\n    uint priceImpactTolerance\n  ) external;\n\n  function liquidateWithRoute(\n    PoolData[] memory route,\n    uint amount,\n    uint priceImpactTolerance\n  ) external;\n\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/lib/SlotsLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\n/// @author bogdoslav\nlibrary SlotsLib {\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant SLOT_LIB_VERSION = \"1.0.0\";\n\n  // ************* GETTERS *******************\n\n  /// @dev Gets a slot as bytes32\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  /// @dev Gets a slot as an address\n  function getAddress(bytes32 slot) internal view returns (address result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  /// @dev Gets a slot as uint256\n  function getUint(bytes32 slot) internal view returns (uint result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  // ************* ARRAY GETTERS *******************\n\n  /// @dev Gets an array length\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\n    assembly {\n      result := sload(slot)\n    }\n  }\n\n  /// @dev Gets a slot array by index as address\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      result := sload(pointer)\n    }\n  }\n\n  /// @dev Gets a slot array by index as uint\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function uintAt(bytes32 slot, uint index) internal view returns (uint result) {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      result := sload(pointer)\n    }\n  }\n\n  // ************* SETTERS *******************\n\n  /// @dev Sets a slot with bytes32\n  /// @notice Check address for 0 at the setter\n  function set(bytes32 slot, bytes32 value) internal {\n    assembly {\n      sstore(slot, value)\n    }\n  }\n\n  /// @dev Sets a slot with address\n  /// @notice Check address for 0 at the setter\n  function set(bytes32 slot, address value) internal {\n    assembly {\n      sstore(slot, value)\n    }\n  }\n\n  /// @dev Sets a slot with uint\n  function set(bytes32 slot, uint value) internal {\n    assembly {\n      sstore(slot, value)\n    }\n  }\n\n  // ************* ARRAY SETTERS *******************\n\n  /// @dev Sets a slot array at index with address\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function setAt(bytes32 slot, uint index, address value) internal {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      sstore(pointer, value)\n    }\n  }\n\n  /// @dev Sets a slot array at index with uint\n  /// @notice First slot is array length, elements ordered backward in memory\n  /// @notice This is unsafe, without checking array length.\n  function setAt(bytes32 slot, uint index, uint value) internal {\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\n    assembly {\n      sstore(pointer, value)\n    }\n  }\n\n  /// @dev Sets an array length\n  function setLength(bytes32 slot, uint length) internal {\n    assembly {\n      sstore(slot, length)\n    }\n  }\n\n  /// @dev Pushes an address to the array\n  function push(bytes32 slot, address value) internal {\n    uint length = arrayLength(slot);\n    setAt(slot, length, value);\n    setLength(slot, length + 1);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/openzeppelin/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/utils/AddressUpgradeable.sol\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n  function isContract(address account) internal view returns (bool) {\n    // This method relies on extcodesize/address.code.length, which returns 0\n    // for contracts in construction, since the code is only stored at the end\n    // of the constructor execution.\n\n    return account.code.length > 0;\n  }\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n  function sendValue(address payable recipient, uint amount) internal {\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n    (bool success, ) = recipient.call{value: amount}(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n    return functionCall(target, data, \"Address: low-level call failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n  function functionCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint value\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint value,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\n    require(isContract(target), \"Address: call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResult(success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n  function functionStaticCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal view returns (bytes memory) {\n    require(isContract(target), \"Address: static call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResult(success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) internal pure returns (bytes memory) {\n    if (success) {\n      return returndata;\n    } else {\n      // Look for revert reason and bubble it up if present\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/openzeppelin/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"./Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n  /**\n   * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n  uint8 private _initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n     */\n  bool private _initializing;\n\n  /**\n   * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n  event Initialized(uint8 version);\n\n  /**\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n  modifier initializer() {\n    bool isTopLevelCall = _setInitializedVersion(1);\n    if (isTopLevelCall) {\n      _initializing = true;\n    }\n    _;\n    if (isTopLevelCall) {\n      _initializing = false;\n      emit Initialized(1);\n    }\n  }\n\n  /**\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n  modifier reinitializer(uint8 version) {\n    bool isTopLevelCall = _setInitializedVersion(version);\n    if (isTopLevelCall) {\n      _initializing = true;\n    }\n    _;\n    if (isTopLevelCall) {\n      _initializing = false;\n      emit Initialized(version);\n    }\n  }\n\n  /**\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n  modifier onlyInitializing() {\n    require(_initializing, \"Initializable: contract is not initializing\");\n    _;\n  }\n\n  /**\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n  function _disableInitializers() internal virtual {\n    _setInitializedVersion(type(uint8).max);\n  }\n\n  function _setInitializedVersion(uint8 version) private returns (bool) {\n    // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n    // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n    // of initializers, because in other contexts the contract may have been reentered.\n    if (_initializing) {\n      require(\n        version == 1 && !Address.isContract(address(this)),\n        \"Initializable: contract is already initialized\"\n      );\n      return false;\n    } else {\n      require(_initialized < version, \"Initializable: contract is already initialized\");\n      _initialized = version;\n      return true;\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/openzeppelin/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n  enum Rounding {\n    Down, // Toward negative infinity\n    Up, // Toward infinity\n    Zero // Toward zero\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a * b;\n  }\n\n  function div(\n    uint256 a,\n    uint256 b,\n    bool roundUp\n  ) internal pure returns (uint256) {\n    return roundUp ? divUp(a, b) : divDown(a, b);\n  }\n\n  function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n\n  function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    } else {\n      return 1 + (a - 1) / b;\n    }\n  }\n\n  /**\n   * @dev Returns the largest of two numbers.\n     */\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a > b ? a : b;\n  }\n\n  /**\n   * @dev Returns the smallest of two numbers.\n     */\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  /**\n   * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b) / 2 can overflow.\n    return (a & b) + (a ^ b) / 2;\n  }\n\n  /**\n   * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // (a + b - 1) / b can overflow on addition, so we distribute.\n    return a == 0 ? 0 : (a - 1) / b + 1;\n  }\n\n  /**\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n  function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator\n  ) internal pure returns (uint256 result) {\n  unchecked {\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n    // variables such that product = prod1 * 2^256 + prod0.\n    uint256 prod0; // Least significant 256 bits of the product\n    uint256 prod1; // Most significant 256 bits of the product\n    assembly {\n      let mm := mulmod(x, y, not(0))\n      prod0 := mul(x, y)\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n    }\n\n    // Handle non-overflow cases, 256 by 256 division.\n    if (prod1 == 0) {\n      return prod0 / denominator;\n    }\n\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\n    require(denominator > prod1);\n\n    ///////////////////////////////////////////////\n    // 512 by 256 division.\n    ///////////////////////////////////////////////\n\n    // Make division exact by subtracting the remainder from [prod1 prod0].\n    uint256 remainder;\n    assembly {\n    // Compute remainder using mulmod.\n      remainder := mulmod(x, y, denominator)\n\n    // Subtract 256 bit number from 512 bit number.\n      prod1 := sub(prod1, gt(remainder, prod0))\n      prod0 := sub(prod0, remainder)\n    }\n\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n    // See https://cs.stackexchange.com/q/138556/92363.\n\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\n    uint256 twos = denominator & (~denominator + 1);\n    assembly {\n    // Divide denominator by twos.\n      denominator := div(denominator, twos)\n\n    // Divide [prod1 prod0] by twos.\n      prod0 := div(prod0, twos)\n\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n      twos := add(div(sub(0, twos), twos), 1)\n    }\n\n    // Shift in bits from prod1 into prod0.\n    prod0 |= prod1 * twos;\n\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n    // four bits. That is, denominator * inv = 1 mod 2^4.\n    uint256 inverse = (3 * denominator) ^ 2;\n\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n    // in modular arithmetic, doubling the correct bits in each step.\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n    // is no longer required.\n    result = prod0 * inverse;\n    return result;\n  }\n  }\n\n  /**\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n  function mulDiv(\n    uint256 x,\n    uint256 y,\n    uint256 denominator,\n    Rounding rounding\n  ) internal pure returns (uint256) {\n    uint256 result = mulDiv(x, y, denominator);\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n      result += 1;\n    }\n    return result;\n  }\n\n  /**\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n  function sqrt(uint256 a) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n    //\n    // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n    //\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n    // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n    // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n    //\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n    uint256 result = 1 << (log2(a) >> 1);\n\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n    // into the expected uint128 result.\n  unchecked {\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    result = (result + a / result) >> 1;\n    return min(result, a / result);\n  }\n  }\n\n  /**\n   * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n  unchecked {\n    uint256 result = sqrt(a);\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n  }\n  }\n\n  /**\n   * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log2(uint256 value) internal pure returns (uint256) {\n    uint256 result = 0;\n  unchecked {\n    if (value >> 128 > 0) {\n      value >>= 128;\n      result += 128;\n    }\n    if (value >> 64 > 0) {\n      value >>= 64;\n      result += 64;\n    }\n    if (value >> 32 > 0) {\n      value >>= 32;\n      result += 32;\n    }\n    if (value >> 16 > 0) {\n      value >>= 16;\n      result += 16;\n    }\n    if (value >> 8 > 0) {\n      value >>= 8;\n      result += 8;\n    }\n    if (value >> 4 > 0) {\n      value >>= 4;\n      result += 4;\n    }\n    if (value >> 2 > 0) {\n      value >>= 2;\n      result += 2;\n    }\n    if (value >> 1 > 0) {\n      result += 1;\n    }\n  }\n    return result;\n  }\n\n  /**\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n  unchecked {\n    uint256 result = log2(value);\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n  }\n  }\n\n  /**\n   * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log10(uint256 value) internal pure returns (uint256) {\n    uint256 result = 0;\n  unchecked {\n    if (value >= 10**64) {\n      value /= 10**64;\n      result += 64;\n    }\n    if (value >= 10**32) {\n      value /= 10**32;\n      result += 32;\n    }\n    if (value >= 10**16) {\n      value /= 10**16;\n      result += 16;\n    }\n    if (value >= 10**8) {\n      value /= 10**8;\n      result += 8;\n    }\n    if (value >= 10**4) {\n      value /= 10**4;\n      result += 4;\n    }\n    if (value >= 10**2) {\n      value /= 10**2;\n      result += 2;\n    }\n    if (value >= 10**1) {\n      result += 1;\n    }\n  }\n    return result;\n  }\n\n  /**\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n  unchecked {\n    uint256 result = log10(value);\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n  }\n  }\n\n  /**\n   * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n  function log256(uint256 value) internal pure returns (uint256) {\n    uint256 result = 0;\n  unchecked {\n    if (value >> 128 > 0) {\n      value >>= 128;\n      result += 16;\n    }\n    if (value >> 64 > 0) {\n      value >>= 64;\n      result += 8;\n    }\n    if (value >> 32 > 0) {\n      value >>= 32;\n      result += 4;\n    }\n    if (value >> 16 > 0) {\n      value >>= 16;\n      result += 2;\n    }\n    if (value >> 8 > 0) {\n      result += 1;\n    }\n  }\n    return result;\n  }\n\n  /**\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n  unchecked {\n    uint256 result = log256(value);\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n  }\n  }\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/openzeppelin/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n  /**\n   * @dev Delegates the current call to `implementation`.\n   *\n   * This function does not return to its internall call site, it will return directly to the external caller.\n   */\n  function _delegate(address implementation) internal virtual {\n    assembly {\n    // Copy msg.data. We take full control of memory in this inline assembly\n    // block because it will not return to Solidity code. We overwrite the\n    // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize())\n\n    // Call the implementation.\n    // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n    // Copy the returned data.\n      returndatacopy(0, 0, returndatasize())\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n\n  /**\n   * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n   * and {_fallback} should delegate.\n   */\n  function _implementation() internal view virtual returns (address);\n\n  /**\n   * @dev Delegates the current call to the address returned by `_implementation()`.\n   *\n   * This function does not return to its internall call site, it will return directly to the external caller.\n   */\n  function _fallback() internal virtual {\n    _beforeFallback();\n    _delegate(_implementation());\n  }\n\n  /**\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n   * function in the contract matches the call data.\n   */\n  fallback() external payable virtual {\n    _fallback();\n  }\n\n  /**\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n   * is empty.\n   */\n  receive() external payable virtual {\n    _fallback();\n  }\n\n  /**\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n   * call, or as part of the Solidity `fallback` or `receive` functions.\n   *\n   * If overriden should call `super._beforeFallback()`.\n   */\n  function _beforeFallback() internal virtual {}\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/openzeppelin/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n  // Booleans are more expensive than uint256 or any type that takes up a full\n  // word because each write operation emits an extra SLOAD to first read the\n  // slot's contents, replace the bits taken up by the boolean, and then write\n  // back. This is the compiler's defense against contract upgrades and\n  // pointer aliasing, and it cannot be disabled.\n\n  // The values being non-zero value makes deployment a bit more expensive,\n  // but in exchange the refund on every call to nonReentrant will be lower in\n  // amount. Since refunds are capped to a percentage of the total\n  // transaction's gas, it is best to keep them low in cases like this one, to\n  // increase the likelihood of the full refund coming into effect.\n  uint256 private constant _NOT_ENTERED = 1;\n  uint256 private constant _ENTERED = 2;\n\n  uint256 private _status;\n\n  constructor() {\n    _status = _NOT_ENTERED;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    // On the first call to nonReentrant, _notEntered will be true\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n    // Any calls to nonReentrant after this point will fail\n    _status = _ENTERED;\n\n    _;\n\n    // By storing the original value once again, a refund is triggered (see\n    // https://eips.ethereum.org/EIPS/eip-2200)\n    _status = _NOT_ENTERED;\n  }\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/openzeppelin/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.6/contracts/token/ERC20/utils/SafeERC20.sol\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint value\n  ) internal {\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint value\n  ) internal {\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n  }\n\n  /**\n   * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint value\n  ) internal {\n    // safeApprove should only be called when setting an initial allowance,\n    // or when resetting it to zero. To increase and decrease it, use\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n    require(\n      (value == 0) || (token.allowance(address(this), spender) == 0),\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\n    );\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n  }\n\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint value\n  ) internal {\n    uint newAllowance = token.allowance(address(this), spender) + value;\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n  }\n\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint value\n  ) internal {\n  unchecked {\n    uint oldAllowance = token.allowance(address(this), spender);\n    require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n    uint newAllowance = oldAllowance - value;\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n  }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n    if (returndata.length > 0) {\n      // Return data is optional\n      require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/openzeppelin/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n  bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n  uint8 private constant _ADDRESS_LENGTH = 20;\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n  function toString(uint256 value) internal pure returns (string memory) {\n  unchecked {\n    uint256 length = Math.log10(value) + 1;\n    string memory buffer = new string(length);\n    uint256 ptr;\n    /// @solidity memory-safe-assembly\n    assembly {\n      ptr := add(buffer, add(32, length))\n    }\n    while (true) {\n      ptr--;\n      /// @solidity memory-safe-assembly\n      assembly {\n        mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n      }\n      value /= 10;\n      if (value == 0) break;\n    }\n    return buffer;\n  }\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n  function toHexString(uint256 value) internal pure returns (string memory) {\n  unchecked {\n    return toHexString(value, Math.log256(value) + 1);\n  }\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n    bytes memory buffer = new bytes(2 * length + 2);\n    buffer[0] = \"0\";\n    buffer[1] = \"x\";\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\n      buffer[i] = _SYMBOLS[value & 0xf];\n      value >>= 4;\n    }\n    require(value == 0, \"Strings: hex length insufficient\");\n    return string(buffer);\n  }\n\n  /**\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n  function toHexString(address addr) internal pure returns (string memory) {\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n  }\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/proxy/ControllableV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/Initializable.sol\";\nimport \"../interfaces/ILiquidatorControllable.sol\";\nimport \"../interfaces/ILiquidatorController.sol\";\nimport \"../lib/SlotsLib.sol\";\n\n/// @title Implement basic functionality for any contract that require strict control\n/// @dev Can be used with upgradeable pattern.\n///      Require call __Controllable_init() in any case.\n/// @author belbix\nabstract contract ControllableV3 is Initializable, ILiquidatorControllable {\n  using SlotsLib for bytes32;\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant CONTROLLABLE_VERSION = \"3.0.0\";\n\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.controller\")) - 1);\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.created\")) - 1);\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.created_block\")) - 1);\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.revision\")) - 1);\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\"eip1967.controllable.prev_logic\")) - 1);\n\n  event ContractInitialized(address controller, uint ts, uint block);\n  event RevisionIncreased(uint value, address oldLogic);\n\n  /// @notice Initialize contract after setup it as proxy implementation\n  ///         Save block.timestamp in the \"created\" variable\n  /// @dev Use it only once after first logic setup\n  /// @param controller_ Controller address\n  function __Controllable_init(address controller_) public onlyInitializing {\n    require(controller_ != address(0), \"Zero controller\");\n    require(ILiquidatorController(controller_).governance() != address(0), \"Zero governance\");\n    _CONTROLLER_SLOT.set(controller_);\n    _CREATED_SLOT.set(block.timestamp);\n    _CREATED_BLOCK_SLOT.set(block.number);\n    emit ContractInitialized(controller_, block.timestamp, block.number);\n  }\n\n  /// @dev Return true if given address is controller\n  function isController(address _value) public override view returns (bool) {\n    return _value == controller();\n  }\n\n  /// @notice Return true if given address is setup as governance in Controller\n  function isGovernance(address _value) public override view returns (bool) {\n    return ILiquidatorController(controller()).governance() == _value;\n  }\n\n  /// @dev Contract upgrade counter\n  function revision() external view returns (uint){\n    return _REVISION_SLOT.getUint();\n  }\n\n  /// @dev Previous logic implementation\n  function previousImplementation() external view returns (address){\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\n  }\n\n  // ************* SETTERS/GETTERS *******************\n\n  /// @notice Return controller address saved in the contract slot\n  function controller() public view override returns (address) {\n    return _CONTROLLER_SLOT.getAddress();\n  }\n\n  /// @notice Return creation timestamp\n  /// @return Creation timestamp\n  function created() external view override returns (uint256) {\n    return _CREATED_SLOT.getUint();\n  }\n\n  /// @notice Return creation block number\n  /// @return Creation block number\n  function createdBlock() external override view returns (uint256) {\n    return _CREATED_BLOCK_SLOT.getUint();\n  }\n\n  /// @dev Revision should be increased on each contract upgrade\n  function increaseRevision(address oldLogic) external override {\n    require(msg.sender == address(this), \"Increase revision forbidden\");\n    uint r = _REVISION_SLOT.getUint() + 1;\n    _REVISION_SLOT.set(r);\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\n    emit RevisionIncreased(r, oldLogic);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/proxy/ProxyControlled.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/ILiquidatorControllable.sol\";\nimport \"../interfaces/IProxyControlled.sol\";\nimport \"./UpgradeableProxy.sol\";\n\n/// @title EIP1967 Upgradable proxy implementation.\n/// @dev Only Controller has access and should implement time-lock for upgrade action.\n/// @author belbix\ncontract ProxyControlled is UpgradeableProxy, IProxyControlled {\n\n  /// @notice Version of the contract\n  /// @dev Should be incremented when contract changed\n  string public constant PROXY_CONTROLLED_VERSION = \"1.0.0\";\n\n  /// @dev Initialize proxy implementation. Need to call after deploy new proxy.\n  function initProxy(address _logic) external override {\n    //make sure that given logic is controllable and not inited\n    require(ILiquidatorControllable(_logic).created() == 0, \"Proxy: Wrong implementation\");\n    _init(_logic);\n  }\n\n  /// @notice Upgrade contract logic\n  /// @dev Upgrade allowed only for Controller and should be done only after time-lock period\n  /// @param _newImplementation Implementation address\n  function upgrade(address _newImplementation) external override {\n    require(ILiquidatorControllable(address(this)).isController(msg.sender), \"Proxy: Forbidden\");\n    ILiquidatorControllable(address(this)).increaseRevision(_implementation());\n    _upgradeTo(_newImplementation);\n    // the new contract must have the same ABI and you must have the power to change it again\n    require(ILiquidatorControllable(address(this)).isController(msg.sender), \"Proxy: Wrong implementation\");\n  }\n\n  /// @notice Return current logic implementation\n  function implementation() external override view returns (address) {\n    return _implementation();\n  }\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/proxy/UpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/Proxy.sol\";\nimport \"../openzeppelin/Address.sol\";\n\n/// @title OpenZeppelin https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4/contracts/proxy/UpgradeableProxy.sol\n/// @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n///      implementation address that can be changed. This address is stored in storage in the location specified by\n///      https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n///      implementation behind the proxy.\n///      Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n///      {TransparentUpgradeableProxy}.\nabstract contract UpgradeableProxy is Proxy {\n\n  /// @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n  ///      If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n  ///      function call, and allows initializating the storage of the proxy like a Solidity constructor.\n  constructor() payable {\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n  }\n\n  /// @dev Emitted when the implementation is upgraded.\n  event Upgraded(address indexed implementation);\n\n  ///@dev Storage slot with the address of the current implementation.\n  ///     This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n  ///     validated in the constructor.\n  bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  /// @dev Post deploy initialisation for compatability with EIP-1167 factory\n  function _init(address _logic) internal {\n    require(_implementation() == address(0), \"Already inited\");\n    _setImplementation(_logic);\n  }\n\n  /// @dev Returns the current implementation address.\n  function _implementation() internal view virtual override returns (address impl) {\n    bytes32 slot = _IMPLEMENTATION_SLOT;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /// @dev Upgrades the proxy to a new implementation.\n  ///      Emits an {Upgraded} event.\n  function _upgradeTo(address newImplementation) internal virtual {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /// @dev Stores a new address in the EIP1967 implementation slot.\n  function _setImplementation(address newImplementation) private {\n    require(Address.isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n    bytes32 slot = _IMPLEMENTATION_SLOT;\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/swappers/Uni3Swapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../openzeppelin/SafeERC20.sol\";\nimport \"../openzeppelin/Math.sol\";\nimport \"../openzeppelin/Strings.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../interfaces/ISwapper.sol\";\nimport \"../dex/uniswap3/interfaces/IUniswapV3Pool.sol\";\nimport \"../proxy/ControllableV3.sol\";\nimport \"../dex/uniswap3/interfaces/callback/IUniswapV3SwapCallback.sol\";\n\n/// @title Swap tokens via UniswapV3 contracts.\n/// @author belbix\ncontract Uni3Swapper is ControllableV3, ISwapper, IUniswapV3SwapCallback {\n  using SafeERC20 for IERC20;\n\n  struct SwapCallbackData {\n    address tokenIn;\n    uint amount;\n  }\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant UNI_SWAPPER3_VERSION = \"1.0.3\";\n  uint public constant FEE_DENOMINATOR = 100_000;\n  uint public constant PRICE_IMPACT_DENOMINATOR = 100_000;\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739 + 1;\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\n  uint private constant TWO_96 = 2 ** 96;\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event Swap(\n    address pool,\n    address tokenIn,\n    address tokenOut,\n    address recipient,\n    uint priceImpactTolerance,\n    uint amountIn,\n    uint amountOut\n  );\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @dev Proxy initialization. Call it after contract deploy.\n  function init(address controller_) external initializer {\n    __Controllable_init(controller_);\n  }\n\n  // *************************************************************\n  //                        PRICE\n  // *************************************************************\n\n  function _countDigits(uint n) internal pure returns (uint){\n    if (n == 0) {\n      return 0;\n    }\n    uint count = 0;\n    while (n != 0) {\n      n = n / 10;\n      ++count;\n    }\n    return count;\n  }\n\n  /// @dev Return current price without amount impact.\n  function getPrice(\n    address pool,\n    address tokenIn,\n    address /*tokenOut*/,\n    uint amount\n  ) public view override returns (uint) {\n    address token0 = IUniswapV3Pool(pool).token0();\n    address token1 = IUniswapV3Pool(pool).token1();\n\n    uint256 tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\n    uint256 tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\n    (uint160 sqrtPriceX96,,,,,,) = IUniswapV3Pool(pool).slot0();\n\n    uint divider = tokenOutDecimals < 18 ? Math.max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\n\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\n    uint purePrice;\n    uint precision;\n    if (tokenIn == token0) {\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\n      purePrice = part * part;\n    } else {\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\n      purePrice = part * part;\n    }\n    uint price = purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\n\n    if (amount != 0) {\n      return price * amount / (10 ** tokenInDecimals);\n    } else {\n      return price;\n    }\n  }\n\n  // *************************************************************\n  //                        SWAP\n  // *************************************************************\n\n  /// @dev Swap given tokenIn for tokenOut. Assume that tokenIn already sent to this contract.\n  /// @param pool UniswapV3 pool\n  /// @param tokenIn Token for sell\n  /// @param tokenOut Token for buy\n  /// @param recipient Recipient for tokenOut\n  /// @param priceImpactTolerance Price impact tolerance. Must include fees at least. Denominator is 100_000.\n  function swap(\n    address pool,\n    address tokenIn,\n    address tokenOut,\n    address recipient,\n    uint priceImpactTolerance\n  ) external override {\n    address token0 = IUniswapV3Pool(pool).token0();\n\n    uint balanceBefore = IERC20(tokenOut).balanceOf(recipient);\n    uint amount = IERC20(tokenIn).balanceOf(address(this));\n\n    {\n      uint priceBefore = getPrice(pool, tokenIn, tokenOut, amount);\n\n      IUniswapV3Pool(pool).swap(\n        recipient,\n        tokenIn == token0,\n        int(amount),\n        tokenIn == token0 ? MIN_SQRT_RATIO : MAX_SQRT_RATIO,\n        abi.encode(SwapCallbackData(tokenIn, amount))\n      );\n\n      uint priceAfter = getPrice(pool, tokenIn, tokenOut, amount);\n      // unreal but better to check\n      require(priceAfter <= priceBefore, \"Price increased\");\n\n      uint priceImpact = (priceBefore - priceAfter) * PRICE_IMPACT_DENOMINATOR / priceBefore;\n      require(priceImpact < priceImpactTolerance, string(abi.encodePacked(\"!PRICE \", Strings.toString(priceImpact))));\n    }\n\n    uint balanceAfter = IERC20(tokenOut).balanceOf(recipient);\n    emit Swap(\n      pool,\n      tokenIn,\n      tokenOut,\n      recipient,\n      priceImpactTolerance,\n      amount,\n      balanceAfter > balanceBefore ? balanceAfter - balanceBefore : 0\n    );\n  }\n\n  // *************************************************************\n  //                     INTERNAL LOGIC\n  // *************************************************************\n\n  function uniswapV3SwapCallback(\n    int256 amount0Delta,\n    int256 amount1Delta,\n    bytes calldata _data\n  ) external override {\n    require(amount0Delta > 0 || amount1Delta > 0, \"Wrong callback amount\");\n    SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\n    IERC20(data.tokenIn).safeTransfer(msg.sender, data.amount);\n  }\n\n}\n"
    },
    "@tetu_io/tetu-liquidator/contracts/TetuLiquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./openzeppelin/ReentrancyGuard.sol\";\nimport \"./openzeppelin/SafeERC20.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IERC20Metadata.sol\";\nimport \"./interfaces/ISwapper.sol\";\nimport \"./interfaces/ITetuLiquidator.sol\";\nimport \"./proxy/ControllableV3.sol\";\n\n/// @title Contract for determinate trade routes on-chain and sell any token for any token.\n/// @author belbix\ncontract TetuLiquidator is ReentrancyGuard, ControllableV3, ITetuLiquidator {\n  using SafeERC20 for IERC20;\n\n  // *************************************************************\n  //                        CONSTANTS\n  // *************************************************************\n\n  /// @dev Version of this contract. Adjust manually on each code modification.\n  string public constant LIQUIDATOR_VERSION = \"1.0.2\";\n  uint public constant ROUTE_LENGTH_MAX = 5;\n\n\n  // *************************************************************\n  //                        VARIABLES\n  //                Keep names and ordering!\n  //                 Add only in the bottom.\n  // *************************************************************\n\n  /// @dev Liquidity Pools with the highest TVL for given token\n  mapping(address => PoolData) public largestPools;\n  /// @dev Liquidity Pools with the most popular tokens\n  mapping(address => mapping(address => PoolData)) public blueChipsPools;\n  /// @dev Hold blue chips tokens addresses\n  mapping(address => bool) public blueChipsTokens;\n\n  // *************************************************************\n  //                        EVENTS\n  // *************************************************************\n\n  event Liquidated(address indexed tokenIn, address indexed tokenOut, uint amount);\n  event PoolAdded(PoolData poolData);\n  event PoolRemoved(address token);\n  event BlueChipAdded(PoolData poolData);\n\n  // *************************************************************\n  //                        INIT\n  // *************************************************************\n\n  /// @dev Proxy initialization. Call it after contract deploy.\n  function init(address controller_) external initializer {\n    __Controllable_init(controller_);\n  }\n\n  function _onlyOperator() internal view {\n    require(ILiquidatorController(controller()).isOperator(msg.sender), \"DENIED\");\n  }\n\n  // *************************************************************\n  //                   OPERATOR ACTIONS\n  // *************************************************************\n\n  /// @dev Add pools with largest TVL\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external {\n    _onlyOperator();\n\n    for (uint i = 0; i < _pools.length; i++) {\n      PoolData memory pool = _pools[i];\n      require(largestPools[pool.tokenIn].pool == address(0) || rewrite, \"L: Exist\");\n      largestPools[pool.tokenIn] = pool;\n\n      emit PoolAdded(pool);\n    }\n  }\n\n  /// @dev Remove pool from data\n  function removeLargestPool(address token) external {\n    _onlyOperator();\n\n    delete largestPools[token];\n    emit PoolRemoved(token);\n  }\n\n  /// @dev Add largest pools with the most popular tokens on the current network\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external {\n    _onlyOperator();\n\n    for (uint i = 0; i < _pools.length; i++) {\n      PoolData memory pool = _pools[i];\n      require(blueChipsPools[pool.tokenIn][pool.tokenOut].pool == address(0) || rewrite, \"L: Exist\");\n      // not necessary to check the reversed\n\n      blueChipsPools[pool.tokenIn][pool.tokenOut] = pool;\n      blueChipsPools[pool.tokenOut][pool.tokenIn] = pool;\n      blueChipsTokens[pool.tokenIn] = true;\n      blueChipsTokens[pool.tokenOut] = true;\n\n      emit BlueChipAdded(pool);\n    }\n  }\n\n  function removeBlueChipPool(address tokenIn, address tokenOut) external {\n    _onlyOperator();\n\n    delete blueChipsPools[tokenIn][tokenOut];\n    delete blueChipsTokens[tokenIn];\n    // do not remove tokenOut, assume tha tokenIn is the main target for the removing\n  }\n\n  // *************************************************************\n  //                        VIEWS\n  // *************************************************************\n\n  /// @dev Return price of given tokenIn against tokenOut in decimals of tokenOut.\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view override returns (uint) {\n    (PoolData[] memory route,) = buildRoute(tokenIn, tokenOut);\n    if (route.length == 0) {\n      return 0;\n    }\n    uint price;\n    if (amount == 0) {\n      price = 10 ** IERC20Metadata(tokenIn).decimals();\n    } else {\n      price = amount;\n    }\n    for (uint i; i < route.length; i++) {\n      PoolData memory data = route[i];\n      price = ISwapper(data.swapper).getPrice(data.pool, data.tokenIn, data.tokenOut, price);\n    }\n    return price;\n  }\n\n  /// @dev Return price the first poolData.tokenIn against the last poolData.tokenOut in decimals of tokenOut.\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view override returns (uint) {\n    uint price;\n    if (amount == 0) {\n      price = 10 ** IERC20Metadata(route[0].tokenIn).decimals();\n    } else {\n      price = amount;\n    }\n    for (uint i; i < route.length; i++) {\n      PoolData memory data = route[i];\n      price = ISwapper(data.swapper).getPrice(data.pool, data.tokenIn, data.tokenOut, price);\n    }\n    return price;\n  }\n\n  /// @dev Check possibility liquidate tokenIn for tokenOut.\n  function isRouteExist(address tokenIn, address tokenOut) external view override returns (bool) {\n    (PoolData[] memory route,) = buildRoute(tokenIn, tokenOut);\n    return route.length != 0;\n  }\n\n  // *************************************************************\n  //                        LIQUIDATE\n  // *************************************************************\n\n  /// @dev Sell tokenIn for tokenOut. Assume approve on this contract exist.\n  function liquidate(\n    address tokenIn,\n    address tokenOut,\n    uint amount,\n    uint priceImpactTolerance\n  ) external override {\n\n    (PoolData[] memory route, string memory errorMessage) = buildRoute(tokenIn, tokenOut);\n    if (route.length == 0) {\n      revert(errorMessage);\n    }\n\n    _liquidate(route, amount, priceImpactTolerance);\n  }\n\n  function liquidateWithRoute(\n    PoolData[] memory route,\n    uint amount,\n    uint priceImpactTolerance\n  ) external override {\n    _liquidate(route, amount, priceImpactTolerance);\n  }\n\n  function _liquidate(\n    PoolData[] memory route,\n    uint amount,\n    uint priceImpactTolerance\n  ) internal {\n    require(route.length > 0, \"ZERO_LENGTH\");\n\n    for (uint i; i < route.length; i++) {\n      PoolData memory data = route[i];\n\n      // if it is the first step send tokens to the swapper from the current contract\n      if (i == 0) {\n        IERC20(data.tokenIn).safeTransferFrom(msg.sender, data.swapper, amount);\n      }\n      address recipient;\n      // if it is not the last step of the route send to the next swapper\n      if (i != route.length - 1) {\n        recipient = route[i + 1].swapper;\n      } else {\n        // if it is the last step need to send to the sender\n        recipient = msg.sender;\n      }\n\n      ISwapper(data.swapper).swap(data.pool, data.tokenIn, data.tokenOut, recipient, priceImpactTolerance);\n    }\n\n    emit Liquidated(route[0].tokenIn, route[route.length - 1].tokenOut, amount);\n  }\n\n  // *************************************************************\n  //                        ROUTE\n  // *************************************************************\n\n  /// @dev Build route for liquidation. No reverts inside.\n  /// @return route Array of pools for liquidate tokenIn to tokenOut. Zero length indicate an error.\n  /// @return errorMessage Possible reason why the route was not found. Empty for success routes.\n  function buildRoute(\n    address tokenIn,\n    address tokenOut\n  ) public view override returns (\n    PoolData[] memory route,\n    string memory errorMessage\n  )  {\n    route = new PoolData[](ROUTE_LENGTH_MAX);\n\n    // --- BLUE CHIPS for in/out\n\n    // in case that we try to liquidate blue chips use bc lps directly\n    PoolData memory poolDataBC = blueChipsPools[tokenIn][tokenOut];\n    if (poolDataBC.pool != address(0)) {\n      poolDataBC.tokenIn = tokenIn;\n      poolDataBC.tokenOut = tokenOut;\n      route[0] = poolDataBC;\n      return (_cutRoute(route, 1), \"\");\n    }\n\n    // --- POOL for in\n\n    // find the best Pool for token IN\n    PoolData memory poolDataIn = largestPools[tokenIn];\n    if (poolDataIn.pool == address(0)) {\n      return (_cutRoute(route, 0), \"L: Not found pool for tokenIn\");\n    }\n\n    route[0] = poolDataIn;\n    // if the best Pool for token IN a pair with token OUT token we complete the route\n    if (poolDataIn.tokenOut == tokenOut) {\n      return (_cutRoute(route, 1), \"\");\n    }\n\n    // --- BC for POOL_in\n\n    // if we able to swap opposite token to a blue chip it is the cheaper way to liquidate\n    poolDataBC = blueChipsPools[poolDataIn.tokenOut][tokenOut];\n    if (poolDataBC.pool != address(0)) {\n      poolDataBC.tokenIn = poolDataIn.tokenOut;\n      poolDataBC.tokenOut = tokenOut;\n      route[1] = poolDataBC;\n      return (_cutRoute(route, 2), \"\");\n    }\n\n    // --- POOL for out\n\n    // find the largest pool for token out\n    PoolData memory poolDataOut = largestPools[tokenOut];\n\n    if (poolDataOut.pool == address(0)) {\n      return (_cutRoute(route, 0), \"L: Not found pool for tokenOut\");\n    }\n\n    // need to swap directions for tokenOut pool\n    (poolDataOut.tokenIn, poolDataOut.tokenOut) = (poolDataOut.tokenOut, poolDataOut.tokenIn);\n\n    // if the largest pool for tokenOut contains tokenIn it is the best way\n    if (tokenIn == poolDataOut.tokenIn) {\n      route[0] = poolDataOut;\n      return (_cutRoute(route, 1), \"\");\n    }\n\n    // if we can swap between largest pools the route is ended\n    if (poolDataIn.tokenOut == poolDataOut.tokenIn) {\n      route[1] = poolDataOut;\n      return (_cutRoute(route, 2), \"\");\n    }\n\n    // --- BC for POOL_out\n\n    // if we able to swap opposite token to a blue chip it is the cheaper way to liquidate\n    poolDataBC = blueChipsPools[poolDataIn.tokenOut][poolDataOut.tokenIn];\n    if (poolDataBC.pool != address(0)) {\n      poolDataBC.tokenIn = poolDataIn.tokenOut;\n      poolDataBC.tokenOut = poolDataOut.tokenIn;\n      route[1] = poolDataBC;\n      route[2] = poolDataOut;\n      return (_cutRoute(route, 3), \"\");\n    }\n\n    // ------------------------------------------------------------------------\n    //                      RECURSIVE PART\n    // We don't have 1-2 pair routes. Need to find pairs for pairs.\n    // This part could be build as recursion but for reduce complexity and safe gas was not.\n    // ------------------------------------------------------------------------\n\n    // --- POOL2 for in\n\n    PoolData memory poolDataIn2 = largestPools[poolDataIn.tokenOut];\n    if (poolDataIn2.pool == address(0)) {\n      return (_cutRoute(route, 0), \"L: Not found pool for tokenIn2\");\n    }\n\n    route[1] = poolDataIn2;\n    if (poolDataIn2.tokenOut == tokenOut) {\n      return (_cutRoute(route, 2), \"\");\n    }\n\n    if (poolDataIn2.tokenOut == poolDataOut.tokenIn) {\n      route[2] = poolDataOut;\n      return (_cutRoute(route, 3), \"\");\n    }\n\n    // --- BC for POOL2_in\n\n    poolDataBC = blueChipsPools[poolDataIn2.tokenOut][tokenOut];\n    if (poolDataBC.pool != address(0)) {\n      poolDataBC.tokenIn = poolDataIn2.tokenOut;\n      poolDataBC.tokenOut = tokenOut;\n      route[2] = poolDataBC;\n      return (_cutRoute(route, 3), \"\");\n    }\n\n    // --- POOL2 for out\n\n    // find the largest pool for token out\n    PoolData memory poolDataOut2 = largestPools[poolDataOut.tokenIn];\n    if (poolDataOut2.pool == address(0)) {\n      return (_cutRoute(route, 0), \"L: Not found pool for tokenOut2\");\n    }\n\n    // need to swap directions for tokenOut2 pool\n    (poolDataOut2.tokenIn, poolDataOut2.tokenOut) = (poolDataOut2.tokenOut, poolDataOut2.tokenIn);\n\n    // if we can swap between largest pools the route is ended\n    if (poolDataIn.tokenOut == poolDataOut2.tokenIn) {\n      route[1] = poolDataOut2;\n      route[2] = poolDataOut;\n      return (_cutRoute(route, 3), \"\");\n    }\n\n    if (poolDataIn2.tokenOut == poolDataOut2.tokenIn) {\n      route[2] = poolDataOut2;\n      route[3] = poolDataOut;\n      return (_cutRoute(route, 4), \"\");\n    }\n\n    // --- BC for POOL2_out\n\n    // token OUT pool can be paired with BC pool with token IN\n    poolDataBC = blueChipsPools[tokenIn][poolDataOut2.tokenIn];\n    if (poolDataBC.pool != address(0)) {\n      poolDataBC.tokenIn = tokenIn;\n      poolDataBC.tokenOut = poolDataOut2.tokenIn;\n      route[0] = poolDataBC;\n      route[1] = poolDataOut2;\n      route[2] = poolDataOut;\n      return (_cutRoute(route, 3), \"\");\n    }\n\n    poolDataBC = blueChipsPools[poolDataIn.tokenOut][poolDataOut2.tokenIn];\n    if (poolDataBC.pool != address(0)) {\n      poolDataBC.tokenIn = poolDataIn.tokenOut;\n      poolDataBC.tokenOut = poolDataOut2.tokenIn;\n      route[1] = poolDataBC;\n      route[2] = poolDataOut2;\n      route[3] = poolDataOut;\n      return (_cutRoute(route, 4), \"\");\n    }\n\n    poolDataBC = blueChipsPools[poolDataIn2.tokenOut][poolDataOut2.tokenIn];\n    if (poolDataBC.pool != address(0)) {\n      poolDataBC.tokenIn = poolDataIn2.tokenOut;\n      poolDataBC.tokenOut = poolDataOut2.tokenIn;\n      route[2] = poolDataBC;\n      route[3] = poolDataOut2;\n      route[4] = poolDataOut;\n      return (_cutRoute(route, 5), \"\");\n    }\n\n    // We are not handling other cases such as:\n    // - If a token has liquidity with specific token\n    //   and this token also has liquidity only with specific token.\n    //   This case never exist but could be implemented if requires.\n    return (_cutRoute(route, 0), \"L: Liquidation path not found\");\n  }\n\n  function _cutRoute(PoolData[] memory route, uint length) internal pure returns (PoolData[] memory) {\n    PoolData[] memory result = new PoolData[](length);\n    for (uint i; i < length; ++i) {\n      result[i] = route[i];\n    }\n    return result;\n  }\n\n}\n"
    },
    "contracts/integrations/aave/Aave3DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface Aave3DataTypes {\r\n  struct EModeCategory {\r\n    uint16 ltv;\r\n    uint16 liquidationThreshold;\r\n    uint16 liquidationBonus;\r\n    address priceSource;\r\n    string label;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    uint256 data;\r\n  }\r\n\r\n  struct ReserveData {\r\n    ReserveConfigurationMap configuration;\r\n    uint128 liquidityIndex;\r\n    uint128 currentLiquidityRate;\r\n    uint128 variableBorrowIndex;\r\n    uint128 currentVariableBorrowRate;\r\n    uint128 currentStableBorrowRate;\r\n    uint40 lastUpdateTimestamp;\r\n    uint16 id;\r\n    address aTokenAddress;\r\n    address stableDebtTokenAddress;\r\n    address variableDebtTokenAddress;\r\n    address interestRateStrategyAddress;\r\n    uint128 accruedToTreasury;\r\n    uint128 unbacked;\r\n    uint128 isolationModeTotalDebt;\r\n  }\r\n\r\n  struct CalculateInterestRatesParams {\r\n    uint256 unbacked;\r\n    /// @notice The amount of liquidity added to the protocol (supply or repay) in the previous action\r\n    uint256 liquidityAdded;\r\n    /// @notice The amount of liquidity taken from the protocol (redeem or borrow)\r\n    uint256 liquidityTaken;\r\n    uint256 totalStableDebt;\r\n    uint256 totalVariableDebt;\r\n    uint256 averageStableBorrowRate;\r\n    uint256 reserveFactor;\r\n    address reserve;\r\n    address aToken;\r\n  }\r\n}\r\n"
    },
    "contracts/integrations/aave/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice A source of asset price for AAVE3 price oracle\r\n/// @dev Restored from https://polygonscan.com/address/0xb023e699F5a33916Ea823A16485e259257cA8Bd1#code\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n\r\n  function latestTimestamp() external view returns (uint256);\r\n\r\n  function latestRound() external view returns (uint256);\r\n\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\r\n\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}"
    },
    "contracts/integrations/aave/IAave3PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Restored from 0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654 (events were removed)\r\ninterface IAave3PriceOracle {\r\n  /**\r\n   * @notice Returns the PoolAddressesProvider\r\n   * @return The address of the PoolAddressesProvider contract\r\n   */\r\n  function ADDRESSES_PROVIDER() external view returns (address);\r\n  /**\r\n   * @notice Returns the base currency address\r\n   * @dev Address 0x0 is reserved for USD as base currency.\r\n   * @return Returns the base currency address.\r\n   **/\r\n  function BASE_CURRENCY() external view returns (address);\r\n  /**\r\n   * @notice Returns the base currency unit\r\n   * @dev 1 ether for ETH, 1e8 for USD.\r\n   * @return Returns the base currency unit.\r\n   **/\r\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\r\n  /**\r\n   * @notice Returns the asset price in the base currency\r\n   * @param asset The address of the asset\r\n   * @return The price of the asset\r\n   **/\r\n  function getAssetPrice(address asset) external view returns (uint256);\r\n  /**\r\n   * @notice Returns a list of prices from a list of assets addresses\r\n   * @param assets The list of assets addresses\r\n   * @return The prices of the given assets\r\n   */\r\n  function getAssetsPrices(address[] memory assets) external view returns (uint256[] memory);\r\n  /**\r\n   * @notice Returns the address of the fallback oracle\r\n   * @return The address of the fallback oracle\r\n   */\r\n  function getFallbackOracle() external view returns (address);\r\n  /**\r\n   * @notice Returns the address of the source for an asset address\r\n   * @param asset The address of the asset\r\n   * @return The address of the source\r\n   */\r\n  function getSourceOfAsset(address asset) external view returns (address);\r\n\r\n  function setAssetSources(address[] memory assets, address[] memory sources) external;\r\n\r\n  function setFallbackOracle(address fallbackOracle) external;\r\n}\r\n"
    },
    "contracts/integrations/aave/IAaveAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice restored from 0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb (no events)\r\ninterface IAaveAddressesProvider {\r\n  /**\r\n   * @notice Returns the address of the ACL admin.\r\n   * @return The address of the ACL admin\r\n   */\r\n  function getACLAdmin() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the ACL manager.\r\n   * @return The address of the ACLManager\r\n   */\r\n  function getACLManager() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns an address by its identifier.\r\n   * @dev The returned address might be an EOA or a contract, potentially proxied\r\n   * @dev It returns ZERO if there is no registered address with the given id\r\n   * @param id The id\r\n   * @return The address of the registered for the specified id\r\n   */\r\n  function getAddress(bytes32 id) external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the id of the Aave market to which this contract points to.\r\n   * @return The market id\r\n   **/\r\n  function getMarketId() external view returns (string memory);\r\n\r\n  /**\r\n   * @notice Returns the address of the Pool proxy.\r\n   * @return The Pool proxy address\r\n   **/\r\n  function getPool() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the PoolConfigurator proxy.\r\n   * @return The PoolConfigurator proxy address\r\n   **/\r\n  function getPoolConfigurator() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the data provider.\r\n   * @return The address of the DataProvider\r\n   */\r\n  function getPoolDataProvider() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the price oracle.\r\n   * @return The address of the PriceOracle\r\n   */\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the price oracle sentinel.\r\n   * @return The address of the PriceOracleSentinel\r\n   */\r\n  function getPriceOracleSentinel() external view returns (address);\r\n\r\n  function owner() external view returns (address);\r\n\r\n  function renounceOwnership() external;\r\n\r\n  function setACLAdmin(address newAclAdmin) external;\r\n\r\n  function setACLManager(address newAclManager) external;\r\n\r\n  function setAddress(bytes32 id, address newAddress) external;\r\n\r\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress)\r\n  external;\r\n\r\n  function setMarketId(string memory newMarketId) external;\r\n\r\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\r\n\r\n  function setPoolDataProvider(address newDataProvider) external;\r\n\r\n  function setPoolImpl(address newPoolImpl) external;\r\n\r\n  function setPriceOracle(address newPriceOracle) external;\r\n\r\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\r\n\r\n  function transferOwnership(address newOwner) external;\r\n}\r\n"
    },
    "contracts/integrations/aave/IAaveFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IFlashLoanReceiver\r\n * @author Aave\r\n * @notice Defines the basic interface of a flashloan-receiver contract.\r\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n **/\r\ninterface IAaveFlashLoanReceiver {\r\n  /**\r\n   * @notice Executes an operation after receiving the flash-borrowed asset\r\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\r\n   *      enough funds to repay and has approved the Pool to pull the total amount\r\n   * @param asset The address of the flash-borrowed asset\r\n   * @param amount The amount of the flash-borrowed asset\r\n   * @param premium The fee of the flash-borrowed asset\r\n   * @param initiator The address of the flashloan initiator\r\n   * @param params The byte-encoded params passed when initiating the flashloan\r\n   * @return True if the execution of the operation succeeds, false otherwise\r\n   */\r\n  function executeOperation(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 premium,\r\n    address initiator,\r\n    bytes calldata params\r\n  ) external returns (bool);\r\n}\r\n"
    },
    "contracts/integrations/aave/IAavePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./Aave3DataTypes.sol\";\r\npragma experimental ABIEncoderV2;\r\n\r\n/// @notice Restored from 0x794a61358D6845594F94dc1DB02A252b5b4814aD (no events)\r\ninterface IAavePool {\r\n\r\n  /**\r\n   * @notice Returns the PoolAddressesProvider connected to this contract\r\n   * @return The address of the PoolAddressesProvider\r\n   **/\r\n  function ADDRESSES_PROVIDER() external view returns (address);\r\n\r\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\r\n\r\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\r\n\r\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\r\n\r\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\r\n\r\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function POOL_REVISION() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\r\n   * @param asset The address of the underlying asset to back\r\n   * @param amount The amount to back\r\n   * @param fee The amount paid in fees\r\n   **/\r\n  function backUnbacked(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 fee\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\r\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n   * @param asset The address of the underlying asset to borrow\r\n   * @param amount The amount to be borrowed\r\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\r\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n   * if he has been given credit delegation allowance\r\n   **/\r\n  function borrow(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    uint16 referralCode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Configures a new category for the eMode.\r\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\r\n   * The category 0 is reserved as it's the default for volatile assets\r\n   * @param id The id of the category\r\n   * @param category The configuration of the category\r\n   */\r\n  function configureEModeCategory(\r\n    uint8 id,\r\n    Aave3DataTypes.EModeCategory memory category\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n   * @param asset The address of the underlying asset to deposit\r\n   * @param amount The amount to be deposited\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function deposit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Drop a reserve\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   **/\r\n  function dropReserve(address asset) external;\r\n\r\n  /**\r\n   * @notice Validates and finalizes an aToken transfer\r\n   * @dev Only callable by the overlying aToken of the `asset`\r\n   * @param asset The address of the underlying asset of the aToken\r\n   * @param from The user from which the aTokens are transferred\r\n   * @param to The user receiving the aTokens\r\n   * @param amount The amount being transferred/withdrawn\r\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\r\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\r\n   */\r\n  function finalizeTransfer(\r\n    address asset,\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 balanceFromBefore,\r\n    uint256 balanceToBefore\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\r\n   * into consideration. For further details please visit https://developers.aave.com\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\r\n   * @param assets The addresses of the assets being flash-borrowed\r\n   * @param amounts The amounts of the assets being flash-borrowed\r\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\r\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function flashLoan(\r\n    address receiverAddress,\r\n    address[] memory assets,\r\n    uint256[] memory amounts,\r\n    uint256[] memory interestRateModes,\r\n    address onBehalfOf,\r\n    bytes memory params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\r\n   * into consideration. For further details please visit https://developers.aave.com\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\r\n   * @param asset The address of the asset being flash-borrowed\r\n   * @param amount The amount of the asset being flash-borrowed\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function flashLoanSimple(\r\n    address receiverAddress,\r\n    address asset,\r\n    uint256 amount,\r\n    bytes memory params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Returns the configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The configuration of the reserve\r\n   **/\r\n  function getConfiguration(address asset)\r\n  external\r\n  view\r\n  returns (Aave3DataTypes.ReserveConfigurationMap memory);\r\n\r\n  /**\r\n   * @notice Returns the data of an eMode category\r\n   * @param id The id of the category\r\n   * @return The configuration data of the category\r\n   */\r\n  function getEModeCategoryData(uint8 id)\r\n  external\r\n  view\r\n  returns (Aave3DataTypes.EModeCategory memory);\r\n\r\n  /**\r\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the Aave3DataTypes.ReserveData struct\r\n   * @param id The id of the reserve as stored in the Aave3DataTypes.ReserveData struct\r\n   * @return The address of the reserve associated with id\r\n   **/\r\n  function getReserveAddressById(uint16 id) external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the state and configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The state and configuration data of the reserve\r\n   **/\r\n  function getReserveData(address asset)\r\n  external\r\n  view\r\n  returns (Aave3DataTypes.ReserveData memory);\r\n\r\n  /**\r\n   * @notice Returns the normalized income normalized income of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome(address asset)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the normalized variable debt per unit of asset\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt(address asset)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the list of the underlying assets of all the initialized reserves\r\n   * @dev It does not include dropped reserves\r\n   * @return The addresses of the underlying assets of the initialized reserves\r\n   **/\r\n  function getReservesList() external view returns (address[] memory);\r\n\r\n  /**\r\n   * @notice Returns the user account data across all the reserves\r\n   * @param user The address of the user\r\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\r\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\r\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\r\n   * @return currentLiquidationThreshold The liquidation threshold of the user\r\n   * @return ltv The loan to value of The user\r\n   * @return healthFactor The current health factor of the user\r\n   **/\r\n  function getUserAccountData(address user)\r\n  external\r\n  view\r\n  returns (\r\n    uint256 totalCollateralBase,\r\n    uint256 totalDebtBase,\r\n    uint256 availableBorrowsBase,\r\n    uint256 currentLiquidationThreshold,\r\n    uint256 ltv,\r\n    uint256 healthFactor\r\n  );\r\n\r\n  /**\r\n   * @notice Returns the configuration of the user across all the reserves\r\n   * @param user The user address\r\n   * @return The configuration of the user\r\n   **/\r\n  function getUserConfiguration(address user)\r\n  external\r\n  view\r\n  returns (Aave3DataTypes.ReserveConfigurationMap memory);\r\n\r\n  function getUserEMode(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\r\n   * interest rate strategy\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\r\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\r\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\r\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\r\n   **/\r\n  function initReserve(\r\n    address asset,\r\n    address aTokenAddress,\r\n    address stableDebtAddress,\r\n    address variableDebtAddress,\r\n    address interestRateStrategyAddress\r\n  ) external;\r\n\r\n  function initialize(address provider) external;\r\n\r\n  /**\r\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  function liquidationCall(\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    address user,\r\n    uint256 debtToCover,\r\n    bool receiveAToken\r\n  ) external;\r\n\r\n  function mintToTreasury(address[] memory assets) external;\r\n\r\n  /**\r\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\r\n   * @param asset The address of the underlying asset to mint\r\n   * @param amount The amount to mint\r\n   * @param onBehalfOf The address that will receive the aTokens\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function mintUnbacked(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n   * - Users can be rebalanced if the following conditions are satisfied:\r\n   *     1. Usage ratio is above 95%\r\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\r\n   *        borrowed at a stable rate and depositors are not earning enough\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param user The address of the user to be rebalanced\r\n   **/\r\n  function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @return The final amount repaid\r\n   **/\r\n  function repay(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    address onBehalfOf\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\r\n   * equivalent debt tokens\r\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\r\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\r\n   * balance is not enough to cover the whole debt\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @return The final amount repaid\r\n   **/\r\n  function repayWithATokens(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\r\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @param deadline The deadline timestamp that the permit is valid\r\n   * @param permitV The V parameter of ERC712 permit sig\r\n   * @param permitR The R parameter of ERC712 permit sig\r\n   * @param permitS The S parameter of ERC712 permit sig\r\n   * @return The final amount repaid\r\n   **/\r\n  function repayWithPermit(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    address onBehalfOf,\r\n    uint256 deadline,\r\n    uint8 permitV,\r\n    bytes32 permitR,\r\n    bytes32 permitS\r\n  ) external returns (uint256);\r\n\r\n  function rescueTokens(\r\n    address token,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n\r\n  function resetIsolationModeTotalDebt(address asset) external;\r\n\r\n  /**\r\n   * @notice Sets the configuration bitmap of the reserve as a whole\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param configuration The new configuration bitmap\r\n   **/\r\n  function setConfiguration(\r\n    address asset,\r\n    Aave3DataTypes.ReserveConfigurationMap memory configuration\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Updates the address of the interest rate strategy contract\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param rateStrategyAddress The address of the interest rate strategy contract\r\n   **/\r\n  function setReserveInterestRateStrategyAddress(\r\n    address asset,\r\n    address rateStrategyAddress\r\n  ) external;\r\n\r\n  function setUserEMode(uint8 categoryId) external;\r\n\r\n  /**\r\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\r\n   * @param asset The address of the underlying asset deposited\r\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\r\n   **/\r\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n  /**\r\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\r\n   * @param asset The address of the underlying asset to supply\r\n   * @param amount The amount to be supplied\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function supply(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\r\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\r\n   * @param asset The address of the underlying asset to supply\r\n   * @param amount The amount to be supplied\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param deadline The deadline timestamp that the permit is valid\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param permitV The V parameter of ERC712 permit sig\r\n   * @param permitR The R parameter of ERC712 permit sig\r\n   * @param permitS The S parameter of ERC712 permit sig\r\n   **/\r\n  function supplyWithPermit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode,\r\n    uint256 deadline,\r\n    uint8 permitV,\r\n    bytes32 permitR,\r\n    bytes32 permitS\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\r\n   **/\r\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\r\n\r\n  /**\r\n   * @notice Updates the protocol fee on the bridging\r\n   * @param protocolFee The part of the premium sent to the protocol treasury\r\n   */\r\n  function updateBridgeProtocolFee(uint256 protocolFee) external;\r\n\r\n  /**\r\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\r\n   * - A part is sent to aToken holders as extra, one time accumulated interest\r\n   * - A part is collected by the protocol treasury\r\n   * @dev The total premium is calculated on the total borrowed amount\r\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\r\n   * @dev Only callable by the PoolConfigurator contract\r\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\r\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\r\n   */\r\n  function updateFlashloanPremiums(\r\n    uint128 flashLoanPremiumTotal,\r\n    uint128 flashLoanPremiumToProtocol\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n   * @param asset The address of the underlying asset to withdraw\r\n   * @param amount The underlying amount to be withdrawn\r\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n   * @param to Address that will receive the underlying, same as msg.sender if the user\r\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n   *   different wallet\r\n   * @return The final amount withdrawn\r\n   **/\r\n  function withdraw(\r\n    address asset,\r\n    uint256 amount,\r\n    address to\r\n  ) external returns (uint256);\r\n}\r\n\r\n"
    },
    "contracts/integrations/algebra/AlgebraFeeConfiguration.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n// coefficients for sigmoids: α / (1 + e^( (β-x) / γ))\r\n// alpha1 + alpha2 + baseFee must be <= type(uint16).max\r\nstruct AlgebraFeeConfiguration {\r\n  uint16 alpha1; // max value of the first sigmoid\r\n  uint16 alpha2; // max value of the second sigmoid\r\n  uint32 beta1; // shift along the x-axis for the first sigmoid\r\n  uint32 beta2; // shift along the x-axis for the second sigmoid\r\n  uint16 gamma1; // horizontal stretch factor for the first sigmoid\r\n  uint16 gamma2; // horizontal stretch factor for the second sigmoid\r\n  uint16 baseFee; // minimum possible fee\r\n}\r\n"
    },
    "contracts/integrations/algebra/IAlgebraEternalFarming.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IncentiveKey.sol\";\r\n\r\ninterface IAlgebraEternalFarming {\r\n    /// @notice reward amounts can be outdated, actual amounts could be obtained via static call of `collectRewards` in FarmingCenter\r\n    function getRewardInfo(\r\n        IncentiveKey memory key,\r\n        uint256 tokenId\r\n    ) external view returns (uint256 reward, uint256 bonusReward);\r\n}"
    },
    "contracts/integrations/algebra/IAlgebraPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\nimport './pool/IAlgebraPoolImmutables.sol';\r\nimport './pool/IAlgebraPoolState.sol';\r\nimport './pool/IAlgebraPoolDerivedState.sol';\r\nimport './pool/IAlgebraPoolActions.sol';\r\nimport './pool/IAlgebraPoolPermissionedActions.sol';\r\nimport './pool/IAlgebraPoolEvents.sol';\r\n\r\n/**\r\n * @title The interface for a Algebra Pool\r\n * @dev The pool interface is broken up into many smaller pieces.\r\n * Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\n */\r\ninterface IAlgebraPool is\r\nIAlgebraPoolImmutables,\r\nIAlgebraPoolState,\r\nIAlgebraPoolDerivedState,\r\nIAlgebraPoolActions,\r\nIAlgebraPoolPermissionedActions,\r\nIAlgebraPoolEvents\r\n{\r\n  // used only for combining interfaces\r\n}\r\n"
    },
    "contracts/integrations/algebra/IAlgebraQuoter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Restored from 0xa15F0D7377B2A0C0c10db057f641beD21028FC89\r\ninterface IAlgebraQuoter {\r\n    function WNativeToken() external view returns (address);\r\n\r\n    function algebraSwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes memory path\r\n    ) external view;\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function poolDeployer() external view returns (address);\r\n\r\n    function quoteExactInput(bytes memory path, uint256 amountIn)\r\n    external\r\n    returns (uint256 amountOut, uint16[] memory fees);\r\n\r\n    function quoteExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint160 limitSqrtPrice\r\n    ) external returns (uint256 amountOut, uint16 fee);\r\n\r\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\r\n    external\r\n    returns (uint256 amountIn, uint16[] memory fees);\r\n\r\n    function quoteExactOutputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        uint160 limitSqrtPrice\r\n    ) external returns (uint256 amountIn, uint16 fee);\r\n}\r\n\r\n"
    },
    "contracts/integrations/algebra/IDataStorageOperator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\npragma abicoder v2;\r\n\r\nimport './AlgebraFeeConfiguration.sol';\r\n\r\n/// @title The interface for the DataStorageOperator\r\n/// @dev This contract stores timepoints and calculates adaptive fee and statistical averages\r\ninterface IDataStorageOperator {\r\n  /// @notice Emitted when the fee configuration is changed\r\n  /// @param feeConfig The structure with dynamic fee parameters\r\n  /// @dev See the AdaptiveFee library for more details\r\n  event FeeConfiguration(AlgebraFeeConfiguration feeConfig);\r\n\r\n  /// @notice Returns data belonging to a certain timepoint\r\n  /// @param index The index of timepoint in the array\r\n  /// @dev There is more convenient function to fetch a timepoint: getTimepoints(). Which requires not an index but seconds\r\n  /// @return initialized Whether the timepoint has been initialized and the values are safe to use\r\n  /// @return blockTimestamp The timestamp of the timepoint\r\n  /// @return tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp\r\n  /// @return volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp\r\n  /// @return tick The tick at blockTimestamp\r\n  /// @return averageTick Time-weighted average tick\r\n  /// @return windowStartIndex Index of closest timepoint >= WINDOW seconds ago\r\n  function timepoints(\r\n    uint256 index\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      bool initialized,\r\n      uint32 blockTimestamp,\r\n      int56 tickCumulative,\r\n      uint88 volatilityCumulative,\r\n      int24 tick,\r\n      int24 averageTick,\r\n      uint16 windowStartIndex\r\n    );\r\n\r\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\r\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\r\n  /// @param tick Initial tick\r\n  function initialize(uint32 time, int24 tick) external;\r\n\r\n  /// @dev Reverts if a timepoint at or before the desired timepoint timestamp does not exist.\r\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\r\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\r\n  /// at exactly the timestamp between the two timepoints.\r\n  /// @param time The current block timestamp\r\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return a timepoint\r\n  /// @param tick The current tick\r\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\r\n  /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\r\n  /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\r\n  function getSingleTimepoint(\r\n    uint32 time,\r\n    uint32 secondsAgo,\r\n    int24 tick,\r\n    uint16 index\r\n  ) external view returns (int56 tickCumulative, uint112 volatilityCumulative);\r\n\r\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\r\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\r\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return a timepoint\r\n  /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\r\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\r\n  function getTimepoints(uint32[] memory secondsAgos) external view returns (int56[] memory tickCumulatives, uint112[] memory volatilityCumulatives);\r\n\r\n  /// @notice Writes a dataStorage timepoint to the array\r\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\r\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\r\n  /// @param blockTimestamp The timestamp of the new timepoint\r\n  /// @param tick The active tick at the time of the new timepoint\r\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\r\n  /// @return newFee The fee in hundredths of a bip, i.e. 1e-6\r\n  function write(uint16 index, uint32 blockTimestamp, int24 tick) external returns (uint16 indexUpdated, uint16 newFee);\r\n\r\n  /// @notice Changes fee configuration for the pool\r\n  function changeFeeConfiguration(AlgebraFeeConfiguration calldata feeConfig) external;\r\n\r\n  /// @notice Fills uninitialized timepoints with nonzero value\r\n  /// @dev Can be used to reduce the gas cost of future swaps\r\n  /// @param startIndex The start index, must be not initialized\r\n  /// @param amount of slots to fill, startIndex + amount must be <= type(uint16).max\r\n  function prepayTimepointsStorageSlots(uint16 startIndex, uint16 amount) external;\r\n}\r\n"
    },
    "contracts/integrations/algebra/IFarmingCenter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IAlgebraEternalFarming.sol\";\r\nimport \"./IncentiveKey.sol\";\r\nimport \"./INonfungiblePositionManager.sol\";\r\n\r\ninterface IFarmingCenter {\r\n    /// @notice Returns information about a deposited NFT\r\n    /// @param tokenId The ID of the deposit (and token) that is being transferred\r\n    /// @return L2TokenId The nft layer2 id,\r\n    /// numberOfFarms The number of farms,\r\n    /// inLimitFarming The parameter showing if the token is in the limit farm,\r\n    /// owner The owner of deposit\r\n    function deposits(uint256 tokenId)\r\n    external\r\n    view\r\n    returns (\r\n        uint256 L2TokenId,\r\n        uint32 numberOfFarms,\r\n        bool inLimitFarming,\r\n        address owner\r\n    );\r\n\r\n    /// @notice Enters in incentive (time-limited or eternal farming) with NFT-position token\r\n    /// @dev token must be deposited in FarmingCenter\r\n    /// @param key The incentive event key\r\n    /// @param tokenId The id of position NFT\r\n    /// @param tokensLocked Amount of tokens to lock for liquidity multiplier (if tiers are used)\r\n    /// @param isLimit Is incentive time-limited or eternal\r\n    function enterFarming(\r\n        IncentiveKey memory key,\r\n        uint256 tokenId,\r\n        uint256 tokensLocked,\r\n        bool isLimit\r\n    ) external;\r\n\r\n    function eternalFarming() external view returns (IAlgebraEternalFarming);\r\n\r\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\r\n    /// @dev \"proxies\" to NonfungiblePositionManager\r\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\r\n    /// recipient The account that should receive the tokens,\r\n    /// amount0Max The maximum amount of token0 to collect,\r\n    /// amount1Max The maximum amount of token1 to collect\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(INonfungiblePositionManager.CollectParams calldata params)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Used to collect reward from eternal farming. Then reward can be claimed.\r\n    /// @param key The incentive event key\r\n    /// @param tokenId The id of position NFT\r\n    /// @return reward The amount of collected reward\r\n    /// @return bonusReward The amount of collected  bonus reward\r\n    function collectRewards(IncentiveKey memory key, uint256 tokenId)\r\n    external\r\n    returns (uint256 reward, uint256 bonusReward);\r\n\r\n    /// @notice Used to claim and send rewards from farming(s)\r\n    /// @dev can be used via static call to get current rewards for user\r\n    /// @param rewardToken The token that is a reward\r\n    /// @param to The address to be rewarded\r\n    /// @param amountRequestedIncentive Amount to claim in incentive (limit) farming\r\n    /// @param amountRequestedEternal Amount to claim in eternal farming\r\n    /// @return reward The summary amount of claimed rewards\r\n    function claimReward(\r\n        address rewardToken,\r\n        address to,\r\n        uint256 amountRequestedIncentive,\r\n        uint256 amountRequestedEternal\r\n    ) external returns (uint256 reward);\r\n\r\n    /// @notice Exits from incentive (time-limited or eternal farming) with NFT-position token\r\n    /// @param key The incentive event key\r\n    /// @param tokenId The id of position NFT\r\n    /// @param isLimit Is incentive time-limited or eternal\r\n    function exitFarming(\r\n        IncentiveKey memory key,\r\n        uint256 tokenId,\r\n        bool isLimit\r\n    ) external;\r\n\r\n    /// @notice Withdraw Algebra NFT-position token\r\n    /// @dev can be used via static call to get current rewards for user\r\n    /// @param tokenId The id of position NFT\r\n    /// @param to New owner of position NFT\r\n    /// @param data The additional data for NonfungiblePositionManager\r\n    function withdrawToken(\r\n        uint256 tokenId,\r\n        address to,\r\n        bytes memory data\r\n    ) external;\r\n}"
    },
    "contracts/integrations/algebra/IncentiveKey.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nstruct IncentiveKey {\r\n    address rewardToken;\r\n    address bonusRewardToken;\r\n    address pool;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n}"
    },
    "contracts/integrations/algebra/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface INonfungiblePositionManager {\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint amount0Desired;\r\n        uint amount1Desired;\r\n        uint amount0Min;\r\n        uint amount1Min;\r\n        address recipient;\r\n        uint deadline;\r\n    }\r\n\r\n    function mint(\r\n        MintParams calldata params\r\n    ) external payable returns (uint tokenId, uint128 liquidity, uint amount0, uint amount1);\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\r\n    external\r\n    payable\r\n    returns (\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint tokenId;\r\n        uint128 liquidity;\r\n        uint amount0Min;\r\n        uint amount1Min;\r\n        uint deadline;\r\n    }\r\n\r\n    function decreaseLiquidity(\r\n        DecreaseLiquidityParams calldata params\r\n    ) external payable returns (uint amount0, uint amount1);\r\n\r\n    struct CollectParams {\r\n        uint tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    function collect(CollectParams calldata params) external payable returns (uint amount0, uint amount1);\r\n\r\n    function burn(uint tokenId) external payable;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function positions(uint256 tokenId)\r\n    external\r\n    view\r\n    returns (\r\n        uint96 nonce,\r\n        address operator,\r\n        address token0,\r\n        address token1,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity,\r\n        uint256 feeGrowthInside0LastX128,\r\n        uint256 feeGrowthInside1LastX128,\r\n        uint128 tokensOwed0,\r\n        uint128 tokensOwed1\r\n    );\r\n}"
    },
    "contracts/integrations/algebra/pool/IAlgebraPoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissionless pool actions\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolActions {\r\n  /**\r\n   * @notice Sets the initial price for the pool\r\n   * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\r\n   * @param price the initial sqrt price of the pool as a Q64.96\r\n   */\r\n  function initialize(uint160 price) external;\r\n\r\n  /**\r\n   * @notice Adds liquidity for the given recipient/bottomTick/topTick position\r\n   * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\r\n   * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\r\n   * on bottomTick, topTick, the amount of liquidity, and the current price.\r\n   * @param sender The address which will receive potential surplus of paid tokens\r\n   * @param recipient The address for which the liquidity will be created\r\n   * @param bottomTick The lower tick of the position in which to add liquidity\r\n   * @param topTick The upper tick of the position in which to add liquidity\r\n   * @param amount The desired amount of liquidity to mint\r\n   * @param data Any data that should be passed through to the callback\r\n   * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n   * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n   * @return liquidityActual The actual minted amount of liquidity\r\n   */\r\n  function mint(\r\n    address sender,\r\n    address recipient,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    uint128 amount,\r\n    bytes calldata data\r\n  )\r\n  external\r\n  returns (\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    uint128 liquidityActual\r\n  );\r\n\r\n  /**\r\n   * @notice Collects tokens owed to a position\r\n   * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\r\n   * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\r\n   * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\r\n   * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\r\n   * @param recipient The address which should receive the fees collected\r\n   * @param bottomTick The lower tick of the position for which to collect fees\r\n   * @param topTick The upper tick of the position for which to collect fees\r\n   * @param amount0Requested How much token0 should be withdrawn from the fees owed\r\n   * @param amount1Requested How much token1 should be withdrawn from the fees owed\r\n   * @return amount0 The amount of fees collected in token0\r\n   * @return amount1 The amount of fees collected in token1\r\n   */\r\n  function collect(\r\n    address recipient,\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    uint128 amount0Requested,\r\n    uint128 amount1Requested\r\n  ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n  /**\r\n   * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\r\n   * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\r\n   * @dev Fees must be collected separately via a call to #collect\r\n   * @param bottomTick The lower tick of the position for which to burn liquidity\r\n   * @param topTick The upper tick of the position for which to burn liquidity\r\n   * @param amount How much liquidity to burn\r\n   * @return amount0 The amount of token0 sent to the recipient\r\n   * @return amount1 The amount of token1 sent to the recipient\r\n   */\r\n  function burn(\r\n    int24 bottomTick,\r\n    int24 topTick,\r\n    uint128 amount\r\n  ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  /**\r\n   * @notice Swap token0 for token1, or token1 for token0\r\n   * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\r\n   * @param recipient The address to receive the output of the swap\r\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\r\n   * SwapRouter#SwapCallbackData\r\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n   */\r\n  function swap(\r\n    address recipient,\r\n    bool zeroToOne,\r\n    int256 amountSpecified,\r\n    uint160 limitSqrtPrice,\r\n    bytes calldata data\r\n  ) external returns (int256 amount0, int256 amount1);\r\n\r\n  /**\r\n   * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\r\n   * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\r\n   * @param sender The address called this function (Comes from the Router)\r\n   * @param recipient The address to receive the output of the swap\r\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\r\n   * SwapRouter#SwapCallbackData\r\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n   */\r\n  function swapSupportingFeeOnInputTokens(\r\n    address sender,\r\n    address recipient,\r\n    bool zeroToOne,\r\n    int256 amountSpecified,\r\n    uint160 limitSqrtPrice,\r\n    bytes calldata data\r\n  ) external returns (int256 amount0, int256 amount1);\r\n\r\n  /**\r\n   * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\r\n   * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback\r\n   * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used\r\n   * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending\r\n   * the donation amount(s) from the callback\r\n   * @param recipient The address which will receive the token0 and token1 amounts\r\n   * @param amount0 The amount of token0 to send\r\n   * @param amount1 The amount of token1 to send\r\n   * @param data Any data to be passed through to the callback\r\n   */\r\n  function flash(\r\n    address recipient,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n"
    },
    "contracts/integrations/algebra/pool/IAlgebraPoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @title Pool state that is not stored\r\n * @notice Contains view functions to provide information about the pool that is computed rather than stored on the\r\n * blockchain. The functions here may have variable gas costs.\r\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\n */\r\ninterface IAlgebraPoolDerivedState {\r\n  /**\r\n   * @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\r\n   * @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\r\n   * the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\r\n   * you must call it with secondsAgos = [3600, 0].\r\n   * @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\r\n   * log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\r\n   * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\r\n   * @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\r\n   * @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`\r\n   * from the current block timestamp\r\n   * @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`\r\n   * @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`\r\n   */\r\n  function getTimepoints(uint32[] calldata secondsAgos)\r\n  external\r\n  view\r\n  returns (\r\n    int56[] memory tickCumulatives,\r\n    uint160[] memory secondsPerLiquidityCumulatives,\r\n    uint112[] memory volatilityCumulatives,\r\n    uint256[] memory volumePerAvgLiquiditys\r\n  );\r\n\r\n  /**\r\n   * @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\r\n   * @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\r\n   * I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\r\n   * snapshot is taken and the second snapshot is taken.\r\n   * @param bottomTick The lower tick of the range\r\n   * @param topTick The upper tick of the range\r\n   * @return innerTickCumulative The snapshot of the tick accumulator for the range\r\n   * @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\r\n   * @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range\r\n   */\r\n  function getInnerCumulatives(int24 bottomTick, int24 topTick)\r\n  external\r\n  view\r\n  returns (\r\n    int56 innerTickCumulative,\r\n    uint160 innerSecondsSpentPerLiquidity,\r\n    uint32 innerSecondsSpent\r\n  );\r\n}\r\n"
    },
    "contracts/integrations/algebra/pool/IAlgebraPoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Events emitted by a pool\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolEvents {\r\n  /**\r\n   * @notice Emitted exactly once by a pool when #initialize is first called on the pool\r\n   * @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\r\n   * @param price The initial sqrt price of the pool, as a Q64.96\r\n   * @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\r\n   */\r\n  event Initialize(uint160 price, int24 tick);\r\n\r\n  /**\r\n   * @notice Emitted when liquidity is minted for a given position\r\n   * @param sender The address that minted the liquidity\r\n   * @param owner The owner of the position and recipient of any minted liquidity\r\n   * @param bottomTick The lower tick of the position\r\n   * @param topTick The upper tick of the position\r\n   * @param liquidityAmount The amount of liquidity minted to the position range\r\n   * @param amount0 How much token0 was required for the minted liquidity\r\n   * @param amount1 How much token1 was required for the minted liquidity\r\n   */\r\n  event Mint(\r\n    address sender,\r\n    address indexed owner,\r\n    int24 indexed bottomTick,\r\n    int24 indexed topTick,\r\n    uint128 liquidityAmount,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  );\r\n\r\n  /**\r\n   * @notice Emitted when fees are collected by the owner of a position\r\n   * @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\r\n   * @param owner The owner of the position for which fees are collected\r\n   * @param recipient The address that received fees\r\n   * @param bottomTick The lower tick of the position\r\n   * @param topTick The upper tick of the position\r\n   * @param amount0 The amount of token0 fees collected\r\n   * @param amount1 The amount of token1 fees collected\r\n   */\r\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\r\n\r\n  /**\r\n   * @notice Emitted when a position's liquidity is removed\r\n   * @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\r\n   * @param owner The owner of the position for which liquidity is removed\r\n   * @param bottomTick The lower tick of the position\r\n   * @param topTick The upper tick of the position\r\n   * @param liquidityAmount The amount of liquidity to remove\r\n   * @param amount0 The amount of token0 withdrawn\r\n   * @param amount1 The amount of token1 withdrawn\r\n   */\r\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\r\n\r\n  /**\r\n   * @notice Emitted by the pool for any swaps between token0 and token1\r\n   * @param sender The address that initiated the swap call, and that received the callback\r\n   * @param recipient The address that received the output of the swap\r\n   * @param amount0 The delta of the token0 balance of the pool\r\n   * @param amount1 The delta of the token1 balance of the pool\r\n   * @param price The sqrt(price) of the pool after the swap, as a Q64.96\r\n   * @param liquidity The liquidity of the pool after the swap\r\n   * @param tick The log base 1.0001 of price of the pool after the swap\r\n   */\r\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\r\n\r\n  /**\r\n   * @notice Emitted by the pool for any flashes of token0/token1\r\n   * @param sender The address that initiated the swap call, and that received the callback\r\n   * @param recipient The address that received the tokens from flash\r\n   * @param amount0 The amount of token0 that was flashed\r\n   * @param amount1 The amount of token1 that was flashed\r\n   * @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\r\n   * @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\r\n   */\r\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\r\n\r\n  /**\r\n   * @notice Emitted when the community fee is changed by the pool\r\n   * @param communityFee0New The updated value of the token0 community fee percent\r\n   * @param communityFee1New The updated value of the token1 community fee percent\r\n   */\r\n  event CommunityFee(uint8 communityFee0New, uint8 communityFee1New);\r\n\r\n  /**\r\n   * @notice Emitted when new activeIncentive is set\r\n   * @param virtualPoolAddress The address of a virtual pool associated with the current active incentive\r\n   */\r\n  event Incentive(address indexed virtualPoolAddress);\r\n\r\n  /**\r\n   * @notice Emitted when the fee changes\r\n   * @param fee The value of the token fee\r\n   */\r\n  event Fee(uint16 fee);\r\n\r\n  /**\r\n   * @notice Emitted when the LiquidityCooldown changes\r\n   * @param liquidityCooldown The value of locktime for added liquidity\r\n   */\r\n  event LiquidityCooldown(uint32 liquidityCooldown);\r\n}\r\n"
    },
    "contracts/integrations/algebra/pool/IAlgebraPoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\nimport '../IDataStorageOperator.sol';\r\n\r\n/// @title Pool state that never changes\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolImmutables {\r\n  /**\r\n   * @notice The contract that stores all the timepoints and can perform actions with them\r\n   * @return The operator address\r\n   */\r\n  function dataStorageOperator() external view returns (address);\r\n\r\n  /**\r\n   * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\r\n   * @return The contract address\r\n   */\r\n  function factory() external view returns (address);\r\n\r\n  /**\r\n   * @notice The first of the two tokens of the pool, sorted by address\r\n   * @return The token contract address\r\n   */\r\n  function token0() external view returns (address);\r\n\r\n  /**\r\n   * @notice The second of the two tokens of the pool, sorted by address\r\n   * @return The token contract address\r\n   */\r\n  function token1() external view returns (address);\r\n\r\n  /**\r\n   * @notice The pool tick spacing\r\n   * @dev Ticks can only be used at multiples of this value\r\n   * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\r\n   * This value is an int24 to avoid casting even though it is always positive.\r\n   * @return The tick spacing\r\n   */\r\n  function tickSpacing() external view returns (int24);\r\n\r\n  /**\r\n   * @notice The maximum amount of position liquidity that can use any tick in the range\r\n   * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n   * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n   * @return The max amount of liquidity per tick\r\n   */\r\n  function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n"
    },
    "contracts/integrations/algebra/pool/IAlgebraPoolPermissionedActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @title Permissioned pool actions\r\n * @notice Contains pool methods that may only be called by the factory owner or tokenomics\r\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\n */\r\ninterface IAlgebraPoolPermissionedActions {\r\n  /**\r\n   * @notice Set the community's % share of the fees. Cannot exceed 25% (250)\r\n   * @param communityFee0 new community fee percent for token0 of the pool in thousandths (1e-3)\r\n   * @param communityFee1 new community fee percent for token1 of the pool in thousandths (1e-3)\r\n   */\r\n  function setCommunityFee(uint8 communityFee0, uint8 communityFee1) external;\r\n\r\n  /**\r\n   * @notice Sets an active incentive\r\n   * @param virtualPoolAddress The address of a virtual pool associated with the incentive\r\n   */\r\n  function setIncentive(address virtualPoolAddress) external;\r\n\r\n  /**\r\n   * @notice Sets new lock time for added liquidity\r\n   * @param newLiquidityCooldown The time in seconds\r\n   */\r\n  function setLiquidityCooldown(uint32 newLiquidityCooldown) external;\r\n}\r\n"
    },
    "contracts/integrations/algebra/pool/IAlgebraPoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that can change\r\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\ninterface IAlgebraPoolState {\r\n  /**\r\n   * @notice The globalState structure in the pool stores many values but requires only one slot\r\n   * and is exposed as a single method to save gas when accessed externally.\r\n   * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\r\n   * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\r\n   * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\r\n   * boundary;\r\n   * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\r\n   * Returns timepointIndex The index of the last written timepoint;\r\n   * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\r\n   * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\r\n   * Returns unlocked Whether the pool is currently locked to reentrancy;\r\n   */\r\n  function globalState()\r\n  external\r\n  view\r\n  returns (\r\n    uint160 price,\r\n    int24 tick,\r\n    uint16 fee,\r\n    uint16 timepointIndex,\r\n    uint8 communityFeeToken0,\r\n    uint8 communityFeeToken1,\r\n    bool unlocked\r\n  );\r\n\r\n  /**\r\n   * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\r\n   * @dev This value can overflow the uint256\r\n   */\r\n  function totalFeeGrowth0Token() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\r\n   * @dev This value can overflow the uint256\r\n   */\r\n  function totalFeeGrowth1Token() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice The currently in range liquidity available to the pool\r\n   * @dev This value has no relationship to the total liquidity across all ticks.\r\n   * Returned value cannot exceed type(uint128).max\r\n   */\r\n  function liquidity() external view returns (uint128);\r\n\r\n  /**\r\n   * @notice Look up information about a specific tick in the pool\r\n   * @dev This is a public structure, so the `return` natspec tags are omitted.\r\n   * @param tick The tick to look up\r\n   * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\r\n   * tick upper;\r\n   * Returns liquidityDelta how much liquidity changes when the pool price crosses the tick;\r\n   * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\r\n   * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\r\n   * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\r\n   * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\r\n   * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\r\n   * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\r\n   * otherwise equal to false. Outside values can only be used if the tick is initialized.\r\n   * In addition, these values are only relative and must be used only in comparison to previous snapshots for\r\n   * a specific position.\r\n   */\r\n  function ticks(int24 tick)\r\n  external\r\n  view\r\n  returns (\r\n    uint128 liquidityTotal,\r\n    int128 liquidityDelta,\r\n    uint256 outerFeeGrowth0Token,\r\n    uint256 outerFeeGrowth1Token,\r\n    int56 outerTickCumulative,\r\n    uint160 outerSecondsPerLiquidity,\r\n    uint32 outerSecondsSpent,\r\n    bool initialized\r\n  );\r\n\r\n  /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\r\n  function tickTable(int16 wordPosition) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the information about a position by the position's key\r\n   * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\r\n   * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\r\n   * @return liquidityAmount The amount of liquidity in the position;\r\n   * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\r\n   * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\r\n   * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\r\n   * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\r\n   * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\r\n   */\r\n  function positions(bytes32 key)\r\n  external\r\n  view\r\n  returns (\r\n    uint128 liquidityAmount,\r\n    uint32 lastLiquidityAddTimestamp,\r\n    uint256 innerFeeGrowth0Token,\r\n    uint256 innerFeeGrowth1Token,\r\n    uint128 fees0,\r\n    uint128 fees1\r\n  );\r\n\r\n  /**\r\n   * @notice Returns data about a specific timepoint index\r\n   * @param index The element of the timepoints array to fetch\r\n   * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time\r\n   * ago, rather than at a specific index in the array.\r\n   * This is a public mapping of structures, so the `return` natspec tags are omitted.\r\n   * @return initialized whether the timepoint has been initialized and the values are safe to use;\r\n   * Returns blockTimestamp The timestamp of the timepoint;\r\n   * Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp;\r\n   * Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp;\r\n   * Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp;\r\n   * Returns averageTick Time-weighted average tick;\r\n   * Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;\r\n   */\r\n  function timepoints(uint256 index)\r\n  external\r\n  view\r\n  returns (\r\n    bool initialized,\r\n    uint32 blockTimestamp,\r\n    int56 tickCumulative,\r\n    uint160 secondsPerLiquidityCumulative,\r\n    uint88 volatilityCumulative,\r\n    int24 averageTick,\r\n    uint144 volumePerLiquidityCumulative\r\n  );\r\n\r\n  /**\r\n   * @notice Returns the information about active incentive\r\n   * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\r\n   * @return virtualPool The address of a virtual pool associated with the current active incentive\r\n   */\r\n  function activeIncentive() external view returns (address virtualPool);\r\n\r\n  /**\r\n   * @notice Returns the lock time for added liquidity\r\n   */\r\n  function liquidityCooldown() external view returns (uint32 cooldownInSeconds);\r\n}\r\n"
    },
    "contracts/integrations/balancer/IBalancerBoostedAavePool.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IPoolSwapStructs.sol\";\r\n\r\n/// @notice Restored from Balancer Aave Boosted Pool (DAI) (bb-am-DAI) https://polygonscan.com/address/0x178E029173417b1F9C8bC16DCeC6f697bC323746\r\ninterface IBalancerBoostedAavePool {\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n  event PausedStateChanged(bool paused);\r\n  event RecoveryModeStateChanged(bool enabled);\r\n  event SwapFeePercentageChanged(uint256 swapFeePercentage);\r\n  event TargetsSet(address indexed token, uint256 lowerTarget, uint256 upperTarget);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function decreaseAllowance(address spender, uint256 amount) external returns (bool);\r\n\r\n  function disableRecoveryMode() external;\r\n\r\n  function enableRecoveryMode() external;\r\n\r\n  function getActionId(bytes4 selector) external view returns (bytes32);\r\n\r\n  function getAuthorizer() external view returns (address);\r\n\r\n  function getBptIndex() external view returns (uint256);\r\n\r\n  function getDomainSeparator() external view returns (bytes32);\r\n\r\n  function getMainIndex() external view returns (uint256);\r\n\r\n  function getMainToken() external view returns (address);\r\n\r\n  function getNextNonce(address account) external view returns (uint256);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function getPausedState() external view returns (\r\n    bool paused,\r\n    uint256 pauseWindowEndTime,\r\n    uint256 bufferPeriodEndTime\r\n  );\r\n\r\n  function getPoolId() external view returns (bytes32);\r\n\r\n  function getProtocolFeesCollector() external view returns (address);\r\n\r\n  function getRate() external view returns (uint256);\r\n\r\n  function getScalingFactors() external view returns (uint256[] memory);\r\n\r\n  function getSwapFeePercentage() external view returns (uint256);\r\n\r\n  function getTargets() external view returns (uint256 lowerTarget, uint256 upperTarget);\r\n\r\n  function getVault() external view returns (address);\r\n\r\n  function getVirtualSupply() external view returns (uint256);\r\n\r\n  function getWrappedIndex() external view returns (uint256);\r\n\r\n  function getWrappedToken() external view returns (address);\r\n\r\n  /**\r\n   * @notice Return the conversion rate between the wrapped and main tokens.\r\n     * @dev This is an 18-decimal fixed point value.\r\n     */\r\n  function getWrappedTokenRate() external view returns (uint256);\r\n\r\n  function inRecoveryMode() external view returns (bool);\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n\r\n  function initialize() external;\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  function onExitPool(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock,\r\n    uint256 protocolSwapFeePercentage,\r\n    bytes memory userData\r\n  ) external returns (uint256[] memory, uint256[] memory);\r\n\r\n  function onJoinPool(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock,\r\n    uint256 protocolSwapFeePercentage,\r\n    bytes memory userData\r\n  ) external returns (uint256[] memory, uint256[] memory);\r\n\r\n  function onSwap(\r\n    IPoolSwapStructs.SwapRequest memory request,\r\n    uint256[] memory balances,\r\n    uint256 indexIn,\r\n    uint256 indexOut\r\n  ) external returns (uint256);\r\n\r\n  function pause() external;\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  function queryExit(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock,\r\n    uint256 protocolSwapFeePercentage,\r\n    bytes memory userData\r\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\r\n\r\n  function queryJoin(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock,\r\n    uint256 protocolSwapFeePercentage,\r\n    bytes memory userData\r\n  ) external returns (uint256 bptOut, uint256[] memory amountsIn);\r\n\r\n  function setAssetManagerPoolConfig(address token, bytes memory poolConfig) external;\r\n\r\n  function setSwapFeePercentage(uint256 swapFeePercentage) external;\r\n\r\n  function setTargets(uint256 newLowerTarget, uint256 newUpperTarget) external;\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  function unpause() external;\r\n}\r\n\r\ninterface AaveLinearPool {\r\n  struct ConstructorArgs {\r\n    address vault;\r\n    string name;\r\n    string symbol;\r\n    address mainToken;\r\n    address wrappedToken;\r\n    address assetManager;\r\n    uint256 upperTarget;\r\n    uint256 swapFeePercentage;\r\n    uint256 pauseWindowDuration;\r\n    uint256 bufferPeriodDuration;\r\n    address owner;\r\n  }\r\n}\r\n"
    },
    "contracts/integrations/balancer/IBalancerBoostedAaveStablePool.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IPoolSwapStructs.sol\";\r\n\r\n/// @notice Restored from https://polygonscan.com/address/0x48e6b98ef6329f8f0a30ebb8c7c960330d648085\r\ninterface IBalancerBoostedAaveStablePool {\r\n  event AmpUpdateStarted(\r\n    uint256 startValue,\r\n    uint256 endValue,\r\n    uint256 startTime,\r\n    uint256 endTime\r\n  );\r\n  event AmpUpdateStopped(uint256 currentValue);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n  event PausedStateChanged(bool paused);\r\n  event ProtocolFeePercentageCacheUpdated(\r\n    uint256 indexed feeType,\r\n    uint256 protocolFeePercentage\r\n  );\r\n  event RecoveryModeStateChanged(bool enabled);\r\n  event SwapFeePercentageChanged(uint256 swapFeePercentage);\r\n  event TokenRateCacheUpdated(uint256 indexed tokenIndex, uint256 rate);\r\n  event TokenRateProviderSet(\r\n    uint256 indexed tokenIndex,\r\n    address indexed provider,\r\n    uint256 cacheDuration\r\n  );\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL() external view returns (uint256);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function decreaseAllowance(address spender, uint256 amount) external returns (bool);\r\n\r\n  function disableRecoveryMode() external;\r\n\r\n  function enableRecoveryMode() external;\r\n\r\n  function getActionId(bytes4 selector) external view returns (bytes32);\r\n\r\n  /**\r\n   * @dev Returns the effective BPT supply.\r\n     *\r\n     * In other pools, this would be the same as `totalSupply`, but there are two key differences here:\r\n     *  - this pool pre-mints BPT and holds it in the Vault as a token, and as such we need to subtract the Vault's\r\n     *    balance to get the total \"circulating supply\". This is called the 'virtualSupply'.\r\n     *  - the Pool owes debt to the Protocol in the form of unminted BPT, which will be minted immediately before the\r\n     *    next join or exit. We need to take these into account since, even if they don't yet exist, they will\r\n     *    effectively be included in any Pool operation that involves BPT.\r\n     *\r\n     * In the vast majority of cases, this function should be used instead of `totalSupply()`.\r\n     */\r\n  function getActualSupply() external view returns (uint256);\r\n\r\n  function getAmplificationParameter() external view returns (\r\n    uint256 value,\r\n    bool isUpdating,\r\n    uint256 precision\r\n  );\r\n\r\n  function getAuthorizer() external view returns (address);\r\n\r\n  function getBptIndex() external view returns (uint256);\r\n\r\n  function getDomainSeparator() external view returns (bytes32);\r\n\r\n  function getLastJoinExitData() external view returns (\r\n    uint256 lastJoinExitAmplification,\r\n    uint256 lastPostJoinExitInvariant\r\n  );\r\n\r\n  function getMinimumBpt() external pure returns (uint256);\r\n\r\n  function getNextNonce(address account) external view returns (uint256);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function getPausedState() external view returns (\r\n    bool paused,\r\n    uint256 pauseWindowEndTime,\r\n    uint256 bufferPeriodEndTime\r\n  );\r\n\r\n  function getPoolId() external view returns (bytes32);\r\n\r\n  function getProtocolFeePercentageCache(uint256 feeType) external view returns (uint256);\r\n\r\n  function getProtocolFeesCollector() external view returns (address);\r\n\r\n  function getProtocolSwapFeeDelegation() external view returns (bool);\r\n\r\n  function getRate() external view returns (uint256);\r\n\r\n  function getRateProviders() external view returns (address[] memory);\r\n\r\n  function getScalingFactors() external view returns (uint256[] memory);\r\n\r\n  function getSwapFeePercentage() external view returns (uint256);\r\n\r\n  function getTokenRate(address token) external view returns (uint256);\r\n\r\n  function getTokenRateCache(address token) external view returns (\r\n    uint256 rate,\r\n    uint256 oldRate,\r\n    uint256 duration,\r\n    uint256 expires\r\n  );\r\n\r\n  function getVault() external view returns (address);\r\n\r\n  function inRecoveryMode() external view returns (bool);\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n\r\n  function isTokenExemptFromYieldProtocolFee(address token) external view returns (bool);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  function onExitPool(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock,\r\n    uint256 protocolSwapFeePercentage,\r\n    bytes memory userData\r\n  ) external returns (uint256[] memory, uint256[] memory);\r\n\r\n  function onJoinPool(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock,\r\n    uint256 protocolSwapFeePercentage,\r\n    bytes memory userData\r\n  ) external returns (uint256[] memory, uint256[] memory);\r\n\r\n  function onSwap(\r\n    IPoolSwapStructs.SwapRequest memory swapRequest,\r\n    uint256[] memory balances,\r\n    uint256 indexIn,\r\n    uint256 indexOut\r\n  ) external returns (uint256);\r\n\r\n  function pause() external;\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  function queryExit(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock,\r\n    uint256 protocolSwapFeePercentage,\r\n    bytes memory userData\r\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\r\n\r\n  function queryJoin(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock,\r\n    uint256 protocolSwapFeePercentage,\r\n    bytes memory userData\r\n  ) external returns (uint256 bptOut, uint256[] memory amountsIn);\r\n\r\n  function setAssetManagerPoolConfig(address token, bytes memory poolConfig) external;\r\n\r\n  function setSwapFeePercentage(uint256 swapFeePercentage) external;\r\n\r\n  function setTokenRateCacheDuration(address token, uint256 duration) external;\r\n\r\n  function startAmplificationParameterUpdate(uint256 rawEndValue, uint256 endTime) external;\r\n\r\n  function stopAmplificationParameterUpdate() external;\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  function unpause() external;\r\n\r\n  function updateProtocolFeePercentageCache() external;\r\n\r\n  function updateTokenRateCache(address token) external;\r\n}\r\n\r\ninterface ComposableStablePool {\r\n  struct NewPoolParams {\r\n    address vault;\r\n    address protocolFeeProvider;\r\n    string name;\r\n    string symbol;\r\n    address[] tokens;\r\n    address[] rateProviders;\r\n    uint256[] tokenRateCacheDurations;\r\n    bool[] exemptFromYieldProtocolFeeFlags;\r\n    uint256 amplificationParameter;\r\n    uint256 swapFeePercentage;\r\n    uint256 pauseWindowDuration;\r\n    uint256 bufferPeriodDuration;\r\n    address owner;\r\n  }\r\n}\r\n"
    },
    "contracts/integrations/balancer/IBalancerGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice gauge-v2, see 0xc9b36096f5201ea332Db35d6D195774ea0D5988f\r\n/// @dev see 20230316-child-chain-gauge-factory-v2 in balancer-deployments repository\r\ninterface IBalancerGauge {\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Deposit(address indexed _user, uint256 _value);\r\n  event Withdraw(address indexed _user, uint256 _value);\r\n  event UpdateLiquidityLimit(\r\n    address indexed _user,\r\n    uint256 _original_balance,\r\n    uint256 _original_supply,\r\n    uint256 _working_balance,\r\n    uint256 _working_supply\r\n  );\r\n\r\n  function deposit(uint256 _value) external;\r\n\r\n  function deposit(uint256 _value, address _user) external;\r\n\r\n  function withdraw(uint256 _value) external;\r\n\r\n  function withdraw(uint256 _value, address _user) external;\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) external returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n  function permit(\r\n    address _owner,\r\n    address _spender,\r\n    uint256 _value,\r\n    uint256 _deadline,\r\n    uint8 _v,\r\n    bytes32 _r,\r\n    bytes32 _s\r\n  ) external returns (bool);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n  function increaseAllowance(address _spender, uint256 _added_value)\r\n  external\r\n  returns (bool);\r\n\r\n  function decreaseAllowance(address _spender, uint256 _subtracted_value)\r\n  external\r\n  returns (bool);\r\n\r\n  function user_checkpoint(address addr) external returns (bool);\r\n\r\n  function claimable_tokens(address addr) external returns (uint256);\r\n\r\n  function claimed_reward(address _addr, address _token)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function claimable_reward(address _user, address _reward_token)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function set_rewards_receiver(address _receiver) external;\r\n\r\n  function claim_rewards() external;\r\n\r\n  function claim_rewards(address _addr) external;\r\n\r\n  function claim_rewards(address _addr, address _receiver) external;\r\n\r\n  function claim_rewards(\r\n    address _addr,\r\n    address _receiver,\r\n    uint256[] memory _reward_indexes\r\n  ) external;\r\n\r\n  function add_reward(address _reward_token, address _distributor) external;\r\n\r\n  function set_reward_distributor(address _reward_token, address _distributor)\r\n  external;\r\n\r\n  function deposit_reward_token(address _reward_token, uint256 _amount)\r\n  external;\r\n\r\n  function killGauge() external;\r\n\r\n  function unkillGauge() external;\r\n\r\n  function decimals() external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function integrate_checkpoint() external view returns (uint256);\r\n\r\n  function bal_token() external view returns (address);\r\n\r\n  function bal_pseudo_minter() external view returns (address);\r\n\r\n  function voting_escrow_delegation_proxy() external view returns (address);\r\n\r\n  function authorizer_adaptor() external view returns (address);\r\n\r\n  function initialize(address _lp_token, string memory _version) external;\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function nonces(address arg0) external view returns (uint256);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function balanceOf(address arg0) external view returns (uint256);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function lp_token() external view returns (address);\r\n\r\n  function version() external view returns (string memory);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function working_balances(address arg0) external view returns (uint256);\r\n\r\n  function working_supply() external view returns (uint256);\r\n\r\n  function period() external view returns (uint256);\r\n\r\n  function period_timestamp(uint256 arg0) external view returns (uint256);\r\n\r\n  function integrate_checkpoint_of(address arg0)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function integrate_fraction(address arg0) external view returns (uint256);\r\n\r\n  function integrate_inv_supply(uint256 arg0) external view returns (uint256);\r\n\r\n  function integrate_inv_supply_of(address arg0)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function reward_count() external view returns (uint256);\r\n\r\n  function reward_tokens(uint256 arg0) external view returns (address);\r\n\r\n  function reward_data(address arg0) external view returns (S_0 memory);\r\n\r\n  function rewards_receiver(address arg0) external view returns (address);\r\n\r\n  function reward_integral_for(address arg0, address arg1)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function is_killed() external view returns (bool);\r\n\r\n  function inflation_rate(uint256 arg0) external view returns (uint256);\r\n}\r\n\r\n  struct S_0 {\r\n    address distributor;\r\n    uint256 period_finish;\r\n    uint256 rate;\r\n    uint256 last_update;\r\n    uint256 integral;\r\n  }\r\n"
    },
    "contracts/integrations/balancer/IBalancerGaugeV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice gauge-v1, see 0x2E96068b3D5B5BAE3D7515da4A1D2E52d08A2647\r\n/// @dev see 20220413-child-chain-gauge-factory in balancer-deployments repository\r\ninterface IBalancerGaugeV1 {\r\n\r\n  function decimals() external view returns (uint256);\r\n\r\n  function version() external view returns (string memory);\r\n\r\n  function reward_contract() external view returns (address);\r\n\r\n  function last_claim() external view returns (uint256);\r\n\r\n  function claimed_reward(address _addr, address _token)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function claimable_reward(address _addr, address _token)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function reward_data(address _token) external view returns (\r\n    address token,\r\n    address distributor,\r\n    uint256 period_finish,\r\n    uint256 rate,\r\n    uint256 last_update,\r\n    uint256 integral\r\n  );\r\n\r\n  function claimable_reward_write(address _addr, address _token)\r\n  external\r\n  returns (uint256);\r\n\r\n  function set_rewards_receiver(address _receiver) external;\r\n\r\n  function claim_rewards() external;\r\n\r\n  function claim_rewards(address _addr) external;\r\n\r\n  function claim_rewards(address _addr, address _receiver) external;\r\n\r\n  function deposit(uint256 _value) external;\r\n\r\n  function deposit(uint256 _value, address _addr) external;\r\n\r\n  function deposit(\r\n    uint256 _value,\r\n    address _addr,\r\n    bool _claim_rewards\r\n  ) external;\r\n\r\n  function withdraw(uint256 _value) external;\r\n\r\n  function withdraw(uint256 _value, bool _claim_rewards) external;\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) external returns (bool);\r\n\r\n  function allowance(address owner, address spender)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n  function permit(\r\n    address _owner,\r\n    address _spender,\r\n    uint256 _value,\r\n    uint256 _deadline,\r\n    uint8 _v,\r\n    bytes32 _r,\r\n    bytes32 _s\r\n  ) external returns (bool);\r\n\r\n  function increaseAllowance(address _spender, uint256 _added_value)\r\n  external\r\n  returns (bool);\r\n\r\n  function decreaseAllowance(address _spender, uint256 _subtracted_value)\r\n  external\r\n  returns (bool);\r\n\r\n  function set_rewards(\r\n    address _reward_contract,\r\n    bytes32 _claim_sig,\r\n    address[8] memory _reward_tokens\r\n  ) external;\r\n\r\n  function initialize(\r\n    address _lp_token,\r\n    address _reward_contract,\r\n    bytes32 _claim_sig\r\n  ) external;\r\n\r\n  function lp_token() external view returns (address);\r\n\r\n  function balanceOf(address arg0) external view returns (uint256);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function nonces(address arg0) external view returns (uint256);\r\n\r\n  function reward_tokens(uint256 arg0) external view returns (address);\r\n\r\n  function reward_balances(address arg0) external view returns (uint256);\r\n\r\n  function rewards_receiver(address arg0) external view returns (address);\r\n\r\n  function claim_sig() external view returns (bytes memory);\r\n\r\n  function reward_integral(address arg0) external view returns (uint256);\r\n\r\n  function reward_integral_for(address arg0, address arg1)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n}\r\n"
    },
    "contracts/integrations/balancer/IBalancerHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IBVault.sol\";\r\n\r\ninterface IBalancerHelper {\r\n  function queryExit(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    IBVault.ExitPoolRequest memory request\r\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\r\n\r\n  function queryJoin(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    IBVault.JoinPoolRequest memory request\r\n  ) external returns (uint256 bptOut, uint256[] memory amountsIn);\r\n\r\n  function vault() external view returns (address);\r\n}\r\n"
    },
    "contracts/integrations/balancer/IBalancerMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IBalancerMinter {\r\n  event Minted(address indexed recipient, address gauge, uint256 minted);\r\n  event MinterApprovalSet(\r\n    address indexed user,\r\n    address indexed minter,\r\n    bool approval\r\n  );\r\n\r\n  function allowed_to_mint_for(address minter, address user)\r\n  external\r\n  view\r\n  returns (bool);\r\n\r\n  function getBalancerToken() external view returns (address);\r\n\r\n  function getBalancerTokenAdmin() external view returns (address);\r\n\r\n  function getDomainSeparator() external view returns (bytes32);\r\n\r\n  function getGaugeController() external view returns (address);\r\n\r\n  function getMinterApproval(address minter, address user)\r\n  external\r\n  view\r\n  returns (bool);\r\n\r\n  function getNextNonce(address user) external view returns (uint256);\r\n\r\n  function mint(address gauge) external returns (uint256);\r\n\r\n  function mintFor(address gauge, address user) external returns (uint256);\r\n\r\n  function mintMany(address[] memory gauges) external returns (uint256);\r\n\r\n  function mintManyFor(address[] memory gauges, address user)\r\n  external\r\n  returns (uint256);\r\n\r\n  function mint_for(address gauge, address user) external;\r\n\r\n  function mint_many(address[8] memory gauges) external;\r\n\r\n  function minted(address user, address gauge)\r\n  external\r\n  view\r\n  returns (uint256);\r\n\r\n  function setMinterApproval(address minter, bool approval) external;\r\n\r\n  function setMinterApprovalWithSignature(\r\n    address minter,\r\n    bool approval,\r\n    address user,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  function toggle_approve_mint(address minter) external;\r\n}\r\n"
    },
    "contracts/integrations/balancer/IBVault.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\n\r\ninterface IAsset {\r\n}\r\n\r\ninterface IBVault {\r\n  // Internal Balance\r\n  //\r\n  // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\r\n  // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\r\n  // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\r\n  // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\r\n  //\r\n  // Internal Balance management features batching, which means a single contract call can be used to perform multiple\r\n  // operations of different kinds, with different senders and recipients, at once.\r\n\r\n  /**\r\n   * @dev Returns `user`'s Internal Balance for a set of tokens.\r\n     */\r\n  function getInternalBalance(address user, IERC20[] calldata tokens) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\r\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\r\n     * it lets integrators reuse a user's Vault allowance.\r\n     *\r\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\r\n     */\r\n  function manageUserBalance(UserBalanceOp[] calldata ops) external payable;\r\n\r\n  /**\r\n   * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\r\n     without manual WETH wrapping or unwrapping.\r\n     */\r\n  struct UserBalanceOp {\r\n    UserBalanceOpKind kind;\r\n    IAsset asset;\r\n    uint256 amount;\r\n    address sender;\r\n    address payable recipient;\r\n  }\r\n\r\n  // There are four possible operations in `manageUserBalance`:\r\n  //\r\n  // - DEPOSIT_INTERNAL\r\n  // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\r\n  // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\r\n  //\r\n  // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\r\n  // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\r\n  // relevant for relayers).\r\n  //\r\n  // Emits an `InternalBalanceChanged` event.\r\n  //\r\n  //\r\n  // - WITHDRAW_INTERNAL\r\n  // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\r\n  //\r\n  // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\r\n  // it to the recipient as ETH.\r\n  //\r\n  // Emits an `InternalBalanceChanged` event.\r\n  //\r\n  //\r\n  // - TRANSFER_INTERNAL\r\n  // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\r\n  //\r\n  // Reverts if the ETH sentinel value is passed.\r\n  //\r\n  // Emits an `InternalBalanceChanged` event.\r\n  //\r\n  //\r\n  // - TRANSFER_EXTERNAL\r\n  // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\r\n  // relayers, as it lets them reuse a user's Vault allowance.\r\n  //\r\n  // Reverts if the ETH sentinel value is passed.\r\n  //\r\n  // Emits an `ExternalBalanceTransfer` event.\r\n\r\n  enum UserBalanceOpKind {DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL}\r\n\r\n  /**\r\n   * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\r\n     * interacting with Pools using Internal Balance.\r\n     *\r\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\r\n     * address.\r\n     */\r\n  event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\r\n\r\n  /**\r\n   * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\r\n     */\r\n  event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\r\n\r\n  // Pools\r\n  //\r\n  // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\r\n  // functionality:\r\n  //\r\n  //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\r\n  // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\r\n  // which increase with the number of registered tokens.\r\n  //\r\n  //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\r\n  // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\r\n  // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\r\n  // independent of the number of registered tokens.\r\n  //\r\n  //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\r\n  // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\r\n\r\n  enum PoolSpecialization {GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN}\r\n\r\n  /**\r\n   * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\r\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\r\n     * changed.\r\n     *\r\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\r\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\r\n     *\r\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\r\n     * multiple Pools may share the same contract.\r\n     *\r\n     * Emits a `PoolRegistered` event.\r\n     */\r\n  function registerPool(PoolSpecialization specialization) external returns (bytes32);\r\n\r\n  /**\r\n   * @dev Emitted when a Pool is registered by calling `registerPool`.\r\n     */\r\n  event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\r\n\r\n  /**\r\n   * @dev Returns a Pool's contract address and specialization setting.\r\n     */\r\n  function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\r\n\r\n  /**\r\n   * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\r\n     * exit by receiving registered tokens, and can only swap registered tokens.\r\n     *\r\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\r\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\r\n     * ascending order.\r\n     *\r\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\r\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\r\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\r\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\r\n     * Asset Manager should not be made lightly.\r\n     *\r\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\r\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\r\n     * different Asset Manager.\r\n     *\r\n     * Emits a `TokensRegistered` event.\r\n     */\r\n  function registerTokens(\r\n    bytes32 poolId,\r\n    IERC20[] calldata tokens,\r\n    address[] calldata assetManagers\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\r\n     */\r\n  event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\r\n\r\n  /**\r\n   * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\r\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\r\n     * must be deregistered in the same `deregisterTokens` call.\r\n     *\r\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\r\n     *\r\n     * Emits a `TokensDeregistered` event.\r\n     */\r\n  function deregisterTokens(bytes32 poolId, IERC20[] calldata tokens) external;\r\n\r\n  /**\r\n   * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\r\n     */\r\n  event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\r\n\r\n  /**\r\n   * @dev Returns detailed information for a Pool's registered token.\r\n     *\r\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\r\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\r\n     * equals the sum of `cash` and `managed`.\r\n     *\r\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\r\n     * `managed` or `total` balance to be greater than 2^112 - 1.\r\n     *\r\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\r\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\r\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\r\n     * change for this purpose, and will update `lastChangeBlock`.\r\n     *\r\n     * `assetManager` is the Pool's token Asset Manager.\r\n     */\r\n  function getPoolTokenInfo(bytes32 poolId, IERC20 token)\r\n  external\r\n  view\r\n  returns (\r\n    uint256 cash,\r\n    uint256 managed,\r\n    uint256 lastChangeBlock,\r\n    address assetManager\r\n  );\r\n\r\n  /**\r\n   * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\r\n     * the tokens' `balances` changed.\r\n     *\r\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\r\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\r\n     *\r\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\r\n     * order as passed to `registerTokens`.\r\n     *\r\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\r\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\r\n     * instead.\r\n     */\r\n  function getPoolTokens(bytes32 poolId)\r\n  external\r\n  view\r\n  returns (\r\n    IERC20[] memory tokens,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock\r\n  );\r\n\r\n  /**\r\n   * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\r\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\r\n     * Pool shares.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\r\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\r\n     * these maximums.\r\n     *\r\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\r\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\r\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\r\n     * back to the caller (not the sender, which is important for relayers).\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\r\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\r\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\r\n     *\r\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\r\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\r\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\r\n     * directly to the Pool's contract, as is `recipient`.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     *\r\n     * See https://dev.balancer.fi/resources/joins-and-exits/pool-joins\r\n     */\r\n  function joinPool(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    JoinPoolRequest calldata request\r\n  ) external payable;\r\n\r\n  enum JoinKind {INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT}\r\n\r\n  /// @notice WeightedPool ExitKinds\r\n  enum ExitKind {EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT}\r\n  /// @notice Composable Stable V2 ExitKinds\r\n  enum ExitKindComposableStable {EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT, EXACT_BPT_IN_FOR_ALL_TOKENS_OUT}\r\n\r\n\r\n  struct JoinPoolRequest {\r\n    IAsset[] assets;\r\n    uint256[] maxAmountsIn;\r\n    bytes userData;\r\n    bool fromInternalBalance;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\r\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\r\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\r\n     * `getPoolTokenInfo`).\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\r\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\r\n     * it just enforces these minimums.\r\n     *\r\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\r\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\r\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\r\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\r\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\r\n     *\r\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\r\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\r\n     * do so will trigger a revert.\r\n     *\r\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\r\n     * `tokens` array. This array must match the Pool's registered tokens.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\r\n     * passed directly to the Pool's contract.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n  function exitPool(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address payable recipient,\r\n    ExitPoolRequest calldata request\r\n  ) external;\r\n\r\n  struct ExitPoolRequest {\r\n    IAsset[] assets;\r\n    uint256[] minAmountsOut;\r\n    bytes userData;\r\n    bool toInternalBalance;\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\r\n     */\r\n  event PoolBalanceChanged(\r\n    bytes32 indexed poolId,\r\n    address indexed liquidityProvider,\r\n    IERC20[] tokens,\r\n    int256[] deltas,\r\n    uint256[] protocolFeeAmounts\r\n  );\r\n\r\n  enum PoolBalanceChangeKind {JOIN, EXIT}\r\n\r\n  // Swaps\r\n  //\r\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\r\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\r\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\r\n  //\r\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\r\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\r\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\r\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\r\n  // individual swaps.\r\n  //\r\n  // There are two swap kinds:\r\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\r\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\r\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\r\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\r\n  //\r\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\r\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\r\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\r\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\r\n  // the final intended token.\r\n  //\r\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\r\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\r\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\r\n  // much less gas than they would otherwise.\r\n  //\r\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\r\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\r\n  // updating the Pool's internal accounting).\r\n  //\r\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\r\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\r\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\r\n  //\r\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\r\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\r\n  //\r\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\r\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\r\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\r\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\r\n  //\r\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\r\n\r\n  enum SwapKind {GIVEN_IN, GIVEN_OUT}\r\n\r\n  /**\r\n   * @dev Performs a swap with a single Pool.\r\n     *\r\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\r\n     * taken from the Pool, which must be greater than or equal to `limit`.\r\n     *\r\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\r\n     * sent to the Pool, which must be less than or equal to `limit`.\r\n     *\r\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\r\n     *\r\n     * Emits a `Swap` event.\r\n     */\r\n  function swap(\r\n    SingleSwap calldata singleSwap,\r\n    FundManagement calldata funds,\r\n    uint256 limit,\r\n    uint256 deadline\r\n  ) external payable returns (uint256);\r\n\r\n  /**\r\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\r\n     * the `kind` value.\r\n     *\r\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\r\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n  struct SingleSwap {\r\n    bytes32 poolId;\r\n    SwapKind kind;\r\n    IAsset assetIn;\r\n    IAsset assetOut;\r\n    uint256 amount;\r\n    bytes userData;\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\r\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\r\n     *\r\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\r\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\r\n     * the same index in the `assets` array.\r\n     *\r\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\r\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\r\n     * `amountOut` depending on the swap kind.\r\n     *\r\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\r\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\r\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\r\n     *\r\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\r\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\r\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\r\n     * or unwrapped from WETH by the Vault.\r\n     *\r\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\r\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\r\n     *\r\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\r\n     * equivalent `swap` call.\r\n     *\r\n     * Emits `Swap` events.\r\n     */\r\n  function batchSwap(\r\n    SwapKind kind,\r\n    BatchSwapStep[] calldata swaps,\r\n    IAsset[] calldata assets,\r\n    FundManagement calldata funds,\r\n    int256[] calldata limits,\r\n    uint256 deadline\r\n  ) external payable returns (int256[] memory);\r\n\r\n  /**\r\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\r\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\r\n     *\r\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\r\n     * from the previous swap, depending on the swap kind.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n  struct BatchSwapStep {\r\n    bytes32 poolId;\r\n    uint256 assetInIndex;\r\n    uint256 assetOutIndex;\r\n    uint256 amount;\r\n    bytes userData;\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\r\n     */\r\n  event Swap(\r\n    bytes32 indexed poolId,\r\n    IERC20 indexed tokenIn,\r\n    IERC20 indexed tokenOut,\r\n    uint256 amountIn,\r\n    uint256 amountOut\r\n  );\r\n\r\n  /**\r\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\r\n     * `recipient` account.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\r\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\r\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\r\n     * `joinPool`.\r\n     *\r\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\r\n     * transferred. This matches the behavior of `exitPool`.\r\n     *\r\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\r\n     * revert.\r\n     */\r\n  struct FundManagement {\r\n    address sender;\r\n    bool fromInternalBalance;\r\n    address payable recipient;\r\n    bool toInternalBalance;\r\n  }\r\n\r\n  /**\r\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\r\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\r\n     *\r\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\r\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\r\n     * receives are the same that an equivalent `batchSwap` call would receive.\r\n     *\r\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\r\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\r\n     * approve them for the Vault, or even know a user's address.\r\n     *\r\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\r\n     * eth_call instead of eth_sendTransaction.\r\n     */\r\n  function queryBatchSwap(\r\n    SwapKind kind,\r\n    BatchSwapStep[] calldata swaps,\r\n    IAsset[] calldata assets,\r\n    FundManagement calldata funds\r\n  ) external returns (int256[] memory assetDeltas);\r\n\r\n  // BasePool.sol\r\n\r\n  /**\r\n* @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\r\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\r\n     *\r\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\r\n     * data, such as the protocol swap fee percentage and Pool balances.\r\n     *\r\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\r\n     * explicitly use eth_call instead of eth_sendTransaction.\r\n     */\r\n  function queryExit(\r\n    bytes32 poolId,\r\n    address sender,\r\n    address recipient,\r\n    uint256[] memory balances,\r\n    uint256 lastChangeBlock,\r\n    uint256 protocolSwapFeePercentage,\r\n    bytes memory userData\r\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\r\n\r\n\r\n}\r\n"
    },
    "contracts/integrations/balancer/IChildChainLiquidityGaugeFactory.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\n/// @notice ChildChainLiquidityGaugeFactory, restored for 0x3b8cA519122CdD8efb272b0D3085453404B25bD0\r\n/// @dev See https://dev.balancer.fi/resources/vebal-and-gauges/gauges\r\ninterface IChildChainLiquidityGaugeFactory {\r\n  event RewardsOnlyGaugeCreated(\r\n    address indexed gauge,\r\n    address indexed pool,\r\n    address streamer\r\n  );\r\n\r\n  function create(address pool) external returns (address);\r\n\r\n  function getChildChainStreamerImplementation() external view returns (address);\r\n\r\n  function getGaugeImplementation() external view returns (address);\r\n\r\n  function getGaugePool(address gauge) external view returns (address);\r\n\r\n  function getGaugeStreamer(address gauge) external view returns (address);\r\n\r\n  function getPoolGauge(address pool) external view returns (address);\r\n\r\n  function getPoolStreamer(address pool) external view returns (address);\r\n\r\n  function isGaugeFromFactory(address gauge) external view returns (bool);\r\n\r\n  function isStreamerFromFactory(address streamer) external view returns (bool);\r\n}\r\n\r\n"
    },
    "contracts/integrations/balancer/IChildChainStreamer.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\ninterface IChildChainStreamer {\r\n\r\n  function add_reward(\r\n    address _token,\r\n    address _distributor,\r\n    uint256 _duration\r\n  ) external;\r\n\r\n  function remove_reward(address _token, address _recipient) external;\r\n\r\n  function get_reward() external;\r\n\r\n  function notify_reward_amount(address _token) external;\r\n\r\n  function set_reward_duration(address _token, uint256 _duration) external;\r\n\r\n  function set_reward_distributor(address _token, address _distributor) external;\r\n\r\n  function reward_receiver() external view returns (address);\r\n\r\n  function reward_tokens(uint256 arg0) external view returns (address);\r\n\r\n  function reward_count() external view returns (uint256);\r\n\r\n  function reward_data(address arg0) external view returns (\r\n    address distributor,\r\n    uint256 period_finish,\r\n    uint256 rate,\r\n    uint256 duration,\r\n    uint256 received,\r\n    uint256 paid\r\n  );\r\n\r\n  function last_update_time() external view returns (uint256);\r\n}"
    },
    "contracts/integrations/balancer/IComposableStablePool.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\ninterface IComposableStablePool {\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function getActualSupply() external view returns (uint256);\r\n  function getPoolId() external view returns (bytes32);\r\n  function getBptIndex() external view returns (uint256);\r\n  function updateTokenRateCache(address token) external;\r\n}"
    },
    "contracts/integrations/balancer/ILinearPool.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\ninterface ILinearPool {\r\n  function getPoolId() external view returns (bytes32);\r\n\r\n  function getMainIndex() external view returns (uint);\r\n\r\n  function getMainToken() external view returns (address);\r\n\r\n  function getWrappedIndex() external view returns (uint);\r\n\r\n  function getWrappedToken() external view returns (address);\r\n\r\n  function getWrappedTokenRate() external view returns (uint);\r\n\r\n  function getRate() external view returns (uint);\r\n\r\n  function getBptIndex() external pure returns (uint);\r\n\r\n  function getVirtualSupply() external view returns (uint);\r\n\r\n  function getSwapFeePercentage() external view returns (uint);\r\n\r\n  function getTargets() external view returns (uint lowerTarget, uint upperTarget);\r\n\r\n  function totalSupply() external view returns (uint);\r\n\r\n  function getScalingFactors() external view returns (uint[] memory);\r\n}"
    },
    "contracts/integrations/balancer/ILinearPoolRebalancer.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\ninterface ILinearPoolRebalancer {\r\n  function getPool() external view returns (address);\r\n  function rebalance(address recipient) external returns (uint256);\r\n  function rebalanceWithExtraMain(address recipient, uint256 extraMain) external returns (uint256);\r\n}"
    },
    "contracts/integrations/balancer/ILinearPoolSimple.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\ninterface ILinearPoolSimple{\r\n  function getMainToken() external view returns (address);\r\n  function getWrappedToken() external view returns (address);\r\n  function getPoolId() external view returns (bytes32);\r\n  function getVault() external view returns (address);\r\n  function getTargets() external view returns (uint256 lowerTarget, uint256 upperTarget);\r\n  function getMainIndex() external view returns (uint256);\r\n  function getWrappedIndex() external view returns (uint256);\r\n\r\n}"
    },
    "contracts/integrations/balancer/IPoolSwapStructs.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\ninterface IPoolSwapStructs {\r\n  struct SwapRequest {\r\n    uint8 kind;\r\n    address tokenIn;\r\n    address tokenOut;\r\n    uint256 amount;\r\n    bytes32 poolId;\r\n    uint256 lastChangeBlock;\r\n    address from;\r\n    address to;\r\n    bytes userData;\r\n  }\r\n}"
    },
    "contracts/integrations/balancer/IRateProvider.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\ninterface IRateProvider {\r\n  /**\r\n   * @dev Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying\r\n     * token. The meaning of this rate depends on the context.\r\n     */\r\n  function getRate() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/integrations/IWmatic.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWmatic {\r\n\r\n  function balanceOf(address target) external view returns (uint256);\r\n\r\n  function deposit() external payable;\r\n\r\n  function withdraw(uint256 wad) external;\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function approve(address guy, uint256 wad) external returns (bool);\r\n\r\n  function transfer(address dst, uint256 wad) external returns (bool);\r\n\r\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\r\n\r\n}\r\n"
    },
    "contracts/integrations/keom/IKeomApi3Server.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IKeomApi3Server {\r\n  function readDataFeedWithId(bytes32 dataFeedId) external view returns (int224 value, uint32 timestamp);\r\n}"
    },
    "contracts/integrations/keom/IKeomComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Restored from 0xc145700AC0d8A59B1f64DcE35687dD7CA2BEB26A, events were removed\r\ninterface IKeomComptroller {\r\n  function _become(address unitroller) external;\r\n  function _borrowGuardianPaused() external view returns (bool);\r\n  function _grantReward(address recipient, uint256 amount) external;\r\n  function _mintGuardianPaused() external view returns (bool);\r\n  function _setBorrowPaused(address kToken, bool state) external returns (bool);\r\n\r\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external  returns (uint256);\r\n\r\n  function _setCollateralFactor(address kToken, uint256 newCollateralFactorMantissa) external returns (uint256);\r\n\r\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\r\n\r\n  function _setMarketBorrowCaps(address[] memory kTokens, uint256[] memory newBorrowCaps) external;\r\n\r\n  function _setMarketSupplyCaps(address[] memory kTokens, uint256[] memory newSupplyCaps) external;\r\n\r\n  function _setMintPaused(address kToken, bool state) external returns (bool);\r\n\r\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\r\n\r\n  function _setPriceOracle(address newOracle) external returns (uint256);\r\n\r\n  function _setRedeemPaused(address kToken, bool state) external returns (bool);\r\n\r\n  function _setRepayPaused(address kToken, bool state) external returns (bool);\r\n\r\n  function _setRewardSpeeds(address[] memory kTokens, uint256[] memory supplySpeeds, uint256[] memory borrowSpeeds) external;\r\n\r\n  function _setSeizePaused(bool state) external returns (bool);\r\n\r\n  function _setTransferPaused(bool state) external returns (bool);\r\n\r\n  function _supportMarket(address kToken, bool _autoCollaterize) external returns (uint256);\r\n\r\n  function accountAssets(address, uint256) external view returns (address);\r\n\r\n  function accountMembership(address, address) external view returns (bool);\r\n\r\n  function admin() external view returns (address);\r\n\r\n  function allMarkets(uint256) external view returns (address);\r\n\r\n  function boostManager() external view returns (address);\r\n\r\n  function borrowAllowed(address kToken, address borrower, uint256 borrowAmount) external returns (uint256);\r\n\r\n  function borrowCaps(address) external view returns (uint256);\r\n\r\n  function borrowState(address) external view returns (uint224 index, uint32 timestamp);\r\n\r\n  function capGuardian() external view returns (address);\r\n\r\n  function checkMembership(address account, address kToken) external view returns (bool);\r\n\r\n  function closeFactorMantissa() external view returns (uint256);\r\n\r\n  function compRate() external view returns (uint256);\r\n\r\n  function comptrollerImplementation() external view returns (address);\r\n\r\n  function enterMarkets(address[] memory kTokens) external returns (uint256[] memory);\r\n\r\n  function exitMarket(address kTokenAddress) external returns (uint256);\r\n\r\n  function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\r\n\r\n  function getAllMarkets() external view returns (address[] memory);\r\n\r\n  function getAssetsIn(address account) external view returns (address[] memory);\r\n\r\n  function getBoostManager() external view returns (address);\r\n\r\n  function getHypotheticalAccountLiquidity(address account, address kTokenModify, uint256 redeemTokens, uint256 borrowAmount)\r\n  external view returns (uint256, uint256, uint256, uint256);\r\n\r\n  function getKeomAddress() external view returns (address);\r\n\r\n  function getTimestamp() external view returns (uint256);\r\n\r\n  function guardianPaused(address) external view returns (bool mint, bool borrow, bool redeem, bool repay);\r\n\r\n  function isComptroller() external view returns (bool);\r\n\r\n  function isDeprecated(address kToken) external view returns (bool);\r\n\r\n  function isMarket(address kToken) external view returns (bool);\r\n\r\n  function keom() external view returns (address);\r\n\r\n  function lastContributorTimestamp(address) external view returns (uint256);\r\n\r\n  function liquidateBorrowAllowed(address kTokenBorrowed, address kTokenCollateral, address liquidator, address borrower, uint256 repayAmount) external view returns (uint256, uint256);\r\n\r\n  function liquidateCalculateSeizeTokens(address kTokenBorrowed, address kTokenCollateral, uint256 actualRepayAmount, uint256 dynamicLiquidationIncentive) external view returns (uint256, uint256);\r\n\r\n  function liquidationIncentiveMantissa() external view returns (uint256);\r\n\r\n  function marketInitialIndex() external view returns (uint224);\r\n\r\n  function markets(address) external view returns (bool isListed, bool autoCollaterize, uint256 collateralFactorMantissa);\r\n\r\n  function maxAssets() external view returns (uint256);\r\n\r\n  function mintAllowed(address kToken, address minter, uint256 mintAmount) external returns (uint256);\r\n\r\n  function oracle() external view returns (address);\r\n\r\n  function pauseGuardian() external view returns (address);\r\n\r\n  function pendingAdmin() external view returns (address);\r\n\r\n  function pendingComptrollerImplementation() external view returns (address);\r\n\r\n  function redeemAllowed(address kToken, address redeemer, uint256 redeemTokens) external returns (uint256);\r\n\r\n  function redeemVerify(address kToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external pure;\r\n\r\n  function repayBorrowAllowed(address kToken, address payer, address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n  function rewardAccrued(address) external view returns (uint256);\r\n\r\n  function rewardBorrowSpeeds(address) external view returns (uint256);\r\n\r\n  function rewardBorrowerIndex(address, address) external view returns (uint256);\r\n\r\n  function rewardContributorSpeeds(address) external view returns (uint256);\r\n\r\n  function rewardManager() external view returns (address);\r\n\r\n  function rewardReceivable(address) external view returns (uint256);\r\n\r\n  function rewardSpeeds(address) external view returns (uint256);\r\n\r\n  function rewardSupplierIndex(address, address) external view returns (uint256);\r\n\r\n  function rewardSupplySpeeds(address) external view returns (uint256);\r\n\r\n  function rewardUpdater() external view returns (address);\r\n\r\n  function seizeAllowed(address kTokenCollateral, address kTokenBorrowed, address liquidator, address borrower, uint256 seizeTokens) external returns (uint256);\r\n\r\n  function seizeGuardianPaused() external view returns (bool);\r\n\r\n  function setAutoCollaterize(address market, bool flag) external;\r\n\r\n  function setBoostManager(address newBoostManager) external;\r\n\r\n  function setKeomAddress(address newKeomAddress) external;\r\n\r\n  function setProtocolPaused(bool _paused) external;\r\n\r\n  function setRewardUpdater(address _rewardUpdater) external;\r\n\r\n  function supplyCaps(address) external view returns (uint256);\r\n\r\n  function supplyState(address) external view returns (uint224 index, uint32 timestamp);\r\n\r\n  function transferAllowed(address kToken, address src, address dst, uint256 transferTokens) external returns (uint256);\r\n\r\n  function transferGuardianPaused() external view returns (bool);\r\n\r\n  function updateAndDistributeBorrowerRewardsForToken(address kToken, address borrower) external;\r\n\r\n  function updateAndDistributeSupplierRewardsForToken(address kToken, address account) external;\r\n\r\n  function updateContributorRewards(address contributor) external;\r\n\r\n  receive() external payable;\r\n}"
    },
    "contracts/integrations/keom/IKeomPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Restored from 0x19194261d8f0599Bd079C52623C80C5150f010cF, events were removed\r\ninterface IKeomPriceOracle {\r\n  function api3() external view returns (address);\r\n\r\n  function api3Server() external view returns (address);\r\n\r\n  function feeds(address) external view returns (bytes32);\r\n\r\n  function getUnderlyingPrice(address kToken) external view returns (uint256 price);\r\n\r\n  function heartbeats(bytes32) external view returns (uint256);\r\n\r\n  function isPriceOracle() external view returns (bool);\r\n\r\n  function kNative() external view returns (address);\r\n\r\n  function owner() external view returns (address);\r\n\r\n  function renounceOwnership() external;\r\n\r\n  function setHeartbeat(address kToken, uint256 heartbeat) external;\r\n\r\n  function setKNative(address _kNative) external;\r\n\r\n  function setTokenId(address _kToken, bytes32 _tokenId, uint256 _heartbeat) external;\r\n\r\n  function transferOwnership(address newOwner) external;\r\n\r\n  function updateUnderlyingPrices(bytes[] memory) external pure;\r\n}\r\n"
    },
    "contracts/integrations/kyber/base_position_manager/IBasePositionManagerEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IBasePositionManagerEvents {\r\n  /// @notice Emitted when a token is minted for a given position\r\n  /// @param tokenId the newly minted tokenId\r\n  /// @param poolId poolId of the token\r\n  /// @param liquidity liquidity minted to the position range\r\n  /// @param amount0 token0 quantity needed to mint the liquidity\r\n  /// @param amount1 token1 quantity needed to mint the liquidity\r\n  event MintPosition(\r\n    uint256 indexed tokenId,\r\n    uint80 indexed poolId,\r\n    uint128 liquidity,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  );\r\n\r\n  /// @notice Emitted when a token is burned\r\n  /// @param tokenId id of the token\r\n  event BurnPosition(uint256 indexed tokenId);\r\n\r\n  /// @notice Emitted when add liquidity\r\n  /// @param tokenId id of the token\r\n  /// @param liquidity the increase amount of liquidity\r\n  /// @param amount0 token0 quantity needed to increase liquidity\r\n  /// @param amount1 token1 quantity needed to increase liquidity\r\n  /// @param additionalRTokenOwed additional rToken earned\r\n  event AddLiquidity(\r\n    uint256 indexed tokenId,\r\n    uint128 liquidity,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    uint256 additionalRTokenOwed\r\n  );\r\n\r\n  /// @notice Emitted when remove liquidity\r\n  /// @param tokenId id of the token\r\n  /// @param liquidity the decease amount of liquidity\r\n  /// @param amount0 token0 quantity returned when remove liquidity\r\n  /// @param amount1 token1 quantity returned when remove liquidity\r\n  /// @param additionalRTokenOwed additional rToken earned\r\n  event RemoveLiquidity(\r\n    uint256 indexed tokenId,\r\n    uint128 liquidity,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    uint256 additionalRTokenOwed\r\n  );\r\n\r\n  /// @notice Emitted when burn position's RToken\r\n  /// @param tokenId id of the token\r\n  /// @param rTokenBurn amount of position's RToken burnt\r\n  event BurnRToken(uint256 indexed tokenId, uint256 rTokenBurn);\r\n\r\n  /// @notice Emitted when sync fee growth\r\n  /// @param tokenId id of the token\r\n  /// @param additionalRTokenOwed additional rToken earned\r\n  event SyncFeeGrowth(uint256 indexed tokenId, uint256 additionalRTokenOwed);\r\n}\r\n"
    },
    "contracts/integrations/kyber/IBasePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\r\nimport {IRouterTokenHelper} from './IRouterTokenHelper.sol';\r\nimport {IBasePositionManagerEvents} from './base_position_manager/IBasePositionManagerEvents.sol';\r\n\r\ninterface IBasePositionManager is IRouterTokenHelper, IBasePositionManagerEvents {\r\n  struct Position {\r\n    // the nonce for permits\r\n    uint96 nonce;\r\n    // the address that is approved for spending this token\r\n    address operator;\r\n    // the ID of the pool with which this token is connected\r\n    uint80 poolId;\r\n    // the tick range of the position\r\n    int24 tickLower;\r\n    int24 tickUpper;\r\n    // the liquidity of the position\r\n    uint128 liquidity;\r\n    // the current rToken that the position owed\r\n    uint256 rTokenOwed;\r\n    // fee growth per unit of liquidity as of the last update to liquidity\r\n    uint256 feeGrowthInsideLast;\r\n  }\r\n\r\n  struct PoolInfo {\r\n    address token0;\r\n    uint24 fee;\r\n    address token1;\r\n  }\r\n\r\n  /// @notice Params for the first time adding liquidity, mint new nft to sender\r\n  /// @param token0 the token0 of the pool\r\n  /// @param token1 the token1 of the pool\r\n  ///   - must make sure that token0 < token1\r\n  /// @param fee the pool's fee in fee units\r\n  /// @param tickLower the position's lower tick\r\n  /// @param tickUpper the position's upper tick\r\n  ///   - must make sure tickLower < tickUpper, and both are in tick distance\r\n  /// @param ticksPrevious the nearest tick that has been initialized and lower than or equal to\r\n  ///   the tickLower and tickUpper, use to help insert the tickLower and tickUpper if haven't initialized\r\n  /// @param amount0Desired the desired amount for token0\r\n  /// @param amount1Desired the desired amount for token1\r\n  /// @param amount0Min min amount of token 0 to add\r\n  /// @param amount1Min min amount of token 1 to add\r\n  /// @param recipient the owner of the position\r\n  /// @param deadline time that the transaction will be expired\r\n  struct MintParams {\r\n    address token0;\r\n    address token1;\r\n    uint24 fee;\r\n    int24 tickLower;\r\n    int24 tickUpper;\r\n    int24[2] ticksPrevious;\r\n    uint256 amount0Desired;\r\n    uint256 amount1Desired;\r\n    uint256 amount0Min;\r\n    uint256 amount1Min;\r\n    address recipient;\r\n    uint256 deadline;\r\n  }\r\n\r\n  /// @notice Params for adding liquidity to the existing position\r\n  /// @param tokenId id of the position to increase its liquidity\r\n  /// @param ticksPrevious the nearest tick that has been initialized and lower than or equal to\r\n  ///   the tickLower and tickUpper, use to help insert the tickLower and tickUpper if haven't initialized\r\n  ///   only needed if the position has been closed and the owner wants to add more liquidity\r\n  /// @param amount0Desired the desired amount for token0\r\n  /// @param amount1Desired the desired amount for token1\r\n  /// @param amount0Min min amount of token 0 to add\r\n  /// @param amount1Min min amount of token 1 to add\r\n  /// @param deadline time that the transaction will be expired\r\n  struct IncreaseLiquidityParams {\r\n    uint256 tokenId;\r\n    int24[2] ticksPrevious;\r\n    uint256 amount0Desired;\r\n    uint256 amount1Desired;\r\n    uint256 amount0Min;\r\n    uint256 amount1Min;\r\n    uint256 deadline;\r\n  }\r\n\r\n  /// @notice Params for remove liquidity from the existing position\r\n  /// @param tokenId id of the position to remove its liquidity\r\n  /// @param amount0Min min amount of token 0 to receive\r\n  /// @param amount1Min min amount of token 1 to receive\r\n  /// @param deadline time that the transaction will be expired\r\n  struct RemoveLiquidityParams {\r\n    uint256 tokenId;\r\n    uint128 liquidity;\r\n    uint256 amount0Min;\r\n    uint256 amount1Min;\r\n    uint256 deadline;\r\n  }\r\n\r\n  /// @notice Burn the rTokens to get back token0 + token1 as fees\r\n  /// @param tokenId id of the position to burn r token\r\n  /// @param amount0Min min amount of token 0 to receive\r\n  /// @param amount1Min min amount of token 1 to receive\r\n  /// @param deadline time that the transaction will be expired\r\n  struct BurnRTokenParams {\r\n    uint256 tokenId;\r\n    uint256 amount0Min;\r\n    uint256 amount1Min;\r\n    uint256 deadline;\r\n  }\r\n\r\n  /// @notice Creates a new pool if it does not exist, then unlocks if it has not been unlocked\r\n  /// @param token0 the token0 of the pool\r\n  /// @param token1 the token1 of the pool\r\n  /// @param fee the fee for the pool\r\n  /// @param currentSqrtP the initial price of the pool\r\n  /// @return pool returns the pool address\r\n  function createAndUnlockPoolIfNecessary(\r\n    address token0,\r\n    address token1,\r\n    uint24 fee,\r\n    uint160 currentSqrtP\r\n  ) external payable returns (address pool);\r\n\r\n  function mint(MintParams calldata params)\r\n    external\r\n    payable\r\n    returns (\r\n      uint256 tokenId,\r\n      uint128 liquidity,\r\n      uint256 amount0,\r\n      uint256 amount1\r\n    );\r\n\r\n  function addLiquidity(IncreaseLiquidityParams calldata params)\r\n    external\r\n    payable\r\n    returns (\r\n      uint128 liquidity,\r\n      uint256 amount0,\r\n      uint256 amount1,\r\n      uint256 additionalRTokenOwed\r\n    );\r\n\r\n  function removeLiquidity(RemoveLiquidityParams calldata params)\r\n    external\r\n    returns (\r\n      uint256 amount0,\r\n      uint256 amount1,\r\n      uint256 additionalRTokenOwed\r\n    );\r\n\r\n  function burnRTokens(BurnRTokenParams calldata params)\r\n    external\r\n    returns (\r\n      uint256 rTokenQty,\r\n      uint256 amount0,\r\n      uint256 amount1\r\n    );\r\n\r\n  /**\r\n   * @dev Burn the token by its owner\r\n   * @notice All liquidity should be removed before burning\r\n   */\r\n  function burn(uint256 tokenId) external payable;\r\n\r\n  function syncFeeGrowth(uint256 tokenId) external returns (uint256 additionalRTokenOwed);\r\n\r\n  function positions(uint256 tokenId)\r\n    external\r\n    view\r\n    returns (Position memory pos, PoolInfo memory info);\r\n\r\n  function addressToPoolId(address pool) external view returns (uint80);\r\n\r\n  function isRToken(address token) external view returns (bool);\r\n\r\n  function nextPoolId() external view returns (uint80);\r\n\r\n  function nextTokenId() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30 000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/integrations/kyber/IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @title KyberSwap v2 factory\r\n/// @notice Deploys KyberSwap v2 pools and manages control over government fees\r\ninterface IFactory {\r\n  /// @notice Emitted when a pool is created\r\n  /// @param token0 First pool token by address sort order\r\n  /// @param token1 Second pool token by address sort order\r\n  /// @param swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\r\n  /// @param tickDistance Minimum number of ticks between initialized ticks\r\n  /// @param pool The address of the created pool\r\n  event PoolCreated(\r\n    address indexed token0,\r\n    address indexed token1,\r\n    uint24 indexed swapFeeUnits,\r\n    int24 tickDistance,\r\n    address pool\r\n  );\r\n\r\n  /// @notice Emitted when a new fee is enabled for pool creation via the factory\r\n  /// @param swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\r\n  /// @param tickDistance Minimum number of ticks between initialized ticks for pools created with the given fee\r\n  event SwapFeeEnabled(uint24 indexed swapFeeUnits, int24 indexed tickDistance);\r\n\r\n  /// @notice Emitted when vesting period changes\r\n  /// @param vestingPeriod The maximum time duration for which LP fees\r\n  /// are proportionally burnt upon LP removals\r\n  event VestingPeriodUpdated(uint32 vestingPeriod);\r\n\r\n  /// @notice Emitted when configMaster changes\r\n  /// @param oldConfigMaster configMaster before the update\r\n  /// @param newConfigMaster configMaster after the update\r\n  event ConfigMasterUpdated(address oldConfigMaster, address newConfigMaster);\r\n\r\n  /// @notice Emitted when fee configuration changes\r\n  /// @param feeTo Recipient of government fees\r\n  /// @param governmentFeeUnits Fee amount, in fee units,\r\n  /// to be collected out of the fee charged for a pool swap\r\n  event FeeConfigurationUpdated(address feeTo, uint24 governmentFeeUnits);\r\n\r\n  /// @notice Emitted when whitelist feature is enabled\r\n  event WhitelistEnabled();\r\n\r\n  /// @notice Emitted when whitelist feature is disabled\r\n  event WhitelistDisabled();\r\n\r\n  /// @notice Returns the maximum time duration for which LP fees\r\n  /// are proportionally burnt upon LP removals\r\n  function vestingPeriod() external view returns (uint32);\r\n\r\n  /// @notice Returns the tick distance for a specified fee.\r\n  /// @dev Once added, cannot be updated or removed.\r\n  /// @param swapFeeUnits Swap fee, in fee units.\r\n  /// @return The tick distance. Returns 0 if fee has not been added.\r\n  function feeAmountTickDistance(uint24 swapFeeUnits) external view returns (int24);\r\n\r\n  /// @notice Returns the address which can update the fee configuration\r\n  function configMaster() external view returns (address);\r\n\r\n  /// @notice Returns the keccak256 hash of the Pool creation code\r\n  /// This is used for pre-computation of pool addresses\r\n  function poolInitHash() external view returns (bytes32);\r\n\r\n  /// @notice Returns the pool oracle contract for twap\r\n  function poolOracle() external view returns (address);\r\n\r\n  /// @notice Fetches the recipient of government fees\r\n  /// and current government fee charged in fee units\r\n  function feeConfiguration() external view returns (address _feeTo, uint24 _governmentFeeUnits);\r\n\r\n  /// @notice Returns the status of whitelisting feature of NFT managers\r\n  /// If true, anyone can mint liquidity tokens\r\n  /// Otherwise, only whitelisted NFT manager(s) are allowed to mint liquidity tokens\r\n  function whitelistDisabled() external view returns (bool);\r\n\r\n  //// @notice Returns all whitelisted NFT managers\r\n  /// If the whitelisting feature is turned on,\r\n  /// only whitelisted NFT manager(s) are allowed to mint liquidity tokens\r\n  function getWhitelistedNFTManagers() external view returns (address[] memory);\r\n\r\n  /// @notice Checks if sender is a whitelisted NFT manager\r\n  /// If the whitelisting feature is turned on,\r\n  /// only whitelisted NFT manager(s) are allowed to mint liquidity tokens\r\n  /// @param sender address to be checked\r\n  /// @return true if sender is a whistelisted NFT manager, false otherwise\r\n  function isWhitelistedNFTManager(address sender) external view returns (bool);\r\n\r\n  /// @notice Returns the pool address for a given pair of tokens and a swap fee\r\n  /// @dev Token order does not matter\r\n  /// @param tokenA Contract address of either token0 or token1\r\n  /// @param tokenB Contract address of the other token\r\n  /// @param swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\r\n  /// @return pool The pool address. Returns null address if it does not exist\r\n  function getPool(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint24 swapFeeUnits\r\n  ) external view returns (address pool);\r\n\r\n  /// @notice Fetch parameters to be used for pool creation\r\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\r\n  /// @return factory The factory address\r\n  /// @return poolOracle The pool oracle for twap\r\n  /// @return token0 First pool token by address sort order\r\n  /// @return token1 Second pool token by address sort order\r\n  /// @return swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\r\n  /// @return tickDistance Minimum number of ticks between initialized ticks\r\n  function parameters()\r\n    external\r\n    view\r\n    returns (\r\n      address factory,\r\n      address poolOracle,\r\n      address token0,\r\n      address token1,\r\n      uint24 swapFeeUnits,\r\n      int24 tickDistance\r\n    );\r\n\r\n  /// @notice Creates a pool for the given two tokens and fee\r\n  /// @param tokenA One of the two tokens in the desired pool\r\n  /// @param tokenB The other of the two tokens in the desired pool\r\n  /// @param swapFeeUnits Desired swap fee for the pool, in fee units\r\n  /// @dev Token order does not matter. tickDistance is determined from the fee.\r\n  /// Call will revert under any of these conditions:\r\n  ///     1) pool already exists\r\n  ///     2) invalid swap fee\r\n  ///     3) invalid token arguments\r\n  /// @return pool The address of the newly created pool\r\n  function createPool(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint24 swapFeeUnits\r\n  ) external returns (address pool);\r\n\r\n  /// @notice Enables a fee amount with the given tickDistance\r\n  /// @dev Fee amounts may never be removed once enabled\r\n  /// @param swapFeeUnits The fee amount to enable, in fee units\r\n  /// @param tickDistance The distance between ticks to be enforced for all pools created with the given fee amount\r\n  function enableSwapFee(uint24 swapFeeUnits, int24 tickDistance) external;\r\n\r\n  /// @notice Updates the address which can update the fee configuration\r\n  /// @dev Must be called by the current configMaster\r\n  function updateConfigMaster(address) external;\r\n\r\n  /// @notice Updates the vesting period\r\n  /// @dev Must be called by the current configMaster\r\n  function updateVestingPeriod(uint32) external;\r\n\r\n  /// @notice Updates the address receiving government fees and fee quantity\r\n  /// @dev Only configMaster is able to perform the update\r\n  /// @param feeTo Address to receive government fees collected from pools\r\n  /// @param governmentFeeUnits Fee amount, in fee units,\r\n  /// to be collected out of the fee charged for a pool swap\r\n  function updateFeeConfiguration(address feeTo, uint24 governmentFeeUnits) external;\r\n\r\n  /// @notice Enables the whitelisting feature\r\n  /// @dev Only configMaster is able to perform the update\r\n  function enableWhitelist() external;\r\n\r\n  /// @notice Disables the whitelisting feature\r\n  /// @dev Only configMaster is able to perform the update\r\n  function disableWhitelist() external;\r\n}\r\n"
    },
    "contracts/integrations/kyber/IKyberQuoterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n///@notice Restored from 0x4d47fd5a29904Dae0Ef51b1c450C9750F15D7856\r\ninterface IKyberQuoterV2 {\r\n    struct QuoteExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amountIn;\r\n        uint24 feeUnits;\r\n        uint160 limitSqrtP;\r\n    }\r\n\r\n    struct QuoteOutput {\r\n        uint256 usedAmount;\r\n        uint256 returnedAmount;\r\n        uint160 afterSqrtP;\r\n        uint32 initializedTicksCrossed;\r\n        uint256 gasEstimate;\r\n    }\r\n\r\n    struct QuoteExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amount;\r\n        uint24 feeUnits;\r\n        uint160 limitSqrtP;\r\n    }\r\n\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function quoteExactInput(bytes memory path, uint256 amountIn)\r\n    external\r\n    returns (\r\n        uint256 amountOut,\r\n        uint160[] memory afterSqrtPList,\r\n        uint32[] memory initializedTicksCrossedList,\r\n        uint256 gasEstimate\r\n    );\r\n\r\n    function quoteExactInputSingle(\r\n        QuoteExactInputSingleParams memory params\r\n    ) external returns (QuoteOutput memory output);\r\n\r\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\r\n    external\r\n    returns (\r\n        uint256 amountIn,\r\n        uint160[] memory afterSqrtPList,\r\n        uint32[] memory initializedTicksCrossedList,\r\n        uint256 gasEstimate\r\n    );\r\n\r\n    function quoteExactOutputSingle(\r\n        QuoteExactOutputSingleParams memory params\r\n    ) external returns (QuoteOutput memory output);\r\n\r\n    function swapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes memory path\r\n    ) external view;\r\n}\r\n"
    },
    "contracts/integrations/kyber/IKyberSwapElasticLM.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\r\n\r\ninterface IKyberSwapElasticLM {\r\n  struct RewardData {\r\n    address rewardToken;\r\n    uint256 rewardUnclaimed;\r\n  }\r\n\r\n  struct LMPoolInfo {\r\n    address poolAddress;\r\n    uint32 startTime;\r\n    uint32 endTime;\r\n    uint256 totalSecondsClaimed; // scaled by (1 << 96)\r\n    RewardData[] rewards;\r\n    uint256 feeTarget;\r\n    uint256 numStakes;\r\n  }\r\n\r\n  struct PositionInfo {\r\n    address owner;\r\n    uint256 liquidity;\r\n  }\r\n\r\n  struct StakeInfo {\r\n    uint128 secondsPerLiquidityLast;\r\n    uint256[] rewardLast;\r\n    uint256[] rewardPending;\r\n    uint256[] rewardHarvested;\r\n    int256 feeFirst;\r\n    uint256 liquidity;\r\n  }\r\n\r\n  // input data in harvestMultiplePools function\r\n  struct HarvestData {\r\n    uint256[] pIds;\r\n  }\r\n\r\n  // avoid stack too deep error\r\n  struct RewardCalculationData {\r\n    uint128 secondsPerLiquidityNow;\r\n    int256 feeNow;\r\n    uint256 vestingVolume;\r\n    uint256 totalSecondsUnclaimed;\r\n    uint256 secondsPerLiquidity;\r\n    uint256 secondsClaim; // scaled by (1 << 96)\r\n  }\r\n\r\n  // nftId => Position info\r\n  function positions(uint nftId) external view returns (PositionInfo memory);\r\n\r\n  function admin() external view returns(address);\r\n\r\n  function updateOperator(address user, bool grantOrRevoke) external;\r\n\r\n  /**\r\n   * @dev Add new pool to LM\r\n   * @param poolAddr pool address\r\n   * @param startTime start time of liquidity mining\r\n   * @param endTime end time of liquidity mining\r\n   * @param rewardTokens reward token list for pool\r\n   * @param rewardAmounts reward amount of list token\r\n   * @param feeTarget fee target for pool\r\n   *\r\n   */\r\n  function addPool(\r\n    address poolAddr,\r\n    uint32 startTime,\r\n    uint32 endTime,\r\n    address[] calldata rewardTokens,\r\n    uint256[] calldata rewardAmounts,\r\n    uint256 feeTarget\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Renew a pool to start another LM program\r\n   * @param pId pool id to update\r\n   * @param startTime start time of liquidity mining\r\n   * @param endTime end time of liquidity mining\r\n   * @param rewardAmounts reward amount of list token\r\n   * @param feeTarget fee target for pool\r\n   *\r\n   */\r\n  function renewPool(\r\n    uint256 pId,\r\n    uint32 startTime,\r\n    uint32 endTime,\r\n    uint256[] calldata rewardAmounts,\r\n    uint256 feeTarget\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Deposit NFT\r\n   * @param nftIds list nft id\r\n   *\r\n   */\r\n  function deposit(uint256[] calldata nftIds) external;\r\n\r\n  /**\r\n   * @dev Deposit NFTs into the pool and join farms if applicable\r\n   * @param pId pool id to join farm\r\n   * @param nftIds List of NFT ids from BasePositionManager, should match with the pId\r\n   *\r\n   */\r\n  function depositAndJoin(uint256 pId, uint256[] calldata nftIds) external;\r\n\r\n  /**\r\n   * @dev Withdraw NFT, must exit all pool before call.\r\n   * @param nftIds list nft id\r\n   *\r\n   */\r\n  function withdraw(uint256[] calldata nftIds) external;\r\n\r\n  /**\r\n   * @dev Join pools\r\n   * @param pId pool id to join\r\n   * @param nftIds nfts to join\r\n   * @param liqs list liquidity value to join each nft\r\n   *\r\n   */\r\n  function join(uint256 pId, uint256[] calldata nftIds, uint256[] calldata liqs) external;\r\n\r\n  /**\r\n   * @dev Exit from pools\r\n   * @param pId pool ids to exit\r\n   * @param nftIds list nfts id\r\n   * @param liqs list liquidity value to exit from each nft\r\n   *\r\n   */\r\n  function exit(uint256 pId, uint256[] calldata nftIds, uint256[] calldata liqs) external;\r\n\r\n  /**\r\n   * @dev Claim rewards for a list of pools for a list of nft positions\r\n   * @param nftIds List of NFT ids to harvest\r\n   * @param datas List of pool ids to harvest for each nftId, encoded into bytes\r\n   */\r\n  function harvestMultiplePools(uint256[] calldata nftIds, bytes[] calldata datas) external;\r\n\r\n  /**\r\n   * @dev remove liquidity from elastic for a list of nft position, also update on farm\r\n   * @param nftId to remove\r\n   * @param liquidity liquidity amount to remove from nft\r\n   * @param amount0Min expected min amount of token0 should receive\r\n   * @param amount1Min expected min amount of token1 should receive\r\n   * @param deadline deadline of this tx\r\n   * @param isReceiveNative should unwrap native or not\r\n   * @param claimFeeAndRewards also claim LP Fee and farm rewards\r\n   */\r\n  function removeLiquidity(\r\n    uint256 nftId,\r\n    uint128 liquidity,\r\n    uint256 amount0Min,\r\n    uint256 amount1Min,\r\n    uint256 deadline,\r\n    bool isReceiveNative,\r\n    bool[2] calldata claimFeeAndRewards\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Claim fee from elastic for a list of nft positions\r\n   * @param nftIds List of NFT ids to claim\r\n   * @param amount0Min expected min amount of token0 should receive\r\n   * @param amount1Min expected min amount of token1 should receive\r\n   * @param poolAddress address of Elastic pool of those nfts\r\n   * @param isReceiveNative should unwrap native or not\r\n   * @param deadline deadline of this tx\r\n   */\r\n  function claimFee(\r\n    uint256[] calldata nftIds,\r\n    uint256 amount0Min,\r\n    uint256 amount1Min,\r\n    address poolAddress,\r\n    bool isReceiveNative,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Operator only. Call to withdraw all reward from list pools.\r\n   * @param rewards list reward address erc20 token\r\n   * @param amounts amount to withdraw\r\n   *\r\n   */\r\n  function emergencyWithdrawForOwner(\r\n    address[] calldata rewards,\r\n    uint256[] calldata amounts\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Withdraw NFT, can call any time, reward will be reset. Must enable this func by operator\r\n   * @param pIds list pool to withdraw\r\n   *\r\n   */\r\n  function emergencyWithdraw(uint256[] calldata pIds) external;\r\n\r\n  /**\r\n   * @dev get list of pool that this nft joined\r\n   * @param nftId to get\r\n   */\r\n  function getJoinedPools(uint256 nftId) external view returns (uint256[] memory poolIds);\r\n\r\n  /**\r\n   * @dev get list of pool that this nft joined, only in a specific range\r\n   * @param nftId to get\r\n   * @param fromIndex index from\r\n   * @param toIndex index to\r\n   */\r\n  function getJoinedPoolsInRange(\r\n    uint256 nftId,\r\n    uint256 fromIndex,\r\n    uint256 toIndex\r\n  ) external view returns (uint256[] memory poolIds);\r\n\r\n  /**\r\n   * @dev get user's info (staked info) of a nft in a pool\r\n   * @param nftId to get\r\n   * @param pId to get\r\n   */\r\n  function getUserInfo(\r\n    uint256 nftId,\r\n    uint256 pId\r\n  )\r\n  external\r\n  view\r\n  returns (uint256 liquidity, uint256[] memory rewardPending, uint256[] memory rewardLast);\r\n\r\n  /**\r\n   * @dev get pool info\r\n   * @param pId to get\r\n   */\r\n  function getPoolInfo(\r\n    uint256 pId\r\n  )\r\n  external\r\n  view\r\n  returns (\r\n    address poolAddress,\r\n    uint32 startTime,\r\n    uint32 endTime,\r\n    uint256 totalSecondsClaimed,\r\n    uint256 feeTarget,\r\n    uint256 numStakes,\r\n  //index reward => reward data\r\n    address[] memory rewardTokens,\r\n    uint256[] memory rewardUnclaimeds\r\n  );\r\n\r\n  /**\r\n   * @dev get list of deposited nfts of an address\r\n   * @param user address of user to get\r\n   */\r\n  function getDepositedNFTs(address user) external view returns (uint256[] memory listNFTs);\r\n\r\n  function nft() external view returns (IERC721);\r\n\r\n  function poolLength() external view returns (uint256);\r\n\r\n  function getRewardCalculationData(\r\n    uint256 nftId,\r\n    uint256 pId\r\n  ) external view returns (RewardCalculationData memory data);\r\n}\r\n"
    },
    "contracts/integrations/kyber/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport {IPoolActions} from './pool/IPoolActions.sol';\r\nimport {IPoolEvents} from './pool/IPoolEvents.sol';\r\nimport {IPoolStorage} from './pool/IPoolStorage.sol';\r\n\r\ninterface IPool is IPoolActions, IPoolEvents, IPoolStorage {}\r\n"
    },
    "contracts/integrations/kyber/IRouterTokenHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\ninterface IRouterTokenHelper {\r\n  /// @notice Unwraps the contract's WETH balance and sends it to recipient as ETH.\r\n  /// @dev The minAmount parameter prevents malicious contracts from stealing WETH from users.\r\n  /// @param minAmount The minimum amount of WETH to unwrap\r\n  /// @param recipient The address receiving ETH\r\n  function unwrapWeth(uint256 minAmount, address recipient) external payable;\r\n\r\n  /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\r\n  /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\r\n  /// that use ether for the input amount\r\n  function refundEth() external payable;\r\n\r\n  /// @notice Transfers the full amount of a token held by this contract to recipient\r\n  /// @dev The minAmount parameter prevents malicious contracts from stealing the token from users\r\n  /// @param token The contract address of the token which will be transferred to `recipient`\r\n  /// @param minAmount The minimum amount of token required for a transfer\r\n  /// @param recipient The destination address of the token\r\n  function transferAllTokens(\r\n    address token,\r\n    uint256 minAmount,\r\n    address recipient\r\n  ) external payable;\r\n}\r\n"
    },
    "contracts/integrations/kyber/ITicksFeesReader.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface ITicksFeesReader {\r\n  function getTotalFeesOwedToPosition(\r\n    address posManager,\r\n    address pool,\r\n    uint256 tokenId\r\n  ) external view returns (uint256 token0Owed, uint256 token1Owed);\r\n}\r\n"
    },
    "contracts/integrations/kyber/oracle/IPoolOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IPoolOracle {\r\n  /// @notice Owner withdrew funds in the pool oracle in case some funds are stuck there\r\n  event OwnerWithdrew(\r\n    address indexed owner,\r\n    address indexed token,\r\n    uint256 indexed amount\r\n  );\r\n\r\n  /// @notice Emitted by the Pool Oracle for increases to the number of observations that can be stored\r\n  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\r\n  /// just before a mint/swap/burn.\r\n  /// @param pool The pool address to update\r\n  /// @param observationCardinalityNextOld The previous value of the next observation cardinality\r\n  /// @param observationCardinalityNextNew The updated value of the next observation cardinality\r\n  event IncreaseObservationCardinalityNext(\r\n    address pool,\r\n    uint16 observationCardinalityNextOld,\r\n    uint16 observationCardinalityNextNew\r\n  );\r\n\r\n  /// @notice Initalize observation data for the caller.\r\n  function initializeOracle(uint32 time)\r\n    external\r\n    returns (uint16 cardinality, uint16 cardinalityNext);\r\n\r\n  /// @notice Write a new oracle entry into the array\r\n  ///   and update the observation index and cardinality\r\n  /// Read the Oralce.write function for more details\r\n  function writeNewEntry(\r\n    uint16 index,\r\n    uint32 blockTimestamp,\r\n    int24 tick,\r\n    uint128 liquidity,\r\n    uint16 cardinality,\r\n    uint16 cardinalityNext\r\n  )\r\n    external\r\n    returns (uint16 indexUpdated, uint16 cardinalityUpdated);\r\n\r\n  /// @notice Write a new oracle entry into the array, take the latest observaion data as inputs\r\n  ///   and update the observation index and cardinality\r\n  /// Read the Oralce.write function for more details\r\n  function write(\r\n    uint32 blockTimestamp,\r\n    int24 tick,\r\n    uint128 liquidity\r\n  )\r\n    external\r\n    returns (uint16 indexUpdated, uint16 cardinalityUpdated);\r\n\r\n  /// @notice Increase the maximum number of price observations that this pool will store\r\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\r\n  /// the input observationCardinalityNext.\r\n  /// @param pool The pool address to be updated\r\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\r\n  function increaseObservationCardinalityNext(\r\n    address pool,\r\n    uint16 observationCardinalityNext\r\n  )\r\n    external;\r\n\r\n  /// @notice Returns the accumulator values as of each time seconds ago from the latest block time in the array of `secondsAgos`\r\n  /// @dev Reverts if `secondsAgos` > oldest observation\r\n  /// @dev It fetches the latest current tick data from the pool\r\n  /// Read the Oracle.observe function for more details\r\n  function observeFromPool(\r\n    address pool,\r\n    uint32[] memory secondsAgos\r\n  )\r\n    external view\r\n    returns (int56[] memory tickCumulatives);\r\n\r\n  /// @notice Returns the accumulator values as the time seconds ago from the latest block time of secondsAgo\r\n  /// @dev Reverts if `secondsAgo` > oldest observation\r\n  /// @dev It fetches the latest current tick data from the pool\r\n  /// Read the Oracle.observeSingle function for more details\r\n  function observeSingleFromPool(\r\n    address pool,\r\n    uint32 secondsAgo\r\n  )\r\n    external view\r\n    returns (int56 tickCumulative);\r\n\r\n  /// @notice Return the latest pool observation data given the pool address\r\n  function getPoolObservation(address pool)\r\n    external view\r\n    returns (bool initialized, uint16 index, uint16 cardinality, uint16 cardinalityNext);\r\n\r\n  /// @notice Returns data about a specific observation index\r\n  /// @param pool The pool address of the observations array to fetch\r\n  /// @param index The element of the observations array to fetch\r\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\r\n  /// ago, rather than at a specific index in the array.\r\n  /// @return blockTimestamp The timestamp of the observation,\r\n  /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\r\n  /// Returns initialized whether the observation has been initialized and the values are safe to use\r\n  function getObservationAt(address pool, uint256 index)\r\n    external view\r\n    returns (\r\n      uint32 blockTimestamp,\r\n      int56 tickCumulative,\r\n      bool initialized\r\n    );\r\n}\r\n"
    },
    "contracts/integrations/kyber/pool/IPoolActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IPoolActions {\r\n  /// @notice Sets the initial price for the pool and seeds reinvestment liquidity\r\n  /// @dev Assumes the caller has sent the necessary token amounts\r\n  /// required for initializing reinvestment liquidity prior to calling this function\r\n  /// @param initialSqrtP the initial sqrt price of the pool\r\n  /// @param qty0 token0 quantity sent to and locked permanently in the pool\r\n  /// @param qty1 token1 quantity sent to and locked permanently in the pool\r\n  function unlockPool(uint160 initialSqrtP) external returns (uint256 qty0, uint256 qty1);\r\n\r\n  /// @notice Adds liquidity for the specified recipient/tickLower/tickUpper position\r\n  /// @dev Any token0 or token1 owed for the liquidity provision have to be paid for when\r\n  /// the IMintCallback#mintCallback is called to this method's caller\r\n  /// The quantity of token0/token1 to be sent depends on\r\n  /// tickLower, tickUpper, the amount of liquidity, and the current price of the pool.\r\n  /// Also sends reinvestment tokens (fees) to the recipient for any fees collected\r\n  /// while the position is in range\r\n  /// Reinvestment tokens have to be burnt via #burnRTokens in exchange for token0 and token1\r\n  /// @param recipient Address for which the added liquidity is credited to\r\n  /// @param tickLower Recipient position's lower tick\r\n  /// @param tickUpper Recipient position's upper tick\r\n  /// @param ticksPrevious The nearest tick that is initialized and <= the lower & upper ticks\r\n  /// @param qty Liquidity quantity to mint\r\n  /// @param data Data (if any) to be passed through to the callback\r\n  /// @return qty0 token0 quantity sent to the pool in exchange for the minted liquidity\r\n  /// @return qty1 token1 quantity sent to the pool in exchange for the minted liquidity\r\n  /// @return feeGrowthInside position's updated feeGrowthInside value\r\n  function mint(\r\n    address recipient,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    int24[2] calldata ticksPrevious,\r\n    uint128 qty,\r\n    bytes calldata data\r\n  )\r\n    external\r\n    returns (\r\n      uint256 qty0,\r\n      uint256 qty1,\r\n      uint256 feeGrowthInside\r\n    );\r\n\r\n  /// @notice Remove liquidity from the caller\r\n  /// Also sends reinvestment tokens (fees) to the caller for any fees collected\r\n  /// while the position is in range\r\n  /// Reinvestment tokens have to be burnt via #burnRTokens in exchange for token0 and token1\r\n  /// @param tickLower Position's lower tick for which to burn liquidity\r\n  /// @param tickUpper Position's upper tick for which to burn liquidity\r\n  /// @param qty Liquidity quantity to burn\r\n  /// @return qty0 token0 quantity sent to the caller\r\n  /// @return qty1 token1 quantity sent to the caller\r\n  /// @return feeGrowthInside position's updated feeGrowthInside value\r\n  function burn(\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 qty\r\n  )\r\n    external\r\n    returns (\r\n      uint256 qty0,\r\n      uint256 qty1,\r\n      uint256 feeGrowthInside\r\n    );\r\n\r\n  /// @notice Burns reinvestment tokens in exchange to receive the fees collected in token0 and token1\r\n  /// @param qty Reinvestment token quantity to burn\r\n  /// @param isLogicalBurn true if burning rTokens without returning any token0/token1\r\n  ///         otherwise should transfer token0/token1 to sender\r\n  /// @return qty0 token0 quantity sent to the caller for burnt reinvestment tokens\r\n  /// @return qty1 token1 quantity sent to the caller for burnt reinvestment tokens\r\n  function burnRTokens(uint256 qty, bool isLogicalBurn)\r\n    external\r\n    returns (uint256 qty0, uint256 qty1);\r\n\r\n  /// @notice Swap token0 -> token1, or vice versa\r\n  /// @dev This method's caller receives a callback in the form of ISwapCallback#swapCallback\r\n  /// @dev swaps will execute up to limitSqrtP or swapQty is fully used\r\n  /// @param recipient The address to receive the swap output\r\n  /// @param swapQty The swap quantity, which implicitly configures the swap as exact input (>0), or exact output (<0)\r\n  /// @param isToken0 Whether the swapQty is specified in token0 (true) or token1 (false)\r\n  /// @param limitSqrtP the limit of sqrt price after swapping\r\n  /// could be MAX_SQRT_RATIO-1 when swapping 1 -> 0 and MIN_SQRT_RATIO+1 when swapping 0 -> 1 for no limit swap\r\n  /// @param data Any data to be passed through to the callback\r\n  /// @return qty0 Exact token0 qty sent to recipient if < 0. Minimally received quantity if > 0.\r\n  /// @return qty1 Exact token1 qty sent to recipient if < 0. Minimally received quantity if > 0.\r\n  function swap(\r\n    address recipient,\r\n    int256 swapQty,\r\n    bool isToken0,\r\n    uint160 limitSqrtP,\r\n    bytes calldata data\r\n  ) external returns (int256 qty0, int256 qty1);\r\n\r\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\r\n  /// @dev The caller of this method receives a callback in the form of IFlashCallback#flashCallback\r\n  /// @dev Fees collected are sent to the feeTo address if it is set in Factory\r\n  /// @param recipient The address which will receive the token0 and token1 quantities\r\n  /// @param qty0 token0 quantity to be loaned to the recipient\r\n  /// @param qty1 token1 quantity to be loaned to the recipient\r\n  /// @param data Any data to be passed through to the callback\r\n  function flash(\r\n    address recipient,\r\n    uint256 qty0,\r\n    uint256 qty1,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n\r\n  /// @notice sync fee of position\r\n  /// @param tickLower Position's lower tick\r\n  /// @param tickUpper Position's upper tick\r\n  function tweakPosZeroLiq(int24 tickLower, int24 tickUpper)\r\n    external returns(uint256 feeGrowthInsideLast);\r\n}\r\n"
    },
    "contracts/integrations/kyber/pool/IPoolEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IPoolEvents {\r\n  /// @notice Emitted only once per pool when #initialize is first called\r\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\r\n  /// @param sqrtP The initial price of the pool\r\n  /// @param tick The initial tick of the pool\r\n  event Initialize(uint160 sqrtP, int24 tick);\r\n\r\n  /// @notice Emitted when liquidity is minted for a given position\r\n  /// @dev transfers reinvestment tokens for any collected fees earned by the position\r\n  /// @param sender address that minted the liquidity\r\n  /// @param owner address of owner of the position\r\n  /// @param tickLower position's lower tick\r\n  /// @param tickUpper position's upper tick\r\n  /// @param qty liquidity minted to the position range\r\n  /// @param qty0 token0 quantity needed to mint the liquidity\r\n  /// @param qty1 token1 quantity needed to mint the liquidity\r\n  event Mint(\r\n    address sender,\r\n    address indexed owner,\r\n    int24 indexed tickLower,\r\n    int24 indexed tickUpper,\r\n    uint128 qty,\r\n    uint256 qty0,\r\n    uint256 qty1\r\n  );\r\n\r\n  /// @notice Emitted when a position's liquidity is removed\r\n  /// @dev transfers reinvestment tokens for any collected fees earned by the position\r\n  /// @param owner address of owner of the position\r\n  /// @param tickLower position's lower tick\r\n  /// @param tickUpper position's upper tick\r\n  /// @param qty liquidity removed\r\n  /// @param qty0 token0 quantity withdrawn from removal of liquidity\r\n  /// @param qty1 token1 quantity withdrawn from removal of liquidity\r\n  event Burn(\r\n    address indexed owner,\r\n    int24 indexed tickLower,\r\n    int24 indexed tickUpper,\r\n    uint128 qty,\r\n    uint256 qty0,\r\n    uint256 qty1\r\n  );\r\n\r\n  /// @notice Emitted when reinvestment tokens are burnt\r\n  /// @param owner address which burnt the reinvestment tokens\r\n  /// @param qty reinvestment token quantity burnt\r\n  /// @param qty0 token0 quantity sent to owner for burning reinvestment tokens\r\n  /// @param qty1 token1 quantity sent to owner for burning reinvestment tokens\r\n  event BurnRTokens(address indexed owner, uint256 qty, uint256 qty0, uint256 qty1);\r\n\r\n  /// @notice Emitted for swaps by the pool between token0 and token1\r\n  /// @param sender Address that initiated the swap call, and that received the callback\r\n  /// @param recipient Address that received the swap output\r\n  /// @param deltaQty0 Change in pool's token0 balance\r\n  /// @param deltaQty1 Change in pool's token1 balance\r\n  /// @param sqrtP Pool's sqrt price after the swap\r\n  /// @param liquidity Pool's liquidity after the swap\r\n  /// @param currentTick Log base 1.0001 of pool's price after the swap\r\n  event Swap(\r\n    address indexed sender,\r\n    address indexed recipient,\r\n    int256 deltaQty0,\r\n    int256 deltaQty1,\r\n    uint160 sqrtP,\r\n    uint128 liquidity,\r\n    int24 currentTick\r\n  );\r\n\r\n  /// @notice Emitted by the pool for any flash loans of token0/token1\r\n  /// @param sender The address that initiated the flash loan, and that received the callback\r\n  /// @param recipient The address that received the flash loan quantities\r\n  /// @param qty0 token0 quantity loaned to the recipient\r\n  /// @param qty1 token1 quantity loaned to the recipient\r\n  /// @param paid0 token0 quantity paid for the flash, which can exceed qty0 + fee\r\n  /// @param paid1 token1 quantity paid for the flash, which can exceed qty0 + fee\r\n  event Flash(\r\n    address indexed sender,\r\n    address indexed recipient,\r\n    uint256 qty0,\r\n    uint256 qty1,\r\n    uint256 paid0,\r\n    uint256 paid1\r\n  );\r\n}\r\n"
    },
    "contracts/integrations/kyber/pool/IPoolStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\nimport {IFactory} from '../IFactory.sol';\r\nimport {IPoolOracle} from '../oracle/IPoolOracle.sol';\r\n\r\ninterface IPoolStorage {\r\n  /// @notice The contract that deployed the pool, which must adhere to the IFactory interface\r\n  /// @return The contract address\r\n  function factory() external view returns (IFactory);\r\n\r\n  /// @notice The oracle contract that stores necessary data for price oracle\r\n  /// @return The contract address\r\n  function poolOracle() external view returns (IPoolOracle);\r\n\r\n  /// @notice The first of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token0() external view returns (IERC20);\r\n\r\n  /// @notice The second of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token1() external view returns (IERC20);\r\n\r\n  /// @notice The fee to be charged for a swap in basis points\r\n  /// @return The swap fee in basis points\r\n  function swapFeeUnits() external view returns (uint24);\r\n\r\n  /// @notice The pool tick distance\r\n  /// @dev Ticks can only be initialized and used at multiples of this value\r\n  /// It remains an int24 to avoid casting even though it is >= 1.\r\n  /// e.g: a tickDistance of 5 means ticks can be initialized every 5th tick, i.e., ..., -10, -5, 0, 5, 10, ...\r\n  /// @return The tick distance\r\n  function tickDistance() external view returns (int24);\r\n\r\n  /// @notice Maximum gross liquidity that an initialized tick can have\r\n  /// @dev This is to prevent overflow the pool's active base liquidity (uint128)\r\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n  /// @return The max amount of liquidity per tick\r\n  function maxTickLiquidity() external view returns (uint128);\r\n\r\n  /// @notice Look up information about a specific tick in the pool\r\n  /// @param tick The tick to look up\r\n  /// @return liquidityGross total liquidity amount from positions that uses this tick as a lower or upper tick\r\n  /// liquidityNet how much liquidity changes when the pool tick crosses above the tick\r\n  /// feeGrowthOutside the fee growth on the other side of the tick relative to the current tick\r\n  /// secondsPerLiquidityOutside the seconds per unit of liquidity  spent on the other side of the tick relative to the current tick\r\n  function ticks(int24 tick)\r\n    external\r\n    view\r\n    returns (\r\n      uint128 liquidityGross,\r\n      int128 liquidityNet,\r\n      uint256 feeGrowthOutside,\r\n      uint128 secondsPerLiquidityOutside\r\n    );\r\n\r\n  /// @notice Returns the previous and next initialized ticks of a specific tick\r\n  /// @dev If specified tick is uninitialized, the returned values are zero.\r\n  /// @param tick The tick to look up\r\n  function initializedTicks(int24 tick) external view returns (int24 previous, int24 next);\r\n\r\n  /// @notice Returns the information about a position by the position's key\r\n  /// @return liquidity the liquidity quantity of the position\r\n  /// @return feeGrowthInsideLast fee growth inside the tick range as of the last mint / burn action performed\r\n  function getPositions(\r\n    address owner,\r\n    int24 tickLower,\r\n    int24 tickUpper\r\n  ) external view returns (uint128 liquidity, uint256 feeGrowthInsideLast);\r\n\r\n  /// @notice Fetches the pool's prices, ticks and lock status\r\n  /// @return sqrtP sqrt of current price: sqrt(token1/token0)\r\n  /// @return currentTick pool's current tick\r\n  /// @return nearestCurrentTick pool's nearest initialized tick that is <= currentTick\r\n  /// @return locked true if pool is locked, false otherwise\r\n  function getPoolState()\r\n    external\r\n    view\r\n    returns (\r\n      uint160 sqrtP,\r\n      int24 currentTick,\r\n      int24 nearestCurrentTick,\r\n      bool locked\r\n    );\r\n\r\n  /// @notice Fetches the pool's liquidity values\r\n  /// @return baseL pool's base liquidity without reinvest liqudity\r\n  /// @return reinvestL the liquidity is reinvested into the pool\r\n  /// @return reinvestLLast last cached value of reinvestL, used for calculating reinvestment token qty\r\n  function getLiquidityState()\r\n    external\r\n    view\r\n    returns (\r\n      uint128 baseL,\r\n      uint128 reinvestL,\r\n      uint128 reinvestLLast\r\n    );\r\n\r\n  /// @return feeGrowthGlobal All-time fee growth per unit of liquidity of the pool\r\n  function getFeeGrowthGlobal() external view returns (uint256);\r\n\r\n  /// @return secondsPerLiquidityGlobal All-time seconds per unit of liquidity of the pool\r\n  /// @return lastUpdateTime The timestamp in which secondsPerLiquidityGlobal was last updated\r\n  function getSecondsPerLiquidityData()\r\n    external\r\n    view\r\n    returns (uint128 secondsPerLiquidityGlobal, uint32 lastUpdateTime);\r\n\r\n  /// @notice Calculates and returns the active time per unit of liquidity until current block.timestamp\r\n  /// @param tickLower The lower tick (of a position)\r\n  /// @param tickUpper The upper tick (of a position)\r\n  /// @return secondsPerLiquidityInside active time (multiplied by 2^96)\r\n  /// between the 2 ticks, per unit of liquidity.\r\n  function getSecondsPerLiquidityInside(int24 tickLower, int24 tickUpper)\r\n    external\r\n    view\r\n    returns (uint128 secondsPerLiquidityInside);\r\n}\r\n"
    },
    "contracts/integrations/moonwell/IMoonwellAggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IMoonwellAggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n  external\r\n  view\r\n  returns (\r\n    uint80 roundId,\r\n    int256 answer,\r\n    uint256 startedAt,\r\n    uint256 updatedAt,\r\n    uint80 answeredInRound\r\n  );\r\n  function latestRoundData()\r\n  external\r\n  view\r\n  returns (\r\n    uint80 roundId,\r\n    int256 answer,\r\n    uint256 startedAt,\r\n    uint256 updatedAt,\r\n    uint80 answeredInRound\r\n  );\r\n}"
    },
    "contracts/integrations/moonwell/IMoonwellComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Restored from implementation 0x73D8A3bF62aACa6690791E57EBaEE4e1d875d8Fe\r\n/// of 0xfBb21d0380beE3312B33c4353c8936a0F13EF26C\r\ninterface IMoonwellComptroller {\r\n  event ActionPaused(string action, bool pauseState);\r\n  event ActionPaused(address mToken, string action, bool pauseState);\r\n  event Failure(uint256 error, uint256 info, uint256 detail);\r\n  event MarketEntered(address mToken, address account);\r\n  event MarketExited(address mToken, address account);\r\n  event MarketListed(address mToken);\r\n  event NewBorrowCap(address indexed mToken, uint256 newBorrowCap);\r\n  event NewBorrowCapGuardian(\r\n    address oldBorrowCapGuardian,\r\n    address newBorrowCapGuardian\r\n  );\r\n  event NewCloseFactor(\r\n    uint256 oldCloseFactorMantissa,\r\n    uint256 newCloseFactorMantissa\r\n  );\r\n  event NewCollateralFactor(\r\n    address mToken,\r\n    uint256 oldCollateralFactorMantissa,\r\n    uint256 newCollateralFactorMantissa\r\n  );\r\n  event NewLiquidationIncentive(\r\n    uint256 oldLiquidationIncentiveMantissa,\r\n    uint256 newLiquidationIncentiveMantissa\r\n  );\r\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\r\n  event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\r\n  event NewRewardDistributor(\r\n    address oldRewardDistributor,\r\n    address newRewardDistributor\r\n  );\r\n  event NewSupplyCap(address indexed mToken, uint256 newSupplyCap);\r\n  event NewSupplyCapGuardian(\r\n    address oldSupplyCapGuardian,\r\n    address newSupplyCapGuardian\r\n  );\r\n\r\n  function _become(address unitroller) external;\r\n\r\n  function _rescueFunds(address _tokenAddress, uint256 _amount) external;\r\n\r\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\r\n\r\n  function _setBorrowPaused(address mToken, bool state)\r\n  external\r\n  returns (bool);\r\n\r\n  function _setCloseFactor(uint256 newCloseFactorMantissa)\r\n  external\r\n  returns (uint256);\r\n\r\n  function _setCollateralFactor(\r\n    address mToken,\r\n    uint256 newCollateralFactorMantissa\r\n  ) external returns (uint256);\r\n\r\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\r\n  external\r\n  returns (uint256);\r\n\r\n  function _setMarketBorrowCaps(\r\n    address[] memory mTokens,\r\n    uint256[] memory newBorrowCaps\r\n  ) external;\r\n\r\n  function _setMarketSupplyCaps(\r\n    address[] memory mTokens,\r\n    uint256[] memory newSupplyCaps\r\n  ) external;\r\n\r\n  function _setMintPaused(address mToken, bool state) external returns (bool);\r\n\r\n  function _setPauseGuardian(address newPauseGuardian)\r\n  external\r\n  returns (uint256);\r\n\r\n  function _setPriceOracle(address newOracle) external returns (uint256);\r\n\r\n  function _setRewardDistributor(address newRewardDistributor) external;\r\n\r\n  function _setSeizePaused(bool state) external returns (bool);\r\n\r\n  function _setSupplyCapGuardian(address newSupplyCapGuardian) external;\r\n\r\n  function _setTransferPaused(bool state) external returns (bool);\r\n\r\n  function _supportMarket(address mToken) external returns (uint256);\r\n\r\n  function accountAssets(address, uint256) external view returns (address);\r\n\r\n  function admin() external view returns (address);\r\n\r\n  function allMarkets(uint256) external view returns (address);\r\n\r\n  function borrowAllowed(\r\n    address mToken,\r\n    address borrower,\r\n    uint256 borrowAmount\r\n  ) external returns (uint256);\r\n\r\n  function borrowCapGuardian() external view returns (address);\r\n\r\n  function borrowCaps(address) external view returns (uint256);\r\n\r\n  function borrowGuardianPaused(address) external view returns (bool);\r\n\r\n  function checkMembership(address account, address mToken) external view returns (bool);\r\n\r\n  function claimReward(address[] memory holders, address[] memory mTokens, bool borrowers, bool suppliers) external;\r\n\r\n  /// @notice Claim all the WELL accrued by holder in the specified markets\r\n  /// @param holder The address to claim WELL for\r\n  /// @param mTokens The list of markets to claim WELL in\r\n  function claimReward(address holder, address[] memory mTokens) external;\r\n\r\n  function claimReward() external;\r\n\r\n  function claimReward(address holder) external;\r\n\r\n  function closeFactorMantissa() external view returns (uint256);\r\n\r\n  function comptrollerImplementation() external view returns (address);\r\n\r\n  /// @notice Add assets to be included in account liquidity calculation\r\n  /// @param mTokens The list of addresses of the mToken markets to be enabled\r\n  /// @return Success indicator for whether each corresponding market was entered\r\n  function enterMarkets(address[] memory mTokens) external returns (uint256[] memory);\r\n\r\n  /// @notice Removes asset from sender's account liquidity calculation\r\n  /// @dev Sender must not have an outstanding borrow balance in the asset,\r\n  /// or be providing necessary collateral for an outstanding borrow.\r\n  /// @param mTokenAddress The address of the asset to be removed\r\n  /// @return Whether or not the account successfully exited the market\r\n  function exitMarket(address mTokenAddress) external returns (uint256);\r\n\r\n  /// @notice Determine the current account liquidity wrt collateral requirements\r\n  /// @return errorCode possible error code (semi-opaque)\r\n  /// @return liquidity Account liquidity in excess of collateral requirements,\r\n  /// @return shortfall Account shortfall below collateral requirements)\r\n  function getAccountLiquidity(address account) external view returns (\r\n    uint256 errorCode,\r\n    uint256 liquidity,\r\n    uint256 shortfall\r\n  );\r\n\r\n  function getAllMarkets() external view returns (address[] memory);\r\n\r\n  function getAssetsIn(address account) external view returns (address[] memory);\r\n\r\n  function getBlockTimestamp() external view returns (uint256);\r\n\r\n  /// @notice Determine the current account liquidity wrt collateral requirements\r\n  /// @return errorCode possible error code\r\n  /// @return liquidity account liquidity in excess of collateral requirements\r\n  /// @return shortfall account shortfall below collateral requirements\r\n  function getHypotheticalAccountLiquidity(\r\n    address account,\r\n    address mTokenModify,\r\n    uint256 redeemTokens,\r\n    uint256 borrowAmount\r\n  )\r\n  external view returns (uint256 errorCode, uint256 liquidity, uint256 shortfall);\r\n\r\n  function isComptroller() external view returns (bool);\r\n\r\n  function liquidateBorrowAllowed(\r\n    address mTokenBorrowed,\r\n    address mTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external view returns (uint256);\r\n\r\n  function liquidateCalculateSeizeTokens(\r\n    address mTokenBorrowed,\r\n    address mTokenCollateral,\r\n    uint256 actualRepayAmount\r\n  ) external view returns (uint256, uint256);\r\n\r\n  function liquidationIncentiveMantissa() external view returns (uint256);\r\n\r\n  function markets(address) external view returns (bool isListed, uint256 collateralFactorMantissa);\r\n\r\n  function mintAllowed(address mToken, address minter,uint256 mintAmount) external returns (uint256);\r\n\r\n  function mintGuardianPaused(address) external view returns (bool);\r\n\r\n  function oracle() external view returns (address);\r\n\r\n  function pauseGuardian() external view returns (address);\r\n\r\n  function pendingAdmin() external view returns (address);\r\n\r\n  function pendingComptrollerImplementation() external view returns (address);\r\n\r\n  function redeemAllowed(address mToken, address redeemer, uint256 redeemTokens) external returns (uint256);\r\n\r\n  function redeemVerify(\r\n    address mToken,\r\n    address redeemer,\r\n    uint256 redeemAmount,\r\n    uint256 redeemTokens\r\n  ) external pure;\r\n\r\n  function repayBorrowAllowed(\r\n    address mToken,\r\n    address payer,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external returns (uint256);\r\n\r\n  function rewardDistributor() external view returns (address);\r\n\r\n  function seizeAllowed(\r\n    address mTokenCollateral,\r\n    address mTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external returns (uint256);\r\n\r\n  function seizeGuardianPaused() external view returns (bool);\r\n\r\n  function supplyCapGuardian() external view returns (address);\r\n\r\n  function supplyCaps(address) external view returns (uint256);\r\n\r\n  function transferAllowed(address mToken, address src, address dst, uint256 transferTokens) external returns (uint256);\r\n\r\n  function transferGuardianPaused() external view returns (bool);\r\n}\r\n\r\n"
    },
    "contracts/integrations/moonwell/IMoonwellPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Restored from 0xEC942bE8A8114bFD0396A5052c36027f2cA6a9d0\r\ninterface IMoonwellPriceOracle {\r\n  event FeedSet(address feed, string symbol);\r\n  event NewAdmin(address oldAdmin, address newAdmin);\r\n  event PricePosted(\r\n    address asset,\r\n    uint256 previousPriceMantissa,\r\n    uint256 requestedPriceMantissa,\r\n    uint256 newPriceMantissa\r\n  );\r\n\r\n  function admin() external view returns (address);\r\n\r\n  function assetPrices(address asset) external view returns (uint256);\r\n\r\n  function getFeed(string memory symbol) external view returns (address);\r\n\r\n  function getUnderlyingPrice(address mToken) external view returns (uint256);\r\n\r\n  function isPriceOracle() external view returns (bool);\r\n\r\n  function nativeToken() external view returns (bytes32);\r\n\r\n\r\n  function setAdmin(address newAdmin) external;\r\n\r\n  function setDirectPrice(address asset, uint256 price) external;\r\n\r\n  function setFeed(string memory symbol, address feed) external;\r\n\r\n  function setUnderlyingPrice(address mToken, uint256 underlyingPriceMantissa) external;\r\n}\r\n"
    },
    "contracts/integrations/pancake/IPancakeMasterChefV3.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Restored from base-chain: 0xC6A2Db661D5a5690172d8eB0a7DEA2d3008665A3, events were removed\r\ninterface IPancakeMasterChefV3 {\r\n    function BOOST_PRECISION() external view returns (uint256);\r\n\r\n    function CAKE() external view returns (address);\r\n\r\n    function FARM_BOOSTER() external view returns (address);\r\n\r\n    function LMPoolDeployer() external view returns (address);\r\n\r\n    function MAX_BOOST_PRECISION() external view returns (uint256);\r\n\r\n    function MAX_DURATION() external view returns (uint256);\r\n\r\n    function MIN_DURATION() external view returns (uint256);\r\n\r\n    function PERIOD_DURATION() external view returns (uint256);\r\n\r\n    function PRECISION() external view returns (uint256);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function add(uint256 _allocPoint, address _v3Pool, bool _withUpdate) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function burn(uint256 _tokenId) external;\r\n\r\n    function cakeAmountBelongToMC() external view returns (uint256);\r\n\r\n    function collect(INonfungiblePositionManagerStruct.CollectParams memory params) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function collectTo(INonfungiblePositionManagerStruct.CollectParams memory params, address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function decreaseLiquidity(INonfungiblePositionManagerStruct.DecreaseLiquidityParams memory params) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function emergency() external view returns (bool);\r\n\r\n    function getLatestPeriodInfo(address _v3Pool) external view returns (uint256 cakePerSecond, uint256 endTime);\r\n\r\n    function getLatestPeriodInfoByPid(uint256 _pid) external view returns (uint256 cakePerSecond, uint256 endTime);\r\n\r\n    function harvest(uint256 _tokenId, address _to) external returns (uint256 reward);\r\n\r\n    function increaseLiquidity(INonfungiblePositionManagerStruct.IncreaseLiquidityParams memory params) external payable returns (\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    function latestPeriodCakePerSecond() external view returns (uint256);\r\n\r\n    function latestPeriodEndTime() external view returns (uint256);\r\n\r\n    function latestPeriodNumber() external view returns (uint256);\r\n\r\n    function latestPeriodStartTime() external view returns (uint256);\r\n\r\n    function multicall(bytes[] memory data) external payable returns (bytes[] memory results);\r\n\r\n    function nonfungiblePositionManager() external view returns (address);\r\n\r\n    function onERC721Received(address, address _from, uint256 _tokenId, bytes memory) external returns (bytes4);\r\n\r\n    function operatorAddress() external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function pendingCake(uint256 _tokenId) external view returns (uint256 reward);\r\n\r\n    function poolInfo(uint256) external view returns (\r\n        uint256 allocPoint,\r\n        address v3Pool,\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        uint256 totalLiquidity,\r\n        uint256 totalBoostLiquidity\r\n    );\r\n\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function receiver() external view returns (address);\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\r\n\r\n    function setEmergency(bool _emergency) external;\r\n\r\n    function setLMPoolDeployer(address _LMPoolDeployer) external;\r\n\r\n    function setOperator(address _operatorAddress) external;\r\n\r\n    function setPeriodDuration(uint256 _periodDuration) external;\r\n\r\n    function setReceiver(address _receiver) external;\r\n\r\n    function sweepToken(address token, uint256 amountMinimum, address recipient) external;\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external;\r\n\r\n    function updateBoostMultiplier(uint256 _tokenId, uint256 _newMultiplier) external;\r\n\r\n    function updateFarmBoostContract(address _newFarmBoostContract) external;\r\n\r\n    function updateLiquidity(uint256 _tokenId) external;\r\n\r\n    function updatePools(uint256[] memory pids) external;\r\n\r\n    function upkeep(uint256 _amount, uint256 _duration, bool _withUpdate) external;\r\n\r\n    function userPositionInfos(uint256) external view returns (\r\n        uint128 liquidity,\r\n        uint128 boostLiquidity,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint256 rewardGrowthInside,\r\n        uint256 reward,\r\n        address user,\r\n        uint256 pid,\r\n        uint256 boostMultiplier\r\n    );\r\n\r\n    function v3PoolAddressPid(address) external view returns (uint256);\r\n\r\n    function withdraw(uint256 _tokenId, address _to) external returns (uint256 reward);\r\n\r\n    receive() external payable;\r\n}\r\n\r\ninterface INonfungiblePositionManagerStruct {\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n}\r\n"
    },
    "contracts/integrations/pancake/IPancakeNonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Wraps Pancake V3 positions in the ERC721 non-fungible token interface\r\n/// @dev Restored from base-chain:0x46A15B0b27311cedF172AB29E4f4766fbE7F4364, events were removed\r\ninterface IPancakeNonfungiblePositionManager {\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external view returns (bytes32);\r\n\r\n    function WETH9() external view returns (address);\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function baseURI() external pure returns (string memory);\r\n\r\n    function burn(uint256 tokenId) external payable;\r\n\r\n    function collect(IPancakeNonfungiblePositionManager.CollectParams memory params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    function createAndInitializePoolIfNecessary(address token0, address token1, uint24 fee, uint160 sqrtPriceX96) external payable returns (address pool);\r\n\r\n    function decreaseLiquidity(IPancakeNonfungiblePositionManager.DecreaseLiquidityParams memory params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    function deployer() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address);\r\n\r\n    function increaseLiquidity(IPancakeNonfungiblePositionManager.IncreaseLiquidityParams memory params) external payable returns (\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function mint(IPancakeNonfungiblePositionManager.MintParams memory params) external payable returns (\r\n        uint256 tokenId,\r\n        uint128 liquidity,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n\r\n    function multicall(bytes[] memory data) external payable returns (bytes[] memory results);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function pancakeV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes memory data) external;\r\n\r\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external payable;\r\n\r\n    function positions(uint256 tokenId) external view returns (\r\n        uint96 nonce,\r\n        address operator,\r\n        address token0,\r\n        address token1,\r\n        uint24 fee,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 liquidity,\r\n        uint256 feeGrowthInside0LastX128,\r\n        uint256 feeGrowthInside1LastX128,\r\n        uint128 tokensOwed0,\r\n        uint128 tokensOwed1\r\n    );\r\n\r\n    function refundETH() external payable;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\r\n\r\n    function selfPermit(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external payable;\r\n\r\n    function selfPermitAllowed(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external payable;\r\n\r\n    function selfPermitAllowedIfNecessary(address token, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external payable;\r\n\r\n    function selfPermitIfNecessary(address token, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external payable;\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    function sweepToken(address token, uint256 amountMinimum, address recipient) external payable;\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\r\n\r\n    receive() external payable;\r\n}\r\n"
    },
    "contracts/integrations/pancake/IPancakeQuoterV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n/// @dev Restored from base-chain:0x864ED564875BdDD6F421e226494a0E7c071C06f8\r\ninterface IPancakeQuoterV2 {\r\n    function WETH9() external view returns (address);\r\n\r\n    function deployer() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes memory path) external view;\r\n\r\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (\r\n        uint256 amountOut,\r\n        uint160[] memory sqrtPriceX96AfterList,\r\n        uint32[] memory initializedTicksCrossedList,\r\n        uint256 gasEstimate\r\n    );\r\n\r\n    function quoteExactInputSingle(IQuoterV2.QuoteExactInputSingleParams memory params) external returns (\r\n        uint256 amountOut,\r\n        uint160 sqrtPriceX96After,\r\n        uint32 initializedTicksCrossed,\r\n        uint256 gasEstimate\r\n    );\r\n\r\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (\r\n        uint256 amountIn,\r\n        uint160[] memory sqrtPriceX96AfterList,\r\n        uint32[] memory initializedTicksCrossedList,\r\n        uint256 gasEstimate\r\n    );\r\n\r\n    function quoteExactOutputSingle(IQuoterV2.QuoteExactOutputSingleParams memory params) external returns (\r\n        uint256 amountIn,\r\n        uint160 sqrtPriceX96After,\r\n        uint32 initializedTicksCrossed,\r\n        uint256 gasEstimate\r\n    );\r\n}\r\n\r\ninterface IQuoterV2 {\r\n    struct QuoteExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amountIn;\r\n        uint24 fee;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    struct QuoteExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amount;\r\n        uint24 fee;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n}"
    },
    "contracts/integrations/pancake/IPancakeV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title Callback for IPancakeV3PoolActions.mint\r\n/// @notice Any contract that calls IPancakeV3PoolActions.mint must implement this interface\r\ninterface IPancakeV3MintCallback {\r\n  /// @notice Called to `msg.sender` after minting liquidity to a position from IPancakeV3Pool#mint.\r\n  /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\r\n  /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\r\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\r\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\r\n  /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#mint call\r\n  function pancakeV3MintCallback(\r\n    uint256 amount0Owed,\r\n    uint256 amount1Owed,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n"
    },
    "contracts/integrations/pancake/IPancakeV3Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Restored from base-chain:0x29Ed55B18Af0Add137952CB3E29FB77B32fCE426, events were removed\r\ninterface IPancakeV3Pool {\r\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested)\r\n    external returns (uint128 amount0, uint128 amount1);\r\n\r\n    function collectProtocol(address recipient, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function fee() external view returns (uint24);\r\n\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n\r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n\r\n    function flash(address recipient, uint256 amount0, uint256 amount1, bytes memory data) external;\r\n\r\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\r\n\r\n    function initialize(uint160 sqrtPriceX96) external;\r\n\r\n    function liquidity() external view returns (uint128);\r\n\r\n    function lmPool() external view returns (address);\r\n\r\n    function maxLiquidityPerTick() external view returns (uint128);\r\n\r\n    function mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes memory data)\r\n    external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function observations(uint256) external view returns (\r\n        uint32 blockTimestamp,\r\n        int56 tickCumulative,\r\n        uint160 secondsPerLiquidityCumulativeX128,\r\n        bool initialized\r\n    );\r\n\r\n    function observe(uint32[] memory secondsAgos) external view returns (\r\n        int56[] memory tickCumulatives,\r\n        uint160[] memory secondsPerLiquidityCumulativeX128s\r\n    );\r\n\r\n    function positions(bytes32) external view returns (\r\n        uint128 liquidity,\r\n        uint256 feeGrowthInside0LastX128,\r\n        uint256 feeGrowthInside1LastX128,\r\n        uint128 tokensOwed0,\r\n        uint128 tokensOwed1\r\n    );\r\n\r\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\r\n\r\n    function setFeeProtocol(uint32 feeProtocol0, uint32 feeProtocol1) external;\r\n\r\n    function setLmPool(address _lmPool) external;\r\n\r\n    function slot0() external view returns (\r\n        uint160 sqrtPriceX96,\r\n        int24 tick,\r\n        uint16 observationIndex,\r\n        uint16 observationCardinality,\r\n        uint16 observationCardinalityNext,\r\n        uint32 feeProtocol,\r\n        bool unlocked\r\n    );\r\n\r\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper) external view returns (\r\n        int56 tickCumulativeInside,\r\n        uint160 secondsPerLiquidityInsideX128,\r\n        uint32 secondsInside\r\n    );\r\n\r\n    function swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes memory data)\r\n    external returns (int256 amount0, int256 amount1);\r\n\r\n    function tickBitmap(int16) external view returns (uint256);\r\n\r\n    function tickSpacing() external view returns (int24);\r\n\r\n    function ticks(int24) external view returns (\r\n        uint128 liquidityGross,\r\n        int128 liquidityNet,\r\n        uint256 feeGrowthOutside0X128,\r\n        uint256 feeGrowthOutside1X128,\r\n        int56 tickCumulativeOutside,\r\n        uint160 secondsPerLiquidityOutsideX128,\r\n        uint32 secondsOutside,\r\n        bool initialized\r\n    );\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}"
    },
    "contracts/integrations/tetu-v1/ISmartVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface ISmartVault {\r\n  function DEPOSIT_FEE_DENOMINATOR() external view returns (uint256);\r\n\r\n  function LOCK_PENALTY_DENOMINATOR() external view returns (uint256);\r\n\r\n  function TO_INVEST_DENOMINATOR() external view returns (uint256);\r\n\r\n  function VERSION() external view returns (string memory);\r\n\r\n  function active() external view returns (bool);\r\n\r\n  function addRewardToken(address rt) external;\r\n\r\n  function alwaysInvest() external view returns (bool);\r\n\r\n  function availableToInvestOut() external view returns (uint256);\r\n\r\n  function changeActivityStatus(bool _active) external;\r\n\r\n  function changeAlwaysInvest(bool _active) external;\r\n\r\n  function changeDoHardWorkOnInvest(bool _active) external;\r\n\r\n  function changePpfsDecreaseAllowed(bool _value) external;\r\n\r\n  function changeProtectionMode(bool _active) external;\r\n\r\n  function deposit(uint256 amount) external;\r\n\r\n  function depositAndInvest(uint256 amount) external;\r\n\r\n  function depositFeeNumerator() external view returns (uint256);\r\n\r\n  function depositFor(uint256 amount, address holder) external;\r\n\r\n  function disableLock() external;\r\n\r\n  function doHardWork() external;\r\n\r\n  function doHardWorkOnInvest() external view returns (bool);\r\n\r\n  function duration() external view returns (uint256);\r\n\r\n  function earned(address rt, address account) external view returns (uint256);\r\n\r\n  function earnedWithBoost(address rt, address account) external view returns (uint256);\r\n\r\n  function exit() external;\r\n\r\n  function getAllRewards() external;\r\n\r\n  function getAllRewardsAndRedirect(address owner) external;\r\n\r\n  function getPricePerFullShare() external view returns (uint256);\r\n\r\n  function getReward(address rt) external;\r\n\r\n  function getRewardTokenIndex(address rt) external view returns (uint256);\r\n\r\n  function initializeSmartVault(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address _controller,\r\n    address __underlying,\r\n    uint256 _duration,\r\n    bool _lockAllowed,\r\n    address _rewardToken,\r\n    uint256 _depositFee\r\n  ) external;\r\n\r\n  function lastTimeRewardApplicable(address rt) external view returns (uint256);\r\n\r\n  function lastUpdateTimeForToken(address) external view returns (uint256);\r\n\r\n  function lockAllowed() external view returns (bool);\r\n\r\n  function lockPenalty() external view returns (uint256);\r\n\r\n  function notifyRewardWithoutPeriodChange(address _rewardToken, uint256 _amount) external;\r\n\r\n  function notifyTargetRewardAmount(address _rewardToken, uint256 amount) external;\r\n\r\n  function overrideName(string memory value) external;\r\n\r\n  function overrideSymbol(string memory value) external;\r\n\r\n  function periodFinishForToken(address) external view returns (uint256);\r\n\r\n  function ppfsDecreaseAllowed() external view returns (bool);\r\n\r\n  function protectionMode() external view returns (bool);\r\n\r\n  function rebalance() external;\r\n\r\n  function removeRewardToken(address rt) external;\r\n\r\n  function rewardPerToken(address rt) external view returns (uint256);\r\n\r\n  function rewardPerTokenStoredForToken(address) external view returns (uint256);\r\n\r\n  function rewardRateForToken(address) external view returns (uint256);\r\n\r\n  function rewardTokens() external view returns (address[] memory);\r\n\r\n  function rewardTokensLength() external view returns (uint256);\r\n\r\n  function rewardsForToken(address, address) external view returns (uint256);\r\n\r\n  function setLockPenalty(uint256 _value) external;\r\n\r\n  function setRewardsRedirect(address owner, address receiver) external;\r\n\r\n  function setLockPeriod(uint256 _value) external;\r\n\r\n  function setStrategy(address newStrategy) external;\r\n\r\n  function setToInvest(uint256 _value) external;\r\n\r\n  function stop() external;\r\n\r\n  function strategy() external view returns (address);\r\n\r\n  function toInvest() external view returns (uint256);\r\n\r\n  function underlying() external view returns (address);\r\n\r\n  function underlyingBalanceInVault() external view returns (uint256);\r\n\r\n  function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n  function underlyingBalanceWithInvestmentForHolder(address holder) external view returns (uint256);\r\n\r\n  function underlyingUnit() external view returns (uint256);\r\n\r\n  function userBoostTs(address) external view returns (uint256);\r\n\r\n  function userLastDepositTs(address) external view returns (uint256);\r\n\r\n  function userLastWithdrawTs(address) external view returns (uint256);\r\n\r\n  function userLockTs(address) external view returns (uint256);\r\n\r\n  function userRewardPerTokenPaidForToken(address, address) external view returns (uint256);\r\n\r\n  function withdraw(uint256 numberOfShares) external;\r\n\r\n  function withdrawAllToVault() external;\r\n\r\n  function getAllRewardsFor(address rewardsReceiver) external;\r\n\r\n  function lockPeriod() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/integrations/tetu-v1/ITetuV1Controller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface ITetuV1Controller {\r\n\r\n\r\n  function VERSION() external view returns (string memory);\r\n\r\n  function addHardWorker(address _worker) external;\r\n\r\n  function addStrategiesToSplitter(\r\n    address _splitter,\r\n    address[] memory _strategies\r\n  ) external;\r\n\r\n  function addStrategy(address _strategy) external;\r\n\r\n  function addVaultsAndStrategies(\r\n    address[] memory _vaults,\r\n    address[] memory _strategies\r\n  ) external;\r\n\r\n  function announcer() external view returns (address);\r\n\r\n  function bookkeeper() external view returns (address);\r\n\r\n  function changeWhiteListStatus(address[] memory _targets, bool status)\r\n  external;\r\n\r\n  function controllerTokenMove(\r\n    address _recipient,\r\n    address _token,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  function dao() external view returns (address);\r\n\r\n  function distributor() external view returns (address);\r\n\r\n  function doHardWork(address _vault) external;\r\n\r\n  function feeRewardForwarder() external view returns (address);\r\n\r\n  function fund() external view returns (address);\r\n\r\n  function fundDenominator() external view returns (uint256);\r\n\r\n  function fundKeeperTokenMove(\r\n    address _fund,\r\n    address _token,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  function fundNumerator() external view returns (uint256);\r\n\r\n  function fundToken() external view returns (address);\r\n\r\n  function governance() external view returns (address);\r\n\r\n  function hardWorkers(address) external view returns (bool);\r\n\r\n  function initialize() external;\r\n\r\n  function isAllowedUser(address _adr) external view returns (bool);\r\n\r\n  function isDao(address _adr) external view returns (bool);\r\n\r\n  function isHardWorker(address _adr) external view returns (bool);\r\n\r\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\r\n\r\n  function isRewardDistributor(address _adr) external view returns (bool);\r\n\r\n  function isValidStrategy(address _strategy) external view returns (bool);\r\n\r\n  function isValidVault(address _vault) external view returns (bool);\r\n\r\n  function mintAndDistribute(uint256 totalAmount, bool mintAllAvailable)\r\n  external;\r\n\r\n  function mintHelper() external view returns (address);\r\n\r\n  function psDenominator() external view returns (uint256);\r\n\r\n  function psNumerator() external view returns (uint256);\r\n\r\n  function psVault() external view returns (address);\r\n\r\n  function pureRewardConsumers(address) external view returns (bool);\r\n\r\n  function rebalance(address _strategy) external;\r\n\r\n  function removeHardWorker(address _worker) external;\r\n\r\n  function rewardDistribution(address) external view returns (bool);\r\n\r\n  function rewardToken() external view returns (address);\r\n\r\n  function setAnnouncer(address _newValue) external;\r\n\r\n  function setBookkeeper(address newValue) external;\r\n\r\n  function setDao(address newValue) external;\r\n\r\n  function setDistributor(address _distributor) external;\r\n\r\n  function setFeeRewardForwarder(address _feeRewardForwarder) external;\r\n\r\n  function setFund(address _newValue) external;\r\n\r\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator)\r\n  external;\r\n\r\n  function setFundToken(address _newValue) external;\r\n\r\n  function setGovernance(address newValue) external;\r\n\r\n  function setMintHelper(address _newValue) external;\r\n\r\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator)\r\n  external;\r\n\r\n  function setPsVault(address _newValue) external;\r\n\r\n  function setPureRewardConsumers(address[] memory _targets, bool _flag)\r\n  external;\r\n\r\n  function setRewardDistribution(\r\n    address[] memory _newRewardDistribution,\r\n    bool _flag\r\n  ) external;\r\n\r\n  function setRewardToken(address _newValue) external;\r\n\r\n  function setVaultController(address _newValue) external;\r\n\r\n  function setVaultStrategyBatch(\r\n    address[] memory _vaults,\r\n    address[] memory _strategies\r\n  ) external;\r\n\r\n  function strategies(address) external view returns (bool);\r\n\r\n  function strategyTokenMove(\r\n    address _strategy,\r\n    address _token,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  function upgradeTetuProxyBatch(\r\n    address[] memory _contracts,\r\n    address[] memory _implementations\r\n  ) external;\r\n\r\n  function vaultController() external view returns (address);\r\n\r\n  function vaults(address) external view returns (bool);\r\n\r\n  function whiteList(address) external view returns (bool);\r\n}\r\n"
    },
    "contracts/integrations/uniswap/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title FixedPoint96\r\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\r\n/// @dev Used in SqrtPriceMath.sol\r\nlibrary FixedPoint96 {\r\n  uint8 internal constant RESOLUTION = 96;\r\n  uint256 internal constant Q96 = 0x1000000000000000000000000;\r\n}\r\n"
    },
    "contracts/integrations/uniswap/FullMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n  function mulDiv(\r\n    uint256 a,\r\n    uint256 b,\r\n    uint256 denominator\r\n  ) internal pure returns (uint256 result) {\r\n  unchecked {\r\n    // 512-bit multiply [prod1 prod0] = a * b\r\n    // Compute the product mod 2**256 and mod 2**256 - 1\r\n    // then use the Chinese Remainder Theorem to reconstruct\r\n    // the 512 bit result. The result is stored in two 256\r\n    // variables such that product = prod1 * 2**256 + prod0\r\n    uint256 prod0;\r\n    // Least significant 256 bits of the product\r\n    uint256 prod1;\r\n    // Most significant 256 bits of the product\r\n    assembly {\r\n      let mm := mulmod(a, b, not(0))\r\n      prod0 := mul(a, b)\r\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n    }\r\n\r\n    // Handle non-overflow cases, 256 by 256 division\r\n    if (prod1 == 0) {\r\n      require(denominator > 0);\r\n      assembly {\r\n        result := div(prod0, denominator)\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // Make sure the result is less than 2**256.\r\n    // Also prevents denominator == 0\r\n    require(denominator > prod1);\r\n\r\n    ///////////////////////////////////////////////\r\n    // 512 by 256 division.\r\n    ///////////////////////////////////////////////\r\n\r\n    // Make division exact by subtracting the remainder from [prod1 prod0]\r\n    // Compute remainder using mulmod\r\n    uint256 remainder;\r\n    assembly {\r\n      remainder := mulmod(a, b, denominator)\r\n    }\r\n    // Subtract 256 bit number from 512 bit number\r\n    assembly {\r\n      prod1 := sub(prod1, gt(remainder, prod0))\r\n      prod0 := sub(prod0, remainder)\r\n    }\r\n\r\n    // Factor powers of two out of denominator\r\n    // Compute largest power of two divisor of denominator.\r\n    // Always >= 1.\r\n    // EDIT for 0.8 compatibility:\r\n    // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\r\n    uint256 twos = denominator & (~denominator + 1);\r\n\r\n    // Divide denominator by power of two\r\n    assembly {\r\n      denominator := div(denominator, twos)\r\n    }\r\n\r\n    // Divide [prod1 prod0] by the factors of two\r\n    assembly {\r\n      prod0 := div(prod0, twos)\r\n    }\r\n    // Shift in bits from prod1 into prod0. For this we need\r\n    // to flip `twos` such that it is 2**256 / twos.\r\n    // If twos is zero, then it becomes one\r\n    assembly {\r\n      twos := add(div(sub(0, twos), twos), 1)\r\n    }\r\n    prod0 |= prod1 * twos;\r\n\r\n    // Invert denominator mod 2**256\r\n    // Now that denominator is an odd number, it has an inverse\r\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n    // Compute the inverse by starting with a seed that is correct\r\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n    uint256 inv = (3 * denominator) ^ 2;\r\n    // Now use Newton-Raphson iteration to improve the precision.\r\n    // Thanks to Hensel's lifting lemma, this also works in modular\r\n    // arithmetic, doubling the correct bits in each step.\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**8\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**16\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**32\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**64\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**128\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**256\r\n\r\n    // Because the division is now exact we can divide by multiplying\r\n    // with the modular inverse of denominator. This will give us the\r\n    // correct result modulo 2**256. Since the precoditions guarantee\r\n    // that the outcome is less than 2**256, this is the final result.\r\n    // We don't need to compute the high bits of the result and prod1\r\n    // is no longer required.\r\n    result = prod0 * inv;\r\n    return result;\r\n  }\r\n  }\r\n\r\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  function mulDivRoundingUp(\r\n    uint256 a,\r\n    uint256 b,\r\n    uint256 denominator\r\n  ) internal pure returns (uint256 result) {\r\n    result = mulDiv(a, b, denominator);\r\n    if (mulmod(a, b, denominator) > 0) {\r\n      require(result < type(uint256).max);\r\n      result++;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n  function feeTo() external view returns (address);\r\n\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n  function allPairs(uint) external view returns (address pair);\r\n\r\n  function allPairsLength() external view returns (uint);\r\n\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n  function setFeeTo(address) external;\r\n\r\n  function setFeeToSetter(address) external;\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n  function name() external pure returns (string memory);\r\n\r\n  function symbol() external pure returns (string memory);\r\n\r\n  function decimals() external pure returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint);\r\n\r\n  function balanceOf(address owner) external view returns (uint);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n\r\n  function approve(address spender, uint value) external returns (bool);\r\n\r\n  function transfer(address to, uint value) external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n  function nonces(address owner) external view returns (uint);\r\n\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n    address indexed sender,\r\n    uint amount0In,\r\n    uint amount1In,\r\n    uint amount0Out,\r\n    uint amount1Out,\r\n    address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n  function price0CumulativeLast() external view returns (uint);\r\n\r\n  function price1CumulativeLast() external view returns (uint);\r\n\r\n  function kLast() external view returns (uint);\r\n\r\n  function mint(address to) external returns (uint liquidity);\r\n\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n  function skim(address to) external;\r\n\r\n  function sync() external;\r\n\r\n  function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IUniswapV2Router01 {\r\n  function factory() external pure returns (address);\r\n\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint amountADesired,\r\n    uint amountBDesired,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint amountTokenDesired,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n  function removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountA, uint amountB);\r\n\r\n  function removeLiquidityETH(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountToken, uint amountETH);\r\n\r\n  function removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountA, uint amountB);\r\n\r\n  function removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountToken, uint amountETH);\r\n\r\n  function swapExactTokensForTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n\r\n  function swapTokensForExactTokens(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n\r\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n  external\r\n  payable\r\n  returns (uint[] memory amounts);\r\n\r\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n  external\r\n  returns (uint[] memory amounts);\r\n\r\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n  external\r\n  returns (uint[] memory amounts);\r\n\r\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n  external\r\n  payable\r\n  returns (uint[] memory amounts);\r\n\r\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport './IUniswapV2Router01.sol';\r\n\r\n/// @notice Roter release 2, currently recommended version\r\n/// @dev https://docs.quickswap.exchange/reference/smart-contracts/router02\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountETH);\r\n\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountETH);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external;\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title Callback for IUniswapV3PoolActions#mint\r\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\r\ninterface IUniswapV3MintCallback {\r\n  /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\r\n  /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\r\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\r\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\r\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\r\n  function uniswapV3MintCallback(\r\n    uint256 amount0Owed,\r\n    uint256 amount1Owed,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\nimport './IUniswapV3PoolImmutables.sol';\r\nimport './IUniswapV3PoolState.sol';\r\nimport './IUniswapV3PoolDerivedState.sol';\r\nimport './IUniswapV3PoolActions.sol';\r\nimport './IUniswapV3PoolOwnerActions.sol';\r\nimport './IUniswapV3PoolEvents.sol';\r\n\r\n/// @title The interface for a Uniswap V3 Pool\r\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\r\n/// to the ERC20 specification\r\n/// @dev The pool interface is broken up into many smaller pieces\r\ninterface IUniswapV3Pool is\r\nIUniswapV3PoolImmutables,\r\nIUniswapV3PoolState,\r\nIUniswapV3PoolDerivedState,\r\nIUniswapV3PoolActions,\r\nIUniswapV3PoolOwnerActions,\r\nIUniswapV3PoolEvents\r\n{}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title Permissionless pool actions\r\n/// @notice Contains pool methods that can be called by anyone\r\ninterface IUniswapV3PoolActions {\r\n  /// @notice Sets the initial price for the pool\r\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\r\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\r\n  function initialize(uint160 sqrtPriceX96) external;\r\n\r\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\r\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\r\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\r\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\r\n  /// @param recipient The address for which the liquidity will be created\r\n  /// @param tickLower The lower tick of the position in which to add liquidity\r\n  /// @param tickUpper The upper tick of the position in which to add liquidity\r\n  /// @param amount The amount of liquidity to mint\r\n  /// @param data Any data that should be passed through to the callback\r\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n  function mint(\r\n    address recipient,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount,\r\n    bytes calldata data\r\n  ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  /// @notice Collects tokens owed to a position\r\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\r\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\r\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\r\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\r\n  /// @param recipient The address which should receive the fees collected\r\n  /// @param tickLower The lower tick of the position for which to collect fees\r\n  /// @param tickUpper The upper tick of the position for which to collect fees\r\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\r\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\r\n  /// @return amount0 The amount of fees collected in token0\r\n  /// @return amount1 The amount of fees collected in token1\r\n  function collect(\r\n    address recipient,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount0Requested,\r\n    uint128 amount1Requested\r\n  ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\r\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\r\n  /// @dev Fees must be collected separately via a call to #collect\r\n  /// @param tickLower The lower tick of the position for which to burn liquidity\r\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\r\n  /// @param amount How much liquidity to burn\r\n  /// @return amount0 The amount of token0 sent to the recipient\r\n  /// @return amount1 The amount of token1 sent to the recipient\r\n  function burn(\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount\r\n  ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  /// @notice Swap token0 for token1, or token1 for token0\r\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\r\n  /// @param recipient The address to receive the output of the swap\r\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n  /// @param data Any data to be passed through to the callback\r\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n  function swap(\r\n    address recipient,\r\n    bool zeroForOne,\r\n    int256 amountSpecified,\r\n    uint160 sqrtPriceLimitX96,\r\n    bytes calldata data\r\n  ) external returns (int256 amount0, int256 amount1);\r\n\r\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\r\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\r\n  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\r\n  /// with 0 amount{0,1} and sending the donation amount(s) from the callback\r\n  /// @param recipient The address which will receive the token0 and token1 amounts\r\n  /// @param amount0 The amount of token0 to send\r\n  /// @param amount1 The amount of token1 to send\r\n  /// @param data Any data to be passed through to the callback\r\n  function flash(\r\n    address recipient,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\r\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\r\n  /// the input observationCardinalityNext.\r\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\r\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title Pool state that is not stored\r\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\r\n/// blockchain. The functions here may have variable gas costs.\r\ninterface IUniswapV3PoolDerivedState {\r\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\r\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\r\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\r\n  /// you must call it with secondsAgos = [3600, 0].\r\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\r\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\r\n  /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\r\n  /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\r\n  /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\r\n  /// timestamp\r\n  function observe(uint32[] calldata secondsAgos)\r\n  external\r\n  view\r\n  returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\r\n\r\n  /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\r\n  /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\r\n  /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\r\n  /// snapshot is taken and the second snapshot is taken.\r\n  /// @param tickLower The lower tick of the range\r\n  /// @param tickUpper The upper tick of the range\r\n  /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\r\n  /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\r\n  /// @return secondsInside The snapshot of seconds per liquidity for the range\r\n  function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\r\n  external\r\n  view\r\n  returns (\r\n    int56 tickCumulativeInside,\r\n    uint160 secondsPerLiquidityInsideX128,\r\n    uint32 secondsInside\r\n  );\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title Events emitted by a pool\r\n/// @notice Contains all events emitted by the pool\r\ninterface IUniswapV3PoolEvents {\r\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\r\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\r\n  /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\r\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\r\n  event Initialize(uint160 sqrtPriceX96, int24 tick);\r\n\r\n  /// @notice Emitted when liquidity is minted for a given position\r\n  /// @param sender The address that minted the liquidity\r\n  /// @param owner The owner of the position and recipient of any minted liquidity\r\n  /// @param tickLower The lower tick of the position\r\n  /// @param tickUpper The upper tick of the position\r\n  /// @param amount The amount of liquidity minted to the position range\r\n  /// @param amount0 How much token0 was required for the minted liquidity\r\n  /// @param amount1 How much token1 was required for the minted liquidity\r\n  event Mint(\r\n    address sender,\r\n    address indexed owner,\r\n    int24 indexed tickLower,\r\n    int24 indexed tickUpper,\r\n    uint128 amount,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  );\r\n\r\n  /// @notice Emitted when fees are collected by the owner of a position\r\n  /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\r\n  /// @param owner The owner of the position for which fees are collected\r\n  /// @param tickLower The lower tick of the position\r\n  /// @param tickUpper The upper tick of the position\r\n  /// @param amount0 The amount of token0 fees collected\r\n  /// @param amount1 The amount of token1 fees collected\r\n  event Collect(\r\n    address indexed owner,\r\n    address recipient,\r\n    int24 indexed tickLower,\r\n    int24 indexed tickUpper,\r\n    uint128 amount0,\r\n    uint128 amount1\r\n  );\r\n\r\n  /// @notice Emitted when a position's liquidity is removed\r\n  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\r\n  /// @param owner The owner of the position for which liquidity is removed\r\n  /// @param tickLower The lower tick of the position\r\n  /// @param tickUpper The upper tick of the position\r\n  /// @param amount The amount of liquidity to remove\r\n  /// @param amount0 The amount of token0 withdrawn\r\n  /// @param amount1 The amount of token1 withdrawn\r\n  event Burn(\r\n    address indexed owner,\r\n    int24 indexed tickLower,\r\n    int24 indexed tickUpper,\r\n    uint128 amount,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  );\r\n\r\n  /// @notice Emitted by the pool for any swaps between token0 and token1\r\n  /// @param sender The address that initiated the swap call, and that received the callback\r\n  /// @param recipient The address that received the output of the swap\r\n  /// @param amount0 The delta of the token0 balance of the pool\r\n  /// @param amount1 The delta of the token1 balance of the pool\r\n  /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\r\n  /// @param liquidity The liquidity of the pool after the swap\r\n  /// @param tick The log base 1.0001 of price of the pool after the swap\r\n  event Swap(\r\n    address indexed sender,\r\n    address indexed recipient,\r\n    int256 amount0,\r\n    int256 amount1,\r\n    uint160 sqrtPriceX96,\r\n    uint128 liquidity,\r\n    int24 tick\r\n  );\r\n\r\n  /// @notice Emitted by the pool for any flashes of token0/token1\r\n  /// @param sender The address that initiated the swap call, and that received the callback\r\n  /// @param recipient The address that received the tokens from flash\r\n  /// @param amount0 The amount of token0 that was flashed\r\n  /// @param amount1 The amount of token1 that was flashed\r\n  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\r\n  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\r\n  event Flash(\r\n    address indexed sender,\r\n    address indexed recipient,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    uint256 paid0,\r\n    uint256 paid1\r\n  );\r\n\r\n  /// @notice Emitted by the pool for increases to the number of observations that can be stored\r\n  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\r\n  /// just before a mint/swap/burn.\r\n  /// @param observationCardinalityNextOld The previous value of the next observation cardinality\r\n  /// @param observationCardinalityNextNew The updated value of the next observation cardinality\r\n  event IncreaseObservationCardinalityNext(\r\n    uint16 observationCardinalityNextOld,\r\n    uint16 observationCardinalityNextNew\r\n  );\r\n\r\n  /// @notice Emitted when the protocol fee is changed by the pool\r\n  /// @param feeProtocol0Old The previous value of the token0 protocol fee\r\n  /// @param feeProtocol1Old The previous value of the token1 protocol fee\r\n  /// @param feeProtocol0New The updated value of the token0 protocol fee\r\n  /// @param feeProtocol1New The updated value of the token1 protocol fee\r\n  event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\r\n\r\n  /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\r\n  /// @param sender The address that collects the protocol fees\r\n  /// @param recipient The address that receives the collected protocol fees\r\n  /// @param amount0 The amount of token0 protocol fees that is withdrawn\r\n  /// @param amount0 The amount of token1 protocol fees that is withdrawn\r\n  event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title Pool state that never changes\r\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\r\ninterface IUniswapV3PoolImmutables {\r\n  /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\r\n  /// @return The contract address\r\n  function factory() external view returns (address);\r\n\r\n  /// @notice The first of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token0() external view returns (address);\r\n\r\n  /// @notice The second of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token1() external view returns (address);\r\n\r\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\r\n  /// @return The fee\r\n  function fee() external view returns (uint24);\r\n\r\n  /// @notice The pool tick spacing\r\n  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\r\n  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\r\n  /// This value is an int24 to avoid casting even though it is always positive.\r\n  /// @return The tick spacing\r\n  function tickSpacing() external view returns (int24);\r\n\r\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n  /// @return The max amount of liquidity per tick\r\n  function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title Permissioned pool actions\r\n/// @notice Contains pool methods that may only be called by the factory owner\r\ninterface IUniswapV3PoolOwnerActions {\r\n  /// @notice Set the denominator of the protocol's % share of the fees\r\n  /// @param feeProtocol0 new protocol fee for token0 of the pool\r\n  /// @param feeProtocol1 new protocol fee for token1 of the pool\r\n  function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\r\n\r\n  /// @notice Collect the protocol fee accrued to the pool\r\n  /// @param recipient The address to which collected protocol fees should be sent\r\n  /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\r\n  /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\r\n  /// @return amount0 The protocol fee collected in token0\r\n  /// @return amount1 The protocol fee collected in token1\r\n  function collectProtocol(\r\n    address recipient,\r\n    uint128 amount0Requested,\r\n    uint128 amount1Requested\r\n  ) external returns (uint128 amount0, uint128 amount1);\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title Pool state that can change\r\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\r\n/// per transaction\r\ninterface IUniswapV3PoolState {\r\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\r\n  /// when accessed externally.\r\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\r\n  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\r\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\r\n  /// boundary.\r\n  /// observationIndex The index of the last oracle observation that was written,\r\n  /// observationCardinality The current maximum number of observations stored in the pool,\r\n  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\r\n  /// feeProtocol The protocol fee for both tokens of the pool.\r\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\r\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\r\n  /// unlocked Whether the pool is currently locked to reentrancy\r\n  function slot0()\r\n  external\r\n  view\r\n  returns (\r\n    uint160 sqrtPriceX96,\r\n    int24 tick,\r\n    uint16 observationIndex,\r\n    uint16 observationCardinality,\r\n    uint16 observationCardinalityNext,\r\n    uint8 feeProtocol,\r\n    bool unlocked\r\n  );\r\n\r\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\r\n  /// @dev This value can overflow the uint256\r\n  function feeGrowthGlobal0X128() external view returns (uint256);\r\n\r\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\r\n  /// @dev This value can overflow the uint256\r\n  function feeGrowthGlobal1X128() external view returns (uint256);\r\n\r\n  /// @notice The amounts of token0 and token1 that are owed to the protocol\r\n  /// @dev Protocol fees will never exceed uint128 max in either token\r\n  function protocolFees() external view returns (uint128 token0, uint128 token1);\r\n\r\n  /// @notice The currently in range liquidity available to the pool\r\n  /// @dev This value has no relationship to the total liquidity across all ticks\r\n  function liquidity() external view returns (uint128);\r\n\r\n  /// @notice Look up information about a specific tick in the pool\r\n  /// @param tick The tick to look up\r\n  /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\r\n  /// tick upper,\r\n  /// liquidityNet how much liquidity changes when the pool price crosses the tick,\r\n  /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\r\n  /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\r\n  /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\r\n  /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\r\n  /// secondsOutside the seconds spent on the other side of the tick from the current tick,\r\n  /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\r\n  /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\r\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\r\n  /// a specific position.\r\n  function ticks(int24 tick)\r\n  external\r\n  view\r\n  returns (\r\n    uint128 liquidityGross,\r\n    int128 liquidityNet,\r\n    uint256 feeGrowthOutside0X128,\r\n    uint256 feeGrowthOutside1X128,\r\n    int56 tickCumulativeOutside,\r\n    uint160 secondsPerLiquidityOutsideX128,\r\n    uint32 secondsOutside,\r\n    bool initialized\r\n  );\r\n\r\n  /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\r\n  function tickBitmap(int16 wordPosition) external view returns (uint256);\r\n\r\n  /// @notice Returns the information about a position by the position's key\r\n  /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\r\n  /// @return _liquidity The amount of liquidity in the position,\r\n  /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\r\n  /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\r\n  /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\r\n  /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\r\n  function positions(bytes32 key)\r\n  external\r\n  view\r\n  returns (\r\n    uint128 _liquidity,\r\n    uint256 feeGrowthInside0LastX128,\r\n    uint256 feeGrowthInside1LastX128,\r\n    uint128 tokensOwed0,\r\n    uint128 tokensOwed1\r\n  );\r\n\r\n  /// @notice Returns data about a specific observation index\r\n  /// @param index The element of the observations array to fetch\r\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\r\n  /// ago, rather than at a specific index in the array.\r\n  /// @return blockTimestamp The timestamp of the observation,\r\n  /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\r\n  /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\r\n  /// Returns initialized whether the observation has been initialized and the values are safe to use\r\n  function observations(uint256 index)\r\n  external\r\n  view\r\n  returns (\r\n    uint32 blockTimestamp,\r\n    int56 tickCumulative,\r\n    uint160 secondsPerLiquidityCumulativeX128,\r\n    bool initialized\r\n  );\r\n}\r\n"
    },
    "contracts/integrations/uniswap/IUniswapV3Quoter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Restored from 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6\r\ninterface IUniswapV3Quoter {\r\n    function WETH9() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function quoteExactInput(bytes memory path, uint256 amountIn)\r\n    external\r\n    returns (uint256 amountOut);\r\n\r\n    function quoteExactInputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountIn,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountOut);\r\n\r\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\r\n    external\r\n    returns (uint256 amountIn);\r\n\r\n    function quoteExactOutputSingle(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint24 fee,\r\n        uint256 amountOut,\r\n        uint160 sqrtPriceLimitX96\r\n    ) external returns (uint256 amountIn);\r\n\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes memory path\r\n    ) external view;\r\n}"
    },
    "contracts/integrations/uniswap/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.8.17;\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n  /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n  function uniswapV3SwapCallback(\r\n    int256 amount0Delta,\r\n    int256 amount1Delta,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n"
    },
    "contracts/integrations/uniswap/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\nimport \"./FullMath.sol\";\r\nimport \"./FixedPoint96.sol\";\r\n\r\n/// @title Liquidity amount functions\r\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\r\nlibrary LiquidityAmounts {\r\n  function toUint128(uint256 x) private pure returns (uint128 y) {\r\n    require((y = uint128(x)) == x);\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount0 The amount0 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function getLiquidityForAmount0(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint256 amount0\r\n  ) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96)\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    uint256 intermediate =\r\n    FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\r\n    return\r\n    toUint128(\r\n      FullMath.mulDiv(\r\n        amount0,\r\n        intermediate,\r\n        sqrtRatioBX96 - sqrtRatioAX96\r\n      )\r\n    );\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount1 The amount1 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function getLiquidityForAmount1(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint256 amount1\r\n  ) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96)\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    return\r\n    toUint128(\r\n      FullMath.mulDiv(\r\n        amount1,\r\n        FixedPoint96.Q96,\r\n        sqrtRatioBX96 - sqrtRatioAX96\r\n      )\r\n    );\r\n  }\r\n\r\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getLiquidityForAmounts(\r\n    uint160 sqrtRatioX96,\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  ) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96)\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      liquidity = getLiquidityForAmount0(\r\n        sqrtRatioAX96,\r\n        sqrtRatioBX96,\r\n        amount0\r\n      );\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      uint128 liquidity0 =\r\n      getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n      uint128 liquidity1 =\r\n      getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n\r\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = getLiquidityForAmount1(\r\n        sqrtRatioAX96,\r\n        sqrtRatioBX96,\r\n        amount1\r\n      );\r\n    }\r\n  }\r\n\r\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount0 The amount0\r\n  function getAmount0ForLiquidity(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint128 liquidity\r\n  ) internal pure returns (uint256 amount0) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96)\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    return\r\n    FullMath.mulDiv(\r\n      uint256(liquidity) << FixedPoint96.RESOLUTION,\r\n      sqrtRatioBX96 - sqrtRatioAX96,\r\n      sqrtRatioBX96\r\n    ) / sqrtRatioAX96;\r\n  }\r\n\r\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount1 The amount1\r\n  function getAmount1ForLiquidity(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint128 liquidity\r\n  ) internal pure returns (uint256 amount1) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96)\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    return\r\n    FullMath.mulDiv(\r\n      liquidity,\r\n      sqrtRatioBX96 - sqrtRatioAX96,\r\n      FixedPoint96.Q96\r\n    );\r\n  }\r\n\r\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getAmountsForLiquidity(\r\n    uint160 sqrtRatioX96,\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint128 liquidity\r\n  ) internal pure returns (uint256 amount0, uint256 amount1) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96)\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      amount0 = getAmount0ForLiquidity(\r\n        sqrtRatioAX96,\r\n        sqrtRatioBX96,\r\n        liquidity\r\n      );\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      amount0 = getAmount0ForLiquidity(\r\n        sqrtRatioX96,\r\n        sqrtRatioBX96,\r\n        liquidity\r\n      );\r\n      amount1 = getAmount1ForLiquidity(\r\n        sqrtRatioAX96,\r\n        sqrtRatioX96,\r\n        liquidity\r\n      );\r\n    } else {\r\n      amount1 = getAmount1ForLiquidity(\r\n        sqrtRatioAX96,\r\n        sqrtRatioBX96,\r\n        liquidity\r\n      );\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/integrations/uniswap/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.17;\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\nlibrary TickMath {\r\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n  int24 internal constant MIN_TICK = - 887272;\r\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n  int24 internal constant MAX_TICK = - MIN_TICK;\r\n\r\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n  uint160 internal constant MAX_SQRT_RATIO =\r\n  1461446703485210103287273052203988822378723970342;\r\n\r\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n  /// @dev Throws if |tick| > max tick\r\n  /// @param tick The input tick for the above formula\r\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n  /// at the given tick\r\n  function getSqrtRatioAtTick(int24 tick)\r\n  internal\r\n  pure\r\n  returns (uint160 sqrtPriceX96)\r\n  {\r\n    uint256 absTick =\r\n    tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\r\n\r\n    // EDIT: 0.8 compatibility\r\n    require(absTick <= uint256(int256(MAX_TICK)), \"T\");\r\n\r\n    uint256 ratio =\r\n    absTick & 0x1 != 0\r\n    ? 0xfffcb933bd6fad37aa2d162d1a594001\r\n    : 0x100000000000000000000000000000000;\r\n    if (absTick & 0x2 != 0)\r\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n    if (absTick & 0x4 != 0)\r\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n    if (absTick & 0x8 != 0)\r\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n    if (absTick & 0x10 != 0)\r\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n    if (absTick & 0x20 != 0)\r\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n    if (absTick & 0x40 != 0)\r\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n    if (absTick & 0x80 != 0)\r\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n    if (absTick & 0x100 != 0)\r\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n    if (absTick & 0x200 != 0)\r\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n    if (absTick & 0x400 != 0)\r\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n    if (absTick & 0x800 != 0)\r\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n    if (absTick & 0x1000 != 0)\r\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n    if (absTick & 0x2000 != 0)\r\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n    if (absTick & 0x4000 != 0)\r\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n    if (absTick & 0x8000 != 0)\r\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n    if (absTick & 0x10000 != 0)\r\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n    if (absTick & 0x20000 != 0)\r\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n    if (absTick & 0x40000 != 0)\r\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n    if (absTick & 0x80000 != 0)\r\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n    if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n    sqrtPriceX96 = uint160(\r\n      (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\r\n    );\r\n  }\r\n\r\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n  /// ever return.\r\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n  function getTickAtSqrtRatio(uint160 sqrtPriceX96)\r\n  internal\r\n  pure\r\n  returns (int24 tick)\r\n  {\r\n    // second inequality must be < because the price can never reach the price at the max tick\r\n    require(\r\n      sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\r\n      \"R\"\r\n    );\r\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n    uint256 r = ratio;\r\n    uint256 msb = 0;\r\n\r\n    assembly {\r\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(5, gt(r, 0xFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(4, gt(r, 0xFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(3, gt(r, 0xFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(2, gt(r, 0xF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(1, gt(r, 0x3))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := gt(r, 0x1)\r\n      msb := or(msb, f)\r\n    }\r\n\r\n    if (msb >= 128) r = ratio >> (msb - 127);\r\n    else r = ratio << (127 - msb);\r\n\r\n    int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(63, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(62, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(61, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(60, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(59, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(58, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(57, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(56, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(55, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(54, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(53, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(52, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(51, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(50, f))\r\n    }\r\n\r\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141;\r\n    // 128.128 number\r\n\r\n    int24 tickLow =\r\n    int24(\r\n      (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\r\n    );\r\n    int24 tickHi =\r\n    int24(\r\n      (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\r\n    );\r\n\r\n    tick = tickLow == tickHi\r\n    ? tickLow\r\n    : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\r\n    ? tickHi\r\n    : tickLow;\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/IConverterStrategyBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\n\r\n/// @notice Allow to share declaration of ConverterStrategyBaseState with libraries\r\ninterface IConverterStrategyBase {\r\n  struct ConverterStrategyBaseState {\r\n    /// @dev Amount of underlying assets invested to the pool.\r\n    uint investedAssets;\r\n\r\n    /// @dev Linked Tetu Converter\r\n    ITetuConverter converter;\r\n\r\n    /// @notice Percent of asset amount that can be not invested, it's allowed to just keep it on balance\r\n    ///         decimals = {DENOMINATOR}\r\n    /// @dev We need this threshold to avoid numerous conversions of small amounts\r\n    uint reinvestThresholdPercent;\r\n\r\n    /// @notice Current debt to the insurance.\r\n    ///         It's increased when insurance covers any losses related to swapping and borrow-debts-paying.\r\n    ///         It's not changed when insurance covers losses/receives profit that appeared after price changing.\r\n    ///         The strategy covers this debt on each hardwork using the profit (rewards, fees)\r\n    int debtToInsurance;\r\n\r\n    /// @notice reserve space for future needs\r\n    uint[50-1] __gap;\r\n  }\r\n}"
    },
    "contracts/interfaces/IFarmingStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IFarmingStrategy {\r\n  function canFarm() external view returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/IPairBasedDefaultStateProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Provides access to getDefaultState() of a pair-based strategy\r\ninterface IPairBasedDefaultStateProvider {\r\n  /// @notice Returns the current state of the contract\r\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\r\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  /// @return nums [totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]\r\n  /// @return boolValues [isStablePool, depositorSwapTokens]\r\n  function getDefaultState() external view returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  );\r\n}"
    },
    "contracts/interfaces/IPairBasedStrategyReaderAccess.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IPairBasedDefaultStateProvider.sol\";\r\n\r\n/// @notice Interface required to implement PairBasedStrategyReader\r\ninterface IPairBasedStrategyReaderAccess is IPairBasedDefaultStateProvider {\r\n  function converter() external view returns (address);\r\n  function splitter() external view returns (address);\r\n  function totalAssets() external view returns (uint);\r\n  function asset() external view returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/IPoolProportionsProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IPoolProportionsProvider {\r\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\r\n  /// @return Proportion of the not-underlying [0...1e18]\r\n  function getPropNotUnderlying18() external view returns (uint);\r\n}\r\n"
    },
    "contracts/interfaces/IRebalancingStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IRebalancingStrategy {\r\n    function needRebalance() external view returns (bool);\r\n    function rebalance() external;\r\n}\r\n"
    },
    "contracts/interfaces/IRebalancingV2Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IPairBasedDefaultStateProvider.sol\";\r\nimport \"./ISetupPairBasedStrategy.sol\";\r\n\r\ninterface IRebalancingV2Strategy is IPairBasedDefaultStateProvider, ISetupPairBasedStrategy {\r\n  function needRebalance() external view returns (bool);\r\n\r\n  /// @notice Rebalance using borrow/repay only, no swaps\r\n  /// @param checkNeedRebalance Revert if rebalance is not needed. Pass false to deposit after withdrawByAgg-iterations\r\n  function rebalanceNoSwaps(bool checkNeedRebalance) external;\r\n\r\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\r\n  function quoteWithdrawByAgg(bytes memory planEntryData) external returns (address tokenToSwap, uint amountToSwap);\r\n\r\n  /// @notice Make withdraw iteration: [exit from the pool], [make 1 swap], [repay a debt], [enter to the pool]\r\n  ///         Typical sequence of the actions is: exit from the pool, make 1 swap, repay 1 debt.\r\n  ///         You can enter to the pool if you are sure that you won't have borrow + repay on AAVE3 in the same block.\r\n  /// @dev All swap-by-agg data should be prepared using {quoteWithdrawByAgg} off-chain\r\n  /// @param tokenToSwap_ What token should be swapped to other\r\n  /// @param aggregator_ Aggregator that should be used on next swap. 0 - use liquidator\r\n  /// @param amountToSwap_ Amount that should be swapped. 0 - no swap\r\n  /// @param swapData Swap rote that was prepared off-chain.\r\n  /// @param planEntryData PLAN_XXX + additional data, see IterationPlanKinds\r\n  /// @param entryToPool Allow to enter to the pool at the end. Use false if you are going to make several iterations.\r\n  ///                    It's possible to enter back to the pool by calling {rebalanceNoSwaps} at any moment\r\n  ///                    0 - not allowed, 1 - allowed, 2 - allowed only if completed\r\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions.\r\n  function withdrawByAggStep(\r\n    address tokenToSwap_,\r\n    address aggregator_,\r\n    uint amountToSwap_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    uint entryToPool\r\n  ) external returns (bool completed);\r\n\r\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\r\n  /// @return Proportion of the not-underlying [0...1e18]\r\n  function getPropNotUnderlying18() external view returns (uint);\r\n}\r\n"
    },
    "contracts/interfaces/ISetupPairBasedStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Functions to initialize pair-based strategies\r\ninterface ISetupPairBasedStrategy {\r\n\r\n  /// @notice Manually set status of the fuse\r\n  /// @param status See PairBasedStrategyLib.FuseStatus enum for possible values\r\n  function setFuseStatus(uint status) external;\r\n\r\n  /// @notice Set thresholds for the fuse: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\r\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\r\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\r\n  /// @param values Price thresholds: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  function setFuseThresholds(uint[4] memory values) external;\r\n  function setStrategyProfitHolder(address strategyProfitHolder) external;\r\n\r\n  /// @notice Set withdrawDone value.\r\n  ///         When a fuse was triggered ON, all debts should be closed and asset should be converted to underlying.\r\n  ///         After completion of the conversion withdrawDone can be set to 1.\r\n  ///         So, {getFuseStatus} will return  withdrawDone=1 and you will know, that withdraw is not required\r\n  /// @param done 0 - full withdraw required, 1 - full withdraw was done\r\n  function setWithdrawDone(uint done) external;\r\n}\r\n"
    },
    "contracts/libs/AppErrors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n/// @notice List of all errors generated by the application\r\n///         Each error should have unique code TS-XXX and descriptive comment\r\nlibrary AppErrors {\r\n  /// @notice Provided address should be not zero\r\n  string public constant ZERO_ADDRESS = \"TS-1 zero address\";\r\n\r\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\r\n  string public constant UNISWAP_PAIR_NOT_FOUND = \"TS-2 pair not found\";\r\n\r\n  /// @notice Lengths not matched\r\n  string public constant WRONG_LENGTHS = \"TS-4 wrong lengths\";\r\n\r\n  /// @notice Unexpected zero balance\r\n  string public constant ZERO_BALANCE = \"TS-5 zero balance\";\r\n\r\n  string public constant ITEM_NOT_FOUND = \"TS-6 not found\";\r\n\r\n  string public constant NOT_ENOUGH_BALANCE = \"TS-7 not enough balance\";\r\n\r\n  /// @notice Price oracle returns zero price\r\n  string public constant ZERO_PRICE = \"TS-8 zero price\";\r\n\r\n  string public constant WRONG_VALUE = \"TS-9 wrong value\";\r\n\r\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\r\n  string public constant ZERO_AMOUNT_BORROWED = \"TS-10 zero borrowed amount\";\r\n\r\n  string public constant WITHDRAW_TOO_MUCH = \"TS-11 try to withdraw too much\";\r\n\r\n  string public constant UNKNOWN_ENTRY_KIND = \"TS-12 unknown entry kind\";\r\n\r\n  string public constant ONLY_TETU_CONVERTER = \"TS-13 only TetuConverter\";\r\n\r\n  string public constant WRONG_ASSET = \"TS-14 wrong asset\";\r\n\r\n  string public constant NO_LIQUIDATION_ROUTE = \"TS-15 No liquidation route\";\r\n\r\n  string public constant PRICE_IMPACT = \"TS-16 price impact\";\r\n\r\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\r\n  string public constant REPAY_MAKES_SWAP = \"TS-17 can not convert back\";\r\n\r\n  string public constant NO_INVESTMENTS = \"TS-18 no investments\";\r\n\r\n  string public constant INCORRECT_LENGTHS = \"TS-19 lengths\";\r\n\r\n  /// @notice We expect increasing of the balance, but it was decreased\r\n  string public constant BALANCE_DECREASE = \"TS-20 balance decrease\";\r\n\r\n  /// @notice Prices changed and invested assets amount was increased on S, value of S is too high\r\n  string public constant EARNED_AMOUNT_TOO_HIGH = \"TS-21 earned too high\";\r\n\r\n  string public constant GOVERNANCE_ONLY = \"TS-22 governance only\";\r\n\r\n  string public constant ZERO_VALUE = \"TS-24 zero value\";\r\n\r\n  string public constant INCORRECT_SWAP_BY_AGG_PARAM = \"TS-25 swap by agg\";\r\n\r\n  string public constant OVER_COLLATERAL_DETECTED = \"TS-27 over-collateral\";\r\n\r\n  string public constant NOT_IMPLEMENTED = \"TS-28 not implemented\";\r\n\r\n  /// @notice You are not allowed to make direct debt if a NOT-DUST reverse debt exists and visa verse.\r\n  string public constant OPPOSITE_DEBT_EXISTS = \"TS-29 opposite debt exists\";\r\n\r\n  string public constant INVALID_VALUE = \"TS-30 invalid value\";\r\n\r\n  string public constant TOO_HIGH = \"TS-32 too high value\";\r\n\r\n  /// @notice BorrowLib has recursive call, sub-calls are not allowed\r\n  ///         This error can happen if allowed proportion is too small, i.e. 0.0004 : (1-0.0004)\r\n  ///         Such situation can happen if amount to swap is almost equal to the amount of the token in the current tick,\r\n  ///         so swap will move us close to the border between ticks.\r\n  ///         It was decided, that it's ok to have revert in that case\r\n  ///         We can change this behavior by changing BorrowLib.rebalanceRepayBorrow implementation:\r\n  ///             if amount-to-repay passed to _repayDebt is too small to be used,\r\n  ///             we should increase it min amount required to make repay successfully (amount must be > threshold)\r\n  ///         Previously it was error NOT_ALLOWED = \"TS23: not allowed\", see issues SCB-777, SCB-818\r\n  string public constant TOO_DEEP_RECURSION_BORROW_LIB = \"TS-33 too deep recursion\";\r\n}\r\n"
    },
    "contracts/libs/AppLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\";\r\n\r\n/// @notice Common internal utils\r\nlibrary AppLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n  /// @notice 1% gap to cover possible liquidation inefficiency\r\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\r\n  uint internal constant GAP_CONVERSION = 1_000;\r\n  /// @dev Absolute value for any token\r\n  uint internal constant DEFAULT_LIQUIDATION_THRESHOLD = 100_000;\r\n  uint internal constant DENOMINATOR = 100_000;\r\n\r\n  /// @notice Any amount less than the following is dust\r\n  uint public constant DUST_AMOUNT_TOKENS = 100;\r\n\r\n  /// @notice Unchecked increment for for-cycles\r\n  function uncheckedInc(uint i) internal pure returns (uint) {\r\n    unchecked {\r\n      return i + 1;\r\n    }\r\n  }\r\n\r\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\r\n  /// @dev Should NOT be used for third-party pools\r\n  function approveIfNeeded(address token, uint amount, address spender) internal {\r\n    if (IERC20(token).allowance(address(this), spender) < amount) {\r\n      IERC20(token).safeApprove(spender, 0);\r\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\r\n      IERC20(token).safeApprove(spender, 2 ** 255);\r\n    }\r\n  }\r\n\r\n  function balance(address token) internal view returns (uint) {\r\n    return IERC20(token).balanceOf(address(this));\r\n  }\r\n\r\n  /// @return prices Asset prices in USD, decimals 18\r\n  /// @return decs 10**decimals\r\n  function _getPricesAndDecs(IPriceOracle priceOracle, address[] memory tokens_, uint len) internal view returns (\r\n    uint[] memory prices,\r\n    uint[] memory decs\r\n  ) {\r\n    prices = new uint[](len);\r\n    decs = new uint[](len);\r\n    {\r\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n        decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\r\n        prices[i] = priceOracle.getAssetPrice(tokens_[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\r\n  function getAssetIndex(address[] memory tokens_, address asset_) internal pure returns (uint) {\r\n    uint len = tokens_.length;\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (tokens_[i] == asset_) {\r\n        return i;\r\n      }\r\n    }\r\n    return type(uint).max;\r\n  }\r\n\r\n  function _getLiquidator(address controller_) internal view returns (ITetuLiquidator) {\r\n    return ITetuLiquidator(IController(controller_).liquidator());\r\n  }\r\n\r\n  function _getPriceOracle(ITetuConverter converter_) internal view returns (IPriceOracle) {\r\n    return IPriceOracle(IConverterController(converter_.controller()).priceOracle());\r\n  }\r\n\r\n  /// @notice Calculate liquidation threshold, use default value if the threshold is not set\r\n  ///         It's allowed to set any not-zero threshold, it this case default value is not used\r\n  /// @dev This function should be applied to the threshold at the moment of the reading its value from the storage.\r\n  ///      So, if we pass {mapping(address => uint) storage liquidationThresholds}, the threshold can be zero\r\n  ///      bug if we pass {uint liquidationThreshold} to a function, the threshold should be not zero\r\n  function _getLiquidationThreshold(uint threshold) internal pure returns (uint) {\r\n    return threshold == 0\r\n      ? AppLib.DEFAULT_LIQUIDATION_THRESHOLD\r\n      : threshold;\r\n  }\r\n\r\n  /// @notice Return a-b OR zero if a < b\r\n  function sub0(uint a, uint b) internal pure returns (uint) {\r\n    return a > b ? a - b : 0;\r\n  }\r\n}\r\n"
    },
    "contracts/libs/AppPlatforms.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nlibrary AppPlatforms {\r\n  string public constant UNIV3 = \"UniswapV3\";\r\n  string public constant BALANCER = \"Balancer\";\r\n  string public constant ALGEBRA = \"Algebra\";\r\n  string public constant KYBER = \"Kyber\";\r\n  string public constant PANCAKE = \"Pancake\"; // https://pancakeswap.finance/\r\n}\r\n"
    },
    "contracts/libs/BorrowLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"../strategies/ConverterStrategyBaseLib.sol\";\r\n\r\n/// @notice Library to make new borrow, extend/reduce exist borrows and repay to keep proper assets proportions\r\n/// @dev Swap through liquidator is still allowed to be able to get required profitToCover, but this amount is small\r\nlibrary BorrowLib {\r\n  /// @notice prop0 + prop1\r\n  uint constant public SUM_PROPORTIONS = 1e18;\r\n\r\n  /// @notice Function {_rebalanceAssets} cannot be called recursively more than twice.\r\n  /// Normally one call is enough.\r\n  /// Firstly repay(requiredAmount0) is called below. There are two possible results:\r\n  /// 1) requiredCost0 <= cost0\r\n  /// 2) v.directDebt == 0\r\n  /// There is SCB-818: there are two debts (big and small), on the first cycle we get amount less than expected\r\n  /// because of debt gap. So, we need second cycle.\r\n  uint constant public MAX_DEEP_RECURSION = 2;\r\n\r\n  //region -------------------------------------------------- Data types\r\n  struct PricesDecs {\r\n    /// @notice Asset prices in USD, decimals 18\r\n    uint[] prices;\r\n    /// @notice decs 10**decimals\r\n    uint[] decs;\r\n  }\r\n\r\n  struct ConverterLiquidator {\r\n    ITetuConverter converter;\r\n    ITetuLiquidator liquidator;\r\n  }\r\n\r\n  struct RebalanceAssetsLocal {\r\n    // ------- constant values\r\n    address asset0;\r\n    address asset1;\r\n    /// @notice Proportion of {asset0}, > 0; proportion of {asset1} is SUM_PROPORTIONS - prop0\r\n    uint prop0;\r\n    /// @notice Min allowed amount of {asset0}-collateral, 0 - use default min value\r\n    uint threshold0;\r\n    /// @ntoice Min allowed amount of {asset1}-collateral, 0 - use default min value\r\n    uint threshold1;\r\n\r\n    PricesDecs pd;\r\n    // ------- refreshable values\r\n\r\n    // @notice Current balance of {asset0}\r\n    uint amount0;\r\n    // @notice Current balance of {asset1}\r\n    uint amount1;\r\n\r\n    /// @notice Borrowed amount of not-underlying\r\n    uint directDebt;\r\n    /// @notice Borrowed amount of underlying\r\n    uint reverseDebt;\r\n\r\n    uint addition0;\r\n  }\r\n\r\n  /// @notice Params required to borrow {assetB} under {assetA}\r\n  struct RebalanceAssetsCore {\r\n    ConverterLiquidator converterLiquidator;\r\n    address assetA;\r\n    address assetB;\r\n    uint propA;\r\n    uint propB;\r\n    /// @notice {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\r\n    uint alpha18;\r\n    /// @notice Min allowed amount of {assetA}-collateral, 0 - use default min value\r\n    uint thresholdA;\r\n\r\n    uint addonA;\r\n    uint addonB;\r\n\r\n    /// @notice Index of {assetA} in {prices} and {decs}\r\n    uint indexA;\r\n    /// @notice Index of {assetB} in {prices} and {decs}\r\n    uint indexB;\r\n  }\r\n\r\n  struct OpenPosition2Local {\r\n    uint collateral;\r\n    uint toBorrow;\r\n    uint cc;\r\n    uint cb;\r\n    uint c0;\r\n    uint cb2;\r\n    uint ca0;\r\n    uint gamma18;\r\n    uint pa2;\r\n    uint pb2;\r\n    bytes entryData;\r\n    uint alpha18;\r\n  }\r\n\r\n  struct MakeBorrowToDepositLocal {\r\n    uint[] prices;\r\n    uint[] decs;\r\n    uint cost0;\r\n    uint cost1;\r\n    uint prop1;\r\n    bytes entryData;\r\n  }\r\n  //endregion -------------------------------------------------- Data types\r\n\r\n  //region -------------------------------------------------- External functions\r\n  /// @notice Set balances of {asset0} and {asset1} in proportions {prop0}:{prop1} using borrow/repay (no swaps)\r\n  /// @param prop0 Proportion of {asset0}, > 0. Proportion of {asset1} is calculates as 1e18 - prop0\r\n  /// @param threshold0 Min allowed amount of {asset0}-collateral, 0 - use default min value\r\n  /// @param threshold1 Min allowed amount of {asset1}-collateral, 0 - use default min value\r\n  /// @param addition0 Additional amount A0 of {asset0}.\r\n  ///                  Balance0 = A0 + B0\r\n  ///                  We need following balances in results: B0 : Balance1 === {proportion}:{100_000-proportion}\r\n  function rebalanceAssets(\r\n    ITetuConverter converter_,\r\n    ITetuLiquidator liquidator_,\r\n    address asset0,\r\n    address asset1,\r\n    uint prop0,\r\n    uint threshold0,\r\n    uint threshold1,\r\n    uint addition0\r\n  ) external {\r\n    // pool always have TWO assets, it's not allowed ot have only one asset\r\n    // so, we assume that the proportions are in the range (0...1e18)\r\n    require(prop0 != 0, AppErrors.ZERO_VALUE);\r\n    require(prop0 < SUM_PROPORTIONS, AppErrors.TOO_HIGH);\r\n\r\n    RebalanceAssetsLocal memory v;\r\n    v.asset0 = asset0;\r\n    v.asset1 = asset1;\r\n    v.prop0 = prop0;\r\n    v.threshold0 = threshold0;\r\n    v.threshold1 = threshold1;\r\n    v.addition0 = addition0;\r\n\r\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\r\n    address[] memory tokens = new address[](2);\r\n    tokens[0] = asset0;\r\n    tokens[1] = asset1;\r\n    (v.pd.prices, v.pd.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\r\n\r\n    _refreshRebalance(v, ConverterLiquidator(converter_, liquidator_), MAX_DEEP_RECURSION);\r\n  }\r\n\r\n  /// @notice Convert {amount_} of underlying to two amounts: A0 (underlying) and A1 (not-underlying)\r\n  ///         Result proportions of A0 and A1 should match to {prop0} : 1e18-{prop0}\r\n  ///         The function is able to make new borrowing and/or close exist debts.\r\n  /// @param amount_ Amount of underlying that is going to be deposited\r\n  ///                We assume here, that current balance >= the {amount_}\r\n  /// @param tokens_ [Underlying, not underlying]\r\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\r\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\r\n  /// @return tokenAmounts Result amounts [A0 (underlying), A1 (not-underlying)]\r\n  function prepareToDeposit(\r\n    ITetuConverter converter_,\r\n    uint amount_,\r\n    address[2] memory tokens_,\r\n    uint[2] memory thresholds_,\r\n    uint prop0\r\n  ) external returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    uint[2] memory amountsToDeposit;\r\n    uint[2] memory balances = [\r\n      AppLib.sub0(AppLib.balance(tokens_[0]), amount_), // We assume here, that current balance >= the {amount_}\r\n      AppLib.balance(tokens_[1])\r\n    ];\r\n\r\n    // we assume here, that either direct OR reverse debts (amount > threshold) are possible but not both at the same time\r\n    (uint debtReverse, ) = converter_.getDebtAmountCurrent(address(this), tokens_[1], tokens_[0], true);\r\n    if (debtReverse > thresholds_[0]) {\r\n      // case 1: reverse debt exists\r\n      // case 1.1: amount to deposit exceeds exist debt.\r\n      //    Close the debt completely and than make either new direct OR reverse debt\r\n      // case 1.2: amount to deposit is less than the exist debt.\r\n      //    Close the debt partially and make new reverse debt\r\n      uint amountToRepay = amount_ > debtReverse ? debtReverse : amount_;\r\n      ConverterStrategyBaseLib.closePosition(converter_, tokens_[1], tokens_[0], amountToRepay);\r\n      amountsToDeposit = [\r\n        AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]),\r\n        AppLib.sub0(AppLib.balance(tokens_[1]), balances[1])\r\n      ];\r\n    } else {\r\n      // case 2: no debts OR direct debt exists\r\n      amountsToDeposit = [amount_, 0];\r\n    }\r\n\r\n    _makeBorrowToDeposit(converter_, amountsToDeposit, tokens_, thresholds_, prop0);\r\n\r\n    tokenAmounts = new uint[](2);\r\n    tokenAmounts[0] = AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]);\r\n    tokenAmounts[1] = AppLib.sub0(AppLib.balance(tokens_[1]), balances[1]);\r\n  }\r\n  //endregion -------------------------------------------------- External functions\r\n\r\n  //region -------------------------------------------------- Implementation of prepareToDeposit\r\n  /// @notice Make a direct or reverse borrow to make amounts_ fit to the given proportions.\r\n  /// If one of available amounts is zero, we just need to make a borrow using second amount as amountIn.\r\n  /// Otherwise, we need to calculate amountIn at first.\r\n  /// @dev The purpose is to get the amounts in proper proportions: A:B = prop0:prop1.\r\n  /// Suppose, amounts_[1] is not enough:\r\n  ///   [A1, B1] => [A2 + A3, B1], A2:B1 = prop0:prop1, A3 is amountIn for new borrow.\r\n  /// Suppose, amounts_[0] is not enough:\r\n  ///   [A1, B1] => [A1, B2 + B3], A1:B2 = prop0:prop1, B3 is amountIn for new borrow.\r\n  /// @param amounts_ Available amounts\r\n  /// @param tokens_ [Underlying, not underlying]\r\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\r\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\r\n  function _makeBorrowToDeposit(\r\n    ITetuConverter converter_,\r\n    uint[2] memory amounts_,\r\n    address[2] memory tokens_,\r\n    uint[2] memory thresholds_,\r\n    uint prop0\r\n  ) internal {\r\n    MakeBorrowToDepositLocal memory v;\r\n\r\n    {\r\n      IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\r\n      address[] memory tokens = new address[](2);\r\n      tokens[0] = tokens_[0];\r\n      tokens[1] = tokens_[1];\r\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\r\n    }\r\n\r\n    v.cost0 = amounts_[0] * v.prices[0] / v.decs[0];\r\n    v.cost1 = amounts_[1] * v.prices[1] / v.decs[1];\r\n    // we need: cost0/cost1 = prop0/prop1, and so cost0 * prop1 = cost1 * prop0\r\n    v.prop1 = SUM_PROPORTIONS - prop0;\r\n\r\n    if (v.cost0 * v.prop1 > v.cost1 * prop0) {\r\n      // we need to make direct borrow\r\n      uint cost0for1 = v.cost1 * prop0 / v.prop1; // a part of cost0 that is matched to cost1\r\n      uint amountIn = (v.cost0 - cost0for1) * v.decs[0] / v.prices[0];\r\n\r\n      AppLib.approveIfNeeded(tokens_[0], amountIn, address(converter_));\r\n      v.entryData = abi.encode(1, prop0, v.prop1); // ENTRY_KIND_EXACT_PROPORTION_1\r\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[0], tokens_[1], amountIn, thresholds_[0]);\r\n    } else if (v.cost0 * v.prop1 < v.cost1 * prop0) {\r\n      // we need to make reverse borrow\r\n      uint cost1for0 = v.cost0 * v.prop1 / prop0; // a part of cost1 that is matched to cost0\r\n      uint amountIn = (v.cost1 - cost1for0) * v.decs[1] / v.prices[1];\r\n\r\n      AppLib.approveIfNeeded(tokens_[1], amountIn, address(converter_));\r\n      v.entryData = abi.encode(1, v.prop1, prop0); // ENTRY_KIND_EXACT_PROPORTION_1\r\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[1], tokens_[0], amountIn, thresholds_[1]);\r\n    }\r\n  }\r\n\r\n  //endregion -------------------------------------------------- Implementation of prepareToDeposit\r\n\r\n  //region -------------------------------------------------- Internal helper functions\r\n\r\n  /// @notice refresh state in {v} and call _rebalanceAssets()\r\n  function _refreshRebalance(\r\n    RebalanceAssetsLocal memory v,\r\n    ConverterLiquidator memory converterLiquidator,\r\n    uint repayAllowed\r\n  ) internal {\r\n    v.amount0 = IERC20(v.asset0).balanceOf(address(this));\r\n    v.amount1 = IERC20(v.asset1).balanceOf(address(this));\r\n\r\n    (v.directDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset0, v.asset1, true);\r\n    (v.reverseDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset1, v.asset0, true);\r\n\r\n    _rebalanceAssets(v, converterLiquidator, repayAllowed);\r\n  }\r\n\r\n  /// @param repayAllowed Protection against recursion\r\n  ///                     Assets can be rebalanced in two ways:\r\n  ///                     1) openPosition\r\n  ///                     2) repay + openPosition\r\n  ///                     Only one repay is allowed.\r\n  function _rebalanceAssets(\r\n    RebalanceAssetsLocal memory v,\r\n    ConverterLiquidator memory converterLiquidator,\r\n    uint repayAllowed\r\n  ) internal {\r\n    uint cost0 = v.amount0 * v.pd.prices[0] / v.pd.decs[0];\r\n    uint cost1 = v.amount1 * v.pd.prices[1] / v.pd.decs[1];\r\n    uint costAddition0 = v.addition0 * v.pd.prices[0] / v.pd.decs[0];\r\n\r\n    if (cost0 + cost1 > costAddition0) {\r\n      uint totalCost = cost0 + cost1 - costAddition0;\r\n\r\n      uint requiredCost0 = totalCost * v.prop0 / SUM_PROPORTIONS + costAddition0;\r\n      uint requiredCost1 = totalCost * (SUM_PROPORTIONS - v.prop0) / SUM_PROPORTIONS;\r\n\r\n      if (requiredCost0 > cost0) {\r\n        // we need to increase amount of asset 0 and decrease amount of asset 1, so we need to borrow asset 0 (reverse)\r\n        RebalanceAssetsCore memory c10 = RebalanceAssetsCore({\r\n          converterLiquidator: converterLiquidator,\r\n          assetA: v.asset1,\r\n          assetB: v.asset0,\r\n          propA: SUM_PROPORTIONS - v.prop0,\r\n          propB: v.prop0,\r\n          alpha18: 1e18 * v.pd.prices[0] * v.pd.decs[1] / v.pd.prices[1] / v.pd.decs[0],\r\n          thresholdA: v.threshold1,\r\n          addonA: 0,\r\n          addonB: v.addition0,\r\n          indexA: 1,\r\n          indexB: 0\r\n        });\r\n\r\n        if (v.directDebt >= AppLib.DUST_AMOUNT_TOKENS) {\r\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\r\n\r\n          // repay of v.asset1 is required\r\n          uint requiredAmount0 = (requiredCost0 - cost0) * v.pd.decs[0] / v.pd.prices[0];\r\n          rebalanceRepayBorrow(v, c10, requiredAmount0, v.directDebt, repayAllowed);\r\n        } else {\r\n          // new (or additional) borrow of asset 0 under asset 1 is required\r\n          openPosition(c10, v.pd, v.amount1, v.amount0);\r\n        }\r\n      } else if (requiredCost0 < cost0) {\r\n        RebalanceAssetsCore memory c01 = RebalanceAssetsCore({\r\n          converterLiquidator: converterLiquidator,\r\n          assetA: v.asset0,\r\n          assetB: v.asset1,\r\n          propA: v.prop0,\r\n          propB: SUM_PROPORTIONS - v.prop0,\r\n          alpha18: 1e18 * v.pd.prices[1] * v.pd.decs[0] / v.pd.prices[0] / v.pd.decs[1],\r\n          thresholdA: v.threshold0,\r\n          addonA: v.addition0,\r\n          addonB: 0,\r\n          indexA: 0,\r\n          indexB: 1\r\n        });\r\n        // we need to decrease amount of asset 0 and increase amount of asset 1, so we need to borrow asset 1 (direct)\r\n        if (v.reverseDebt >= AppLib.DUST_AMOUNT_TOKENS) {\r\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\r\n\r\n          // repay of v.asset0 is required\r\n          // requiredCost0 < cost0 => requiredCost1 > cost1\r\n          uint requiredAmount1 = (requiredCost1 - cost1) * v.pd.decs[1] / v.pd.prices[1];\r\n          rebalanceRepayBorrow(v, c01, requiredAmount1, v.reverseDebt, repayAllowed);\r\n        } else {\r\n          // new or additional borrow of asset 1 under asset 0 is required\r\n          openPosition(c01, v.pd, v.amount0, v.amount1);\r\n        }\r\n      }\r\n    } else {\r\n      // if costAddition0 exceeds cost0 + cost1, all amounts should be converted to asset 0\r\n      // for simplicity, we don't make any swaps or borrows (amount addition0 is assumed to be small)\r\n      // and just leave balances as is\r\n      // as result, profit-to-cover will be reduced from costAddition0 to v.amount0\r\n    }\r\n  }\r\n\r\n  /// @notice Repay {amountDebtA} fully or partially to get at least {requiredAmountB} of collateral\r\n  ///         then try to rebalance once more\r\n  /// @param requiredAmountB Amount of collateral that we need to receive after repay\r\n  /// @param amountDebtA Total amount that is required to pay to close the debt\r\n  function rebalanceRepayBorrow(\r\n    RebalanceAssetsLocal memory v,\r\n    RebalanceAssetsCore memory c,\r\n    uint requiredAmountB,\r\n    uint amountDebtA,\r\n    uint repayAllowed\r\n  ) internal {\r\n    // repayAllowed cannot be zero here because of requires in _rebalanceAssets, but it's safer to check it once more\r\n    require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\r\n\r\n    // we need to get {requiredAmountB}\r\n    // we don't know exact amount to repay\r\n    // but we are sure that amount {requiredAmountB ===> requiredAmountA} would be more than required\r\n    uint capRequiredAmountA = requiredAmountB * c.alpha18 / 1e18;\r\n    uint amountToRepay = Math.min(capRequiredAmountA, amountDebtA);\r\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\r\n      ConverterStrategyBaseLib._repayDebt(c.converterLiquidator.converter, c.assetB, c.assetA, amountToRepay);\r\n      _refreshRebalance(v, c.converterLiquidator, repayAllowed - 1);\r\n    } // else the assets are already in proper proportions\r\n  }\r\n\r\n  //endregion -------------------------------------------------- Internal helper functions\r\n\r\n  //region -------------------------------------------------- Open position\r\n  /// @notice borrow asset B under asset A. Result balances should be A0 + A1, B0 + B1\r\n  ///         Where (A1 : B1) == (propA : propB), A0 and B0 are equal to {c.addonA} and {c.addonB}\r\n  /// @param balanceA_ Current balance of the collateral\r\n  /// @param balanceB_ Current balance of the borrow asset\r\n  function openPosition(\r\n    RebalanceAssetsCore memory c,\r\n    PricesDecs memory pd,\r\n    uint balanceA_,\r\n    uint balanceB_\r\n  ) internal returns (\r\n    uint collateralAmountOut,\r\n    uint borrowedAmountOut\r\n  ) {\r\n    // if there are two not-zero addons, the caller should reduce balances before the call\r\n    require(c.addonA == 0 || c.addonB == 0, AppErrors.INVALID_VALUE);\r\n\r\n    // we are going to borrow B under A\r\n    if (c.addonB != 0) {\r\n      // B is underlying, so we are going to borrow underlying\r\n      if (balanceB_ >= c.addonB) {\r\n        // simple case - we already have required addon on the balance. Just keep it unused\r\n        return _openPosition(c, balanceA_, balanceB_ - c.addonB);\r\n      } else {\r\n        // we need to get 1) (c.addonB + balanceB_) amount, so we will have required c.addonB\r\n        //                2) leftovers of A and B should be allocated in required proportions\r\n        // it's too hard to calculate correctly required to borrow amount in this case without changing TetuConverter\r\n        // but we can assume here, that amount (c.addonB - balanceB_) is pretty small (it's profitToCover)\r\n        // so, we can swap this required amount through liquidator at first\r\n        // then use _openPosition to re-allocated rest amounts to proper proportions\r\n        (uint decA,) = _makeLittleSwap(c, pd, balanceA_, c.addonB - balanceB_);\r\n        return _openPosition(c, balanceA_ - decA, balanceB_);\r\n      }\r\n    } else if (c.addonA != 0) {\r\n      // A is underlying, we need to put aside c.addonA and allocate leftovers in right proportions.\r\n      // we are going to borrow B under asset A, so the case (balanceA_ < c.addonA) is not valid here\r\n      require(balanceA_ >= c.addonA, AppErrors.NOT_ENOUGH_BALANCE);\r\n      return _openPosition(c, balanceA_ - c.addonA, balanceB_);\r\n    } else {\r\n      // simple logic, no addons\r\n      return _openPosition(c, balanceA_, balanceB_);\r\n    }\r\n  }\r\n\r\n  /// @notice borrow asset B under asset A, result balances should have proportions: (propA : propB)\r\n  function _openPosition(RebalanceAssetsCore memory c, uint balanceA_, uint balanceB_) internal returns (\r\n    uint collateralAmountOut,\r\n    uint borrowedAmountOut\r\n  ) {\r\n    uint untouchedAmountA;\r\n    bytes memory entryData = abi.encode(1, c.propA, c.propB);\r\n\r\n    if (balanceB_ != 0) {\r\n      // we are going to use {balanceA_} as collateral\r\n      // but there is some amount on {balanceB_}, so we need to keep corresponded part of {balanceA_} untouched\r\n      untouchedAmountA = balanceB_ * c.alpha18 * c.propA / c.propB / 1e18;\r\n\r\n      // we are going to borrow B under A, so balance A must be greater then balance B\r\n      // otherwise the function is called incorrectly - probably we need to borrow A under B\r\n      require(untouchedAmountA <= balanceA_, AppErrors.WRONG_VALUE);\r\n    }\r\n\r\n    AppLib.approveIfNeeded(c.assetA, balanceA_ - untouchedAmountA, address(c.converterLiquidator.converter));\r\n\r\n    return ConverterStrategyBaseLib.openPosition(\r\n      c.converterLiquidator.converter,\r\n      entryData,\r\n      c.assetA,\r\n      c.assetB,\r\n      balanceA_ - untouchedAmountA,\r\n      c.thresholdA\r\n    );\r\n  }\r\n\r\n  //endregion -------------------------------------------------- Open position\r\n\r\n  //region -------------------------------------------------- Little swap\r\n  /// @notice Swap min amount of A to get {requiredAmountB}\r\n  /// @return spentAmountIn how much the balance A has decreased\r\n  /// @return receivedAmountOut how much the balance B has increased\r\n  function _makeLittleSwap(\r\n    RebalanceAssetsCore memory c,\r\n    PricesDecs memory pd,\r\n    uint balanceA_,\r\n    uint requiredAmountB\r\n  ) internal returns (\r\n    uint spentAmountIn,\r\n    uint receivedAmountOut\r\n  ) {\r\n    uint amountInA = requiredAmountB * pd.prices[c.indexB] * pd.decs[c.indexA] / pd.prices[c.indexA] / pd.decs[c.indexB];\r\n    // we can have some loss because of slippage\r\n    // so, let's increase input amount a bit\r\n    amountInA = amountInA * (100_000 + ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE) / 100_000;\r\n\r\n    // in practice the addition is required to pay ProfitToCover\r\n    // we assume, that total addition amount is small enough, much smaller then the total balance\r\n    // otherwise something is wrong: we are going to pay ProfitToCover, but we don't have enough amount on the balances.\r\n    require(balanceA_ > amountInA, AppErrors.NOT_ENOUGH_BALANCE);\r\n\r\n    (spentAmountIn, receivedAmountOut) = ConverterStrategyBaseLib.liquidate(\r\n      c.converterLiquidator.converter,\r\n      c.converterLiquidator.liquidator,\r\n      c.assetA,\r\n      c.assetB,\r\n      amountInA,\r\n      ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE,\r\n      c.thresholdA,\r\n      false\r\n    );\r\n  }\r\n\r\n  //endregion -------------------------------------------------- Little swap\r\n\r\n}\r\n"
    },
    "contracts/libs/ConverterEntryKinds.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Utils and constants related to entryKind param of ITetuConverter.findBorrowStrategy\r\nlibrary ConverterEntryKinds {\r\n  /// @notice Amount of collateral is fixed. Amount of borrow should be max possible.\r\n  uint constant public ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0 = 0;\r\n\r\n  /// @notice Split provided source amount S on two parts: C1 and C2 (C1 + C2 = S)\r\n  ///         C2 should be used as collateral to make a borrow B.\r\n  ///         Results amounts of C1 and B (both in terms of USD) must be in the given proportion\r\n  uint constant public ENTRY_KIND_EXACT_PROPORTION_1 = 1;\r\n\r\n  /// @notice Borrow given amount using min possible collateral\r\n  uint constant public ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2 = 2;\r\n\r\n  /// @notice Decode entryData, extract first uint - entry kind\r\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\r\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\r\n    if (entryData_.length == 0) {\r\n      return ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0;\r\n    }\r\n    return abi.decode(entryData_, (uint));\r\n  }\r\n}\r\n"
    },
    "contracts/libs/IterationPlanLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"./AppErrors.sol\";\r\nimport \"./AppLib.sol\";\r\n\r\n/// @notice Support of withdraw iteration plans\r\nlibrary IterationPlanLib {\r\n\r\n//region ------------------------------------------------ Constants\r\n  /// @notice Swap collateral asset to get required amount-to-repay, then repay and get more collateral back.\r\n  ///         It tries to minimizes count of repay-operations.\r\n  ///         If there are no debts, swap leftovers to get required proportions of the asset.\r\n  ///         This mode is intended i.e. for \"withdraw all\"\r\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\r\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\r\n  ///                     The assets should be swapped to get following result proportions:\r\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\r\n  ///                     Pass type(uint).max to read proportions from the pool.\r\n  uint constant public PLAN_SWAP_REPAY = 0;\r\n\r\n  /// @notice Repay available amount-to-repay, swap all or part of collateral to borrowed-asset, make one repay if needed.\r\n  ///         Swap + second repay tries to make asset balances to proportions required by the pool.\r\n  ///         Proportions are read from pool through IPoolProportionsProvider(this) and re-read after swapping.\r\n  ///         This mode is intended i.e. for rebalancing debts using single iteration.\r\n  ///         (uint256, uint256, uint256) - (entry kind, propNotUnderlying18, required-amount-to-reduce-the-debt)\r\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\r\n  ///                     The assets should be swapped to get following result proportions:\r\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\r\n  ///                     Pass type(uint).max to read proportions from the pool.\r\n  uint constant public PLAN_REPAY_SWAP_REPAY = 1;\r\n\r\n  /// @notice Swap leftovers to required proportions, don't repay any debts\r\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\r\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\r\n  ///                     The assets should be swapped to get following result proportions:\r\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\r\n  ///                     Pass type(uint).max to read proportions from the pool.\r\n  uint constant public PLAN_SWAP_ONLY = 2;\r\n//endregion ------------------------------------------------ Constants\r\n\r\n//region ------------------------------------------------ Data types\r\n  /// @notice Set of parameters required to liquidation through aggregators\r\n  struct SwapRepayPlanParams {\r\n    ITetuConverter converter;\r\n    ITetuLiquidator liquidator;\r\n\r\n    /// @notice Assets used by depositor stored as following way: [underlying, not-underlying]\r\n    address[] tokens;\r\n\r\n    /// @notice Liquidation thresholds for the {tokens}\r\n    uint[] liquidationThresholds;\r\n\r\n    /// @notice Cost of $1 in terms of the assets, decimals 18\r\n    uint[] prices;\r\n    /// @notice 10**decimal for the assets\r\n    uint[] decs;\r\n\r\n    /// @notice Amounts that will be received on balance before execution of the plan.\r\n    uint[] balanceAdditions;\r\n\r\n    /// @notice Plan kind extracted from entry data, see {IterationPlanKinds}\r\n    uint planKind;\r\n\r\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\r\n    ///         The leftovers should be swapped to get following result proportions of the assets:\r\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\r\n    uint propNotUnderlying18;\r\n\r\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\r\n    bool usePoolProportions;\r\n\r\n    /// @notice \"required-amount-to-reduce-debt\" in the case of REPAY-SWAP-REPAY, zero in other cases\r\n    uint entryDataParam;\r\n  }\r\n\r\n  struct GetIterationPlanLocal {\r\n    /// @notice Underlying balance\r\n    uint assetBalance;\r\n    /// @notice Not-underlying balance\r\n    uint tokenBalance;\r\n\r\n    uint totalDebt;\r\n    uint totalCollateral;\r\n\r\n    uint debtReverse;\r\n    uint collateralReverse;\r\n\r\n    address asset;\r\n    address token;\r\n\r\n    bool swapLeftoversNeeded;\r\n  }\r\n\r\n  struct EstimateSwapAmountForRepaySwapRepayLocal {\r\n    uint x;\r\n    uint y;\r\n    uint bA1;\r\n    uint bB1;\r\n    uint alpha;\r\n    uint swapRatio;\r\n    uint aB3;\r\n    uint cA1;\r\n    uint cB1;\r\n    uint aA2;\r\n    uint aB2;\r\n  }\r\n//endregion ------------------------------------------------ Data types\r\n\r\n  /// @notice Decode entryData, extract first uint - entry kind\r\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\r\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\r\n    if (entryData_.length == 0) {\r\n      return PLAN_SWAP_REPAY;\r\n    }\r\n    return abi.decode(entryData_, (uint));\r\n  }\r\n\r\n//region ------------------------------------------------ Build plan\r\n  /// @notice Build plan to make single iteration of withdraw according to the selected plan\r\n  ///         The goal is to withdraw {requestedAmount} and receive {asset}:{token} in proper proportions on the balance\r\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\r\n  /// @param tokens List of the pool tokens. One of them is underlying and one of then is not-underlying\r\n  ///               that we are going to withdraw\r\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}. If amount is less then the threshold,\r\n  ///                              we cannot swap it.\r\n  /// @param prices Prices of the {tokens}, decimals 18, [$/token]\r\n  /// @param decs 10**decimal for each token of the {tokens}\r\n  /// @param balanceAdditions Amounts that will be added to the current balances of the {tokens}\r\n  ///                         to the moment of the plan execution\r\n  /// @param packedData Several values packed to fixed-size array (to reduce number of params)\r\n  ///    0: usePoolProportions: 1 - read proportions from the pool through IPoolProportionsProvider(this)\r\n  ///    1: planKind: selected plan, one of PLAN_XXX\r\n  ///    2: propNotUnderlying18: value of not-underlying proportion [0..1e18] if usePoolProportions == 0\r\n  ///    3: requestedBalance: total amount that should be withdrawn, it can be type(uint).max\r\n  ///    4: indexAsset: index of the underlying in {tokens} array\r\n  ///    5: indexToken: index of the token in {tokens} array. We are going to withdraw the token and convert it to the asset\r\n  ///    6: entryDataParam: required-amount-to-reduce-debt in REPAY-SWAP-REPAY case; zero in other cases\r\n  function buildIterationPlan(\r\n    address[2] memory converterLiquidator,\r\n    address[] memory tokens,\r\n    uint[] memory liquidationThresholds,\r\n    uint[] memory prices,\r\n    uint[] memory decs,\r\n    uint[] memory balanceAdditions,\r\n    uint[7] memory packedData\r\n  ) external returns (\r\n    uint indexToSwapPlus1,\r\n    uint amountToSwap,\r\n    uint indexToRepayPlus1\r\n  ) {\r\n    return _buildIterationPlan(\r\n      SwapRepayPlanParams({\r\n        converter: ITetuConverter(converterLiquidator[0]),\r\n        liquidator: ITetuLiquidator(converterLiquidator[1]),\r\n        tokens: tokens,\r\n        liquidationThresholds: liquidationThresholds,\r\n        prices: prices,\r\n        decs: decs,\r\n        balanceAdditions: balanceAdditions,\r\n        planKind: packedData[1],\r\n        propNotUnderlying18: packedData[2],\r\n        usePoolProportions: packedData[0] != 0,\r\n        entryDataParam: packedData[6]\r\n      }),\r\n      packedData[3],\r\n      packedData[4],\r\n      packedData[5]\r\n    );\r\n  }\r\n\r\n  /// @notice Generate plan for next withdraw iteration. We can do only one swap per iteration.\r\n  ///         In general, we cam make 1) single swap (direct or reverse) and 2) repay\r\n  ///         Swap is required to get required repay-amount OR to swap leftovers on final iteration.\r\n  /// @param requestedBalance Amount of underlying that we need to have on balance after executing the plan.\r\n  /// @param indexAsset Index of the underlying in {p.tokens} array\r\n  /// @param indexToken Index of the not-underlying in {p.tokens} array\r\n  /// @return indexToSwapPlus1 1-based index of the token to be swapped; 0 means swap is not required.\r\n  /// @return amountToSwap Amount to be swapped. 0 - no swap\r\n  /// @return indexToRepayPlus1 1-based index of the token that should be used to repay borrow in converter.\r\n  ///                            0 - no repay is required - it means that this is a last step with swapping leftovers.\r\n  function _buildIterationPlan(\r\n    SwapRepayPlanParams memory p,\r\n    uint requestedBalance,\r\n    uint indexAsset,\r\n    uint indexToken\r\n  ) internal returns (\r\n    uint indexToSwapPlus1,\r\n    uint amountToSwap,\r\n    uint indexToRepayPlus1\r\n  ) {\r\n    GetIterationPlanLocal memory v;\r\n    v.asset = p.tokens[indexAsset];\r\n    v.token = p.tokens[indexToken];\r\n\r\n    v.assetBalance = IERC20(v.asset).balanceOf(address(this)) + p.balanceAdditions[indexAsset];\r\n    v.tokenBalance = IERC20(p.tokens[indexToken]).balanceOf(address(this)) + p.balanceAdditions[indexToken];\r\n\r\n    if (p.planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\r\n      v.swapLeftoversNeeded = true;\r\n    } else {\r\n      uint requestedAmount = requestedBalance == type(uint).max\r\n        ? type(uint).max\r\n        : AppLib.sub0(requestedBalance, v.assetBalance);\r\n\r\n      if (requestedAmount < p.liquidationThresholds[indexAsset]) {\r\n        // we don't need to repay any debts anymore, but we should swap leftovers\r\n        v.swapLeftoversNeeded = true;\r\n      } else {\r\n        // we need to increase balance on the following amount: requestedAmount - v.balance;\r\n        // we can have two possible borrows:\r\n        // 1) direct (p.tokens[INDEX_ASSET] => tokens[i]) and 2) reverse (tokens[i] => p.tokens[INDEX_ASSET])\r\n        // normally we can have only one of them, not both..\r\n        // but better to take into account possibility to have two debts simultaneously\r\n\r\n        // reverse debt\r\n        (v.debtReverse, v.collateralReverse) = p.converter.getDebtAmountCurrent(address(this), v.token, v.asset, true);\r\n        if (v.debtReverse < AppLib.DUST_AMOUNT_TOKENS) { // there is reverse debt or the reverse debt is dust debt\r\n          // direct debt\r\n          (v.totalDebt, v.totalCollateral) = p.converter.getDebtAmountCurrent(address(this), v.asset, v.token, true);\r\n\r\n          if (v.totalDebt < AppLib.DUST_AMOUNT_TOKENS) { // there is direct debt or the direct debt is dust debt\r\n            // This is final iteration - we need to swap leftovers and get amounts on balance in proper proportions.\r\n            // The leftovers should be swapped to get following result proportions of the assets:\r\n            //      underlying : not-underlying === 1e18 - propNotUnderlying18 : propNotUnderlying18\r\n            v.swapLeftoversNeeded = true;\r\n          } else {\r\n            // repay direct debt\r\n            if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\r\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\r\n                p,\r\n                [v.assetBalance, v.tokenBalance],\r\n                [indexAsset, indexToken],\r\n                p.propNotUnderlying18,\r\n                [v.totalCollateral, v.totalDebt],\r\n                p.entryDataParam\r\n              );\r\n            } else {\r\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\r\n                requestedAmount,\r\n                p,\r\n                v.totalCollateral,\r\n                v.totalDebt,\r\n                indexAsset,\r\n                indexToken,\r\n                v.assetBalance,\r\n                v.tokenBalance\r\n              );\r\n            }\r\n          }\r\n        } else {\r\n          // repay reverse debt\r\n          if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\r\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\r\n              p,\r\n              [v.tokenBalance, v.assetBalance],\r\n              [indexToken, indexAsset],\r\n              1e18 - p.propNotUnderlying18,\r\n              [v.collateralReverse, v.debtReverse],\r\n              p.entryDataParam\r\n            );\r\n          } else {\r\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\r\n              requestedAmount == type(uint).max\r\n                ? type(uint).max\r\n                : requestedAmount * p.prices[indexAsset] * p.decs[indexToken] / p.prices[indexToken] / p.decs[indexAsset],\r\n              p,\r\n              v.collateralReverse,\r\n              v.debtReverse,\r\n              indexToken,\r\n              indexAsset,\r\n              v.tokenBalance,\r\n              v.assetBalance\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (v.swapLeftoversNeeded) {\r\n      (indexToSwapPlus1, amountToSwap) = _buildPlanForLeftovers(p, v.assetBalance, v.tokenBalance, indexAsset, indexToken, p.propNotUnderlying18);\r\n    }\r\n\r\n    return (indexToSwapPlus1, amountToSwap, indexToRepayPlus1);\r\n  }\r\n\r\n  /// @notice Repay B, get collateral A, then swap A => B, [make one more repay B] => get A:B in required proportions\r\n  /// @param balancesAB [balanceA, balanceB]\r\n  /// @param idxAB [indexA, indexB]\r\n  /// @param totalAB [totalCollateralA, totalBorrowB]\r\n  /// @param requiredAmountToReduceDebt If not zero: we are going to make repay-swap-repay to reduce total\r\n  ///        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce\r\n  ///        the amount of debt by the given amount.\r\n  function _buildPlanRepaySwapRepay(\r\n    SwapRepayPlanParams memory p,\r\n    uint[2] memory balancesAB,\r\n    uint[2] memory idxAB,\r\n    uint propB,\r\n    uint[2] memory totalAB,\r\n    uint requiredAmountToReduceDebt\r\n  ) internal returns (\r\n    uint indexToSwapPlus1,\r\n    uint amountToSwap,\r\n    uint indexToRepayPlus1\r\n  ) {\r\n    // use all available tokenB to repay debt and receive as much as possible tokenA\r\n    uint amountToRepay = Math.min(balancesAB[1], totalAB[1]);\r\n\r\n    uint collateralAmount;\r\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\r\n      uint swappedAmountOut;\r\n      //\r\n      (collateralAmount, swappedAmountOut) = p.converter.quoteRepay(address(this), p.tokens[idxAB[0]], p.tokens[idxAB[1]], amountToRepay);\r\n      if (collateralAmount > swappedAmountOut) { // SCB-789\r\n        collateralAmount -= swappedAmountOut;\r\n      }\r\n    } else {\r\n      amountToRepay = 0;\r\n    }\r\n\r\n    // swap A to B: full or partial\r\n    // SCB-876: swap B to A are also possible here\r\n    bool swapB;\r\n    (amountToSwap, swapB) = estimateSwapAmountForRepaySwapRepay(\r\n      p,\r\n      [balancesAB[0], balancesAB[1]],\r\n      [idxAB[0], idxAB[1]],\r\n      propB,\r\n      totalAB[0],\r\n      totalAB[1],\r\n      collateralAmount,\r\n      amountToRepay\r\n    );\r\n\r\n    if (swapB) {\r\n      // edge case: swap B => A; for simplicity, we don't take into account requiredAmountToReduceDebt\r\n      return (idxAB[1] + 1, amountToSwap, idxAB[1] + 1);\r\n    } else {\r\n      // swap A => B\r\n      if (requiredAmountToReduceDebt != 0) {\r\n        // probably it worth to increase amount to swap?\r\n        uint requiredAmountToSwap = requiredAmountToReduceDebt * p.prices[idxAB[1]] * p.decs[idxAB[0]] / p.prices[idxAB[0]] / p.decs[idxAB[1]];\r\n        amountToSwap = Math.max(amountToSwap, requiredAmountToSwap);\r\n        amountToSwap = Math.min(amountToSwap, balancesAB[0] + collateralAmount);\r\n      }\r\n\r\n      return (idxAB[0] + 1, amountToSwap, idxAB[1] + 1);\r\n    }\r\n  }\r\n\r\n  /// @notice Estimate swap amount for iteration \"repay-swap-repay\"\r\n  ///         The iteration should give us amounts of assets in required proportions.\r\n  ///         There are two cases here: full swap and partial swap. Second repay is not required if the swap is partial.\r\n  /// @param collateralA Estimated value of collateral A received after repay balanceB\r\n  /// @return amountToSwap Amount to be swapped\r\n  /// @return swapB False: swap A => B; True: swap B => A\r\n  function estimateSwapAmountForRepaySwapRepay(\r\n    SwapRepayPlanParams memory p,\r\n    uint[2] memory balancesAB,\r\n    uint[2] memory indicesAB,\r\n    uint propB,\r\n    uint totalCollateralA,\r\n    uint totalBorrowB,\r\n    uint collateralA,\r\n    uint amountToRepayB\r\n  ) internal pure returns(uint amountToSwap, bool swapB) {\r\n    // N - number of the state\r\n    // bAN, bBN - balances of A and B; aAN, aBN - amounts of A and B; cAN, cBN - collateral/borrow amounts of A/B\r\n    // alpha ~ cAN/cBN - estimated ratio of collateral/borrow\r\n    // s = swap ratio, aA is swapped to aB, so aA = s * aB\r\n    // g = split ratio, bA1 is divided on two parts: bA1 * gamma, bA1 * (1 - gamma). First part is swapped.\r\n    // X = proportion of A, Y = proportion of B\r\n\r\n    // Formulas\r\n    // aB3 = (x * bB2 - y * bA2) / (alpha * y + x)\r\n    // gamma = (y * bA1 - x * bB1) / (bA1 * (x * s + y))\r\n\r\n    // There are following stages:\r\n    // 0. init (we have at least not zero amount of B and not zero debt of B)\r\n    // 1. repay 1 (repay all available amount of B OR all available debt)\r\n    // 2. swap (swap A fully or partially to B)\r\n    // 3. repay 2 (optional: we need this stage if full swap produces amount of B that is <= available debt)\r\n    // 4. final (we have assets in right proportion on the balance)\r\n    EstimateSwapAmountForRepaySwapRepayLocal memory v;\r\n    v.x = 1e18 - propB;\r\n    v.y = propB;\r\n// 1. repay 1\r\n    // convert amounts A, amounts B to cost A, cost B in USD\r\n    v.bA1 = (balancesAB[0] + collateralA) * p.prices[indicesAB[0]] / p.decs[indicesAB[0]];\r\n    v.bB1 = (balancesAB[1] - amountToRepayB) * p.prices[indicesAB[1]] / p.decs[indicesAB[1]];\r\n    v.cB1 = (totalBorrowB - amountToRepayB) * p.prices[indicesAB[1]] / p.decs[indicesAB[1]];\r\n    v.alpha = 1e18 * totalCollateralA * p.prices[indicesAB[0]] * p.decs[indicesAB[1]]\r\n      / p.decs[indicesAB[0]] / p.prices[indicesAB[1]] / totalBorrowB; // (!) approx estimation\r\n\r\n// 2. full swap\r\n    v.aA2 = v.bA1;\r\n    v.swapRatio = 1e18; // we assume swap ratio 1:1\r\n\r\n// 3. repay 2\r\n    // aB3 = (x * bB2 - Y * bA2) / (alpha * y + x)\r\n    v.aB3 = (\r\n      v.x * (v.bB1 + v.aA2 * v.swapRatio / 1e18)    // bB2 = v.bB1 + v.aA2 * v.s / 1e18\r\n      - v.y * (v.bA1 - v.aA2)                       // bA2 = v.bA1 - v.aA2;\r\n    ) / (v.y * v.alpha / 1e18 + v.x);\r\n\r\n    if (v.aB3 > v.cB1) {\r\n      if (v.y * v.bA1 >= v.x * v.bB1) {\r\n        // there is not enough debt to make second repay\r\n        // we need to make partial swap and receive assets in right proportions in result\r\n        // v.gamma = 1e18 * (v.y * v.bA1 - v.x * v.bB1) / (v.bA1 * (v.x * v.s / 1e18 + v.y));\r\n        v.aA2 = (v.y * v.bA1 - v.x * v.bB1) / (v.x * v.swapRatio / 1e18 + v.y);\r\n      } else {\r\n        // scb-867: edge case, we need to make swap B => A\r\n        v.aB2 = (v.x * v.bB1 - v.y * v.bA1) / (v.x * v.swapRatio / 1e18 + v.y) /* * 1e18 / v.swapRatio */ ;\r\n        swapB = true;\r\n      }\r\n    }\r\n\r\n    return swapB\r\n      ? (v.aB2 * p.decs[indicesAB[1]] / p.prices[indicesAB[1]], true) // edge case: swap B => A\r\n      : (v.aA2 * p.decs[indicesAB[0]] / p.prices[indicesAB[0]], false); // normal case: swap A => B\r\n  }\r\n\r\n  /// @notice Prepare a plan to swap leftovers to required proportion\r\n  /// @param balanceA Balance of token A, i.e. underlying\r\n  /// @param balanceB Balance of token B, i.e. not-underlying\r\n  /// @param indexA Index of the token A, i.e. underlying, in {p.prices} and {p.decs}\r\n  /// @param indexB Index of the token B, i.e. not-underlying, in {p.prices} and {p.decs}\r\n  /// @param propB Required proportion of TokenB [0..1e18]. Proportion of token A is (1e18-propB)\r\n  /// @return indexTokenToSwapPlus1 Index of the token to be swapped. 0 - no swap is required\r\n  /// @return amountToSwap Amount to be swapped. 0 - no swap is required\r\n  function _buildPlanForLeftovers(\r\n    SwapRepayPlanParams memory p,\r\n    uint balanceA,\r\n    uint balanceB,\r\n    uint indexA,\r\n    uint indexB,\r\n    uint propB\r\n  ) internal pure returns (\r\n    uint indexTokenToSwapPlus1,\r\n    uint amountToSwap\r\n  ) {\r\n    (uint targetA, uint targetB) = _getTargetAmounts(p.prices, p.decs, balanceA, balanceB, propB, indexA, indexB);\r\n    if (balanceA < targetA) {\r\n      // we need to swap not-underlying to underlying\r\n      if (balanceB - targetB > p.liquidationThresholds[indexB]) {\r\n        amountToSwap = balanceB - targetB;\r\n        indexTokenToSwapPlus1 = indexB + 1;\r\n      }\r\n    } else {\r\n      // we need to swap underlying to not-underlying\r\n      if (balanceA - targetA > p.liquidationThresholds[indexA]) {\r\n        amountToSwap = balanceA - targetA;\r\n        indexTokenToSwapPlus1 = indexA + 1;\r\n      }\r\n    }\r\n    return (indexTokenToSwapPlus1, amountToSwap);\r\n  }\r\n\r\n  /// @notice Prepare a plan to swap some amount of collateral to get required repay-amount and make repaying\r\n  ///         1) Sell collateral-asset to get missed amount-to-repay 2) make repay and get more collateral back\r\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount.\r\n  /// @param totalCollateral Total amount of collateral used in the borrow\r\n  /// @param totalDebt Total amount of debt that should be repaid to receive {totalCollateral}\r\n  /// @param indexCollateral Index of collateral asset in {p.prices}, {p.decs}\r\n  /// @param indexBorrow Index of borrow asset in {p.prices}, {p.decs}\r\n  /// @param balanceCollateral Current balance of the collateral asset\r\n  /// @param balanceBorrow Current balance of the borrowed asset\r\n  /// @param indexTokenToSwapPlus1 1-based index of the token to be swapped. Swap of amount of collateral asset can be required\r\n  ///                              to receive missed amount-to-repay. 0 - no swap is required\r\n  /// @param amountToSwap Amount to be swapped. 0 - no swap is required\r\n  /// @param indexRepayTokenPlus1 1-based index of the token to be repaied. 0 - no repaying is required\r\n  function _buildPlanForSellAndRepay(\r\n    uint requestedAmount,\r\n    SwapRepayPlanParams memory p,\r\n    uint totalCollateral,\r\n    uint totalDebt,\r\n    uint indexCollateral,\r\n    uint indexBorrow,\r\n    uint balanceCollateral,\r\n    uint balanceBorrow\r\n  ) internal pure returns (\r\n    uint indexTokenToSwapPlus1,\r\n    uint amountToSwap,\r\n    uint indexRepayTokenPlus1\r\n  ) {\r\n    // what amount of collateral we should sell to get required amount-to-pay to pay the debt\r\n    uint toSell = _getAmountToSell(\r\n      requestedAmount,\r\n      totalDebt,\r\n      totalCollateral,\r\n      p.prices,\r\n      p.decs,\r\n      indexCollateral,\r\n      indexBorrow,\r\n      balanceBorrow\r\n    );\r\n\r\n    // convert {toSell} amount of underlying to token\r\n    if (toSell != 0 && balanceCollateral != 0) {\r\n      toSell = Math.min(toSell, balanceCollateral);\r\n      uint threshold = p.liquidationThresholds[indexCollateral];\r\n      if (toSell > threshold) {\r\n        amountToSwap = toSell;\r\n        indexTokenToSwapPlus1 = indexCollateral + 1;\r\n      } else {\r\n        // we need to sell amount less than the threshold, it's not allowed\r\n        // but it's dangerous to just ignore the selling because there is a chance to have error 35\r\n        // (There is a debt $3.29, we make repay $3.27 => error 35)\r\n        // it would be safer to sell a bit more amount if it's possible\r\n        if (balanceCollateral >= threshold + 1) {\r\n          amountToSwap = threshold + 1;\r\n          indexTokenToSwapPlus1 = indexCollateral + 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return (indexTokenToSwapPlus1, amountToSwap, indexBorrow + 1);\r\n  }\r\n\r\n  /// @notice Calculate what balances of underlying and not-underlying we need to fit {propNotUnderlying18}\r\n  /// @param prices Prices of underlying and not underlying\r\n  /// @param decs 10**decimals for underlying and not underlying\r\n  /// @param assetBalance Current balance of underlying\r\n  /// @param tokenBalance Current balance of not-underlying\r\n  /// @param propNotUnderlying18 Required proportion of not-underlying [0..1e18]\r\n  ///                            Proportion of underlying would be (1e18 - propNotUnderlying18)\r\n  /// @param targetAssets What result balance of underlying is required to fit to required proportions\r\n  /// @param targetTokens What result balance of not-underlying is required to fit to required proportions\r\n  function _getTargetAmounts(\r\n    uint[] memory prices,\r\n    uint[] memory decs,\r\n    uint assetBalance,\r\n    uint tokenBalance,\r\n    uint propNotUnderlying18,\r\n    uint indexAsset,\r\n    uint indexToken\r\n  ) internal pure returns (\r\n    uint targetAssets,\r\n    uint targetTokens\r\n  ) {\r\n    uint costAssets = assetBalance * prices[indexAsset] / decs[indexAsset];\r\n    uint costTokens = tokenBalance * prices[indexToken] / decs[indexToken];\r\n    targetTokens = propNotUnderlying18 == 0\r\n      ? 0\r\n      : ((costAssets + costTokens) * propNotUnderlying18 / 1e18);\r\n    targetAssets = ((costAssets + costTokens) - targetTokens) * decs[indexAsset] / prices[indexAsset];\r\n    targetTokens = targetTokens * decs[indexToken] / prices[indexToken];\r\n  }\r\n\r\n  /// @notice What amount of collateral should be sold to pay the debt and receive {requestedAmount}\r\n  /// @dev It doesn't allow to sell more than the amount of total debt in the borrow\r\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount\r\n  /// @param totalDebt Total debt of the borrow in terms of borrow asset\r\n  /// @param totalCollateral Total collateral of the borrow in terms of collateral asset\r\n  /// @param prices Cost of $1 in terms of the asset, decimals 18\r\n  /// @param decs 10**decimals for each asset\r\n  /// @param indexCollateral Index of the collateral asset in {prices} and {decs}\r\n  /// @param indexBorrowAsset Index of the borrow asset in {prices} and {decs}\r\n  /// @param balanceBorrowAsset Available balance of the borrow asset, it will be used to cover the debt\r\n  /// @return amountOut Amount of collateral-asset that should be sold\r\n  function _getAmountToSell(\r\n    uint requestedAmount,\r\n    uint totalDebt,\r\n    uint totalCollateral,\r\n    uint[] memory prices,\r\n    uint[] memory decs,\r\n    uint indexCollateral,\r\n    uint indexBorrowAsset,\r\n    uint balanceBorrowAsset\r\n  ) internal pure returns (\r\n    uint amountOut\r\n  ) {\r\n    if (totalDebt != 0) {\r\n      if (balanceBorrowAsset != 0) {\r\n        // there is some borrow asset on balance\r\n        // it will be used to cover the debt\r\n        // let's reduce the size of totalDebt/Collateral to exclude balanceBorrowAsset\r\n        uint sub = Math.min(balanceBorrowAsset, totalDebt);\r\n        totalCollateral -= totalCollateral * sub / totalDebt;\r\n        totalDebt -= sub;\r\n      }\r\n\r\n      // for definiteness: usdc - collateral asset, dai - borrow asset\r\n      // Pc = price of the USDC, Pb = price of the DAI, alpha = Pc / Pb [DAI / USDC]\r\n      // S [USDC] - amount to sell, R [DAI] = alpha * S - amount to repay\r\n      // After repaying R we get: alpha * S * C / R\r\n      // Balance should be increased on: requestedAmount = alpha * S * C / R - S\r\n      // So, we should sell: S = requestedAmount / (alpha * C / R - 1))\r\n      // We can lost some amount on liquidation of S => R, so we need to use some gap = {GAP_AMOUNT_TO_SELL}\r\n      // Same formula: S * h = S + requestedAmount, where h = health factor => s = requestedAmount / (h - 1)\r\n      // h = alpha * C / R\r\n      uint alpha18 = prices[indexCollateral] * decs[indexBorrowAsset] * 1e18\r\n        / prices[indexBorrowAsset] / decs[indexCollateral];\r\n\r\n      // if totalCollateral is zero (liquidation happens) we will have zero amount (the debt shouldn't be paid)\r\n      amountOut = totalDebt != 0 && alpha18 * totalCollateral / totalDebt > 1e18\r\n        ? Math.min(requestedAmount, totalCollateral) * 1e18 / (alpha18 * totalCollateral / totalDebt - 1e18)\r\n        : 0;\r\n\r\n      if (amountOut != 0) {\r\n        // we shouldn't try to sell amount greater than amount of totalDebt in terms of collateral asset\r\n        // but we always asks +1% because liquidation results can be different a bit from expected\r\n        amountOut = (AppLib.GAP_CONVERSION + AppLib.DENOMINATOR) * Math.min(amountOut, totalDebt * 1e18 / alpha18) / AppLib.DENOMINATOR;\r\n      }\r\n    }\r\n\r\n    return amountOut;\r\n  }\r\n//endregion ------------------------------------------------ Build plan\r\n}\r\n"
    },
    "contracts/libs/TokenAmountsLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"./AppErrors.sol\";\r\n\r\n/// @title Library for clearing / joining token addresses & amounts arrays\r\n/// @author bogdoslav\r\nlibrary TokenAmountsLib {\r\n  /// @notice Version of the contract\r\n  /// @dev Should be incremented when contract changed\r\n  string internal constant TOKEN_AMOUNTS_LIB_VERSION = \"1.0.1\";\r\n\r\n  function uncheckedInc(uint i) internal pure returns (uint) {\r\n    unchecked {\r\n      return i + 1;\r\n    }\r\n  }\r\n\r\n  function filterZeroAmounts(\r\n    address[] memory tokens,\r\n    uint[] memory amounts\r\n  ) internal pure returns (\r\n    address[] memory t,\r\n    uint[] memory a\r\n  ) {\r\n    require(tokens.length == amounts.length, AppErrors.INCORRECT_LENGTHS);\r\n    uint len2 = 0;\r\n    uint len = tokens.length;\r\n    for (uint i = 0; i < len; i++) {\r\n      if (amounts[i] != 0) len2++;\r\n    }\r\n\r\n    t = new address[](len2);\r\n    a = new uint[](len2);\r\n\r\n    uint j = 0;\r\n    for (uint i = 0; i < len; i++) {\r\n      uint amount = amounts[i];\r\n      if (amount != 0) {\r\n        t[j] = tokens[i];\r\n        a[j] = amount;\r\n        j++;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice unites three arrays to single array without duplicates, amounts are sum, zero amounts are allowed\r\n  function combineArrays(\r\n    address[] memory tokens0,\r\n    uint[] memory amounts0,\r\n    address[] memory tokens1,\r\n    uint[] memory amounts1,\r\n    address[] memory tokens2,\r\n    uint[] memory amounts2\r\n  ) internal pure returns (\r\n    address[] memory allTokens,\r\n    uint[] memory allAmounts\r\n  ) {\r\n    uint[] memory lens = new uint[](3);\r\n    lens[0] = tokens0.length;\r\n    lens[1] = tokens1.length;\r\n    lens[2] = tokens2.length;\r\n\r\n    require(\r\n      lens[0] == amounts0.length && lens[1] == amounts1.length && lens[2] == amounts2.length,\r\n      AppErrors.INCORRECT_LENGTHS\r\n    );\r\n\r\n    uint maxLength = lens[0] + lens[1] + lens[2];\r\n    address[] memory tokensOut = new address[](maxLength);\r\n    uint[] memory amountsOut = new uint[](maxLength);\r\n    uint unitedLength;\r\n\r\n    for (uint step; step < 3; ++step) {\r\n      uint[] memory amounts = step == 0\r\n        ? amounts0\r\n        : (step == 1\r\n          ? amounts1\r\n          : amounts2);\r\n      address[] memory tokens = step == 0\r\n        ? tokens0\r\n        : (step == 1\r\n          ? tokens1\r\n          : tokens2);\r\n      for (uint i1 = 0; i1 < lens[step]; i1++) {\r\n        uint amount1 = amounts[i1];\r\n        address token1 = tokens[i1];\r\n        bool united = false;\r\n\r\n        for (uint i = 0; i < unitedLength; i++) {\r\n          if (token1 == tokensOut[i]) {\r\n            amountsOut[i] += amount1;\r\n            united = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!united) {\r\n          tokensOut[unitedLength] = token1;\r\n          amountsOut[unitedLength] = amount1;\r\n          unitedLength++;\r\n        }\r\n      }\r\n    }\r\n\r\n    // copy united tokens to result array\r\n    allTokens = new address[](unitedLength);\r\n    allAmounts = new uint[](unitedLength);\r\n    for (uint i; i < unitedLength; i++) {\r\n      allTokens[i] = tokensOut[i];\r\n      allAmounts[i] = amountsOut[i];\r\n    }\r\n\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/algebra/AlgebraConverterStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../ConverterStrategyBase.sol\";\r\nimport \"./AlgebraDepositor.sol\";\r\nimport \"./AlgebraConverterStrategyLogicLib.sol\";\r\nimport \"../../libs/AppPlatforms.sol\";\r\nimport \"../../interfaces/IRebalancingV2Strategy.sol\";\r\nimport \"../pair/PairBasedStrategyLib.sol\";\r\nimport \"./AlgebraStrategyErrors.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\ncontract AlgebraConverterStrategy is AlgebraDepositor, ConverterStrategyBase, IRebalancingV2Strategy {\r\n\r\n  //region ------------------------------------------------- Constants\r\n\r\n  string public constant override NAME = \"Algebra Converter Strategy\";\r\n  string public constant override PLATFORM = AppPlatforms.ALGEBRA;\r\n  string public constant override STRATEGY_VERSION = \"3.1.4\";\r\n\r\n  //endregion ------------------------------------------------- Constants\r\n\r\n  //region ------------------------------------------------- INIT\r\n\r\n  /// @notice Initialize the strategy with the given parameters.\r\n  /// @param controller_ The address of the controller.\r\n  /// @param splitter_ The address of the splitter.\r\n  /// @param converter_ The address of the converter.\r\n  /// @param pool_ The address of the pool.\r\n  /// @param tickRange_ The tick range for the liquidity position.\r\n  /// @param rebalanceTickRange_ The tick range for rebalancing.\r\n  function init(\r\n    address controller_,\r\n    address splitter_,\r\n    address converter_,\r\n    address pool_,\r\n    int24 tickRange_,\r\n    int24 rebalanceTickRange_,\r\n    bool isStablePool,\r\n    IncentiveKey memory key,\r\n    uint[4] calldata fuseThresholds\r\n  ) external initializer {\r\n    __ConverterStrategyBase_init(controller_, splitter_, converter_);\r\n    AlgebraConverterStrategyLogicLib.initStrategyState(\r\n      state,\r\n      [controller_, pool_],\r\n      tickRange_,\r\n      rebalanceTickRange_,\r\n      ISplitter(splitter_).asset(),\r\n      isStablePool,\r\n      fuseThresholds\r\n    );\r\n\r\n    AlgebraConverterStrategyLogicLib.initFarmingState(state, key);\r\n\r\n    // setup specific name for UI\r\n    StrategyLib2._changeStrategySpecificName(baseState, AlgebraConverterStrategyLogicLib.createSpecificName(state.pair));\r\n  }\r\n  //endregion ------------------------------------------------- INIT\r\n\r\n  //region --------------------------------------------- OPERATOR ACTIONS\r\n\r\n  /// @notice Manually set status of the fuse\r\n  /// @param status See PairBasedStrategyLib.FuseStatus enum for possible values\r\n  function setFuseStatus(uint status) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    PairBasedStrategyLib.setFuseStatus(state.pair.fuseAB, PairBasedStrategyLib.FuseStatus(status));\r\n  }\r\n\r\n  /// @notice Set thresholds for the fuse: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  ///         Decimals 18. The thresholds are compared with prices from TetuConverter's price oracle.\r\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\r\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\r\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\r\n  /// @param values Price thresholds: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  function setFuseThresholds(uint[4] memory values) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    PairBasedStrategyLib.setFuseThresholds(state.pair.fuseAB, values);\r\n  }\r\n\r\n  function setStrategyProfitHolder(address strategyProfitHolder) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    state.pair.strategyProfitHolder = strategyProfitHolder;\r\n  }\r\n\r\n  /// @notice Set withdrawDone value.\r\n  ///         When a fuse was triggered ON, all debts should be closed and asset should be converted to underlying.\r\n  ///         After completion of the conversion withdrawDone can be set to 1.\r\n  ///         So, {getFuseStatus} will return  withdrawDone=1 and you will know, that withdraw is not required\r\n  /// @param done 0 - full withdraw required, 1 - full withdraw was done\r\n  function setWithdrawDone(uint done) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    state.pair.withdrawDone = done;\r\n  }\r\n  //endregion --------------------------------------------- OPERATOR ACTIONS\r\n\r\n  //region --------------------------------------------- METRIC VIEWS\r\n\r\n  /// @notice Check if the strategy is ready for hard work.\r\n  /// @return A boolean indicating if the strategy is ready for hard work.\r\n  function isReadyToHardWork() override external virtual view returns (bool) {\r\n    return !needRebalance()\r\n    && !_isFuseTriggeredOn()\r\n    && AlgebraConverterStrategyLogicLib.isReadyToHardWork(state, _csbs.converter, controller());\r\n  }\r\n\r\n  /// @notice Check if the strategy needs rebalancing.\r\n  /// @return A boolean indicating if the strategy needs rebalancing.\r\n  function needRebalance() public view returns (bool) {\r\n    return AlgebraConverterStrategyLogicLib.needStrategyRebalance(state.pair, _csbs.converter);\r\n  }\r\n\r\n  /// @notice Returns the current state of the contract\r\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\r\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  /// @return nums [totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]\r\n  /// @return boolValues [isStablePool, depositorSwapTokens]\r\n  function getDefaultState() external override view returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  ) {\r\n    return PairBasedStrategyLogicLib.getDefaultState(state.pair);\r\n  }\r\n\r\n  //endregion ---------------------------------------------- METRIC VIEWS\r\n\r\n  //region --------------------------------------------- CALLBACKS\r\n\r\n  function onERC721Received(\r\n    address,\r\n    address,\r\n    uint256,\r\n    bytes memory\r\n  ) external pure returns (bytes4) {\r\n    return this.onERC721Received.selector;\r\n  }\r\n\r\n  //endregion --------------------------------------------- CALLBACKS\r\n\r\n  //region--------------------------------------------- REBALANCE\r\n\r\n  /// @notice Rebalance using borrow/repay only, no swaps\r\n  /// @param checkNeedRebalance Revert if rebalance is not needed. Pass false to deposit after withdrawByAgg-iterations\r\n  function rebalanceNoSwaps(bool checkNeedRebalance) external {\r\n    address _controller = controller();\r\n    StrategyLib2.onlyOperators(_controller);\r\n\r\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\r\n    uint[] memory tokenAmounts = AlgebraConverterStrategyLogicLib.rebalanceNoSwaps(\r\n      _csbs,\r\n      state.pair,\r\n      [address(_csbs.converter), address(AppLib._getLiquidator(_controller))],\r\n      oldTotalAssets,\r\n      profitToCover,\r\n      baseState.splitter,\r\n      checkNeedRebalance,\r\n      liquidationThresholds\r\n    );\r\n    _rebalanceAfter(tokenAmounts);\r\n    state.pair.lastRebalanceNoSwap = block.timestamp;\r\n  }\r\n  //endregion--------------------------------------------- REBALANCE\r\n\r\n  //region --------------------------------------------- Withdraw by iterations\r\n\r\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\r\n  function quoteWithdrawByAgg(bytes memory planEntryData) external returns (address tokenToSwap, uint amountToSwap) {\r\n    // restriction \"operator only\" is checked inside {initWithdrawLocal} in {quoteWithdrawStep}\r\n\r\n    // estimate amounts to be withdrawn from the pool\r\n    uint totalLiquidity = state.pair.totalLiquidity;\r\n    uint[] memory amountsOut = (totalLiquidity == 0)\r\n      ? new uint[](2)\r\n      : _depositorQuoteExit(totalLiquidity);\r\n\r\n    return PairBasedStrategyLogicLib.quoteWithdrawByAgg(\r\n      state.pair,\r\n      planEntryData,\r\n      amountsOut,\r\n      controller(),\r\n      _csbs.converter,\r\n      liquidationThresholds\r\n    );\r\n  }\r\n\r\n  /// @notice Make withdraw iteration: [exit from the pool], [make 1 swap], [repay a debt], [enter to the pool]\r\n  ///         Typical sequence of the actions is: exit from the pool, make 1 swap, repay 1 debt.\r\n  ///         You can enter to the pool if you are sure that you won't have borrow + repay on AAVE3 in the same block.\r\n  /// @dev All swap-by-agg data should be prepared using {quoteWithdrawByAgg} off-chain\r\n  /// @param tokenToSwap_ What token should be swapped to other\r\n  /// @param aggregator_ Aggregator that should be used on next swap. 0 - use liquidator\r\n  /// @param amountToSwap_ Amount that should be swapped. 0 - no swap\r\n  /// @param swapData Swap rote that was prepared off-chain.\r\n  /// @param planEntryData PLAN_XXX + additional data, see IterationPlanKinds\r\n  /// @param entryToPool Allow to enter to the pool at the end. Use false if you are going to make several iterations.\r\n  ///                    It's possible to enter back to the pool by calling {rebalanceNoSwaps} at any moment\r\n  ///                    0 - not allowed, 1 - allowed, 2 - allowed only if completed\r\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions.\r\n  function withdrawByAggStep(\r\n    address tokenToSwap_,\r\n    address aggregator_,\r\n    uint amountToSwap_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    uint entryToPool\r\n  ) external returns (bool completed) {\r\n    // restriction \"operator only\" is checked inside UniswapV3ConverterStrategyLogicLib.withdrawByAggStep\r\n\r\n    // fix price changes, exit from the pool\r\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\r\n\r\n    // check \"operator only\", make withdraw step, cover-loss, send profit to cover, prepare to enter to the pool\r\n    uint[] memory tokenAmounts;\r\n    (completed, tokenAmounts) = AlgebraConverterStrategyLogicLib.withdrawByAggStep(\r\n      _csbs,\r\n      [tokenToSwap_, aggregator_, controller(), address(_csbs.converter), baseState.splitter],\r\n      [amountToSwap_, profitToCover, oldTotalAssets, entryToPool],\r\n      swapData,\r\n      planEntryData,\r\n      state.pair,\r\n      liquidationThresholds\r\n    );\r\n\r\n    // enter to the pool\r\n    _rebalanceAfter(tokenAmounts);\r\n    state.pair.lastRebalanceNoSwap = 0;\r\n\r\n    if (completed && _isFuseTriggeredOn()) {\r\n      // full withdraw was completed, we can exclude next calls of withdrawByAggStep\r\n      state.pair.withdrawDone = 1;\r\n    }\r\n\r\n    ConverterStrategyBaseLib2.fixTooHighInvestedAssets(baseState.asset, oldTotalAssets, _csbs);\r\n  }\r\n\r\n  function getPropNotUnderlying18() external view returns (uint) {\r\n    return AlgebraConverterStrategyLogicLib.getPropNotUnderlying18(state.pair);\r\n  }\r\n\r\n  //endregion ------------------------------------ Withdraw by iterations\r\n\r\n  //region--------------------------------------------- INTERNAL LOGIC\r\n  function _beforeDeposit(\r\n    ITetuConverter converter_,\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint /*indexAsset_*/\r\n  ) override internal virtual returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    require(!needRebalance(), AlgebraStrategyErrors.NEED_REBALANCE);\r\n    (uint prop0, uint prop1) = AlgebraConverterStrategyLogicLib.getEntryDataProportions(\r\n      IAlgebraPool(state.pair.pool),\r\n      state.pair.lowerTick,\r\n      state.pair.upperTick,\r\n      state.pair.depositorSwapTokens\r\n    );\r\n\r\n    // get token amounts for token A, token B\r\n    address tokenA = state.pair.tokenA;\r\n    tokenAmounts = PairBasedStrategyLogicLib._beforeDeposit(\r\n      converter_,\r\n      amount_,\r\n      tokenA,\r\n      state.pair.tokenB,\r\n      prop0 * 1e18 / (prop0 + prop1),\r\n      liquidationThresholds\r\n    );\r\n\r\n    // take into account a possibility that tokens_ can contain [B, A]\r\n    if (tokens_[0] != tokenA) {\r\n      (tokenAmounts[0], tokenAmounts[1]) = (tokenAmounts[1], tokenAmounts[0]);\r\n    }\r\n  }\r\n\r\n  /// @notice Claim rewards, do _processClaims() after claiming, calculate earned and lost amounts\r\n  /// @return earned The amount of earned rewards.\r\n  /// @return lost The amount of lost rewards.\r\n  /// @return assetBalanceAfterClaim The asset balance after claiming rewards.\r\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\r\n  /// @return amountPerf Total performance fee in terms of underlying\r\n  function _handleRewards() override internal virtual returns (\r\n    uint earned,\r\n    uint lost,\r\n    uint assetBalanceAfterClaim,\r\n    uint paidDebtToInsurance,\r\n    uint amountPerf\r\n  ) {\r\n    (address[] memory rewardTokens, uint[] memory amounts) = _claim();\r\n    earned = AlgebraConverterStrategyLogicLib.calcEarned(state.pair.tokenA, controller(), rewardTokens, amounts);\r\n    (paidDebtToInsurance, amountPerf) = _rewardsLiquidation(rewardTokens, amounts);\r\n    return (earned, lost, AppLib.balance(baseState.asset), paidDebtToInsurance, amountPerf);\r\n  }\r\n\r\n  /// @notice Deposit given amount to the pool.\r\n  /// @param amount_ The amount to be deposited.\r\n  /// @param updateTotalAssetsBeforeInvest_ A boolean indicating if the total assets should be updated before investing.\r\n  /// @return strategyLoss Loss should be covered from Insurance\r\n  function _depositToPool(uint amount_, bool updateTotalAssetsBeforeInvest_) override internal virtual returns (\r\n    uint strategyLoss\r\n  ) {\r\n    if (PairBasedStrategyLib.isFuseTriggeredOn(state.pair.fuseAB.status)) {\r\n      uint[] memory tokenAmounts = new uint[](2);\r\n      tokenAmounts[0] = amount_;\r\n      emit OnDepositorEnter(tokenAmounts, tokenAmounts);\r\n      return 0;\r\n    } else {\r\n      return super._depositToPool(amount_, updateTotalAssetsBeforeInvest_);\r\n    }\r\n  }\r\n\r\n  function _beforeWithdraw(uint /*amount*/) internal view override {\r\n    require(!needRebalance(), AlgebraStrategyErrors.NEED_REBALANCE);\r\n  }\r\n\r\n  /// @notice Check need-rebalance and fuse-ON\r\n  /// @return True if the hardwork should be skipped\r\n  function _preHardWork(bool reInvest) internal view override returns (bool) {\r\n    reInvest; // hide warning\r\n    require(!needRebalance(), AlgebraStrategyErrors.NEED_REBALANCE);\r\n    require(!_isFuseTriggeredOn(), AlgebraStrategyErrors.FUSE_IS_ACTIVE);\r\n    return false;\r\n  }\r\n\r\n  /// @notice Prepare to rebalance: check operator-only, fix price changes, call depositor exit\r\n  function _rebalanceBefore() internal returns (uint profitToCover, uint oldTotalAssets) {\r\n    (, profitToCover) = _fixPriceChanges(true);\r\n    oldTotalAssets = totalAssets() - profitToCover;\r\n\r\n    // withdraw all liquidity from pool\r\n    // after disableFuse() liquidity is zero\r\n    uint liquidity = state.pair.totalLiquidity;\r\n    if (liquidity != 0) {\r\n      _depositorExit(liquidity, false);\r\n    }\r\n  }\r\n\r\n  /// @notice Make actions after rebalance: depositor enter, update invested assets\r\n  function _rebalanceAfter(uint[] memory tokenAmounts) internal {\r\n    if (tokenAmounts.length == 2 && !_isFuseTriggeredOn()) {\r\n      _depositorEnter(tokenAmounts);\r\n    }\r\n    _updateInvestedAssets();\r\n  }\r\n\r\n  function _isFuseTriggeredOn() internal view returns (bool) {\r\n    return PairBasedStrategyLib.isFuseTriggeredOn(state.pair.fuseAB.status);\r\n  }\r\n  //endregion--------------------------------------- INTERNAL LOGIC\r\n}\r\n"
    },
    "contracts/strategies/algebra/AlgebraConverterStrategyLogicLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"./AlgebraLib.sol\";\r\nimport \"./AlgebraDebtLib.sol\";\r\nimport \"./AlgebraStrategyErrors.sol\";\r\nimport \"../../libs/AppLib.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\nlibrary AlgebraConverterStrategyLogicLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n  //region ------------------------------------------------ Constants\r\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_STABLE = 300;\r\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE = 500;\r\n  uint internal constant HARD_WORK_USD_FEE_THRESHOLD = 100;\r\n\r\n  INonfungiblePositionManager internal constant ALGEBRA_NFT = INonfungiblePositionManager(0x8eF88E4c7CfbbaC1C163f7eddd4B578792201de6);\r\n  IFarmingCenter internal constant FARMING_CENTER = IFarmingCenter(0x7F281A8cdF66eF5e9db8434Ec6D97acc1bc01E78);\r\n  //endregion ------------------------------------------------ Constants\r\n\r\n  //region ------------------------------------------------ Events\r\n  event Rebalanced(uint loss, uint profitToCover, uint coveredByRewards);\r\n  event RebalancedDebt(uint loss, uint profitToCover, uint coveredByRewards);\r\n  event AlgebraFeesClaimed(uint fee0, uint fee1);\r\n  event AlgebraRewardsClaimed(uint reward, uint bonusReward);\r\n  //endregion ------------------------------------------------ Events\r\n\r\n  //region ------------------------------------------------ Data types\r\n\r\n  struct State {\r\n    PairBasedStrategyLogicLib.PairState pair;\r\n    // additional (specific) state\r\n\r\n    uint tokenId;\r\n    // farming\r\n    address rewardToken;\r\n    address bonusRewardToken;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n\r\n    /// @notice reserve space for future needs\r\n    uint[10] __gap;\r\n  }\r\n\r\n  struct RebalanceLocal {\r\n    /// @notice Fuse for token A and token B\r\n    PairBasedStrategyLib.FuseStateParams fuseAB;\r\n    ITetuConverter converter;\r\n    IAlgebraPool pool;\r\n    address tokenA;\r\n    address tokenB;\r\n    bool isStablePool;\r\n    uint[2] liquidationThresholdsAB;\r\n\r\n    bool fuseStatusChangedAB;\r\n    PairBasedStrategyLib.FuseStatus fuseStatusAB;\r\n\r\n    uint poolPrice;\r\n    uint poolPriceAdjustment;\r\n  }\r\n\r\n  struct EnterLocalVariables {\r\n    bool depositorSwapTokens;\r\n    uint128 liquidity;\r\n    uint tokenId;\r\n    int24 lowerTick;\r\n    int24 upperTick;\r\n  }\r\n\r\n  struct IsReadyToHardWorkLocal {\r\n    address tokenA;\r\n    address tokenB;\r\n    uint rewardInTermOfTokenA;\r\n    uint bonusRewardInTermOfTokenA;\r\n    uint fee0;\r\n    uint fee1;\r\n  }\r\n\r\n  struct ExitLocal {\r\n    address strategyProfitHolder;\r\n    uint128 liquidity;\r\n    uint reward;\r\n    uint bonusReward;\r\n  }\r\n  //endregion ------------------------------------------------ Data types\r\n\r\n  //region ------------------------------------------------ Helpers\r\n\r\n  /// @param controllerPool [controller, pool]\r\n  /// @param fuseThresholds Fuse thresholds for tokens (stable pool only)\r\n  function initStrategyState(\r\n    State storage state,\r\n    address[2] calldata controllerPool,\r\n    int24 tickRange,\r\n    int24 rebalanceTickRange,\r\n    address asset_,\r\n    bool isStablePool,\r\n    uint[4] calldata fuseThresholds\r\n  ) external {\r\n    require(controllerPool[1] != address(0), AppErrors.ZERO_ADDRESS);\r\n    address token0 = IAlgebraPool(controllerPool[1]).token0();\r\n    address token1 = IAlgebraPool(controllerPool[1]).token1();\r\n\r\n    int24[4] memory tickData;\r\n    {\r\n      int24 tickSpacing = AlgebraLib.tickSpacing();\r\n      if (tickRange != 0) {\r\n        require(tickRange == tickRange / tickSpacing * tickSpacing, AlgebraStrategyErrors.INCORRECT_TICK_RANGE);\r\n        require(rebalanceTickRange == rebalanceTickRange / tickSpacing * tickSpacing, AlgebraStrategyErrors.INCORRECT_REBALANCE_TICK_RANGE);\r\n      }\r\n      tickData[0] = tickSpacing;\r\n      (tickData[1], tickData[2]) = AlgebraDebtLib.calcTickRange(IAlgebraPool(controllerPool[1]), tickRange, tickSpacing);\r\n      tickData[3] = rebalanceTickRange;\r\n    }\r\n\r\n    PairBasedStrategyLogicLib.setInitialDepositorValues(\r\n      state.pair,\r\n      [controllerPool[1], asset_, token0, token1],\r\n      tickData,\r\n      isStablePool,\r\n      fuseThresholds\r\n    );\r\n\r\n    address liquidator = IController(controllerPool[0]).liquidator();\r\n    IERC20(token0).approve(liquidator, type(uint).max);\r\n    IERC20(token1).approve(liquidator, type(uint).max);\r\n    IERC20(token0).approve(address(ALGEBRA_NFT), type(uint).max);\r\n    IERC20(token1).approve(address(ALGEBRA_NFT), type(uint).max);\r\n  }\r\n\r\n  function initFarmingState(\r\n    State storage state,\r\n    IncentiveKey calldata key\r\n  ) external {\r\n    state.rewardToken = key.rewardToken;\r\n    state.bonusRewardToken = key.bonusRewardToken;\r\n    state.startTime = key.startTime;\r\n    state.endTime = key.endTime;\r\n  }\r\n\r\n  function createSpecificName(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (string memory) {\r\n    return string(abi.encodePacked(\"Algebra \", IERC20Metadata(pairState.tokenA).symbol(), \"/\", IERC20Metadata(pairState.tokenB).symbol()));\r\n  }\r\n\r\n  function getIncentiveKey(State storage state) internal view returns (IncentiveKey memory) {\r\n    return IncentiveKey(state.rewardToken, state.bonusRewardToken, state.pair.pool, state.startTime, state.endTime);\r\n  }\r\n\r\n  function getFees(State storage state) public view returns (uint fee0, uint fee1) {\r\n    (fee0, fee1) = AlgebraLib.getFees(IAlgebraPool(state.pair.pool), ALGEBRA_NFT, state.tokenId);\r\n  }\r\n\r\n  function getPoolReserves(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (\r\n    uint[] memory reserves\r\n  ) {\r\n    reserves = new uint[](2);\r\n    (uint160 sqrtRatioX96, , , , , ,) = IAlgebraPool(pairState.pool).globalState();\r\n\r\n    (reserves[0], reserves[1]) = AlgebraLib.getAmountsForLiquidity(\r\n      sqrtRatioX96,\r\n      pairState.lowerTick,\r\n      pairState.upperTick,\r\n      pairState.totalLiquidity\r\n    );\r\n\r\n    if (pairState.depositorSwapTokens) {\r\n      (reserves[0], reserves[1]) = (reserves[1], reserves[0]);\r\n    }\r\n  }\r\n\r\n  /// @dev Gets the liquidator swap slippage based on the pool type (stable or volatile).\r\n  /// @return The liquidator swap slippage percentage.\r\n  function _getLiquidatorSwapSlippage(bool isStablePool) internal pure returns (uint) {\r\n    return isStablePool ? LIQUIDATOR_SWAP_SLIPPAGE_STABLE : LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE;\r\n  }\r\n\r\n  /// @notice Calculate proportions of the tokens for entry kind 1\r\n  /// @param pool Pool instance.\r\n  /// @param lowerTick The lower tick of the pool's main range.\r\n  /// @param upperTick The upper tick of the pool's main range.\r\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\r\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  function getEntryDataProportions(IAlgebraPool pool, int24 lowerTick, int24 upperTick, bool depositorSwapTokens) external view returns (uint, uint) {\r\n    return AlgebraDebtLib.getEntryDataProportions(pool, lowerTick, upperTick, depositorSwapTokens);\r\n  }\r\n  //endregion ------------------------------------------------ Helpers\r\n\r\n  //region ------------------------------------------------ Join the pool\r\n\r\n  function enter(\r\n    State storage state,\r\n    uint[] memory amountsDesired_\r\n  ) external returns (uint[] memory amountsConsumed, uint liquidityOut) {\r\n    EnterLocalVariables memory vars = EnterLocalVariables({\r\n      depositorSwapTokens : state.pair.depositorSwapTokens,\r\n      liquidity : 0,\r\n      tokenId : state.tokenId,\r\n      lowerTick : state.pair.lowerTick,\r\n      upperTick : state.pair.upperTick\r\n    });\r\n\r\n    (address token0, address token1) = vars.depositorSwapTokens\r\n      ? (state.pair.tokenB, state.pair.tokenA)\r\n      : (state.pair.tokenA, state.pair.tokenB);\r\n    if (vars.depositorSwapTokens) {\r\n      (amountsDesired_[0], amountsDesired_[1]) = (amountsDesired_[1], amountsDesired_[0]);\r\n    }\r\n\r\n    amountsConsumed = new uint[](2);\r\n\r\n    if (vars.tokenId > 0) {\r\n      (,,,,int24 nftLowerTick, int24 nftUpperTick,,,,,) = ALGEBRA_NFT.positions(vars.tokenId);\r\n      if (nftLowerTick != vars.lowerTick || nftUpperTick != vars.upperTick) {\r\n        ALGEBRA_NFT.burn(vars.tokenId);\r\n        vars.tokenId = 0;\r\n      }\r\n    }\r\n\r\n    IncentiveKey memory key = getIncentiveKey(state);\r\n\r\n    if (vars.tokenId == 0) {\r\n      (vars.tokenId, vars.liquidity, amountsConsumed[0], amountsConsumed[1]) = ALGEBRA_NFT.mint(INonfungiblePositionManager.MintParams(\r\n        token0,\r\n        token1,\r\n        vars.lowerTick,\r\n        vars.upperTick,\r\n        amountsDesired_[0],\r\n        amountsDesired_[1],\r\n        0,\r\n        0,\r\n        address(this),\r\n        block.timestamp\r\n      ));\r\n\r\n      state.tokenId = vars.tokenId;\r\n\r\n      ALGEBRA_NFT.safeTransferFrom(address(this), address(FARMING_CENTER), vars.tokenId);\r\n    } else {\r\n      (vars.liquidity, amountsConsumed[0], amountsConsumed[1]) = ALGEBRA_NFT.increaseLiquidity(INonfungiblePositionManager.IncreaseLiquidityParams(\r\n        vars.tokenId,\r\n        amountsDesired_[0],\r\n        amountsDesired_[1],\r\n        0,\r\n        0,\r\n        block.timestamp\r\n      ));\r\n\r\n      if (state.pair.totalLiquidity > 0) {\r\n        // get reward amounts\r\n        (uint reward, uint bonusReward) = _collectRewards(key, vars.tokenId);\r\n\r\n        // exit farming (undeposit)\r\n        FARMING_CENTER.exitFarming(key, vars.tokenId, false);\r\n\r\n        // claim rewards and send to profit holder\r\n        address strategyProfitHolder = state.pair.strategyProfitHolder;\r\n        _claimRewards(state.rewardToken, strategyProfitHolder, reward);\r\n        _claimRewards(state.bonusRewardToken, strategyProfitHolder, bonusReward);\r\n      } else {\r\n        ALGEBRA_NFT.safeTransferFrom(address(this), address(FARMING_CENTER), vars.tokenId);\r\n      }\r\n    }\r\n\r\n    FARMING_CENTER.enterFarming(key, vars.tokenId, 0, false);\r\n\r\n    // todo probably we need to swap amountsConsumed depending on depositorSwapTokens in same way as in univ3\r\n    state.pair.totalLiquidity += vars.liquidity;\r\n    liquidityOut = uint(vars.liquidity);\r\n  }\r\n  //endregion ------------------------------------------------ Join the pool\r\n\r\n  //region ------------------------------------------------ Exit the pool\r\n\r\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\r\n  function exit(\r\n    State storage state,\r\n    uint128 liquidityAmountToExit,\r\n    bool emergency\r\n  ) external returns (uint[] memory amountsOut) {\r\n    ExitLocal memory v;\r\n\r\n    amountsOut = new uint[](2);\r\n    v.strategyProfitHolder = state.pair.strategyProfitHolder;\r\n    IncentiveKey memory key = getIncentiveKey(state);\r\n\r\n    v.liquidity = state.pair.totalLiquidity;\r\n\r\n    require(v.liquidity >= liquidityAmountToExit, AlgebraStrategyErrors.WRONG_LIQUIDITY);\r\n\r\n    // we assume here, that liquidity is not zero (otherwise it doesn't worth to call exit)\r\n    uint tokenId = state.tokenId;\r\n\r\n    // get reward amounts\r\n    if (! emergency) {\r\n      (v.reward, v.bonusReward) = _collectRewards(key, tokenId);\r\n    }\r\n\r\n    // exit farming (undeposit)\r\n    FARMING_CENTER.exitFarming(getIncentiveKey(state), state.tokenId, false);\r\n\r\n    // claim rewards and send to profit holder\r\n    if (! emergency) {\r\n      _claimRewards(state.rewardToken, v.strategyProfitHolder, v.reward);\r\n      _claimRewards(state.bonusRewardToken, v.strategyProfitHolder, v.bonusReward);\r\n    }\r\n\r\n    // withdraw nft\r\n    FARMING_CENTER.withdrawToken(tokenId, address(this), '');\r\n\r\n    // burn liquidity\r\n    (amountsOut[0], amountsOut[1]) = ALGEBRA_NFT.decreaseLiquidity(INonfungiblePositionManager.DecreaseLiquidityParams(tokenId, liquidityAmountToExit, 0, 0, block.timestamp));\r\n\r\n    {\r\n      // collect tokens and fee\r\n      (uint collected0, uint collected1) = ALGEBRA_NFT.collect(INonfungiblePositionManager.CollectParams(tokenId, address(this), type(uint128).max, type(uint128).max));\r\n\r\n      uint fee0 = collected0 > amountsOut[0] ? (collected0 - amountsOut[0]) : 0;\r\n      uint fee1 = collected1 > amountsOut[1] ? (collected1 - amountsOut[1]) : 0;\r\n\r\n      emit AlgebraFeesClaimed(fee0, fee1);\r\n\r\n      if (state.pair.depositorSwapTokens) {\r\n        (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n        (fee0, fee1) = (fee1, fee0);\r\n      }\r\n\r\n      // send fees to profit holder\r\n      if (fee0 > 0) {\r\n        IERC20(state.pair.tokenA).safeTransfer(v.strategyProfitHolder, fee0);\r\n      }\r\n      if (fee1 > 0) {\r\n        IERC20(state.pair.tokenB).safeTransfer(v.strategyProfitHolder, fee1);\r\n      }\r\n    }\r\n\r\n    v.liquidity -= liquidityAmountToExit;\r\n    state.pair.totalLiquidity = v.liquidity;\r\n\r\n    if (v.liquidity != 0) {\r\n      ALGEBRA_NFT.safeTransferFrom(address(this), address(FARMING_CENTER), tokenId);\r\n      FARMING_CENTER.enterFarming(key, tokenId, 0, false);\r\n    }\r\n  }\r\n\r\n  function quoteExit(\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint128 liquidityAmountToExit\r\n  ) public view returns (uint[] memory amountsOut) {\r\n    (uint160 sqrtRatioX96, , , , , ,) = IAlgebraPool(pairState.pool).globalState();\r\n    amountsOut = new uint[](2);\r\n    (amountsOut[0], amountsOut[1]) = AlgebraLib.getAmountsForLiquidity(\r\n      sqrtRatioX96,\r\n      pairState.lowerTick,\r\n      pairState.upperTick,\r\n      liquidityAmountToExit\r\n    );\r\n    if (pairState.depositorSwapTokens) {\r\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n    }\r\n  }\r\n  //endregion ------------------------------------------------ Exit the pool\r\n\r\n  //region ------------------------------------------------ Rewards\r\n\r\n  function isReadyToHardWork(State storage state, ITetuConverter converter, address controller) external view returns (bool isReady) {\r\n    IsReadyToHardWorkLocal memory v;\r\n    v.tokenA = state.pair.tokenA;\r\n    v.tokenB = state.pair.tokenB;\r\n    address h = state.pair.strategyProfitHolder;\r\n\r\n    if (state.pair.totalLiquidity != 0) {\r\n      address rewardToken = state.rewardToken;\r\n      address bonusRewardToken = state.bonusRewardToken;\r\n      IncentiveKey memory key = getIncentiveKey(state);\r\n      (uint reward, uint bonusReward) = FARMING_CENTER.eternalFarming().getRewardInfo(key, state.tokenId);\r\n      reward += IERC20(rewardToken).balanceOf(h);\r\n      bonusReward += IERC20(bonusRewardToken).balanceOf(h);\r\n      ITetuLiquidator liquidator = ITetuLiquidator(IController(controller).liquidator());\r\n      if (reward > 0) {\r\n        v.rewardInTermOfTokenA = liquidator.getPrice(rewardToken, v.tokenA, reward);\r\n      }\r\n      if (v.bonusRewardInTermOfTokenA > 0) {\r\n        v.bonusRewardInTermOfTokenA = liquidator.getPrice(bonusRewardToken, v.tokenA, bonusReward);\r\n      }\r\n      (v.fee0, v.fee1) = getFees(state);\r\n    }\r\n\r\n    // check claimable amounts and compare with thresholds\r\n    if (state.pair.depositorSwapTokens) {\r\n      (v.fee0, v.fee1) = (v.fee1, v.fee0);\r\n    }\r\n\r\n    v.fee0 += IERC20(v.tokenA).balanceOf(h);\r\n    v.fee1 += IERC20(v.tokenB).balanceOf(h);\r\n\r\n    IPriceOracle oracle = AppLib._getPriceOracle(converter);\r\n    uint priceA = oracle.getAssetPrice(v.tokenA);\r\n    uint priceB = oracle.getAssetPrice(v.tokenB);\r\n\r\n    uint fee0USD = v.fee0 * priceA / 1e18;\r\n    uint fee1USD = v.fee1 * priceB / 1e18;\r\n\r\n    return\r\n      fee0USD > HARD_WORK_USD_FEE_THRESHOLD\r\n      || fee1USD > HARD_WORK_USD_FEE_THRESHOLD\r\n      || v.rewardInTermOfTokenA * priceA / 1e18 > HARD_WORK_USD_FEE_THRESHOLD\r\n      || v.bonusRewardInTermOfTokenA * priceA / 1e18 > HARD_WORK_USD_FEE_THRESHOLD\r\n    ;\r\n  }\r\n\r\n  function claimRewards(State storage state) external returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    address strategyProfitHolder = state.pair.strategyProfitHolder;\r\n    uint tokenId = state.tokenId;\r\n    tokensOut = new address[](4);\r\n    tokensOut[0] = state.pair.tokenA;\r\n    tokensOut[1] = state.pair.tokenB;\r\n    tokensOut[2] = state.rewardToken;\r\n    tokensOut[3] = state.bonusRewardToken;\r\n\r\n    balancesBefore = new uint[](4);\r\n    for (uint i; i < tokensOut.length; i++) {\r\n      balancesBefore[i] = IERC20(tokensOut[i]).balanceOf(address(this));\r\n    }\r\n\r\n    amountsOut = new uint[](4);\r\n    if (tokenId > 0 && state.pair.totalLiquidity > 0) {\r\n      (amountsOut[0], amountsOut[1]) = FARMING_CENTER.collect(INonfungiblePositionManager.CollectParams(tokenId, address(this), type(uint128).max, type(uint128).max));\r\n\r\n      emit AlgebraFeesClaimed(amountsOut[0], amountsOut[1]);\r\n\r\n      if (state.pair.depositorSwapTokens) {\r\n        (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n      }\r\n\r\n      (amountsOut[2], amountsOut[3]) = _collectRewards(getIncentiveKey(state), tokenId);\r\n      amountsOut[2] = _claimRewards(tokensOut[2], address(0), amountsOut[2]);\r\n      amountsOut[3] = _claimRewards(tokensOut[3], address(0), amountsOut[3]);\r\n\r\n      emit AlgebraRewardsClaimed(amountsOut[2], amountsOut[3]);\r\n    }\r\n\r\n    for (uint i; i < tokensOut.length; ++i) {\r\n      uint b = IERC20(tokensOut[i]).balanceOf(strategyProfitHolder);\r\n      if (b > 0) {\r\n        IERC20(tokensOut[i]).transferFrom(strategyProfitHolder, address(this), b);\r\n        amountsOut[i] += b;\r\n      }\r\n    }\r\n  }\r\n\r\n  function calcEarned(address asset, address controller, address[] memory rewardTokens, uint[] memory amounts) external view returns (uint) {\r\n    ITetuLiquidator liquidator = ITetuLiquidator(IController(controller).liquidator());\r\n    uint len = rewardTokens.length;\r\n    uint earned;\r\n    for (uint i; i < len; ++i) {\r\n      address token = rewardTokens[i];\r\n      if (token == asset) {\r\n        earned += amounts[i];\r\n      } else {\r\n        earned += liquidator.getPrice(rewardTokens[i], asset, amounts[i]);\r\n      }\r\n    }\r\n\r\n    return earned;\r\n  }\r\n\r\n  /// @notice Claim rewards if any, send them to {strategyProfitHolder} if !skipTransfer, hide exceptions\r\n  /// @param to Transfer rewards to {to}, skip transfer if 0\r\n  function _claimRewards(address token, address to, uint rewardAmount) internal returns (uint rewardOut) {\r\n    if (rewardAmount != 0) {\r\n      try FARMING_CENTER.claimReward(\r\n        token, address(this), 0, rewardAmount\r\n      ) returns (uint /*reward*/) {\r\n        // if previous calls of claimReward were failed and current call is successful,\r\n        // we can receive reward > rewardAmount here but we will receive only rewardAmount on the balance.\r\n        // Most probably it's enough to transfer min(rewardAmount, reward) but it's more reliable to check balance\r\n        if (to != address(0)) {\r\n          rewardOut = Math.min(rewardAmount, IERC20(token).balanceOf(address(this)));\r\n          if (rewardOut != 0) {\r\n            IERC20(token).safeTransfer(to, rewardOut);\r\n          }\r\n        }\r\n      } catch {\r\n        // an exception in reward-claiming shouldn't stop hardwork / withdraw\r\n      }\r\n    }\r\n\r\n    return rewardOut;\r\n  }\r\n\r\n  /// @notice Collect rewards, hide exceptions\r\n  function _collectRewards(IncentiveKey memory key, uint tokenId) internal returns (uint reward, uint bonusReward) {\r\n    try FARMING_CENTER.collectRewards(\r\n      key, tokenId\r\n    ) returns (uint rewardAmount, uint bonusRewardAmount) {\r\n      (reward, bonusReward) = (rewardAmount, bonusRewardAmount);\r\n    } catch {\r\n      // an exception in reward-claiming shouldn't stop hardwork / withdraw\r\n    }\r\n\r\n    return (reward, bonusReward);\r\n  }\r\n  //endregion ------------------------------------------------ Rewards\r\n\r\n  //region ------------------------------------------------ Rebalance\r\n\r\n  /// @notice Determine if the strategy needs to be rebalanced.\r\n  /// @return needRebalance A boolean indicating if {rebalanceNoSwaps} should be called\r\n  function needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage pairState, ITetuConverter converter_) external view returns (\r\n    bool needRebalance\r\n  ) {\r\n    address pool = pairState.pool;\r\n    // poolPrice should have same decimals as a price from oracle == 18\r\n    uint poolPriceAdjustment = PairBasedStrategyLib.getPoolPriceAdjustment(IERC20Metadata(pairState.tokenA).decimals());\r\n    uint poolPrice = AlgebraLib.getPrice(pool, pairState.tokenB) * poolPriceAdjustment;\r\n    (needRebalance, , ) = PairBasedStrategyLogicLib.needStrategyRebalance(\r\n      pairState,\r\n      converter_,\r\n      AlgebraDebtLib.getCurrentTick(IAlgebraPool(pool)),\r\n      poolPrice\r\n    );\r\n  }\r\n\r\n  /// @notice Make rebalance without swaps (using borrowing only).\r\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\r\n  /// @param checkNeedRebalance_ True if the function should ensure that the rebalance is required\r\n  /// @param totalAssets_ Current value of totalAssets()\r\n  /// @return tokenAmounts Token amounts for deposit. If length == 0 - rebalance wasn't made and no deposit is required.\r\n  function rebalanceNoSwaps(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    address[2] calldata converterLiquidator,\r\n    uint totalAssets_,\r\n    uint profitToCover,\r\n    address splitter,\r\n    bool checkNeedRebalance_,\r\n    mapping(address => uint) storage liquidityThresholds_\r\n  ) external returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    RebalanceLocal memory v;\r\n    _initLocalVars(v, ITetuConverter(converterLiquidator[0]), pairState, liquidityThresholds_);\r\n    v.poolPrice = AlgebraLib.getPrice(address(v.pool), pairState.tokenB) * v.poolPriceAdjustment;\r\n    bool needRebalance;\r\n    int24 tick = AlgebraDebtLib.getCurrentTick(v.pool);\r\n    (needRebalance, v.fuseStatusChangedAB, v.fuseStatusAB) = PairBasedStrategyLogicLib.needStrategyRebalance(\r\n      pairState,\r\n      v.converter,\r\n      tick,\r\n      v.poolPrice\r\n    );\r\n\r\n    // update fuse status if necessary\r\n    if (needRebalance) {\r\n      // we assume here, that needRebalance is true if any fuse has changed state, see needStrategyRebalance impl\r\n      PairBasedStrategyLogicLib.updateFuseStatus(pairState, v.fuseStatusChangedAB, v.fuseStatusAB);\r\n    }\r\n\r\n    require(!checkNeedRebalance_ || needRebalance, AlgebraStrategyErrors.NO_REBALANCE_NEEDED);\r\n\r\n    // rebalancing debt, setting new tick range\r\n    if (needRebalance) {\r\n      AlgebraDebtLib.rebalanceNoSwaps(converterLiquidator, pairState, profitToCover, totalAssets_, splitter, v.liquidationThresholdsAB, tick);\r\n\r\n      uint loss;\r\n      (loss, tokenAmounts) = ConverterStrategyBaseLib2.getTokenAmountsPair(v.converter, totalAssets_, v.tokenA, v.tokenB, v.liquidationThresholdsAB);\r\n\r\n      if (loss != 0) {\r\n        ConverterStrategyBaseLib2.coverLossAndCheckResults(csbs, splitter, loss);\r\n      }\r\n      emit Rebalanced(loss, profitToCover, 0);\r\n    }\r\n\r\n    return tokenAmounts;\r\n  }\r\n\r\n  /// @notice Initialize {v} by state values\r\n  function _initLocalVars(\r\n    RebalanceLocal memory v,\r\n    ITetuConverter converter_,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    mapping(address => uint) storage liquidityThresholds_\r\n  ) internal view {\r\n    v.pool = IAlgebraPool(pairState.pool);\r\n    v.fuseAB = pairState.fuseAB;\r\n    v.converter = converter_;\r\n    v.tokenA = pairState.tokenA;\r\n    v.tokenB = pairState.tokenB;\r\n    v.isStablePool = pairState.isStablePool;\r\n    v.liquidationThresholdsAB[0] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenA]);\r\n    v.liquidationThresholdsAB[1] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenB]);\r\n    uint poolPriceDecimals = IERC20Metadata(v.tokenA).decimals();\r\n    v.poolPriceAdjustment = poolPriceDecimals < 18 ? 10**(18 - poolPriceDecimals) : 1;\r\n  }\r\n\r\n  /// @notice Get proportion of not-underlying in the pool, [0...1e18]\r\n  ///         prop.underlying : prop.not.underlying = 1e18 - PropNotUnderlying18 : propNotUnderlying18\r\n  function getPropNotUnderlying18(PairBasedStrategyLogicLib.PairState storage pairState) view external returns (uint) {\r\n    // get pool proportions\r\n    IAlgebraPool pool = IAlgebraPool(pairState.pool);\r\n    bool depositorSwapTokens = pairState.depositorSwapTokens;\r\n    (int24 newLowerTick, int24 newUpperTick) = AlgebraDebtLib._calcNewTickRange(pool, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\r\n    (uint consumed0, uint consumed1) = AlgebraDebtLib.getEntryDataProportions(pool, newLowerTick, newUpperTick, depositorSwapTokens);\r\n\r\n    require(consumed0 + consumed1 > 0, AppErrors.ZERO_VALUE);\r\n    return consumed1 * 1e18 / (consumed0 + consumed1);\r\n  }\r\n  //endregion ------------------------------------------------ Rebalance\r\n\r\n  //region ------------------------------------------------ WithdrawByAgg\r\n  /// @param addr_ [tokenToSwap, aggregator, controller, converter, splitter]\r\n  /// @param values_ [amountToSwap_, profitToCover, oldTotalAssets, entryToPool]\r\n  /// @return completed All debts were closed, leftovers were swapped to proper proportions\r\n  /// @return tokenAmountsOut Amounts to be deposited to pool. This array is empty if no deposit allowed/required.\r\n  function withdrawByAggStep(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    address[5] calldata addr_,\r\n    uint[4] calldata values_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    mapping(address => uint) storage liquidationThresholds\r\n  ) external returns (\r\n    bool completed,\r\n    uint[] memory tokenAmountsOut\r\n  ) {\r\n    address[2] memory tokens = [pairState.tokenA, pairState.tokenB];\r\n\r\n    // Calculate amounts to be deposited to pool, calculate loss, fix profitToCover\r\n    uint[] memory tokenAmounts;\r\n    uint loss;\r\n    (completed, tokenAmounts, loss) = PairBasedStrategyLogicLib.withdrawByAggStep(addr_, values_, swapData, planEntryData, tokens, liquidationThresholds);\r\n\r\n    // cover loss\r\n    if (loss != 0) {\r\n      ConverterStrategyBaseLib2.coverLossAndCheckResults(\r\n        csbs,\r\n        addr_[4], // splitter\r\n        loss\r\n      );\r\n    }\r\n    emit RebalancedDebt(loss, values_[1], 0);\r\n\r\n    // uint entryToPool = values_[3];\r\n    if (values_[3] == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED\r\n      || (values_[3] == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED && completed)\r\n    ) {\r\n      // We are going to enter to the pool: update lowerTick and upperTick, initialize tokenAmountsOut\r\n      (pairState.lowerTick, pairState.upperTick) = AlgebraDebtLib._calcNewTickRange(\r\n        IAlgebraPool(pairState.pool),\r\n        pairState.lowerTick,\r\n        pairState.upperTick,\r\n        pairState.tickSpacing\r\n      );\r\n      tokenAmountsOut = tokenAmounts;\r\n    }\r\n\r\n    return (completed, tokenAmountsOut); // hide warning\r\n  }\r\n  //endregion ------------------------------------------------ WithdrawByAgg\r\n\r\n}\r\n\r\n"
    },
    "contracts/strategies/algebra/AlgebraDebtLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../ConverterStrategyBaseLib.sol\";\r\nimport \"../ConverterStrategyBaseLib2.sol\";\r\nimport \"./AlgebraLib.sol\";\r\nimport \"./AlgebraStrategyErrors.sol\";\r\nimport \"../../libs/BorrowLib.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\nlibrary AlgebraDebtLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n//region  -------------------------------------------- Constants\r\n  uint public constant SELL_GAP = 100;\r\n  address internal constant ONEINCH = 0x1111111254EEB25477B68fb85Ed929f73A960582; // 1inch router V5\r\n  address internal constant OPENOCEAN = 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64; // OpenOceanExchangeProxy\r\n//endregion  -------------------------------------------- Constants\r\n\r\n//region  -------------------------------------------- Entry data\r\n  /// @notice Calculate proportions of the tokens for entry kind 1\r\n  /// @param pool Pool instance.\r\n  /// @param lowerTick The lower tick of the pool's main range.\r\n  /// @param upperTick The upper tick of the pool's main range.\r\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\r\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  function getEntryDataProportions(\r\n    IAlgebraPool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    bool depositorSwapTokens\r\n  ) internal view returns (uint, uint) {\r\n    address token1 = pool.token1();\r\n    uint token1Price = AlgebraLib.getPrice(address(pool), token1);\r\n\r\n    uint token1Decimals = IERC20Metadata(token1).decimals();\r\n\r\n    uint token0Desired = token1Price;\r\n    uint token1Desired = 10 ** token1Decimals;\r\n    require(token1Desired != 0, AppErrors.ZERO_VALUE);\r\n\r\n    // calculate proportions\r\n    (uint consumed0, uint consumed1,) = AlgebraLib.addLiquidityPreview(address(pool), lowerTick, upperTick, token0Desired, token1Desired);\r\n    return depositorSwapTokens\r\n      ? (1e18*consumed1 * token1Price / token1Desired, 1e18*consumed0)\r\n      : (1e18*consumed0, 1e18*consumed1 * token1Price / token1Desired);\r\n  }\r\n\r\n//endregion  -------------------------------------------- Entry data\r\n\r\n//region  -------------------------------------------- Calc tick range\r\n  function calcTickRange(IAlgebraPool pool, int24 tickRange, int24 tickSpacing) public view returns (int24 lowerTick, int24 upperTick) {\r\n    return PairBasedStrategyLogicLib.calcTickRange(getCurrentTick(pool), tickRange, tickSpacing);\r\n  }\r\n\r\n  function getCurrentTick(IAlgebraPool pool) public view returns(int24 tick) {\r\n    (, tick, , , , ,) = pool.globalState();\r\n  }\r\n\r\n  /// @notice Calculate the new tick range for a Algebra pool, the tick is read from the pool.\r\n  /// @param pool The Algebra pool to calculate the new tick range for.\r\n  /// @param lowerTick The current lower tick value for the pool.\r\n  /// @param upperTick The current upper tick value for the pool.\r\n  /// @param tickSpacing The tick spacing for the pool.\r\n  /// @return lowerTickNew The new lower tick value for the pool.\r\n  /// @return upperTickNew The new upper tick value for the pool.\r\n  function _calcNewTickRange(\r\n    IAlgebraPool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing\r\n  ) internal view returns (int24 lowerTickNew, int24 upperTickNew) {\r\n    int24 currentTick = getCurrentTick(pool);\r\n    return _calcNewTickRangeForTick(currentTick, lowerTick, upperTick, tickSpacing);\r\n  }\r\n\r\n  /// @notice Calculate the new tick range for a Algebra pool, the tick is known.\r\n  function _calcNewTickRangeForTick(\r\n    int24 currentTick,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing\r\n  ) internal pure returns (int24 lowerTickNew, int24 upperTickNew) {\r\n    int24 fullTickRange = upperTick - lowerTick;\r\n    int24 tickRange = fullTickRange == tickSpacing\r\n      ? int24(0)\r\n      : fullTickRange / 2;\r\n    return PairBasedStrategyLogicLib.calcTickRange(currentTick, tickRange, tickSpacing);\r\n  }\r\n//endregion  -------------------------------------------- Calc tick range\r\n\r\n//region  -------------------------------------------- Rebalance\r\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\r\n  function rebalanceNoSwaps(\r\n    address[2] calldata converterLiquidator,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint profitToCover,\r\n    uint totalAssets,\r\n    address splitter,\r\n    uint[2] calldata liquidationThresholdsAB,\r\n    int24 tick\r\n  ) external {\r\n    (int24 newLowerTick, int24 newUpperTick) = _calcNewTickRangeForTick(tick, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\r\n    (uint prop0, uint prop1) = getEntryDataProportions(IAlgebraPool(pairState.pool), newLowerTick, newUpperTick, pairState.depositorSwapTokens);\r\n    PairBasedStrategyLogicLib._rebalanceNoSwaps(\r\n      converterLiquidator,\r\n      pairState,\r\n      profitToCover,\r\n      totalAssets,\r\n      splitter,\r\n  liquidationThresholdsAB,\r\n      prop0 * BorrowLib.SUM_PROPORTIONS / (prop0 + prop1)\r\n    );\r\n    (pairState.lowerTick, pairState.upperTick) = (newLowerTick, newUpperTick);\r\n  }\r\n//endregion  -------------------------------------------- Rebalance\r\n\r\n}\r\n"
    },
    "contracts/strategies/algebra/AlgebraDepositor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\";\r\nimport \"../DepositorBase.sol\";\r\nimport \"./AlgebraStrategyErrors.sol\";\r\nimport \"./AlgebraConverterStrategyLogicLib.sol\";\r\n\r\n\r\nabstract contract AlgebraDepositor is DepositorBase, Initializable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                CONSTANTS\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev Version of this contract. Adjust manually on each code modification.\r\n  string public constant ALGEBRA_DEPOSITOR_VERSION = \"1.0.0\";\r\n\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A = 0;\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B = 1;\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_RT = 2;\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_BRT = 3;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                VARIABLES\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev State variable to store the current state of the whole strategy\r\n  AlgebraConverterStrategyLogicLib.State internal state;\r\n\r\n  /// @dev reserve space for future needs\r\n  uint[100 - 65] private __gap;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                       View\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @return nums Balances of [tokenA, tokenB, rewardToken, bonusRewardToken] for profit holder\r\n  function getSpecificState() external view returns (\r\n    uint[] memory nums\r\n  ) {\r\n    address profitHolder = state.pair.strategyProfitHolder;\r\n    nums = new uint[](4);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A] = IERC20(state.pair.tokenA).balanceOf(profitHolder);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B] = IERC20(state.pair.tokenB).balanceOf(profitHolder);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_RT] = IERC20(state.rewardToken).balanceOf(profitHolder);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_BRT] = IERC20(state.bonusRewardToken).balanceOf(profitHolder);\r\n  }\r\n\r\n  /// @notice Returns the fees for the current state.\r\n  /// @return fee0 and fee1.\r\n  function getFees() public view returns (uint fee0, uint fee1) {\r\n    return AlgebraConverterStrategyLogicLib.getFees(state);\r\n  }\r\n\r\n  /// @notice Returns the pool assets.\r\n  /// @return poolAssets An array containing the addresses of the pool assets.\r\n  function _depositorPoolAssets() override internal virtual view returns (address[] memory poolAssets) {\r\n    poolAssets = new address[](2);\r\n    poolAssets[0] = state.pair.tokenA;\r\n    poolAssets[1] = state.pair.tokenB;\r\n  }\r\n\r\n  /// @notice Returns the pool weights and the total weight.\r\n  /// @return weights An array containing the weights of the pool assets, and totalWeight the sum of the weights.\r\n  function _depositorPoolWeights() override internal virtual view returns (uint[] memory weights, uint totalWeight) {\r\n    weights = new uint[](2);\r\n    weights[0] = 1;\r\n    weights[1] = 1;\r\n    totalWeight = 2;\r\n  }\r\n\r\n  /// @notice Returns the pool reserves.\r\n  /// @return reserves An array containing the reserves of the pool assets.\r\n  function _depositorPoolReserves() override internal virtual view returns (uint[] memory reserves) {\r\n    return AlgebraConverterStrategyLogicLib.getPoolReserves(state.pair);\r\n  }\r\n\r\n  /// @notice Returns the current liquidity of the depositor.\r\n  /// @return The current liquidity of the depositor.\r\n  function _depositorLiquidity() override internal virtual view returns (uint) {\r\n    return uint(state.pair.totalLiquidity);\r\n  }\r\n\r\n  /// @notice Returns the total supply of the depositor.\r\n  /// @return In UniV3 we can not calculate the total supply of the whole pool. Return only ourself value.\r\n  function _depositorTotalSupply() override internal view virtual returns (uint) {\r\n    return uint(state.pair.totalLiquidity);\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Enter, exit\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Handles the deposit operation.\r\n  function _depositorEnter(uint[] memory amountsDesired_) override internal virtual returns (uint[] memory amountsConsumed, uint liquidityOut) {\r\n    (amountsConsumed, liquidityOut) = AlgebraConverterStrategyLogicLib.enter(state, amountsDesired_);\r\n  }\r\n\r\n  /// @notice Handles the withdrawal operation.\r\n  /// @param liquidityAmount The amount of liquidity to be withdrawn.\r\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\r\n  /// @return amountsOut The amounts of the tokens withdrawn.\r\n  function _depositorExit(uint liquidityAmount, bool emergency) override internal virtual returns (uint[] memory amountsOut) {\r\n    amountsOut = AlgebraConverterStrategyLogicLib.exit(state, uint128(liquidityAmount), emergency);\r\n  }\r\n\r\n  /// @notice Returns the amount of tokens that would be withdrawn based on the provided liquidity amount.\r\n  /// @param liquidityAmount The amount of liquidity to quote the withdrawal for.\r\n  /// @return amountsOut The amounts of the tokens that would be withdrawn.\r\n  function _depositorQuoteExit(uint liquidityAmount) override internal virtual returns (uint[] memory amountsOut) {\r\n    amountsOut = AlgebraConverterStrategyLogicLib.quoteExit(state.pair, uint128(liquidityAmount));\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Claim rewards\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Claims all possible rewards.\r\n  /// @return tokensOut An array containing the addresses of the reward tokens,\r\n  /// @return amountsOut An array containing the amounts of the reward tokens.\r\n  function _depositorClaimRewards() override internal virtual returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    return AlgebraConverterStrategyLogicLib.claimRewards(state);\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/algebra/AlgebraLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../integrations/algebra/IAlgebraPool.sol\";\r\nimport \"../../integrations/algebra/INonfungiblePositionManager.sol\";\r\nimport \"../../integrations/algebra/IFarmingCenter.sol\";\r\nimport \"../../integrations/algebra/IncentiveKey.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n\r\nlibrary AlgebraLib {\r\n  int24 internal constant TICKSPACING = 60;\r\n  uint8 internal constant RESOLUTION = 96;\r\n  uint internal constant Q96 = 0x1000000000000000000000000;\r\n  uint private constant TWO_96 = 2 ** 96;\r\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n  uint160 private constant MIN_SQRT_RATIO = 4295128739 + 1;\r\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n  uint160 private constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\r\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n  int24 internal constant MIN_TICK = - 887272;\r\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n  int24 internal constant MAX_TICK = - MIN_TICK;\r\n\r\n  function tickSpacing() external pure returns (int24) {\r\n    return TICKSPACING;\r\n  }\r\n\r\n  function addLiquidityPreview(address pool_, int24 lowerTick_, int24 upperTick_, uint amount0Desired_, uint amount1Desired_) external view returns (uint amount0Consumed, uint amount1Consumed, uint128 liquidityOut) {\r\n    IAlgebraPool pool = IAlgebraPool(pool_);\r\n    (uint160 sqrtRatioX96, , , , , ,) = pool.globalState();\r\n    liquidityOut = getLiquidityForAmounts(sqrtRatioX96, lowerTick_, upperTick_, amount0Desired_, amount1Desired_);\r\n    (amount0Consumed, amount1Consumed) = getAmountsForLiquidity(sqrtRatioX96, lowerTick_, upperTick_, liquidityOut);\r\n  }\r\n\r\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getLiquidityForAmounts(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint amount0,\r\n    uint amount1\r\n  ) public pure returns (uint128 liquidity) {\r\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\r\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      liquidity = _getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      uint128 liquidity0 = _getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n      uint128 liquidity1 = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n    }\r\n  }\r\n\r\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getAmountsForLiquidity(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint128 liquidity\r\n  ) public pure returns (uint amount0, uint amount1) {\r\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\r\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\r\n\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      amount0 = _getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      amount0 = _getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\r\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\r\n    } else {\r\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n  function mulDiv(\r\n    uint a,\r\n    uint b,\r\n    uint denominator\r\n  ) public pure returns (uint result) {\r\n    unchecked {\r\n      // 512-bit multiply [prod1 prod0] = a * b\r\n      // Compute the product mod 2**256 and mod 2**256 - 1\r\n      // then use the Chinese Remainder Theorem to reconstruct\r\n      // the 512 bit result. The result is stored in two 256\r\n      // variables such that product = prod1 * 2**256 + prod0\r\n      uint prod0;\r\n      // Least significant 256 bits of the product\r\n      uint prod1;\r\n      // Most significant 256 bits of the product\r\n      assembly {\r\n        let mm := mulmod(a, b, not(0))\r\n        prod0 := mul(a, b)\r\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n      }\r\n\r\n      // Handle non-overflow cases, 256 by 256 division\r\n      if (prod1 == 0) {\r\n        require(denominator > 0);\r\n        assembly {\r\n          result := div(prod0, denominator)\r\n        }\r\n        return result;\r\n      }\r\n\r\n      // Make sure the result is less than 2**256.\r\n      // Also prevents denominator == 0\r\n      require(denominator > prod1);\r\n\r\n      ///////////////////////////////////////////////\r\n      // 512 by 256 division.\r\n      ///////////////////////////////////////////////\r\n\r\n      // Make division exact by subtracting the remainder from [prod1 prod0]\r\n      // Compute remainder using mulmod\r\n      uint remainder;\r\n      assembly {\r\n        remainder := mulmod(a, b, denominator)\r\n      }\r\n      // Subtract 256 bit number from 512 bit number\r\n      assembly {\r\n        prod1 := sub(prod1, gt(remainder, prod0))\r\n        prod0 := sub(prod0, remainder)\r\n      }\r\n\r\n      // Factor powers of two out of denominator\r\n      // Compute largest power of two divisor of denominator.\r\n      // Always >= 1.\r\n      // EDIT for 0.8 compatibility:\r\n      // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint\r\n      uint twos = denominator & (~denominator + 1);\r\n\r\n      // Divide denominator by power of two\r\n      assembly {\r\n        denominator := div(denominator, twos)\r\n      }\r\n\r\n      // Divide [prod1 prod0] by the factors of two\r\n      assembly {\r\n        prod0 := div(prod0, twos)\r\n      }\r\n      // Shift in bits from prod1 into prod0. For this we need\r\n      // to flip `twos` such that it is 2**256 / twos.\r\n      // If twos is zero, then it becomes one\r\n      assembly {\r\n        twos := add(div(sub(0, twos), twos), 1)\r\n      }\r\n      prod0 |= prod1 * twos;\r\n\r\n      // Invert denominator mod 2**256\r\n      // Now that denominator is an odd number, it has an inverse\r\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n      // Compute the inverse by starting with a seed that is correct\r\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n      uint inv = (3 * denominator) ^ 2;\r\n      // Now use Newton-Raphson iteration to improve the precision.\r\n      // Thanks to Hensel's lifting lemma, this also works in modular\r\n      // arithmetic, doubling the correct bits in each step.\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**8\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**16\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**32\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**64\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**128\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**256\r\n\r\n      // Because the division is now exact we can divide by multiplying\r\n      // with the modular inverse of denominator. This will give us the\r\n      // correct result modulo 2**256. Since the precoditions guarantee\r\n      // that the outcome is less than 2**256, this is the final result.\r\n      // We don't need to compute the high bits of the result and prod1\r\n      // is no longer required.\r\n      result = prod0 * inv;\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  function mulDivRoundingUp(\r\n    uint a,\r\n    uint b,\r\n    uint denominator\r\n  ) internal pure returns (uint result) {\r\n    result = mulDiv(a, b, denominator);\r\n    if (mulmod(a, b, denominator) > 0) {\r\n      require(result < type(uint).max);\r\n      result++;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates price in pool\r\n  /// @return price with decimals of paired token\r\n  function getPrice(address pool_, address tokenIn) public view returns (uint) {\r\n    IAlgebraPool pool = IAlgebraPool(pool_);\r\n    address token0 = pool.token0();\r\n    address token1 = pool.token1();\r\n\r\n    uint tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,,,,) = pool.globalState();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (tokenIn == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n    return purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n  }\r\n\r\n  function getFees(IAlgebraPool pool, INonfungiblePositionManager nft, uint tokenId) public view returns (uint fee0, uint fee1) {\r\n    (, int24 tick, , , , ,) = pool.globalState();\r\n    (,,,,int24 lowerTick,int24 upperTick,uint128 liquidity,uint feeGrowthInside0Last, uint feeGrowthInside1Last, uint128 tokensOwed0, uint128 tokensOwed1) = nft.positions(tokenId);\r\n    fee0 = _computeFeesEarned(pool, lowerTick, upperTick, liquidity, true, feeGrowthInside0Last, tick) + uint(tokensOwed0);\r\n    fee1 = _computeFeesEarned(pool, lowerTick, upperTick, liquidity, false, feeGrowthInside1Last, tick) + uint(tokensOwed1);\r\n  }\r\n\r\n  function _computeFeesEarned(\r\n    IAlgebraPool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint128 liquidity,\r\n    bool isZero,\r\n    uint feeGrowthInsideLast,\r\n    int24 tick\r\n  ) internal view returns (uint fee) {\r\n    uint feeGrowthOutsideLower;\r\n    uint feeGrowthOutsideUpper;\r\n    uint feeGrowthGlobal;\r\n    if (isZero) {\r\n      feeGrowthGlobal = pool.totalFeeGrowth0Token();\r\n      (,, feeGrowthOutsideLower,,,,,) = pool.ticks(lowerTick);\r\n      (,, feeGrowthOutsideUpper,,,,,) = pool.ticks(upperTick);\r\n    } else {\r\n      feeGrowthGlobal = pool.totalFeeGrowth1Token();\r\n      (,,, feeGrowthOutsideLower,,,,) = pool.ticks(lowerTick);\r\n      (,,, feeGrowthOutsideUpper,,,,) = pool.ticks(upperTick);\r\n    }\r\n\r\n    unchecked {\r\n      // calculate fee growth below\r\n      uint feeGrowthBelow;\r\n      if (tick >= lowerTick) {\r\n        feeGrowthBelow = feeGrowthOutsideLower;\r\n      } else {\r\n        feeGrowthBelow = feeGrowthGlobal - feeGrowthOutsideLower;\r\n      }\r\n      // calculate fee growth above\r\n      uint feeGrowthAbove;\r\n      if (tick < upperTick) {\r\n        feeGrowthAbove = feeGrowthOutsideUpper;\r\n      } else {\r\n        feeGrowthAbove = feeGrowthGlobal - feeGrowthOutsideUpper;\r\n      }\r\n\r\n      uint feeGrowthInside = feeGrowthGlobal - feeGrowthBelow - feeGrowthAbove;\r\n      fee = mulDiv(\r\n        liquidity,\r\n        feeGrowthInside - feeGrowthInsideLast,\r\n        0x100000000000000000000000000000000\r\n      );\r\n    }\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount0 The amount0 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function _getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount0) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    uint intermediate = mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\r\n    return _toUint128(mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount1 The amount1 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function _getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount1) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return _toUint128(mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount0 The amount0\r\n  function _getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount0) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return mulDivRoundingUp(1, mulDivRoundingUp(uint(liquidity) << RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96), sqrtRatioAX96);\r\n  }\r\n\r\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount1 The amount1\r\n  function _getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount1) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function _min(uint a, uint b) internal pure returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function _max(uint a, uint b) internal pure returns (uint) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  function _toUint128(uint x) private pure returns (uint128 y) {\r\n    require((y = uint128(x)) == x);\r\n  }\r\n\r\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n  /// @dev Throws if |tick| > max tick\r\n  /// @param tick The input tick for the above formula\r\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n  /// at the given tick\r\n  function _getSqrtRatioAtTick(int24 tick)\r\n  internal\r\n  pure\r\n  returns (uint160 sqrtPriceX96)\r\n  {\r\n    uint256 absTick =\r\n      tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\r\n\r\n    // EDIT: 0.8 compatibility\r\n    require(absTick <= uint256(int256(MAX_TICK)), \"T\");\r\n\r\n    uint256 ratio =\r\n      absTick & 0x1 != 0\r\n        ? 0xfffcb933bd6fad37aa2d162d1a594001\r\n        : 0x100000000000000000000000000000000;\r\n    if (absTick & 0x2 != 0)\r\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n    if (absTick & 0x4 != 0)\r\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n    if (absTick & 0x8 != 0)\r\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n    if (absTick & 0x10 != 0)\r\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n    if (absTick & 0x20 != 0)\r\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n    if (absTick & 0x40 != 0)\r\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n    if (absTick & 0x80 != 0)\r\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n    if (absTick & 0x100 != 0)\r\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n    if (absTick & 0x200 != 0)\r\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n    if (absTick & 0x400 != 0)\r\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n    if (absTick & 0x800 != 0)\r\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n    if (absTick & 0x1000 != 0)\r\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n    if (absTick & 0x2000 != 0)\r\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n    if (absTick & 0x4000 != 0)\r\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n    if (absTick & 0x8000 != 0)\r\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n    if (absTick & 0x10000 != 0)\r\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n    if (absTick & 0x20000 != 0)\r\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n    if (absTick & 0x40000 != 0)\r\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n    if (absTick & 0x80000 != 0)\r\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n    if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n    sqrtPriceX96 = uint160(\r\n      (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\r\n    );\r\n  }\r\n\r\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n  /// ever return.\r\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n  function _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n    // second inequality must be < because the price can never reach the price at the max tick\r\n    require(\r\n      sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\r\n      \"R\"\r\n    );\r\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n    uint256 r = ratio;\r\n    uint256 msb = 0;\r\n\r\n    assembly {\r\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(5, gt(r, 0xFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(4, gt(r, 0xFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(3, gt(r, 0xFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(2, gt(r, 0xF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(1, gt(r, 0x3))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := gt(r, 0x1)\r\n      msb := or(msb, f)\r\n    }\r\n\r\n    if (msb >= 128) r = ratio >> (msb - 127);\r\n    else r = ratio << (127 - msb);\r\n\r\n    int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(63, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(62, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(61, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(60, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(59, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(58, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(57, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(56, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(55, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(54, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(53, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(52, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(51, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(50, f))\r\n    }\r\n\r\n    tick = _getFinalTick(log_2, sqrtPriceX96);\r\n  }\r\n\r\n  function _getFinalTick(int256 log_2, uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n    // 128.128 number\r\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141;\r\n\r\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n    tick = (tickLow == tickHi)\r\n      ? tickLow\r\n      : (_getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow);\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/algebra/AlgebraStrategyErrors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nlibrary AlgebraStrategyErrors {\r\n\r\n  string public constant NEED_REBALANCE = \"AS-1 Need rebalance\";\r\n  string public constant WRONG_BALANCE = \"AS-2 Wrong balance\";\r\n  string public constant INCORRECT_TICK_RANGE = \"AS-3 Incorrect tickRange\";\r\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \"AS-4 Incorrect rebalanceTickRange\";\r\n  string public constant INCORRECT_ASSET = \"AS-5 Incorrect asset\";\r\n  string public constant WRONG_FEE = \"AS-6 Wrong fee\";\r\n  string public constant WRONG_LIQUIDITY = \"AS-7 Wrong liquidity\";\r\n  string public constant NO_REBALANCE_NEEDED = \"AS-9 No rebalance needed\";\r\n  string public constant BALANCE_LOWER_THAN_FEE = \"AS-10 Balance lower than fee\";\r\n  string public constant NOT_CALLBACK_CALLER = \"AS-11 Not callback caller\";\r\n  string public constant ZERO_PROFIT_HOLDER = \"AS-13 Zero strategy profit holder\";\r\n  string public constant FUSE_IS_ACTIVE = \"AS-14 Fuse is active\";\r\n}\r\n"
    },
    "contracts/strategies/balancer/BalancerBoostedDepositor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"../DepositorBase.sol\";\r\nimport \"./BalancerLogicLib.sol\";\r\nimport \"../../integrations/balancer/IBVault.sol\";\r\nimport \"../../integrations/balancer/IBalancerHelper.sol\";\r\nimport \"../../integrations/balancer/IComposableStablePool.sol\";\r\nimport \"../../integrations/balancer/IChildChainLiquidityGaugeFactory.sol\";\r\nimport \"../../integrations/balancer/IBalancerGauge.sol\";\r\n\r\n/// @title Depositor for Composable Stable Pool with several embedded linear pools like \"Balancer Boosted Tetu USD\"\r\n/// @dev See https://app.balancer.fi/polygon#/polygon/pool/0xb3d658d5b95bf04e2932370dd1ff976fe18dd66a000000000000000000000ace\r\n///            bb-t-DAI (DAI + tDAI) + bb-t-USDC (USDC + tUSDC) + bb-t-USDT (USDT + tUSDT)\r\n///      See https://docs.balancer.fi/products/balancer-pools/boosted-pools for explanation of Boosted Pools on BalanceR.\r\n///      Terms\r\n///         bb-t-USD = pool bpt\r\n///         bb-t-DAI, bb-t-USDC, bb-t-USDT = underlying bpt\r\n/// 1.0.1 Move to balancer gauge v2\r\nabstract contract BalancerBoostedDepositor is DepositorBase, Initializable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///region Constants\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev Version of this contract. Adjust manually on each code modification.\r\n  string public constant BALANCER_BOOSTED_DEPOSITOR_VERSION = \"1.0.1\";\r\n\r\n  /// @dev https://dev.balancer.fi/references/contracts/deployment-addresses\r\n  IBVault internal constant BALANCER_VAULT = IBVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\r\n  address internal constant BALANCER_HELPER = 0x239e55F427D44C3cc793f49bFB507ebe76638a2b;\r\n  address internal constant BAL_TOKEN = 0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///endregion Constants\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  //region Variables\r\n  //                Keep names and ordering!\r\n  // Add only in the bottom and don't forget to decrease gap variable\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice i.e. for \"Balancer Boosted Aave USD\": 0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b\r\n  /// @notice i.e. for \"Balancer Boosted Tetu USD\": 0xb3d658d5b95bf04e2932370dd1ff976fe18dd66a000000000000000000000ace\r\n  bytes32 public poolId;\r\n\r\n  /// @notice Gauge for a pool - it can be found in the Logs of the transactions of\r\n  ///         ChildChainGaugeFactory == 0x22625eEDd92c81a219A83e1dc48f88d54786B017\r\n  ///         Topic 1 in the first event contains address of the gauge (Vyper_contract, vyper:0.3.3)\r\n  ///         The gauge has field \"lp_token\" that contains pool address.\r\n  IBalancerGauge public gauge;\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///endregion Variables\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                   Initialization\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  function __BalancerBoostedDepositor_init(address pool_, address gauge_) internal onlyInitializing {\r\n    poolId = IComposableStablePool(pool_).getPoolId();\r\n\r\n    gauge = IBalancerGauge(gauge_);\r\n\r\n    // infinite approve of pool-BPT to the gauge todo is it safe for the external gauge?\r\n    IERC20(pool_).safeApprove(address(gauge_), type(uint).max);\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                       View\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Returns pool assets, same as getPoolTokens but without pool-bpt\r\n  function _depositorPoolAssets() override internal virtual view returns (address[] memory poolAssets) {\r\n    return BalancerLogicLib.depositorPoolAssets(BALANCER_VAULT, poolId);\r\n  }\r\n\r\n  /// @notice Returns pool weights\r\n  /// @return weights Array with weights, length = getPoolTokens.tokens - 1 (all assets except BPT)\r\n  /// @return totalWeight Total sum of all items of {weights}\r\n  function _depositorPoolWeights() override internal virtual view returns (uint[] memory weights, uint totalWeight) {\r\n    return BalancerLogicLib.depositorPoolWeights(BALANCER_VAULT, poolId);\r\n  }\r\n\r\n  /// @notice Total amounts of the main assets under control of the pool, i.e amounts of DAI, USDC, USDT\r\n  /// @return reservesOut Total amounts of embedded assets, i.e. for \"Balancer Boosted Aave USD\" we return:\r\n  ///                     0: balance DAI + (balance amDAI recalculated to DAI)\r\n  ///                     1: balance USDC + (amUSDC recalculated to USDC)\r\n  ///                     2: balance USDT + (amUSDT recalculated to USDT)\r\n  function _depositorPoolReserves() override internal virtual view returns (uint[] memory reservesOut) {\r\n    reservesOut = BalancerLogicLib.depositorPoolReserves(BALANCER_VAULT, poolId);\r\n  }\r\n\r\n  /// @notice Returns depositor's pool shares / lp token amount\r\n  function _depositorLiquidity() override internal virtual view returns (uint liquidityOut) {\r\n    liquidityOut = gauge.balanceOf(address(this))\r\n    + IComposableStablePool(BalancerLogicLib.getPoolAddress(poolId)).balanceOf(address(this));\r\n  }\r\n\r\n  //// @notice Total amount of liquidity (LP tokens) in the depositor\r\n  function _depositorTotalSupply() override internal view returns (uint totalSupplyOut) {\r\n    totalSupplyOut = IComposableStablePool(BalancerLogicLib.getPoolAddress(poolId)).getActualSupply();\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Enter, exit\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Deposit given amount to the pool.\r\n  /// @param amountsDesired_ Amounts of assets on the balance of the depositor\r\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\r\n  ///         i.e. for \"Balancer Boosted Aave USD\" we have DAI, USDC, USDT\r\n  /// @return amountsConsumedOut Amounts of assets deposited to balanceR pool\r\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\r\n  /// @return liquidityOut Total amount of liquidity added to balanceR pool in terms of pool-bpt tokens\r\n  function _depositorEnter(uint[] memory amountsDesired_) override internal virtual returns (\r\n    uint[] memory amountsConsumedOut,\r\n    uint liquidityOut\r\n  ) {\r\n    bytes32 _poolId = poolId;\r\n    IComposableStablePool pool = IComposableStablePool(BalancerLogicLib.getPoolAddress(_poolId));\r\n\r\n    // join to the pool, receive pool-BPTs\r\n    (amountsConsumedOut, liquidityOut) = BalancerLogicLib.depositorEnter(BALANCER_VAULT, _poolId, amountsDesired_);\r\n\r\n    // stake all available pool-BPTs to the gauge\r\n    // we can have pool-BPTs on depositor's balance after previous exit, stake them too\r\n    gauge.deposit(pool.balanceOf(address(this)));\r\n  }\r\n\r\n  /// @notice Withdraw given amount of LP-tokens from the pool.\r\n  /// @dev if requested liquidityAmount >= invested, then should make full exit\r\n  /// @param liquidityAmount_ Max amount to withdraw in bpt. Actual withdrawn amount will be less,\r\n  ///                         so it worth to add a gap to this amount, i.e. 1%\r\n  /// @return amountsOut Result amounts of underlying (DAI, USDC..) that will be received from BalanceR\r\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\r\n  function _depositorExit(uint liquidityAmount_, bool emergency) override internal virtual returns (\r\n    uint[] memory amountsOut\r\n  ) {\r\n    emergency; // hide warning; todo: do we need different logic for normal and emergency cases?\r\n    bytes32 _poolId = poolId;\r\n    IBalancerGauge __gauge = gauge;\r\n    IComposableStablePool pool = IComposableStablePool(BalancerLogicLib.getPoolAddress(_poolId));\r\n\r\n    // we need to withdraw pool-BPTs from the _gauge\r\n    // at first, let's try to use exist pool-BPTs on the depositor balance, probably it's enough\r\n    // we can have pool-BPTs on depositor's balance after previous exit, see BalancerLogicLib.depositorExit\r\n    uint depositorBalance = pool.balanceOf(address(this));\r\n    uint gaugeBalance = __gauge.balanceOf(address(this));\r\n\r\n    uint liquidityToWithdraw = liquidityAmount_ > depositorBalance\r\n    ? liquidityAmount_ - depositorBalance\r\n    : 0;\r\n\r\n    // calculate how much pool-BPTs we should withdraw from the gauge\r\n    if (liquidityToWithdraw > 0) {\r\n      if (liquidityToWithdraw > gaugeBalance) {\r\n        liquidityToWithdraw = gaugeBalance;\r\n      }\r\n    }\r\n\r\n    // un-stake required pool-BPTs from the gauge\r\n    if (liquidityToWithdraw > 0) {\r\n      __gauge.withdraw(liquidityToWithdraw);\r\n    }\r\n\r\n    // withdraw the liquidity from the pool\r\n    amountsOut = (liquidityAmount_ >= depositorBalance + gaugeBalance)\r\n    ? BalancerLogicLib.depositorExitFull(BALANCER_VAULT, _poolId)\r\n    : BalancerLogicLib.depositorExit(BALANCER_VAULT, _poolId, liquidityToWithdraw);\r\n  }\r\n\r\n  /// @notice Quotes output for given amount of LP-tokens from the pool.\r\n  /// @dev if requested liquidityAmount >= invested, then full exit is required\r\n  ///      we emulate is at normal exit + conversion of remain BPT directly to the main asset\r\n  /// @return amountsOut Result amounts of underlying (DAI, USDC..) that will be received from BalanceR\r\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\r\n  function _depositorQuoteExit(uint liquidityAmount_) override internal virtual returns (uint[] memory amountsOut) {\r\n    uint liquidity = _depositorLiquidity();\r\n    if (liquidity == 0) {\r\n      // there is no liquidity, output is zero\r\n      return new uint[](_depositorPoolAssets().length);\r\n    } else {\r\n      // BalancerLogicLib.depositorQuoteExit takes into account the cost of unused BPT\r\n      // so we don't need a special logic here for the full exit\r\n      return BalancerLogicLib.depositorQuoteExit(\r\n        BALANCER_VAULT,\r\n        IBalancerHelper(BALANCER_HELPER),\r\n        poolId,\r\n        liquidityAmount_\r\n      );\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Claim rewards\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev Claim all possible rewards.\r\n  function _depositorClaimRewards() override internal virtual returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory depositorBalancesBefore\r\n  ) {\r\n    return BalancerLogicLib.depositorClaimRewards(gauge, _depositorPoolAssets(), rewardTokens());\r\n  }\r\n\r\n  /// @dev Returns reward token addresses array.\r\n  function rewardTokens() public view returns (address[] memory tokens) {\r\n    uint total;\r\n    for (; total < 8; ++total) {\r\n      if (gauge.reward_tokens(total) == address(0)) {\r\n        break;\r\n      }\r\n    }\r\n    tokens = new address[](total + 1);\r\n    for (uint i; i < total; ++i) {\r\n      tokens[i] = gauge.reward_tokens(i);\r\n    }\r\n\r\n    // BAL token is special, it's not registered inside gauge.reward_tokens, we claim it through pseudo-minter\r\n    tokens[total] = BAL_TOKEN;\r\n  }\r\n\r\n  /// @dev This empty reserved space is put in place to allow future versions to add new\r\n  /// variables without shifting down storage in the inheritance chain.\r\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n  uint[50-2] private __gap; // 50 - count of variables\r\n}\r\n"
    },
    "contracts/strategies/balancer/BalancerBoostedStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../ConverterStrategyBase.sol\";\r\nimport \"./BalancerBoostedDepositor.sol\";\r\nimport \"../../libs/AppPlatforms.sol\";\r\n\r\n/// @title Delta-neutral converter strategy for Balancer boosted pools\r\n/// @author a17, dvpublic\r\n/// @notice Versions:\r\n/// 1.0.2 Add setGauge, move to balancer gauges v2\r\ncontract BalancerBoostedStrategy is ConverterStrategyBase, BalancerBoostedDepositor {\r\n  string public constant override NAME = \"Balancer Boosted Strategy\";\r\n  string public constant override PLATFORM = AppPlatforms.BALANCER;\r\n  string public constant override STRATEGY_VERSION = \"1.0.3\";\r\n\r\n  function init(\r\n    address controller_,\r\n    address splitter_,\r\n    address converter_,\r\n    address pool_,\r\n    address gauge_\r\n  ) external initializer {\r\n    __BalancerBoostedDepositor_init(pool_, gauge_);\r\n    __ConverterStrategyBase_init(controller_, splitter_, converter_);\r\n\r\n    // setup specific name for UI\r\n    StrategyLib2._changeStrategySpecificName(baseState, BalancerLogicLib.createSpecificName(pool_));\r\n  }\r\n\r\n  function _handleRewards() override internal virtual returns (\r\n    uint earned,\r\n    uint lost,\r\n    uint assetBalanceAfterClaim,\r\n    uint paidDebtToInsurance,\r\n    uint amountPerf\r\n  ) {\r\n    address asset = baseState.asset;\r\n    uint assetBalanceBefore = AppLib.balance(asset);\r\n    (address[] memory rewardTokens, uint[] memory amounts) = _claim();\r\n    (paidDebtToInsurance, amountPerf) = _rewardsLiquidation(rewardTokens, amounts);\r\n    assetBalanceAfterClaim = AppLib.balance(asset);\r\n    (uint earned2, uint lost2) = ConverterStrategyBaseLib2._registerIncome(assetBalanceBefore, assetBalanceAfterClaim);\r\n    return (earned + earned2, lost + lost2, assetBalanceAfterClaim, paidDebtToInsurance, amountPerf);\r\n  }\r\n\r\n  function setGauge(address gauge_) external {\r\n    require(msg.sender == IController(controller()).governance(), AppErrors.GOVERNANCE_ONLY);\r\n\r\n    IBalancerGauge gaugeOld = IBalancerGauge(gauge);\r\n    uint balance = gaugeOld.balanceOf(address(this));\r\n    if (balance != 0) {\r\n      gaugeOld.withdraw(balance);\r\n    }\r\n\r\n    IBalancerGauge gaugeNew = IBalancerGauge(gauge_);\r\n    gauge = gaugeNew;\r\n\r\n    if (balance != 0) {\r\n      gaugeNew.deposit(balance);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/balancer/BalancerLogicLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\";\r\nimport \"../../libs/AppErrors.sol\";\r\nimport \"../../libs/AppLib.sol\";\r\nimport \"../../libs/TokenAmountsLib.sol\";\r\nimport \"../../integrations/balancer/IComposableStablePool.sol\";\r\nimport \"../../integrations/balancer/ILinearPool.sol\";\r\nimport \"../../integrations/balancer/IBVault.sol\";\r\nimport \"../../integrations/balancer/IBalancerHelper.sol\";\r\nimport \"../../integrations/balancer/IBalancerGauge.sol\";\r\nimport \"../../integrations/balancer/IBalancerMinter.sol\";\r\n\r\n/// @notice Functions of BalancerBoostedDepositor\r\n/// @dev Many of functions are declared as external to reduce contract size\r\nlibrary BalancerLogicLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Types\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev local vars in getAmountsToDeposit to avoid stack too deep\r\n  struct LocalGetAmountsToDeposit {\r\n    /// @notice Decimals of {tokens_}, 0 for BPT\r\n    uint[] decimals;\r\n    /// @notice Length of {tokens_} array\r\n    uint len;\r\n    /// @notice amountBPT / underlyingAmount, decimals 18, 0 for BPT\r\n    uint[] rates;\r\n  }\r\n\r\n  /// @notice Local variables required inside _depositorEnter/Exit/QuoteExit, avoid stack too deep\r\n  struct DepositorLocal {\r\n    uint bptIndex;\r\n    uint len;\r\n    IERC20[] tokens;\r\n    uint[] balances;\r\n  }\r\n\r\n  /// @notice Used in linear pool quote swap math logic\r\n  struct LinearPoolParams {\r\n    uint fee;\r\n    uint lowerTarget;\r\n    uint upperTarget;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Asset related utils\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Calculate amounts of {tokens} to be deposited to POOL_ID in proportions according to the {balances}\r\n  /// @param amountsDesired_ Desired amounts of tokens. The order of the tokens is exactly the same as in {tokens}.\r\n  ///                        But the array has length 3, not 4, because there is no amount for bb-am-USD here.\r\n  /// @param tokens_ All bb-am-* tokens (including bb-am-USD) received through getPoolTokens\r\n  ///                           The order of the tokens is exactly the same as in getPoolTokens-results\r\n  /// @param balances_ Balances of bb-am-* pools in terms of bb-am-USD tokens (received through getPoolTokens)\r\n  ///                           The order of the tokens is exactly the same as in {tokens}\r\n  /// @param totalUnderlying_ Total amounts of underlying assets (DAI, USDC, etc) in embedded linear pools.\r\n  ///                         The array should have same order of tokens as {tokens_}, value for BPT token is not used\r\n  /// @param indexBpt_ Index of BPT token inside {balances_}, {tokens_} and {totalUnderlying_} arrays\r\n  /// @return amountsOut Desired amounts in proper proportions for depositing.\r\n  ///         The order of the tokens is exactly the same as in results of getPoolTokens, 0 for BPT\r\n  ///         i.e. DAI, BB-AM-USD, USDC, USDT\r\n  function getAmountsToDeposit(\r\n    uint[] memory amountsDesired_,\r\n    IERC20[] memory tokens_,\r\n    uint[] memory balances_,\r\n    uint[] memory totalUnderlying_,\r\n    uint indexBpt_\r\n  ) internal view returns (\r\n    uint[] memory amountsOut\r\n  ) {\r\n    LocalGetAmountsToDeposit memory p;\r\n    // check not zero balances, cache index of bbAmUSD, save 10**decimals to array\r\n    p.len = tokens_.length;\r\n    require(p.len == balances_.length, AppErrors.WRONG_LENGTHS);\r\n    require(p.len == amountsDesired_.length || p.len - 1 == amountsDesired_.length, AppErrors.WRONG_LENGTHS);\r\n\r\n    p.decimals = new uint[](p.len);\r\n    p.rates = new uint[](p.len);\r\n    for (uint i = 0; i < p.len; i = AppLib.uncheckedInc(i)) {\r\n      if (i != indexBpt_) {\r\n        require(balances_[i] != 0, AppErrors.ZERO_BALANCE);\r\n        p.decimals[i] = 10 ** IERC20Metadata(address(tokens_[i])).decimals();\r\n\r\n        // Let's calculate a rate: amountBPT / underlyingAmount, decimals 18\r\n        p.rates[i] = balances_[i] * 1e18 / totalUnderlying_[i];\r\n      }\r\n    }\r\n\r\n    amountsOut = new uint[](p.len - 1);\r\n\r\n    // The balances set proportions of underlying-bpt, i.e. bb-am-DAI : bb-am-USDC : bb-am-USDT\r\n    // Our task is find amounts of DAI : USDC : USDT that won't change that proportions after deposit.\r\n    // We have arbitrary desired amounts, i.e. DAI = X, USDC = Y, USDT = Z\r\n    // For each token: assume that it can be used in full.\r\n    // If so, what amounts will have other tokens in this case according to the given proportions?\r\n    // i.e. DAI = X = 100.0 => USDC = 200.0, USDT = 400.0. We need: Y >= 200, Z >= 400\r\n    // or   USDC = Y = 100.0 => DAI = 50.0, USDT = 200.0. We need: X >= 50, Z >= 200\r\n    // If any amount is less then expected, the token cannot be used in full.\r\n    // A token with min amount can be used in full, let's try to find its index.\r\n    // [0 : len - 1]\r\n    uint i3;\r\n    for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\r\n      if (indexBpt_ == i) continue;\r\n\r\n      uint amountInBpt18 = amountsDesired_[i3] * p.rates[i];\r\n\r\n      // [0 : len]\r\n      uint j;\r\n      // [0 : len - 1]\r\n      uint j3;\r\n      for (; j < p.len; j = AppLib.uncheckedInc(j)) {\r\n        if (indexBpt_ == j) continue;\r\n\r\n        // alpha = balancesDAI / balancesUSDC * decimalsDAI / decimalsUSDC\r\n        // amountDAI = amountUSDC * alpha * rateUSDC / rateDAI\r\n        amountsOut[j3] = amountInBpt18 * balances_[j] / p.rates[j] * p.decimals[j] / balances_[i] / p.decimals[i];\r\n        if (amountsOut[j3] > amountsDesired_[j3]) break;\r\n        j3++;\r\n      }\r\n\r\n      if (j == p.len) break;\r\n      i3++;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculate total amount of underlying asset for each token except BPT\r\n  /// @dev Amount is calculated as MainTokenAmount + WrappedTokenAmount * WrappedTokenRate, see AaveLinearPool src\r\n  function getTotalAssetAmounts(IBVault vault_, IERC20[] memory tokens_, uint indexBpt_) internal view returns (\r\n    uint[] memory amountsOut\r\n  ) {\r\n    uint len = tokens_.length;\r\n    amountsOut = new uint[](len);\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (i != indexBpt_) {\r\n        ILinearPool linearPool = ILinearPool(address(tokens_[i]));\r\n        (, uint[] memory balances,) = vault_.getPoolTokens(linearPool.getPoolId());\r\n\r\n        amountsOut[i] =\r\n          balances[linearPool.getMainIndex()]\r\n          + balances[linearPool.getWrappedIndex()] * linearPool.getWrappedTokenRate() / 1e18;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Split {liquidityAmount_} by assets according to proportions of their total balances\r\n  /// @param liquidityAmount_ Amount to withdraw in bpt\r\n  /// @param balances_ Balances received from getPoolTokens\r\n  /// @param bptIndex_ Index of pool-pbt inside {balances_}\r\n  /// @return bptAmountsOut Amounts of underlying-BPT. The array doesn't include an amount for pool-bpt\r\n  ///         Total amount of {bptAmountsOut}-items is equal to {liquidityAmount_}\r\n  function getBtpAmountsOut(\r\n    uint liquidityAmount_,\r\n    uint[] memory balances_,\r\n    uint bptIndex_\r\n  ) internal pure returns (uint[] memory bptAmountsOut) {\r\n    // we assume here, that len >= 2\r\n    // we don't check it because StableMath.sol in balancer has _MIN_TOKENS = 2;\r\n    uint len = balances_.length;\r\n    bptAmountsOut = new uint[](len - 1);\r\n\r\n    // compute total balance, skip pool-bpt\r\n    uint totalBalances;\r\n    uint k;\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == bptIndex_) continue;\r\n      totalBalances += balances_[i];\r\n      // temporary save incomplete amounts to bptAmountsOut\r\n      bptAmountsOut[k] = liquidityAmount_ * balances_[i];\r\n      ++k;\r\n    }\r\n\r\n    // finalize computation of bptAmountsOut using known totalBalances\r\n    uint total;\r\n    for (k = 0; k < len - 1; k = AppLib.uncheckedInc(k)) {\r\n      if (k == len - 2) {\r\n        // leftovers => last item\r\n        bptAmountsOut[k] = total > liquidityAmount_\r\n          ? 0\r\n          : liquidityAmount_ - total;\r\n      } else {\r\n        bptAmountsOut[k] /= totalBalances;\r\n        total += bptAmountsOut[k];\r\n      }\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Depositor view logic\r\n  /////////////////////////////////////////////////////////////////////\r\n  /// @notice Total amounts of the main assets under control of the pool, i.e amounts of USDT, USDC, DAI\r\n  /// @return reservesOut Total amounts of embedded assets, i.e. for \"Balancer Boosted Tetu USD\" we return:\r\n  ///                     0: balance USDT + (tUSDT recalculated to USDT)\r\n  ///                     1: balance USDC + (tUSDC recalculated to USDC)\r\n  ///                     2: balance DAI + (balance tDAI recalculated to DAI)\r\n  function depositorPoolReserves(IBVault vault_, bytes32 poolId_) external view returns (uint[] memory reservesOut) {\r\n    (IERC20[] memory tokens,,) = vault_.getPoolTokens(poolId_);\r\n    uint bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\r\n    uint len = tokens.length;\r\n    // exclude pool-BPT\r\n    reservesOut = new uint[](len - 1);\r\n\r\n    uint k;\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == bptIndex) continue;\r\n      ILinearPool linearPool = ILinearPool(address(tokens[i]));\r\n\r\n      // Each bb-t-* returns (main-token, wrapped-token, bb-t-itself), the order of tokens is arbitrary\r\n      // i.e. (DAI + tDAI + bb-t-DAI) or (bb-t-USDC, tUSDC, USDC)\r\n\r\n      // get balances of all tokens of bb-am-XXX token, i.e. balances of (DAI, amDAI, bb-am-DAI)\r\n      (, uint[] memory balances,) = vault_.getPoolTokens(linearPool.getPoolId());\r\n      // DAI\r\n      uint mainIndex = linearPool.getMainIndex();\r\n      // tDAI\r\n      uint wrappedIndex = linearPool.getWrappedIndex();\r\n\r\n      reservesOut[k] = balances[mainIndex] + balances[wrappedIndex] * linearPool.getWrappedTokenRate() / 1e18;\r\n      ++k;\r\n    }\r\n  }\r\n\r\n  /// @notice Returns pool assets, same as getPoolTokens but without pool-bpt\r\n  function depositorPoolAssets(IBVault vault_, bytes32 poolId_) external view returns (address[] memory poolAssets) {\r\n    (IERC20[] memory tokens,,) = vault_.getPoolTokens(poolId_);\r\n    uint bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\r\n    uint len = tokens.length;\r\n\r\n    poolAssets = new address[](len - 1);\r\n    uint k;\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == bptIndex) continue;\r\n\r\n      poolAssets[k] = ILinearPool(address(tokens[i])).getMainToken();\r\n      ++k;\r\n    }\r\n  }\r\n\r\n  /// @notice Returns pool weights\r\n  /// @return weights Array with weights, length = getPoolTokens.tokens - 1 (all assets except BPT)\r\n  /// @return totalWeight Total sum of all items of {weights}\r\n  function depositorPoolWeights(IBVault vault_, bytes32 poolId_) external view returns (\r\n    uint[] memory weights,\r\n    uint totalWeight\r\n  ) {\r\n    (IERC20[] memory tokens,uint[] memory balances,) = vault_.getPoolTokens(poolId_);\r\n    uint len = tokens.length;\r\n    uint bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\r\n    weights = new uint[](len - 1);\r\n    uint j;\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (i != bptIndex) {\r\n        totalWeight += balances[i];\r\n        weights[j] = balances[i];\r\n        j = AppLib.uncheckedInc(j);\r\n      }\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Depositor enter, exit logic\r\n  /////////////////////////////////////////////////////////////////////\r\n  /// @notice Deposit given amount to the pool.\r\n  /// @param amountsDesired_ Amounts of assets on the balance of the depositor\r\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\r\n  ///         i.e. for \"Balancer Boosted Aave USD\" we have DAI, USDC, USDT\r\n  /// @return amountsConsumedOut Amounts of assets deposited to balanceR pool\r\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\r\n  /// @return liquidityOut Total amount of liquidity added to balanceR pool in terms of pool-bpt tokens\r\n  function depositorEnter(IBVault vault_, bytes32 poolId_, uint[] memory amountsDesired_) external returns (\r\n    uint[] memory amountsConsumedOut,\r\n    uint liquidityOut\r\n  ) {\r\n    DepositorLocal memory p;\r\n\r\n    // The implementation below assumes, that getPoolTokens returns the assets in following order:\r\n    //    bb-am-dai, bb-am-usd, bb-am-usdc, bb-am-usdt\r\n    (p.tokens, p.balances,) = vault_.getPoolTokens(poolId_);\r\n    p.len = p.tokens.length;\r\n    p.bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\r\n\r\n    // temporary save current liquidity\r\n    liquidityOut = IComposableStablePool(address(p.tokens[p.bptIndex])).balanceOf(address(this));\r\n\r\n    // Original amounts can have any values.\r\n    // But we need amounts in such proportions that won't move the current balances\r\n    {\r\n      uint[] memory underlying = BalancerLogicLib.getTotalAssetAmounts(vault_, p.tokens, p.bptIndex);\r\n      amountsConsumedOut = BalancerLogicLib.getAmountsToDeposit(amountsDesired_, p.tokens, p.balances, underlying, p.bptIndex);\r\n    }\r\n\r\n    // we can create funds_ once and use it several times\r\n    IBVault.FundManagement memory funds = IBVault.FundManagement({\r\n      sender: address(this),\r\n      fromInternalBalance: false,\r\n      recipient: payable(address(this)),\r\n      toInternalBalance: false\r\n    });\r\n\r\n    // swap all tokens XX => bb-am-XX\r\n    // we need two arrays with same amounts: amountsToDeposit (with 0 for BB-AM-USD) and userDataAmounts (no BB-AM-USD)\r\n    uint[] memory amountsToDeposit = new uint[](p.len);\r\n    // no bpt\r\n    uint[] memory userDataAmounts = new uint[](p.len - 1);\r\n    uint k;\r\n    for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == p.bptIndex) continue;\r\n      amountsToDeposit[i] = BalancerLogicLib.swap(\r\n        vault_,\r\n        ILinearPool(address(p.tokens[i])).getPoolId(),\r\n        ILinearPool(address(p.tokens[i])).getMainToken(),\r\n        address(p.tokens[i]),\r\n        amountsConsumedOut[k],\r\n        funds\r\n      );\r\n      userDataAmounts[k] = amountsToDeposit[i];\r\n      AppLib.approveIfNeeded(address(p.tokens[i]), amountsToDeposit[i], address(vault_));\r\n      ++k;\r\n    }\r\n\r\n    // add liquidity to balancer\r\n    vault_.joinPool(\r\n      poolId_,\r\n      address(this),\r\n      address(this),\r\n      IBVault.JoinPoolRequest({\r\n        assets: asIAsset(p.tokens), // must have the same length and order as the array returned by `getPoolTokens`\r\n        maxAmountsIn: amountsToDeposit,\r\n        userData: abi.encode(IBVault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, userDataAmounts, 0),\r\n        fromInternalBalance: false\r\n      })\r\n    );\r\n\r\n    uint liquidityAfter = IERC20(address(p.tokens[p.bptIndex])).balanceOf(address(this));\r\n\r\n    liquidityOut = liquidityAfter > liquidityOut\r\n      ? liquidityAfter - liquidityOut\r\n      : 0;\r\n  }\r\n\r\n  /// @notice Withdraw given amount of LP-tokens from the pool.\r\n  /// @param liquidityAmount_ Amount to withdraw in bpt\r\n  /// @return amountsOut Result amounts of underlying (DAI, USDC..) that will be received from BalanceR\r\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\r\n  function depositorExit(IBVault vault_, bytes32 poolId_, uint liquidityAmount_) external returns (\r\n    uint[] memory amountsOut\r\n  ) {\r\n    DepositorLocal memory p;\r\n\r\n    p.bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\r\n    (p.tokens, p.balances,) = vault_.getPoolTokens(poolId_);\r\n    p.len = p.tokens.length;\r\n\r\n    require(liquidityAmount_ <= p.tokens[p.bptIndex].balanceOf(address(this)), AppErrors.NOT_ENOUGH_BALANCE);\r\n\r\n    // BalancerR can spend a bit less amount of liquidity than {liquidityAmount_}\r\n    // i.e. we if liquidityAmount_ = 2875841, we can have leftovers = 494 after exit\r\n    vault_.exitPool(\r\n      poolId_,\r\n      address(this),\r\n      payable(address(this)),\r\n      IBVault.ExitPoolRequest({\r\n        assets: asIAsset(p.tokens), // must have the same length and order as the array returned by `getPoolTokens`\r\n        minAmountsOut: new uint[](p.len), // no limits\r\n        userData: abi.encode(IBVault.ExitKindComposableStable.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT, liquidityAmount_),\r\n        toInternalBalance: false\r\n      })\r\n    );\r\n\r\n    // now we have amBbXXX tokens; swap them to XXX assets\r\n\r\n    // we can create funds_ once and use it several times\r\n    IBVault.FundManagement memory funds = IBVault.FundManagement({\r\n      sender: address(this),\r\n      fromInternalBalance: false,\r\n      recipient: payable(address(this)),\r\n      toInternalBalance: false\r\n    });\r\n\r\n    amountsOut = new uint[](p.len - 1);\r\n    uint k;\r\n    for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == p.bptIndex) continue;\r\n      uint amountIn = p.tokens[i].balanceOf(address(this));\r\n      if (amountIn != 0) {\r\n        amountsOut[k] = swap(\r\n          vault_,\r\n          ILinearPool(address(p.tokens[i])).getPoolId(),\r\n          address(p.tokens[i]),\r\n          ILinearPool(address(p.tokens[i])).getMainToken(),\r\n          amountIn,\r\n          funds\r\n        );\r\n      }\r\n      ++k;\r\n    }\r\n  }\r\n\r\n  /// @notice Withdraw all available amount of LP-tokens from the pool\r\n  ///         BalanceR doesn't allow to withdraw exact amount, so it's allowed to leave dust amount on the balance\r\n  /// @dev We make at most N attempts to withdraw (not more, each attempt takes a lot of gas).\r\n  ///      Each attempt reduces available balance at ~1e4 times.\r\n  /// @return amountsOut Result amounts of underlying (DAI, USDC..) that will be received from BalanceR\r\n  ///                    The order of assets is the same as in getPoolTokens, but there is no pool-bpt\r\n  function depositorExitFull(IBVault vault_, bytes32 poolId_) external returns (\r\n    uint[] memory amountsOut\r\n  ) {\r\n    DepositorLocal memory p;\r\n\r\n    p.bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\r\n    (p.tokens, p.balances,) = vault_.getPoolTokens(poolId_);\r\n    p.len = p.tokens.length;\r\n    amountsOut = new uint[](p.len - 1);\r\n\r\n    // we can create funds_ once and use it several times\r\n    IBVault.FundManagement memory funds = IBVault.FundManagement({\r\n      sender: address(this),\r\n      fromInternalBalance: false,\r\n      recipient: payable(address(this)),\r\n      toInternalBalance: false\r\n    });\r\n\r\n    uint liquidityAmount = p.tokens[p.bptIndex].balanceOf(address(this));\r\n    if (liquidityAmount > 0) {\r\n      uint liquidityThreshold = 10 ** IERC20Metadata(address(p.tokens[p.bptIndex])).decimals() / 100;\r\n\r\n      // we can make at most N attempts to withdraw amounts from the balanceR pool\r\n      for (uint i = 0; i < 2; ++i) {\r\n        vault_.exitPool(\r\n          poolId_,\r\n          address(this),\r\n          payable(address(this)),\r\n          IBVault.ExitPoolRequest({\r\n            assets: asIAsset(p.tokens),\r\n            minAmountsOut: new uint[](p.len), // no limits\r\n            userData: abi.encode(IBVault.ExitKindComposableStable.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT, liquidityAmount),\r\n            toInternalBalance: false\r\n          })\r\n        );\r\n        liquidityAmount = p.tokens[p.bptIndex].balanceOf(address(this));\r\n        if (liquidityAmount < liquidityThreshold || i == 1) {\r\n          break;\r\n        }\r\n        (, p.balances,) = vault_.getPoolTokens(poolId_);\r\n      }\r\n\r\n      // now we have amBbXXX tokens; swap them to XXX assets\r\n      uint k;\r\n      for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\r\n        if (i == p.bptIndex) continue;\r\n\r\n        uint amountIn = p.tokens[i].balanceOf(address(this));\r\n        if (amountIn != 0) {\r\n          amountsOut[k] = swap(\r\n            vault_,\r\n            ILinearPool(address(p.tokens[i])).getPoolId(),\r\n            address(p.tokens[i]),\r\n            ILinearPool(address(p.tokens[i])).getMainToken(),\r\n            amountIn,\r\n            funds\r\n          );\r\n        }\r\n        ++k;\r\n      }\r\n    }\r\n\r\n    uint depositorBalance = p.tokens[p.bptIndex].balanceOf(address(this));\r\n    if (depositorBalance > 0) {\r\n      uint k = 0;\r\n      for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\r\n        if (i == p.bptIndex) continue;\r\n\r\n        // we assume here, that the depositorBalance is small\r\n        // so we can directly swap it to any single asset without changing of pool resources proportions\r\n        amountsOut[k] += _convertSmallBptRemainder(vault_, poolId_, p, funds, depositorBalance, i);\r\n        break;\r\n      }\r\n    }\r\n\r\n    return amountsOut;\r\n  }\r\n\r\n  /// @notice convert remained SMALL amount of bpt => am-bpt => main token of the am-bpt\r\n  /// @return amountOut Received amount of am-bpt's main token\r\n  function _convertSmallBptRemainder(\r\n    IBVault vault_,\r\n    bytes32 poolId_,\r\n    DepositorLocal memory p,\r\n    IBVault.FundManagement memory funds,\r\n    uint bptAmountIn_,\r\n    uint indexTargetAmBpt_\r\n  ) internal returns (uint amountOut) {\r\n    uint amountAmBpt = BalancerLogicLib.swap(\r\n      vault_,\r\n      poolId_,\r\n      address(p.tokens[p.bptIndex]),\r\n      address(p.tokens[indexTargetAmBpt_]),\r\n      bptAmountIn_,\r\n      funds\r\n    );\r\n    amountOut = swap(\r\n      vault_,\r\n      ILinearPool(address(p.tokens[indexTargetAmBpt_])).getPoolId(),\r\n      address(p.tokens[indexTargetAmBpt_]),\r\n      ILinearPool(address(p.tokens[indexTargetAmBpt_])).getMainToken(),\r\n      amountAmBpt,\r\n      funds\r\n    );\r\n  }\r\n\r\n  /// @notice Quotes output for given amount of LP-tokens from the pool.\r\n  /// @return amountsOut Result amounts of underlying (DAI, USDC..) that will be received from BalanceR\r\n  ///         The order of assets is the same as in getPoolTokens, but there is no pool-bpt\r\n  function depositorQuoteExit(\r\n    IBVault vault_,\r\n    IBalancerHelper helper_,\r\n    bytes32 poolId_,\r\n    uint liquidityAmount_\r\n  ) external returns (\r\n    uint[] memory amountsOut\r\n  ) {\r\n    DepositorLocal memory p;\r\n\r\n    p.bptIndex = IComposableStablePool(getPoolAddress(poolId_)).getBptIndex();\r\n    (p.tokens, p.balances,) = vault_.getPoolTokens(poolId_);\r\n    p.len = p.tokens.length;\r\n\r\n    (, uint[] memory amountsBpt) = helper_.queryExit(\r\n      poolId_,\r\n      address(this),\r\n      payable(address(this)),\r\n      IBVault.ExitPoolRequest({\r\n        assets: asIAsset(p.tokens),\r\n        minAmountsOut: new uint[](p.len), // no limits\r\n        userData: abi.encode(\r\n          IBVault.ExitKindComposableStable.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT,\r\n          liquidityAmount_\r\n        ),\r\n        toInternalBalance: false\r\n      })\r\n    );\r\n\r\n    uint k;\r\n    amountsOut = new uint[](p.len - 1);\r\n    for (uint i = 0; i < p.len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == p.bptIndex) continue;\r\n      ILinearPool linearPool = ILinearPool(address(p.tokens[i]));\r\n      amountsOut[k] = _calcLinearMainOutPerBptIn(vault_, linearPool, amountsBpt[i]);\r\n      ++k;\r\n    }\r\n  }\r\n\r\n  /// @notice Swap given {amountIn_} of {assetIn_} to {assetOut_} using the given BalanceR pool\r\n  function swap(\r\n    IBVault vault_,\r\n    bytes32 poolId_,\r\n    address assetIn_,\r\n    address assetOut_,\r\n    uint amountIn_,\r\n    IBVault.FundManagement memory funds_\r\n  ) internal returns (uint amountOut) {\r\n    uint balanceBefore = IERC20(assetOut_).balanceOf(address(this));\r\n\r\n    IERC20(assetIn_).approve(address(vault_), amountIn_);\r\n    vault_.swap(\r\n      IBVault.SingleSwap({\r\n        poolId: poolId_,\r\n        kind: IBVault.SwapKind.GIVEN_IN,\r\n        assetIn: IAsset(assetIn_),\r\n        assetOut: IAsset(assetOut_),\r\n        amount: amountIn_,\r\n        userData: bytes(\"\")\r\n      }),\r\n      funds_,\r\n      1,\r\n      block.timestamp\r\n    );\r\n\r\n    // we assume here, that the balance cannot be decreased\r\n    amountOut = IERC20(assetOut_).balanceOf(address(this)) - balanceBefore;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Rewards\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  function depositorClaimRewards(IBalancerGauge gauge_, address[] memory tokens_, address[] memory rewardTokens_) external returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory depositorBalancesBefore\r\n  ) {\r\n    uint tokensLen = tokens_.length;\r\n    uint rewardTokensLen = rewardTokens_.length;\r\n\r\n    tokensOut = new address[](rewardTokensLen);\r\n    amountsOut = new uint[](rewardTokensLen);\r\n    depositorBalancesBefore = new uint[](tokensLen);\r\n\r\n    for (uint i; i < tokensLen; i = AppLib.uncheckedInc(i)) {\r\n      depositorBalancesBefore[i] = IERC20(tokens_[i]).balanceOf(address(this));\r\n    }\r\n\r\n    for (uint i; i < rewardTokensLen; i = AppLib.uncheckedInc(i)) {\r\n      tokensOut[i] = rewardTokens_[i];\r\n\r\n      // temporary store current reward balance\r\n      amountsOut[i] = IERC20(rewardTokens_[i]).balanceOf(address(this));\r\n    }\r\n\r\n    // claim BAL tokens\r\n    IBalancerMinter(gauge_.bal_pseudo_minter()).mint(address(gauge_));\r\n\r\n    // claim other rewards\r\n    gauge_.claim_rewards();\r\n\r\n    for (uint i; i < rewardTokensLen; i = AppLib.uncheckedInc(i)) {\r\n      amountsOut[i] = IERC20(rewardTokens_[i]).balanceOf(address(this)) - amountsOut[i];\r\n    }\r\n\r\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokensOut, amountsOut);\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Utils\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  function createSpecificName(address pool_) external view returns (string memory) {\r\n    return string(abi.encodePacked(\"Balancer \", IERC20Metadata(pool_).symbol()));\r\n  }\r\n\r\n  /// @dev Returns the address of a Pool's contract.\r\n  ///      Due to how Pool IDs are created, this is done with no storage accesses and costs little gas.\r\n  function getPoolAddress(bytes32 id) internal pure returns (address) {\r\n    // 12 byte logical shift left to remove the nonce and specialization setting. We don't need to mask,\r\n    // since the logical shift already sets the upper bits to zero.\r\n    return address(uint160(uint(id) >> (12 * 8)));\r\n  }\r\n\r\n  /// @dev see balancer-labs, ERC20Helpers.sol\r\n  function asIAsset(IERC20[] memory tokens) internal pure returns (IAsset[] memory assets) {\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      assets := tokens\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Linear pool quote swap math logic\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev This logic is needed for hardworks in conditions of lack of funds in linear pools.\r\n  ///      The lack of funds in linear pools is a typical situation caused by pool rebalancing after deposits from the strategy.\r\n  ///      Main tokens are leaving linear pools to mint wrapped tokens.\r\n  function _calcLinearMainOutPerBptIn(IBVault vault, ILinearPool pool, uint amount) internal view returns (uint) {\r\n    (uint lowerTarget, uint upperTarget) = pool.getTargets();\r\n    LinearPoolParams memory params = LinearPoolParams(pool.getSwapFeePercentage(), lowerTarget, upperTarget);\r\n    (,uint[] memory balances,) = vault.getPoolTokens(pool.getPoolId());\r\n    uint[] memory scalingFactors = pool.getScalingFactors();\r\n    _upscaleArray(balances, scalingFactors);\r\n    amount *= scalingFactors[0] / 1e18;\r\n    uint mainIndex = pool.getMainIndex();\r\n    uint mainBalance = balances[mainIndex];\r\n    uint bptSupply = pool.totalSupply() - balances[0];\r\n    uint previousNominalMain = _toNominal(mainBalance, params);\r\n    uint invariant = previousNominalMain + balances[pool.getWrappedIndex()];\r\n    uint deltaNominalMain = invariant * amount / bptSupply;\r\n    uint afterNominalMain = previousNominalMain > deltaNominalMain ? previousNominalMain - deltaNominalMain : 0;\r\n    uint newMainBalance = _fromNominal(afterNominalMain, params);\r\n    return (mainBalance - newMainBalance) * 1e18 / scalingFactors[mainIndex];\r\n  }\r\n\r\n  function _toNominal(uint real, LinearPoolParams memory params) internal pure returns (uint) {\r\n    if (real < params.lowerTarget) {\r\n      uint fees = (params.lowerTarget - real) * params.fee / 1e18;\r\n      return real - fees;\r\n    } else if (real <= params.upperTarget) {\r\n      return real;\r\n    } else {\r\n      uint fees = (real - params.upperTarget) * params.fee / 1e18;\r\n      return real - fees;\r\n    }\r\n  }\r\n\r\n  function _fromNominal(uint nominal, LinearPoolParams memory params) internal pure returns (uint) {\r\n    if (nominal < params.lowerTarget) {\r\n      return (nominal + (params.fee * params.lowerTarget / 1e18)) * 1e18 / (1e18 + params.fee);\r\n    } else if (nominal <= params.upperTarget) {\r\n      return nominal;\r\n    } else {\r\n      return (nominal - (params.fee * params.upperTarget / 1e18)) * 1e18 / (1e18 - params.fee);\r\n    }\r\n  }\r\n\r\n  function _upscaleArray(uint[] memory amounts, uint[] memory scalingFactors) internal pure {\r\n    uint length = amounts.length;\r\n    for (uint i; i < length; ++i) {\r\n      amounts[i] = amounts[i] * scalingFactors[i] / 1e18;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/ConverterStrategyBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyBaseV3.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverterCallback.sol\";\r\nimport \"./ConverterStrategyBaseLib.sol\";\r\nimport \"./ConverterStrategyBaseLib2.sol\";\r\nimport \"./DepositorBase.sol\";\r\nimport \"../interfaces/IConverterStrategyBase.sol\";\r\n\r\n/////////////////////////////////////////////////////////////////////\r\n///                        TERMS\r\n///  Main asset == underlying: the asset deposited to the vault by users\r\n///  Secondary assets: all assets deposited to the internal pool except the main asset\r\n/////////////////////////////////////////////////////////////////////\r\n// History:\r\n// 3.0.1 refactoring of emergency exit\r\n// 3.1.0 use bookkeeper, new set of events\r\n// 3.1.2 scb-867\r\n// 3.1.3 scb-900\r\n\r\n/// @title Abstract contract for base Converter strategy functionality\r\n/// @notice All depositor assets must be correlated (ie USDC/USDT/DAI)\r\n/// @author bogdoslav, dvpublic, a17\r\nabstract contract ConverterStrategyBase is IConverterStrategyBase, ITetuConverterCallback, DepositorBase, StrategyBaseV3 {\r\n  using SafeERC20 for IERC20;\r\n\r\n  //region -------------------------------------------------------- DATA TYPES\r\n  struct WithdrawUniversalLocal {\r\n    ITetuConverter converter;\r\n    /// @notice Target asset that should be received on balance.\r\n    ///         It's underlying in _withdrawUniversal(), but it can be any other asset in requirePayAmountBack()\r\n    address theAsset;\r\n    /// @notice List of tokens received by _depositorPoolAssets()\r\n    address[] tokens;\r\n    /// @notice Index of the {asset} in {tokens}\r\n    uint indexTheAsset;\r\n    /// @notice Initial balance of the [asset}\r\n    uint balanceBefore;\r\n    uint indexUnderlying;\r\n  }\r\n  //endregion -------------------------------------------------------- DATA TYPES\r\n\r\n  //region -------------------------------------------------------- CONSTANTS\r\n\r\n  /// @dev Version of this contract. Adjust manually on each code modification.\r\n  string public constant CONVERTER_STRATEGY_BASE_VERSION = \"3.1.3\";\r\n\r\n  /// @notice 1% gap to cover possible liquidation inefficiency\r\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\r\n  uint internal constant GAP_CONVERSION = 1_000;\r\n  uint internal constant DENOMINATOR = 100_000;\r\n  /// @notice If we need to withdraw A, we always tries to receive on balance A + delta\r\n  ///         and have at least delta on balance after withdraw to prevent situation when we have debts\r\n  ///         but don't have any liquidity to pay the debts and receive locked collaterals back\r\n  ///\r\n  ///         Delta will be in the range [GAP_WITHDRAW...2 * GAP_WITHDRAW]\r\n  uint internal constant GAP_WITHDRAW = 1_000;\r\n  //endregion -------------------------------------------------------- CONSTANTS\r\n\r\n  //region -------------------------------------------------------- VARIABLES\r\n  /////////////////////////////////////////////////////////////////////\r\n  //                Keep names and ordering!\r\n  // Add only in the bottom and don't forget to decrease gap variable\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Minimum token amounts that can be liquidated\r\n  /// @dev These thresholds are used to workaround dust problems in many other cases, not during liquidation only\r\n  mapping(address => uint) public liquidationThresholds;\r\n\r\n  /// @notice Internal variables of ConverterStrategyBase\r\n  ConverterStrategyBaseState internal _csbs;\r\n  //endregion -------------------------------------------------------- VARIABLES\r\n\r\n  //region -------------------------------------------------------- Getters\r\n  function converter() external view returns (ITetuConverter) {\r\n    return _csbs.converter;\r\n  }\r\n\r\n  function reinvestThresholdPercent() external view returns (uint) {\r\n    return _csbs.reinvestThresholdPercent;\r\n  }\r\n\r\n  function debtToInsurance() external view returns (int) {\r\n    return _csbs.debtToInsurance;\r\n  }\r\n  //endregion -------------------------------------------------------- Getters\r\n\r\n  //region -------------------------------------------------------- Events\r\n  event OnDepositorEnter(uint[] amounts, uint[] consumedAmounts);\r\n  event OnDepositorExit(uint liquidityAmount, uint[] withdrawnAmounts);\r\n  event OnDepositorEmergencyExit(uint[] withdrawnAmounts);\r\n  event OnHardWorkEarnedLost(\r\n    uint investedAssetsNewPrices,\r\n    uint earnedByPrices,\r\n    uint earnedHandleRewards,\r\n    uint lostHandleRewards,\r\n    uint earnedDeposit,\r\n    uint lostDeposit,\r\n    uint paidDebtToInsurance,\r\n    uint amountPerf\r\n  );\r\n  //endregion -------------------------------------------------------- Events\r\n\r\n  //region -------------------------------------------------------- Initialization and configuration\r\n\r\n  /// @notice Initialize contract after setup it as proxy implementation\r\n  function __ConverterStrategyBase_init(\r\n    address controller_,\r\n    address splitter_,\r\n    address converter_\r\n  ) internal onlyInitializing {\r\n    __StrategyBase_init(controller_, splitter_);\r\n    _csbs.converter = ITetuConverter(converter_);\r\n\r\n    // 1% by default\r\n    _csbs.reinvestThresholdPercent = DENOMINATOR / 100;\r\n    emit ConverterStrategyBaseLib2.ReinvestThresholdPercentChanged(DENOMINATOR / 100);\r\n  }\r\n\r\n  /// @dev Liquidation thresholds are used to detect dust in many cases, not only in liquidation case\r\n  /// @param amount Min amount of token allowed to liquidate, token's decimals are used.\r\n  function setLiquidationThreshold(address token, uint amount) external {\r\n    ConverterStrategyBaseLib2.checkLiquidationThresholdChanged(controller(), token, amount);\r\n    liquidationThresholds[token] = amount;\r\n  }\r\n\r\n  /// @param percent_ New value of the percent, decimals = {REINVEST_THRESHOLD_PERCENT_DENOMINATOR}\r\n  function setReinvestThresholdPercent(uint percent_) external {\r\n    ConverterStrategyBaseLib2.checkReinvestThresholdPercentChanged(controller(), percent_);\r\n    _csbs.reinvestThresholdPercent = percent_;\r\n  }\r\n  //endregion -------------------------------------------------------- Initialization and configuration\r\n\r\n  //region -------------------------------------------------------- Deposit to the pool\r\n\r\n  /// @notice Amount of underlying assets converted to pool assets and invested to the pool.\r\n  function investedAssets() override public view virtual returns (uint) {\r\n    return _csbs.investedAssets;\r\n  }\r\n\r\n  /// @notice Deposit given amount to the pool.\r\n  function _depositToPool(uint amount_, bool updateTotalAssetsBeforeInvest_) override internal virtual returns (\r\n    uint strategyLoss\r\n  ){\r\n    (uint updatedInvestedAssets, uint earnedByPrices) = _fixPriceChanges(updateTotalAssetsBeforeInvest_);\r\n    (strategyLoss,) = _depositToPoolUniversal(amount_, earnedByPrices, updatedInvestedAssets, false);\r\n  }\r\n\r\n  /// @notice Deposit {amount_} to the pool, send {earnedByPrices_} to insurance.\r\n  ///         totalAsset will decrease on earnedByPrices_ and sharePrice won't change after all recalculations.\r\n  /// @dev We need to deposit {amount_} and withdraw {earnedByPrices_} here\r\n  /// @param amount_ Amount of underlying to be deposited\r\n  /// @param earnedByPrices_ Profit received because of price changing\r\n  /// @param investedAssets_ Invested assets value calculated with updated prices\r\n  /// @param updateInvestedAssetsInAnyCase_ _csbs.investedAssets must be updated even if a deposit is not needed\r\n  /// @return strategyLoss Loss happened on the depositing. It doesn't include any price-changing losses\r\n  /// @return amountSentToInsurance Price-changing-profit that was sent to the insurance\r\n  function _depositToPoolUniversal(\r\n    uint amount_,\r\n    uint earnedByPrices_,\r\n    uint investedAssets_,\r\n    bool updateInvestedAssetsInAnyCase_\r\n  ) internal virtual returns (\r\n    uint strategyLoss,\r\n    uint amountSentToInsurance\r\n  ){\r\n    address _asset = baseState.asset;\r\n\r\n    uint amountToDeposit = amount_ > earnedByPrices_\r\n      ? amount_ - earnedByPrices_\r\n      : 0;\r\n\r\n    // skip deposit for small amounts\r\n    bool needToDeposit = amountToDeposit > _csbs.reinvestThresholdPercent * investedAssets_ / DENOMINATOR;\r\n    uint balanceBefore = AppLib.balance(_asset);\r\n\r\n    // send earned-by-prices to the insurance, ignore dust values\r\n    if (earnedByPrices_ > AppLib._getLiquidationThreshold(liquidationThresholds[_asset])) {\r\n      if (needToDeposit || balanceBefore >= earnedByPrices_) {\r\n        (amountSentToInsurance,) = ConverterStrategyBaseLib2.sendToInsurance(\r\n          _asset,\r\n          earnedByPrices_,\r\n          baseState.splitter,\r\n          investedAssets_ + balanceBefore,\r\n          balanceBefore\r\n        );\r\n      } else {\r\n        // needToDeposit is false and we don't have enough amount to cover earned-by-prices, we need to withdraw\r\n        (/* expectedWithdrewUSD */,, strategyLoss, amountSentToInsurance) = _withdrawUniversal(0, earnedByPrices_, investedAssets_);\r\n      }\r\n    }\r\n\r\n    // make deposit\r\n    if (needToDeposit) {\r\n      (address[] memory tokens, uint indexAsset) = _getTokens(_asset);\r\n\r\n      // prepare array of amounts ready to deposit, borrow missed amounts\r\n      uint[] memory amounts = _beforeDeposit(_csbs.converter, amountToDeposit, tokens, indexAsset);\r\n\r\n      // make deposit, actually consumed amounts can be different from the desired amounts\r\n      if (!ConverterStrategyBaseLib2.findZeroAmount(amounts)) {\r\n        // we cannot enter to pool if at least one of amounts is zero\r\n        // we check != 0 and don't use thresholds because some strategies allow to enter to the pool with amount < liquidation threshold\r\n        (uint[] memory consumedAmounts,) = _depositorEnter(amounts);\r\n        emit OnDepositorEnter(amounts, consumedAmounts);\r\n      }\r\n\r\n      // update _investedAssets with new deposited amount\r\n      uint investedAssetsAfter = _updateInvestedAssets();\r\n\r\n      // we need to compensate difference if during deposit we lost some assets\r\n      (,strategyLoss) = ConverterStrategyBaseLib2._registerIncome(\r\n        investedAssets_ + balanceBefore,\r\n        investedAssetsAfter + AppLib.balance(_asset) + amountSentToInsurance\r\n      );\r\n    } else {\r\n      if (updateInvestedAssetsInAnyCase_) {\r\n        _csbs.investedAssets = investedAssets_;\r\n      }\r\n    }\r\n\r\n    return (strategyLoss, amountSentToInsurance);\r\n  }\r\n  //endregion -------------------------------------------------------- Deposit to the pool\r\n\r\n  //region -------------------------------------------------------- Convert amounts before deposit\r\n\r\n  /// @notice Prepare {tokenAmounts} to be passed to depositorEnter\r\n  /// @dev Override this function to customize entry kind\r\n  /// @param amount_ The amount of main asset that should be invested\r\n  /// @param tokens_ Results of _depositorPoolAssets() call (list of depositor's asset in proper order)\r\n  /// @param indexAsset_ Index of main {asset} in {tokens}\r\n  /// @return tokenAmounts Amounts of depositor's assets ready to invest (this array can be passed to depositorEnter)\r\n  function _beforeDeposit(\r\n    ITetuConverter converter_,\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint indexAsset_\r\n  ) internal virtual returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    // calculate required collaterals for each token and temporary save them to tokenAmounts\r\n    (uint[] memory weights, uint totalWeight) = _depositorPoolWeights();\r\n    return ConverterStrategyBaseLib.beforeDeposit(\r\n      converter_,\r\n      amount_,\r\n      tokens_,\r\n      indexAsset_,\r\n      weights,\r\n      totalWeight,\r\n      liquidationThresholds\r\n    );\r\n  }\r\n  //endregion -------------------------------------------------------- Convert amounts before deposit\r\n\r\n  //region -------------------------------------------------------- Get requested amount\r\n\r\n  /// @notice Initialize members of {v}\r\n  /// @param underlying true if asset_ is underlying\r\n  function _initWithdrawUniversalLocal(address asset_, WithdrawUniversalLocal memory v, bool underlying) internal view {\r\n    v.tokens = _depositorPoolAssets();\r\n    v.theAsset = asset_;\r\n    v.converter = _csbs.converter;\r\n    v.indexTheAsset = AppLib.getAssetIndex(v.tokens, asset_);\r\n    v.balanceBefore = AppLib.balance(asset_);\r\n    v.indexUnderlying = underlying ? v.indexTheAsset : AppLib.getAssetIndex(v.tokens, baseState.asset);\r\n  }\r\n\r\n  /// @notice Get the specified {amount} of the given {v.asset} on the balance\r\n  /// @dev Ensures that either all debts are closed, or a non-zero amount remains on the balance or in the pool to pay off the debts\r\n  /// @param amount_ Required amount of {v.asset}. Use type(uint).max to withdraw all\r\n  /// @return expectedTotalAssetAmount Expected amount of {v.asset} that should be received on the balance\r\n  ///                                  Expected total amount of given asset after all withdraws, conversions, swaps and repays\r\n  function _makeRequestedAmount(uint amount_, WithdrawUniversalLocal memory v) internal virtual returns ( // it's virtual to simplify unit testing\r\n    uint expectedTotalAssetAmount\r\n  ) {\r\n    uint depositorLiquidity = _depositorLiquidity();\r\n\r\n    // calculate how much liquidity we need to withdraw for getting at least requested amount of the {v.asset}\r\n    uint[] memory quoteAmounts = _depositorQuoteExit(depositorLiquidity);\r\n    uint liquidityAmountToWithdraw = ConverterStrategyBaseLib2.getLiquidityAmount(\r\n      amount_,\r\n      v.tokens,\r\n      v.indexTheAsset,\r\n      v.converter,\r\n      quoteAmounts,\r\n      depositorLiquidity,\r\n      v.indexUnderlying\r\n    );\r\n\r\n    if (liquidityAmountToWithdraw != 0) {\r\n      uint[] memory withdrawnAmounts = _depositorExit(liquidityAmountToWithdraw, false);\r\n      // the depositor is able to use less liquidity than it was asked, i.e. Balancer-depositor leaves some BPT unused\r\n      // use what exactly was withdrew instead of the expectation\r\n      // assume that liquidity cannot increase in _depositorExit\r\n      liquidityAmountToWithdraw = depositorLiquidity - _depositorLiquidity();\r\n      emit OnDepositorExit(liquidityAmountToWithdraw, withdrawnAmounts);\r\n    }\r\n\r\n    // try to receive at least requested amount of the {v.asset} on the balance\r\n    uint expectedBalance = ConverterStrategyBaseLib.makeRequestedAmount(\r\n      v.tokens,\r\n      v.indexTheAsset,\r\n      v.converter,\r\n      AppLib._getLiquidator(controller()),\r\n      (amount_ == type(uint).max ? amount_ : v.balanceBefore + amount_), // current balance + the amount required to be withdrawn on balance\r\n      liquidationThresholds\r\n    );\r\n\r\n    require(expectedBalance >= v.balanceBefore, AppErrors.BALANCE_DECREASE);\r\n    return expectedBalance - v.balanceBefore;\r\n  }\r\n\r\n  //endregion -------------------------------------------------------- Get requested amount\r\n\r\n  //region -------------------------------------------------------- Withdraw from the pool\r\n\r\n  function _beforeWithdraw(uint /*amount*/) internal virtual {\r\n    // do nothing\r\n  }\r\n\r\n  /// @notice Withdraw given amount from the pool.\r\n  /// @param amount Amount to be withdrawn in terms of the asset in addition to the exist balance.\r\n  /// @return expectedWithdrewUSD The value that we should receive after withdrawing (in USD, decimals of the {asset})\r\n  /// @return assetPrice Price of the {asset} from the price oracle\r\n  /// @return strategyLoss Loss should be covered from Insurance\r\n  function _withdrawFromPool(uint amount) override internal virtual returns (\r\n    uint expectedWithdrewUSD,\r\n    uint assetPrice,\r\n    uint strategyLoss\r\n  ) {\r\n    // calculate profit/loss because of price changes, try to compensate the loss from the insurance\r\n    (uint investedAssetsNewPrices, uint earnedByPrices) = _fixPriceChanges(true);\r\n    (expectedWithdrewUSD, assetPrice, strategyLoss,) = _withdrawUniversal(amount, earnedByPrices, investedAssetsNewPrices);\r\n  }\r\n\r\n  /// @notice Withdraw all from the pool.\r\n  /// @return expectedWithdrewUSD The value that we should receive after withdrawing\r\n  /// @return assetPrice Price of the {asset} taken from the price oracle\r\n  /// @return strategyLoss Loss should be covered from Insurance\r\n  function _withdrawAllFromPool() override internal virtual returns (\r\n    uint expectedWithdrewUSD,\r\n    uint assetPrice,\r\n    uint strategyLoss\r\n  ) {\r\n    return _withdrawFromPool(type(uint).max);\r\n  }\r\n\r\n  /// @dev The function is virtual to simplify unit testing\r\n  /// @param amount_ Amount to be trying to withdrawn. Max uint means attempt to withdraw all possible invested assets.\r\n  /// @param earnedByPrices_ Additional amount that should be withdrawn and send to the insurance\r\n  /// @param investedAssets_ Value of invested assets recalculated using current prices\r\n  /// @return expectedWithdrewUSD The value that we should receive after withdrawing in terms of USD value of each asset in the pool\r\n  /// @return assetPrice Price of the {asset} taken from the price oracle\r\n  /// @return strategyLoss Loss before withdrawing: [new-investedAssets - old-investedAssets]\r\n  /// @return amountSentToInsurance Actual amount of underlying sent to the insurance\r\n  function _withdrawUniversal(uint amount_, uint earnedByPrices_, uint investedAssets_) virtual internal returns (\r\n    uint expectedWithdrewUSD,\r\n    uint assetPrice,\r\n    uint strategyLoss,\r\n    uint amountSentToInsurance\r\n  ) {\r\n    // amount to withdraw; we add a little gap to avoid situation \"opened debts, no liquidity to pay\"\r\n    uint amount = amount_ == type(uint).max\r\n      ? amount_\r\n      : (amount_ + earnedByPrices_) * (DENOMINATOR + GAP_WITHDRAW) / DENOMINATOR;\r\n    _beforeWithdraw(amount);\r\n\r\n    if (amount != 0 && investedAssets_ != 0) {\r\n      WithdrawUniversalLocal memory v;\r\n      _initWithdrawUniversalLocal(baseState.asset, v, true);\r\n\r\n      // get at least requested amount of the underlying on the balance\r\n      assetPrice = ConverterStrategyBaseLib2.getAssetPriceFromConverter(v.converter, v.theAsset);\r\n      expectedWithdrewUSD = AppLib.sub0(_makeRequestedAmount(amount, v), earnedByPrices_) * assetPrice / 1e18;\r\n\r\n      (amountSentToInsurance, strategyLoss) = ConverterStrategyBaseLib2.calculateIncomeAfterWithdraw(\r\n        baseState.splitter,\r\n        v.theAsset,\r\n        investedAssets_,\r\n        v.balanceBefore,\r\n        earnedByPrices_,\r\n        _updateInvestedAssets()\r\n      );\r\n    }\r\n\r\n    return (\r\n      expectedWithdrewUSD,\r\n      assetPrice,\r\n      strategyLoss,\r\n      amountSentToInsurance\r\n    );\r\n  }\r\n\r\n  /// @notice Withdraw all amounts from the pool using minimum actions (it skips claiming rewards, fees and so on)\r\n  function _emergencyExitFromPool() override internal virtual {\r\n    uint[] memory withdrawnAmounts = _depositorEmergencyExit();\r\n    emit OnDepositorEmergencyExit(withdrawnAmounts);\r\n    // we don't convert amounts to main asset to avoid any excess actions\r\n    // update of invested assets is necessary in any case\r\n    _updateInvestedAssets();\r\n  }\r\n  //endregion -------------------------------------------------------- Withdraw from the pool\r\n\r\n  //region -------------------------------------------------------- Claim rewards\r\n\r\n  /// @notice Claim all possible rewards.\r\n  function _claim() override internal virtual returns (address[] memory rewardTokensOut, uint[] memory amountsOut) {\r\n    // get rewards from the Depositor\r\n    (address[] memory rewardTokens, uint[] memory rewardAmounts, uint[] memory balancesBefore) = _depositorClaimRewards();\r\n\r\n    (rewardTokensOut, amountsOut) = ConverterStrategyBaseLib2.claimConverterRewards(\r\n      _csbs.converter,\r\n      _depositorPoolAssets(),\r\n      rewardTokens,\r\n      rewardAmounts,\r\n      balancesBefore\r\n    );\r\n  }\r\n\r\n  /// @dev Call recycle process and send tokens to forwarder.\r\n  ///      Need to be separated from the claim process - the claim can be called by operator for other purposes.\r\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\r\n  /// @return amountPerf Total performance fee in terms of underlying\r\n  function _rewardsLiquidation(address[] memory rewardTokens_, uint[] memory rewardAmounts_) internal returns (\r\n    uint paidDebtToInsurance,\r\n    uint amountPerf\r\n  ) {\r\n    if (rewardTokens_.length != 0) {\r\n      (paidDebtToInsurance, amountPerf) = ConverterStrategyBaseLib.recycle(\r\n        baseState,\r\n        _csbs,\r\n        _depositorPoolAssets(),\r\n        controller(),\r\n        liquidationThresholds,\r\n        rewardTokens_,\r\n        rewardAmounts_\r\n      );\r\n    }\r\n    return (paidDebtToInsurance, amountPerf);\r\n  }\r\n  //endregion -------------------------------------------------------- Claim rewards\r\n\r\n  //region -------------------------------------------------------- Hardwork\r\n\r\n  /// @notice A virtual handler to make any action before hardwork\r\n  /// @return True if the hardwork should be skipped\r\n  function _preHardWork(bool reInvest) internal virtual returns (bool) {\r\n    reInvest; // hide warning\r\n    return false;\r\n  }\r\n\r\n  /// @notice A virtual handler to make any action after hardwork\r\n  function _postHardWork() internal virtual {}\r\n\r\n  /// @notice Is strategy ready to hard work\r\n  function isReadyToHardWork() override external virtual view returns (bool) {\r\n    // check claimable amounts and compare with thresholds\r\n    return true;\r\n  }\r\n\r\n  /// @notice Do hard work with reinvesting\r\n  /// @return earned Earned amount in terms of {asset}\r\n  /// @return lost Lost amount in terms of {asset}\r\n  function doHardWork() override public returns (uint earned, uint lost) {\r\n    require(msg.sender == baseState.splitter, StrategyLib2.DENIED);\r\n    return _doHardWork(true);\r\n  }\r\n\r\n  /// @notice Claim rewards, do _processClaims() after claiming, calculate earned and lost amounts\r\n  /// @return earned The amount of earned rewards.\r\n  /// @return lost The amount of lost rewards.\r\n  /// @return assetBalanceAfterClaim The asset balance after claiming rewards.\r\n  /// @return paidDebtToInsurance A part of {earned} spent on debt-to-insurance payment\r\n  /// @return amountPerf Performance fee in terms of underlying\r\n  function _handleRewards() internal virtual returns (\r\n    uint earned,\r\n    uint lost,\r\n    uint assetBalanceAfterClaim,\r\n    uint paidDebtToInsurance,\r\n    uint amountPerf\r\n  );\r\n\r\n  /// @param reInvest Deposit to pool all available amount if it's greater than the threshold\r\n  /// @return earned Earned amount in terms of {asset}\r\n  /// @return lost Lost amount in terms of {asset}\r\n  function _doHardWork(bool reInvest) internal returns (uint earned, uint lost) {\r\n    // ATTENTION! splitter will not cover the loss if it is lower than profit\r\n    (uint investedAssetsNewPrices, uint earnedByPrices) = _fixPriceChanges(true);\r\n    if (!_preHardWork(reInvest)) {\r\n      // claim rewards and get current asset balance\r\n      (uint earned1, uint lost1, uint assetBalance, uint paidDebtToInsurance, uint amountPerf) = _handleRewards();\r\n\r\n      // re-invest income\r\n      (uint investedAssetsAfterHandleRewards,,) = _calcInvestedAssets();\r\n\r\n      (, uint amountSentToInsurance) = _depositToPoolUniversal(\r\n        reInvest\r\n        && investedAssetsAfterHandleRewards != 0\r\n        && assetBalance > _csbs.reinvestThresholdPercent * investedAssetsAfterHandleRewards / DENOMINATOR\r\n          ? assetBalance\r\n          : 0,\r\n        earnedByPrices,\r\n        investedAssetsAfterHandleRewards,\r\n        true\r\n      );\r\n\r\n      (earned, lost) = ConverterStrategyBaseLib2._registerIncome(\r\n        investedAssetsAfterHandleRewards + assetBalance, // assets in use before deposit\r\n        _csbs.investedAssets + AppLib.balance(baseState.asset) + amountSentToInsurance // assets in use after deposit\r\n      );\r\n\r\n      _postHardWork();\r\n      emit OnHardWorkEarnedLost(investedAssetsNewPrices, earnedByPrices, earned1, lost1, earned, lost, paidDebtToInsurance, amountPerf);\r\n\r\n      // Excluded from earned two values: performance fee and amount paid to cover debt before the insurance\r\n      // Amount sent to the forwarder is still included to the result earned amount.\r\n      earned = AppLib.sub0(earned + earned1, paidDebtToInsurance + amountPerf);\r\n      lost += lost1;\r\n    }\r\n\r\n    // register amount paid for the debts and amount received for the provided collaterals\r\n    ConverterStrategyBaseLib2.registerBorrowResults(_csbs.converter, baseState.asset);\r\n\r\n    return (earned, lost);\r\n  }\r\n  //endregion -------------------------------------------------------- Hardwork\r\n\r\n  //region -------------------------------------------------------- InvestedAssets Calculations\r\n\r\n  /// @notice Updates cached _investedAssets to actual value\r\n  /// @dev Should be called after deposit / withdraw / claim; virtual - for ut\r\n  function _updateInvestedAssets() internal returns (uint investedAssetsOut) {\r\n    (investedAssetsOut,,) = _calcInvestedAssets();\r\n    _csbs.investedAssets = investedAssetsOut;\r\n  }\r\n\r\n  /// @notice Calculate amount we will receive when we withdraw all from pool\r\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\r\n  /// @return amountOut Invested asset amount under control (in terms of {asset})\r\n  /// @return prices Asset prices in USD, decimals 18\r\n  /// @return decs 10**decimals\r\n  function _calcInvestedAssets() internal returns (uint amountOut, uint[] memory prices, uint[] memory decs) {\r\n    (address[] memory tokens, uint indexAsset) = _getTokens(baseState.asset);\r\n    return ConverterStrategyBaseLib2.calcInvestedAssets(\r\n      tokens,\r\n      _getDepositorQuoteExitAmountsOut(tokens),\r\n      indexAsset,\r\n      _csbs.converter,\r\n      true\r\n    );\r\n  }\r\n\r\n  function calcInvestedAssets() external returns (uint investedAssetsOut) {\r\n    StrategyLib2.onlyOperators(controller());\r\n    (investedAssetsOut,,) = _calcInvestedAssets();\r\n  }\r\n\r\n  /// @notice Calculate amount of deposited tokens that can be received from the pool after withdrawing all liquidity.\r\n  function _getDepositorQuoteExitAmountsOut(address[] memory tokens) internal returns (\r\n    uint[] memory depositorQuoteExitAmountsOut\r\n  ) {\r\n    uint liquidity = _depositorLiquidity();\r\n    return liquidity == 0\r\n      ? new uint[](tokens.length)\r\n      : _depositorQuoteExit(liquidity);\r\n  }\r\n\r\n  /// @notice Calculate profit/loss happened because of price changing. Try to cover the loss, send the profit to the insurance\r\n  /// @param updateInvestedAssetsAmount_ If false - just return current value of invested assets\r\n  /// @return investedAssetsOut Updated value of {_investedAssets}\r\n  /// @return earnedOut Profit that was received because of price changes. It should be sent back to insurance.\r\n  /// It's too dangerous to try to get this amount here because of the problem \"borrow-repay is not allowed in a single block\"\r\n  /// So, we need to handle it in the caller code.\r\n  function _fixPriceChanges(bool updateInvestedAssetsAmount_) internal returns (uint investedAssetsOut, uint earnedOut) {\r\n    if (updateInvestedAssetsAmount_) {\r\n      (address[] memory tokens, uint indexAsset) = _getTokens(baseState.asset);\r\n      (investedAssetsOut, earnedOut) = ConverterStrategyBaseLib2.fixPriceChanges(\r\n        _csbs,\r\n        baseState,\r\n        _getDepositorQuoteExitAmountsOut(tokens),\r\n        tokens,\r\n        indexAsset\r\n      );\r\n    } else {\r\n      (investedAssetsOut, earnedOut) = (_csbs.investedAssets, 0);\r\n    }\r\n  }\r\n  //endregion -------------------------------------------------------- InvestedAssets Calculations\r\n\r\n  //region -------------------------------------------------------- ITetuConverterCallback\r\n\r\n  /// @notice Converters asks to send some amount back.\r\n  ///         The results depend on whether the required amount is on the balance:\r\n  ///         1. The {amount_} exists on the balance: send the amount to TetuConverter, return {amount_}\r\n  ///         2. The {amount_} doesn't exist on the balance. Try to receive the {amount_}.\r\n  ///         2.1. if the required amount is received: return {amount_}\r\n  ///         2.2. if less amount X (X < {amount_}) is received return X - gap\r\n  ///         In the case 2 no amount is send to TetuConverter.\r\n  ///         Converter should make second call of requirePayAmountBack({amountOut}) to receive the assets.\r\n  /// @param theAsset_ Required asset (either collateral or borrow), it can be NOT underlying\r\n  /// @param amount_ Required amount of {theAsset_}\r\n  /// @return amountOut Amount that was send OR can be claimed on the next call.\r\n  ///                   The caller should control own balance to know if the amount was actually send\r\n  ///                   (because we need compatibility with exist not-NSR strategies)\r\n  function requirePayAmountBack(address theAsset_, uint amount_) external override returns (uint amountOut) {\r\n    WithdrawUniversalLocal memory v;\r\n    _initWithdrawUniversalLocal(theAsset_, v, false);\r\n    require(msg.sender == address(v.converter), StrategyLib.DENIED);\r\n    require(amount_ != 0, AppErrors.ZERO_VALUE);\r\n    require(v.indexTheAsset != type(uint).max, AppErrors.WRONG_ASSET);\r\n\r\n    (uint _investedAssets, uint earnedByPrices) = _fixPriceChanges(true);\r\n    v.balanceBefore = ConverterStrategyBaseLib2.sendProfitGetAssetBalance(theAsset_, v.balanceBefore, _investedAssets, earnedByPrices, baseState);\r\n\r\n    // amount to withdraw; we add a little gap to avoid situation \"opened debts, no liquidity to pay\"\r\n    // At first we add only 1 gap.\r\n    // This is min allowed amount that we should have on balance to be able to send {amount_} to the converter\r\n    uint amountPlusGap = amount_ * (DENOMINATOR + GAP_WITHDRAW) / DENOMINATOR;\r\n\r\n    if (v.balanceBefore >= amountPlusGap) {\r\n      // the requested amount is available, send it to the converter\r\n      IERC20(theAsset_).safeTransfer(address(v.converter), amount_);\r\n      amountOut = amount_;\r\n    } else {\r\n      // the requested amount is not available\r\n      // so, we cannot send anything to converter in this call\r\n      // try to receive requested amount to balance\r\n      // we should receive amount with extra gap, where gap is in the range (GAP_WITHDRAW, 2 * GAP_WITHDRAW]\r\n      // The caller will be able to claim requested amount (w/o extra gap) in the next call\r\n      if (_investedAssets == 0) {\r\n        // there are no invested amounts, we can use amount on balance only\r\n        // but we cannot send all amount, we should keep not zero amount on balance\r\n        // to avoid situation \"opened debts, no liquidity to pay\"\r\n        // as soon as the converter asks for payment, we still have an opened debt..\r\n        amountOut = v.balanceBefore * DENOMINATOR / (DENOMINATOR + GAP_WITHDRAW);\r\n      } else {\r\n        uint amountTwoGaps = amount_ * (DENOMINATOR + 2 * GAP_WITHDRAW) / DENOMINATOR;\r\n        // get at least requested amount of {theAsset_} on the balance\r\n        _makeRequestedAmount(amountTwoGaps - v.balanceBefore, v);\r\n\r\n        uint balanceAfter = AppLib.balance(theAsset_);\r\n        amountOut = balanceAfter > amountPlusGap\r\n          ? amount_\r\n          : balanceAfter * DENOMINATOR / (DENOMINATOR + GAP_WITHDRAW);\r\n      }\r\n    }\r\n\r\n    // update invested assets anyway, even if we suppose it will be called in other places\r\n    _updateInvestedAssets();\r\n\r\n    return amountOut;\r\n  }\r\n\r\n  /// @notice TetuConverter calls this function when it sends any amount to user's balance\r\n  /// @param assets_ Any asset sent to the balance, i.e. inside repayTheBorrow\r\n  /// @param amounts_ Amount of {asset_} that has been sent to the user's balance\r\n  function onTransferAmounts(address[] memory assets_, uint[] memory amounts_) external override {\r\n    require(msg.sender == address(_csbs.converter), StrategyLib2.DENIED);\r\n    require(assets_.length == amounts_.length, AppErrors.INCORRECT_LENGTHS);\r\n\r\n    // TetuConverter is able two call this function in two cases:\r\n    // 1) rebalancing (the health factor of some borrow is too low)\r\n    // 2) forcible closing of the borrow\r\n    // In both cases we update invested assets value here\r\n    // and avoid fixing any related losses in hardwork\r\n    _updateInvestedAssets();\r\n  }\r\n  //endregion -------------------------------------------------------- ITetuConverterCallback\r\n\r\n  //region -------------------------------------------------------- Others\r\n\r\n  /// @notice Unlimited capacity by default\r\n  function capacity() external virtual view returns (uint) {\r\n    return 2 ** 255;\r\n    // almost same as type(uint).max but more gas efficient\r\n  }\r\n\r\n  /// @return tokens Result of {_depositorPoolAssets}\r\n  /// @return indexAsset Index of the underlying in {tokens}\r\n  function _getTokens(address asset_) internal view returns (address[] memory tokens, uint indexAsset) {\r\n    tokens = _depositorPoolAssets();\r\n    indexAsset = AppLib.getAssetIndex(tokens, asset_);\r\n    require(indexAsset != type(uint).max, StrategyLib2.WRONG_VALUE);\r\n  }\r\n  //endregion -------------------------------------------------------- Others\r\n\r\n\r\n  /// @dev This empty reserved space is put in place to allow future versions to add new\r\n  /// variables without shifting down storage in the inheritance chain.\r\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n  uint[50 - 4] private __gap; // 50 - count of variables\r\n\r\n}\r\n"
    },
    "contracts/strategies/ConverterStrategyBaseLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"../libs/AppErrors.sol\";\r\nimport \"../libs/AppLib.sol\";\r\nimport \"../libs/TokenAmountsLib.sol\";\r\nimport \"../libs/ConverterEntryKinds.sol\";\r\nimport \"../libs/IterationPlanLib.sol\";\r\nimport \"../interfaces/IConverterStrategyBase.sol\";\r\n\r\nlibrary ConverterStrategyBaseLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n//region--------------------------------------------------- Data types\r\n\r\n  /// @notice Local vars for {_recycle}, workaround for stack too deep\r\n  struct RecycleLocalParams {\r\n    /// @notice Compound amount + Performance amount\r\n    uint amountCP;\r\n    /// @notice Amount to compound\r\n    uint amountC;\r\n    /// @notice Amount to send to performance and insurance\r\n    uint amountP;\r\n    /// @notice Amount to forwarder + amount to compound\r\n    uint amountFC;\r\n    address rewardToken;\r\n    uint len;\r\n    uint receivedAmountOut;\r\n  }\r\n\r\n  struct OpenPositionLocal {\r\n    uint entryKind;\r\n    address[] converters;\r\n    uint[] collateralsRequired;\r\n    uint[] amountsToBorrow;\r\n    uint collateral;\r\n    uint amountToBorrow;\r\n  }\r\n\r\n  struct OpenPositionEntryKind1Local {\r\n    address[] converters;\r\n    uint[] collateralsRequired;\r\n    uint[] amountsToBorrow;\r\n    uint collateral;\r\n    uint amountToBorrow;\r\n    uint c1;\r\n    uint c3;\r\n    uint alpha;\r\n  }\r\n\r\n  struct SwapToGetAmountLocal {\r\n    uint len;\r\n    uint[] prices;\r\n    uint[] decs;\r\n  }\r\n\r\n  struct ConvertAfterWithdrawLocal {\r\n    address asset;\r\n    uint spent;\r\n    uint received;\r\n    uint balance;\r\n    uint balanceBefore;\r\n    uint len;\r\n  }\r\n\r\n  struct SwapToGivenAmountInputParams {\r\n    ITetuConverter converter;\r\n    ITetuLiquidator liquidator;\r\n    uint targetAmount;\r\n    address[] tokens;\r\n    uint[] amounts;\r\n    /// @notice liquidationThresholds for the {tokens}\r\n    uint[] liquidationThresholds;\r\n    uint indexTargetAsset;\r\n    address underlying;\r\n    /// @notice Allow to swap more then required (i.e. 1_000 => +1%)\r\n    ///         to avoid additional swap if the swap return amount a bit less than we expected\r\n    uint overswap;\r\n  }\r\n\r\n  struct SwapToGivenAmountLocal {\r\n    uint len;\r\n    uint[] availableAmounts;\r\n    uint i;\r\n  }\r\n\r\n  struct CloseDebtsForRequiredAmountLocal {\r\n    address asset;\r\n    uint balanceAsset;\r\n    uint balanceToken;\r\n\r\n    uint newBalanceAsset;\r\n    uint newBalanceToken;\r\n\r\n    uint idxToSwap1;\r\n    uint amountToSwap;\r\n    uint idxToRepay1;\r\n\r\n    /// @notice Cost of $1 in terms of the assets, decimals 18\r\n    uint[] prices;\r\n    /// @notice 10**decimal for the assets\r\n    uint[] decs;\r\n\r\n    /// @notice Amounts that will be received on balance before execution of the plan.\r\n    uint[] balanceAdditions;\r\n\r\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\r\n    ///         The leftovers should be swapped to get following result proportions of the assets:\r\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\r\n    uint propNotUnderlying18;\r\n\r\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\r\n    bool usePoolProportions;\r\n\r\n    bool exitLoop;\r\n  }\r\n\r\n  struct DataSetLocal {\r\n    ITetuConverter converter;\r\n    ITetuLiquidator liquidator;\r\n    /// @notice Tokens received from {_depositorPoolAssets}\r\n    address[] tokens;\r\n    /// @notice Index of the main asset in {tokens}\r\n    uint indexAsset;\r\n    /// @notice Length of {tokens}\r\n    uint len;\r\n  }\r\n\r\n  struct RecycleLocal {\r\n    address asset;\r\n    uint compoundRatio;\r\n    uint performanceFee;\r\n    uint toPerf;\r\n    uint toInsurance;\r\n    uint[] amountsToForward;\r\n    uint[] thresholds;\r\n    int debtToInsuranceCurrent;\r\n    int debtToInsuranceUpdated;\r\n    address splitter;\r\n  }\r\n\r\n  /// @notice Input params for _recycle\r\n  struct RecycleParams {\r\n    ITetuConverter converter;\r\n    ITetuLiquidator liquidator;\r\n    address splitter;\r\n\r\n    /// @notice Underlying asset\r\n    address asset;\r\n    /// @notice Compound ration in the range [0...COMPOUND_DENOMINATOR]\r\n    uint compoundRatio;\r\n    /// @notice tokens received from {_depositorPoolAssets}\r\n    address[] tokens;\r\n    /// @notice Liquidation thresholds for rewards tokens\r\n    uint[] thresholds;\r\n    /// @notice Full list of reward tokens received from tetuConverter and depositor\r\n    address[] rewardTokens;\r\n    /// @notice Amounts of {rewardTokens_}; we assume, there are no zero amounts here\r\n    uint[] rewardAmounts;\r\n    /// @notice Performance fee in the range [0...FEE_DENOMINATOR]\r\n    uint performanceFee;\r\n    /// @notice Current debt to the insurance [in underlying]\r\n    int debtToInsurance;\r\n    /// @notice Liquidation threshold for the {asset}\r\n    uint assetThreshold;\r\n  }\r\n//endregion--------------------------------------------------- Data types\r\n\r\n//region--------------------------------------------------- Constants\r\n\r\n  /// @notice approx one month for average block time 2 sec\r\n  uint internal constant _LOAN_PERIOD_IN_BLOCKS = 30 days / 2;\r\n  uint internal constant _REWARD_LIQUIDATION_SLIPPAGE = 5_000; // 5%\r\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\r\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\r\n  uint internal constant PRICE_IMPACT_TOLERANCE = 300;\r\n  /// @notice borrow/collateral amount cannot be less than given number of tokens\r\n  uint internal constant DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD = 10;\r\n  /// @notice Allow to swap more then required (i.e. 1_000 => +1%) inside {swapToGivenAmount}\r\n  ///         to avoid additional swap if the swap will return amount a bit less than we expected\r\n  uint internal constant OVERSWAP = PRICE_IMPACT_TOLERANCE + _ASSET_LIQUIDATION_SLIPPAGE;\r\n  /// @notice During SWAP-REPAY cycle we can receive requested amount after SWAP, so, following REPAY will be skipped.\r\n  ///         But we should prevent situation \"zero balance, not zero debts\".\r\n  ///         So, it worth to request amount higher (on the given gap) than it's really requested.\r\n  uint internal constant REQUESTED_BALANCE_GAP = 5_000; // 5%\r\n//endregion--------------------------------------------------- Constants\r\n\r\n//region--------------------------------------------------- Events\r\n  /// @notice A borrow was made\r\n  event OpenPosition(\r\n    address converter,\r\n    address collateralAsset,\r\n    uint collateralAmount,\r\n    address borrowAsset,\r\n    uint borrowedAmount,\r\n    address recepient\r\n  );\r\n\r\n  /// @notice Some borrow(s) was/were repaid\r\n  event ClosePosition(\r\n    address collateralAsset,\r\n    address borrowAsset,\r\n    uint amountRepay,\r\n    address recepient,\r\n    uint returnedAssetAmountOut,\r\n    uint returnedBorrowAmountOut\r\n  );\r\n\r\n  /// @notice A liquidation was made\r\n  event Liquidation(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint amountIn,\r\n    uint spentAmountIn,\r\n    uint receivedAmountOut\r\n  );\r\n\r\n  event ReturnAssetToConverter(address asset, uint amount);\r\n\r\n  /// @notice Recycle was made\r\n  /// @param rewardTokens Full list of reward tokens received from tetuConverter and depositor\r\n  /// @param amountsToForward Amounts to be sent to forwarder\r\n  event Recycle(\r\n    address[] rewardTokens,\r\n    uint[] amountsToForward,\r\n    uint toPerf,\r\n    uint toInsurance\r\n  );\r\n\r\n  /// @notice Debt to insurance was paid by rewards\r\n  /// @param debtToInsuranceBefore Initial amount of debts to the insurance, in underlying\r\n  /// @param debtToInsuranceBefore Final amount of debts to the insurance, in underlying\r\n  event OnPayDebtToInsurance(\r\n    int debtToInsuranceBefore,\r\n    int debtToInsuraneAfter\r\n  );\r\n\r\n  /// @notice Debt to insurance was paid by a reward token\r\n  /// @param debtToCover Initial amount of debt that should be covered, in underlying\r\n  /// @param debtLeftovers Final amount of debt that should be covered, in underlying\r\n  /// It can be negative if we paid more than required\r\n  event OnCoverDebtToInsurance(\r\n    address rewardToken,\r\n    uint rewardAmount,\r\n    uint debtToCover,\r\n    int debtLeftovers\r\n  );\r\n//endregion---------------------------------------------------  Events\r\n\r\n//region--------------------------------------------------- Borrow and close positions\r\n\r\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\r\n  ///         Max possible collateral should be approved before calling of this function.\r\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\r\n  ///                   See TetuConverter\\EntryKinds.sol\\ENTRY_KIND_XXX constants for possible entry kinds\r\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\r\n  /// @param amountIn_ Meaning depends on {entryData_}.\r\n  function openPosition(\r\n    ITetuConverter tetuConverter_,\r\n    bytes memory entryData_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint amountIn_,\r\n    uint thresholdAmountIn_\r\n  ) external returns (\r\n    uint collateralAmountOut,\r\n    uint borrowedAmountOut\r\n  ) {\r\n    return _openPosition(tetuConverter_, entryData_, collateralAsset_, borrowAsset_, amountIn_, thresholdAmountIn_);\r\n  }\r\n\r\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\r\n  ///         Max possible collateral should be approved before calling of this function.\r\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\r\n  ///                   See TetuConverter\\EntryKinds.sol\\ENTRY_KIND_XXX constants for possible entry kinds\r\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\r\n  /// @param amountIn_ Meaning depends on {entryData_}.\r\n  /// @param thresholdAmountIn_ Min value of amountIn allowed for the second and subsequent conversions.\r\n  ///        0 - use default min value\r\n  ///        If amountIn becomes too low, no additional borrows are possible, so\r\n  ///        the rest amountIn is just added to collateral/borrow amount of previous conversion.\r\n  function _openPosition(\r\n    ITetuConverter tetuConverter_,\r\n    bytes memory entryData_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint amountIn_,\r\n    uint thresholdAmountIn_\r\n  ) internal returns (\r\n    uint collateralAmountOut,\r\n    uint borrowedAmountOut\r\n  ) {\r\n    if (thresholdAmountIn_ == 0) {\r\n      // zero threshold is not allowed because round-issues are possible, see openPosition.dust test\r\n      // we assume here, that it's useless to borrow amount using collateral/borrow amount\r\n      // less than given number of tokens (event for BTC)\r\n      thresholdAmountIn_ = DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD;\r\n    }\r\n    if (amountIn_ <= thresholdAmountIn_) {\r\n      return (0, 0);\r\n    }\r\n\r\n    OpenPositionLocal memory vars;\r\n    // we assume here, that max possible collateral amount is already approved (as it's required by TetuConverter)\r\n    vars.entryKind = ConverterEntryKinds.getEntryKind(entryData_);\r\n    if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\r\n      return openPositionEntryKind1(\r\n        tetuConverter_,\r\n        entryData_,\r\n        collateralAsset_,\r\n        borrowAsset_,\r\n        amountIn_,\r\n        thresholdAmountIn_\r\n      );\r\n    } else {\r\n      (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\r\n        entryData_,\r\n        collateralAsset_,\r\n        amountIn_,\r\n        borrowAsset_,\r\n        _LOAN_PERIOD_IN_BLOCKS\r\n      );\r\n\r\n      uint len = vars.converters.length;\r\n      if (len > 0) {\r\n        for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n          // we need to approve collateralAmount before the borrow-call but it's already approved, see above comments\r\n          vars.collateral;\r\n          vars.amountToBorrow;\r\n          if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\r\n            // we have exact amount of total collateral amount\r\n            // Case ENTRY_KIND_EXACT_PROPORTION_1 is here too because we consider first platform only\r\n            vars.collateral = amountIn_ < vars.collateralsRequired[i]\r\n              ? amountIn_\r\n              : vars.collateralsRequired[i];\r\n            vars.amountToBorrow = amountIn_ < vars.collateralsRequired[i]\r\n              ? vars.amountsToBorrow[i] * amountIn_ / vars.collateralsRequired[i]\r\n              : vars.amountsToBorrow[i];\r\n            amountIn_ -= vars.collateral;\r\n          } else {\r\n            // assume here that entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2\r\n            // we have exact amount of total amount-to-borrow\r\n            vars.amountToBorrow = amountIn_ < vars.amountsToBorrow[i]\r\n              ? amountIn_\r\n              : vars.amountsToBorrow[i];\r\n            vars.collateral = amountIn_ < vars.amountsToBorrow[i]\r\n              ? vars.collateralsRequired[i] * amountIn_ / vars.amountsToBorrow[i]\r\n              : vars.collateralsRequired[i];\r\n            amountIn_ -= vars.amountToBorrow;\r\n          }\r\n\r\n          if (amountIn_ < thresholdAmountIn_ && amountIn_ != 0) {\r\n            // dust amount is left, just leave it unused\r\n            // we cannot add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\r\n            amountIn_ = 0;\r\n          }\r\n\r\n          if (vars.amountToBorrow != 0) {\r\n            borrowedAmountOut += tetuConverter_.borrow(\r\n              vars.converters[i],\r\n              collateralAsset_,\r\n              vars.collateral,\r\n              borrowAsset_,\r\n              vars.amountToBorrow,\r\n              address(this)\r\n            );\r\n            collateralAmountOut += vars.collateral;\r\n            emit OpenPosition(\r\n              vars.converters[i],\r\n              collateralAsset_,\r\n              vars.collateral,\r\n              borrowAsset_,\r\n              vars.amountToBorrow,\r\n              address(this)\r\n            );\r\n          }\r\n\r\n          if (amountIn_ == 0) break;\r\n        }\r\n      }\r\n\r\n      return (collateralAmountOut, borrowedAmountOut);\r\n    }\r\n  }\r\n\r\n  /// @notice Open position using entry kind 1 - split provided amount on two parts according provided proportions\r\n  /// @param amountIn_ Amount of collateral to be divided on parts. We assume {amountIn_} > 0\r\n  /// @param collateralThreshold_ Min allowed collateral amount to be used for new borrow, > 0\r\n  /// @return collateralAmountOut Total collateral used to borrow {borrowedAmountOut}\r\n  /// @return borrowedAmountOut Total borrowed amount\r\n  function openPositionEntryKind1(\r\n    ITetuConverter tetuConverter_,\r\n    bytes memory entryData_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint amountIn_,\r\n    uint collateralThreshold_\r\n  ) internal returns (\r\n    uint collateralAmountOut,\r\n    uint borrowedAmountOut\r\n  ) {\r\n    OpenPositionEntryKind1Local memory vars;\r\n    (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\r\n      entryData_,\r\n      collateralAsset_,\r\n      amountIn_,\r\n      borrowAsset_,\r\n      _LOAN_PERIOD_IN_BLOCKS\r\n    );\r\n\r\n    uint len = vars.converters.length;\r\n    if (len > 0) {\r\n      // we should split amountIn on two amounts with proportions x:y\r\n      (, uint x, uint y) = abi.decode(entryData_, (uint, uint, uint));\r\n      // calculate prices conversion ratio using price oracle, decimals 18\r\n      // i.e. alpha = 1e18 * 75e6 usdc / 25e18 matic = 3e6 usdc/matic\r\n      vars.alpha = _getCollateralToBorrowRatio(tetuConverter_, collateralAsset_, borrowAsset_);\r\n\r\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n        // the lending platform allows to convert {collateralsRequired[i]} to {amountsToBorrow[i]}\r\n        // and give us required proportions in result\r\n        // C = C1 + C2, C2 => B2, B2 * alpha = C3, C1/C3 must be equal to x/y\r\n        // C1 is collateral amount left untouched (x)\r\n        // C2 is collateral amount converted to B2 (y)\r\n        // but if lending platform doesn't have enough liquidity\r\n        // it reduces {collateralsRequired[i]} and {amountsToBorrow[i]} proportionally to fit the limits\r\n        // as result, remaining C1 will be too big after conversion and we need to make another borrow\r\n        vars.c3 = vars.alpha * vars.amountsToBorrow[i] / 1e18;\r\n        vars.c1 = x * vars.c3 / y;\r\n\r\n        // we doesn't calculate an intermediate ratio cR/(cR+c1) to avoid lost of precision\r\n        if ((vars.collateralsRequired[i] + vars.c1) > amountIn_) {\r\n          vars.collateral = vars.collateralsRequired[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\r\n          vars.amountToBorrow = vars.amountsToBorrow[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\r\n        } else {\r\n          vars.collateral = vars.collateralsRequired[i];\r\n          vars.amountToBorrow = vars.amountsToBorrow[i];\r\n        }\r\n\r\n        // skip any attempts to borrow zero amount or use too little collateral\r\n        if (vars.collateral < collateralThreshold_ || vars.amountToBorrow == 0) {\r\n          if (vars.collateralsRequired[i] + vars.c1 + collateralThreshold_ > amountIn_) {\r\n            // The lending platform has enough resources to make the borrow but amount of the borrow is too low\r\n            // Skip the borrow, leave leftover of collateral untouched\r\n            break;\r\n          } else {\r\n            // The lending platform doesn't have enough resources to make the borrow.\r\n            // We should try to make borrow on the next platform (if any)\r\n            continue;\r\n          }\r\n        }\r\n\r\n        require(\r\n          tetuConverter_.borrow(\r\n            vars.converters[i],\r\n            collateralAsset_,\r\n            vars.collateral,\r\n            borrowAsset_,\r\n            vars.amountToBorrow,\r\n            address(this)\r\n          ) == vars.amountToBorrow,\r\n          StrategyLib2.WRONG_VALUE\r\n        );\r\n        emit OpenPosition(\r\n          vars.converters[i],\r\n          collateralAsset_,\r\n          vars.collateral,\r\n          borrowAsset_,\r\n          vars.amountToBorrow,\r\n          address(this)\r\n        );\r\n\r\n        borrowedAmountOut += vars.amountToBorrow;\r\n        collateralAmountOut += vars.collateral;\r\n\r\n        // calculate amount to be borrowed in the next converter\r\n        vars.c3 = vars.alpha * vars.amountToBorrow / 1e18;\r\n        vars.c1 = x * vars.c3 / y;\r\n        amountIn_ = (amountIn_ > vars.c1 + vars.collateral)\r\n          ? amountIn_ - (vars.c1 + vars.collateral)\r\n          : 0;\r\n\r\n        // protection against dust amounts, see \"openPosition.dust\", just leave dust amount unused\r\n        // we CAN NOT add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\r\n        // we assume here, that collateralThreshold_ != 0, so check amountIn_ != 0 is not required\r\n        if (amountIn_ < collateralThreshold_) break;\r\n      }\r\n    }\r\n\r\n    return (collateralAmountOut, borrowedAmountOut);\r\n  }\r\n\r\n  /// @notice Get ratio18 = collateral / borrow\r\n  function _getCollateralToBorrowRatio(\r\n    ITetuConverter converter_,\r\n    address collateralAsset_,\r\n    address borrowAsset_\r\n  ) internal view returns (uint){\r\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\r\n    uint priceCollateral = priceOracle.getAssetPrice(collateralAsset_);\r\n    uint priceBorrow = priceOracle.getAssetPrice(borrowAsset_);\r\n    return 1e18 * priceBorrow * 10 ** IERC20Metadata(collateralAsset_).decimals()\r\n    / priceCollateral / 10 ** IERC20Metadata(borrowAsset_).decimals();\r\n  }\r\n\r\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\r\n  ///         It doesn't repay more than the actual amount of the debt, so it can use less amount than {amountToRepay}\r\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\r\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\r\n  /// @return repaidAmountOut Amount that was actually repaid\r\n  function _closePosition(\r\n    ITetuConverter converter_,\r\n    address collateralAsset,\r\n    address borrowAsset,\r\n    uint amountToRepay\r\n  ) internal returns (\r\n    uint returnedAssetAmountOut,\r\n    uint repaidAmountOut\r\n  ) {\r\n\r\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\r\n\r\n    // We shouldn't try to pay more than we actually need to repay\r\n    // The leftover will be swapped inside TetuConverter, it's inefficient.\r\n    // Let's limit amountToRepay by needToRepay-amount\r\n    (uint needToRepay,) = converter_.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\r\n    uint amountRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\r\n\r\n    return _closePositionExact(converter_, collateralAsset, borrowAsset, amountRepay, balanceBefore);\r\n  }\r\n\r\n  /// @notice Close the given position, pay {amountRepay} exactly and ensure that all amount was accepted,\r\n  /// @param amountRepay Amount to repay in terms of {borrowAsset}\r\n  /// @param balanceBorrowAsset Current balance of the borrow asset\r\n  /// @return collateralOut Amount of collateral received back after repaying\r\n  /// @return repaidAmountOut Amount that was actually repaid\r\n  function _closePositionExact(\r\n    ITetuConverter converter_,\r\n    address collateralAsset,\r\n    address borrowAsset,\r\n    uint amountRepay,\r\n    uint balanceBorrowAsset\r\n  ) internal returns (\r\n    uint collateralOut,\r\n    uint repaidAmountOut\r\n  ) {\r\n    if (amountRepay >= AppLib.DUST_AMOUNT_TOKENS) {\r\n      // Make full/partial repayment\r\n      IERC20(borrowAsset).safeTransfer(address(converter_), amountRepay);\r\n\r\n      uint notUsedAmount;\r\n      (collateralOut, notUsedAmount,,) = converter_.repay(collateralAsset, borrowAsset, amountRepay, address(this));\r\n\r\n      emit ClosePosition(collateralAsset, borrowAsset, amountRepay, address(this), collateralOut, notUsedAmount);\r\n      uint balanceAfter = IERC20(borrowAsset).balanceOf(address(this));\r\n\r\n      // we cannot use amountRepay here because AAVE pool adapter is able to send tiny amount back (debt-gap)\r\n      repaidAmountOut = balanceBorrowAsset > balanceAfter\r\n        ? balanceBorrowAsset - balanceAfter\r\n        : 0;\r\n      require(notUsedAmount == 0, StrategyLib2.WRONG_VALUE);\r\n    }\r\n\r\n    return (collateralOut, repaidAmountOut);\r\n  }\r\n\r\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\r\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\r\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\r\n  /// @return repaidAmountOut Amount that was actually repaid\r\n  function closePosition(\r\n    ITetuConverter tetuConverter_,\r\n    address collateralAsset,\r\n    address borrowAsset,\r\n    uint amountToRepay\r\n  ) external returns (\r\n    uint returnedAssetAmountOut,\r\n    uint repaidAmountOut\r\n  ) {\r\n    return _closePosition(tetuConverter_, collateralAsset, borrowAsset, amountToRepay);\r\n  }\r\n//endregion--------------------------------------------------- Borrow and close positions\r\n\r\n//region--------------------------------------------------- Liquidation\r\n\r\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\r\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\r\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\r\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator\r\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\r\n  function liquidate(\r\n    ITetuConverter converter,\r\n    ITetuLiquidator liquidator_,\r\n    address tokenIn_,\r\n    address tokenOut_,\r\n    uint amountIn_,\r\n    uint slippage_,\r\n    uint liquidationThresholdForTokenIn_,\r\n    bool skipValidation\r\n  ) external returns (\r\n    uint spentAmountIn,\r\n    uint receivedAmountOut\r\n  ) {\r\n    return _liquidate(converter, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, liquidationThresholdForTokenIn_, skipValidation);\r\n  }\r\n\r\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\r\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\r\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\r\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator (== 0 | amountIn_)\r\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\r\n  function _liquidate(\r\n    ITetuConverter converter_,\r\n    ITetuLiquidator liquidator_,\r\n    address tokenIn_,\r\n    address tokenOut_,\r\n    uint amountIn_,\r\n    uint slippage_,\r\n    uint liquidationThresholdForTokenIn_,\r\n    bool skipValidation\r\n  ) internal returns (\r\n    uint spentAmountIn,\r\n    uint receivedAmountOut\r\n  ) {\r\n    // we check amountIn by threshold, not amountOut\r\n    // because {_closePositionsToGetAmount} is implemented in {get plan, make action}-way\r\n    // {_closePositionsToGetAmount} can be used with swap by aggregators, where amountOut cannot be calculate\r\n    // at the moment of plan building. So, for uniformity, only amountIn is checked everywhere\r\n\r\n    if (amountIn_ <= liquidationThresholdForTokenIn_) {\r\n      return (0, 0);\r\n    }\r\n\r\n    (ITetuLiquidator.PoolData[] memory route,) = liquidator_.buildRoute(tokenIn_, tokenOut_);\r\n\r\n    require(route.length != 0, AppErrors.NO_LIQUIDATION_ROUTE);\r\n\r\n    // if the expected value is higher than threshold distribute to destinations\r\n    return (amountIn_, _liquidateWithRoute(converter_, route, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, skipValidation));\r\n  }\r\n\r\n  /// @notice Make liquidation using given route and check correctness using TetuConverter's price oracle\r\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\r\n  function _liquidateWithRoute(\r\n    ITetuConverter converter_,\r\n    ITetuLiquidator.PoolData[] memory route,\r\n    ITetuLiquidator liquidator_,\r\n    address tokenIn_,\r\n    address tokenOut_,\r\n    uint amountIn_,\r\n    uint slippage_,\r\n    bool skipValidation\r\n  ) internal returns (\r\n    uint receivedAmountOut\r\n  ) {\r\n    // we need to approve each time, liquidator address can be changed in controller\r\n    AppLib.approveIfNeeded(tokenIn_, amountIn_, address(liquidator_));\r\n\r\n    uint balanceBefore = IERC20(tokenOut_).balanceOf(address(this));\r\n    liquidator_.liquidateWithRoute(route, amountIn_, slippage_);\r\n    uint balanceAfter = IERC20(tokenOut_).balanceOf(address(this));\r\n\r\n    require(balanceAfter > balanceBefore, AppErrors.BALANCE_DECREASE);\r\n    receivedAmountOut = balanceAfter - balanceBefore;\r\n\r\n    // Oracle in TetuConverter \"knows\" only limited number of the assets\r\n    // It may not know prices for reward assets, so for rewards this validation should be skipped to avoid TC-4 error\r\n    require(skipValidation || converter_.isConversionValid(tokenIn_, amountIn_, tokenOut_, receivedAmountOut, slippage_), AppErrors.PRICE_IMPACT);\r\n    emit Liquidation(tokenIn_, tokenOut_, amountIn_, amountIn_, receivedAmountOut);\r\n  }\r\n//endregion--------------------------------------------------- Liquidation\r\n\r\n//region--------------------------------------------------- Recycle rewards\r\n\r\n  /// @notice Recycle the amounts: liquidate a part of each amount, send the other part to the forwarder.\r\n  /// We have two kinds of rewards:\r\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\r\n  /// 2) any other rewards\r\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\r\n  ///   Compound-part of Rewards-2 can be liquidated\r\n  ///   Compound part of Rewards-1 should be just left on the balance\r\n  ///   Performance amounts should be liquidate, result underlying should be sent to performance receiver and insurance.\r\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\r\n  /// @dev {_recycle} is implemented as separate (inline) function to simplify unit testing\r\n  /// @param rewardTokens_ Full list of reward tokens received from tetuConverter and depositor\r\n  /// @param rewardAmounts_ Amounts of {rewardTokens_}; we assume, there are no zero amounts here\r\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\r\n  /// @return amountPerf Performance fee in terms of underlying\r\n  function recycle(\r\n    IStrategyV3.BaseState storage baseState,\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    address[] memory tokens,\r\n    address controller,\r\n    mapping(address => uint) storage liquidationThresholds,\r\n    address[] memory rewardTokens_,\r\n    uint[] memory rewardAmounts_\r\n  ) external returns (uint paidDebtToInsurance, uint amountPerf) {\r\n    RecycleLocal memory v;\r\n    v.asset = baseState.asset;\r\n    v.compoundRatio = baseState.compoundRatio;\r\n    v.performanceFee = baseState.performanceFee;\r\n    v.thresholds = _getLiquidationThresholds(liquidationThresholds, rewardTokens_, rewardTokens_.length);\r\n    v.debtToInsuranceCurrent = csbs.debtToInsurance;\r\n    v.splitter = baseState.splitter;\r\n\r\n    (v.amountsToForward, amountPerf, v.debtToInsuranceUpdated) = _recycle(RecycleParams({\r\n      converter: csbs.converter,\r\n      liquidator: AppLib._getLiquidator(controller),\r\n      asset: v.asset,\r\n      compoundRatio: v.compoundRatio,\r\n      tokens: tokens,\r\n      thresholds: v.thresholds,\r\n      rewardTokens: rewardTokens_,\r\n      rewardAmounts: rewardAmounts_,\r\n      performanceFee: v.performanceFee,\r\n      debtToInsurance: v.debtToInsuranceCurrent,\r\n      splitter: v.splitter,\r\n      assetThreshold: AppLib._getLiquidationThreshold(liquidationThresholds[v.asset])\r\n    }));\r\n\r\n    if (v.debtToInsuranceCurrent != v.debtToInsuranceUpdated) {\r\n      csbs.debtToInsurance = v.debtToInsuranceUpdated;\r\n      emit OnPayDebtToInsurance(v.debtToInsuranceCurrent, v.debtToInsuranceUpdated);\r\n      paidDebtToInsurance = v.debtToInsuranceCurrent - v.debtToInsuranceUpdated > 0\r\n        ? uint(v.debtToInsuranceCurrent - v.debtToInsuranceUpdated)\r\n        : 0;\r\n    }\r\n\r\n    // send performance-part of the underlying to the performance receiver and insurance\r\n    (v.toPerf, v.toInsurance) = _sendPerformanceFee(\r\n      v.asset,\r\n      amountPerf,\r\n      v.splitter,\r\n      baseState.performanceReceiver,\r\n      baseState.performanceFeeRatio\r\n    );\r\n\r\n    // override rewardTokens_, v.amountsToForward by the values actually sent to the forwarder\r\n    (rewardTokens_, v.amountsToForward) = _sendTokensToForwarder(controller, v.splitter, rewardTokens_, v.amountsToForward, v.thresholds);\r\n\r\n    emit Recycle(rewardTokens_, v.amountsToForward, v.toPerf, v.toInsurance);\r\n    return (paidDebtToInsurance, amountPerf);\r\n  }\r\n\r\n  /// @notice Send {amount_} of {asset_} to {receiver_} and insurance\r\n  /// @param asset_ Underlying asset\r\n  /// @param amount_ Amount of underlying asset to be sent to performance+insurance\r\n  /// @param receiver_ Performance receiver\r\n  /// @param ratio [0..100_000], 100_000 - send full amount to perf, 0 - send full amount to the insurance.\r\n  function _sendPerformanceFee(address asset_, uint amount_, address splitter, address receiver_, uint ratio) internal returns (\r\n    uint toPerf,\r\n    uint toInsurance\r\n  ) {\r\n    // read inside lib for reduce contract space in the main contract\r\n    address insurance = address(ITetuVaultV2(ISplitter(splitter).vault()).insurance());\r\n\r\n    toPerf = amount_ * ratio / AppLib.DENOMINATOR;\r\n    toInsurance = amount_ - toPerf;\r\n\r\n    if (toPerf != 0) {\r\n      IERC20(asset_).safeTransfer(receiver_, toPerf);\r\n    }\r\n    if (toInsurance != 0) {\r\n      IERC20(asset_).safeTransfer(insurance, toInsurance);\r\n    }\r\n  }\r\n\r\n  /// @notice Send {amounts_} to forwarder, skip amounts < thresholds (see SCB-812)\r\n  /// @return tokensOut Tokens sent to the forwarder\r\n  /// @return amountsOut Amounts sent to the forwarder\r\n  function _sendTokensToForwarder(\r\n    address controller_,\r\n    address splitter_,\r\n    address[] memory tokens_,\r\n    uint[] memory amounts_,\r\n    uint[] memory thresholds_\r\n  ) internal returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut\r\n  ) {\r\n    uint len = tokens_.length;\r\n    IForwarder forwarder = IForwarder(IController(controller_).forwarder());\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (thresholds_[i] > amounts_[i]) {\r\n        amounts_[i] = 0; // it will be excluded in filterZeroAmounts() below\r\n      } else {\r\n        AppLib.approveIfNeeded(tokens_[i], amounts_[i], address(forwarder));\r\n      }\r\n    }\r\n\r\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokens_, amounts_);\r\n    if (tokensOut.length != 0) {\r\n      forwarder.registerIncome(tokensOut, amountsOut, ISplitter(splitter_).vault(), true);\r\n    }\r\n  }\r\n\r\n  /// @notice Recycle the amounts: split each amount on tree parts: performance+insurance (P), forwarder (F), compound (C)\r\n  ///         Liquidate P+C, send F to the forwarder.\r\n  /// We have two kinds of rewards:\r\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\r\n  /// 2) any other rewards\r\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\r\n  ///   Compound-part of Rewards-2 can be liquidated\r\n  ///   Compound part of Rewards-1 should be just left on the balance\r\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\r\n  ///   Performance amounts are liquidated, result amount of underlying is returned in {amountToPerformanceAndInsurance}\r\n  /// @return amountsToForward Amounts of {rewardTokens} to be sent to forwarder, zero amounts are allowed here\r\n  /// @return amountToPerformanceAndInsurance Amount of underlying to be sent to performance receiver and insurance\r\n  /// @return debtToInsuranceOut Remain debt to the insurance [in underlying]\r\n  function _recycle(RecycleParams memory p) internal returns (\r\n    uint[] memory amountsToForward,\r\n    uint amountToPerformanceAndInsurance,\r\n    int debtToInsuranceOut\r\n  ) {\r\n    RecycleLocalParams memory v;\r\n\r\n    v.len = p.rewardTokens.length;\r\n    require(v.len == p.rewardAmounts.length, AppErrors.WRONG_LENGTHS);\r\n\r\n    amountsToForward = new uint[](v.len);\r\n\r\n    // rewardAmounts => P + F + C, where P - performance + insurance, F - forwarder, C - compound\r\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\r\n      // if we have a debt-to-insurance we should firstly cover the debt using all available rewards\r\n      // and only then we can use leftovers of the rewards for other needs\r\n      if (p.debtToInsurance > int(p.assetThreshold)) {\r\n        (p.rewardAmounts[i], p.debtToInsurance) = _coverDebtToInsuranceFromRewards(p, i, uint(p.debtToInsurance));\r\n        if (p.rewardAmounts[i] < p.thresholds[i]) continue;\r\n      }\r\n\r\n      v.amountFC = p.rewardAmounts[i] * (COMPOUND_DENOMINATOR - p.performanceFee) / COMPOUND_DENOMINATOR;\r\n      v.amountC = v.amountFC * p.compoundRatio / COMPOUND_DENOMINATOR;\r\n      v.amountP = p.rewardAmounts[i] - v.amountFC;\r\n      v.rewardToken = p.rewardTokens[i];\r\n      v.amountCP = v.amountC + v.amountP;\r\n\r\n      if (v.amountCP > 0) {\r\n        if (AppLib.getAssetIndex(p.tokens, v.rewardToken) != type(uint).max) {\r\n          if (v.rewardToken == p.asset) {\r\n            // This is underlying, liquidation of compound part is not allowed; just keep on the balance, should be handled later\r\n            amountToPerformanceAndInsurance += v.amountP;\r\n          } else {\r\n            // This is secondary asset, Liquidation of compound part is not allowed, we should liquidate performance part only\r\n            // If the performance amount is too small, liquidation will not happen and we will just keep that dust tokens on balance forever\r\n            (, v.receivedAmountOut) = _liquidate(\r\n              p.converter,\r\n              p.liquidator,\r\n              v.rewardToken,\r\n              p.asset,\r\n              v.amountP,\r\n              _REWARD_LIQUIDATION_SLIPPAGE,\r\n              p.thresholds[i],\r\n              false // use conversion validation for these rewards\r\n            );\r\n            amountToPerformanceAndInsurance += v.receivedAmountOut;\r\n          }\r\n        } else {\r\n          // If amount is too small, the liquidation won't be allowed and we will just keep that dust tokens on balance forever\r\n          // The asset is not in the list of depositor's assets, its amount is big enough and should be liquidated\r\n          // We assume here, that {token} cannot be equal to {_asset}\r\n          // because the {_asset} is always included to the list of depositor's assets\r\n          (, v.receivedAmountOut) = _liquidate(\r\n            p.converter,\r\n            p.liquidator,\r\n            v.rewardToken,\r\n            p.asset,\r\n            v.amountCP,\r\n            _REWARD_LIQUIDATION_SLIPPAGE,\r\n            p.thresholds[i],\r\n            true // skip conversion validation for rewards because we can have arbitrary assets here\r\n          );\r\n          amountToPerformanceAndInsurance += v.receivedAmountOut * (p.rewardAmounts[i] - v.amountFC) / v.amountCP;\r\n        }\r\n      }\r\n      amountsToForward[i] = v.amountFC - v.amountC;\r\n    }\r\n\r\n    return (amountsToForward, amountToPerformanceAndInsurance, p.debtToInsurance);\r\n  }\r\n\r\n  /// @notice Try to cover {p.debtToInsurance} using available rewards of {p.rewardTokens[index]}\r\n  /// @param index Index of the reward token in {p.rewardTokens}\r\n  /// @param debtAmount Debt to insurance that should be covered by the reward tokens\r\n  /// @return rewardsLeftovers Amount of unused reward tokens (it can be used for other needs)\r\n  /// @return debtToInsuranceOut New value of the debt to the insurance\r\n  function _coverDebtToInsuranceFromRewards(RecycleParams memory p, uint index, uint debtAmount) internal returns (\r\n    uint rewardsLeftovers,\r\n    int debtToInsuranceOut\r\n  ) {\r\n    uint spentAmount;\r\n    uint amountToSend;\r\n\r\n    if (p.asset == p.rewardTokens[index]) {\r\n      // assume p.debtToInsurance > 0 here\r\n      spentAmount = Math.min(debtAmount, p.rewardAmounts[index]);\r\n      amountToSend = spentAmount;\r\n    } else {\r\n      // estimate amount of underlying that we can receive for the available amount of the reward tokens\r\n      uint amountAsset = p.rewardAmounts[index] > p.assetThreshold\r\n        ? p.liquidator.getPrice(p.rewardTokens[index], p.asset, p.rewardAmounts[index])\r\n        : 0;\r\n      uint amountIn;\r\n\r\n      if (amountAsset > debtAmount + p.assetThreshold) {\r\n        // pay a part of the rewards to cover the debt completely\r\n        amountIn = p.rewardAmounts[index] * debtAmount / amountAsset;\r\n      } else {\r\n        // pay all available rewards to cover a part of the debt\r\n        amountIn = p.rewardAmounts[index];\r\n      }\r\n\r\n      (spentAmount, amountToSend) = _liquidate(\r\n        p.converter,\r\n        p.liquidator,\r\n        p.rewardTokens[index],\r\n        p.asset,\r\n        amountIn,\r\n        _REWARD_LIQUIDATION_SLIPPAGE,\r\n        p.thresholds[index],\r\n        true // skip conversion validation for rewards because we can have arbitrary assets here\r\n      );\r\n    }\r\n\r\n    IERC20(p.asset).safeTransfer(address(ITetuVaultV2(ISplitter(p.splitter).vault()).insurance()), amountToSend);\r\n\r\n    rewardsLeftovers = AppLib.sub0(p.rewardAmounts[index], spentAmount);\r\n    debtToInsuranceOut = int(debtAmount) - int(amountToSend);\r\n\r\n    emit OnCoverDebtToInsurance(p.rewardTokens[index], spentAmount, debtAmount, debtToInsuranceOut);\r\n  }\r\n//endregion----------------------------------------------- Recycle rewards\r\n\r\n//region--------------------------------------------------- Before deposit\r\n  /// @notice Default implementation of ConverterStrategyBase.beforeDeposit\r\n  /// @param amount_ Amount of underlying to be deposited\r\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\r\n  /// @param indexAsset_ Index of main {asset} in {tokens}\r\n  /// @param weights_ Depositor pool weights\r\n  /// @param totalWeight_ Sum of {weights_}\r\n  function beforeDeposit(\r\n    ITetuConverter converter_,\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint indexAsset_,\r\n    uint[] memory weights_,\r\n    uint totalWeight_,\r\n    mapping(address => uint) storage liquidationThresholds\r\n  ) external returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    // temporary save collateral to tokensAmounts\r\n    tokenAmounts = _getCollaterals(amount_, tokens_, weights_, totalWeight_, indexAsset_, AppLib._getPriceOracle(converter_));\r\n\r\n    // make borrow and save amounts of tokens available for deposit to tokenAmounts, zero result amounts are possible\r\n    tokenAmounts = _getTokenAmounts(\r\n      converter_,\r\n      tokens_,\r\n      indexAsset_,\r\n      tokenAmounts,\r\n      AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[indexAsset_]])\r\n    );\r\n  }\r\n\r\n  /// @notice For each {token_} calculate a part of {amount_} to be used as collateral according to the weights.\r\n  ///         I.e. we have 300 USDC, we need to split it on 100 USDC, 100 USDT, 100 DAI\r\n  ///         USDC is main asset, USDT and DAI should be borrowed. We check amounts of USDT and DAI on the balance\r\n  ///         and return collaterals reduced on that amounts. For main asset, we return full amount always (100 USDC).\r\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\r\n  /// @param indexAsset_ Index of main {asset} in {tokens}\r\n  /// @return tokenAmountsOut Length of the array is equal to the length of {tokens_}\r\n  function _getCollaterals(\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint[] memory weights_,\r\n    uint totalWeight_,\r\n    uint indexAsset_,\r\n    IPriceOracle priceOracle\r\n  ) internal view returns (\r\n    uint[] memory tokenAmountsOut\r\n  ) {\r\n    uint len = tokens_.length;\r\n    tokenAmountsOut = new uint[](len);\r\n\r\n    // get token prices and decimals\r\n    (uint[] memory prices, uint[] memory decs) = AppLib._getPricesAndDecs(priceOracle, tokens_, len);\r\n\r\n    // split the amount on tokens proportionally to the weights\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      uint amountAssetForToken = amount_ * weights_[i] / totalWeight_;\r\n\r\n      if (i == indexAsset_) {\r\n        tokenAmountsOut[i] = amountAssetForToken;\r\n      } else {\r\n        // if we have some tokens on balance then we need to use only a part of the collateral\r\n        uint tokenAmountToBeBorrowed = amountAssetForToken\r\n          * prices[indexAsset_]\r\n          * decs[i]\r\n          / prices[i]\r\n          / decs[indexAsset_];\r\n\r\n        uint tokenBalance = IERC20(tokens_[i]).balanceOf(address(this));\r\n        if (tokenBalance < tokenAmountToBeBorrowed) {\r\n          tokenAmountsOut[i] = amountAssetForToken * (tokenAmountToBeBorrowed - tokenBalance) / tokenAmountToBeBorrowed;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Make borrow and return amounts of {tokens} available to deposit\r\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\r\n  /// @param indexAsset_ Index of main {asset} in {tokens}\r\n  /// @param collaterals_ Amounts of main asset that can be used as collateral to borrow {tokens_}\r\n  /// @param thresholdAsset_ Value of liquidation threshold for the main (collateral) asset\r\n  /// @return tokenAmountsOut Amounts of {tokens}  available to deposit\r\n  function _getTokenAmounts(\r\n    ITetuConverter converter_,\r\n    address[] memory tokens_,\r\n    uint indexAsset_,\r\n    uint[] memory collaterals_,\r\n    uint thresholdAsset_\r\n  ) internal returns (\r\n    uint[] memory tokenAmountsOut\r\n  ) {\r\n    // content of tokenAmounts will be modified in place\r\n    uint len = tokens_.length;\r\n    tokenAmountsOut = new uint[](len);\r\n    address asset = tokens_[indexAsset_];\r\n\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (i != indexAsset_) {\r\n        address token = tokens_[i];\r\n        if (collaterals_[i] != 0) {\r\n          AppLib.approveIfNeeded(asset, collaterals_[i], address(converter_));\r\n          _openPosition(\r\n            converter_,\r\n            \"\", // entry kind = 0: fixed collateral amount, max possible borrow amount\r\n            asset,\r\n            token,\r\n            collaterals_[i],\r\n            thresholdAsset_\r\n          );\r\n\r\n          // zero borrowed amount is possible here (conversion is not available)\r\n          // if it's not suitable for depositor, the depositor should check zero amount in other places\r\n        }\r\n        tokenAmountsOut[i] = IERC20(token).balanceOf(address(this));\r\n      }\r\n    }\r\n\r\n    tokenAmountsOut[indexAsset_] = Math.min(\r\n      collaterals_[indexAsset_],\r\n      IERC20(asset).balanceOf(address(this))\r\n    );\r\n  }\r\n//endregion--------------------------------------------------- Before deposit\r\n\r\n//region--------------------------------------------------- Make requested amount\r\n\r\n  /// @notice Convert {amountsToConvert_} to the given {asset}\r\n  ///         Swap leftovers (if any) to the given asset.\r\n  ///         If result amount is less than expected, try to close any other available debts (1 repay per block only)\r\n  /// @param tokens_ Results of _depositorPoolAssets() call (list of depositor's asset in proper order)\r\n  /// @param indexAsset_ Index of the given {asset} in {tokens}\r\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\r\n  ///                         Max uint means attempt to withdraw all possible amount.\r\n  /// @return expectedBalance Expected asset balance after all swaps and repays\r\n  function makeRequestedAmount(\r\n    address[] memory tokens_,\r\n    uint indexAsset_,\r\n    ITetuConverter converter_,\r\n    ITetuLiquidator liquidator_,\r\n    uint requestedBalance,\r\n    mapping(address => uint) storage liquidationThresholds_\r\n  ) external returns (uint expectedBalance) {\r\n    DataSetLocal memory v = DataSetLocal({\r\n      len: tokens_.length,\r\n      converter: converter_,\r\n      tokens: tokens_,\r\n      indexAsset: indexAsset_,\r\n      liquidator: liquidator_\r\n    });\r\n    uint[] memory _liquidationThresholds = _getLiquidationThresholds(liquidationThresholds_, v.tokens, v.len);\r\n    expectedBalance = _closePositionsToGetAmount(v, _liquidationThresholds, requestedBalance);\r\n  }\r\n  //endregion-------------------------------------------- Make requested amount\r\n\r\n//region ------------------------------------------------ Close position\r\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\r\n  /// @dev We assume here that this function is called before closing any positions in the current block\r\n  /// @param liquidationThresholds Min allowed amounts-out for liquidations\r\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\r\n  ///                         Max uint means attempt to withdraw all possible amount.\r\n  /// @return expectedBalance Expected asset balance after all swaps and repays\r\n  function closePositionsToGetAmount(\r\n    ITetuConverter converter_,\r\n    ITetuLiquidator liquidator,\r\n    uint indexAsset,\r\n    mapping(address => uint) storage liquidationThresholds,\r\n    uint requestedBalance,\r\n    address[] memory tokens\r\n  ) external returns (\r\n    uint expectedBalance\r\n  ) {\r\n    uint len = tokens.length;\r\n    return _closePositionsToGetAmount(\r\n      DataSetLocal({\r\n        len: len,\r\n        converter: converter_,\r\n        tokens: tokens,\r\n        indexAsset: indexAsset,\r\n        liquidator: liquidator\r\n      }),\r\n      _getLiquidationThresholds(liquidationThresholds, tokens, len),\r\n      requestedBalance\r\n    );\r\n  }\r\n\r\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\r\n  /// @dev Implements {IterationPlanLib.PLAN_SWAP_REPAY} only\r\n  ///      Note: AAVE3 allows to make two repays in a single block, see Aave3SingleBlockTest in TetuConverter\r\n  ///      but it doesn't allow to make borrow and repay in a single block.\r\n  /// @param liquidationThresholds_ Min allowed amounts-out for liquidations\r\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\r\n  ///                         Max uint means attempt to withdraw all possible amount.\r\n  /// @return expectedBalance Expected asset balance after all swaps and repays\r\n  function _closePositionsToGetAmount(\r\n    DataSetLocal memory d_,\r\n    uint[] memory liquidationThresholds_,\r\n    uint requestedBalance\r\n  ) internal returns (\r\n    uint expectedBalance\r\n  ) {\r\n    if (requestedBalance != 0) {\r\n      //let's get a bit more amount on balance to prevent situation \"zero balance, not-zero debts\"\r\n      requestedBalance = applyRequestedBalanceGap(requestedBalance);\r\n      CloseDebtsForRequiredAmountLocal memory v;\r\n      v.asset = d_.tokens[d_.indexAsset];\r\n\r\n      // v.planKind = IterationPlanLib.PLAN_SWAP_REPAY; // PLAN_SWAP_REPAY == 0, so we don't need this line\r\n      v.balanceAdditions = new uint[](d_.len);\r\n      expectedBalance = IERC20(v.asset).balanceOf(address(this));\r\n\r\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(d_.converter), d_.tokens, d_.len);\r\n\r\n      for (uint i; i < d_.len; i = AppLib.uncheckedInc(i)) {\r\n        if (i == d_.indexAsset) continue;\r\n\r\n        v.balanceAsset = IERC20(v.asset).balanceOf(address(this));\r\n        v.balanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\r\n\r\n        // Make one or several iterations. Do single swap and single repaying (both are optional) on each iteration.\r\n        // Calculate expectedAmount of received underlying. Swap leftovers at the end even if requestedAmount is 0 at that moment.\r\n        do {\r\n          // generate iteration plan: [swap], [repay]\r\n          (v.idxToSwap1, v.amountToSwap, v.idxToRepay1) = IterationPlanLib.buildIterationPlan(\r\n            [address(d_.converter), address(d_.liquidator)],\r\n            d_.tokens,\r\n            liquidationThresholds_,\r\n            v.prices,\r\n            v.decs,\r\n            v.balanceAdditions,\r\n            [0, IterationPlanLib.PLAN_SWAP_REPAY, 0, requestedBalance, d_.indexAsset, i, 0]\r\n          );\r\n          if (v.idxToSwap1 == 0 && v.idxToRepay1 == 0) break;\r\n\r\n          // make swap if necessary\r\n          uint spentAmountIn;\r\n          if (v.idxToSwap1 != 0) {\r\n            uint indexIn = v.idxToSwap1 - 1;\r\n            uint indexOut = indexIn == d_.indexAsset ? i : d_.indexAsset;\r\n            (spentAmountIn,) = _liquidate(\r\n              d_.converter,\r\n              d_.liquidator,\r\n              d_.tokens[indexIn],\r\n              d_.tokens[indexOut],\r\n              v.amountToSwap,\r\n              _ASSET_LIQUIDATION_SLIPPAGE,\r\n              liquidationThresholds_[indexIn],\r\n              false\r\n            );\r\n\r\n            if (indexIn == d_.indexAsset) {\r\n              expectedBalance = AppLib.sub0(expectedBalance, spentAmountIn);\r\n            } else if (indexOut == d_.indexAsset) {\r\n              expectedBalance += spentAmountIn * v.prices[i] * v.decs[d_.indexAsset] / v.prices[d_.indexAsset] / v.decs[i];\r\n\r\n              // if we already received enough amount on balance, we can avoid additional actions\r\n              // to avoid high gas consumption in the cases like SCB-787\r\n              uint balanceAsset = IERC20(v.asset).balanceOf(address(this));\r\n              if (balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) {\r\n                v.balanceAsset = balanceAsset;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          // repay a debt if necessary\r\n          if (v.idxToRepay1 != 0) {\r\n            uint indexBorrow = v.idxToRepay1 - 1;\r\n            uint indexCollateral = indexBorrow == d_.indexAsset ? i : d_.indexAsset;\r\n            uint amountToRepay = IERC20(d_.tokens[indexBorrow]).balanceOf(address(this));\r\n\r\n            (uint expectedAmountOut, uint repaidAmountOut, uint amountSendToRepay) = _repayDebt(\r\n              d_.converter,\r\n              d_.tokens[indexCollateral],\r\n              d_.tokens[indexBorrow],\r\n              amountToRepay\r\n            );\r\n\r\n            if (indexBorrow == d_.indexAsset) {\r\n              expectedBalance = expectedBalance > amountSendToRepay\r\n                ? expectedBalance - amountSendToRepay\r\n                : 0;\r\n            } else if (indexCollateral == d_.indexAsset) {\r\n              require(expectedAmountOut >= spentAmountIn, AppErrors.BALANCE_DECREASE);\r\n              if (repaidAmountOut < amountSendToRepay) {\r\n                // SCB-779: expectedAmountOut was estimated for amountToRepay, but we have paid repaidAmountOut only\r\n                expectedBalance += expectedAmountOut * repaidAmountOut / amountSendToRepay;\r\n              } else {\r\n                expectedBalance += expectedAmountOut;\r\n              }\r\n            }\r\n          }\r\n\r\n          // update balances\r\n          v.newBalanceAsset = IERC20(v.asset).balanceOf(address(this));\r\n          v.newBalanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\r\n\r\n          v.exitLoop = (v.balanceAsset == v.newBalanceAsset && v.balanceToken == v.newBalanceToken);\r\n          v.balanceAsset = v.newBalanceAsset;\r\n          v.balanceToken = v.newBalanceToken;\r\n        } while (!v.exitLoop);\r\n\r\n        if (v.balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) break;\r\n      }\r\n    }\r\n\r\n    return expectedBalance;\r\n  }\r\n//endregion ------------------------------------------------ Close position\r\n\r\n//region ------------------------------------------------ Repay debts\r\n  /// @notice Repay {amountIn} and get collateral in return, calculate expected amount\r\n  ///         Take into account possible debt-gap and the fact that the amount of debt may be less than {amountIn}\r\n  /// @param amountToRepay Max available amount of borrow asset that we can repay\r\n  /// @return expectedAmountOut Estimated amount of main asset that should be added to balance = collateral - {toSell}\r\n  /// @return repaidAmountOut Actually paid amount\r\n  /// @return amountSendToRepay Amount send to repay\r\n  function _repayDebt(\r\n    ITetuConverter converter,\r\n    address collateralAsset,\r\n    address borrowAsset,\r\n    uint amountToRepay\r\n  ) internal returns (\r\n    uint expectedAmountOut,\r\n    uint repaidAmountOut,\r\n    uint amountSendToRepay\r\n  ) {\r\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\r\n\r\n    // get amount of debt with debt-gap\r\n    (uint needToRepay,) = converter.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\r\n    amountSendToRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\r\n\r\n    // get expected amount without debt-gap\r\n    uint swappedAmountOut;\r\n    (expectedAmountOut, swappedAmountOut) = converter.quoteRepay(address(this), collateralAsset, borrowAsset, amountSendToRepay);\r\n\r\n    if (expectedAmountOut > swappedAmountOut) {\r\n      // SCB-789 Following situation is possible\r\n      //    needToRepay = 100, needToRepayExact = 90 (debt gap is 10)\r\n      //    1) amountRepay = 80\r\n      //       expectedAmountOut is calculated for 80, no problems\r\n      //    2) amountRepay = 99,\r\n      //       expectedAmountOut is calculated for 90 + 9 (90 - repay, 9 - direct swap)\r\n      //       expectedAmountOut must be reduced on 9 here (!)\r\n      expectedAmountOut -= swappedAmountOut;\r\n    }\r\n\r\n    // close the debt\r\n    (, repaidAmountOut) = _closePositionExact(converter, collateralAsset, borrowAsset, amountSendToRepay, balanceBefore);\r\n\r\n    return (expectedAmountOut, repaidAmountOut, amountSendToRepay);\r\n  }\r\n  //endregion ------------------------------------------------ Repay debts\r\n\r\n//region------------------------------------------------ Other helpers\r\n\r\n  /// @return liquidationThresholdsOut Liquidation thresholds of the {tokens_}, result values > 0\r\n  function _getLiquidationThresholds(\r\n    mapping(address => uint) storage liquidationThresholds,\r\n    address[] memory tokens_,\r\n    uint len\r\n  ) internal view returns (\r\n    uint[] memory liquidationThresholdsOut\r\n  ) {\r\n    liquidationThresholdsOut = new uint[](len);\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      liquidationThresholdsOut[i] = AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[i]]);\r\n    }\r\n  }\r\n\r\n  function applyRequestedBalanceGap(uint amount_) internal pure returns (uint) {\r\n    return amount_ == type(uint).max\r\n      ? amount_\r\n      : amount_ * (COMPOUND_DENOMINATOR + REQUESTED_BALANCE_GAP) / COMPOUND_DENOMINATOR;\r\n  }\r\n//endregion--------------------------------------------- Other helpers\r\n}\r\n\r\n"
    },
    "contracts/strategies/ConverterStrategyBaseLib2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IBookkeeper.sol\";\r\nimport \"../libs/AppErrors.sol\";\r\nimport \"../libs/AppLib.sol\";\r\nimport \"../libs/TokenAmountsLib.sol\";\r\nimport \"../libs/ConverterEntryKinds.sol\";\r\nimport \"../interfaces/IConverterStrategyBase.sol\";\r\n\r\n/// @notice Continuation of ConverterStrategyBaseLib (workaround for size limits)\r\nlibrary ConverterStrategyBaseLib2 {\r\n  using SafeERC20 for IERC20;\r\n\r\n//region --------------------------------------- Data types\r\n  struct CalcInvestedAssetsLocal {\r\n    uint len;\r\n    uint[] debts;\r\n    address asset;\r\n    address token;\r\n  }\r\n//endregion --------------------------------------- Data types\r\n\r\n//region --------------------------------------- CONSTANTS\r\n  uint internal constant DENOMINATOR = 100_000;\r\n\r\n  /// @dev 0.5% of max loss for strategy TVL\r\n  /// @notice Same value as StrategySplitterV2.HARDWORK_LOSS_TOLERANCE\r\n  uint public constant HARDWORK_LOSS_TOLERANCE = 500;\r\n\r\n  /// @dev 0.5% of max profit for strategy TVL\r\n  /// @notice Limit max amount of profit that can be send to insurance after price changing\r\n  uint public constant PRICE_CHANGE_PROFIT_TOLERANCE = HARDWORK_LOSS_TOLERANCE;\r\n\r\n//endregion --------------------------------------- CONSTANTS\r\n\r\n//region----------------------------------------- EVENTS\r\n  event LiquidationThresholdChanged(address token, uint amount);\r\n  event ReinvestThresholdPercentChanged(uint amount);\r\n  event SendToInsurance(uint sentAmount, uint unsentAmount);\r\n\r\n  /// @notice Increase to debts between new and previous checkpoints.\r\n  /// @param tokens List of possible collateral/borrow assets. One of the is underlying.\r\n  /// @param deltaGains Amounts by which the debt has reduced (supply profit) [sync with {tokens}]\r\n  /// @param deltaLosses Amounts by which the debt has increased (increase of amount-to-pay) [sync with {tokens}]\r\n  /// @param prices Prices of the {tokens}\r\n  /// @param increaseToDebt Total amount of increasing of the debt to the insurance in underlying\r\n  event OnIncreaseDebtToInsurance(\r\n    address[] tokens,\r\n    uint[] deltaGains,\r\n    uint[] deltaLosses,\r\n    uint[] prices,\r\n    int increaseToDebt\r\n  );\r\n\r\n  /// @param debtToInsuranceBefore Value of the debt to insurance before fix price change\r\n  /// @param debtToInsuranceAfter New value of the debt to insurance\r\n  /// @param increaseToDebt Amount on which debt to insurance was increased.\r\n  /// Actual value {debtToInsuranceAfter}-{debtToInsuranceBefore} can be less than increaseToDebt\r\n  /// because some amount can be left uncovered.\r\n  event FixPriceChanges(\r\n    uint investedAssetsBefore,\r\n    uint investedAssetsOut,\r\n    int debtToInsuranceBefore,\r\n    int debtToInsuranceAfter,\r\n    int increaseToDebt\r\n  );\r\n\r\n  /// @param lossToCover Amount of loss that should be covered (it fits to allowed limits, no revert)\r\n  /// @param debtToInsuranceInc The amount by which the debt to insurance increases\r\n  /// @param amountCovered Actually covered amount of loss. If amountCovered < lossToCover => the insurance is not enough\r\n  /// @param lossUncovered Amount of uncovered losses (not enough insurance)\r\n  event OnCoverLoss(\r\n    uint lossToCover,\r\n    int debtToInsuranceInc,\r\n    uint amountCovered,\r\n    uint lossUncovered\r\n  );\r\n\r\n  /// @notice Value of {debtToInsurance} was increased on {increaseToDebt} inside fix-price-change\r\n  /// in the case when invested-asset amounts were increased.\r\n  /// @dev See comments in {_coverLossAfterPriceChanging}: actual profit-to-cover amount can be less than {increaseToDebt}\r\n  /// @param debtToInsuranceBefore Value of debtToInsurance before fix-price-change\r\n  /// @param increaseToDebt Value on which {debtToInsuranceBefore} was incremented\r\n  event ChangeDebtToInsuranceOnProfit(\r\n    int debtToInsuranceBefore,\r\n    int increaseToDebt\r\n  );\r\n\r\n  /// @notice Amount {lossCovered}+{lossUncovered} should be covered, but it's too high and will produce revert\r\n  /// on the splitter side. So, only {lossCovered} can be covered, {lossUncovered} are not covered\r\n  event UncoveredLoss(uint lossCovered, uint lossUncovered, uint investedAssetsBefore, uint investedAssetsAfter);\r\n\r\n  /// @notice Register amounts received for supplying collaterals and amount paid for the debts\r\n  /// @param gains Amount received by all pool adapters for the provided collateral, in underlying\r\n  /// @param losses Amount paid by all pool adapters for the debts, in underlying\r\n  event BorrowResults(uint gains, uint losses);\r\n\r\n  /// @notice An amount (earned - earnedByPrice) is earned on withdraw and sent to the insurance\r\n  /// @dev We assume that earned > earnedByPrice, but it's better to save raw values\r\n  event OnEarningOnWithdraw(uint earned, uint earnedByPrice);\r\n\r\n//endregion----------------------------------------- EVENTS\r\n\r\n//region----------------------------------------- MAIN LOGIC\r\n  /// @notice Get balances of the {tokens_} except balance of the token at {indexAsset} position\r\n  function getAvailableBalances(\r\n    address[] memory tokens_,\r\n    uint indexAsset\r\n  ) external view returns (uint[] memory) {\r\n    uint len = tokens_.length;\r\n    uint[] memory amountsToConvert = new uint[](len);\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == indexAsset) continue;\r\n      amountsToConvert[i] = IERC20(tokens_[i]).balanceOf(address(this));\r\n    }\r\n    return amountsToConvert;\r\n  }\r\n\r\n\r\n  /// @notice Calculate amount of liquidity that should be withdrawn from the pool to get {targetAmount_}\r\n  ///               liquidityAmount = _depositorLiquidity() * {liquidityRatioOut} / 1e18\r\n  ///         User needs to withdraw {targetAmount_} in some asset.\r\n  ///         There are three kinds of available liquidity:\r\n  ///         1) liquidity in the pool - {depositorLiquidity_}\r\n  ///         2) Converted amounts on balance of the strategy - {baseAmounts_}\r\n  ///         3) Liquidity locked in the debts.\r\n  /// @param targetAmount Required amount of main asset to be withdrawn from the strategy; type(uint).max - withdraw all\r\n  /// @param quoteAmounts Results of _depositorQuoteExit(depositorLiquidity)\r\n  /// @return resultAmount Amount of liquidity that should be withdrawn from the pool, cannot exceed depositorLiquidity\r\n  function getLiquidityAmount(\r\n    uint targetAmount,\r\n    address[] memory tokens,\r\n    uint indexAsset,\r\n    ITetuConverter converter,\r\n    uint[] memory quoteAmounts,\r\n    uint depositorLiquidity,\r\n    uint indexUnderlying\r\n  ) external view returns (\r\n    uint resultAmount\r\n  ) {\r\n    // total amount of assetsInPool recalculated to the underlying\r\n    // we need to calculate this value in the case of partial withdraw only\r\n    // so we assume below that it is equal to 0 if full withdraw is required\r\n    uint totalUnderlying;\r\n\r\n    if (targetAmount != type(uint).max) {\r\n      // reduce targetAmount_ on the amounts of not-underlying assets available on the balance\r\n      uint len = tokens.length;\r\n      (uint[] memory prices, uint[] memory decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(converter), tokens, len);\r\n\r\n      // calculate total amount of assets invested to the pool\r\n      for (uint i; i < tokens.length; i = AppLib.uncheckedInc(i)) {\r\n        totalUnderlying += (indexAsset == i)\r\n          ? quoteAmounts[i]\r\n          : quoteAmounts[i] * prices[i] * decs[indexUnderlying] / prices[indexUnderlying] / decs[i];\r\n      }\r\n\r\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n        // assume here that the targetAmount_ is already reduced on available balance of the target asset\r\n        if (indexAsset == i) continue;\r\n\r\n        uint tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\r\n        if (tokenBalance != 0) {\r\n          uint tokenBalanceInAsset = tokenBalance * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\r\n\r\n          targetAmount = targetAmount > tokenBalanceInAsset\r\n            ? targetAmount - tokenBalanceInAsset\r\n            : 0;\r\n\r\n          uint tokenBalanceInUnderlying = indexUnderlying == indexAsset\r\n            ? tokenBalanceInAsset\r\n            : tokenBalance * prices[i] * decs[indexUnderlying] / prices[indexUnderlying] / decs[i];\r\n\r\n          totalUnderlying = totalUnderlying > tokenBalanceInUnderlying\r\n            ? totalUnderlying - tokenBalanceInUnderlying\r\n            : 0;\r\n        }\r\n      }\r\n\r\n      if (indexAsset != indexUnderlying) {\r\n        // convert targetAmount_ to underlying\r\n        targetAmount =  targetAmount * prices[indexAsset] * decs[indexUnderlying] / prices[indexUnderlying] / decs[indexAsset];\r\n      }\r\n    }\r\n\r\n    uint liquidityRatioOut = totalUnderlying == 0\r\n      ? 1e18\r\n      : ((targetAmount == 0)\r\n        ? 0\r\n        : 1e18 * 101 * targetAmount / totalUnderlying / 100 // a part of amount that we are going to withdraw + 1% on top\r\n      );\r\n\r\n    resultAmount = liquidityRatioOut == 0\r\n      ? 0\r\n      : Math.min(liquidityRatioOut * depositorLiquidity / 1e18, depositorLiquidity);\r\n  }\r\n\r\n  /// @notice Claim rewards from tetuConverter, generate result list of all available rewards and airdrops\r\n  /// @dev The post-processing is rewards conversion to the main asset\r\n  /// @param tokens_ tokens received from {_depositorPoolAssets}\r\n  /// @param rewardTokens_ List of rewards claimed from the internal pool\r\n  /// @param rewardTokens_ Amounts of rewards claimed from the internal pool\r\n  /// @param tokensOut List of available rewards - not zero amounts, reward tokens don't repeat\r\n  /// @param amountsOut Amounts of available rewards\r\n  function claimConverterRewards(\r\n    ITetuConverter converter_,\r\n    address[] memory tokens_,\r\n    address[] memory rewardTokens_,\r\n    uint[] memory rewardAmounts_,\r\n    uint[] memory balancesBefore\r\n  ) external returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut\r\n  ) {\r\n    // Rewards from TetuConverter\r\n    (address[] memory tokensTC, uint[] memory amountsTC) = converter_.claimRewards(address(this));\r\n\r\n    // Join arrays and recycle tokens\r\n    (tokensOut, amountsOut) = TokenAmountsLib.combineArrays(\r\n      rewardTokens_, rewardAmounts_,\r\n      tokensTC, amountsTC,\r\n      // by default, depositor assets have zero amounts here\r\n      tokens_, new uint[](tokens_.length)\r\n    );\r\n\r\n    // set fresh balances for depositor tokens\r\n    uint len = tokensOut.length;\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      for (uint j; j < tokens_.length; j = AppLib.uncheckedInc(j)) {\r\n        if (tokensOut[i] == tokens_[j]) {\r\n          amountsOut[i] = IERC20(tokens_[j]).balanceOf(address(this)) - balancesBefore[j];\r\n        }\r\n      }\r\n    }\r\n\r\n    // filter zero amounts out\r\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokensOut, amountsOut);\r\n  }\r\n\r\n  /// @notice Get price of {tokenB} in term of {tokenA} with 18 decimals\r\n  function getOracleAssetsPrice(ITetuConverter converter, address tokenA, address tokenB) external view returns (\r\n    uint price\r\n  ) {\r\n    IPriceOracle oracle = AppLib._getPriceOracle(converter);\r\n    uint priceA = oracle.getAssetPrice(tokenA);\r\n    uint priceB = oracle.getAssetPrice(tokenB);\r\n    price = priceA > 0 ? 1e18 * priceB / priceA : type(uint).max;\r\n  }\r\n\r\n  function getAssetPriceFromConverter(ITetuConverter converter, address token) external view returns (uint) {\r\n    return AppLib._getPriceOracle(converter).getAssetPrice(token);\r\n  }\r\n\r\n  /// @notice Try to find zero amount\r\n  /// @return True if {amounts_} array contains zero amount\r\n  function findZeroAmount(uint[] memory amounts_) internal pure returns (bool) {\r\n    uint len = amounts_.length;\r\n    for (uint i = 0; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (amounts_[i] == 0) return true;\r\n    }\r\n    return false;\r\n  }\r\n//endregion ----------------------------------------- MAIN LOGIC\r\n\r\n//region -------------------------------------------- Cover loss, send profit to insurance\r\n  /// @notice Send given {amount} of {asset} (== underlying) to the insurance\r\n  /// @param totalAssets_ Total strategy balance = balance of underlying + current invested assets amount\r\n  /// @param balance Current balance of the underlying\r\n  /// @return sentAmount Amount of underlying sent to the insurance\r\n  /// @return unsentAmount Missed part of the {amount} that were not sent to the insurance\r\n  function sendToInsurance(address asset, uint amount, address splitter, uint totalAssets_, uint balance) external returns (\r\n    uint sentAmount,\r\n    uint unsentAmount\r\n  ) {\r\n    return _sendToInsurance(asset, amount, splitter, totalAssets_, balance);\r\n  }\r\n\r\n  function _sendToInsurance(address asset, uint amount, address splitter, uint totalAssets_, uint balance) internal returns (\r\n    uint sentAmount,\r\n    uint unsentAmount\r\n  ) {\r\n    uint amountToSend = Math.min(amount, balance);\r\n    if (amountToSend != 0) {\r\n      // max amount that can be send to insurance is limited by PRICE_CHANGE_PROFIT_TOLERANCE\r\n\r\n      // Amount limitation should be implemented in the same way as in StrategySplitterV2._coverLoss\r\n      // Revert or cut amount in both cases\r\n\r\n      require(totalAssets_ != 0, AppErrors.ZERO_BALANCE);\r\n      amountToSend = Math.min(amountToSend, PRICE_CHANGE_PROFIT_TOLERANCE * totalAssets_ / 100_000);\r\n      //require(amountToSend <= PRICE_CHANGE_PROFIT_TOLERANCE * strategyBalance / 100_000, AppErrors.EARNED_AMOUNT_TOO_HIGH);\r\n\r\n      IERC20(asset).safeTransfer(address(ITetuVaultV2(ISplitter(splitter).vault()).insurance()), amountToSend);\r\n    }\r\n\r\n    sentAmount = amountToSend;\r\n    unsentAmount = amount > amountToSend\r\n      ? amount - amountToSend\r\n      : 0;\r\n\r\n    emit SendToInsurance(sentAmount, unsentAmount);\r\n  }\r\n\r\n  function _registerIncome(uint assetBefore, uint assetAfter) internal pure returns (uint earned, uint lost) {\r\n    if (assetAfter > assetBefore) {\r\n      earned = assetAfter - assetBefore;\r\n    } else {\r\n      lost = assetBefore - assetAfter;\r\n    }\r\n    return (earned, lost);\r\n  }\r\n\r\n  /// @notice Send ProfitToCover to insurance - code fragment of the requirePayAmountBack()\r\n  ///         moved here to reduce size of requirePayAmountBack()\r\n  /// @param theAsset_ The asset passed from Converter\r\n  /// @param balanceTheAsset_ Current balance of {theAsset_}\r\n  /// @param investedAssets_ Value of investedAssets after call fixPriceChange()\r\n  /// @param earnedByPrices_ ProfitToCover received from fixPriceChange()\r\n  /// @return balanceTheAssetOut Final balance of {theAsset_} (after sending profit-to-cover to the insurance)\r\n  function sendProfitGetAssetBalance(\r\n    address theAsset_,\r\n    uint balanceTheAsset_,\r\n    uint investedAssets_,\r\n    uint earnedByPrices_,\r\n    IStrategyV3.BaseState storage baseState_\r\n  ) external returns (\r\n    uint balanceTheAssetOut\r\n  ) {\r\n    balanceTheAssetOut = balanceTheAsset_;\r\n    if (earnedByPrices_ != 0) {\r\n      address underlying = baseState_.asset;\r\n      uint balanceUnderlying = theAsset_ == underlying\r\n        ? balanceTheAsset_\r\n        : AppLib.balance(underlying);\r\n\r\n      _sendToInsurance(underlying, earnedByPrices_, baseState_.splitter, investedAssets_ + balanceUnderlying, balanceUnderlying);\r\n\r\n      if (theAsset_ == underlying) {\r\n        balanceTheAssetOut = AppLib.balance(theAsset_);\r\n      }\r\n    }\r\n  }\r\n//endregion -------------------------------------------- Cover loss, send profit to insurance\r\n\r\n//region ---------------------------------------- Setters\r\n  function checkReinvestThresholdPercentChanged(address controller, uint percent_) external {\r\n    StrategyLib.onlyOperators(controller);\r\n    require(percent_ <= DENOMINATOR, StrategyLib.WRONG_VALUE);\r\n    emit ReinvestThresholdPercentChanged(percent_);\r\n  }\r\n\r\n  function checkLiquidationThresholdChanged(address controller, address token, uint amount) external {\r\n    StrategyLib.onlyOperators(controller);\r\n    emit LiquidationThresholdChanged(token, amount);\r\n  }\r\n//endregion ---------------------------------------- Setters\r\n\r\n//region ---------------------------------------- Withdraw helpers\r\n  /// @notice Get amount of assets that we expect to receive after withdrawing\r\n  ///         ratio = amount-LP-tokens-to-withdraw / total-amount-LP-tokens-in-pool\r\n  /// @param reserves_ Reserves of the {poolAssets_}, same order, same length (we don't check it)\r\n  ///                  The order of tokens should be same as in {_depositorPoolAssets()},\r\n  ///                  one of assets must be {asset_}\r\n  /// @param liquidityAmount_ Amount of LP tokens that we are going to withdraw\r\n  /// @param totalSupply_ Total amount of LP tokens in the depositor\r\n  /// @return withdrawnAmountsOut Expected withdrawn amounts (decimals == decimals of the tokens)\r\n  function getExpectedWithdrawnAmounts(\r\n    uint[] memory reserves_,\r\n    uint liquidityAmount_,\r\n    uint totalSupply_\r\n  ) internal pure returns (\r\n    uint[] memory withdrawnAmountsOut\r\n  ) {\r\n    uint ratio = totalSupply_ == 0\r\n      ? 0\r\n      : (liquidityAmount_ >= totalSupply_\r\n        ? 1e18\r\n        : 1e18 * liquidityAmount_ / totalSupply_\r\n      );\r\n\r\n    uint len = reserves_.length;\r\n    withdrawnAmountsOut = new uint[](len);\r\n\r\n    if (ratio != 0) {\r\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n        withdrawnAmountsOut[i] = reserves_[i] * ratio / 1e18;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Calculate expected amount of the main asset after withdrawing\r\n  /// @param withdrawnAmounts_ Expected amounts to be withdrawn from the pool\r\n  /// @param amountsToConvert_ Amounts on balance initially available for the conversion\r\n  /// @return amountsOut Expected amounts of the main asset received after conversion withdrawnAmounts+amountsToConvert\r\n  function getExpectedAmountMainAsset(\r\n    address[] memory tokens,\r\n    uint indexAsset,\r\n    ITetuConverter converter,\r\n    uint[] memory withdrawnAmounts_,\r\n    uint[] memory amountsToConvert_\r\n  ) internal returns (\r\n    uint[] memory amountsOut\r\n  ) {\r\n    uint len = tokens.length;\r\n    amountsOut = new uint[](len);\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == indexAsset) {\r\n        amountsOut[i] = withdrawnAmounts_[i];\r\n      } else {\r\n        uint amount = withdrawnAmounts_[i] + amountsToConvert_[i];\r\n        if (amount != 0) {\r\n          (amountsOut[i],) = converter.quoteRepay(address(this), tokens[indexAsset], tokens[i], amount);\r\n        }\r\n      }\r\n    }\r\n\r\n    return amountsOut;\r\n  }\r\n\r\n  /// @notice Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}\r\n  /// @param amountsToConvert Amounts of {tokens} to be converted, they are located on the balance before withdraw\r\n  /// @param withdrawnAmounts Amounts of {tokens} that were withdrew from the pool\r\n  function postWithdrawActions(\r\n    ITetuConverter converter,\r\n    address[] memory tokens,\r\n    uint indexAsset,\r\n\r\n    uint[] memory reservesBeforeWithdraw,\r\n    uint liquidityAmountWithdrew,\r\n    uint totalSupplyBeforeWithdraw,\r\n\r\n    uint[] memory amountsToConvert,\r\n    uint[] memory withdrawnAmounts\r\n  ) external returns (\r\n    uint[] memory expectedMainAssetAmounts,\r\n    uint[] memory _amountsToConvert\r\n  ) {\r\n    // estimate expected amount of assets to be withdrawn\r\n    uint[] memory expectedWithdrawAmounts = getExpectedWithdrawnAmounts(\r\n      reservesBeforeWithdraw,\r\n      liquidityAmountWithdrew,\r\n      totalSupplyBeforeWithdraw\r\n    );\r\n\r\n    // from received amounts after withdraw calculate how much we receive from converter for them in terms of the underlying asset\r\n    expectedMainAssetAmounts = getExpectedAmountMainAsset(\r\n      tokens,\r\n      indexAsset,\r\n      converter,\r\n      expectedWithdrawAmounts,\r\n      amountsToConvert\r\n    );\r\n\r\n    uint len = tokens.length;\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      amountsToConvert[i] += withdrawnAmounts[i];\r\n    }\r\n\r\n    return (expectedMainAssetAmounts, amountsToConvert);\r\n  }\r\n\r\n  /// @notice return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}\r\n  function postWithdrawActionsEmpty(\r\n    ITetuConverter converter,\r\n    address[] memory tokens,\r\n    uint indexAsset,\r\n    uint[] memory amountsToConvert_\r\n  ) external returns (\r\n    uint[] memory expectedAmountsMainAsset\r\n  ) {\r\n    expectedAmountsMainAsset = getExpectedAmountMainAsset(\r\n      tokens,\r\n      indexAsset,\r\n      converter,\r\n      // there are no withdrawn amounts\r\n      new uint[](tokens.length), // array with all zero values\r\n      amountsToConvert_\r\n    );\r\n  }\r\n\r\n  /// @notice Calculate amount earned after withdraw. Withdraw cannot produce income, so we send all\r\n  ///         earned amount to insurance. Also we send to the insurance earned-by-prices-amount here.\r\n  /// @dev Amount for the insurance is sent from the balance, so the sending doesn't change invested assets.\r\n  /// @param asset Underlying\r\n  /// @param investedAssets_ Invested assets amount at the moment of withdrawing start\r\n  /// @param balanceBefore Balance of the underlying at the moment of withdrawing start\r\n  /// @param earnedByPrices_ Amount of underlying earned because of price changes, it should be send to the insurance.\r\n  /// @param updatedInvestedAssets_ Invested assets amount after withdrawing\r\n  /// @return amountSentToInsurance Total amount sent to the insurance in result.\r\n  function calculateIncomeAfterWithdraw(\r\n    address splitter,\r\n    address asset,\r\n    uint investedAssets_,\r\n    uint balanceBefore,\r\n    uint earnedByPrices_,\r\n    uint updatedInvestedAssets_\r\n  ) external returns (uint amountSentToInsurance, uint strategyLoss) {\r\n    uint balanceAfterWithdraw = AppLib.balance(asset);\r\n\r\n    // we need to compensate difference if during withdraw we lost some assets\r\n    // also we should send earned amounts to the insurance\r\n    // it's too dangerous to earn money on withdraw, we can move share price\r\n    // in the case of \"withdraw almost all\" share price can be changed significantly\r\n    // so, it's safer to transfer earned amount to the insurance\r\n    // earned can exceeds earnedByPrices_\r\n    // but if earned < earnedByPrices_ it means that we compensate a part of losses from earned-by-prices.\r\n    uint earned;\r\n    (earned, strategyLoss) = _registerIncome(\r\n      AppLib.sub0(investedAssets_ + balanceBefore, earnedByPrices_),\r\n      updatedInvestedAssets_ + balanceAfterWithdraw\r\n    );\r\n\r\n    if (earned != earnedByPrices_) {\r\n      emit OnEarningOnWithdraw(earned, earnedByPrices_);\r\n    }\r\n\r\n    if (earned != 0) {\r\n      (amountSentToInsurance,) = _sendToInsurance(\r\n        asset,\r\n        earned,\r\n        splitter,\r\n        investedAssets_ + balanceBefore,\r\n        balanceAfterWithdraw\r\n      );\r\n    }\r\n\r\n    return (amountSentToInsurance, strategyLoss);\r\n  }\r\n//endregion ------------------------------------- Withdraw helpers\r\n\r\n//region---------------------------------------- calcInvestedAssets\r\n  /// @notice Calculate amount we will receive when we withdraw all from pool\r\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\r\n  /// @param indexAsset Index of the underlying (main asset) in {tokens}\r\n  /// @param makeCheckpoint_ True - call IBookkeeper.checkpoint in the converter\r\n  /// @return amountOut Invested asset amount under control (in terms of underlying)\r\n  /// @return prices Asset prices in USD, decimals 18\r\n  /// @return decs 10**decimals\r\n  function calcInvestedAssets(\r\n    address[] memory tokens,\r\n    uint[] memory depositorQuoteExitAmountsOut,\r\n    uint indexAsset,\r\n    ITetuConverter converter_,\r\n    bool makeCheckpoint_\r\n  ) external returns (\r\n    uint amountOut,\r\n    uint[] memory prices,\r\n    uint[] memory decs\r\n  ) {\r\n    return _calcInvestedAssets(tokens, depositorQuoteExitAmountsOut, indexAsset, converter_, makeCheckpoint_);\r\n  }\r\n\r\n  /// @notice Calculate amount we will receive when we withdraw all from pool\r\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\r\n  /// @param indexAsset Index of the underlying (main asset) in {tokens}\r\n  /// @param makeCheckpoint_ True - call IBookkeeper.checkpoint in the converter\r\n  /// @return amountOut Invested asset amount under control (in terms of underlying)\r\n  /// @return prices Asset prices in USD, decimals 18\r\n  /// @return decs 10**decimals\r\n  function _calcInvestedAssets(\r\n    address[] memory tokens,\r\n    uint[] memory depositorQuoteExitAmountsOut,\r\n    uint indexAsset,\r\n    ITetuConverter converter_,\r\n    bool makeCheckpoint_\r\n  ) internal returns (\r\n    uint amountOut,\r\n    uint[] memory prices,\r\n    uint[] memory decs\r\n  ) {\r\n    CalcInvestedAssetsLocal memory v;\r\n    v.len = tokens.length;\r\n    v.asset = tokens[indexAsset];\r\n\r\n    // calculate prices, decimals\r\n    (prices, decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(converter_), tokens, v.len);\r\n\r\n    // A debt is registered below if we have X amount of asset, need to pay Y amount of the asset and X < Y\r\n    // In this case: debt = Y - X, the order of tokens is the same as in {tokens} array\r\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == indexAsset) {\r\n        // Current strategy balance of main asset is not taken into account here because it's add by splitter\r\n        amountOut += depositorQuoteExitAmountsOut[i];\r\n      } else {\r\n        v.token = tokens[i];\r\n        // possible reverse debt: collateralAsset = tokens[i], borrowAsset = underlying\r\n        // investedAssets is calculated using exact debts, debt-gaps are not taken into account\r\n        (uint toPay, uint collateral) = converter_.getDebtAmountCurrent(address(this), v.token, v.asset, false);\r\n        if (amountOut < toPay) {\r\n          setDebt(v, indexAsset, toPay);\r\n        } else {\r\n          amountOut -= toPay;\r\n        }\r\n\r\n        // available amount to repay\r\n        uint toRepay = collateral + IERC20(v.token).balanceOf(address(this)) + depositorQuoteExitAmountsOut[i];\r\n\r\n        // direct debt: collateralAsset = underlying, borrowAsset = tokens[i]\r\n        // investedAssets is calculated using exact debts, debt-gaps are not taken into account\r\n        (toPay, collateral) = converter_.getDebtAmountCurrent(address(this), v.asset, v.token, false);\r\n        amountOut += collateral;\r\n\r\n        if (toRepay >= toPay) {\r\n          amountOut += (toRepay - toPay) * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\r\n        } else {\r\n          // there is not enough amount to pay the debt\r\n          // let's register a debt and try to resolve it later below\r\n          setDebt(v, i, toPay - toRepay);\r\n        }\r\n      }\r\n    }\r\n    if (v.debts.length == v.len) {\r\n      // we assume here, that it would be always profitable to save collateral\r\n      // f.e. if there is not enough amount of USDT on our balance and we have a debt in USDT,\r\n      // it's profitable to change any available asset to USDT, pay the debt and return the collateral back\r\n      for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\r\n        if (v.debts[i] == 0) continue;\r\n\r\n        // estimatedAssets should be reduced on the debt-value\r\n        // this estimation is approx and do not count price impact on the liquidation\r\n        // we will able to count the real output only after withdraw process\r\n        uint debtInAsset = v.debts[i] * prices[i] * decs[indexAsset] / prices[indexAsset] / decs[i];\r\n        if (debtInAsset > amountOut) {\r\n          // The debt is greater than we can pay. We shouldn't try to pay the debt in this case\r\n          amountOut = 0;\r\n        } else {\r\n          amountOut -= debtInAsset;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (makeCheckpoint_) {\r\n      _callCheckpoint(tokens, converter_);\r\n    }\r\n\r\n    return (amountOut, prices, decs);\r\n  }\r\n\r\n  /// @notice Make new checkpoint in converter's bookkeeper\r\n  /// As results, a next call of checkpoint will return amount of increases to debts (\"deltas\")\r\n  /// since current moment up to the moment of the next call (we need such deltas in _fixPriceChanges only)\r\n  function _callCheckpoint(address[] memory tokens, ITetuConverter converter_) internal returns (\r\n    uint[] memory deltaGains,\r\n    uint[] memory deltaLosses\r\n  ) {\r\n    IBookkeeper a = IBookkeeper(IConverterController(converter_.controller()).bookkeeper());\r\n    return a.checkpoint(tokens);\r\n  }\r\n\r\n  /// @notice Lazy initialization of v.debts, add {value} to {v.debts[index]}\r\n  function setDebt(CalcInvestedAssetsLocal memory v, uint index, uint value) pure internal {\r\n    if (v.debts.length == 0) {\r\n      // lazy initialization\r\n      v.debts = new uint[](v.len);\r\n    }\r\n\r\n    // to pay the following amount we need to swap some other asset at first\r\n    v.debts[index] += value;\r\n  }\r\n\r\n  /// @notice Calculate the token amounts for deposit and amount of loss (as old-total-asset - new-total-asset)\r\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\r\n  /// @return loss New total assets - old total assets\r\n  /// @return tokenAmounts Balances of the token A and token B.\r\n  ///                     If any balance is zero it's not possible to enter to the pool, so return empty array (len 0)\r\n  function getTokenAmountsPair(\r\n    ITetuConverter converter,\r\n    uint totalAssets,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint[2] calldata liquidationThresholdsAB\r\n  ) external returns (\r\n    uint loss,\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    tokenAmounts = new uint[](2);\r\n    tokenAmounts[0] = AppLib.balance(tokenA);\r\n    tokenAmounts[1] = AppLib.balance(tokenB);\r\n\r\n    address[] memory tokens = new address[](2);\r\n    tokens[0] = tokenA;\r\n    tokens[1] = tokenB;\r\n\r\n    uint[] memory amounts = new uint[](2);\r\n    amounts[0] = tokenAmounts[0];\r\n\r\n    (uint newTotalAssets,,) = _calcInvestedAssets(tokens, amounts, 0, converter, true);\r\n    return (\r\n      newTotalAssets < totalAssets\r\n        ? totalAssets - newTotalAssets\r\n        : 0,\r\n      (tokenAmounts[0] < liquidationThresholdsAB[0] || tokenAmounts[1] < liquidationThresholdsAB[1])\r\n        ? new uint[](0)\r\n        : tokenAmounts\r\n    );\r\n  }\r\n\r\n  /// @notice Swap can give us more amount out than expected, so we will receive increasing of share price.\r\n  ///         To prevent it, we need to send exceeded amount to insurance,\r\n  ///         but it's too expensive to make such transfer at the end of withdrawAggByStep.\r\n  ///         So, we postpone sending the profit until the next call of fixPriceChange\r\n  ///         by manually setting investedAssets equal to the oldTotalAssets\r\n  /// @dev If profitToCover was sent only partly, we will postpone sending of remain amount up to the next call\r\n  ///      of fixPriceChange in same manner\r\n  /// @param oldTotalAssets Total asset at the moment after last call of fixPriceChange,\r\n  ///                       decreased on the value of profitToCover.\r\n  function fixTooHighInvestedAssets(\r\n    address asset_,\r\n    uint oldTotalAssets,\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs_\r\n  ) external {\r\n    uint balance = IERC20(asset_).balanceOf(address(this));\r\n    uint newTotalAssets = csbs_.investedAssets + balance;\r\n\r\n    if (oldTotalAssets < newTotalAssets) {\r\n      // total asset was increased (i.e. because of too profitable swaps)\r\n      // this increment will increase share price\r\n      // we should send added amount to insurance to avoid share price change\r\n      // anyway, it's too expensive to do it here\r\n      // so, we postpone sending the profit until the next call of fixPriceChange\r\n      if (oldTotalAssets > balance) {\r\n        csbs_.investedAssets = oldTotalAssets - balance;\r\n      }\r\n    }\r\n  }\r\n//endregion------------------------------------- calcInvestedAssets\r\n\r\n//region ------------------------------------------------------- Bookkeeper logic\r\n  /// @notice Make checkpoint (it's writable function) and calculate total cost of the deltas in terms of the {asset}\r\n  /// @param tokens Full list of tokens that can be used as collateral/borrow asset by the current strategy\r\n  /// @param indexAsset Index of the underlying in {tokens}\r\n  /// @return increaseToDebt Total increase-to-debt since previous checkpoint [in underlying]\r\n  function _getIncreaseToDebt(\r\n    address[] memory tokens,\r\n    uint indexAsset,\r\n    uint[] memory prices,\r\n    uint[] memory decs,\r\n    ITetuConverter converter\r\n  ) internal returns (\r\n    int increaseToDebt\r\n  ) {\r\n    IBookkeeper a = IBookkeeper(IConverterController(converter.controller()).bookkeeper());\r\n    (uint[] memory deltaGains, uint[] memory deltaLosses) = a.checkpoint(tokens);\r\n\r\n    uint len = tokens.length;\r\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\r\n      if (i == indexAsset) {\r\n        increaseToDebt -= int(deltaGains[i]);\r\n        increaseToDebt += int(deltaLosses[i]);\r\n      } else {\r\n        increaseToDebt += (int(deltaLosses[i]) - int(deltaGains[i]))\r\n          * int(prices[i]) * int(decs[indexAsset]) / int(prices[indexAsset]) / int(decs[i]);\r\n      }\r\n    }\r\n    emit OnIncreaseDebtToInsurance(tokens, deltaGains, deltaLosses, prices, increaseToDebt);\r\n\r\n    return increaseToDebt;\r\n  }\r\n\r\n  /// @notice Register income and cover possible loss after price changing, emit FixPriceChanges\r\n  /// @param investedAssetsBefore Currently stored value of _csbs.investedAssets\r\n  /// @param investedAssetsAfter Actual value of invested assets calculated at the current moment\r\n  /// @param increaseToDebt The amount by which the total loan debts increased for the selected period\r\n  /// @return earned Amount earned because of price changing\r\n  function _coverLossAfterPriceChanging(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    uint investedAssetsBefore,\r\n    uint investedAssetsAfter,\r\n    int increaseToDebt,\r\n    IStrategyV3.BaseState storage baseState\r\n  ) internal returns (uint earned) {\r\n    int debtToInsurance0 = csbs.debtToInsurance;\r\n    if (investedAssetsAfter > investedAssetsBefore) {\r\n      earned = investedAssetsAfter - investedAssetsBefore;\r\n      if (increaseToDebt != 0) {\r\n        // Earned amount will be send to the insurance later.\r\n        // Probably it can be reduced by same limitations as {lost} amount below\r\n        // and so, it will be necessary to decrease increaseToDebt proportionally.\r\n        // For simplicity, we increase debtToInsurance on full increaseToDebt always\r\n        // in assumption, that such profits are always low.\r\n        csbs.debtToInsurance += increaseToDebt;\r\n        emit ChangeDebtToInsuranceOnProfit(debtToInsurance0, increaseToDebt);\r\n      }\r\n    } else {\r\n      uint lost = investedAssetsBefore - investedAssetsAfter;\r\n      if (lost != 0) {\r\n        uint totalAsset = investedAssetsAfter + IERC20(baseState.asset).balanceOf(address(this));\r\n        (uint lossToCover, uint lossUncovered) = _getSafeLossToCover(lost, totalAsset);\r\n\r\n        if (lossUncovered != 0) {\r\n          // we need to cover lost-amount, but this amount is too high and will produce revert in the splitter\r\n          // so, we will cover only part of {lost} and leave other part uncovered.\r\n          emit UncoveredLoss(lossToCover, lossUncovered, investedAssetsBefore, investedAssetsAfter);\r\n        }\r\n\r\n        // if we compensate lost only partially, we reduce both amounts \"from prices\" and \"from debts\" proportionally\r\n        _coverLossAndCheckResults(csbs, baseState.splitter, lossToCover, increaseToDebt * int(lossToCover) / int(lost));\r\n\r\n      }\r\n    }\r\n\r\n    emit FixPriceChanges(\r\n      investedAssetsBefore,\r\n      investedAssetsAfter,\r\n      debtToInsurance0,\r\n      csbs.debtToInsurance,\r\n      increaseToDebt\r\n    );\r\n    return earned;\r\n  }\r\n\r\n  /// @notice Call coverPossibleStrategyLoss, covered loss will be sent to vault.\r\n  ///         If the loss were covered only partially, emit {NotEnoughInsurance}\r\n  function coverLossAndCheckResults(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    address splitter,\r\n    uint lossToCover\r\n  ) external {\r\n    _coverLossAndCheckResults(csbs, splitter, lossToCover, int(lossToCover));\r\n  }\r\n\r\n  /// @notice Call coverPossibleStrategyLoss, covered loss will be sent to vault.\r\n  function _coverLossAndCheckResults(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    address splitter,\r\n    uint lossToCover,\r\n    int debtToInsuranceInc\r\n  ) internal {\r\n    address asset = ISplitter(splitter).asset();\r\n    address vault = ISplitter(splitter).vault();\r\n\r\n    uint balanceBefore = IERC20(asset).balanceOf(vault);\r\n    ISplitter(splitter).coverPossibleStrategyLoss(0, lossToCover);\r\n    uint balanceAfter = IERC20(asset).balanceOf(vault);\r\n\r\n    uint delta = AppLib.sub0(balanceAfter, balanceBefore);\r\n    uint uncovered = AppLib.sub0(lossToCover, delta);\r\n    debtToInsuranceInc = lossToCover == 0\r\n      ? int(0)\r\n      : debtToInsuranceInc * int(lossToCover - uncovered) / int(lossToCover);\r\n\r\n    if (debtToInsuranceInc != 0) {\r\n      csbs.debtToInsurance += debtToInsuranceInc;\r\n    }\r\n\r\n    // we don't add uncovered amount to the debts to the insurance\r\n    emit OnCoverLoss(lossToCover, debtToInsuranceInc, delta, uncovered);\r\n  }\r\n\r\n  /// @notice Cut loss-value to safe value that doesn't produce revert inside splitter\r\n  function _getSafeLossToCover(uint loss, uint totalAssets_) internal pure returns (\r\n    uint lossToCover,\r\n    uint lossUncovered\r\n  ) {\r\n    // see StrategySplitterV2._declareStrategyIncomeAndCoverLoss, _coverLoss implementations\r\n    lossToCover = Math.min(loss, ConverterStrategyBaseLib2.HARDWORK_LOSS_TOLERANCE * totalAssets_ / 100_000);\r\n    lossUncovered = AppLib.sub0(loss, lossToCover);\r\n  }\r\n\r\n  /// @notice Calculate profit/loss happened because of price changing.\r\n  /// Try to cover the loss, send the profit to the insurance.\r\n  /// Increment debt to insurance on amount of increase of the debts.\r\n  /// @param amountsInPool Amount of tokens that can be received from the pool after withdrawing all liquidity.\r\n  /// The order of tokens is same as in the {tokens}\r\n  /// @param tokens Result of {_depositorPoolAssets}\r\n  /// @param indexAsset Index of the underlying in {tokens}\r\n  /// @return investedAssetsOut Updated value of {csbs.investedAssets}\r\n  /// @return earnedOut Profit that was received because of price changes. It should be sent back to insurance.\r\n  function fixPriceChanges(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    IStrategyV3.BaseState storage baseState,\r\n    uint[] memory amountsInPool,\r\n    address[] memory tokens,\r\n    uint indexAsset\r\n  ) external returns (\r\n    uint investedAssetsOut,\r\n    uint earnedOut\r\n  ) {\r\n    ITetuConverter converter = csbs.converter;\r\n    uint investedAssetsBefore = csbs.investedAssets;\r\n\r\n    uint[] memory prices;\r\n    uint[] memory decs;\r\n\r\n    (investedAssetsOut, prices, decs) = _calcInvestedAssets(tokens, amountsInPool, indexAsset, converter, false);\r\n    csbs.investedAssets = investedAssetsOut;\r\n\r\n    int increaseToDebt = _getIncreaseToDebt(tokens, indexAsset, prices, decs, converter);\r\n    earnedOut = _coverLossAfterPriceChanging(csbs, investedAssetsBefore, investedAssetsOut, increaseToDebt, baseState);\r\n  }\r\n\r\n  /// @notice Register amounts received for supplying collaterals and amount paid for the debts\r\n  ///         for the current period (a new period is started after each hardwork operation)\r\n  function registerBorrowResults(ITetuConverter converter, address asset) external {\r\n    IBookkeeper a = IBookkeeper(IConverterController(converter.controller()).bookkeeper());\r\n    (uint gains, uint losses) = a.startPeriod(asset);\r\n    if (gains != 0 && losses != 0) {\r\n      emit BorrowResults(gains, losses);\r\n    }\r\n  }\r\n//endregion ------------------------------------------------------- Bookkeeper logic\r\n\r\n\r\n}\r\n\r\n"
    },
    "contracts/strategies/CSBInternalLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n/// @title A library for using with ConverterStrategyBase.sol\r\n/// @notice Not suppose to be used with other contracts!\r\n/// @author belbix, dvpublic, a17\r\nlibrary CSBInternalLib {\r\n\r\n\r\n\r\n}\r\n"
    },
    "contracts/strategies/DepositorBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\n/// @title Abstract base Depositor contract.\r\n/// @notice Converter strategies should inherit xDepositor.\r\n/// @notice All communication with external pools should be done at inherited contract\r\n/// @author bogdoslav\r\nabstract contract DepositorBase {\r\n\r\n  /// @notice Returns pool assets\r\n  function _depositorPoolAssets() internal virtual view returns (address[] memory assets);\r\n\r\n  /// @notice Returns pool token proportions\r\n  function _depositorPoolWeights() internal virtual view returns (uint[] memory weights, uint total);\r\n\r\n  /// @notice Returns pool token reserves\r\n  function _depositorPoolReserves() internal virtual view returns (uint[] memory reserves);\r\n\r\n  /// @notice Returns depositor's pool shares / lp token amount\r\n  function _depositorLiquidity() internal virtual view returns (uint);\r\n\r\n  //// @notice Total amount of LP tokens in the depositor\r\n  function _depositorTotalSupply() internal view virtual returns (uint);\r\n\r\n  /// @notice Deposit given amount to the pool.\r\n  /// @dev Depositor must care about tokens approval by itself.\r\n  function _depositorEnter(uint[] memory amountsDesired_) internal virtual returns (\r\n    uint[] memory amountsConsumed,\r\n    uint liquidityOut\r\n  );\r\n\r\n  /// @notice Withdraw given lp amount from the pool.\r\n  /// @param liquidityAmount Amount of liquidity to be converted\r\n  ///                        If requested liquidityAmount >= invested, then should make full exit.\r\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\r\n  /// @return amountsOut The order of amounts is the same as in {_depositorPoolAssets}\r\n  function _depositorExit(uint liquidityAmount, bool emergency) internal virtual returns (uint[] memory amountsOut);\r\n\r\n  /// @notice Quotes output for given lp amount from the pool.\r\n  /// @dev Write function with read-only behavior. BalanceR's depositor requires not-view.\r\n  /// @param liquidityAmount Amount of liquidity to be converted\r\n  ///                        If requested liquidityAmount >= invested, then should make full exit.\r\n  /// @return amountsOut The order of amounts is the same as in {_depositorPoolAssets}\r\n  function _depositorQuoteExit(uint liquidityAmount) internal virtual returns (uint[] memory amountsOut);\r\n\r\n  /// @dev If pool supports emergency withdraw need to call it for emergencyExit()\r\n  /// @return amountsOut The order of amounts is the same as in {_depositorPoolAssets}\r\n  function _depositorEmergencyExit() internal virtual returns (uint[] memory amountsOut) {\r\n    uint liquidity = _depositorLiquidity();\r\n    return liquidity == 0\r\n      ? new uint[](_depositorPoolAssets().length)\r\n      : _depositorExit(liquidity, true);\r\n  }\r\n\r\n  /// @notice Claim all possible rewards.\r\n  /// @return rewardTokens Claimed token addresses\r\n  /// @return rewardAmounts Claimed token amounts\r\n  /// @return depositorBalancesBefore Must have the same length as _depositorPoolAssets and represent balances before claim in the same order\r\n  function _depositorClaimRewards() internal virtual returns (\r\n    address[] memory rewardTokens,\r\n    uint[] memory rewardAmounts,\r\n    uint[] memory depositorBalancesBefore\r\n  );\r\n}\r\n"
    },
    "contracts/strategies/kyber/KyberConverterStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../ConverterStrategyBase.sol\";\r\nimport \"./KyberDepositor.sol\";\r\nimport \"./KyberConverterStrategyLogicLib.sol\";\r\nimport \"../../libs/AppPlatforms.sol\";\r\nimport \"../../interfaces/IRebalancingV2Strategy.sol\";\r\nimport \"../../interfaces/IFarmingStrategy.sol\";\r\nimport \"./KyberStrategyErrors.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\ncontract KyberConverterStrategy is KyberDepositor, ConverterStrategyBase, IRebalancingV2Strategy, IFarmingStrategy {\r\n\r\n  //region ------------------------------------------------- Constants\r\n\r\n  string public constant override NAME = \"Kyber Converter Strategy\";\r\n  string public constant override PLATFORM = AppPlatforms.KYBER;\r\n  string public constant override STRATEGY_VERSION = \"3.1.3\";\r\n  //endregion ------------------------------------------------- Constants\r\n\r\n  //region ------------------------------------------------- INIT\r\n\r\n  /// @notice Initialize the strategy with the given parameters.\r\n  /// @param controller_ The address of the controller.\r\n  /// @param splitter_ The address of the splitter.\r\n  /// @param converter_ The address of the converter.\r\n  /// @param pool_ The address of the pool.\r\n  /// @param tickRange_ The tick range for the liquidity position.\r\n  /// @param rebalanceTickRange_ The tick range for rebalancing.\r\n  /// @param fuseThresholds Price thresholds for tokens [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  function init(\r\n    address controller_,\r\n    address splitter_,\r\n    address converter_,\r\n    address pool_,\r\n    int24 tickRange_,\r\n    int24 rebalanceTickRange_,\r\n    bool isStablePool,\r\n    uint pId,\r\n    uint[4] calldata fuseThresholds\r\n  ) external initializer {\r\n    __ConverterStrategyBase_init(controller_, splitter_, converter_);\r\n    KyberConverterStrategyLogicLib.initStrategyState(\r\n      state,\r\n      [controller_, pool_],\r\n      tickRange_,\r\n      rebalanceTickRange_,\r\n      ISplitter(splitter_).asset(),\r\n      isStablePool,\r\n      fuseThresholds\r\n    );\r\n\r\n    state.pId = pId;\r\n\r\n    // setup specific name for UI\r\n    StrategyLib2._changeStrategySpecificName(baseState, KyberConverterStrategyLogicLib.createSpecificName(state.pair));\r\n  }\r\n  //endregion ------------------------------------------------- INIT\r\n\r\n  //region --------------------------------------------- OPERATOR ACTIONS\r\n\r\n  /// @notice Manually set status of the fuse\r\n  /// @param status See PairBasedStrategyLib.FuseStatus enum for possible values\r\n  function setFuseStatus(uint status) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    PairBasedStrategyLib.setFuseStatus(state.pair.fuseAB, PairBasedStrategyLib.FuseStatus(status));\r\n  }\r\n\r\n  /// @notice Set thresholds for the fuse: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  ///         Decimals 18. The thresholds are compared with prices from TetuConverter's price oracle.\r\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\r\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\r\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\r\n  /// @param values Price thresholds: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  function setFuseThresholds(uint[4] memory values) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    PairBasedStrategyLib.setFuseThresholds(state.pair.fuseAB, values);\r\n  }\r\n\r\n  function changePId(uint pId) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    require(!state.staked, KyberStrategyErrors.NOT_UNSTAKED);\r\n    state.pId = pId;\r\n  }\r\n\r\n  function setStrategyProfitHolder(address strategyProfitHolder) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    state.pair.strategyProfitHolder = strategyProfitHolder;\r\n  }\r\n\r\n  /// @notice Set withdrawDone value.\r\n  ///         When a fuse was triggered ON, all debts should be closed and asset should be converted to underlying.\r\n  ///         After completion of the conversion withdrawDone can be set to 1.\r\n  ///         So, {getFuseStatus} will return  withdrawDone=1 and you will know, that withdraw is not required\r\n  /// @param done 0 - full withdraw required, 1 - full withdraw was done\r\n  function setWithdrawDone(uint done) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    state.pair.withdrawDone = done;\r\n  }\r\n  //endregion --------------------------------------------- OPERATOR ACTIONS\r\n\r\n  //region --------------------------------------------- METRIC VIEWS\r\n\r\n  /// @notice Check if the strategy is ready for hard work.\r\n  /// @return A boolean indicating if the strategy is ready for hard work.\r\n  function isReadyToHardWork() override external virtual view returns (bool) {\r\n    // for simplicity of implementation this function doesn't calculate fees and just returns true\r\n    return !needRebalance() && !_isFuseTriggeredOn();\r\n  }\r\n\r\n  /// @notice Check if the strategy needs rebalancing.\r\n  /// @return A boolean indicating if the strategy needs rebalancing.\r\n  function needRebalance() public view returns (bool) {\r\n    (bool needStake, bool needUnstake) = KyberConverterStrategyLogicLib.needRebalanceStaking(state);\r\n    return KyberConverterStrategyLogicLib.needStrategyRebalance(state.pair, _csbs.converter) || needStake || needUnstake;\r\n  }\r\n\r\n  function canFarm() external view returns (bool) {\r\n    return !KyberConverterStrategyLogicLib.isFarmEnded(state.pId);\r\n  }\r\n\r\n  /// @notice Returns the current state of the contract\r\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\r\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  /// @return nums [totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]\r\n  /// @return boolValues [isStablePool, depositorSwapTokens]\r\n  function getDefaultState() external override view returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  ) {\r\n    return PairBasedStrategyLogicLib.getDefaultState(state.pair);\r\n  }\r\n\r\n  //endregion ---------------------------------------------- METRIC VIEWS\r\n\r\n  //region --------------------------------------------- CALLBACKS\r\n\r\n  function onERC721Received(\r\n    address,\r\n    address,\r\n    uint256,\r\n    bytes memory\r\n  ) external pure returns (bytes4) {\r\n    return this.onERC721Received.selector;\r\n  }\r\n  //endregion --------------------------------------------- CALLBACKS\r\n\r\n  //region--------------------------------------------- REBALANCE\r\n\r\n  /// @notice Rebalance using borrow/repay only, no swaps\r\n  /// @param checkNeedRebalance Revert if rebalance is not needed. Pass false to deposit after withdrawByAgg-iterations\r\n  function rebalanceNoSwaps(bool checkNeedRebalance) external {\r\n    address _controller = controller();\r\n    StrategyLib2.onlyOperators(_controller);\r\n\r\n    (bool needStake, bool needUnstake) = KyberConverterStrategyLogicLib.needRebalanceStaking(state);\r\n    if (needStake || needUnstake) {\r\n      checkNeedRebalance = false;\r\n    }\r\n\r\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\r\n    uint[] memory tokenAmounts = KyberConverterStrategyLogicLib.rebalanceNoSwaps(\r\n      _csbs,\r\n      state.pair,\r\n      [address(_csbs.converter), address(AppLib._getLiquidator(_controller))],\r\n      oldTotalAssets,\r\n      profitToCover,\r\n      baseState.splitter,\r\n      checkNeedRebalance,\r\n      liquidationThresholds,\r\n      needStake || needUnstake\r\n    );\r\n    _rebalanceAfter(tokenAmounts);\r\n    state.pair.lastRebalanceNoSwap = block.timestamp;\r\n  }\r\n  //endregion--------------------------------------------- REBALANCE\r\n\r\n  //region --------------------------------------------- Withdraw by iterations\r\n\r\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\r\n  function quoteWithdrawByAgg(bytes memory planEntryData) external returns (address tokenToSwap, uint amountToSwap) {\r\n    // restriction \"operator only\" is checked inside {initWithdrawLocal} in {quoteWithdrawStep}\r\n\r\n    // estimate amounts to be withdrawn from the pool\r\n    uint totalLiquidity = state.pair.totalLiquidity;\r\n    uint[] memory amountsOut = (totalLiquidity == 0)\r\n      ? new uint[](2)\r\n      : _depositorQuoteExit(totalLiquidity);\r\n\r\n    return PairBasedStrategyLogicLib.quoteWithdrawByAgg(\r\n      state.pair,\r\n      planEntryData,\r\n      amountsOut,\r\n      controller(),\r\n      _csbs.converter,\r\n      liquidationThresholds\r\n    );\r\n  }\r\n\r\n  /// @notice Make withdraw iteration: [exit from the pool], [make 1 swap], [repay a debt], [enter to the pool]\r\n  ///         Typical sequence of the actions is: exit from the pool, make 1 swap, repay 1 debt.\r\n  ///         You can enter to the pool if you are sure that you won't have borrow + repay on AAVE3 in the same block.\r\n  /// @dev All swap-by-agg data should be prepared using {quoteWithdrawByAgg} off-chain\r\n  /// @param tokenToSwap_ What token should be swapped to other\r\n  /// @param aggregator_ Aggregator that should be used on next swap. 0 - use liquidator\r\n  /// @param amountToSwap_ Amount that should be swapped. 0 - no swap\r\n  /// @param swapData Swap rote that was prepared off-chain.\r\n  /// @param planEntryData PLAN_XXX + additional data, see IterationPlanKinds\r\n  /// @param entryToPool Allow to enter to the pool at the end. Use false if you are going to make several iterations.\r\n  ///                    It's possible to enter back to the pool by calling {rebalanceNoSwaps} at any moment\r\n  ///                    0 - not allowed, 1 - allowed, 2 - allowed only if completed\r\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions.\r\n  function withdrawByAggStep(\r\n    address tokenToSwap_,\r\n    address aggregator_,\r\n    uint amountToSwap_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    uint entryToPool\r\n  ) external returns (bool completed) {\r\n    // restriction \"operator only\" is checked inside UniswapV3ConverterStrategyLogicLib.withdrawByAggStep\r\n\r\n    // fix price changes, exit from the pool\r\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\r\n\r\n    // check \"operator only\", make withdraw step, cover-loss, send profit to cover, prepare to enter to the pool\r\n    uint[] memory tokenAmounts;\r\n    (completed, tokenAmounts) = KyberConverterStrategyLogicLib.withdrawByAggStep(\r\n      _csbs,\r\n      [tokenToSwap_, aggregator_, controller(), address(_csbs.converter), baseState.splitter],\r\n      [amountToSwap_, profitToCover, oldTotalAssets, entryToPool],\r\n      swapData,\r\n      planEntryData,\r\n      state.pair,\r\n      liquidationThresholds\r\n    );\r\n\r\n    // enter to the pool\r\n    _rebalanceAfter(tokenAmounts);\r\n    state.pair.lastRebalanceNoSwap = 0;\r\n\r\n    if (completed && _isFuseTriggeredOn()) {\r\n      // full withdraw was completed, we can exclude next calls of withdrawByAggStep\r\n      state.pair.withdrawDone = 1;\r\n    }\r\n\r\n    ConverterStrategyBaseLib2.fixTooHighInvestedAssets(baseState.asset, oldTotalAssets, _csbs);\r\n  }\r\n\r\n  function getPropNotUnderlying18() external view returns (uint) {\r\n    return KyberConverterStrategyLogicLib.getPropNotUnderlying18(state.pair);\r\n  }\r\n\r\n  //endregion ------------------------------------ Withdraw by iterations\r\n\r\n  //region--------------------------------------------- INTERNAL LOGIC\r\n\r\n  function _beforeDeposit(\r\n    ITetuConverter converter_,\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint /*indexAsset_*/\r\n  ) override internal virtual returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    require(!needRebalance(), KyberStrategyErrors.NEED_REBALANCE);\r\n    (uint prop0, uint prop1) = KyberConverterStrategyLogicLib.getEntryDataProportions(\r\n      IPool(state.pair.pool),\r\n      state.pair.lowerTick,\r\n      state.pair.upperTick,\r\n      state.pair.depositorSwapTokens\r\n    );\r\n\r\n    // get token amounts for token A, token B\r\n    address tokenA = state.pair.tokenA;\r\n    tokenAmounts = PairBasedStrategyLogicLib._beforeDeposit(\r\n      converter_,\r\n      amount_,\r\n      tokenA,\r\n      state.pair.tokenB,\r\n      prop0 * 1e18 / (prop0 + prop1),\r\n      liquidationThresholds\r\n    );\r\n\r\n    // take into account a possibility that tokens_ can contain [B, A]\r\n    if (tokens_[0] != tokenA) {\r\n      (tokenAmounts[0], tokenAmounts[1]) = (tokenAmounts[1], tokenAmounts[0]);\r\n    }\r\n  }\r\n\r\n  /// @notice Claim rewards, do _processClaims() after claiming, calculate earned and lost amounts\r\n  /// @return earned The amount of earned rewards\r\n  /// @return lost The amount of lost rewards.\r\n  /// @return assetBalanceAfterClaim The asset balance after claiming rewards.\r\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\r\n  /// @return amountPerf Total performance fee in terms of underlying\r\n  function _handleRewards() override internal virtual returns (\r\n    uint earned,\r\n    uint lost,\r\n    uint assetBalanceAfterClaim,\r\n    uint paidDebtToInsurance,\r\n    uint amountPerf\r\n  ) {\r\n    address asset = baseState.asset;\r\n    (address[] memory rewardTokens, uint[] memory amounts) = _claim();\r\n    earned = KyberConverterStrategyLogicLib.calcEarned(asset, controller(), rewardTokens, amounts);\r\n    (paidDebtToInsurance, amountPerf) = _rewardsLiquidation(rewardTokens, amounts);\r\n    return (earned, lost, AppLib.balance(asset), paidDebtToInsurance, amountPerf);\r\n  }\r\n\r\n  /// @notice Deposit given amount to the pool.\r\n  /// @param amount_ The amount to be deposited.\r\n  /// @param updateTotalAssetsBeforeInvest_ A boolean indicating if the total assets should be updated before investing.\r\n  /// @return strategyLoss Loss should be covered from Insurance\r\n  function _depositToPool(uint amount_, bool updateTotalAssetsBeforeInvest_) override internal virtual returns (\r\n    uint strategyLoss\r\n  ) {\r\n    if (_isFuseTriggeredOn()) {\r\n      uint[] memory tokenAmounts = new uint[](2);\r\n      tokenAmounts[0] = amount_;\r\n      emit OnDepositorEnter(tokenAmounts, tokenAmounts);\r\n      return 0;\r\n    } else {\r\n      return super._depositToPool(amount_, updateTotalAssetsBeforeInvest_);\r\n    }\r\n  }\r\n\r\n  function _beforeWithdraw(uint /*amount*/) internal view override {\r\n    require(!needRebalance(), KyberStrategyErrors.NEED_REBALANCE);\r\n  }\r\n\r\n  /// @notice Check need-rebalance and fuse-ON\r\n  /// @return True if the hardwork should be skipped\r\n  function _preHardWork(bool reInvest) internal view override returns (bool) {\r\n    reInvest; // hide warning\r\n    require(!needRebalance(), KyberStrategyErrors.NEED_REBALANCE);\r\n    require(!_isFuseTriggeredOn(), KyberStrategyErrors.FUSE_IS_ACTIVE);\r\n    return false;\r\n  }\r\n\r\n  /// @notice Prepare to rebalance: check operator-only, fix price changes, call depositor exit\r\n  function _rebalanceBefore() internal returns (uint profitToCover, uint oldTotalAssets) {\r\n    (, profitToCover) = _fixPriceChanges(true);\r\n    oldTotalAssets = totalAssets() - profitToCover;\r\n\r\n    KyberConverterStrategyLogicLib.claimRewardsBeforeExitIfRequired(state);\r\n\r\n    // withdraw all liquidity from pool\r\n    // after disableFuse() liquidity is zero\r\n    uint liquidity = state.pair.totalLiquidity;\r\n    if (liquidity != 0) {\r\n      _depositorExit(liquidity, false);\r\n    }\r\n  }\r\n\r\n  /// @notice Make actions after rebalance: depositor enter, add fillup if necessary, update invested assets\r\n  function _rebalanceAfter(uint[] memory tokenAmounts) internal {\r\n    if (tokenAmounts.length == 2 && !_isFuseTriggeredOn()) {\r\n      _depositorEnter(tokenAmounts);\r\n    }\r\n\r\n    _updateInvestedAssets();\r\n  }\r\n\r\n  function _isFuseTriggeredOn() internal view returns (bool) {\r\n    return PairBasedStrategyLib.isFuseTriggeredOn(state.pair.fuseAB.status);\r\n  }\r\n  //endregion--------------------------------------- INTERNAL LOGIC\r\n}\r\n"
    },
    "contracts/strategies/kyber/KyberConverterStrategyEmergency.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../ConverterStrategyBase.sol\";\r\nimport \"./KyberDepositor.sol\";\r\nimport \"./KyberConverterStrategyLogicLib.sol\";\r\nimport \"../../libs/AppPlatforms.sol\";\r\nimport \"../../interfaces/IRebalancingV2Strategy.sol\";\r\nimport \"../../interfaces/IFarmingStrategy.sol\";\r\nimport \"./KyberStrategyErrors.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\nimport \"../../integrations/aave/IAaveFlashLoanReceiver.sol\";\r\nimport \"../../integrations/aave/IAavePool.sol\";\r\nimport \"../../integrations/aave/IAaveAddressesProvider.sol\";\r\n\r\ncontract KyberConverterStrategyEmergency is KyberDepositor, ConverterStrategyBase, IRebalancingV2Strategy, IFarmingStrategy, IAaveFlashLoanReceiver {\r\n  using SafeERC20 for IERC20;\r\n\r\n  //region ------------------------------------------------- Constants\r\n\r\n  string public constant override NAME = \"Kyber Converter Strategy Emergency\";\r\n  string public constant override PLATFORM = AppPlatforms.KYBER;\r\n  string public constant override STRATEGY_VERSION = \"3.0.2\";\r\n\r\n  address internal constant USDC_TOKEN = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\r\n  address internal constant TOKEN_USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\r\n  address internal constant AAVE_V3_POOL = 0x794a61358D6845594F94dc1DB02A252b5b4814aD;\r\n  //endregion ------------------------------------------------- Constants\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev RETURN ZERO BALANCE!\r\n  function investedAssets() public pure override returns (uint) {\r\n    return 0;\r\n  }\r\n\r\n  function salvage(address token, uint amount) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    IERC20(token).transfer(IController(controller()).governance(), amount);\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////////////////////\r\n  function emergencyGetDebtAmount() external view returns (uint amountToPay, uint collateral) {\r\n    return _emergencyGetDebtAmount(USDC_TOKEN, TOKEN_USDT);\r\n  }\r\n  function _emergencyGetDebtAmount(address collateralAsset, address borrowAsset) public view returns (uint amountToPay, uint collateral) {\r\n    return _csbs.converter.getDebtAmountStored(address(this), collateralAsset, borrowAsset, true);\r\n  }\r\n  function balanceOf(address token) public view returns (uint) {\r\n    return IERC20(token).balanceOf(address(this));\r\n  }\r\n  function emergencyCloseDirectDebtsUsingFlashLoan() external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    IAavePool pool = IAavePool(AAVE_V3_POOL);\r\n\r\n    (uint amountToPay, uint collateral) = _csbs.converter.getDebtAmountStored(address(this), USDC_TOKEN, TOKEN_USDT, true);\r\n\r\n    pool.flashLoanSimple(\r\n      address(this),\r\n      TOKEN_USDT,\r\n      amountToPay,\r\n      abi.encode(amountToPay, collateral),\r\n      0 // referralCode\r\n    );\r\n  }\r\n\r\n  function executeOperation(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 premium,\r\n    address /* initiator */,\r\n    bytes calldata params\r\n  ) external override returns (bool) {\r\n    require(msg.sender == AAVE_V3_POOL, \"#0\");\r\n    require(asset == TOKEN_USDT, \"#1\");\r\n    (uint amountToPay, uint collateral) = abi.decode(params, (uint, uint));\r\n\r\n    require(amount == amountToPay, \"#2\");\r\n    ITetuConverter converter = _csbs.converter;\r\n\r\n    // use borrowed USDT to pay the debt\r\n    IERC20(TOKEN_USDT).safeTransfer(address(converter), amountToPay);\r\n    converter.repay(USDC_TOKEN, TOKEN_USDT, amountToPay, address(this));\r\n    require(IERC20(USDC_TOKEN).balanceOf(address(this)) >= collateral, \"#7\");\r\n\r\n    amountToPay += premium;\r\n\r\n    // now we have USDC, but we need USDT\r\n    uint balanceUsdc = IERC20(USDC_TOKEN).balanceOf(address(this));\r\n\r\n    uint usdcPrice = ConverterStrategyBaseLib2.getAssetPriceFromConverter(converter, USDC_TOKEN);\r\n    uint usdtPrice = ConverterStrategyBaseLib2.getAssetPriceFromConverter(converter, TOKEN_USDT);\r\n    uint amountToConvert = amountToPay * usdcPrice / usdtPrice * 101/100; // add 1% on top // decimals of USDC and USDT are the same\r\n\r\n    require(balanceUsdc > amountToConvert, \"#3\");\r\n    ConverterStrategyBaseLib.liquidate(\r\n      converter,\r\n      AppLib._getLiquidator(controller()),\r\n      USDC_TOKEN,\r\n      TOKEN_USDT,\r\n      amountToConvert,\r\n      300,\r\n      1000,\r\n      true // skip validation\r\n    );\r\n    uint balanceUsdt = IERC20(TOKEN_USDT).balanceOf(address(this));\r\n    require(balanceUsdt >= amountToPay, \"#3\");\r\n\r\n    // we need to approve \"amounts + fee\" to the pool to complete flesh loan\r\n    IERC20(TOKEN_USDT).approve(AAVE_V3_POOL, amountToPay);\r\n\r\n    // leave all assets on balance for salvage\r\n    return true;\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function _withdrawFromPool(uint) override internal pure virtual returns (uint, uint, uint) {\r\n    return (0, 0, 0);\r\n  }\r\n\r\n  function withdrawByAggStep(\r\n    address,\r\n    address,\r\n    uint,\r\n    bytes memory,\r\n    bytes memory,\r\n    uint\r\n  ) external pure returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  function setFuseThresholds(uint[4] memory) external pure {\r\n  }\r\n\r\n  function getPropNotUnderlying18() external pure returns (uint) {\r\n    return 0;\r\n  }\r\n\r\n  function quoteWithdrawByAgg(bytes memory) external pure returns (address, uint) {\r\n    return (address(0), 0);\r\n  }\r\n\r\n  function rebalanceNoSwaps(bool) external pure {\r\n  }\r\n\r\n  function setFuseStatus(uint) external pure {\r\n  }\r\n\r\n  function setStrategyProfitHolder(address) external pure {\r\n  }\r\n\r\n  function setWithdrawDone(uint) external pure {\r\n  }\r\n\r\n  function isReadyToHardWork() override external virtual pure returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  function needRebalance() public pure returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  function canFarm() external pure returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  function getDefaultState() external override view returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  ) {\r\n    return PairBasedStrategyLogicLib.getDefaultState(state.pair);\r\n  }\r\n\r\n  function onERC721Received(\r\n    address,\r\n    address,\r\n    uint256,\r\n    bytes memory\r\n  ) external pure returns (bytes4) {\r\n    return this.onERC721Received.selector;\r\n  }\r\n\r\n  function _beforeDeposit(\r\n    ITetuConverter,\r\n    uint,\r\n    address[] memory,\r\n    uint /*indexAsset_*/\r\n  ) override internal virtual pure returns (\r\n    uint[] memory\r\n  ) {\r\n    return new uint[](0);\r\n  }\r\n\r\n  function _handleRewards() override internal virtual pure returns (uint, uint, uint, uint, uint) {\r\n    return (0, 0, 0, 0, 0);\r\n  }\r\n\r\n  function _depositToPool(uint, bool) override internal virtual pure returns (\r\n    uint\r\n  ) {\r\n    return 0;\r\n  }\r\n\r\n  function _beforeWithdraw(uint /*amount*/) internal pure override {\r\n  }\r\n\r\n  function _preHardWork(bool) internal pure override returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  function _rebalanceBefore() internal pure returns (uint, uint) {\r\n    return (0, 0);\r\n  }\r\n\r\n  function _rebalanceAfter(uint[] memory) internal pure {\r\n  }\r\n\r\n  function _isFuseTriggeredOn() internal pure returns (bool) {\r\n    return false;\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/kyber/KyberConverterStrategyLogicLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"./KyberLib.sol\";\r\nimport \"./KyberDebtLib.sol\";\r\nimport \"./KyberStrategyErrors.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\nlibrary KyberConverterStrategyLogicLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n  //region ------------------------------------------------ Constants\r\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_STABLE = 300;\r\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE = 500;\r\n  /// @dev 0.5% by default\r\n  uint internal constant DEFAULT_FUSE_THRESHOLD = 5e15;\r\n  IBasePositionManager internal constant KYBER_NFT = IBasePositionManager(0xe222fBE074A436145b255442D919E4E3A6c6a480);\r\n  IKyberSwapElasticLM internal constant FARMING_CENTER = IKyberSwapElasticLM(0x7D5ba536ab244aAA1EA42aB88428847F25E3E676);\r\n  // ITicksFeesReader internal constant TICKS_FEES_READER = ITicksFeesReader(0x8Fd8Cb948965d9305999D767A02bf79833EADbB3);\r\n  address public constant KNC = 0x1C954E8fe737F99f68Fa1CCda3e51ebDB291948C;\r\n  //endregion ------------------------------------------------ Constants\r\n\r\n  //region ------------------------------------------------ Events\r\n  event Rebalanced(uint loss, uint profitToCover, uint coveredByRewards);\r\n  event RebalancedDebt(uint loss, uint profitToCover, uint coveredByRewards);\r\n  event KyberFeesClaimed(uint fee0, uint fee1);\r\n  event KyberRewardsClaimed(uint reward);\r\n  //endregion ------------------------------------------------ Events\r\n\r\n  //region ------------------------------------------------ Data types\r\n  struct State {\r\n    PairBasedStrategyLogicLib.PairState pair;\r\n    // additional (specific) state\r\n\r\n    uint tokenId;\r\n    // farming\r\n    uint pId;\r\n    bool staked;\r\n\r\n    /// @notice reserve space for future needs\r\n    uint[10] __gap;\r\n  }\r\n\r\n  struct RebalanceLocal {\r\n    /// @notice Fuse for token A and token B\r\n    PairBasedStrategyLib.FuseStateParams fuseAB;\r\n    ITetuConverter converter;\r\n    IPool pool;\r\n    address tokenA;\r\n    address tokenB;\r\n    bool isStablePool;\r\n    uint[2] liquidationThresholdsAB;\r\n\r\n    bool fuseStatusChangedAB;\r\n    PairBasedStrategyLib.FuseStatus fuseStatusAB;\r\n\r\n    uint poolPrice;\r\n    uint poolPriceAdjustment;\r\n  }\r\n\r\n  struct EnterLocalVariables {\r\n    IPool pool;\r\n    int24 upperTick;\r\n    int24 lowerTick;\r\n    uint tokenId;\r\n    uint pId;\r\n  }\r\n\r\n  struct ExitLocalVariables {\r\n    address strategyProfitHolder;\r\n    uint pId;\r\n    address tokenA;\r\n    address tokenB;\r\n  }\r\n\r\n  //endregion ------------------------------------------------ Data types\r\n\r\n  //region ------------------------------------------------ Helpers\r\n\r\n  /// @param controllerPool [controller, pool]\r\n  /// @param fuseThresholds Fuse thresholds for tokens (stable pool only)\r\n  function initStrategyState(\r\n    State storage state,\r\n    address[2] memory controllerPool,\r\n    int24 tickRange,\r\n    int24 rebalanceTickRange,\r\n    address asset_,\r\n    bool isStablePool,\r\n    uint[4] calldata fuseThresholds\r\n  ) external {\r\n    require(controllerPool[1] != address(0), AppErrors.ZERO_ADDRESS);\r\n    address token0 = address(IPool(controllerPool[1]).token0());\r\n    address token1 = address(IPool(controllerPool[1]).token1());\r\n\r\n    int24[4] memory tickData;\r\n    {\r\n      int24 tickSpacing = KyberLib.getTickSpacing(IPool(controllerPool[1]));\r\n      if (tickRange != 0) {\r\n        require(tickRange == tickRange / tickSpacing * tickSpacing, KyberStrategyErrors.INCORRECT_TICK_RANGE);\r\n        require(rebalanceTickRange == rebalanceTickRange / tickSpacing * tickSpacing, KyberStrategyErrors.INCORRECT_REBALANCE_TICK_RANGE);\r\n      }\r\n      tickData[0] = tickSpacing;\r\n      (tickData[1], tickData[2]) = KyberDebtLib.calcTickRange(IPool(controllerPool[1]), tickRange, tickSpacing);\r\n      tickData[3] = rebalanceTickRange;\r\n    }\r\n\r\n    PairBasedStrategyLogicLib.setInitialDepositorValues(\r\n      state.pair,\r\n      [controllerPool[1], asset_, token0, token1],\r\n      tickData,\r\n      isStablePool,\r\n      fuseThresholds\r\n    );\r\n\r\n    address liquidator = IController(controllerPool[0]).liquidator();\r\n    IERC20(token0).approve(liquidator, type(uint).max);\r\n    IERC20(token1).approve(liquidator, type(uint).max);\r\n    IERC20(token0).approve(address(KYBER_NFT), type(uint).max);\r\n    IERC20(token1).approve(address(KYBER_NFT), type(uint).max);\r\n    IERC721(address(KYBER_NFT)).setApprovalForAll(address(FARMING_CENTER), true);\r\n  }\r\n\r\n  function createSpecificName(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (string memory) {\r\n    return string(abi.encodePacked(\r\n      \"Kyber \",\r\n      IERC20Metadata(pairState.tokenA).symbol(),\r\n      \"/\",\r\n      IERC20Metadata(pairState.tokenB).symbol())\r\n    );\r\n  }\r\n\r\n  function getPoolReserves(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (uint[] memory reserves) {\r\n    reserves = new uint[](2);\r\n    (uint160 sqrtRatioX96, , ,) = IPool(pairState.pool).getPoolState();\r\n\r\n    (reserves[0], reserves[1]) = KyberLib.getAmountsForLiquidity(\r\n      sqrtRatioX96,\r\n      pairState.lowerTick,\r\n      pairState.upperTick,\r\n      pairState.totalLiquidity\r\n    );\r\n\r\n    if (pairState.depositorSwapTokens) {\r\n      (reserves[0], reserves[1]) = (reserves[1], reserves[0]);\r\n    }\r\n  }\r\n\r\n  /// @dev Gets the liquidator swap slippage based on the pool type (stable or volatile).\r\n  /// @return The liquidator swap slippage percentage.\r\n  function _getLiquidatorSwapSlippage(bool isStablePool) internal pure returns (uint) {\r\n    return isStablePool ? LIQUIDATOR_SWAP_SLIPPAGE_STABLE : LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE;\r\n  }\r\n\r\n  /// @notice Calculate proportions of the tokens for entry kind 1\r\n  /// @param pool Pool instance.\r\n  /// @param lowerTick The lower tick of the pool's main range.\r\n  /// @param upperTick The upper tick of the pool's main range.\r\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\r\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  function getEntryDataProportions(IPool pool, int24 lowerTick, int24 upperTick, bool depositorSwapTokens) external view returns (uint, uint) {\r\n    return KyberDebtLib.getEntryDataProportions(pool, lowerTick, upperTick, depositorSwapTokens);\r\n  }\r\n  //endregion ------------------------------------------------ Helpers\r\n\r\n  //region ------------------------------------------------ Pool info\r\n\r\n  function getEntryData(\r\n    IPool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    bool depositorSwapTokens\r\n  ) public view returns (bytes memory entryData) {\r\n    return KyberDebtLib.getEntryData(pool, lowerTick, upperTick, depositorSwapTokens);\r\n  }\r\n  //endregion ------------------------------------------------ Pool info\r\n\r\n  //region ------------------------------------------------ Join the pool\r\n  function enter(\r\n    State storage state,\r\n    uint[] memory amountsDesired_\r\n  ) external returns (uint[] memory amountsConsumed, uint liquidityOut) {\r\n    EnterLocalVariables memory vars = EnterLocalVariables({\r\n      pool: IPool(state.pair.pool),\r\n      lowerTick : state.pair.lowerTick,\r\n      upperTick : state.pair.upperTick,\r\n      tokenId : state.tokenId,\r\n      pId : state.pId\r\n    });\r\n    bool depositorSwapTokens = state.pair.depositorSwapTokens;\r\n    (address token0, address token1) = depositorSwapTokens ? (state.pair.tokenB, state.pair.tokenA) : (state.pair.tokenA, state.pair.tokenB);\r\n    if (depositorSwapTokens) {\r\n      (amountsDesired_[0], amountsDesired_[1]) = (amountsDesired_[1], amountsDesired_[0]);\r\n    }\r\n    amountsConsumed = new uint[](2);\r\n    uint128 liquidity;\r\n\r\n    if (vars.tokenId > 0) {\r\n      (IBasePositionManager.Position memory pos,) = KYBER_NFT.positions(vars.tokenId);\r\n      if (pos.tickLower != vars.lowerTick || pos.tickUpper != vars.upperTick) {\r\n        KYBER_NFT.burn(vars.tokenId);\r\n        vars.tokenId = 0;\r\n      }\r\n    }\r\n\r\n    if (vars.tokenId == 0) {\r\n      (vars.tokenId, liquidity, amountsConsumed[0], amountsConsumed[1]) = KYBER_NFT.mint(IBasePositionManager.MintParams(\r\n        token0,\r\n        token1,\r\n        IPool(state.pair.pool).swapFeeUnits(),\r\n        vars.lowerTick,\r\n        vars.upperTick,\r\n        KyberLib.getPreviousTicks(vars.pool, vars.lowerTick, vars.upperTick),\r\n        amountsDesired_[0],\r\n        amountsDesired_[1],\r\n        0,\r\n        0,\r\n        address(this),\r\n        block.timestamp\r\n      ));\r\n\r\n      state.tokenId = vars.tokenId;\r\n\r\n      {\r\n        if (!isFarmEnded(vars.pId)) {\r\n          uint[] memory nftIds = new uint[](1);\r\n          nftIds[0] = vars.tokenId;\r\n          uint[] memory liqs = new uint[](1);\r\n          liqs[0] = uint(liquidity);\r\n          FARMING_CENTER.deposit(nftIds);\r\n          state.staked = true;\r\n          FARMING_CENTER.join(vars.pId, nftIds, liqs);\r\n        }\r\n      }\r\n    } else {\r\n      (liquidity, amountsConsumed[0], amountsConsumed[1],) = KYBER_NFT.addLiquidity(IBasePositionManager.IncreaseLiquidityParams(\r\n        vars.tokenId,\r\n        KyberLib.getPreviousTicks(vars.pool, vars.lowerTick, vars.upperTick),\r\n        amountsDesired_[0],\r\n        amountsDesired_[1],\r\n        0,\r\n        0,\r\n        block.timestamp\r\n      ));\r\n\r\n      if (!isFarmEnded(vars.pId)) {\r\n        uint[] memory nftIds = new uint[](1);\r\n        nftIds[0] = vars.tokenId;\r\n        if (state.pair.totalLiquidity == 0) {\r\n          FARMING_CENTER.deposit(nftIds);\r\n          state.staked = true;\r\n        }\r\n\r\n        uint[] memory liqs = new uint[](1);\r\n        liqs[0] = uint(liquidity);\r\n        FARMING_CENTER.join(vars.pId, nftIds, liqs);\r\n      }\r\n    }\r\n\r\n    state.pair.totalLiquidity += liquidity;\r\n    liquidityOut = uint(liquidity);\r\n  }\r\n  //endregion ------------------------------------------------ Join the pool\r\n\r\n  //region ------------------------------------------------ Exit from the pool\r\n\r\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\r\n  function exit(\r\n    State storage state,\r\n    uint128 liquidityAmountToExit,\r\n    bool emergency\r\n  ) external returns (uint[] memory amountsOut) {\r\n    amountsOut = new uint[](2);\r\n\r\n    ExitLocalVariables memory vars = ExitLocalVariables({\r\n      strategyProfitHolder : state.pair.strategyProfitHolder,\r\n      pId : state.pId,\r\n      tokenA : state.pair.tokenA,\r\n      tokenB : state.pair.tokenB\r\n    });\r\n\r\n    uint128 liquidity = state.pair.totalLiquidity;\r\n\r\n    require(liquidity >= liquidityAmountToExit, KyberStrategyErrors.WRONG_LIQUIDITY);\r\n\r\n    bool staked = state.staked;\r\n\r\n    uint[] memory nftIds = new uint[](1);\r\n    nftIds[0] = state.tokenId;\r\n    uint[] memory liqs = new uint[](1);\r\n    uint feeA;\r\n    uint feeB;\r\n\r\n    // get rewards\r\n    if (staked) {\r\n      if (!emergency) {\r\n        uint reward = _harvest(nftIds[0], vars.pId);\r\n        // send to profit holder\r\n        if (reward > 0) {\r\n          IERC20(KNC).safeTransfer(vars.strategyProfitHolder, reward);\r\n        }\r\n\r\n        // get fees\r\n        // when exiting, fees are collected twice so as not to lose anything when rebalancing (the position goes out of range)\r\n        (feeA, feeB) = _claimFees(state);\r\n      }\r\n\r\n      liqs[0] = uint(liquidity);\r\n\r\n      FARMING_CENTER.exit(vars.pId, nftIds, liqs);\r\n\r\n      // withdraw\r\n      FARMING_CENTER.withdraw(nftIds);\r\n      state.staked = false;\r\n    }\r\n\r\n    // burn liquidity\r\n    uint rTokensOwed;\r\n    (amountsOut[0], amountsOut[1], rTokensOwed) = KYBER_NFT.removeLiquidity(IBasePositionManager.RemoveLiquidityParams(nftIds[0], liquidityAmountToExit, 0, 0, block.timestamp));\r\n\r\n    if (!emergency && rTokensOwed != 0) {\r\n//      KYBER_NFT.syncFeeGrowth(nftIds[0]);\r\n      (,uint amount0, uint amount1) = KYBER_NFT.burnRTokens(IBasePositionManager.BurnRTokenParams(nftIds[0], 0, 0, block.timestamp));\r\n      if (state.pair.depositorSwapTokens) {\r\n        feeA += amount1;\r\n        feeB += amount0;\r\n        emit KyberFeesClaimed(amount1, amount0);\r\n      } else {\r\n        feeA += amount0;\r\n        feeB += amount1;\r\n        emit KyberFeesClaimed(amount0, amount1);\r\n      }\r\n    }\r\n\r\n    // transfer tokens\r\n    KYBER_NFT.transferAllTokens(vars.tokenA, 0, address(this));\r\n    KYBER_NFT.transferAllTokens(vars.tokenB, 0, address(this));\r\n\r\n    // send fees to profit holder\r\n    if (feeA > 0) {\r\n      IERC20(vars.tokenA).safeTransfer(vars.strategyProfitHolder, feeA);\r\n    }\r\n    if (feeB > 0) {\r\n      IERC20(vars.tokenB).safeTransfer(vars.strategyProfitHolder, feeB);\r\n    }\r\n\r\n    liquidity -= liquidityAmountToExit;\r\n    state.pair.totalLiquidity = liquidity;\r\n\r\n    if (liquidity != 0 && !isFarmEnded(vars.pId)) {\r\n      liqs[0] = uint(liquidity);\r\n      FARMING_CENTER.deposit(nftIds);\r\n      state.staked = true;\r\n      FARMING_CENTER.join(vars.pId, nftIds, liqs);\r\n    }\r\n  }\r\n\r\n  function quoteExit(\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint128 liquidityAmountToExit\r\n  ) public view returns (uint[] memory amountsOut) {\r\n    (uint160 sqrtRatioX96, , ,) = IPool(pairState.pool).getPoolState();\r\n    amountsOut = new uint[](2);\r\n    (amountsOut[0], amountsOut[1]) = KyberLib.getAmountsForLiquidity(\r\n      sqrtRatioX96,\r\n      pairState.lowerTick,\r\n      pairState.upperTick,\r\n      liquidityAmountToExit\r\n    );\r\n    if (pairState.depositorSwapTokens) {\r\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n    }\r\n  }\r\n  //endregion ------------------------------------------------ Exit from the pool\r\n\r\n  //region ------------------------------------------------ Rewards\r\n\r\n  function claimRewardsBeforeExitIfRequired(State storage state) external {\r\n    (,bool needUnstake) = needRebalanceStaking(state);\r\n    if (needUnstake) {\r\n      claimRewards(state, false);\r\n    }\r\n  }\r\n\r\n  function claimRewards(State storage state, bool transferFromProfitHolder) public returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    address strategyProfitHolder = state.pair.strategyProfitHolder;\r\n    uint tokenId = state.tokenId;\r\n    tokensOut = new address[](3);\r\n    tokensOut[0] = state.pair.tokenA;\r\n    tokensOut[1] = state.pair.tokenB;\r\n    tokensOut[2] = KNC;\r\n\r\n    balancesBefore = new uint[](3);\r\n    for (uint i; i < tokensOut.length; i++) {\r\n      balancesBefore[i] = AppLib.balance(tokensOut[i]);\r\n    }\r\n\r\n    amountsOut = new uint[](3);\r\n    if (tokenId > 0 && state.pair.totalLiquidity > 0) {\r\n      (amountsOut[0], amountsOut[1]) = _claimFees(state);\r\n      amountsOut[2] = _harvest(tokenId, state.pId);\r\n      if (!transferFromProfitHolder) {\r\n        if (amountsOut[0] > 0) {\r\n          IERC20(tokensOut[0]).safeTransfer(strategyProfitHolder, amountsOut[0]);\r\n        }\r\n        if (amountsOut[1] > 0) {\r\n          IERC20(tokensOut[1]).safeTransfer(strategyProfitHolder, amountsOut[1]);\r\n        }\r\n        if (amountsOut[2] > 0) {\r\n          IERC20(tokensOut[2]).safeTransfer(strategyProfitHolder, amountsOut[2]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (transferFromProfitHolder) {\r\n      for (uint i; i < tokensOut.length; ++i) {\r\n        uint b = IERC20(tokensOut[i]).balanceOf(strategyProfitHolder);\r\n        if (b > 0) {\r\n          IERC20(tokensOut[i]).transferFrom(strategyProfitHolder, address(this), b);\r\n          amountsOut[i] += b;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function _claimFees(State storage state) internal returns (uint amountA, uint amountB) {\r\n    uint[] memory nftIds = new uint[](1);\r\n    nftIds[0] = state.tokenId;\r\n    address tokenA = state.pair.tokenA;\r\n    address tokenB = state.pair.tokenB;\r\n    uint bABefore = AppLib.balance(tokenA);\r\n    uint bBBefore = AppLib.balance(tokenB);\r\n\r\n    // this extracting fees method was disabled because it can trigger revert 'No rToken to burn'\r\n    // reproduced in test test/strategies/polygon/pair/PairBasedStrategyActionResponseIntTest.ts\r\n    // (uint token0Owed, uint token1Owed) = TICKS_FEES_READER.getTotalFeesOwedToPosition(address(KYBER_NFT), state.pair.pool, nftIds[0]);\r\n    // if (token0Owed > 0 || token1Owed > 0) {\r\n\r\n    (IBasePositionManager.Position memory pos,) = KYBER_NFT.positions(nftIds[0]);\r\n    if (pos.rTokenOwed > 0) {\r\n      FARMING_CENTER.claimFee(nftIds, 0, 0, state.pair.pool, false, block.timestamp);\r\n\r\n      amountA = AppLib.balance(tokenA) - bABefore;\r\n      amountB = AppLib.balance(tokenB) - bBBefore;\r\n      emit KyberFeesClaimed(amountA, amountB);\r\n    }\r\n  }\r\n\r\n  function _harvest(uint tokenId, uint pId) internal returns (uint amount) {\r\n    uint[] memory nftIds = new uint[](1);\r\n    nftIds[0] = tokenId;\r\n    uint[] memory pids = new uint[](1);\r\n    pids[0] = pId;\r\n    IKyberSwapElasticLM.HarvestData memory data = IKyberSwapElasticLM.HarvestData({\r\n      pIds: pids\r\n    });\r\n    bytes[] memory datas = new bytes[](1);\r\n    datas[0] = abi.encode(data);\r\n    uint bBefore = AppLib.balance(KNC);\r\n    FARMING_CENTER.harvestMultiplePools(nftIds, datas);\r\n    amount = AppLib.balance(KNC) - bBefore;\r\n    if (amount > 0) {\r\n      emit KyberRewardsClaimed(amount);\r\n    }\r\n  }\r\n\r\n  function calcEarned(address asset, address controller, address[] memory rewardTokens, uint[] memory amounts) external view returns (uint) {\r\n    ITetuLiquidator liquidator = ITetuLiquidator(IController(controller).liquidator());\r\n    uint len = rewardTokens.length;\r\n    uint earned;\r\n    for (uint i; i < len; ++i) {\r\n      address token = rewardTokens[i];\r\n      if (token == asset) {\r\n        earned += amounts[i];\r\n      } else {\r\n        earned += liquidator.getPrice(rewardTokens[i], asset, amounts[i]);\r\n      }\r\n    }\r\n\r\n    return earned;\r\n  }\r\n  //endregion ------------------------------------------------ Rewards\r\n\r\n  //region ------------------------------------------------ Rebalance\r\n  /// @notice Determine if the strategy needs to be rebalanced.\r\n  /// @return needRebalance A boolean indicating if {rebalanceNoSwaps} should be called\r\n  function needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage pairState, ITetuConverter converter_) external view returns (\r\n    bool needRebalance\r\n  ) {\r\n    address pool = pairState.pool;\r\n    // poolPrice should have same decimals as a price from oracle == 18\r\n    uint poolPriceAdjustment = PairBasedStrategyLib.getPoolPriceAdjustment(IERC20Metadata(pairState.tokenA).decimals());\r\n    uint poolPrice = KyberLib.getPrice(pool, pairState.tokenB) * poolPriceAdjustment;\r\n    (needRebalance, , ) = PairBasedStrategyLogicLib.needStrategyRebalance(\r\n      pairState,\r\n      converter_,\r\n      KyberDebtLib.getCurrentTick(IPool(pool)),\r\n      poolPrice\r\n    );\r\n  }\r\n\r\n  function needRebalanceStaking(State storage state) public view returns (bool needStake, bool needUnstake) {\r\n    bool farmEnded = isFarmEnded(state.pId);\r\n    bool haveLiquidity = state.pair.totalLiquidity > 0;\r\n    bool staked = state.staked;\r\n    needStake = haveLiquidity && !farmEnded && !staked;\r\n    needUnstake = haveLiquidity && farmEnded && staked;\r\n  }\r\n\r\n  function isFarmEnded(uint pId) public view returns(bool) {\r\n    (,,uint endTime,,,,,) = FARMING_CENTER.getPoolInfo(pId);\r\n    return endTime < block.timestamp;\r\n  }\r\n\r\n  /// @notice Make rebalance without swaps (using borrowing only).\r\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\r\n  /// @param checkNeedRebalance_ True if the function should ensure that the rebalance is required\r\n  /// @param totalAssets_ Current value of totalAssets()\r\n  /// @return tokenAmounts Token amounts for deposit. If length == 0 - rebalance wasn't made and no deposit is required.\r\n  function rebalanceNoSwaps(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    address[2] calldata converterLiquidator,\r\n    uint totalAssets_,\r\n    uint profitToCover,\r\n    address splitter,\r\n    bool checkNeedRebalance_,\r\n    mapping(address => uint) storage liquidityThresholds_,\r\n    bool needStakeOrUnstakeOnly\r\n  ) external returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    RebalanceLocal memory v;\r\n    _initLocalVars(v, ITetuConverter(converterLiquidator[0]), pairState, liquidityThresholds_);\r\n    v.poolPrice = KyberLib.getPrice(address(v.pool), pairState.tokenB) * v.poolPriceAdjustment;\r\n    bool needRebalance;\r\n    int24 tick = KyberDebtLib.getCurrentTick(v.pool);\r\n    (needRebalance, v.fuseStatusChangedAB, v.fuseStatusAB) = PairBasedStrategyLogicLib.needStrategyRebalance(\r\n      pairState,\r\n      v.converter,\r\n      tick,\r\n      v.poolPrice\r\n    );\r\n\r\n    // update fuse status if necessary\r\n    if (needRebalance) {\r\n      // we assume here, that needRebalance is true if any fuse has changed state, see needStrategyRebalance impl\r\n      PairBasedStrategyLogicLib.updateFuseStatus(pairState, v.fuseStatusChangedAB, v.fuseStatusAB);\r\n    }\r\n\r\n    require(!checkNeedRebalance_ || needRebalance, KyberStrategyErrors.NO_REBALANCE_NEEDED);\r\n\r\n    // rebalancing debt, setting new tick range\r\n    if (needRebalance || needStakeOrUnstakeOnly) {\r\n      KyberDebtLib.rebalanceNoSwaps(converterLiquidator, pairState, profitToCover, totalAssets_, splitter, v.liquidationThresholdsAB, tick);\r\n\r\n      uint loss;\r\n      (loss, tokenAmounts) = ConverterStrategyBaseLib2.getTokenAmountsPair(v.converter, totalAssets_, v.tokenA, v.tokenB, v.liquidationThresholdsAB);\r\n      if (loss != 0) {\r\n        ConverterStrategyBaseLib2.coverLossAndCheckResults(csbs, splitter, loss);\r\n      }\r\n      emit Rebalanced(loss, profitToCover, 0);\r\n    }\r\n\r\n    return tokenAmounts;\r\n  }\r\n\r\n  /// @notice Initialize {v} by state values\r\n  function _initLocalVars(\r\n    RebalanceLocal memory v,\r\n    ITetuConverter converter_,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    mapping(address => uint) storage liquidityThresholds_\r\n  ) internal view {\r\n    v.pool = IPool(pairState.pool);\r\n    v.fuseAB = pairState.fuseAB;\r\n    v.converter = converter_;\r\n    v.tokenA = pairState.tokenA;\r\n    v.tokenB = pairState.tokenB;\r\n    v.isStablePool = pairState.isStablePool;\r\n    v.liquidationThresholdsAB[0] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenA]);\r\n    v.liquidationThresholdsAB[1] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenB]);\r\n    uint poolPriceDecimals = IERC20Metadata(v.tokenA).decimals();\r\n    v.poolPriceAdjustment = poolPriceDecimals < 18 ? 10 ** (18 - poolPriceDecimals) : 1;\r\n  }\r\n\r\n  /// @notice Get proportion of not-underlying in the pool, [0...1e18]\r\n  ///         prop.underlying : prop.not.underlying = 1e18 - PropNotUnderlying18 : propNotUnderlying18\r\n  function getPropNotUnderlying18(PairBasedStrategyLogicLib.PairState storage pairState) view external returns (uint) {\r\n    // get pool proportions\r\n    IPool pool = IPool(pairState.pool);\r\n    bool depositorSwapTokens = pairState.depositorSwapTokens;\r\n    (int24 newLowerTick, int24 newUpperTick) = KyberDebtLib._calcNewTickRange(pool, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\r\n    (uint consumed0, uint consumed1) = KyberDebtLib.getEntryDataProportions(pool, newLowerTick, newUpperTick, depositorSwapTokens);\r\n\r\n    require(consumed0 + consumed1 > 0, AppErrors.ZERO_VALUE);\r\n    return consumed1 * 1e18 / (consumed0 + consumed1);\r\n  }\r\n  //endregion ------------------------------------------------ Rebalance\r\n\r\n  //region ------------------------------------------------ WithdrawByAgg\r\n  /// @param addr_ [tokenToSwap, aggregator, controller, converter, splitter]\r\n  /// @param values_ [amountToSwap_, profitToCover, oldTotalAssets, entryToPool]\r\n  /// @return completed All debts were closed, leftovers were swapped to proper proportions\r\n  /// @return tokenAmountsOut Amounts to be deposited to pool. This array is empty if no deposit allowed/required.\r\n  function withdrawByAggStep(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    address[5] calldata addr_,\r\n    uint[4] calldata values_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    mapping(address => uint) storage liquidationThresholds\r\n  ) external returns (\r\n    bool completed,\r\n    uint[] memory tokenAmountsOut\r\n  ) {\r\n    uint entryToPool = values_[3];\r\n    address[2] memory tokens = [pairState.tokenA, pairState.tokenB];\r\n\r\n    // Calculate amounts to be deposited to pool, calculate loss, fix profitToCover\r\n    uint[] memory tokenAmounts;\r\n    uint loss;\r\n    (completed, tokenAmounts, loss) = PairBasedStrategyLogicLib.withdrawByAggStep(addr_, values_, swapData, planEntryData, tokens, liquidationThresholds);\r\n\r\n    // cover loss\r\n    if (loss != 0) {\r\n      ConverterStrategyBaseLib2.coverLossAndCheckResults(\r\n        csbs,\r\n        addr_[4], // splitter\r\n        loss\r\n      );\r\n    }\r\n    emit RebalancedDebt(loss, values_[1], 0);\r\n\r\n    if (entryToPool == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED\r\n      || (entryToPool == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED && completed)\r\n    ) {\r\n      // We are going to enter to the pool: update lowerTick and upperTick, initialize tokenAmountsOut\r\n      (pairState.lowerTick, pairState.upperTick) = KyberDebtLib._calcNewTickRange(\r\n        IPool(pairState.pool),\r\n        pairState.lowerTick,\r\n        pairState.upperTick,\r\n        pairState.tickSpacing\r\n      );\r\n      tokenAmountsOut = tokenAmounts;\r\n    }\r\n\r\n    return (completed, tokenAmountsOut); // hide warning\r\n  }\r\n  //endregion ------------------------------------------------ WithdrawByAgg\r\n}\r\n"
    },
    "contracts/strategies/kyber/KyberDebtLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../ConverterStrategyBaseLib.sol\";\r\nimport \"../ConverterStrategyBaseLib2.sol\";\r\nimport \"./KyberLib.sol\";\r\nimport \"./KyberStrategyErrors.sol\";\r\nimport \"./KyberConverterStrategyLogicLib.sol\";\r\nimport \"../../libs/BorrowLib.sol\";\r\nimport \"../pair/PairBasedStrategyLib.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\nlibrary KyberDebtLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n  //region  -------------------------------------------- Entry data\r\n  /// @notice Calculate proportions of the tokens for entry kind 1\r\n  /// @param pool Pool instance\r\n  /// @param lowerTick The lower tick of the pool's main range.\r\n  /// @param upperTick The upper tick of the pool's main range.\r\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\r\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  function getEntryDataProportions(\r\n    IPool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    bool depositorSwapTokens\r\n  ) internal view returns (uint, uint) {\r\n    address token1 = address(pool.token1());\r\n    uint token1Price = KyberLib.getPrice(address(pool), token1);\r\n\r\n    uint token1Decimals = IERC20Metadata(token1).decimals();\r\n\r\n    uint token0Desired = token1Price;\r\n    uint token1Desired = 10 ** token1Decimals;\r\n    require(token1Desired != 0, AppErrors.ZERO_VALUE);\r\n\r\n    // calculate proportions\r\n    (uint consumed0, uint consumed1,) = KyberLib.addLiquidityPreview(address(pool), lowerTick, upperTick, token0Desired, token1Desired);\r\n    return depositorSwapTokens\r\n      ? (1e18*consumed1 * token1Price / token1Desired, 1e18*consumed0)\r\n      : (1e18*consumed0, 1e18*consumed1 * token1Price / token1Desired);\r\n  }\r\n\r\n  function getEntryData(\r\n    IPool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    bool depositorSwapTokens\r\n  ) public view returns (bytes memory entryData) {\r\n    (uint prop0, uint prop1) = getEntryDataProportions(pool, lowerTick, upperTick, depositorSwapTokens);\r\n    entryData = abi.encode(1, prop0, prop1);\r\n  }\r\n  //endregion  -------------------------------------------- Entry data\r\n\r\n  //region  -------------------------------------------- Calc tick range\r\n  function calcTickRange(IPool pool, int24 tickRange, int24 tickSpacing) public view returns (int24 lowerTick, int24 upperTick) {\r\n    (, int24 tick, ,) = pool.getPoolState();\r\n    return PairBasedStrategyLogicLib.calcTickRange(tick, tickRange, tickSpacing);\r\n  }\r\n\r\n  function getCurrentTick(IPool pool) public view returns(int24 tick) {\r\n    (, tick, ,) = pool.getPoolState();\r\n  }\r\n\r\n  /// @notice Calculate the new tick range for a Kyber pool, the tick is read from the pool\r\n  /// @param pool The Kyber pool to calculate the new tick range for.\r\n  /// @param lowerTick The current lower tick value for the pool.\r\n  /// @param upperTick The current upper tick value for the pool.\r\n  /// @param tickSpacing The tick spacing for the pool.\r\n  /// @return lowerTickNew The new lower tick value for the pool.\r\n  /// @return upperTickNew The new upper tick value for the pool.\r\n  function _calcNewTickRange(\r\n    IPool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing\r\n  ) internal view returns (int24 lowerTickNew, int24 upperTickNew) {\r\n    int24 currentTick = getCurrentTick(pool);\r\n    return _calcNewTickRangeForTick(currentTick, lowerTick, upperTick, tickSpacing);\r\n  }\r\n\r\n  /// @notice Calculate the new tick range for a Kyber pool, the tick is already known\r\n  function _calcNewTickRangeForTick(\r\n    int24 currentTick,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing\r\n  ) internal pure returns (int24 lowerTickNew, int24 upperTickNew) {\r\n    int24 fullTickRange = upperTick - lowerTick;\r\n    int24 tickRange = fullTickRange == tickSpacing\r\n      ? int24(0)\r\n      : fullTickRange / 2;\r\n    return PairBasedStrategyLogicLib.calcTickRange(currentTick, tickRange, tickSpacing);\r\n  }\r\n  //endregion  -------------------------------------------- Calc tick range\r\n\r\n  //region  -------------------------------------------- Rebalance\r\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\r\n  function rebalanceNoSwaps(\r\n    address[2] calldata converterLiquidator,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint profitToCover,\r\n    uint totalAssets,\r\n    address splitter,\r\n    uint[2] calldata liquidationThresholdsAB,\r\n    int24 tick\r\n  ) external {\r\n    (int24 newLowerTick, int24 newUpperTick) = _calcNewTickRangeForTick(tick, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\r\n    (uint prop0, uint prop1) = getEntryDataProportions(IPool(pairState.pool), newLowerTick, newUpperTick, pairState.depositorSwapTokens);\r\n    PairBasedStrategyLogicLib._rebalanceNoSwaps(\r\n      converterLiquidator,\r\n      pairState,\r\n      profitToCover,\r\n      totalAssets,\r\n      splitter,\r\n  liquidationThresholdsAB,\r\n      prop0 * BorrowLib.SUM_PROPORTIONS / (prop0 + prop1)\r\n    );\r\n    (pairState.lowerTick, pairState.upperTick) = (newLowerTick, newUpperTick);\r\n  }\r\n  //endregion  -------------------------------------------- Rebalance\r\n}\r\n"
    },
    "contracts/strategies/kyber/KyberDepositor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\";\r\nimport \"../DepositorBase.sol\";\r\nimport \"./KyberStrategyErrors.sol\";\r\nimport \"./KyberConverterStrategyLogicLib.sol\";\r\n\r\n\r\nabstract contract KyberDepositor is DepositorBase, Initializable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                CONSTANTS\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev Version of this contract. Adjust manually on each code modification.\r\n  string public constant KYBER_DEPOSITOR_VERSION = \"1.0.0\";\r\n\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A = 0;\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B = 1;\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_KNC = 2;\r\n  uint internal constant IDX_SS_FLAGS_STAKED = 0;\r\n  uint internal constant IDX_SS_FLAGS_NEED_STAKE = 1;\r\n  uint internal constant IDX_SS_FLAGS_NEED_UNSTAKE = 2;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                VARIABLES\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev State variable to store the current state of the whole strategy\r\n  KyberConverterStrategyLogicLib.State internal state;\r\n\r\n  /// @dev reserve space for future needs\r\n  uint[100 - 63] private __gap;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                       View\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Returns the current state of the contract.\r\n  /// @return nums Balances of the profit holder for [tokenA, tokenB, KNC]\r\n  /// @return flags [staked, needStake, needUnstake]\r\n  function getSpecificState() external view returns (\r\n    uint[] memory nums,\r\n    bool[] memory flags\r\n  ) {\r\n    address profitHolder = state.pair.strategyProfitHolder;\r\n    nums = new uint[](3);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A] = IERC20(state.pair.tokenA).balanceOf(profitHolder);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B] = IERC20(state.pair.tokenB).balanceOf(profitHolder);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_KNC] = IERC20(KyberConverterStrategyLogicLib.KNC).balanceOf(profitHolder);\r\n    flags = new bool[](3);\r\n    flags[IDX_SS_FLAGS_STAKED] = state.staked;\r\n    (flags[IDX_SS_FLAGS_NEED_STAKE], flags[IDX_SS_FLAGS_NEED_UNSTAKE]) = KyberConverterStrategyLogicLib.needRebalanceStaking(state);\r\n  }\r\n\r\n  /// @notice Returns the pool assets.\r\n  /// @return poolAssets An array containing the addresses of the pool assets.\r\n  function _depositorPoolAssets() override internal virtual view returns (address[] memory poolAssets) {\r\n    poolAssets = new address[](2);\r\n    poolAssets[0] = state.pair.tokenA;\r\n    poolAssets[1] = state.pair.tokenB;\r\n  }\r\n\r\n  /// @notice Returns the pool weights and the total weight.\r\n  /// @return weights An array containing the weights of the pool assets, and totalWeight the sum of the weights.\r\n  function _depositorPoolWeights() override internal virtual view returns (uint[] memory weights, uint totalWeight) {\r\n    weights = new uint[](2);\r\n    weights[0] = 1;\r\n    weights[1] = 1;\r\n    totalWeight = 2;\r\n  }\r\n\r\n  /// @notice Returns the pool reserves.\r\n  /// @return reserves An array containing the reserves of the pool assets.\r\n  function _depositorPoolReserves() override internal virtual view returns (uint[] memory reserves) {\r\n    return KyberConverterStrategyLogicLib.getPoolReserves(state.pair);\r\n  }\r\n\r\n  /// @notice Returns the current liquidity of the depositor.\r\n  /// @return The current liquidity of the depositor.\r\n  function _depositorLiquidity() override internal virtual view returns (uint) {\r\n    return uint(state.pair.totalLiquidity);\r\n  }\r\n\r\n  /// @notice Returns the total supply of the depositor.\r\n  /// @return In UniV3 we can not calculate the total supply of the whole pool. Return only ourself value.\r\n  function _depositorTotalSupply() override internal view virtual returns (uint) {\r\n    return uint(state.pair.totalLiquidity);\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Enter, exit\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Handles the deposit operation.\r\n  function _depositorEnter(uint[] memory amountsDesired_) override internal virtual returns (uint[] memory amountsConsumed, uint liquidityOut) {\r\n    (amountsConsumed, liquidityOut) = KyberConverterStrategyLogicLib.enter(state, amountsDesired_);\r\n  }\r\n\r\n  /// @notice Handles the withdrawal operation.\r\n  /// @param liquidityAmount The amount of liquidity to be withdrawn.\r\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\r\n  /// @return amountsOut The amounts of the tokens withdrawn.\r\n  function _depositorExit(uint liquidityAmount, bool emergency) override internal virtual returns (uint[] memory amountsOut) {\r\n    amountsOut = KyberConverterStrategyLogicLib.exit(state, uint128(liquidityAmount), emergency);\r\n  }\r\n\r\n  /// @notice Returns the amount of tokens that would be withdrawn based on the provided liquidity amount.\r\n  /// @param liquidityAmount The amount of liquidity to quote the withdrawal for.\r\n  /// @return amountsOut The amounts of the tokens that would be withdrawn.\r\n  function _depositorQuoteExit(uint liquidityAmount) override internal virtual returns (uint[] memory amountsOut) {\r\n    amountsOut = KyberConverterStrategyLogicLib.quoteExit(state.pair, uint128(liquidityAmount));\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Claim rewards\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Claims all possible rewards.\r\n  /// @return tokensOut An array containing the addresses of the reward tokens,\r\n  /// @return amountsOut An array containing the amounts of the reward tokens.\r\n  function _depositorClaimRewards() override internal virtual returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    return KyberConverterStrategyLogicLib.claimRewards(state, true);\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/kyber/KyberLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../integrations/kyber/IPool.sol\";\r\nimport \"../../integrations/kyber/IBasePositionManager.sol\";\r\nimport \"../../integrations/kyber/IKyberSwapElasticLM.sol\";\r\nimport \"../../integrations/kyber/ITicksFeesReader.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n\r\nlibrary KyberLib {\r\n  uint8 internal constant RESOLUTION = 96;\r\n  uint internal constant Q96 = 0x1000000000000000000000000;\r\n  uint private constant TWO_96 = 2 ** 96;\r\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n  uint160 private constant MIN_SQRT_RATIO = 4295128739 + 1;\r\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n  uint160 private constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\r\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n  int24 internal constant MIN_TICK = - 887272;\r\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n  int24 internal constant MAX_TICK = - MIN_TICK;\r\n\r\n  function getPreviousTicks(IPool pool, int24 tickLower, int24 tickUpper) external view returns (int24[2] memory ticks) {\r\n    (ticks[0],) = _getNearestInitializedTicks(pool, tickLower);\r\n    (ticks[1],) = _getNearestInitializedTicks(pool, tickUpper);\r\n  }\r\n\r\n  function _getNearestInitializedTicks(IPool pool, int24 tick) internal view returns (int24 previous, int24 next) {\r\n    require(MIN_TICK <= tick && tick <= MAX_TICK, 'tick not in range');\r\n    // if queried tick already initialized, fetch and return values\r\n    (previous, next) = pool.initializedTicks(tick);\r\n    if (previous != 0 || next != 0) return (previous, next);\r\n\r\n    // search downtick from MAX_TICK\r\n    if (tick > 0) {\r\n      previous = MAX_TICK;\r\n      while (previous > tick) {\r\n        (previous, ) = pool.initializedTicks(previous);\r\n      }\r\n      (, next) = pool.initializedTicks(previous);\r\n    } else {\r\n      // search uptick from MIN_TICK\r\n      next = MIN_TICK;\r\n      while (next < tick) {\r\n        (, next) = pool.initializedTicks(next);\r\n      }\r\n      (previous, ) = pool.initializedTicks(next);\r\n    }\r\n  }\r\n\r\n  function getTickSpacing(IPool pool) external view returns (int24) {\r\n    return pool.tickDistance();\r\n  }\r\n\r\n  function addLiquidityPreview(address pool_, int24 lowerTick_, int24 upperTick_, uint amount0Desired_, uint amount1Desired_) external view returns (uint amount0Consumed, uint amount1Consumed, uint128 liquidityOut) {\r\n    IPool pool = IPool(pool_);\r\n    (uint160 sqrtRatioX96, , ,) = pool.getPoolState();\r\n    liquidityOut = getLiquidityForAmounts(sqrtRatioX96, lowerTick_, upperTick_, amount0Desired_, amount1Desired_);\r\n    (amount0Consumed, amount1Consumed) = getAmountsForLiquidity(sqrtRatioX96, lowerTick_, upperTick_, liquidityOut);\r\n  }\r\n\r\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getLiquidityForAmounts(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint amount0,\r\n    uint amount1\r\n  ) public pure returns (uint128 liquidity) {\r\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\r\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      liquidity = _getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      uint128 liquidity0 = _getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n      uint128 liquidity1 = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n    }\r\n  }\r\n\r\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getAmountsForLiquidity(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint128 liquidity\r\n  ) public pure returns (uint amount0, uint amount1) {\r\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\r\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\r\n\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      amount0 = _getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      amount0 = _getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\r\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\r\n    } else {\r\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n  function mulDiv(\r\n    uint a,\r\n    uint b,\r\n    uint denominator\r\n  ) public pure returns (uint result) {\r\n    unchecked {\r\n      // 512-bit multiply [prod1 prod0] = a * b\r\n      // Compute the product mod 2**256 and mod 2**256 - 1\r\n      // then use the Chinese Remainder Theorem to reconstruct\r\n      // the 512 bit result. The result is stored in two 256\r\n      // variables such that product = prod1 * 2**256 + prod0\r\n      uint prod0;\r\n      // Least significant 256 bits of the product\r\n      uint prod1;\r\n      // Most significant 256 bits of the product\r\n      assembly {\r\n        let mm := mulmod(a, b, not(0))\r\n        prod0 := mul(a, b)\r\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n      }\r\n\r\n      // Handle non-overflow cases, 256 by 256 division\r\n      if (prod1 == 0) {\r\n        require(denominator > 0);\r\n        assembly {\r\n          result := div(prod0, denominator)\r\n        }\r\n        return result;\r\n      }\r\n\r\n      // Make sure the result is less than 2**256.\r\n      // Also prevents denominator == 0\r\n      require(denominator > prod1);\r\n\r\n      ///////////////////////////////////////////////\r\n      // 512 by 256 division.\r\n      ///////////////////////////////////////////////\r\n\r\n      // Make division exact by subtracting the remainder from [prod1 prod0]\r\n      // Compute remainder using mulmod\r\n      uint remainder;\r\n      assembly {\r\n        remainder := mulmod(a, b, denominator)\r\n      }\r\n      // Subtract 256 bit number from 512 bit number\r\n      assembly {\r\n        prod1 := sub(prod1, gt(remainder, prod0))\r\n        prod0 := sub(prod0, remainder)\r\n      }\r\n\r\n      // Factor powers of two out of denominator\r\n      // Compute largest power of two divisor of denominator.\r\n      // Always >= 1.\r\n      // EDIT for 0.8 compatibility:\r\n      // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint\r\n      uint twos = denominator & (~denominator + 1);\r\n\r\n      // Divide denominator by power of two\r\n      assembly {\r\n        denominator := div(denominator, twos)\r\n      }\r\n\r\n      // Divide [prod1 prod0] by the factors of two\r\n      assembly {\r\n        prod0 := div(prod0, twos)\r\n      }\r\n      // Shift in bits from prod1 into prod0. For this we need\r\n      // to flip `twos` such that it is 2**256 / twos.\r\n      // If twos is zero, then it becomes one\r\n      assembly {\r\n        twos := add(div(sub(0, twos), twos), 1)\r\n      }\r\n      prod0 |= prod1 * twos;\r\n\r\n      // Invert denominator mod 2**256\r\n      // Now that denominator is an odd number, it has an inverse\r\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n      // Compute the inverse by starting with a seed that is correct\r\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n      uint inv = (3 * denominator) ^ 2;\r\n      // Now use Newton-Raphson iteration to improve the precision.\r\n      // Thanks to Hensel's lifting lemma, this also works in modular\r\n      // arithmetic, doubling the correct bits in each step.\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**8\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**16\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**32\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**64\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**128\r\n      inv *= 2 - denominator * inv;\r\n      // inverse mod 2**256\r\n\r\n      // Because the division is now exact we can divide by multiplying\r\n      // with the modular inverse of denominator. This will give us the\r\n      // correct result modulo 2**256. Since the precoditions guarantee\r\n      // that the outcome is less than 2**256, this is the final result.\r\n      // We don't need to compute the high bits of the result and prod1\r\n      // is no longer required.\r\n      result = prod0 * inv;\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  function mulDivRoundingUp(\r\n    uint a,\r\n    uint b,\r\n    uint denominator\r\n  ) internal pure returns (uint result) {\r\n    result = mulDiv(a, b, denominator);\r\n    if (mulmod(a, b, denominator) > 0) {\r\n      require(result < type(uint).max);\r\n      result++;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates price in pool\r\n  /// @return price with decimals of paired token\r\n  function getPrice(address pool_, address tokenIn) public view returns (uint) {\r\n    IPool pool = IPool(pool_);\r\n    address token0 = address(pool.token0());\r\n    address token1 = address(pool.token1());\r\n\r\n    uint tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,) = pool.getPoolState();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (tokenIn == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n    return purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount0 The amount0 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function _getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount0) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    uint intermediate = mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\r\n    return _toUint128(mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount1 The amount1 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function _getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount1) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return _toUint128(mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount0 The amount0\r\n  function _getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount0) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return mulDivRoundingUp(1, mulDivRoundingUp(uint(liquidity) << RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96), sqrtRatioAX96);\r\n  }\r\n\r\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount1 The amount1\r\n  function _getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount1) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function _min(uint a, uint b) internal pure returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function _max(uint a, uint b) internal pure returns (uint) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  function _toUint128(uint x) private pure returns (uint128 y) {\r\n    require((y = uint128(x)) == x);\r\n  }\r\n\r\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n  /// @dev Throws if |tick| > max tick\r\n  /// @param tick The input tick for the above formula\r\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n  /// at the given tick\r\n  function _getSqrtRatioAtTick(int24 tick)\r\n  internal\r\n  pure\r\n  returns (uint160 sqrtPriceX96)\r\n  {\r\n    uint256 absTick =\r\n      tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\r\n\r\n    // EDIT: 0.8 compatibility\r\n    require(absTick <= uint256(int256(MAX_TICK)), \"T\");\r\n\r\n    uint256 ratio =\r\n      absTick & 0x1 != 0\r\n        ? 0xfffcb933bd6fad37aa2d162d1a594001\r\n        : 0x100000000000000000000000000000000;\r\n    if (absTick & 0x2 != 0)\r\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n    if (absTick & 0x4 != 0)\r\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n    if (absTick & 0x8 != 0)\r\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n    if (absTick & 0x10 != 0)\r\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n    if (absTick & 0x20 != 0)\r\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n    if (absTick & 0x40 != 0)\r\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n    if (absTick & 0x80 != 0)\r\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n    if (absTick & 0x100 != 0)\r\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n    if (absTick & 0x200 != 0)\r\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n    if (absTick & 0x400 != 0)\r\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n    if (absTick & 0x800 != 0)\r\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n    if (absTick & 0x1000 != 0)\r\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n    if (absTick & 0x2000 != 0)\r\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n    if (absTick & 0x4000 != 0)\r\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n    if (absTick & 0x8000 != 0)\r\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n    if (absTick & 0x10000 != 0)\r\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n    if (absTick & 0x20000 != 0)\r\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n    if (absTick & 0x40000 != 0)\r\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n    if (absTick & 0x80000 != 0)\r\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n    if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n    sqrtPriceX96 = uint160(\r\n      (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\r\n    );\r\n  }\r\n\r\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n  /// ever return.\r\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n  function _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n    // second inequality must be < because the price can never reach the price at the max tick\r\n    require(\r\n      sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\r\n      \"R\"\r\n    );\r\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n    uint256 r = ratio;\r\n    uint256 msb = 0;\r\n\r\n    assembly {\r\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(5, gt(r, 0xFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(4, gt(r, 0xFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(3, gt(r, 0xFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(2, gt(r, 0xF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(1, gt(r, 0x3))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := gt(r, 0x1)\r\n      msb := or(msb, f)\r\n    }\r\n\r\n    if (msb >= 128) r = ratio >> (msb - 127);\r\n    else r = ratio << (127 - msb);\r\n\r\n    int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(63, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(62, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(61, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(60, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(59, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(58, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(57, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(56, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(55, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(54, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(53, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(52, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(51, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(50, f))\r\n    }\r\n\r\n    tick = _getFinalTick(log_2, sqrtPriceX96);\r\n  }\r\n\r\n  function _getFinalTick(int256 log_2, uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n    // 128.128 number\r\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141;\r\n\r\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n    tick = (tickLow == tickHi)\r\n      ? tickLow\r\n      : (_getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow);\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/kyber/KyberStrategyErrors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nlibrary KyberStrategyErrors {\r\n\r\n  string public constant NEED_REBALANCE = \"KS-1 Need rebalance\";\r\n  string public constant WRONG_BALANCE = \"KS-2 Wrong balance\";\r\n  string public constant INCORRECT_TICK_RANGE = \"KS-3 Incorrect tickRange\";\r\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \"KS-4 Incorrect rebalanceTickRange\";\r\n  string public constant INCORRECT_ASSET = \"KS-5 Incorrect asset\";\r\n  string public constant WRONG_FEE = \"KS-6 Wrong fee\";\r\n  string public constant WRONG_LIQUIDITY = \"KS-7 Wrong liquidity\";\r\n  string public constant NO_REBALANCE_NEEDED = \"KS-9 No rebalance needed\";\r\n  string public constant BALANCE_LOWER_THAN_FEE = \"KS-10 Balance lower than fee\";\r\n  string public constant NOT_CALLBACK_CALLER = \"KS-11 Not callback caller\";\r\n  string public constant ZERO_PROFIT_HOLDER = \"KS-13 Zero strategy profit holder\";\r\n  string public constant NOT_UNSTAKED = \"KS-14 Liquidity must be unstaked\";\r\n  string public constant FUSE_IS_ACTIVE = \"KS-14 Fuse is active\";\r\n}\r\n"
    },
    "contracts/strategies/pair/PairBasedStrategyLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"../ConverterStrategyBaseLib.sol\";\r\nimport \"../../interfaces/IPoolProportionsProvider.sol\";\r\nimport \"../../libs/BorrowLib.sol\";\r\n\r\n/// @notice Library for the UniV3-like strategies with two tokens in the pool\r\n/// @dev The library contains quoteWithdrawStep/withdrawStep-related logic\r\nlibrary PairBasedStrategyLib {\r\n  //region ------------------------------------------------ Constants\r\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\r\n  /// @notice In all functions below array {token} contains underlying at the first position\r\n  uint internal constant IDX_ASSET = 0;\r\n  /// @notice In all functions below array {token} contains not-underlying at the second position\r\n  uint internal constant IDX_TOKEN = 1;\r\n\r\n  uint internal constant IDX_SWAP_1 = 0;\r\n  uint internal constant IDX_REPAY_1 = 1;\r\n  uint internal constant IDX_SWAP_2 = 2;\r\n  uint internal constant IDX_REPAY_2 = 3;\r\n\r\n  /// @notice A gap to reduce AmountToSwap calculated inside quoteWithdrawByAgg, [0...100_000]\r\n  uint public constant GAP_AMOUNT_TO_SWAP = 100;\r\n\r\n  /// @notice Enter to the pool at the end of withdrawByAggStep\r\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED = 1;\r\n  /// @notice Enter to the pool at the end of withdrawByAggStep only if full withdrawing has been completed\r\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED = 2;\r\n\r\n  /// @notice Fuse thresholds are set as array: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  ///         If the price falls below LOWER_LIMIT_ON the fuse is turned ON\r\n  ///         When the prices raises back and reaches LOWER_LIMIT_OFF, the fuse is turned OFF\r\n  ///         In the same way, if the price raises above UPPER_LIMIT_ON the fuse is turned ON\r\n  ///         When the prices falls back and reaches UPPER_LIMIT_OFF, the fuse is turned OFF\r\n  ///\r\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\r\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\r\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\r\n  uint public constant FUSE_IDX_LOWER_LIMIT_ON = 0;\r\n  uint public constant FUSE_IDX_LOWER_LIMIT_OFF = 1;\r\n  uint public constant FUSE_IDX_UPPER_LIMIT_ON = 2;\r\n  uint public constant FUSE_IDX_UPPER_LIMIT_OFF = 3;\r\n\r\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_A = 0;\r\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_B = 1;\r\n  uint public constant IDX_ADDR_DEFAULT_STATE_POOL = 2;\r\n  uint public constant IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER = 3;\r\n\r\n  uint public constant IDX_TICK_DEFAULT_STATE_TICK_SPACING = 0;\r\n  uint public constant IDX_TICK_DEFAULT_STATE_LOWER_TICK = 1;\r\n  uint public constant IDX_TICK_DEFAULT_STATE_UPPER_TICK = 2;\r\n  uint public constant IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE = 3;\r\n\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY = 0;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_FUSE_STATUS = 1;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_0 = 2;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE = 3;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_0 = 4;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_1 = 5;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_2 = 6;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_3 = 7;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_1 = 8;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_2 = 9;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_3 = 10;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_4 = 11;\r\n  uint public constant IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP = 12;\r\n\r\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL = 0;\r\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS = 1;\r\n\r\n  /// @notice 1inch router V5 (Polygon, Base)\r\n  address internal constant ONEINCH = 0x1111111254EEB25477B68fb85Ed929f73A960582;\r\n  /// @notice OpenOceanExchangeProxy (Polygon and many other chains)\r\n  /// @dev See https://docs.openocean.finance/dev/contracts-of-chains\r\n  address internal constant OPENOCEAN = 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64;\r\n  /// @notice OpenOceanExchangeProxy (zkEVM)\r\n  /// @dev See https://docs.openocean.finance/dev/contracts-of-chains\r\n  address internal constant OPENOCEAN_ZKEVM = 0x6dd434082EAB5Cd134B33719ec1FF05fE985B97b;\r\n\r\n  string public constant UNKNOWN_SWAP_ROUTER = \"PBS-1 Unknown router\";\r\n  string public constant INCORRECT_TICK_RANGE = \"PBS-3 Incorrect tickRange\";\r\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \"PBS-4 Incorrect rebalanceTickRange\";\r\n  string public constant INCORRECT_ASSET = \"PBS-5 Incorrect asset\";\r\n\r\n  //endregion ------------------------------------------------ Constants\r\n\r\n  //region ------------------------------------------------ Data types\r\n  /// @notice The fuse is triggered when the price rises above or falls below the limit 1.\r\n  ///         If the fuse was triggered, all assets are withdrawn from the pool on the strategy balance.\r\n  ///         Then all debts should be closed and all assets should be converted to underlying.\r\n  ///         The fuse is turned off automatically when the price falls below or rises above the limit 2\r\n  ///         and all assets are deposited back to the pool.\r\n  enum FuseStatus {\r\n    /// @notice Fuse is not used at all\r\n    FUSE_DISABLED_0,\r\n    /// @notice Fuse is not triggered, assets are deposited to the pool\r\n    FUSE_OFF_1,\r\n    /// @notice Fuse was triggered by lower limit, assets was withdrawn from the pool, but active debts can exist\r\n    FUSE_ON_LOWER_LIMIT_2,\r\n    /// @notice Fuse was triggered by upper limit, assets was withdrawn from the pool, but active debts can exist\r\n    FUSE_ON_UPPER_LIMIT_3\r\n  }\r\n\r\n  struct SwapByAggParams {\r\n    bool useLiquidator;\r\n    address tokenToSwap;\r\n    /// @notice Aggregator to make swap\r\n    ///         It is 0 if useLiquidator is true\r\n    ///         It can be equal to address of liquidator if we use liquidator as aggregator (in tests)\r\n    address aggregator;\r\n    uint amountToSwap;\r\n    /// @notice Swap-data prepared off-chain (route, amounts, etc). 0 - use liquidator to make swap\r\n    bytes swapData;\r\n  }\r\n\r\n  struct GetAmountToRepay2Local {\r\n    uint x;\r\n    uint y;\r\n    uint c0;\r\n    uint b0;\r\n    uint alpha;\r\n    int b;\r\n  }\r\n\r\n  struct FuseStateParams {\r\n    FuseStatus status;\r\n    /// @notice Price thresholds [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n    /// @dev see PairBasedStrategyLib.FUSE_IDX_XXX\r\n    uint[4] thresholds;\r\n\r\n    /// @notice reserve space for future needs\r\n    uint[4] __gap;\r\n  }\r\n  //endregion ------------------------------------------------ Data types\r\n\r\n  //region ------------------------------------------------ Events\r\n  event FuseStatusChanged(uint fuseStatus);\r\n  event NewFuseThresholds(uint[4] newFuseThresholds);\r\n  event SwapByAgg(\r\n    uint amountToSwap,\r\n    uint amountIn,\r\n    uint amountOut,\r\n    uint expectedAmountOut,\r\n    address aggregator,\r\n    address assetIn,\r\n    address assetOut\r\n  );\r\n  //endregion ------------------------------------------------ Events\r\n\r\n  //region ------------------------------------------------ External withdraw functions\r\n\r\n  /// @notice Get info for the swap that will be made on the next call of {withdrawStep}\r\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\r\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\r\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\r\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\r\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\r\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\r\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\r\n  ///                            Value type(uint).max means that the proportions should be read from the pool.\r\n  ///     entryDataParam It contains \"required-amount-to-reduce-debt\" in REPAY-SWAP-REPAY case\r\n  /// @param amountsFromPool Amounts of {tokens} that will be received from the pool before calling withdraw\r\n  /// @return tokenToSwap Address of the token that will be swapped on the next swap. 0 - no swap\r\n  /// @return amountToSwap Amount that will be swapped on the next swap. 0 - no swap\r\n  ///                      This amount is NOT reduced on {GAP_AMOUNT_TO_SWAP}, it should be reduced after the call if necessary.\r\n  function quoteWithdrawStep(\r\n    address[2] memory converterLiquidator_,\r\n    address[] memory tokens,\r\n    uint[] memory liquidationThresholds,\r\n    uint[] memory amountsFromPool,\r\n    uint planKind,\r\n    uint[2] memory entryDataValues\r\n  ) external returns (\r\n    address tokenToSwap,\r\n    uint amountToSwap\r\n  ){\r\n    (uint[] memory prices,\r\n      uint[] memory decs\r\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\r\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\r\n      converter: ITetuConverter(converterLiquidator_[0]),\r\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\r\n      tokens: tokens,\r\n      liquidationThresholds: liquidationThresholds,\r\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\r\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\r\n        : entryDataValues[0],\r\n      prices: prices,\r\n      decs: decs,\r\n      balanceAdditions: amountsFromPool,\r\n      planKind: planKind,\r\n      usePoolProportions: entryDataValues[0] == type(uint).max,\r\n      entryDataParam: entryDataValues[1]\r\n    });\r\n    return _quoteWithdrawStep(p);\r\n  }\r\n\r\n  /// @notice Make withdraw step with 0 or 1 swap only. The step can make one of the following actions:\r\n  ///         1) repay direct debt 2) repay reverse debt 3) final swap leftovers of not-underlying asset\r\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\r\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\r\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\r\n  /// @param tokenToSwap_ Address of the token that will be swapped on the next swap. 0 - no swap\r\n  /// @param amountToSwap_ Amount that will be swapped on the next swap. 0 - no swap\r\n  /// @param aggregator_ Aggregator that should be used for the next swap. 0 - no swap\r\n  /// @param swapData_ Swap data to be passed to the aggregator on the next swap.\r\n  ///                  Swap data contains swap-route, amount and all other required info for the swap.\r\n  ///                  Swap data should be prepared on-chain on the base of data received by {quoteWithdrawStep}\r\n  /// @param useLiquidator_ Use liquidator instead of aggregator.\r\n  ///                       Aggregator swaps amount reduced on {GAP_AMOUNT_TO_SWAP}.\r\n  ///                       Liquidator doesn't use {GAP_AMOUNT_TO_SWAP}.\r\n  ///                       It's allowed to pass liquidator address in {aggregator_} and set {useLiquidator_} to false -\r\n  ///                       the liquidator will be used in same way as aggregator in this case.\r\n  /// @param planKind One of IterationPlanLib.PLAN_XXX\r\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\r\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\r\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\r\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\r\n  ///     entryDataParam It contains \"required-amount-to-reduce-debt\" in REPAY-SWAP-REPAY case\r\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions\r\n  function withdrawStep(\r\n    address[2] memory converterLiquidator_,\r\n    address[] memory tokens,\r\n    uint[] memory liquidationThresholds,\r\n    address tokenToSwap_,\r\n    uint amountToSwap_,\r\n    address aggregator_,\r\n    bytes memory swapData_,\r\n    bool useLiquidator_,\r\n    uint planKind,\r\n    uint[2] memory entryDataValues\r\n  ) external returns (\r\n    bool completed\r\n  ){\r\n    (uint[] memory prices,\r\n      uint[] memory decs\r\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\r\n\r\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\r\n      converter: ITetuConverter(converterLiquidator_[0]),\r\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\r\n      tokens: tokens,\r\n      liquidationThresholds: liquidationThresholds,\r\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\r\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\r\n        : entryDataValues[0],\r\n      prices: prices,\r\n      decs: decs,\r\n      balanceAdditions: new uint[](2), // 2 = tokens.length\r\n      planKind: planKind,\r\n      usePoolProportions: entryDataValues[0] == type(uint).max,\r\n      entryDataParam: entryDataValues[1]\r\n    });\r\n    SwapByAggParams memory aggParams = SwapByAggParams({\r\n      tokenToSwap: tokenToSwap_,\r\n      amountToSwap: amountToSwap_,\r\n      useLiquidator: useLiquidator_,\r\n      aggregator: aggregator_,\r\n      swapData: swapData_\r\n    });\r\n    return _withdrawStep(p, aggParams);\r\n  }\r\n  //endregion ------------------------------------------------ External withdraw functions\r\n\r\n  //region ------------------------------------------------ Fuse functions\r\n  function setFuseStatus(FuseStateParams storage fuse, FuseStatus status) external {\r\n    fuse.status = status;\r\n    emit FuseStatusChanged(uint(status));\r\n  }\r\n\r\n  function setFuseThresholds(FuseStateParams storage state, uint[4] memory values) external {\r\n    require(\r\n      (values[FUSE_IDX_LOWER_LIMIT_ON] == 0 && values[FUSE_IDX_LOWER_LIMIT_OFF] == 0)\r\n      || (values[FUSE_IDX_LOWER_LIMIT_ON] <= values[FUSE_IDX_LOWER_LIMIT_OFF]),\r\n      AppErrors.INVALID_VALUE\r\n    );\r\n    require(\r\n      (values[FUSE_IDX_UPPER_LIMIT_ON] == 0 && values[FUSE_IDX_UPPER_LIMIT_OFF] == 0)\r\n      || (values[FUSE_IDX_UPPER_LIMIT_ON] >= values[FUSE_IDX_UPPER_LIMIT_OFF]),\r\n      AppErrors.INVALID_VALUE\r\n    );\r\n    if (values[FUSE_IDX_LOWER_LIMIT_ON] != 0 && values[FUSE_IDX_UPPER_LIMIT_ON] != 0) {\r\n      require(\r\n        values[FUSE_IDX_UPPER_LIMIT_ON] > values[FUSE_IDX_LOWER_LIMIT_ON],\r\n        AppErrors.INVALID_VALUE\r\n      );\r\n    }\r\n    state.thresholds = values;\r\n    emit NewFuseThresholds(values);\r\n  }\r\n\r\n  function isFuseTriggeredOn(PairBasedStrategyLib.FuseStatus fuseStatus) internal pure returns (bool) {\r\n    return uint(fuseStatus) > uint(PairBasedStrategyLib.FuseStatus.FUSE_OFF_1);\r\n  }\r\n\r\n  /// @notice Check if the fuse should be turned ON/OFF\r\n  /// @param price Current price in the oracle\r\n  /// @param poolPrice Current price in the pool\r\n  /// @return needToChange A boolean indicating if the fuse status should be changed\r\n  /// @return status Exist fuse status or new fuse status (if needToChange is true)\r\n  function needChangeFuseStatus(FuseStateParams memory fuse, uint price, uint poolPrice) internal pure returns (\r\n    bool needToChange,\r\n    FuseStatus status\r\n  ) {\r\n    if (fuse.status != FuseStatus.FUSE_DISABLED_0) {\r\n      if (fuse.status == FuseStatus.FUSE_OFF_1) {\r\n        // currently fuse is OFF\r\n        if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON]) {\r\n          needToChange = true;\r\n          status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\r\n        } else if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\r\n          needToChange = true;\r\n          status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\r\n        }\r\n      } else {\r\n        if (fuse.status == FuseStatus.FUSE_ON_LOWER_LIMIT_2) {\r\n          // currently fuse is triggered ON by lower limit\r\n          if (price >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] && poolPrice >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\r\n            needToChange = true;\r\n            if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\r\n              status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\r\n            } else {\r\n              status = FuseStatus.FUSE_OFF_1;\r\n            }\r\n          }\r\n        } else {\r\n          // currently fuse is triggered ON by upper limit\r\n          if (price <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF] && poolPrice <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF]) {\r\n            needToChange = true;\r\n            if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\r\n              status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\r\n            } else {\r\n              status = FuseStatus.FUSE_OFF_1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return (needToChange, needToChange ? status : fuse.status);\r\n  }\r\n  //endregion ------------------------------------------------ Fuse functions\r\n\r\n  //region ------------------------------------------------ Internal helper functions\r\n  /// @notice Quote amount of the next swap if any.\r\n  ///         Swaps are required if direct-borrow exists OR reverse-borrow exists or not underlying leftovers exist\r\n  ///         Function returns info for first swap only.\r\n  /// @return tokenToSwap What token should be swapped. Zero address if no swap is required\r\n  /// @return amountToSwap Amount to swap. Zero if no swap is required.\r\n  function _quoteWithdrawStep(IterationPlanLib.SwapRepayPlanParams memory p) internal returns (\r\n    address tokenToSwap,\r\n    uint amountToSwap\r\n  ) {\r\n    uint indexTokenToSwapPlus1;\r\n    (indexTokenToSwapPlus1, amountToSwap,) = IterationPlanLib.buildIterationPlan(\r\n      [address(p.converter), address(p.liquidator)],\r\n      p.tokens,\r\n      p.liquidationThresholds,\r\n      p.prices,\r\n      p.decs,\r\n      p.balanceAdditions,\r\n      [\r\n        p.usePoolProportions ? 1 : 0,\r\n        p.planKind,\r\n        p.propNotUnderlying18,\r\n        type(uint).max,\r\n        IDX_ASSET,\r\n        IDX_TOKEN,\r\n        p.entryDataParam\r\n      ]\r\n    );\r\n    if (indexTokenToSwapPlus1 != 0) {\r\n      tokenToSwap = p.tokens[indexTokenToSwapPlus1 - 1];\r\n    }\r\n    return (tokenToSwap, amountToSwap);\r\n  }\r\n\r\n  /// @notice Make one iteration of withdraw. Each iteration can make 0 or 1 swap only\r\n  ///         We can make only 1 of the following 3 operations per single call:\r\n  ///         1) repay direct debt 2) repay reverse debt 3) swap leftovers to underlying\r\n  function _withdrawStep(IterationPlanLib.SwapRepayPlanParams memory p, SwapByAggParams memory aggParams) internal returns (\r\n    bool completed\r\n  ) {\r\n    (uint idxToSwap1, uint amountToSwap, uint idxToRepay1) = IterationPlanLib.buildIterationPlan(\r\n      [address(p.converter), address(p.liquidator)],\r\n      p.tokens,\r\n      p.liquidationThresholds,\r\n      p.prices,\r\n      p.decs,\r\n      p.balanceAdditions,\r\n      [\r\n        p.usePoolProportions ? 1 : 0,\r\n        p.planKind,\r\n        p.propNotUnderlying18,\r\n        type(uint).max,\r\n        IDX_ASSET,\r\n        IDX_TOKEN,\r\n        p.entryDataParam\r\n      ]\r\n    );\r\n\r\n    bool[4] memory actions = [\r\n      p.planKind == IterationPlanLib.PLAN_SWAP_ONLY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // swap 1\r\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // repay 1\r\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, // swap 2\r\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY // repay 2\r\n      ];\r\n\r\n    if (idxToSwap1 != 0 && actions[IDX_SWAP_1]) {\r\n      (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\r\n    }\r\n\r\n    if (idxToRepay1 != 0 && actions[IDX_REPAY_1]) {\r\n      ConverterStrategyBaseLib._repayDebt(\r\n        p.converter,\r\n        p.tokens[idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET],\r\n        p.tokens[idxToRepay1 - 1],\r\n        IERC20(p.tokens[idxToRepay1 - 1]).balanceOf(address(this))\r\n      );\r\n    }\r\n\r\n    if (idxToSwap1 != 0) {\r\n      if (actions[IDX_SWAP_2]) {\r\n        (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\r\n\r\n        if (actions[IDX_REPAY_2] && idxToRepay1 != 0) {\r\n          // see calculations inside estimateSwapAmountForRepaySwapRepay\r\n          // There are two possibilities here:\r\n          // 1) All collateral asset available on balance was swapped. We need additional repay to get assets in right proportions\r\n          // 2) Only part of collateral asset was swapped, so assets are already in right proportions. Repay 2 is not needed\r\n          (uint amountToRepay2, bool borrowInsteadRepay) = _getAmountToRepay2(\r\n            p,\r\n            idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET,\r\n            idxToRepay1 - 1\r\n          );\r\n\r\n          if (borrowInsteadRepay) {\r\n            _borrowToProportions(p, idxToRepay1 - 1, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, true);\r\n\r\n          } else if (amountToRepay2 > p.liquidationThresholds[idxToRepay1 - 1]) {\r\n            _secondRepay(p, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, idxToRepay1 - 1, amountToRepay2, type(uint).max);\r\n          }\r\n        }\r\n      } else {\r\n        // leftovers were swapped, there are no debts anymore\r\n        // the swap can change pool proportions, so probably it's necessary to make additional borrow here\r\n        if (\r\n          idxToRepay1 == 0 // there are no debts anymore\r\n          && p.usePoolProportions  // we use proportions from the pool\r\n          && p.propNotUnderlying18 != 0 && p.propNotUnderlying18 != 1e18 // BorrowLib doesn't allow prop=0\r\n        ) {\r\n          _fixLeftoversProportions(p);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Withdraw is completed on last iteration (no debts, swapping leftovers)\r\n    return idxToRepay1 == 0;\r\n  }\r\n\r\n  /// @notice Make final repay in the scheme REPAY-SWAP-REPAY\r\n  ///         Depending on condition the final repay can be made several times or additional borrow can be made\r\n  /// @param amountToRepay Amount of {indexBorrow} asset that should be repaid\r\n  /// @param needToRepayPrev Amount-to-repay on previous call of the {_secondRepay}\r\n  ///                        This amount should decrease on each step of recursion.\r\n  ///                        if it doesn't decrease repay is not successfull and it's useless to continue to call repays\r\n  ///                        It can happen if liquidationThreshold has incorrect value (i.t. it's too low or zero)\r\n  function _secondRepay(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    uint indexCollateral,\r\n    uint indexBorrow,\r\n    uint amountToRepay,\r\n    uint needToRepayPrev\r\n  ) internal {\r\n    // we need to know repaidAmount\r\n    // we cannot relay on the value returned by _repayDebt because of SCB-710, we need to check balances\r\n    uint balanceBefore = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\r\n    ConverterStrategyBaseLib._repayDebt(p.converter, p.tokens[indexCollateral], p.tokens[indexBorrow], amountToRepay);\r\n    uint balanceAfter = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\r\n\r\n    uint repaidAmount = balanceBefore > balanceAfter\r\n      ? balanceBefore - balanceAfter\r\n      : 0;\r\n\r\n    if (repaidAmount < amountToRepay && amountToRepay - repaidAmount > p.liquidationThresholds[indexBorrow]) {\r\n      // repaidAmount is less than expected\r\n      // we need to make additional borrow OR probably make one more repay\r\n      // repaidAmount can be less amountToRepay2 even if there is still opened debt, see SCB-777\r\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexCollateral], p.tokens[indexBorrow], true);\r\n      if (\r\n        needToRepay > p.liquidationThresholds[indexBorrow]\r\n        && needToRepay < needToRepayPrev // amount of debt was reduced on prev iteration of recursion\r\n      ) {\r\n        // more repays are required\r\n        _secondRepay(p, indexCollateral, indexBorrow, amountToRepay - repaidAmount, needToRepay);\r\n      } else {\r\n        _borrowToProportions(p, indexBorrow, indexCollateral, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Set balances to right proportions using borrow\r\n  ///         (it can be necessary if propNotUnderlying18 was changed after swap)\r\n  function _fixLeftoversProportions(IterationPlanLib.SwapRepayPlanParams memory p) internal {\r\n    uint balanceAsset = IERC20(p.tokens[IDX_ASSET]).balanceOf(address(this));\r\n    uint balanceToken = IERC20(p.tokens[IDX_TOKEN]).balanceOf(address(this));\r\n    (uint targetAssets,\r\n      uint targetTokens\r\n    ) = IterationPlanLib._getTargetAmounts(p.prices, p.decs, balanceAsset, balanceToken, p.propNotUnderlying18, IDX_ASSET, IDX_TOKEN);\r\n\r\n    if (balanceAsset > targetAssets) {\r\n      if (balanceAsset - targetAssets > p.liquidationThresholds[IDX_ASSET]) {\r\n        _borrowToProportions(p, IDX_ASSET, IDX_TOKEN, balanceAsset, balanceToken, true);\r\n      }\r\n    } else if (balanceToken > targetTokens) {\r\n      if (balanceToken - targetTokens > p.liquidationThresholds[IDX_ASSET]) {\r\n        _borrowToProportions(p, IDX_TOKEN, IDX_ASSET, balanceToken, balanceAsset, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\r\n  function _borrowToProportions(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    uint indexCollateral,\r\n    uint indexBorrow,\r\n    bool checkOppositDebtDoesntExist\r\n  ) internal {\r\n    _borrowToProportions(\r\n      p,\r\n      indexCollateral,\r\n      indexBorrow,\r\n      IERC20(p.tokens[indexCollateral]).balanceOf(address(this)),\r\n      IERC20(p.tokens[indexBorrow]).balanceOf(address(this)),\r\n      checkOppositDebtDoesntExist\r\n    );\r\n  }\r\n\r\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\r\n  function _borrowToProportions(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    uint indexCollateral,\r\n    uint indexBorrow,\r\n    uint balanceCollateral,\r\n    uint balanceBorrow,\r\n    bool checkOppositDebtDoesntExist\r\n  ) internal {\r\n    // we are going to change direction of the borrow\r\n    // let's ensure that there is no debt in opposite direction\r\n    if (checkOppositDebtDoesntExist) {\r\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexBorrow], p.tokens[indexCollateral], false);\r\n      require(needToRepay < AppLib.DUST_AMOUNT_TOKENS, AppErrors.OPPOSITE_DEBT_EXISTS);\r\n    }\r\n\r\n    BorrowLib.RebalanceAssetsCore memory cac = BorrowLib.RebalanceAssetsCore({\r\n      converterLiquidator: BorrowLib.ConverterLiquidator(p.converter, p.liquidator),\r\n      assetA: p.tokens[indexCollateral],\r\n      assetB: p.tokens[indexBorrow],\r\n      propA: indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18,\r\n      propB: indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18,\r\n    // {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\r\n      alpha18: 1e18 * p.prices[indexBorrow] * p.decs[indexCollateral] / p.prices[indexCollateral] / p.decs[indexBorrow],\r\n      thresholdA: p.liquidationThresholds[indexCollateral],\r\n      addonA: 0,\r\n      addonB: 0,\r\n      indexA: indexCollateral,\r\n      indexB: indexBorrow\r\n    });\r\n\r\n    BorrowLib.openPosition(\r\n      cac,\r\n      BorrowLib.PricesDecs({\r\n        prices: p.prices,\r\n        decs: p.decs\r\n      }),\r\n      balanceCollateral,\r\n      balanceBorrow\r\n    );\r\n  }\r\n\r\n  /// @notice Calculate amount that should be repaid to get right proportions of assets on balance\r\n  ///         Analyse only single borrow-direction: indexCollateral => indexBorrow\r\n  /// @return amountToRepay Amount that should be repaid\r\n  /// @return borrowInsteadRepay true if repay is not necessary at all and borrow is required instead\r\n  ///                            if we need both repay and borrow then false is returned\r\n  function _getAmountToRepay2(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    uint indexCollateral,\r\n    uint indexBorrow\r\n  ) internal view returns (\r\n    uint amountToRepay,\r\n    bool borrowInsteadRepay\r\n  ) {\r\n    GetAmountToRepay2Local memory v;\r\n    v.c0 = IERC20(p.tokens[indexCollateral]).balanceOf(address(this)) * p.prices[indexCollateral] / p.decs[indexCollateral];\r\n    v.b0 = IERC20(p.tokens[indexBorrow]).balanceOf(address(this)) * p.prices[indexBorrow] / p.decs[indexBorrow];\r\n\r\n    v.x = indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18;\r\n    v.y = indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18;\r\n    v.alpha = p.prices[indexCollateral] * p.decs[indexBorrow] * 1e18 / p.prices[indexBorrow] / p.decs[indexCollateral];\r\n\r\n    (uint needToRepay, uint collateralAmountOut) = p.converter.getDebtAmountStored(\r\n      address(this),\r\n      p.tokens[indexCollateral],\r\n      p.tokens[indexBorrow],\r\n      true\r\n    );\r\n\r\n    if (needToRepay == 0) {\r\n      // check if we need to make reverse borrow to fit to proportions: borrow collateral-asset under borrow-asset\r\n      uint targetCollateral = (v.c0 + v.b0) * v.x / (v.x + v.y);\r\n      borrowInsteadRepay = targetCollateral > v.c0\r\n        && targetCollateral - v.c0\r\n        > (p.liquidationThresholds[indexCollateral] * p.prices[indexCollateral] / p.decs[indexCollateral]);\r\n    } else {\r\n      // initial balances: c0, b0\r\n      // we are going to repay amount b and receive (betta * b, b), where betta ~ alpha * totalCollateral / totalBorrow\r\n      // we should have x/y = (c0 + betta * b) / (b0 - b)\r\n      // so b = (x * b0 - y * c0) / (betta * y + x)\r\n      v.b = (int(v.x * v.b0) - int(v.y * v.c0)) / (int(v.y * v.alpha * collateralAmountOut / needToRepay / 1e18) + int(v.x));\r\n      if (v.b > 0) {\r\n        amountToRepay = uint(v.b);\r\n      }\r\n    }\r\n\r\n    return (amountToRepay * p.decs[indexBorrow] / p.prices[indexBorrow], borrowInsteadRepay);\r\n  }\r\n\r\n  /// @notice Swap {aggParams.amountToSwap} using either liquidator or aggregator\r\n  /// @dev You can use liquidator as aggregator, so aggregator's logic will be used for the liquidator\r\n  /// @param amountIn Calculated amount to be swapped. It can be different from {aggParams.amountToSwap} a bit,\r\n  ///                 but aggregators require exact value {aggParams.amountToSwap}, so amountIn is not used with agg.\r\n  function _swap(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    SwapByAggParams memory aggParams,\r\n    uint indexIn,\r\n    uint indexOut,\r\n    uint amountIn\r\n  ) internal returns (\r\n    uint spentAmountIn,\r\n    uint updatedPropNotUnderlying18\r\n  ) {\r\n    // liquidator and aggregator have different logic here:\r\n    // - liquidator uses amountIn to swap\r\n    // - Aggregator uses amountToSwap for which a route was built off-chain before the call of the swap()\r\n    // It's allowed to use aggregator == liquidator, so in this way liquidator will use aggregator's logic (for tests)\r\n\r\n    if (!aggParams.useLiquidator) {\r\n      // aggregator requires exact input amount - aggParams.amountToSwap\r\n      // actual amount can be a bit different because the quote function was called in different block\r\n      amountIn = aggParams.amountToSwap;\r\n    }\r\n    address aggregator = aggParams.useLiquidator\r\n      ? address(p.liquidator)\r\n      : aggParams.aggregator;\r\n\r\n    require(amountIn <= IERC20(p.tokens[indexIn]).balanceOf(address(this)), AppErrors.NOT_ENOUGH_BALANCE);\r\n    // let's ensure that \"next swap\" is made using correct token\r\n    require(aggParams.tokenToSwap == p.tokens[indexIn], AppErrors.INCORRECT_SWAP_BY_AGG_PARAM);\r\n\r\n    if (amountIn > p.liquidationThresholds[indexIn]) {\r\n      AppLib.approveIfNeeded(p.tokens[indexIn], amountIn, aggregator);\r\n\r\n      uint balanceTokenOutBefore = AppLib.balance(p.tokens[indexOut]);\r\n\r\n      if (aggParams.useLiquidator) {\r\n\r\n        (spentAmountIn,) = ConverterStrategyBaseLib._liquidate(\r\n          p.converter,\r\n          ITetuLiquidator(aggregator),\r\n          p.tokens[indexIn],\r\n          p.tokens[indexOut],\r\n          amountIn,\r\n          _ASSET_LIQUIDATION_SLIPPAGE,\r\n          p.liquidationThresholds[indexIn],\r\n          true\r\n        );\r\n      } else {\r\n        if (aggregator != address(p.liquidator)) {\r\n          _checkSwapRouter(aggregator);\r\n        }\r\n\r\n        (bool success, bytes memory result) = aggregator.call(aggParams.swapData);\r\n        require(success, string(result));\r\n\r\n        spentAmountIn = amountIn;\r\n      }\r\n\r\n      require(\r\n        p.converter.isConversionValid(\r\n          p.tokens[indexIn],\r\n          amountIn,\r\n          p.tokens[indexOut],\r\n          AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\r\n          _ASSET_LIQUIDATION_SLIPPAGE\r\n        ), AppErrors.PRICE_IMPACT);\r\n\r\n      emit SwapByAgg(\r\n        aggParams.amountToSwap,\r\n        amountIn,\r\n        AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\r\n        amountIn * p.prices[indexIn] * p.decs[indexOut] / p.prices[indexOut] / p.decs[indexIn],\r\n        aggregator,\r\n        p.tokens[indexIn],\r\n        p.tokens[indexOut]\r\n      );\r\n    }\r\n\r\n    return (\r\n      spentAmountIn,\r\n    // p.propNotUnderlying18 contains original proportions that were valid before the swap\r\n    // after swap() we need to re-read new values from the pool\r\n      p.usePoolProportions\r\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\r\n        : p.propNotUnderlying18\r\n    );\r\n  }\r\n  //endregion ------------------------------------------------ Internal helper functions\r\n\r\n  //region ----------------------------------------- Utils\r\n  function getPoolPriceAdjustment(uint poolPriceDecimals) external pure returns (uint adjustment) {\r\n    // we assume that decimals never higher than 18\r\n    adjustment = poolPriceDecimals < 18 ? 10 ** (18 - poolPriceDecimals) : 1;\r\n  }\r\n\r\n  function _checkSwapRouter(address router) internal pure {\r\n    require(router == ONEINCH || router == OPENOCEAN || router == OPENOCEAN_ZKEVM, UNKNOWN_SWAP_ROUTER);\r\n  }\r\n\r\n  /// @notice Extract propNotUnderlying18 from {planEntryData} of the given {planKind}\r\n  function _extractProp(uint planKind, bytes memory planEntryData) internal pure returns (\r\n    uint propNotUnderlying18,\r\n    uint entryDataParamValue\r\n  ) {\r\n    if (planKind == IterationPlanLib.PLAN_SWAP_REPAY || planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\r\n      (, propNotUnderlying18) = abi.decode(planEntryData, (uint, uint));\r\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\r\n    } else {\r\n      require(planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, AppErrors.WRONG_VALUE);\r\n      // save \"required-amount-to-reduce-debt\" to entryDataParamValue\r\n      (, propNotUnderlying18, entryDataParamValue) = abi.decode(planEntryData, (uint, uint, uint));\r\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\r\n    }\r\n    return (propNotUnderlying18, entryDataParamValue);\r\n  }\r\n  //endregion ------------------------------------------ Utils\r\n}\r\n"
    },
    "contracts/strategies/pair/PairBasedStrategyLogicLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"../ConverterStrategyBaseLib.sol\";\r\nimport \"./PairBasedStrategyLib.sol\";\r\nimport \"../ConverterStrategyBaseLib2.sol\";\r\n\r\n/// @notice Library for the UniV3-like strategies with two tokens in the pool\r\nlibrary PairBasedStrategyLogicLib {\r\n  //region ------------------------------------------------------- Data types\r\n  /// @notice Local variables required inside withdrawByAggStep and quoteWithdrawByAgg\r\n  struct WithdrawLocal {\r\n    /// @notice [underlying, not-underlying]\r\n    address[] tokens;\r\n    address controller;\r\n    /// @notice liquidationThresholds for the {tokens}, greater or equal to {DEFAULT_LIQUIDATION_THRESHOLD}\r\n    uint[] liquidationThresholds;\r\n    uint planKind;\r\n    uint propNotUnderlying18;\r\n    uint entryDataParam;\r\n  }\r\n\r\n  /// @notice Common part of all XXXXConverterStrategyLogicLib.State\r\n  struct PairState {\r\n    address pool;\r\n    address strategyProfitHolder;\r\n    /// @notice This is underlying\r\n    address tokenA;\r\n    /// @notice This is not underlying\r\n    address tokenB;\r\n\r\n    bool isStablePool;\r\n    /// @notice Tokens are swapped in the pool (pool.tokenB is underlying, pool.tokenA is not-underlying)\r\n    bool depositorSwapTokens;\r\n\r\n    int24 tickSpacing;\r\n    int24 lowerTick;\r\n    int24 upperTick;\r\n    int24 rebalanceTickRange;\r\n    uint128 totalLiquidity;\r\n\r\n    /// @notice Fuse for tokens\r\n    PairBasedStrategyLib.FuseStateParams fuseAB;\r\n\r\n    /// @notice 1 means that the fuse was triggered ON and then all debts were closed\r\n    ///         and assets were converter to underlying using withdrawStepByAgg.\r\n    ///         This flag is automatically cleared to 0 if fuse is triggered OFF.\r\n    uint withdrawDone;\r\n\r\n    /// @notice Timestamp of last call of rebalanceNoSwaps() or zero if withdrawByAggStep() was called last\r\n    uint lastRebalanceNoSwap;\r\n\r\n    /// @notice reserve space for future needs\r\n    uint[50 - 17] __gap;\r\n  }\r\n\r\n  struct RebalanceNoSwapsLocal {\r\n    address tokenA;\r\n    address tokenB;\r\n    bool depositorSwapTokens;\r\n    int24 newLowerTick;\r\n    int24 newUpperTick;\r\n    uint prop0;\r\n    uint prop1;\r\n  }\r\n\r\n  struct WithdrawByAggStepLocal {\r\n    PairBasedStrategyLogicLib.WithdrawLocal w;\r\n    address tokenToSwap;\r\n    address aggregator;\r\n    address controller;\r\n    address converter;\r\n    address splitter;\r\n    uint amountToSwap;\r\n    uint profitToCover;\r\n    uint oldTotalAssets;\r\n    uint entryToPool;\r\n  }\r\n  //endregion ------------------------------------------------------- Data types\r\n\r\n  //region ------------------------------------------------------- Events\r\n  //endregion ------------------------------------------------------- Events\r\n\r\n  //region ------------------------------------------------------- Helpers\r\n  /// @notice Prepare array of amounts ready to deposit, borrow missed amounts\r\n  /// @param amount_ Amount of tokenA\r\n  /// @param tokenA Underlying\r\n  /// @param tokenB Not-underlying\r\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\r\n  /// @param liquidationThresholds Dust-thresholds for the tokens A and B\r\n  /// @return tokenAmounts Amounts of token A and B to be deposited, [A, B]\r\n  function _beforeDeposit(\r\n    ITetuConverter tetuConverter_,\r\n    uint amount_,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint prop0,\r\n    mapping(address => uint) storage liquidationThresholds\r\n  ) external returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    return BorrowLib.prepareToDeposit(\r\n      tetuConverter_,\r\n      amount_,\r\n      [tokenA, tokenB],\r\n      [\r\n        AppLib._getLiquidationThreshold(liquidationThresholds[tokenA]),\r\n        AppLib._getLiquidationThreshold(liquidationThresholds[tokenB])\r\n      ],\r\n      prop0\r\n    );\r\n  }\r\n\r\n  /// @notice Initialize {dest} in place. Underlying is always first in {dest.tokens}.\r\n  /// @param tokens_ [underlying, not-underlying]\r\n  function initWithdrawLocal(\r\n    WithdrawLocal memory dest,\r\n    address[2] memory tokens_,\r\n    mapping(address => uint) storage liquidationThresholds,\r\n    bytes memory planEntryData,\r\n    address controller\r\n  ) internal view { // it's internal because it initializes {dest}\r\n    dest.controller = controller;\r\n    StrategyLib2.onlyOperators(dest.controller);\r\n\r\n    dest.planKind = IterationPlanLib.getEntryKind(planEntryData);\r\n    (dest.propNotUnderlying18, dest.entryDataParam)  = PairBasedStrategyLib._extractProp(dest.planKind, planEntryData);\r\n\r\n    dest.tokens = new address[](2);\r\n    (dest.tokens[0], dest.tokens[1]) = (tokens_[0], tokens_[1]);\r\n\r\n    dest.liquidationThresholds = new uint[](2);\r\n    dest.liquidationThresholds[0] = AppLib._getLiquidationThreshold(liquidationThresholds[dest.tokens[0]]);\r\n    dest.liquidationThresholds[1] = AppLib._getLiquidationThreshold(liquidationThresholds[dest.tokens[1]]);\r\n  }\r\n\r\n  function calcTickRange(int24 tick, int24 tickRange, int24 tickSpacing) public pure returns (\r\n    int24 lowerTick,\r\n    int24 upperTick\r\n  ) {\r\n    if (tick < 0 && tick / tickSpacing * tickSpacing != tick) {\r\n      lowerTick = ((tick - tickRange) / tickSpacing - 1) * tickSpacing;\r\n    } else {\r\n      lowerTick = (tick - tickRange) / tickSpacing * tickSpacing;\r\n    }\r\n    upperTick = tickRange == 0 ? lowerTick + tickSpacing : lowerTick + tickRange * 2;\r\n  }\r\n  //endregion ------------------------------------------------------- Helpers\r\n\r\n  //region ------------------------------------------------------- PairState-helpers\r\n  /// @notice Set the initial values to PairState instance\r\n  /// @param pairState Depositor storage state struct to be initialized\r\n  /// @param addr [pool, asset, pool.token0(), pool.token1()]\r\n  ///        asset: Underlying asset of the depositor.\r\n  /// @param tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  /// @param fuseThresholds Fuse thresholds for tokens (stable pool only)\r\n  function setInitialDepositorValues(\r\n    PairState storage pairState,\r\n    address[4] calldata addr,\r\n    int24[4] calldata tickData,\r\n    bool isStablePool_,\r\n    uint[4] calldata fuseThresholds\r\n  ) external {\r\n    pairState.pool = addr[0];\r\n    address asset = addr[1];\r\n    address token0 = addr[2];\r\n    address token1 = addr[3];\r\n\r\n    pairState.tickSpacing = tickData[0];\r\n    pairState.lowerTick = tickData[1];\r\n    pairState.upperTick = tickData[2];\r\n    pairState.rebalanceTickRange = tickData[3];\r\n\r\n    require(asset == token0 || asset == token1, PairBasedStrategyLib.INCORRECT_ASSET);\r\n    if (asset == token0) {\r\n      pairState.tokenA = token0;\r\n      pairState.tokenB = token1;\r\n      pairState.depositorSwapTokens = false;\r\n    } else {\r\n      pairState.tokenA = token1;\r\n      pairState.tokenB = token0;\r\n      pairState.depositorSwapTokens = true;\r\n    }\r\n\r\n    if (isStablePool_) {\r\n      /// for stable pools fuse can be enabled\r\n      pairState.isStablePool = true;\r\n      PairBasedStrategyLib.setFuseStatus(pairState.fuseAB, PairBasedStrategyLib.FuseStatus.FUSE_OFF_1);\r\n      PairBasedStrategyLib.setFuseThresholds(pairState.fuseAB, fuseThresholds);\r\n    }\r\n\r\n    // totalLiquidity is 0, no need to initialize\r\n    // withdrawDone is 0, no need to initialize\r\n  }\r\n\r\n  function updateFuseStatus(\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    bool fuseStatusChangedAB,\r\n    PairBasedStrategyLib.FuseStatus fuseStatusAB\r\n  ) external {\r\n    bool updated;\r\n    if (fuseStatusChangedAB) {\r\n      PairBasedStrategyLib.setFuseStatus(pairState.fuseAB, fuseStatusAB);\r\n      updated = true;\r\n    }\r\n\r\n    if (updated) {\r\n      // if fuse is triggered ON, full-withdraw is required\r\n      // if fuse is triggered OFF, the assets will be deposited back to pool\r\n      // in both cases withdrawDone should be reset\r\n      pairState.withdrawDone = 0;\r\n    }\r\n  }\r\n\r\n  /// @notice Returns the current state of the contract\r\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\r\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  /// @return nums [totalLiquidity, fuse-status-tokenA, withdrawDone, 4 thresholds of token A, lastRebalanceNoSwap, 5 reserved values]\r\n  /// @return boolValues [isStablePool, depositorSwapTokens]\r\n  function getDefaultState(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  ) {\r\n    addr = new address[](4);\r\n    tickData = new int24[](4);\r\n    nums = new uint[](13);\r\n    boolValues = new bool[](2);\r\n\r\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_A] = pairState.tokenA;\r\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_B] = pairState.tokenB;\r\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_POOL] = pairState.pool;\r\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER] = pairState.strategyProfitHolder;\r\n\r\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_TICK_SPACING] = pairState.tickSpacing;\r\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_LOWER_TICK] = pairState.lowerTick;\r\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_UPPER_TICK] = pairState.upperTick;\r\n    tickData[PairBasedStrategyLib.IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE] = pairState.rebalanceTickRange;\r\n\r\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY] = uint(pairState.totalLiquidity);\r\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_FUSE_STATUS] = uint(pairState.fuseAB.status);\r\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE] = pairState.withdrawDone;\r\n    for (uint i = 0; i < 4; ++i) {\r\n      nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_THRESHOLD_0 + i] = pairState.fuseAB.thresholds[i];\r\n    }\r\n    nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP] = pairState.lastRebalanceNoSwap;\r\n\r\n    boolValues[PairBasedStrategyLib.IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL] = pairState.isStablePool;\r\n    boolValues[PairBasedStrategyLib.IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS] = pairState.depositorSwapTokens;\r\n  }\r\n\r\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\r\n  /// @param amounts_ Amounts of [underlying, not-underlying] that will be received from the pool before withdrawing\r\n  function quoteWithdrawByAgg(\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    bytes memory planEntryData,\r\n    uint[] memory amounts_,\r\n    address controller_,\r\n    ITetuConverter converter_,\r\n    mapping(address => uint) storage liquidationThresholds\r\n  ) external returns (\r\n    address tokenToSwap,\r\n    uint amountToSwap\r\n  ) {\r\n    // check operator-only, initialize w\r\n    WithdrawLocal memory w;\r\n    initWithdrawLocal(\r\n      w,\r\n      [pairState.tokenA, pairState.tokenB],\r\n      liquidationThresholds,\r\n      planEntryData,\r\n      controller_\r\n    );\r\n\r\n    (tokenToSwap, amountToSwap) = PairBasedStrategyLib.quoteWithdrawStep(\r\n      [address(converter_), address(AppLib._getLiquidator(w.controller))],\r\n      w.tokens,\r\n      w.liquidationThresholds,\r\n      amounts_,\r\n      w.planKind,\r\n      [w.propNotUnderlying18, w.entryDataParam]\r\n    );\r\n\r\n    if (amountToSwap != 0) {\r\n      // withdrawByAggStep will execute REPAY1 - SWAP - REPAY2\r\n      // but quoteWithdrawByAgg and withdrawByAggStep are executed in different blocks\r\n      // so, REPAY1 can return less collateral than quoteWithdrawByAgg expected\r\n      // As result, we can have less amount on balance than required amountToSwap\r\n      // So, we need to reduce amountToSwap on small gap amount\r\n      amountToSwap -= amountToSwap * PairBasedStrategyLib.GAP_AMOUNT_TO_SWAP / 100_000;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculate amounts to be deposited to pool, calculate loss, fix profitToCover\r\n  /// @param addr_ [tokenToSwap, aggregator, controller, converter, splitter]\r\n  /// @param values_ [amountToSwap_, profitToCover, oldTotalAssets, not used here]\r\n  /// @param tokens [underlying, not-underlying] (values been read from pairBase)\r\n  /// @return completed All debts were closed, leftovers were swapped to proper proportions\r\n  /// @return tokenAmounts Amounts to be deposited to pool. If {tokenAmounts} contains zero amount return empty array.\r\n  function withdrawByAggStep(\r\n    address[5] calldata addr_,\r\n    uint[4] calldata values_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    address[2] memory tokens,\r\n    mapping(address => uint) storage liquidationThresholds\r\n  ) external returns (\r\n    bool completed,\r\n    uint[] memory tokenAmounts,\r\n    uint loss\r\n  ) {\r\n    WithdrawByAggStepLocal memory v;\r\n\r\n    v.tokenToSwap = addr_[0];\r\n    v.aggregator = addr_[1];\r\n    v.controller = addr_[2];\r\n    v.converter = addr_[3];\r\n    v.splitter = addr_[4];\r\n\r\n    v.amountToSwap = values_[0];\r\n    v.profitToCover = values_[1];\r\n    v.oldTotalAssets = values_[2];\r\n\r\n    // initialize v\r\n    PairBasedStrategyLogicLib.initWithdrawLocal(v.w, tokens, liquidationThresholds, planEntryData, v.controller);\r\n\r\n    // make withdraw iteration according to the selected plan\r\n    completed = PairBasedStrategyLib.withdrawStep(\r\n      [v.converter, address(AppLib._getLiquidator(v.w.controller))],\r\n      v.w.tokens,\r\n      v.w.liquidationThresholds,\r\n      v.tokenToSwap,\r\n      v.amountToSwap,\r\n      v.aggregator,\r\n      swapData,\r\n      v.aggregator == address(0),\r\n      v.w.planKind,\r\n      [v.w.propNotUnderlying18, v.w.entryDataParam]\r\n    );\r\n\r\n    // fix loss / profitToCover\r\n    if (v.profitToCover != 0) {\r\n      ConverterStrategyBaseLib2.sendToInsurance(\r\n        v.w.tokens[0],\r\n        v.profitToCover,\r\n        v.splitter,\r\n        v.oldTotalAssets,\r\n        IERC20(v.w.tokens[0]).balanceOf(address(this))\r\n      );\r\n    }\r\n\r\n    (loss, tokenAmounts) = ConverterStrategyBaseLib2.getTokenAmountsPair(\r\n      ITetuConverter(v.converter),\r\n      v.oldTotalAssets,\r\n      v.w.tokens[0],\r\n      v.w.tokens[1],\r\n      [v.w.liquidationThresholds[0], v.w.liquidationThresholds[1]]\r\n    );\r\n  }\r\n\r\n  /// @notice Rebalance asset to proportions {propTokenA}:{1e18-propTokenA}, fix profitToCover\r\n  /// @param propTokenA Proportion of {tokenA}, > 0. Proportion of {tokenB} is calculates as 1e18 - prop0\r\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\r\n  function _rebalanceNoSwaps(\r\n    address[2] calldata converterLiquidator,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint profitToCover,\r\n    uint totalAssets,\r\n    address splitter,\r\n    uint[2] calldata liquidationThresholdsAB,\r\n    uint propTokenA\r\n  ) internal {\r\n    address tokenA = pairState.tokenA;\r\n    address tokenB = pairState.tokenB;\r\n\r\n    BorrowLib.rebalanceAssets(\r\n      ITetuConverter(converterLiquidator[0]),\r\n      ITetuLiquidator(converterLiquidator[1]),\r\n      tokenA,\r\n      tokenB,\r\n      propTokenA,\r\n      liquidationThresholdsAB[0], // liquidityThreshold of token A\r\n      liquidationThresholdsAB[1], // liquidityThreshold of token B\r\n      profitToCover\r\n    );\r\n\r\n    // we assume here, that rebalanceAssets provides profitToCover on balance and set leftovers to right proportions\r\n    if (profitToCover != 0) {\r\n      ConverterStrategyBaseLib2.sendToInsurance(tokenA, profitToCover, splitter, totalAssets, IERC20(tokenA).balanceOf(address(this)));\r\n    }\r\n  }\r\n  //endregion ------------------------------------------------------- PairState-helpers\r\n\r\n  //region ------------------------------------------------------- needStrategyRebalance\r\n  /// @notice Determine if the strategy needs to be rebalanced.\r\n  /// @return needRebalance A boolean indicating if {rebalanceNoSwaps} should be called\r\n  function needStrategyRebalance(\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    ITetuConverter converter_,\r\n    int24 tick,\r\n    uint poolPrice\r\n  ) external view returns (\r\n    bool needRebalance,\r\n    bool fuseStatusChangedAB,\r\n    PairBasedStrategyLib.FuseStatus fuseStatusAB\r\n  ) {\r\n    if (pairState.isStablePool) {\r\n      uint price = ConverterStrategyBaseLib2.getOracleAssetsPrice(\r\n        converter_,\r\n        pairState.tokenA,\r\n        pairState.tokenB\r\n      );\r\n      (fuseStatusChangedAB, fuseStatusAB) = PairBasedStrategyLib.needChangeFuseStatus(pairState.fuseAB, price, poolPrice);\r\n      needRebalance = fuseStatusChangedAB\r\n        || (\r\n          !PairBasedStrategyLib.isFuseTriggeredOn(fuseStatusAB)\r\n          && _needPoolRebalance(pairState, tick)\r\n        );\r\n    } else {\r\n      needRebalance = _needPoolRebalance(pairState, tick);\r\n    }\r\n\r\n    return (needRebalance, fuseStatusChangedAB, fuseStatusAB); // hide warning\r\n  }\r\n\r\n  /// @notice Determine if the pool needs to be rebalanced.\r\n  /// @return A boolean indicating if the pool needs to be rebalanced.\r\n  function _needPoolRebalance(\r\n    int24 tick,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing,\r\n    int24 rebalanceTickRange\r\n  ) internal pure returns (bool) {\r\n    if (upperTick - lowerTick == tickSpacing) {\r\n      return tick < lowerTick || tick >= upperTick;\r\n    } else {\r\n      int24 halfRange = (upperTick - lowerTick) / 2;\r\n      int24 oldMedianTick = lowerTick + halfRange;\r\n      return (tick > oldMedianTick)\r\n        ? tick - oldMedianTick >= rebalanceTickRange\r\n        : oldMedianTick - tick > rebalanceTickRange;\r\n    }\r\n  }\r\n\r\n  function _needPoolRebalance(PairBasedStrategyLogicLib.PairState storage pairState, int24 tick) internal view returns (bool) {\r\n    return _needPoolRebalance(\r\n      tick,\r\n      pairState.lowerTick,\r\n      pairState.upperTick,\r\n      pairState.tickSpacing,\r\n      pairState.rebalanceTickRange\r\n    );\r\n  }\r\n  //endregion ------------------------------------------------------- needStrategyRebalance\r\n}\r\n"
    },
    "contracts/strategies/pair/PairBasedStrategyReader.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"../../interfaces/IPairBasedStrategyReaderAccess.sol\";\r\nimport \"../../libs/AppLib.sol\";\r\nimport \"../ConverterStrategyBaseLib.sol\";\r\nimport \"./PairBasedStrategyLib.sol\";\r\n\r\n/// @notice Read raw values and calculate complex values related to UniswapV3ConverterStrategy\r\ncontract PairBasedStrategyReader {\r\n\r\n  /// @notice Possible results of isWithdrawByAggCallRequired:\r\n  ///         full withdraw is required (with propNotUnderlying = 0)\r\n  uint constant public FULL_WITHDRAW_IS_REQUIRED = 1;\r\n  /// @notice Possible results of isWithdrawByAggCallRequired:\r\n  ///         rebalance of the debts is required with pool proportions (propNotUnderlying = type(uint).max)\r\n  uint constant public DEBTS_REBALANCE_IS_REQUIRED = 2;\r\n\r\n  //region -------------------------------------------------- Data types\r\n  struct GetLockedUnderlyingAmountLocal {\r\n    ITetuConverter converter;\r\n    address[] tokens;\r\n    uint[] prices;\r\n    uint[] decs;\r\n    uint directDebt;\r\n    uint directCollateral;\r\n    uint reverseDebt;\r\n    uint reverseCollateral;\r\n    uint directDebtCost;\r\n    uint reverseCollateralCost;\r\n  }\r\n\r\n  struct GetAmountToReduceDebtLocal {\r\n    address[] tokens;\r\n    ITetuConverter converter;\r\n    uint[] prices;\r\n    uint[] decs;\r\n    address[] addr;\r\n    IPriceOracle priceOracle;\r\n    uint debtAmountB;\r\n    uint collateralAmountA;\r\n    uint debtAmountA;\r\n    uint collateralAmountB;\r\n  }\r\n  //endregion -------------------------------------------------- Data types\r\n\r\n  //region -------------------------------------------------- Locked underlying amount logic\r\n  /// @notice Estimate amount of underlying locked in the strategy by TetuConverter\r\n  /// @dev We cannot call strategy.getState() because of stack too deep problem\r\n  /// @param strategy_ Instance of UniswapV3ConverterStrategy\r\n  /// @return estimatedUnderlyingAmount Total locked amount recalculated to the underlying\r\n  /// @return totalAssets strategy.totalAssets() - in terms of underlying\r\n  function getLockedUnderlyingAmount(address strategy_) public view returns (\r\n    uint estimatedUnderlyingAmount,\r\n    uint totalAssets\r\n  ) {\r\n    GetLockedUnderlyingAmountLocal memory v;\r\n    IPairBasedStrategyReaderAccess strategy = IPairBasedStrategyReaderAccess(strategy_);\r\n\r\n    (address[] memory addr, , , ) = strategy.getDefaultState();\r\n    address tokenA = addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_A];\r\n    address tokenB = addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_B];\r\n\r\n    v.converter = ITetuConverter(strategy.converter());\r\n\r\n    v.tokens = new address[](2);\r\n    v.tokens[0] = ISplitter(strategy.splitter()).asset(); // underlying\r\n    v.tokens[1] = tokenA == v.tokens[0] ? tokenB : tokenA; // not underlying\r\n\r\n    IPriceOracle priceOracle = AppLib._getPriceOracle(v.converter);\r\n    (v.prices, v.decs) =  AppLib._getPricesAndDecs(priceOracle, v.tokens, 2);\r\n\r\n    // direct borrow: underlying is collateral\r\n    (v.directDebt, v.directCollateral) = v.converter.getDebtAmountStored(strategy_, v.tokens[0], v.tokens[1], true);\r\n\r\n    // reverse borrow: underlying is borrowed asset\r\n    (v.reverseDebt, v.reverseCollateral) = v.converter.getDebtAmountStored(strategy_, v.tokens[1], v.tokens[0], true);\r\n\r\n    v.directDebtCost = v.directDebt * v.prices[1] * v.decs[0] / v.decs[1] / v.prices[0];\r\n    v.reverseCollateralCost = v.reverseCollateral * v.prices[1] * v.decs[0] / v.decs[1] / v.prices[0];\r\n\r\n    return (\r\n      v.directCollateral + v.reverseCollateralCost > (v.directDebtCost + v.reverseDebt)\r\n        ? v.directCollateral + v.reverseCollateralCost - v.directDebtCost - v.reverseDebt\r\n        : 0,\r\n      strategy.totalAssets()\r\n    );\r\n  }\r\n\r\n  /// @notice Check if a call of withdrawByAgg is required\r\n  /// @param strategy_ instance of IPairBasedStrategyReaderAccess\r\n  /// @param allowedLockedAmountPercent [0...100]\r\n  /// @return 0: it's not necessary to call withdrawByAgg\r\n  ///         1: full withdraw is required (with propNotUnderlying = 0)\r\n  ///         2: rebalance of the debts is required with pool proportions (propNotUnderlying = type(uint).max)\r\n  function isWithdrawByAggCallRequired(address strategy_, uint allowedLockedAmountPercent) external view returns (\r\n    uint\r\n  ) {\r\n    IPairBasedStrategyReaderAccess strategy = IPairBasedStrategyReaderAccess(strategy_);\r\n\r\n    (, , uint[] memory nums, ) = strategy.getDefaultState();\r\n\r\n    if (\r\n      PairBasedStrategyLib.isFuseTriggeredOn(\r\n        PairBasedStrategyLib.FuseStatus(nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_FUSE_STATUS])\r\n      )\r\n    ) {\r\n      // fuse is enabled: full withdraw to underlying is required\r\n      if (nums[PairBasedStrategyLib.IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE] == 0) {\r\n        return FULL_WITHDRAW_IS_REQUIRED;\r\n      }\r\n    } else {\r\n      // locked amount is too high: partial withdraw  (with pool proportions) is required\r\n      (uint estimatedUnderlyingAmount, uint totalAssets) = getLockedUnderlyingAmount(strategy_);\r\n      uint percent = estimatedUnderlyingAmount * 100 / totalAssets;\r\n\r\n      if (percent > allowedLockedAmountPercent) {\r\n        return DEBTS_REBALANCE_IS_REQUIRED;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n  //endregion -------------------------------------------------- Locked underlying amount logic\r\n\r\n  //region -------------------------------------------------- Calculate amount to reduce debt\r\n  /// @notice Calculate the amount by which the debt should be reduced to reduce locked-amount-percent below given value\r\n  /// @param requiredLockedAmountPercent  Required value of locked amount percent [0..100]\r\n  /// @param requiredAmountToReduceDebt If not zero: we are going to make repay-swap-repay to reduce total\r\n  ///        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce\r\n  ///        the amount of debt by the given amount.\r\n  ///        This amount is set in terms of the token B if there is direct debt, or in terms of the token A otherwise.\r\n  function getAmountToReduceDebtForStrategy(address strategy_, uint requiredLockedAmountPercent) external view returns (\r\n    uint requiredAmountToReduceDebt\r\n  ) {\r\n    GetAmountToReduceDebtLocal memory v;\r\n    IPairBasedStrategyReaderAccess strategy = IPairBasedStrategyReaderAccess(strategy_);\r\n\r\n    (v.addr, , , ) = strategy.getDefaultState();\r\n\r\n    v.tokens = new address[](2);\r\n    v.tokens[0] = v.addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_A];\r\n    v.tokens[1] = v.addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_B];\r\n\r\n    v.converter = ITetuConverter(strategy.converter());\r\n\r\n    v.priceOracle = AppLib._getPriceOracle(v.converter);\r\n    (v.prices, v.decs) =  AppLib._getPricesAndDecs(v.priceOracle, v.tokens, 2);\r\n\r\n    (v.debtAmountB, v.collateralAmountA) = v.converter.getDebtAmountStored(strategy_, v.tokens[0], v.tokens[1], false);\r\n    (v.debtAmountA, v.collateralAmountB) = v.converter.getDebtAmountStored(strategy_, v.tokens[1], v.tokens[0], false);\r\n\r\n    // the app should have debt in one direction only - either direct or reverse\r\n    // but dust debts in contrary direction are still possible\r\n    if (v.debtAmountB > v.collateralAmountB) {\r\n      if (v.debtAmountB > AppLib.DUST_AMOUNT_TOKENS) {\r\n        // there is direct debt\r\n        requiredAmountToReduceDebt = getAmountToReduceDebt(\r\n          strategy.totalAssets(),\r\n          strategy.asset() == v.tokens[0],\r\n          v.collateralAmountA,\r\n          v.debtAmountB,\r\n          [v.prices[0], v.prices[1]],\r\n          [v.decs[0], v.decs[1]],\r\n          requiredLockedAmountPercent\r\n        );\r\n      }\r\n    } else {\r\n      if (v.debtAmountA > AppLib.DUST_AMOUNT_TOKENS) {\r\n        // there is reverse debt\r\n        requiredAmountToReduceDebt = getAmountToReduceDebt(\r\n          strategy.totalAssets(),\r\n          strategy.asset() == v.tokens[1],\r\n          v.collateralAmountB,\r\n          v.debtAmountA,\r\n          [v.prices[1], v.prices[0]],\r\n          [v.decs[1], v.decs[0]],\r\n          requiredLockedAmountPercent\r\n        );\r\n      }\r\n    }\r\n    return requiredAmountToReduceDebt;\r\n  }\r\n\r\n  /// @notice Calculate the amount by which the debt should be reduced to reduce locked-amount-percent below given value\r\n  /// @param totalAssets Total assets of the strategy, in underlying\r\n  /// @param isUnderlyingA True if A is underlying\r\n  /// @param collateralAmountA Total collateral amount in asset A\r\n  /// @param debtAmountB Total debt amount in asset B\r\n  /// @param pricesAB Prices of A and B, decimals 18\r\n  /// @param decsAB 10**decimals for A and B\r\n  /// @param requiredLockedAmountPercent  Required value of locked amount percent [0..100]\r\n  /// @return deltaDebtAmountB The amount by which the debt should be reduced, asset B\r\n  function getAmountToReduceDebt(\r\n    uint totalAssets,\r\n    bool isUnderlyingA,\r\n    uint collateralAmountA,\r\n    uint debtAmountB,\r\n    uint[2] memory pricesAB,\r\n    uint[2] memory decsAB,\r\n    uint requiredLockedAmountPercent\r\n  ) public pure returns (uint deltaDebtAmountB) {\r\n    if (debtAmountB != 0 && totalAssets != 0) {\r\n      uint alpha18 = 1e18 * collateralAmountA * decsAB[1] / decsAB[0] / debtAmountB;\r\n\r\n      uint indexUnderlying = isUnderlyingA ? 0 : 1;\r\n      uint lockedPercent18 = 1e18\r\n        * AppLib.sub0(collateralAmountA * pricesAB[0] / decsAB[0], debtAmountB * pricesAB[1] / decsAB[1])\r\n        / (totalAssets * pricesAB[indexUnderlying] / decsAB[indexUnderlying]);\r\n      uint delta = AppLib.sub0(alpha18 * pricesAB[0] / 1e18, pricesAB[1]);\r\n\r\n      deltaDebtAmountB = delta == 0\r\n        ? 0 // weird case\r\n        : AppLib.sub0(lockedPercent18, requiredLockedAmountPercent * 1e16)\r\n          * totalAssets\r\n          * pricesAB[indexUnderlying]\r\n          / decsAB[indexUnderlying]\r\n          / delta;\r\n    }\r\n\r\n    return deltaDebtAmountB * decsAB[1] / 1e18;\r\n  }\r\n  //endregion -------------------------------------------------- Calculate amount to reduce debt\r\n}\r\n"
    },
    "contracts/strategies/pancake/PancakeConverterStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../ConverterStrategyBase.sol\";\r\nimport \"./PancakeDepositor.sol\";\r\nimport \"./PancakeConverterStrategyLogicLib.sol\";\r\nimport \"./PancakeStrategyErrors.sol\";\r\nimport \"../../libs/AppPlatforms.sol\";\r\nimport \"../../interfaces/IRebalancingV2Strategy.sol\";\r\nimport \"../pair/PairBasedStrategyLib.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\n/// @title Delta-neutral liquidity hedging converter fill-up/swap rebalancing strategy for Pancake\r\n/// @notice This strategy provides delta-neutral liquidity hedging for Uniswap V3 pools. It rebalances the liquidity\r\n///         by utilizing fill-up and swap methods depending on the range size of the liquidity provided.\r\n/// @author a17, dvpublic\r\ncontract PancakeConverterStrategy is PancakeDepositor, ConverterStrategyBase, IRebalancingV2Strategy {\r\n\r\n  //region ------------------------------------------------- Constants\r\n\r\n  string public constant override NAME = \"Pancake Converter Strategy\";\r\n  string public constant override PLATFORM = AppPlatforms.PANCAKE;\r\n  string public constant override STRATEGY_VERSION = \"1.0.1\";\r\n\r\n  //endregion ------------------------------------------------- Constants\r\n\r\n  //region ------------------------------------------------- INIT\r\n\r\n  /// @notice Initialize the strategy with the given parameters.\r\n  /// @param controller_ The address of the controller.\r\n  /// @param splitter_ The address of the splitter.\r\n  /// @param converter_ The address of the converter.\r\n  /// @param pool_ The address of the pool.\r\n  /// @param tickRange_ The tick range for the liquidity position.\r\n  /// @param rebalanceTickRange_ The tick range for rebalancing.\r\n  /// @param fuseThresholds Price thresholds for tokens [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  /// @param chef_ MasterChefV3\r\n  function init(\r\n    address controller_,\r\n    address splitter_,\r\n    address converter_,\r\n    address pool_,\r\n    int24 tickRange_,\r\n    int24 rebalanceTickRange_,\r\n    uint[4] calldata fuseThresholds,\r\n    address chef_\r\n  ) external initializer {\r\n    __ConverterStrategyBase_init(controller_, splitter_, converter_);\r\n    PancakeConverterStrategyLogicLib.initStrategyState(\r\n      state,\r\n      [controller_, pool_, chef_],\r\n      tickRange_,\r\n      rebalanceTickRange_,\r\n      ISplitter(splitter_).asset(),\r\n      fuseThresholds\r\n    );\r\n\r\n    // setup specific name for UI\r\n    StrategyLib2._changeStrategySpecificName(baseState, PancakeConverterStrategyLogicLib.createSpecificName(state.pair));\r\n  }\r\n  //endregion ------------------------------------------------- INIT\r\n\r\n  //region --------------------------------------------- OPERATOR ACTIONS\r\n\r\n  /// @notice Manually set status of the fuse\r\n  /// @param status See PairBasedStrategyLib.FuseStatus enum for possible values\r\n  function setFuseStatus(uint status) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    PairBasedStrategyLib.setFuseStatus(state.pair.fuseAB, PairBasedStrategyLib.FuseStatus(status));\r\n  }\r\n\r\n  /// @notice Set thresholds for the fuse: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  ///         Decimals 18. The thresholds are compared with prices from TetuConverter's price oracle.\r\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\r\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\r\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\r\n  /// @param values Price thresholds: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  function setFuseThresholds(uint[4] memory values) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    PairBasedStrategyLib.setFuseThresholds(state.pair.fuseAB, values);\r\n  }\r\n\r\n  /// @dev Set a dedicated contract for rewards for properly counting.\r\n  ///      It is safe to allow change it to operator - we suppose the contract only temporally store the last rewards.\r\n  function setStrategyProfitHolder(address strategyProfitHolder) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    state.pair.strategyProfitHolder = strategyProfitHolder;\r\n  }\r\n\r\n  /// @notice Set withdrawDone value.\r\n  ///         When a fuse was triggered ON, all debts should be closed and asset should be converted to underlying.\r\n  ///         After completion of the conversion withdrawDone can be set to 1.\r\n  ///         So, {getFuseStatus} will return  withdrawDone=1 and you will know, that withdraw is not required\r\n  /// @param done 0 - full withdraw required, 1 - full withdraw was done\r\n  function setWithdrawDone(uint done) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    state.pair.withdrawDone = done;\r\n  }\r\n  //endregion --------------------------------------------- OPERATOR ACTIONS\r\n\r\n  //region --------------------------------------------- METRIC VIEWS\r\n\r\n  /// @notice Check if the strategy is ready for hard work.\r\n  /// @return A boolean indicating if the strategy is ready for hard work.\r\n  function isReadyToHardWork() override external virtual view returns (bool) {\r\n    // for simplicity of implementation this function doesn't calculate fees and just returns true\r\n    return !needRebalance() && !_isFuseTriggeredOn();\r\n  }\r\n\r\n  /// @notice Check if the strategy needs rebalancing.\r\n  /// @return A boolean indicating if {rebalanceNoSwaps} should be called.\r\n  function needRebalance() public view override returns (bool) {\r\n    return PancakeConverterStrategyLogicLib.needStrategyRebalance(state.pair, _csbs.converter);\r\n  }\r\n\r\n  /// @notice Returns the current state of the contract\r\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\r\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  /// @return nums [totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]\r\n  /// @return boolValues [isStablePool, depositorSwapTokens]\r\n  function getDefaultState() external view override returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  ) {\r\n    return PairBasedStrategyLogicLib.getDefaultState(state.pair);\r\n  }\r\n  //endregion ---------------------------------------------- METRIC VIEWS\r\n\r\n  //region--------------------------------------------- REBALANCE\r\n  /// @notice Rebalance using borrow/repay only, no swaps\r\n  /// @param checkNeedRebalance Revert if rebalance is not needed. Pass false to deposit after withdrawByAgg-iterations\r\n  function rebalanceNoSwaps(bool checkNeedRebalance) external override {\r\n    address _controller = controller();\r\n    StrategyLib2.onlyOperators(_controller);\r\n\r\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\r\n    uint[] memory tokenAmounts = PancakeConverterStrategyLogicLib.rebalanceNoSwaps(\r\n      _csbs,\r\n      state.pair,\r\n      [address(_csbs.converter), address(AppLib._getLiquidator(_controller))],\r\n      oldTotalAssets,\r\n      profitToCover,\r\n      baseState.splitter,\r\n      checkNeedRebalance,\r\n      liquidationThresholds\r\n    );\r\n    _rebalanceAfter(tokenAmounts);\r\n    state.pair.lastRebalanceNoSwap = block.timestamp;\r\n  }\r\n  //endregion--------------------------------------------- REBALANCE\r\n\r\n  //region --------------------------------------------- Withdraw by iterations\r\n\r\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\r\n  function quoteWithdrawByAgg(bytes memory planEntryData) external returns (address tokenToSwap, uint amountToSwap) {\r\n    // restriction \"operator only\" is checked inside {initWithdrawLocal} in {quoteWithdrawByAgg}\r\n\r\n    // estimate amounts to be withdrawn from the pool\r\n    uint totalLiquidity = state.pair.totalLiquidity;\r\n    uint[] memory amountsOut = (totalLiquidity == 0)\r\n      ? new uint[](2)\r\n      : _depositorQuoteExit(totalLiquidity);\r\n\r\n    return PairBasedStrategyLogicLib.quoteWithdrawByAgg(\r\n      state.pair,\r\n      planEntryData,\r\n      amountsOut,\r\n      controller(),\r\n      _csbs.converter,\r\n      liquidationThresholds\r\n    );\r\n  }\r\n\r\n  /// @notice Make withdraw iteration: [exit from the pool], [make 1 swap], [repay a debt], [enter to the pool]\r\n  ///         Typical sequence of the actions is: exit from the pool, make 1 swap, repay 1 debt.\r\n  ///         You can enter to the pool if you are sure that you won't have borrow + repay on AAVE3 in the same block.\r\n  /// @dev All swap-by-agg data should be prepared using {quoteWithdrawByAgg} off-chain\r\n  /// @param tokenToSwap_ What token should be swapped to other\r\n  /// @param aggregator_ Aggregator that should be used on next swap. 0 - use liquidator\r\n  /// @param amountToSwap_ Amount that should be swapped. 0 - no swap\r\n  /// @param swapData Swap rote that was prepared off-chain.\r\n  /// @param planEntryData PLAN_XXX + additional data, see IterationPlanKinds\r\n  /// @param entryToPool Allow to enter to the pool at the end. Use false if you are going to make several iterations.\r\n  ///                    It's possible to enter back to the pool by calling {rebalanceNoSwaps} at any moment\r\n  ///                    0 - not allowed, 1 - allowed, 2 - allowed only if completed\r\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions.\r\n  function withdrawByAggStep(\r\n    address tokenToSwap_,\r\n    address aggregator_,\r\n    uint amountToSwap_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    uint entryToPool\r\n  ) external returns (bool completed) {\r\n    // restriction \"operator only\" is checked inside PancakeConverterStrategyLogicLib.withdrawByAggStep\r\n\r\n    // fix price changes, exit from the pool\r\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\r\n\r\n    // check \"operator only\", make withdraw step, cover-loss, send profit to cover, prepare to enter to the pool\r\n    uint[] memory tokenAmounts;\r\n\r\n    (completed, tokenAmounts) = PancakeConverterStrategyLogicLib.withdrawByAggStep(\r\n      _csbs,\r\n      [tokenToSwap_, aggregator_, controller(), address(_csbs.converter), baseState.splitter],\r\n      [amountToSwap_, profitToCover, oldTotalAssets, entryToPool],\r\n      swapData,\r\n      planEntryData,\r\n      state.pair,\r\n      liquidationThresholds\r\n    );\r\n\r\n    // enter to the pool\r\n    _rebalanceAfter(tokenAmounts);\r\n    state.pair.lastRebalanceNoSwap = 0;\r\n\r\n    if (completed && _isFuseTriggeredOn()) {\r\n      // full withdraw was completed, we can exclude next calls of withdrawByAggStep\r\n      state.pair.withdrawDone = 1;\r\n    }\r\n\r\n    ConverterStrategyBaseLib2.fixTooHighInvestedAssets(baseState.asset, oldTotalAssets, _csbs);\r\n  }\r\n\r\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\r\n  /// @return Proportion of the not-underlying [0...1e18]\r\n  function getPropNotUnderlying18() external view override returns (uint) {\r\n    return PancakeConverterStrategyLogicLib.getPropNotUnderlying18(state.pair);\r\n  }\r\n  //endregion ------------------------------------ Withdraw by iterations\r\n\r\n  //region--------------------------------------------- INTERNAL LOGIC\r\n\r\n  function _beforeDeposit(\r\n    ITetuConverter converter_,\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint /*indexAsset_*/\r\n  ) override internal virtual returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    require(!needRebalance(), PancakeStrategyErrors.NEED_REBALANCE);\r\n    (uint prop0, uint prop1) = PancakeConverterStrategyLogicLib.getEntryDataProportions(\r\n      IPancakeV3Pool(state.pair.pool),\r\n      state.pair.lowerTick,\r\n      state.pair.upperTick,\r\n      state.pair.depositorSwapTokens\r\n    );\r\n\r\n    // get token amounts for token A, token B\r\n    address tokenA = state.pair.tokenA;\r\n    tokenAmounts = PairBasedStrategyLogicLib._beforeDeposit(\r\n      converter_,\r\n      amount_,\r\n      tokenA,\r\n      state.pair.tokenB,\r\n      prop0 * 1e18 / (prop0 + prop1),\r\n      liquidationThresholds\r\n    );\r\n\r\n    // take into account a possibility that tokens_ can contain [B, A]\r\n    if (tokens_[0] != tokenA) {\r\n      (tokenAmounts[0], tokenAmounts[1]) = (tokenAmounts[1], tokenAmounts[0]);\r\n    }\r\n  }\r\n\r\n  /// @notice Claim rewards, do _processClaims() after claiming, calculate earned and lost amounts\r\n  /// @return earned The amount of earned rewards\r\n  /// @return lost The amount of lost rewards\r\n  /// @return assetBalanceAfterClaim The asset balance after claiming rewards.\r\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\r\n  /// @return amountPerf Total performance fee in terms of underlying\r\n  function _handleRewards() override internal virtual returns (\r\n    uint earned,\r\n    uint lost,\r\n    uint assetBalanceAfterClaim,\r\n    uint paidDebtToInsurance,\r\n    uint amountPerf\r\n  ) {\r\n    (address[] memory rewardTokens, uint[] memory amounts) = _claim();\r\n    address asset = baseState.asset;\r\n    earned = PancakeConverterStrategyLogicLib.calcEarned(asset, controller(), rewardTokens, amounts);\r\n    (paidDebtToInsurance, amountPerf) = _rewardsLiquidation(rewardTokens, amounts);\r\n    lost = 0; // hide warning\r\n    assetBalanceAfterClaim = AppLib.balance(asset);\r\n  }\r\n\r\n  /// @notice Deposit given amount to the pool.\r\n  /// @param amount_ The amount to be deposited.\r\n  /// @param updateTotalAssetsBeforeInvest_ A boolean indicating if the total assets should be updated before investing.\r\n  /// @return strategyLoss Loss should be covered from Insurance\r\n  function _depositToPool(uint amount_, bool updateTotalAssetsBeforeInvest_) override internal virtual returns (\r\n    uint strategyLoss\r\n  ) {\r\n    if (_isFuseTriggeredOn()) {\r\n      uint[] memory tokenAmounts = new uint[](2);\r\n      tokenAmounts[0] = amount_;\r\n      emit OnDepositorEnter(tokenAmounts, tokenAmounts);\r\n      return 0;\r\n    } else {\r\n      return super._depositToPool(amount_, updateTotalAssetsBeforeInvest_);\r\n    }\r\n  }\r\n\r\n  function _beforeWithdraw(uint /*amount*/) internal view override {\r\n    require(!needRebalance(), PancakeStrategyErrors.NEED_REBALANCE);\r\n  }\r\n\r\n  /// @notice Check need-rebalance and fuse-ON\r\n  /// @return True if the hardwork should be skipped\r\n  function _preHardWork(bool reInvest) internal view override returns (bool) {\r\n    reInvest; // hide warning\r\n    require(!needRebalance(), PancakeStrategyErrors.NEED_REBALANCE);\r\n    require(!_isFuseTriggeredOn(), PancakeStrategyErrors.FUSE_IS_ACTIVE);\r\n    return false;\r\n  }\r\n\r\n  /// @notice Prepare to rebalance: fix price changes, call depositor exit if totalLiquidity != 0\r\n  function _rebalanceBefore() internal returns (uint profitToCover, uint oldTotalAssets) {\r\n    (, profitToCover) = _fixPriceChanges(true);\r\n    oldTotalAssets = totalAssets() - profitToCover;\r\n\r\n    // withdraw all liquidity from pool\r\n    // after disableFuse() liquidity is zero\r\n    uint liquidity = state.pair.totalLiquidity;\r\n    if (liquidity != 0) {\r\n      _depositorExit(liquidity, false);\r\n    }\r\n  }\r\n\r\n  /// @notice Make actions after rebalance: depositor enter, update invested assets\r\n  function _rebalanceAfter(uint[] memory tokenAmounts) internal {\r\n    if (tokenAmounts.length == 2 && !_isFuseTriggeredOn()) {\r\n      _depositorEnter(tokenAmounts);\r\n    }\r\n    _updateInvestedAssets();\r\n  }\r\n\r\n  function _isFuseTriggeredOn() internal view returns (bool) {\r\n    return PairBasedStrategyLib.isFuseTriggeredOn(state.pair.fuseAB.status);\r\n  }\r\n  //endregion--------------------------------------- INTERNAL LOGIC\r\n}\r\n"
    },
    "contracts/strategies/pancake/PancakeConverterStrategyLogicLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"./PancakeLib.sol\";\r\nimport \"./PancakeDebtLib.sol\";\r\nimport \"./PancakeStrategyErrors.sol\";\r\nimport \"../ConverterStrategyBaseLib2.sol\";\r\nimport \"../../libs/AppLib.sol\";\r\nimport \"../../libs/AppErrors.sol\";\r\nimport \"../pair/PairBasedStrategyLib.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\nimport \"../../integrations/pancake/IPancakeNonfungiblePositionManager.sol\";\r\nimport \"../../integrations/pancake/IPancakeMasterChefV3.sol\";\r\n\r\nlibrary PancakeConverterStrategyLogicLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n  //region ------------------------------------------------ Constants\r\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_STABLE = 300;\r\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE = 500;\r\n  uint internal constant HARD_WORK_USD_FEE_THRESHOLD = 100;\r\n  //endregion ------------------------------------------------ Constants\r\n\r\n  //region ------------------------------------------------ Events\r\n  event Rebalanced(uint loss, uint profitToCover, uint coveredByRewards);\r\n  event RebalancedDebt(uint loss, uint profitToCover, uint coveredByRewards);\r\n  event PancakeFeesClaimed(uint fee0, uint fee1);\r\n  event PancakeRewardsClaimed(uint amount);\r\n  //endregion ------------------------------------------------ Events\r\n\r\n  //region ------------------------------------------------ Data types\r\n\r\n  struct State {\r\n    PairBasedStrategyLogicLib.PairState pair;\r\n\r\n    // additional (specific) state\r\n\r\n    /// @notice The ID of the token that represents the minted position\r\n    uint tokenId;\r\n    IPancakeMasterChefV3 chef;\r\n\r\n    /// @dev reserve space for future needs\r\n    uint[10] __gap;\r\n  }\r\n\r\n  struct RebalanceLocal {\r\n    /// @notice Fuse for token A and token B\r\n    PairBasedStrategyLib.FuseStateParams fuseAB;\r\n    ITetuConverter converter;\r\n    IPancakeV3Pool pool;\r\n    address tokenA;\r\n    address tokenB;\r\n    bool isStablePool;\r\n    uint[2] liquidationThresholdsAB;\r\n\r\n    bool fuseStatusChangedAB;\r\n    PairBasedStrategyLib.FuseStatus fuseStatusAB;\r\n\r\n    uint poolPrice;\r\n    uint poolPriceAdjustment;\r\n  }\r\n\r\n  struct EnterLocalVariables {\r\n    IPancakeV3Pool pool;\r\n    /// @notice A boolean indicating if need to use token B instead of token A.\r\n    bool depositorSwapTokens;\r\n    /// @notice The current total liquidity in the pool.\r\n    uint128 liquidity;\r\n    uint tokenId;\r\n    /// @notice The lower tick value for the pool.\r\n    int24 lowerTick;\r\n    /// @notice The upper tick value for the pool.\r\n    int24 upperTick;\r\n\r\n    IPancakeMasterChefV3 chef;\r\n    IPancakeNonfungiblePositionManager nft;\r\n\r\n    uint24 fee;\r\n    int24 nftLowerTick;\r\n    int24 nftUpperTick;\r\n  }\r\n\r\n  struct ExitLocal {\r\n    address strategyProfitHolder;\r\n    uint128 liquidity;\r\n    uint reward;\r\n    IPancakeMasterChefV3 chef;\r\n    uint tokenId;\r\n  }\r\n\r\n  //endregion ------------------------------------------------ Data types\r\n\r\n  //region ------------------------------------------------ Helpers\r\n\r\n  /// @param controllerPoolChef [controller, pool, master chef v3]\r\n  /// @param fuseThresholds Fuse thresholds for tokens (stable pool only)\r\n  function initStrategyState(\r\n    State storage state,\r\n    address[3] memory controllerPoolChef,\r\n    int24 tickRange,\r\n    int24 rebalanceTickRange,\r\n    address asset_,\r\n    uint[4] calldata fuseThresholds\r\n  ) external {\r\n    require(controllerPoolChef[1] != address(0), AppErrors.ZERO_ADDRESS);\r\n    address token0 = IPancakeV3Pool(controllerPoolChef[1]).token0();\r\n    address token1 = IPancakeV3Pool(controllerPoolChef[1]).token1();\r\n\r\n    int24[4] memory tickData;\r\n    {\r\n      int24 tickSpacing = PancakeLib.getTickSpacing(IPancakeV3Pool(controllerPoolChef[1]));\r\n      if (tickRange != 0) {\r\n        require(tickRange == tickRange / tickSpacing * tickSpacing, PairBasedStrategyLib.INCORRECT_TICK_RANGE);\r\n        require(rebalanceTickRange == rebalanceTickRange / tickSpacing * tickSpacing, PairBasedStrategyLib.INCORRECT_REBALANCE_TICK_RANGE);\r\n      }\r\n      tickData[0] = tickSpacing;\r\n      (tickData[1], tickData[2]) = PancakeDebtLib.calcTickRange(controllerPoolChef[1], tickRange, tickSpacing);\r\n      tickData[3] = rebalanceTickRange;\r\n    }\r\n\r\n    IPancakeMasterChefV3 chef = IPancakeMasterChefV3(payable(controllerPoolChef[2]));\r\n    IPancakeNonfungiblePositionManager nft = IPancakeNonfungiblePositionManager(payable(chef.nonfungiblePositionManager()));\r\n    state.chef = chef;\r\n\r\n    PairBasedStrategyLogicLib.setInitialDepositorValues(\r\n      state.pair,\r\n      [controllerPoolChef[1], asset_, token0, token1],\r\n      tickData,\r\n      isStablePool(IPancakeV3Pool(controllerPoolChef[1])),\r\n      fuseThresholds\r\n    );\r\n\r\n    address liquidator = IController(controllerPoolChef[0]).liquidator();\r\n\r\n    IERC20(token0).approve(liquidator, type(uint).max);\r\n    IERC20(token1).approve(liquidator, type(uint).max);\r\n    IERC20(token0).approve(address(nft), type(uint).max);\r\n    IERC20(token1).approve(address(nft), type(uint).max);\r\n    IERC20(token0).approve(address(chef), type(uint).max);\r\n    IERC20(token1).approve(address(chef), type(uint).max);\r\n  }\r\n\r\n  //endregion ------------------------------------------------ Helpers\r\n\r\n  //region ------------------------------------------------ Pool info\r\n\r\n  /// @notice Check if the given pool is a stable pool.\r\n  /// @param pool The Uniswap V3 pool.\r\n  /// @return A boolean indicating if the pool is stable.\r\n  function isStablePool(IPancakeV3Pool pool) public view returns (bool) {\r\n    return pool.fee() == 100;\r\n  }\r\n\r\n  function createSpecificName(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (string memory) {\r\n    return string(abi.encodePacked(\r\n      \"Pancake \",\r\n      IERC20Metadata(pairState.tokenA).symbol(),\r\n      \"/\",\r\n      IERC20Metadata(pairState.tokenB).symbol(),\r\n      \"-\",\r\n      StringLib._toString(IPancakeV3Pool(pairState.pool).fee()))\r\n    );\r\n  }\r\n\r\n  /// @notice Calculate proportions of the tokens for entry kind 1\r\n  /// @param pool Pool instance.\r\n  /// @param lowerTick The lower tick of the pool's main range.\r\n  /// @param upperTick The upper tick of the pool's main range.\r\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\r\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  function getEntryDataProportions(IPancakeV3Pool pool, int24 lowerTick, int24 upperTick, bool depositorSwapTokens) external view returns (uint, uint) {\r\n    return PancakeDebtLib.getEntryDataProportions(pool, lowerTick, upperTick, depositorSwapTokens);\r\n  }\r\n\r\n  /// @notice Retrieve the reserves of a Uniswap V3 pool managed by this contract.\r\n  /// @param pairState The State storage containing the pool's information.\r\n  /// @return reserves An array containing the reserve amounts of the contract owned liquidity.\r\n  function getPoolReserves(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (\r\n    uint[] memory reserves\r\n  ) {\r\n    reserves = new uint[](2);\r\n    (uint160 sqrtRatioX96, , , , , ,) = IPancakeV3Pool(pairState.pool).slot0();\r\n\r\n    (reserves[0], reserves[1]) = PancakeLib.getAmountsForLiquidity(\r\n      sqrtRatioX96,\r\n      pairState.lowerTick,\r\n      pairState.upperTick,\r\n      pairState.totalLiquidity\r\n    );\r\n\r\n    if (pairState.depositorSwapTokens) {\r\n      (reserves[0], reserves[1]) = (reserves[1], reserves[0]);\r\n    }\r\n  }\r\n  //endregion ------------------------------------------------ Pool info\r\n\r\n  //region ------------------------------------------------ Join the pool\r\n  /// @notice Enter the pool and provide liquidity with desired token amounts.\r\n  /// @param amountsDesired_ An array containing the desired amounts of tokens to provide liquidity.\r\n  /// @return amountsConsumed An array containing the consumed amounts for each token in the pool.\r\n  /// @return liquidityOut The amount of liquidity added to the pool.\r\n  function enter(State storage state, uint[] memory amountsDesired_) external returns (\r\n    uint[] memory amountsConsumed,\r\n    uint liquidityOut\r\n  ) {\r\n    EnterLocalVariables memory v;\r\n    v.pool = IPancakeV3Pool(state.pair.pool);\r\n    v.depositorSwapTokens = state.pair.depositorSwapTokens;\r\n    v.tokenId = state.tokenId;\r\n    v.lowerTick = state.pair.lowerTick;\r\n    v.upperTick = state.pair.upperTick;\r\n    v.chef = state.chef;\r\n    v.nft = IPancakeNonfungiblePositionManager(payable(v.chef.nonfungiblePositionManager()));\r\n\r\n    amountsConsumed = new uint[](2);\r\n\r\n    if (amountsDesired_[1] != 0) {\r\n      (address token0, address token1) = v.depositorSwapTokens\r\n        ? (state.pair.tokenB, state.pair.tokenA)\r\n        : (state.pair.tokenA, state.pair.tokenB);\r\n\r\n      if (v.depositorSwapTokens) {\r\n        (amountsDesired_[0], amountsDesired_[1]) = (amountsDesired_[1], amountsDesired_[0]);\r\n      }\r\n\r\n      v.fee = v.pool.fee();\r\n\r\n      if (v.tokenId != 0) {\r\n        (v.nftLowerTick, v.nftUpperTick) = PancakeDebtLib.callNftPositions(address(v.nft), v.tokenId);\r\n        if (v.nftLowerTick != v.lowerTick || v.nftUpperTick != v.upperTick) {\r\n          // Assume that the token have 0 liquidity and all tokens have been collected already\r\n          v.chef.burn(v.tokenId);\r\n          v.tokenId = 0;\r\n        }\r\n      }\r\n\r\n      if (v.tokenId == 0) {\r\n        (v.tokenId, v.liquidity, amountsConsumed[0], amountsConsumed[1]) = v.nft.mint(IPancakeNonfungiblePositionManager.MintParams(\r\n          token0,\r\n          token1,\r\n          v.fee,\r\n          v.lowerTick,\r\n          v.upperTick,\r\n          amountsDesired_[0],\r\n          amountsDesired_[1],\r\n          0,\r\n          0,\r\n          address(this),\r\n          block.timestamp\r\n        ));\r\n        state.tokenId = v.tokenId;\r\n        v.nft.safeTransferFrom(address(this), address(v.chef), v.tokenId);\r\n      } else {\r\n        (v.liquidity, amountsConsumed[0], amountsConsumed[1]) = v.chef.increaseLiquidity(INonfungiblePositionManagerStruct.IncreaseLiquidityParams(\r\n          v.tokenId,\r\n          amountsDesired_[0],\r\n          amountsDesired_[1],\r\n          0,\r\n          0,\r\n          block.timestamp\r\n        ));\r\n      }\r\n\r\n      state.pair.totalLiquidity += v.liquidity;\r\n      liquidityOut = uint(v.liquidity);\r\n\r\n      if (v.depositorSwapTokens) {\r\n        (amountsConsumed[0], amountsConsumed[1]) = (amountsConsumed[1], amountsConsumed[0]);\r\n      }\r\n    }\r\n\r\n    return (amountsConsumed, liquidityOut);\r\n  }\r\n\r\n  //endregion ------------------------------------------------ Join the pool\r\n\r\n  //region ------------------------------------------------ Exit from the pool\r\n  /// @notice Exit the pool and collect tokens proportional to the liquidity amount to exit.\r\n  /// @param state The State storage object.\r\n  /// @param liquidityAmountToExit The amount of liquidity to exit.\r\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\r\n  /// @return amountsOut An array containing the collected amounts for each token in the pool.\r\n  function exit(\r\n    State storage state,\r\n    uint128 liquidityAmountToExit,\r\n    bool emergency\r\n  ) external returns (uint[] memory amountsOut) {\r\n    return _exit(state, liquidityAmountToExit, emergency);\r\n  }\r\n\r\n  /// @notice Exit the pool and collect tokens proportional to the liquidity amount to exit.\r\n  /// @param state The State storage object.\r\n  /// @param liquidityAmountToExit The amount of liquidity to exit.\r\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\r\n  /// @return amountsOut An array containing the collected amounts for each token in the pool.\r\n  function _exit(\r\n    State storage state,\r\n    uint128 liquidityAmountToExit,\r\n    bool emergency\r\n  ) internal returns (uint[] memory amountsOut) {\r\n    amountsOut = new uint[](2);\r\n\r\n    ExitLocal memory v;\r\n    v.chef = state.chef;\r\n    v.strategyProfitHolder = state.pair.strategyProfitHolder;\r\n\r\n    v.liquidity = state.pair.totalLiquidity;\r\n    require(v.liquidity >= liquidityAmountToExit, PancakeStrategyErrors.WRONG_LIQUIDITY);\r\n\r\n    v.tokenId = state.tokenId;\r\n\r\n    // get reward amounts\r\n    if (! emergency) {\r\n      // claim rewards and temporary move them to strategyProfitHolder; we will get them back inside claimRewards\r\n      v.reward = _harvest(v.chef, v.tokenId, v.strategyProfitHolder);\r\n    }\r\n\r\n    // burn liquidity\r\n    (amountsOut[0], amountsOut[1]) = v.chef.decreaseLiquidity(INonfungiblePositionManagerStruct.DecreaseLiquidityParams(v.tokenId, liquidityAmountToExit, 0, 0, block.timestamp));\r\n\r\n    // collect tokens and fee\r\n    (uint collected0, uint collected1) = v.chef.collect(INonfungiblePositionManagerStruct.CollectParams(v.tokenId, address(this), type(uint128).max, type(uint128).max));\r\n\r\n    uint fee0 = AppLib.sub0(collected0, amountsOut[0]);\r\n    uint fee1 = AppLib.sub0(collected1, amountsOut[1]);\r\n\r\n    emit PancakeFeesClaimed(fee0, fee1);\r\n\r\n    if (state.pair.depositorSwapTokens) {\r\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n      (fee0, fee1) = (fee1, fee0);\r\n    }\r\n\r\n    // send fees to profit holder\r\n    if (fee0 > 0) {\r\n      IERC20(state.pair.tokenA).safeTransfer(v.strategyProfitHolder, fee0);\r\n    }\r\n    if (fee1 > 0) {\r\n      IERC20(state.pair.tokenB).safeTransfer(v.strategyProfitHolder, fee1);\r\n    }\r\n\r\n    v.liquidity -= liquidityAmountToExit;\r\n    state.pair.totalLiquidity = v.liquidity;\r\n\r\n    if (v.liquidity == 0) {\r\n      if (!emergency) {\r\n        v.chef.burn(v.tokenId);\r\n      }\r\n      state.tokenId = 0;\r\n    }\r\n  }\r\n\r\n  /// @notice Estimate the exit amounts for a given liquidity amount in a PancakeSwap V3 pool.\r\n  /// @param liquidityAmountToExit The amount of liquidity to exit.\r\n  /// @return amountsOut An array containing the estimated exit amounts for each token in the pool.\r\n  function quoteExit(\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint128 liquidityAmountToExit\r\n  ) public view returns (uint[] memory amountsOut) {\r\n    amountsOut = new uint[](2);\r\n    (uint160 sqrtRatioX96, , , , , ,) = IPancakeV3Pool(pairState.pool).slot0();\r\n\r\n    (amountsOut[0], amountsOut[1]) = PancakeLib.getAmountsForLiquidity(\r\n      sqrtRatioX96,\r\n      pairState.lowerTick,\r\n      pairState.upperTick,\r\n      liquidityAmountToExit\r\n    );\r\n\r\n    if (pairState.depositorSwapTokens) {\r\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n    }\r\n  }\r\n\r\n  //endregion ------------------------------------------------ Exit from the pool\r\n\r\n  //region ------------------------------------------------ Claims\r\n  /// @notice Claim rewards from the Pancake V3 pool.\r\n  /// @return tokensOut An array containing tokenA and tokenB.\r\n  /// @return amountsOut An array containing the amounts of token0 and token1 claimed as rewards.\r\n  function claimRewards(State storage state) external returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    address strategyProfitHolder = state.pair.strategyProfitHolder;\r\n    IPancakeMasterChefV3 chef = state.chef;\r\n    uint tokenId = state.tokenId;\r\n\r\n    tokensOut = new address[](3);\r\n    tokensOut[0] = state.pair.tokenA;\r\n    tokensOut[1] = state.pair.tokenB;\r\n    tokensOut[2] = chef.CAKE();\r\n\r\n    balancesBefore = new uint[](3);\r\n    for (uint i; i < tokensOut.length; i++) {\r\n      balancesBefore[i] = IERC20(tokensOut[i]).balanceOf(address(this));\r\n    }\r\n\r\n    amountsOut = new uint[](3);\r\n    if (tokenId != 0 && state.pair.totalLiquidity != 0) {\r\n      // get fees\r\n      (amountsOut[0], amountsOut[1]) = chef.collect(INonfungiblePositionManagerStruct.CollectParams(tokenId, address(this), type(uint128).max, type(uint128).max));\r\n      emit PancakeFeesClaimed(amountsOut[0], amountsOut[1]);\r\n\r\n      if (state.pair.depositorSwapTokens) {\r\n        (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n      }\r\n\r\n      // claim rewards, don't transfer them to strategyProfitHolder\r\n      _harvest(chef, tokenId, address(0));\r\n\r\n      amountsOut[2] = AppLib.sub0(IERC20(tokensOut[2]).balanceOf(address(this)), balancesBefore[2]);\r\n      if (amountsOut[2] != 0) {\r\n        emit PancakeRewardsClaimed(amountsOut[2]);\r\n      }\r\n    }\r\n\r\n    // move tokens from strategyProfitHolder on balance\r\n    // the rewards will be recycled outside\r\n    for (uint i; i < tokensOut.length; ++i) {\r\n      uint b = IERC20(tokensOut[i]).balanceOf(strategyProfitHolder);\r\n      if (b != 0) {\r\n        IERC20(tokensOut[i]).transferFrom(strategyProfitHolder, address(this), b);\r\n        amountsOut[i] += b;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /// @notice Collect rewards, hide exceptions\r\n  /// @param to Transfer rewards to {to}, skip transfer if 0\r\n\r\n  function _harvest(IPancakeMasterChefV3 chef, uint tokenId, address to) internal returns (uint rewardOut) {\r\n    try chef.harvest(tokenId, address(this)) returns (uint rewardAmount) {\r\n      address token = chef.CAKE();\r\n      rewardOut = Math.min(rewardAmount, IERC20(token).balanceOf(address(this)));\r\n      if (to != address(0) && rewardOut != 0) {\r\n        IERC20(token).safeTransfer(to, rewardOut);\r\n      }\r\n    } catch {\r\n      // an exception in reward-claiming shouldn't stop hardwork / withdraw\r\n    }\r\n\r\n    return rewardOut;\r\n  }\r\n\r\n  function calcEarned(address asset, address controller, address[] memory rewardTokens, uint[] memory amounts) external view returns (uint) {\r\n    ITetuLiquidator liquidator = ITetuLiquidator(IController(controller).liquidator());\r\n    uint len = rewardTokens.length;\r\n    uint earned;\r\n    for (uint i; i < len; ++i) {\r\n      address token = rewardTokens[i];\r\n      if (token == asset) {\r\n        earned += amounts[i];\r\n      } else {\r\n        earned += liquidator.getPrice(rewardTokens[i], asset, amounts[i]);\r\n      }\r\n    }\r\n\r\n    return earned;\r\n  }\r\n  //endregion ------------------------------------------------ Claims\r\n\r\n  //region ------------------------------------------------ Rebalance\r\n  /// @notice Determine if the strategy needs to be rebalanced.\r\n  /// @return needRebalance A boolean indicating if {rebalanceNoSwaps} should be called\r\n  function needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage pairState, ITetuConverter converter_) external view returns (\r\n    bool needRebalance\r\n  ) {\r\n    address pool = pairState.pool;\r\n    // poolPrice should have same decimals as a price from oracle == 18\r\n    uint poolPriceAdjustment = PairBasedStrategyLib.getPoolPriceAdjustment(IERC20Metadata(pairState.tokenA).decimals());\r\n    uint poolPrice = PancakeLib.getPrice(pool, pairState.tokenB) * poolPriceAdjustment;\r\n    (needRebalance, , ) = PairBasedStrategyLogicLib.needStrategyRebalance(\r\n      pairState,\r\n      converter_,\r\n      PancakeDebtLib.getCurrentTick(IPancakeV3Pool(pool)),\r\n      poolPrice\r\n    );\r\n  }\r\n\r\n  /// @notice Make rebalance without swaps (using borrowing only).\r\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\r\n  /// @param totalAssets_ Current value of totalAssets()\r\n  /// @param checkNeedRebalance_ True if the function should ensure that the rebalance is required\r\n  /// @return tokenAmounts Token amounts for deposit. If length == 0 - rebalance wasn't made and no deposit is required.\r\n  function rebalanceNoSwaps(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    address[2] calldata converterLiquidator,\r\n    uint totalAssets_,\r\n    uint profitToCover,\r\n    address splitter,\r\n    bool checkNeedRebalance_,\r\n    mapping(address => uint) storage liquidityThresholds_\r\n  ) external returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    RebalanceLocal memory v;\r\n    _initLocalVars(v, ITetuConverter(converterLiquidator[0]), pairState, liquidityThresholds_);\r\n    v.poolPrice = PancakeLib.getPrice(address(v.pool), pairState.tokenB) * v.poolPriceAdjustment;\r\n    bool needRebalance;\r\n    int24 tick = PancakeDebtLib.getCurrentTick(v.pool);\r\n    (needRebalance,v.fuseStatusChangedAB, v.fuseStatusAB) = PairBasedStrategyLogicLib.needStrategyRebalance(pairState, v.converter, tick, v.poolPrice);\r\n\r\n    // update fuse status if necessary\r\n    if (needRebalance) {\r\n      // we assume here, that needRebalance is true if any fuse has changed state, see needStrategyRebalance impl\r\n      PairBasedStrategyLogicLib.updateFuseStatus(pairState, v.fuseStatusChangedAB, v.fuseStatusAB);\r\n    }\r\n\r\n    require(!checkNeedRebalance_ || needRebalance, PancakeStrategyErrors.NO_REBALANCE_NEEDED);\r\n\r\n    // rebalancing debt, setting new tick range\r\n    if (needRebalance) {\r\n      PancakeDebtLib.rebalanceNoSwaps(converterLiquidator, pairState, profitToCover, totalAssets_, splitter, v.liquidationThresholdsAB, tick);\r\n\r\n      uint loss;\r\n      (loss, tokenAmounts) = ConverterStrategyBaseLib2.getTokenAmountsPair(v.converter, totalAssets_, v.tokenA, v.tokenB, v.liquidationThresholdsAB);\r\n      if (loss != 0) {\r\n        ConverterStrategyBaseLib2.coverLossAndCheckResults(csbs, splitter, loss);\r\n      }\r\n      emit Rebalanced(loss, profitToCover, 0);\r\n    }\r\n\r\n    return tokenAmounts;\r\n  }\r\n\r\n  /// @notice Initialize {v} by state values\r\n  function _initLocalVars(\r\n    RebalanceLocal memory v,\r\n    ITetuConverter converter_,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    mapping(address => uint) storage liquidityThresholds_\r\n  ) internal view {\r\n    v.pool = IPancakeV3Pool(pairState.pool);\r\n    v.fuseAB = pairState.fuseAB;\r\n    v.converter = converter_;\r\n    v.tokenA = pairState.tokenA;\r\n    v.tokenB = pairState.tokenB;\r\n    v.isStablePool = pairState.isStablePool;\r\n    v.liquidationThresholdsAB[0] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenA]);\r\n    v.liquidationThresholdsAB[1] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenB]);\r\n    uint poolPriceDecimals = IERC20Metadata(v.tokenA).decimals();\r\n    v.poolPriceAdjustment = poolPriceDecimals < 18 ? 10 ** (18 - poolPriceDecimals) : 1;\r\n  }\r\n\r\n  /// @notice Get proportion of not-underlying in the pool, [0...1e18]\r\n  ///         prop.underlying : prop.not.underlying = 1e18 - PropNotUnderlying18 : propNotUnderlying18\r\n  function getPropNotUnderlying18(PairBasedStrategyLogicLib.PairState storage pairState) view external returns (uint) {\r\n    // get pool proportions\r\n    IPancakeV3Pool pool = IPancakeV3Pool(pairState.pool);\r\n    bool depositorSwapTokens = pairState.depositorSwapTokens;\r\n    (int24 newLowerTick, int24 newUpperTick) = PancakeDebtLib._calcNewTickRange(pool, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\r\n    (uint consumed0, uint consumed1) = PancakeDebtLib.getEntryDataProportions(pool, newLowerTick, newUpperTick, depositorSwapTokens);\r\n\r\n    require(consumed0 + consumed1 > 0, AppErrors.ZERO_VALUE);\r\n    return consumed1 * 1e18 / (consumed0 + consumed1);\r\n  }\r\n  //endregion ------------------------------------------------ Rebalance\r\n\r\n  //region ------------------------------------------------ WithdrawByAgg\r\n  /// @notice Calculate amounts to be deposited to pool, update pairState.lower/upperTick, fix loss / profitToCover\r\n  /// @param addr_ [tokenToSwap, aggregator, controller, converter, splitter]\r\n  /// @param values_ [amountToSwap_, profitToCover, oldTotalAssets, entryToPool]\r\n  /// @return completed All debts were closed, leftovers were swapped to proper proportions\r\n  /// @return tokenAmountsOut Amounts to be deposited to pool. This array is empty if no deposit allowed/required.\r\n  function withdrawByAggStep(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    address[5] calldata addr_,\r\n    uint[4] calldata values_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    mapping(address => uint) storage liquidationThresholds\r\n  ) external returns (\r\n    bool completed,\r\n    uint[] memory tokenAmountsOut\r\n  ) {\r\n    uint entryToPool = values_[3];\r\n    address[2] memory tokens = [pairState.tokenA, pairState.tokenB];\r\n\r\n    // Calculate amounts to be deposited to pool, calculate loss, fix profitToCover\r\n    uint[] memory tokenAmounts;\r\n    uint loss;\r\n    (completed, tokenAmounts, loss) = PairBasedStrategyLogicLib.withdrawByAggStep(\r\n      addr_,\r\n      values_,\r\n      swapData,\r\n      planEntryData,\r\n      tokens,\r\n      liquidationThresholds\r\n    );\r\n\r\n    // cover loss\r\n    if (loss != 0) {\r\n      ConverterStrategyBaseLib2.coverLossAndCheckResults(\r\n        csbs,\r\n        addr_[4],\r\n        loss\r\n      );\r\n    }\r\n    emit RebalancedDebt(loss, values_[1], 0);\r\n\r\n    if (entryToPool == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED\r\n      || (entryToPool == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED && completed)\r\n    ) {\r\n      // We are going to enter to the pool: update lowerTick and upperTick, initialize tokenAmountsOut\r\n      (pairState.lowerTick, pairState.upperTick) = PancakeDebtLib._calcNewTickRange(\r\n        IPancakeV3Pool(pairState.pool),\r\n        pairState.lowerTick,\r\n        pairState.upperTick,\r\n        pairState.tickSpacing\r\n      );\r\n      tokenAmountsOut = tokenAmounts;\r\n    }\r\n    return (completed, tokenAmountsOut); // hide warning\r\n  }\r\n  //endregion ------------------------------------------------ WithdrawByAgg\r\n\r\n}\r\n"
    },
    "contracts/strategies/pancake/PancakeDebtLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"./PancakeLib.sol\";\r\nimport \"./PancakeStrategyErrors.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\nimport \"../../libs/BorrowLib.sol\";\r\nimport \"../../integrations/pancake/IPancakeV3Pool.sol\";\r\n\r\nlibrary PancakeDebtLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n//region  -------------------------------------------- Constants\r\n  uint public constant SELL_GAP = 100;\r\n  /// @dev should be placed local, probably will be adjusted later\r\n  uint internal constant BORROW_PERIOD_ESTIMATION = 30 days / 2;\r\n//endregion  -------------------------------------------- Constants\r\n\r\n//region  -------------------------------------------- Entry data\r\n  /// @notice Calculate proportions of the tokens for entry kind 1\r\n  /// @param pool Pool instance\r\n  /// @param lowerTick The lower tick of the pool's main range.\r\n  /// @param upperTick The upper tick of the pool's main range.\r\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\r\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  function getEntryDataProportions(\r\n    IPancakeV3Pool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    bool depositorSwapTokens\r\n  ) internal view returns (uint, uint) {\r\n    address token1 = pool.token1();\r\n    uint token1Price = PancakeLib.getPrice(address(pool), token1);\r\n\r\n    uint token1Decimals = IERC20Metadata(token1).decimals();\r\n\r\n    uint token0Desired = token1Price;\r\n    uint token1Desired = 10 ** token1Decimals;\r\n    require(token1Desired != 0, AppErrors.ZERO_VALUE);\r\n\r\n    // calculate proportions\r\n    (uint consumed0, uint consumed1,) = PancakeLib.addLiquidityPreview(address(pool), lowerTick, upperTick, token0Desired, token1Desired);\r\n\r\n    return depositorSwapTokens\r\n      ? (1e18*consumed1 * token1Price / token1Desired, 1e18*consumed0)\r\n      : (1e18*consumed0, 1e18*consumed1 * token1Price / token1Desired);\r\n  }\r\n//endregion  -------------------------------------------- Entry data\r\n\r\n//region  -------------------------------------------- Calc tick range\r\n  function calcTickRange(address pool, int24 tickRange, int24 tickSpacing) public view returns (int24 lowerTick, int24 upperTick) {\r\n    return PairBasedStrategyLogicLib.calcTickRange(getCurrentTick(IPancakeV3Pool(pool)), tickRange, tickSpacing);\r\n  }\r\n\r\n  function getCurrentTick(IPancakeV3Pool pool) public view returns(int24 tick) {\r\n    (, tick, , , , ,) = IPancakeV3Pool(pool).slot0();\r\n  }\r\n\r\n  /// @notice Calculate the new tick range for a PancakeSwap pool, the tick is read from the pool.\r\n  /// @param pool The PancakeSwap pool to calculate the new tick range for.\r\n  /// @param lowerTick The current lower tick value for the pool.\r\n  /// @param upperTick The current upper tick value for the pool.\r\n  /// @param tickSpacing The tick spacing for the pool.\r\n  /// @return lowerTickNew The new lower tick value for the pool.\r\n  /// @return upperTickNew The new upper tick value for the pool.\r\n  function _calcNewTickRange(\r\n    IPancakeV3Pool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing\r\n  ) internal view returns (int24 lowerTickNew, int24 upperTickNew) {\r\n    int24 currentTick = getCurrentTick(pool);\r\n    return _calcNewTickRangeForTick(currentTick, lowerTick, upperTick, tickSpacing);\r\n  }\r\n\r\n  /// @notice Calculate the new tick range for a PancakeSwap pool, the tick is known\r\n  function _calcNewTickRangeForTick(\r\n    int24 currentTick,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing\r\n  ) internal pure returns (int24 lowerTickNew, int24 upperTickNew) {\r\n    int24 fullTickRange = upperTick - lowerTick;\r\n    int24 tickRange = fullTickRange == tickSpacing\r\n      ? int24(0)\r\n      : fullTickRange / 2;\r\n    return PairBasedStrategyLogicLib.calcTickRange(currentTick, tickRange, tickSpacing);\r\n  }\r\n//endregion  -------------------------------------------- Calc tick range\r\n\r\n//region  -------------------------------------------- Rebalance\r\n  /// @notice Calculate right asset proportions, make rebalance, update lower/upper ticks in {pairState}\r\n  /// @param tick Current tick in the pool\r\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\r\n  function rebalanceNoSwaps(\r\n    address[2] calldata converterLiquidator,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint profitToCover,\r\n    uint totalAssets,\r\n    address splitter,\r\n    uint[2] calldata liquidationThresholdsAB,\r\n    int24 tick\r\n  ) external {\r\n    (int24 newLowerTick, int24 newUpperTick) = _calcNewTickRangeForTick(tick, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\r\n    (uint prop0, uint prop1) = getEntryDataProportions(IPancakeV3Pool(pairState.pool), newLowerTick, newUpperTick, pairState.depositorSwapTokens);\r\n    PairBasedStrategyLogicLib._rebalanceNoSwaps(\r\n      converterLiquidator,\r\n      pairState,\r\n      profitToCover,\r\n      totalAssets,\r\n      splitter,\r\n      liquidationThresholdsAB,\r\n      prop0 * BorrowLib.SUM_PROPORTIONS / (prop0 + prop1)\r\n    );\r\n    (pairState.lowerTick, pairState.upperTick) = (newLowerTick, newUpperTick);\r\n  }\r\n//endregion  -------------------------------------------- Rebalance\r\n\r\n//region  -------------------------------------------- Utils\r\n  /// @notice Call v.nft.positions(v.tokenId).\r\n  ///         npm-run-coverage produces stack-too-deep error on direct call of nft.positions, so we use workaround\r\n  /// @dev The function cannot return all params because of stack-too-deep, uncomment only values that you need.\r\n  /// @param nft address of IPancakeNonfungiblePositionManager\r\n  /// @param tokenId nft token\r\n  function callNftPositions(address nft, uint256 tokenId) internal view returns (\r\n//    uint96 nonce,\r\n//    address operator,\r\n//    address token0,\r\n//    address token1,\r\n//    uint24 fee,\r\n    int24 tickLower,\r\n    int24 tickUpper\r\n//    uint128 liquidity,\r\n//    uint256 feeGrowthInside0LastX128,\r\n//    uint256 feeGrowthInside1LastX128,\r\n//    uint128 tokensOwed0,\r\n//    uint128 tokensOwed1\r\n  ) {\r\n    bytes4 selector = bytes4(keccak256(\"positions(uint256)\"));\r\n    uint256[12] memory data;\r\n\r\n    assembly {\r\n    // Allocate memory for data to call the function\r\n      let ptr := mload(0x40)\r\n      mstore(ptr, selector)          // Store function selector\r\n      mstore(add(ptr, 0x04), tokenId)   // Store the argument\r\n\r\n    // Make the external call\r\n      let success := staticcall(\r\n        gas(),                   // gas remaining\r\n        nft,       // address of the external contract\r\n        ptr,                     // pointer to input data\r\n        0x24,                    // size of input data\r\n        ptr,                     // pointer for output data\r\n        0x180                    // size of output data (12 * 32 bytes)\r\n      )\r\n\r\n    // Check if the call was successful\r\n      if eq(success, 0) { revert(0, 0) }\r\n\r\n    // Copy return data\r\n      for { let i := 0 } lt(i, 12) { i := add(i, 1) } {\r\n        mstore(add(data, mul(i, 0x20)), mload(add(ptr, mul(i, 0x20))))\r\n      }\r\n    }\r\n\r\n//    nonce = uint96(data[0]);\r\n//    operator = address(uint160(data[1]));\r\n//    token0 = address(uint160(data[2]));\r\n//    token1 = address(uint160(data[3]));\r\n//    fee = uint24(data[4]);\r\n    tickLower = int24(int(data[5]));\r\n    tickUpper = int24(int(data[6]));\r\n//    liquidity = uint128(data[7]);\r\n//    feeGrowthInside0LastX128 = data[8];\r\n//    feeGrowthInside1LastX128 = data[9];\r\n//    tokensOwed0 = uint128(data[10]);\r\n//    tokensOwed1 = uint128(data[11]);\r\n  }\r\n\r\n//endregion  -------------------------------------------- Utils\r\n\r\n}\r\n"
    },
    "contracts/strategies/pancake/PancakeDepositor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\";\r\nimport \"./PancakeStrategyErrors.sol\";\r\nimport \"./PancakeConverterStrategyLogicLib.sol\";\r\nimport \"../DepositorBase.sol\";\r\nimport \"../../integrations/pancake/IPancakeV3MintCallback.sol\";\r\n\r\n/// @title PancakeDepositor\r\n/// @dev Abstract contract that is designed to interact with Uniswap V3 pools and manage liquidity.\r\n///      Inherits from IPancakeMintCallback, DepositorBase, and Initializable.\r\nabstract contract PancakeDepositor is IPancakeV3MintCallback, DepositorBase, Initializable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  //region ------------------------------------------------ Constants\r\n\r\n  /// @dev Version of this contract. Adjust manually on each code modification.\r\n  string public constant PANCAKE_DEPOSITOR_VERSION = \"1.0.0\";\r\n\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A = 0;\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B = 1;\r\n  //endregion ------------------------------------------------ Constants\r\n\r\n  //region ------------------------------------------------ Variables\r\n  /// @dev State variable to store the current state of the whole strategy\r\n  PancakeConverterStrategyLogicLib.State internal state;\r\n\r\n  /// @dev reserve space for future needs\r\n  uint[100 - 60] private __gap;\r\n  //endregion ------------------------------------------------ Variables\r\n\r\n  //region ------------------------------------------------ View\r\n\r\n  /// @return nums Balances of [tokenA, tokenB] for profit holder\r\n  function getSpecificState() external view returns (\r\n    uint[] memory nums\r\n  ) {\r\n    address strategyProfitHolder = state.pair.strategyProfitHolder;\r\n    nums = new uint[](2);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A] = IERC20(state.pair.tokenA).balanceOf(strategyProfitHolder);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B] = IERC20(state.pair.tokenB).balanceOf(strategyProfitHolder);\r\n  }\r\n\r\n  /// @notice Returns the pool assets.\r\n  /// @return poolAssets An array containing the addresses of the pool assets.\r\n  function _depositorPoolAssets() override internal virtual view returns (address[] memory poolAssets) {\r\n    poolAssets = new address[](2);\r\n    poolAssets[0] = state.pair.tokenA;\r\n    poolAssets[1] = state.pair.tokenB;\r\n  }\r\n\r\n  /// @notice Returns the pool weights and the total weight.\r\n  /// @return weights An array containing the weights of the pool assets, and totalWeight the sum of the weights.\r\n  function _depositorPoolWeights() override internal virtual view returns (uint[] memory weights, uint totalWeight) {\r\n    weights = new uint[](2);\r\n    weights[0] = 1;\r\n    weights[1] = 1;\r\n    totalWeight = 2;\r\n  }\r\n\r\n  /// @notice Returns the pool reserves.\r\n  /// @return reserves An array containing the reserves of the pool assets.\r\n  function _depositorPoolReserves() override internal virtual view returns (uint[] memory reserves) {\r\n    return PancakeConverterStrategyLogicLib.getPoolReserves(state.pair);\r\n  }\r\n\r\n  /// @notice Returns the current liquidity of the depositor.\r\n  /// @return The current liquidity of the depositor.\r\n  function _depositorLiquidity() override internal virtual view returns (uint) {\r\n    return uint(state.pair.totalLiquidity);\r\n  }\r\n\r\n  /// @notice Returns the total supply of the depositor.\r\n  /// @return In UniV3 we can not calculate the total supply of the whole pool. Return only ourself value.\r\n  function _depositorTotalSupply() override internal view virtual returns (uint) {\r\n    return uint(state.pair.totalLiquidity);\r\n  }\r\n  //endregion ------------------------------------------------ View\r\n\r\n  //region ------------------------------------------------ CALLBACK\r\n\r\n  /// @notice Callback function called by Uniswap V3 pool on mint operation.\r\n  /// @param amount0Owed The amount of token0 owed to the pool.\r\n  /// @param amount1Owed The amount of token1 owed to the pool.\r\n  function pancakeV3MintCallback(\r\n    uint amount0Owed,\r\n    uint amount1Owed,\r\n    bytes calldata /*_data*/\r\n  ) external override {\r\n    require(msg.sender == state.pair.pool, PancakeStrategyErrors.NOT_CALLBACK_CALLER);\r\n    if (amount0Owed != 0) IERC20(state.pair.depositorSwapTokens ? state.pair.tokenB : state.pair.tokenA).safeTransfer(msg.sender, amount0Owed);\r\n    if (amount1Owed != 0) IERC20(state.pair.depositorSwapTokens ? state.pair.tokenA : state.pair.tokenB).safeTransfer(msg.sender, amount1Owed);\r\n  }\r\n  //endregion ------------------------------------------------ CALLBACK\r\n\r\n  //region ------------------------------------------------ Enter, exit\r\n\r\n  /// @notice Handles the deposit operation.\r\n  function _depositorEnter(uint[] memory amountsDesired_) override internal virtual returns (\r\n    uint[] memory amountsConsumed,\r\n    uint liquidityOut\r\n  ) {\r\n    (amountsConsumed, liquidityOut) = PancakeConverterStrategyLogicLib.enter(state, amountsDesired_);\r\n  }\r\n\r\n  /// @notice Handles the withdrawal operation.\r\n  /// @param liquidityAmount The amount of liquidity to be withdrawn.\r\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\r\n  /// @return amountsOut The amounts of the tokens withdrawn.\r\n  function _depositorExit(uint liquidityAmount, bool emergency) override internal virtual returns (uint[] memory amountsOut) {\r\n    amountsOut = PancakeConverterStrategyLogicLib.exit(state, uint128(liquidityAmount), emergency);\r\n  }\r\n\r\n  /// @notice Returns the amount of tokens that would be withdrawn based on the provided liquidity amount.\r\n  /// @param liquidityAmount The amount of liquidity to quote the withdrawal for.\r\n  /// @return amountsOut The amounts of the tokens that would be withdrawn, underlying is first\r\n  function _depositorQuoteExit(uint liquidityAmount) override internal virtual returns (uint[] memory amountsOut) {\r\n    amountsOut = PancakeConverterStrategyLogicLib.quoteExit(state.pair, uint128(liquidityAmount));\r\n  }\r\n  //endregion ------------------------------------------------ Enter, exit\r\n\r\n  //region ------------------------------------------------ Claim rewards\r\n\r\n  /// @notice Claims all possible rewards.\r\n  /// @return tokensOut An array containing the addresses of the reward tokens,\r\n  /// @return amountsOut An array containing the amounts of the reward tokens.\r\n  function _depositorClaimRewards() override internal virtual returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    (tokensOut, amountsOut, balancesBefore) = PancakeConverterStrategyLogicLib.claimRewards(state);\r\n  }\r\n  //endregion ------------------------------------------------ Claim rewards\r\n\r\n}\r\n"
    },
    "contracts/strategies/pancake/PancakeLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"../../integrations/pancake/IPancakeV3Pool.sol\";\r\nimport {IPancakeMasterChefV3} from \"../../integrations/pancake/IPancakeMasterChefV3.sol\";\r\n\r\n/// @title PancakeSwap liquidity management helper\r\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\r\nlibrary PancakeLib {\r\n  uint8 internal constant RESOLUTION = 96;\r\n  uint internal constant Q96 = 0x1000000000000000000000000;\r\n  uint private constant TWO_96 = 2 ** 96;\r\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n  int24 internal constant MIN_TICK = - 887272;\r\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n  int24 internal constant MAX_TICK = - MIN_TICK;\r\n\r\n  function getTickSpacing(IPancakeV3Pool pool) external view returns (int24) {\r\n    return pool.tickSpacing();\r\n  }\r\n\r\n  function addLiquidityPreview(address pool_, int24 lowerTick_, int24 upperTick_, uint amount0Desired_, uint amount1Desired_) external view returns (uint amount0Consumed, uint amount1Consumed, uint128 liquidityOut) {\r\n    IPancakeV3Pool pool = IPancakeV3Pool(pool_);\r\n    (uint160 sqrtRatioX96, , , , , ,) = pool.slot0();\r\n    liquidityOut = getLiquidityForAmounts(sqrtRatioX96, lowerTick_, upperTick_, amount0Desired_, amount1Desired_);\r\n    (amount0Consumed, amount1Consumed) = getAmountsForLiquidity(sqrtRatioX96, lowerTick_, upperTick_, liquidityOut);\r\n  }\r\n\r\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getLiquidityForAmounts(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint amount0,\r\n    uint amount1\r\n  ) public pure returns (uint128 liquidity) {\r\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\r\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      liquidity = _getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      uint128 liquidity0 = _getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n      uint128 liquidity1 = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n    }\r\n  }\r\n\r\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getAmountsForLiquidity(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint128 liquidity\r\n  ) public pure returns (uint amount0, uint amount1) {\r\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\r\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\r\n\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      amount0 = _getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      amount0 = _getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\r\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\r\n    } else {\r\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n  function mulDiv(\r\n    uint a,\r\n    uint b,\r\n    uint denominator\r\n  ) public pure returns (uint result) {\r\n  unchecked {\r\n    // 512-bit multiply [prod1 prod0] = a * b\r\n    // Compute the product mod 2**256 and mod 2**256 - 1\r\n    // then use the Chinese Remainder Theorem to reconstruct\r\n    // the 512 bit result. The result is stored in two 256\r\n    // variables such that product = prod1 * 2**256 + prod0\r\n    uint prod0;\r\n    // Least significant 256 bits of the product\r\n    uint prod1;\r\n    // Most significant 256 bits of the product\r\n    assembly {\r\n      let mm := mulmod(a, b, not(0))\r\n      prod0 := mul(a, b)\r\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n    }\r\n\r\n    // Handle non-overflow cases, 256 by 256 division\r\n    if (prod1 == 0) {\r\n      require(denominator > 0);\r\n      assembly {\r\n        result := div(prod0, denominator)\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // Make sure the result is less than 2**256.\r\n    // Also prevents denominator == 0\r\n    require(denominator > prod1);\r\n\r\n    ///////////////////////////////////////////////\r\n    // 512 by 256 division.\r\n    ///////////////////////////////////////////////\r\n\r\n    // Make division exact by subtracting the remainder from [prod1 prod0]\r\n    // Compute remainder using mulmod\r\n    uint remainder;\r\n    assembly {\r\n      remainder := mulmod(a, b, denominator)\r\n    }\r\n    // Subtract 256 bit number from 512 bit number\r\n    assembly {\r\n      prod1 := sub(prod1, gt(remainder, prod0))\r\n      prod0 := sub(prod0, remainder)\r\n    }\r\n\r\n    // Factor powers of two out of denominator\r\n    // Compute largest power of two divisor of denominator.\r\n    // Always >= 1.\r\n    // EDIT for 0.8 compatibility:\r\n    // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint\r\n    uint twos = denominator & (~denominator + 1);\r\n\r\n    // Divide denominator by power of two\r\n    assembly {\r\n      denominator := div(denominator, twos)\r\n    }\r\n\r\n    // Divide [prod1 prod0] by the factors of two\r\n    assembly {\r\n      prod0 := div(prod0, twos)\r\n    }\r\n    // Shift in bits from prod1 into prod0. For this we need\r\n    // to flip `twos` such that it is 2**256 / twos.\r\n    // If twos is zero, then it becomes one\r\n    assembly {\r\n      twos := add(div(sub(0, twos), twos), 1)\r\n    }\r\n    prod0 |= prod1 * twos;\r\n\r\n    // Invert denominator mod 2**256\r\n    // Now that denominator is an odd number, it has an inverse\r\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n    // Compute the inverse by starting with a seed that is correct\r\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n    uint inv = (3 * denominator) ^ 2;\r\n    // Now use Newton-Raphson iteration to improve the precision.\r\n    // Thanks to Hensel's lifting lemma, this also works in modular\r\n    // arithmetic, doubling the correct bits in each step.\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**8\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**16\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**32\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**64\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**128\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**256\r\n\r\n    // Because the division is now exact we can divide by multiplying\r\n    // with the modular inverse of denominator. This will give us the\r\n    // correct result modulo 2**256. Since the precoditions guarantee\r\n    // that the outcome is less than 2**256, this is the final result.\r\n    // We don't need to compute the high bits of the result and prod1\r\n    // is no longer required.\r\n    result = prod0 * inv;\r\n    return result;\r\n  }\r\n  }\r\n\r\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  function mulDivRoundingUp(\r\n    uint a,\r\n    uint b,\r\n    uint denominator\r\n  ) internal pure returns (uint result) {\r\n    result = mulDiv(a, b, denominator);\r\n    if (mulmod(a, b, denominator) > 0) {\r\n      require(result < type(uint).max);\r\n      result++;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates price in pool\r\n  /// @return price with decimals of paired token\r\n  function getPrice(address pool_, address tokenIn) public view returns (uint) {\r\n    IPancakeV3Pool pool = IPancakeV3Pool(pool_);\r\n    address token0 = pool.token0();\r\n    address token1 = pool.token1();\r\n\r\n    uint tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,,,,) = pool.slot0();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (tokenIn == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n    return purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount0 The amount0 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function _getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount0) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    uint intermediate = mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\r\n    return _toUint128(mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount1 The amount1 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function _getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount1) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return _toUint128(mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount0 The amount0\r\n  function _getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount0) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return mulDivRoundingUp(1, mulDivRoundingUp(uint(liquidity) << RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96), sqrtRatioAX96);\r\n  }\r\n\r\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount1 The amount1\r\n  function _getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount1) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\r\n  }\r\n\r\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n  /// @dev Throws if |tick| > max tick\r\n  /// @param tick The input tick for the above formula\r\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n  /// at the given tick\r\n  function _getSqrtRatioAtTick(int24 tick)\r\n  internal\r\n  pure\r\n  returns (uint160 sqrtPriceX96)\r\n  {\r\n    uint256 absTick =\r\n    tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\r\n\r\n    // EDIT: 0.8 compatibility\r\n    require(absTick <= uint256(int256(MAX_TICK)), \"T\");\r\n\r\n    uint256 ratio =\r\n    absTick & 0x1 != 0\r\n    ? 0xfffcb933bd6fad37aa2d162d1a594001\r\n    : 0x100000000000000000000000000000000;\r\n    if (absTick & 0x2 != 0)\r\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n    if (absTick & 0x4 != 0)\r\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n    if (absTick & 0x8 != 0)\r\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n    if (absTick & 0x10 != 0)\r\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n    if (absTick & 0x20 != 0)\r\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n    if (absTick & 0x40 != 0)\r\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n    if (absTick & 0x80 != 0)\r\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n    if (absTick & 0x100 != 0)\r\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n    if (absTick & 0x200 != 0)\r\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n    if (absTick & 0x400 != 0)\r\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n    if (absTick & 0x800 != 0)\r\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n    if (absTick & 0x1000 != 0)\r\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n    if (absTick & 0x2000 != 0)\r\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n    if (absTick & 0x4000 != 0)\r\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n    if (absTick & 0x8000 != 0)\r\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n    if (absTick & 0x10000 != 0)\r\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n    if (absTick & 0x20000 != 0)\r\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n    if (absTick & 0x40000 != 0)\r\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n    if (absTick & 0x80000 != 0)\r\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n    if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n    sqrtPriceX96 = uint160(\r\n      (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\r\n    );\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function _min(uint a, uint b) internal pure returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function _max(uint a, uint b) internal pure returns (uint) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  function _toUint128(uint x) private pure returns (uint128 y) {\r\n    require((y = uint128(x)) == x);\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/pancake/PancakeStrategyErrors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nlibrary PancakeStrategyErrors {\r\n\r\n  string public constant NEED_REBALANCE = \"PS-1 Need rebalance\";\r\n  string public constant WRONG_BALANCE = \"PS-2 Wrong balance\";\r\n  string public constant INCORRECT_TICK_RANGE = \"PS-3 Incorrect tickRange\";\r\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \"PS-4 Incorrect rebalanceTickRange\";\r\n  string public constant INCORRECT_ASSET = \"PS-5 Incorrect asset\";\r\n  string public constant WRONG_FEE = \"PS-6 Wrong fee\";\r\n  string public constant WRONG_LIQUIDITY = \"PS-7 Wrong liquidity\";\r\n  string public constant WRONG_FILLUP = \"PS-8 Wrong fillup\";\r\n  string public constant NO_REBALANCE_NEEDED = \"PS-9 No rebalance needed\";\r\n  string public constant BALANCE_LOWER_THAN_FEE = \"PS-10 Balance lower than fee\";\r\n  string public constant NOT_CALLBACK_CALLER = \"PS-11 Not callback caller\";\r\n  string public constant ZERO_PROFIT_HOLDER = \"PS-13 Zero strategy profit holder\";\r\n  string public constant FUSE_IS_ACTIVE = \"PS-14 Fuse is active\";\r\n\r\n}\r\n"
    },
    "contracts/strategies/StrategyProfitHolder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\";\r\n\r\ncontract StrategyProfitHolder {\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public immutable strategy;\r\n  address[] public tokens;\r\n\r\n  constructor(address strategy_, address[] memory tokens_) {\r\n    strategy = strategy_;\r\n    tokens = tokens_;\r\n    uint len = tokens_.length;\r\n    for (uint i; i < len; ++i) {\r\n      IERC20(tokens_[i]).safeApprove(strategy_, 2 ** 255);\r\n    }\r\n  }\r\n\r\n  function addToken(address token) external {\r\n    address _strategy = strategy;\r\n    require(msg.sender == _strategy, \"SPH: denied\");\r\n    uint len = tokens.length;\r\n    for (uint i; i < len; ++i) {\r\n      require(tokens[i] != token, \"SPH: token exists\");\r\n    }\r\n    tokens.push(token);\r\n    IERC20(token).safeApprove(_strategy, 2 ** 255);\r\n  }\r\n\r\n  function tokensLength() external view returns (uint) {\r\n    return tokens.length;\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/tetu-v1/ExternalRateProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC4626.sol\";\r\nimport \"../../integrations/balancer/IRateProvider.sol\";\r\n\r\n/// @dev Rete provider which uses external rate provider to calculate rate.\r\n///      It is used to calculate rate for tokens like stMatic. We have external rate for MATIC/stMatic.\r\n/// @author AlehNat\r\ncontract ExternalRateProvider is IRateProvider {\r\n\r\n  // underlying asset\r\n  address public immutable asset;\r\n\r\n  // ERC4626 vault\r\n  address public immutable vault;\r\n\r\n  // external rate provider\r\n  address public immutable externalRateProvider;\r\n\r\n  constructor(address _asset, address _vault, address _externalRateProvider) {\r\n    require(_asset != address(0) && _vault != address(0) && _externalRateProvider != address(0), 'mandatory params');\r\n    asset = _asset;\r\n    vault = _vault;\r\n    externalRateProvider = _externalRateProvider;\r\n  }\r\n\r\n  function getRate() external view override returns (uint256) {\r\n    uint assetPrecision = 10 ** IERC20Metadata(asset).decimals();\r\n    return IERC4626(vault).convertToAssets(assetPrecision) * IRateProvider(externalRateProvider).getRate() / assetPrecision;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/strategies/tetu-v1/TetuV1SingleTokenStrictStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyStrictBase.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"../../integrations/tetu-v1/ISmartVault.sol\";\r\nimport \"../../libs/AppLib.sol\";\r\nimport \"../../integrations/balancer/IRateProvider.sol\";\r\n\r\n/// @title Simple auto compounding strategy for TETU V1 vaults.\r\n/// @author AlehNat\r\ncontract TetuV1SingleTokenStrictStrategy is StrategyStrictBase, IRateProvider {\r\n  using SafeERC20 for IERC20;\r\n\r\n  string public constant override NAME = \"TetuV1 Single Token Strict Strategy\";\r\n  string public constant override PLATFORM = \"TETU\";\r\n  string public constant override STRATEGY_VERSION = \"1.0.0\";\r\n\r\n  uint private constant _ASSET_LIQUIDATION_SLIPPAGE = 5000; // 5%\r\n\r\n  // in this strategy TETU V1 vault is used as a pool\r\n  ISmartVault public immutable pool;\r\n  ITetuLiquidator public immutable liquidator;\r\n  address public immutable xTetuAddress;\r\n\r\n  bool public override isReadyToHardWork;\r\n\r\n  constructor(address _pool, address _liquidator, address _xTetuAddress) {\r\n    require(_pool != address(0) && _liquidator != address(0) && _xTetuAddress != address(0), '!address');\r\n    pool = ISmartVault(_pool);\r\n    liquidator = ITetuLiquidator(_liquidator);\r\n    xTetuAddress = _xTetuAddress;\r\n    isReadyToHardWork = true;\r\n  }\r\n\r\n\r\n  // uint earned, uint lost is it in USD?\r\n  function doHardWork() external override returns (uint earned, uint lost) {\r\n    // if we have some asset in the strategy we need to deposit it to the pool to not liquidate it.\r\n    uint assetBalanceBeforeClaim = AppLib.balance(asset);\r\n    if (assetBalanceBeforeClaim > 0) {\r\n      _depositToPool(assetBalanceBeforeClaim);\r\n    }\r\n\r\n    uint strategyBalanceBefore = pool.underlyingBalanceWithInvestmentForHolder(address(this));\r\n\r\n    _claim();\r\n    _unwrapXTetu();\r\n    _liquidateReward();\r\n    uint assetBalance = AppLib.balance(asset);\r\n    if (assetBalance > 0) {\r\n      _depositToPool(assetBalance);\r\n    }\r\n    earned = 0;\r\n    lost = 0;\r\n\r\n    uint strategyBalanceAfter = pool.underlyingBalanceWithInvestmentForHolder(address(this));\r\n\r\n    if (strategyBalanceAfter > strategyBalanceBefore) {\r\n      earned = strategyBalanceAfter - strategyBalanceBefore;\r\n    } else {\r\n      lost = strategyBalanceBefore - strategyBalanceAfter;\r\n    }\r\n  }\r\n\r\n  /// @dev Deposit given amount to the pool.\r\n  function _depositToPool(uint amount) internal override {\r\n    IERC20(asset).safeIncreaseAllowance(address(pool), amount);\r\n    pool.depositAndInvest(amount);\r\n  }\r\n\r\n  /// @dev Withdraw given amount from the pool.\r\n  /// @return investedAssetsUSD and assetPrice are not used in this strategy (0,0)\r\n  function _withdrawFromPool(uint amount) internal override returns (uint investedAssetsUSD, uint assetPrice) {\r\n    pool.withdraw(amount);\r\n    return (0, 0);\r\n  }\r\n\r\n  /// @dev Withdraw all from the pool.\r\n  /// @return investedAssetsUSD and assetPrice are not used in this strategy returns (0,0)\r\n  function _withdrawAllFromPool() internal override returns (uint investedAssetsUSD, uint assetPrice) {\r\n    uint totalBalance = AppLib.balance(address(pool));\r\n    return _withdrawFromPool(totalBalance);\r\n  }\r\n\r\n  /// @dev If pool support emergency withdraw need to call it for emergencyExit()\r\n  ///      Withdraw assets without impact checking.\r\n  function _emergencyExitFromPool() internal override {\r\n    _withdrawAllFromPool();\r\n  }\r\n\r\n  /// @dev Claim all possible rewards.\r\n  function _claim() internal override {\r\n    pool.getAllRewards();\r\n  }\r\n\r\n  function _unwrapXTetu() internal {\r\n    uint xTetuBalance = AppLib.balance(xTetuAddress);\r\n    if (xTetuBalance > 0) {\r\n      ISmartVault(xTetuAddress).withdraw(xTetuBalance);\r\n    }\r\n  }\r\n\r\n  function _liquidateReward() internal {\r\n    address [] memory rewardTokens = pool.rewardTokens();\r\n    for (uint i = 0; i < rewardTokens.length; i = AppLib.uncheckedInc(i)) {\r\n      address rewardToken = rewardTokens[i];\r\n      uint rewardBalance = AppLib.balance(rewardToken);\r\n      if (rewardBalance > 0) {\r\n        IERC20(rewardToken).safeIncreaseAllowance(address(liquidator), rewardBalance);\r\n        liquidator.liquidate(rewardToken, asset, rewardBalance, _ASSET_LIQUIDATION_SLIPPAGE);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getRate() external view override returns (uint256) {\r\n    uint assetPrecision = 10 ** IERC20Metadata(asset).decimals();\r\n    return IERC4626(vault).convertToAssets(assetPrecision) * 1e18 / assetPrecision;\r\n  }\r\n\r\n  function investedAssets() public view override returns (uint) {\r\n    return pool.underlyingBalanceWithInvestmentForHolder(address(this));\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/strategies/uniswap/Uni3StrategyErrors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nlibrary Uni3StrategyErrors {\r\n\r\n  string public constant NEED_REBALANCE = \"U3S-1 Need rebalance\";\r\n  string public constant WRONG_BALANCE = \"U3S-2 Wrong balance\";\r\n  string public constant INCORRECT_TICK_RANGE = \"U3S-3 Incorrect tickRange\";\r\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \"U3S-4 Incorrect rebalanceTickRange\";\r\n  string public constant INCORRECT_ASSET = \"U3S-5 Incorrect asset\";\r\n  string public constant WRONG_FEE = \"U3S-6 Wrong fee\";\r\n  string public constant WRONG_LIQUIDITY = \"U3S-7 Wrong liquidity\";\r\n  string public constant WRONG_FILLUP = \"U3S-8 Wrong fillup\";\r\n  string public constant NO_REBALANCE_NEEDED = \"U3S-9 No rebalance needed\";\r\n  string public constant BALANCE_LOWER_THAN_FEE = \"U3S-10 Balance lower than fee\";\r\n  string public constant NOT_CALLBACK_CALLER = \"U3S-11 Not callback caller\";\r\n  string public constant ZERO_PROFIT_HOLDER = \"U3S-13 Zero strategy profit holder\";\r\n  string public constant FUSE_IS_ACTIVE = \"U3S-14 Fuse is active\";\r\n\r\n}\r\n"
    },
    "contracts/strategies/uniswap/UniswapV3ConverterStrategy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../ConverterStrategyBase.sol\";\r\nimport \"./UniswapV3Depositor.sol\";\r\nimport \"./UniswapV3ConverterStrategyLogicLib.sol\";\r\nimport \"../../libs/AppPlatforms.sol\";\r\nimport \"../../interfaces/IRebalancingV2Strategy.sol\";\r\nimport \"./Uni3StrategyErrors.sol\";\r\nimport \"../pair/PairBasedStrategyLib.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\n/// @title Delta-neutral liquidity hedging converter fill-up/swap rebalancing strategy for UniswapV3\r\n/// @notice This strategy provides delta-neutral liquidity hedging for Uniswap V3 pools. It rebalances the liquidity\r\n///         by utilizing fill-up and swap methods depending on the range size of the liquidity provided.\r\n/// @author a17\r\ncontract UniswapV3ConverterStrategy is UniswapV3Depositor, ConverterStrategyBase, IRebalancingV2Strategy {\r\n\r\n  //region ------------------------------------------------- Constants\r\n\r\n  string public constant override NAME = \"UniswapV3 Converter Strategy\";\r\n  string public constant override PLATFORM = AppPlatforms.UNIV3;\r\n  string public constant override STRATEGY_VERSION = \"3.1.3\";\r\n\r\n  //endregion ------------------------------------------------- Constants\r\n\r\n  //region ------------------------------------------------- INIT\r\n\r\n  /// @notice Initialize the strategy with the given parameters.\r\n  /// @param controller_ The address of the controller.\r\n  /// @param splitter_ The address of the splitter.\r\n  /// @param converter_ The address of the converter.\r\n  /// @param pool_ The address of the pool.\r\n  /// @param tickRange_ The tick range for the liquidity position.\r\n  /// @param rebalanceTickRange_ The tick range for rebalancing.\r\n  /// @param fuseThresholds Price thresholds for tokens [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  function init(\r\n    address controller_,\r\n    address splitter_,\r\n    address converter_,\r\n    address pool_,\r\n    int24 tickRange_,\r\n    int24 rebalanceTickRange_,\r\n    uint[4] calldata fuseThresholds\r\n  ) external initializer {\r\n    __ConverterStrategyBase_init(controller_, splitter_, converter_);\r\n    UniswapV3ConverterStrategyLogicLib.initStrategyState(\r\n      state,\r\n      controller_,\r\n      pool_,\r\n      tickRange_,\r\n      rebalanceTickRange_,\r\n      ISplitter(splitter_).asset(),\r\n      fuseThresholds\r\n    );\r\n\r\n    // setup specific name for UI\r\n    StrategyLib2._changeStrategySpecificName(baseState, UniswapV3ConverterStrategyLogicLib.createSpecificName(state.pair));\r\n  }\r\n  //endregion ------------------------------------------------- INIT\r\n\r\n  //region --------------------------------------------- OPERATOR ACTIONS\r\n\r\n  /// @notice Manually set status of the fuse\r\n  /// @param status See PairBasedStrategyLib.FuseStatus enum for possible values\r\n  function setFuseStatus(uint status) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    PairBasedStrategyLib.setFuseStatus(state.pair.fuseAB, PairBasedStrategyLib.FuseStatus(status));\r\n  }\r\n\r\n  /// @notice Set thresholds for the fuse: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  ///         Decimals 18. The thresholds are compared with prices from TetuConverter's price oracle.\r\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\r\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\r\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\r\n  /// @param values Price thresholds: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\r\n  function setFuseThresholds(uint[4] memory values) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    PairBasedStrategyLib.setFuseThresholds(state.pair.fuseAB, values);\r\n  }\r\n\r\n  /// @dev Set a dedicated contract for rewards for properly counting.\r\n  ///      It is safe to allow change it to operator - we suppose the contract only temporally store the last rewards.\r\n  function setStrategyProfitHolder(address strategyProfitHolder) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    state.pair.strategyProfitHolder = strategyProfitHolder;\r\n  }\r\n\r\n  /// @notice Set withdrawDone value.\r\n  ///         When a fuse was triggered ON, all debts should be closed and asset should be converted to underlying.\r\n  ///         After completion of the conversion withdrawDone can be set to 1.\r\n  ///         So, {getFuseStatus} will return  withdrawDone=1 and you will know, that withdraw is not required\r\n  /// @param done 0 - full withdraw required, 1 - full withdraw was done\r\n  function setWithdrawDone(uint done) external {\r\n    StrategyLib2.onlyOperators(controller());\r\n    state.pair.withdrawDone = done;\r\n  }\r\n  //endregion --------------------------------------------- OPERATOR ACTIONS\r\n\r\n  //region --------------------------------------------- METRIC VIEWS\r\n\r\n  /// @notice Check if the strategy is ready for hard work.\r\n  /// @return A boolean indicating if the strategy is ready for hard work.\r\n  function isReadyToHardWork() override external virtual view returns (bool) {\r\n    return !needRebalance()\r\n    && !_isFuseTriggeredOn()\r\n    && UniswapV3ConverterStrategyLogicLib.isReadyToHardWork(state.pair, _csbs.converter);\r\n  }\r\n\r\n  /// @notice Check if the strategy needs rebalancing.\r\n  /// @return A boolean indicating if {rebalanceNoSwaps} should be called.\r\n  function needRebalance() public view override returns (bool) {\r\n    return UniswapV3ConverterStrategyLogicLib.needStrategyRebalance(state.pair, _csbs.converter);\r\n  }\r\n\r\n  /// @notice Returns the current state of the contract\r\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\r\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  /// @return nums [totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone, 4 thresholds of token A, 4 thresholds of token B]\r\n  /// @return boolValues [isStablePool, depositorSwapTokens]\r\n  function getDefaultState() external view override returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  ) {\r\n    return PairBasedStrategyLogicLib.getDefaultState(state.pair);\r\n  }\r\n  //endregion ---------------------------------------------- METRIC VIEWS\r\n\r\n  //region--------------------------------------------- REBALANCE\r\n  /// @notice Rebalance using borrow/repay only, no swaps\r\n  /// @param checkNeedRebalance Revert if rebalance is not needed. Pass false to deposit after withdrawByAgg-iterations\r\n  function rebalanceNoSwaps(bool checkNeedRebalance) external override {\r\n    address _controller = controller();\r\n    StrategyLib2.onlyOperators(_controller);\r\n\r\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\r\n    uint[] memory tokenAmounts = UniswapV3ConverterStrategyLogicLib.rebalanceNoSwaps(\r\n      _csbs,\r\n      state.pair,\r\n      [address(_csbs.converter), address(AppLib._getLiquidator(_controller))],\r\n      oldTotalAssets,\r\n      profitToCover,\r\n      baseState.splitter,\r\n      checkNeedRebalance,\r\n      liquidationThresholds\r\n    );\r\n    _rebalanceAfter(tokenAmounts);\r\n    state.pair.lastRebalanceNoSwap = block.timestamp;\r\n  }\r\n  //endregion--------------------------------------------- REBALANCE\r\n\r\n  //region --------------------------------------------- Withdraw by iterations\r\n\r\n  /// @notice Get info about a swap required by next call of {withdrawByAggStep} within the given plan\r\n  function quoteWithdrawByAgg(bytes memory planEntryData) external returns (address tokenToSwap, uint amountToSwap) {\r\n    // restriction \"operator only\" is checked inside {initWithdrawLocal} in {quoteWithdrawStep}\r\n\r\n    // estimate amounts to be withdrawn from the pool\r\n    uint totalLiquidity = state.pair.totalLiquidity;\r\n    uint[] memory amountsOut = (totalLiquidity == 0)\r\n      ? new uint[](2)\r\n      : _depositorQuoteExit(totalLiquidity);\r\n\r\n    return PairBasedStrategyLogicLib.quoteWithdrawByAgg(\r\n      state.pair,\r\n      planEntryData,\r\n      amountsOut,\r\n      controller(),\r\n      _csbs.converter,\r\n      liquidationThresholds\r\n    );\r\n  }\r\n\r\n  /// @notice Make withdraw iteration: [exit from the pool], [make 1 swap], [repay a debt], [enter to the pool]\r\n  ///         Typical sequence of the actions is: exit from the pool, make 1 swap, repay 1 debt.\r\n  ///         You can enter to the pool if you are sure that you won't have borrow + repay on AAVE3 in the same block.\r\n  /// @dev All swap-by-agg data should be prepared using {quoteWithdrawByAgg} off-chain\r\n  /// @param tokenToSwap_ What token should be swapped to other\r\n  /// @param aggregator_ Aggregator that should be used on next swap. 0 - use liquidator\r\n  /// @param amountToSwap_ Amount that should be swapped. 0 - no swap\r\n  /// @param swapData Swap rote that was prepared off-chain.\r\n  /// @param planEntryData PLAN_XXX + additional data, see IterationPlanKinds\r\n  /// @param entryToPool Allow to enter to the pool at the end. Use false if you are going to make several iterations.\r\n  ///                    It's possible to enter back to the pool by calling {rebalanceNoSwaps} at any moment\r\n  ///                    0 - not allowed, 1 - allowed, 2 - allowed only if completed\r\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions.\r\n  function withdrawByAggStep(\r\n    address tokenToSwap_,\r\n    address aggregator_,\r\n    uint amountToSwap_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    uint entryToPool\r\n  ) external returns (bool completed) {\r\n    // restriction \"operator only\" is checked inside UniswapV3ConverterStrategyLogicLib.withdrawByAggStep\r\n    // fix price changes, exit from the pool\r\n    (uint profitToCover, uint oldTotalAssets) = _rebalanceBefore();\r\n\r\n    // check \"operator only\", make withdraw step, cover-loss, send profit to cover, prepare to enter to the pool\r\n    uint[] memory tokenAmounts;\r\n\r\n    (completed, tokenAmounts) = UniswapV3ConverterStrategyLogicLib.withdrawByAggStep(\r\n      _csbs,\r\n      [tokenToSwap_, aggregator_, controller(), address(_csbs.converter), baseState.splitter],\r\n      [amountToSwap_, profitToCover, oldTotalAssets, entryToPool],\r\n      swapData,\r\n      planEntryData,\r\n      state.pair,\r\n      liquidationThresholds\r\n    );\r\n\r\n    // enter to the pool\r\n    _rebalanceAfter(tokenAmounts);\r\n    state.pair.lastRebalanceNoSwap = 0;\r\n\r\n    if (completed && _isFuseTriggeredOn()) {\r\n      // full withdraw was completed, we can exclude next calls of withdrawByAggStep\r\n      state.pair.withdrawDone = 1;\r\n    }\r\n\r\n    ConverterStrategyBaseLib2.fixTooHighInvestedAssets(baseState.asset, oldTotalAssets, _csbs);\r\n  }\r\n\r\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\r\n  /// @return Proportion of the not-underlying [0...1e18]\r\n  function getPropNotUnderlying18() external view override returns (uint) {\r\n    return UniswapV3ConverterStrategyLogicLib.getPropNotUnderlying18(state.pair);\r\n  }\r\n  //endregion ------------------------------------ Withdraw by iterations\r\n\r\n  //region--------------------------------------------- INTERNAL LOGIC\r\n\r\n  function _beforeDeposit(\r\n    ITetuConverter converter_,\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint /*indexAsset_*/\r\n  ) override internal virtual returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    require(!needRebalance(), Uni3StrategyErrors.NEED_REBALANCE);\r\n    (uint prop0, uint prop1) = UniswapV3ConverterStrategyLogicLib.getEntryDataProportions(\r\n      IUniswapV3Pool(state.pair.pool),\r\n      state.pair.lowerTick,\r\n      state.pair.upperTick,\r\n      state.pair.depositorSwapTokens\r\n    );\r\n\r\n    // get token amounts for token A, token B\r\n    address tokenA = state.pair.tokenA;\r\n    tokenAmounts = PairBasedStrategyLogicLib._beforeDeposit(\r\n      converter_,\r\n      amount_,\r\n      tokenA,\r\n      state.pair.tokenB,\r\n      prop0 * 1e18 / (prop0 + prop1),\r\n      liquidationThresholds\r\n    );\r\n\r\n    // take into account a possibility that tokens_ can contain [B, A]\r\n    if (tokens_[0] != tokenA) {\r\n      (tokenAmounts[0], tokenAmounts[1]) = (tokenAmounts[1], tokenAmounts[0]);\r\n    }\r\n  }\r\n\r\n  /// @notice Claim rewards, do _processClaims() after claiming, calculate earned and lost amounts\r\n  /// @return earned The amount of earned rewards\r\n  /// @return lost The amount of lost rewards\r\n  /// @return assetBalanceAfterClaim The asset balance after claiming rewards.\r\n  /// @return paidDebtToInsurance Earned amount spent on debt-to-insurance payment\r\n  /// @return amountPerf Total performance fee in terms of underlying\r\n  function _handleRewards() override internal virtual returns (\r\n    uint earned,\r\n    uint lost,\r\n    uint assetBalanceAfterClaim,\r\n    uint paidDebtToInsurance,\r\n    uint amountPerf\r\n  ) {\r\n    (address[] memory rewardTokens, uint[] memory amounts) = _claim();\r\n    address asset = baseState.asset;\r\n    earned = UniswapV3ConverterStrategyLogicLib.calcEarned(asset, controller(), rewardTokens, amounts);\r\n    (paidDebtToInsurance, amountPerf) = _rewardsLiquidation(rewardTokens, amounts);\r\n    lost = 0; // hide warning\r\n    assetBalanceAfterClaim = AppLib.balance(asset);\r\n  }\r\n\r\n  /// @notice Deposit given amount to the pool.\r\n  /// @param amount_ The amount to be deposited.\r\n  /// @param updateTotalAssetsBeforeInvest_ A boolean indicating if the total assets should be updated before investing.\r\n  /// @return strategyLoss Loss should be covered from Insurance\r\n  function _depositToPool(uint amount_, bool updateTotalAssetsBeforeInvest_) override internal virtual returns (\r\n    uint strategyLoss\r\n  ) {\r\n    if (_isFuseTriggeredOn()) {\r\n      uint[] memory tokenAmounts = new uint[](2);\r\n      tokenAmounts[0] = amount_;\r\n      emit OnDepositorEnter(tokenAmounts, tokenAmounts);\r\n      return 0;\r\n    } else {\r\n      return super._depositToPool(amount_, updateTotalAssetsBeforeInvest_);\r\n    }\r\n  }\r\n\r\n  function _beforeWithdraw(uint /*amount*/) internal view override {\r\n    require(!needRebalance(), Uni3StrategyErrors.NEED_REBALANCE);\r\n  }\r\n\r\n  /// @notice Check need-rebalance and fuse-ON\r\n  /// @return True if the hardwork should be skipped\r\n  function _preHardWork(bool reInvest) internal view override returns (bool) {\r\n    reInvest; // hide warning\r\n    require(!needRebalance(), Uni3StrategyErrors.NEED_REBALANCE);\r\n    require(!_isFuseTriggeredOn(), Uni3StrategyErrors.FUSE_IS_ACTIVE);\r\n    return false;\r\n  }\r\n\r\n  /// @notice Prepare to rebalance: fix price changes, call depositor exit if totalLiquidity != 0\r\n  function _rebalanceBefore() internal returns (uint profitToCover, uint oldTotalAssets) {\r\n    (, profitToCover) = _fixPriceChanges(true);\r\n    oldTotalAssets = totalAssets() - profitToCover;\r\n\r\n    // withdraw all liquidity from pool\r\n    // after disableFuse() liquidity is zero\r\n    uint liquidity = state.pair.totalLiquidity;\r\n    if (liquidity != 0) {\r\n      _depositorExit(liquidity, false);\r\n    }\r\n  }\r\n\r\n  /// @notice Make actions after rebalance: depositor enter, update invested assets\r\n  function _rebalanceAfter(uint[] memory tokenAmounts) internal {\r\n    if (tokenAmounts.length == 2 && !_isFuseTriggeredOn()) {\r\n      _depositorEnter(tokenAmounts);\r\n    }\r\n    _updateInvestedAssets();\r\n  }\r\n\r\n  function _isFuseTriggeredOn() internal view returns (bool) {\r\n    return PairBasedStrategyLib.isFuseTriggeredOn(state.pair.fuseAB.status);\r\n  }\r\n  //endregion--------------------------------------- INTERNAL LOGIC\r\n}\r\n"
    },
    "contracts/strategies/uniswap/UniswapV3ConverterStrategyLogicLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"./UniswapV3Lib.sol\";\r\nimport \"./UniswapV3DebtLib.sol\";\r\nimport \"./Uni3StrategyErrors.sol\";\r\nimport \"../../libs/AppLib.sol\";\r\nimport \"../../libs/AppErrors.sol\";\r\nimport \"../ConverterStrategyBaseLib.sol\";\r\nimport \"../ConverterStrategyBaseLib2.sol\";\r\nimport \"../pair/PairBasedStrategyLib.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\nlibrary UniswapV3ConverterStrategyLogicLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n  //region ------------------------------------------------ Constants\r\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_STABLE = 300;\r\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE = 500;\r\n  uint internal constant HARD_WORK_USD_FEE_THRESHOLD = 100;\r\n  //endregion ------------------------------------------------ Constants\r\n\r\n  //region ------------------------------------------------ Events\r\n  event Rebalanced(uint loss, uint profitToCover, uint coveredByRewards);\r\n  event RebalancedDebt(uint loss, uint profitToCover, uint coveredByRewards);\r\n  event UniV3FeesClaimed(uint fee0, uint fee1);\r\n  //endregion ------------------------------------------------ Events\r\n\r\n  //region ------------------------------------------------ Data types\r\n\r\n  struct State {\r\n    PairBasedStrategyLogicLib.PairState pair;\r\n    // additional (specific) state\r\n\r\n    /// @dev reserve space for future needs\r\n    uint[10] __gap;\r\n  }\r\n\r\n  struct RebalanceLocal {\r\n    /// @notice Fuse for token A and token B\r\n    PairBasedStrategyLib.FuseStateParams fuseAB;\r\n    ITetuConverter converter;\r\n    IUniswapV3Pool pool;\r\n    address tokenA;\r\n    address tokenB;\r\n    bool isStablePool;\r\n    uint[2] liquidationThresholdsAB;\r\n\r\n    bool fuseStatusChangedAB;\r\n    PairBasedStrategyLib.FuseStatus fuseStatusAB;\r\n\r\n    uint poolPrice;\r\n    uint poolPriceAdjustment;\r\n  }\r\n  //endregion ------------------------------------------------ Data types\r\n\r\n  //region ------------------------------------------------ Helpers\r\n\r\n  /// @dev Gets the liquidator swap slippage based on the pool type (stable or volatile).\r\n  /// @param pool The IUniswapV3Pool instance.\r\n  /// @return The liquidator swap slippage percentage.\r\n  function _getLiquidatorSwapSlippage(IUniswapV3Pool pool) internal view returns (uint) {\r\n    return isStablePool(pool) ? LIQUIDATOR_SWAP_SLIPPAGE_STABLE : LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE;\r\n  }\r\n\r\n  /// @notice Check if the given pool is a stable pool.\r\n  /// @param pool The Uniswap V3 pool.\r\n  /// @return A boolean indicating if the pool is stable.\r\n  function isStablePool(IUniswapV3Pool pool) public view returns (bool) {\r\n    return pool.fee() == 100;\r\n  }\r\n\r\n  /// @param fuseThresholds Fuse thresholds for tokens (stable pool only)\r\n  function initStrategyState(\r\n    State storage state,\r\n    address controller_,\r\n    address pool,\r\n    int24 tickRange,\r\n    int24 rebalanceTickRange,\r\n    address asset_,\r\n    uint[4] calldata fuseThresholds\r\n  ) external {\r\n    require(pool != address(0), AppErrors.ZERO_ADDRESS);\r\n    address token0 = IUniswapV3Pool(pool).token0();\r\n    address token1 = IUniswapV3Pool(pool).token1();\r\n\r\n    int24[4] memory tickData;\r\n    {\r\n      int24 tickSpacing = UniswapV3Lib.getTickSpacing(IUniswapV3Pool(pool).fee());\r\n      if (tickRange != 0) {\r\n        require(tickRange == tickRange / tickSpacing * tickSpacing, PairBasedStrategyLib.INCORRECT_TICK_RANGE);\r\n        require(rebalanceTickRange == rebalanceTickRange / tickSpacing * tickSpacing, PairBasedStrategyLib.INCORRECT_REBALANCE_TICK_RANGE);\r\n      }\r\n      tickData[0] = tickSpacing;\r\n      (tickData[1], tickData[2]) = UniswapV3DebtLib.calcTickRange(pool, tickRange, tickSpacing);\r\n      tickData[3] = rebalanceTickRange;\r\n    }\r\n\r\n    PairBasedStrategyLogicLib.setInitialDepositorValues(\r\n      state.pair,\r\n      [pool, asset_, token0, token1],\r\n      tickData,\r\n      isStablePool(IUniswapV3Pool(pool)),\r\n      fuseThresholds\r\n    );\r\n\r\n    address liquidator = IController(controller_).liquidator();\r\n    IERC20(token0).approve(liquidator, type(uint).max);\r\n    IERC20(token1).approve(liquidator, type(uint).max);\r\n  }\r\n\r\n  function createSpecificName(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (string memory) {\r\n    return string(abi.encodePacked(\r\n      \"UniV3 \",\r\n      IERC20Metadata(pairState.tokenA).symbol(),\r\n      \"/\",\r\n      IERC20Metadata(pairState.tokenB).symbol(),\r\n      \"-\",\r\n      StringLib._toString(IUniswapV3Pool(pairState.pool).fee()))\r\n    );\r\n  }\r\n\r\n  /// @notice Calculate proportions of the tokens for entry kind 1\r\n  /// @param pool Pool instance.\r\n  /// @param lowerTick The lower tick of the pool's main range.\r\n  /// @param upperTick The upper tick of the pool's main range.\r\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\r\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  function getEntryDataProportions(IUniswapV3Pool pool, int24 lowerTick, int24 upperTick, bool depositorSwapTokens) external view returns (uint, uint) {\r\n    return UniswapV3DebtLib.getEntryDataProportions(pool, lowerTick, upperTick, depositorSwapTokens);\r\n  }\r\n  //endregion ------------------------------------------------ Helpers\r\n\r\n  //region ------------------------------------------------ Pool info\r\n  /// @notice Retrieve the reserves of a Uniswap V3 pool managed by this contract.\r\n  /// @param pairState The State storage containing the pool's information.\r\n  /// @return reserves An array containing the reserve amounts of the contract owned liquidity.\r\n  function getPoolReserves(PairBasedStrategyLogicLib.PairState storage pairState) external view returns (\r\n    uint[] memory reserves\r\n  ) {\r\n    reserves = new uint[](2);\r\n    (uint160 sqrtRatioX96, , , , , ,) = IUniswapV3Pool(pairState.pool).slot0();\r\n\r\n    (reserves[0], reserves[1]) = UniswapV3Lib.getAmountsForLiquidity(\r\n      sqrtRatioX96,\r\n      pairState.lowerTick,\r\n      pairState.upperTick,\r\n      pairState.totalLiquidity\r\n    );\r\n\r\n    if (pairState.depositorSwapTokens) {\r\n      (reserves[0], reserves[1]) = (reserves[1], reserves[0]);\r\n    }\r\n  }\r\n\r\n  /// @notice Retrieve the fees generated by a Uniswap V3 pool managed by this contract.\r\n  /// @param pairState The State storage containing the pool's information.\r\n  /// @return fee0 The fees generated for the first token in the pool.\r\n  /// @return fee1 The fees generated for the second token in the pool.\r\n  function getFees(PairBasedStrategyLogicLib.PairState storage pairState) public view returns (uint fee0, uint fee1) {\r\n    UniswapV3Lib.PoolPosition memory position = UniswapV3Lib.PoolPosition(pairState.pool, pairState.lowerTick, pairState.upperTick, pairState.totalLiquidity, address(this));\r\n    (fee0, fee1) = UniswapV3Lib.getFees(position);\r\n  }\r\n\r\n  /// @notice Estimate the exit amounts for a given liquidity amount in a Uniswap V3 pool.\r\n  /// @param liquidityAmountToExit The amount of liquidity to exit.\r\n  /// @return amountsOut An array containing the estimated exit amounts for each token in the pool.\r\n  function quoteExit(\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint128 liquidityAmountToExit\r\n  ) public view returns (uint[] memory amountsOut) {\r\n    amountsOut = new uint[](2);\r\n    (uint160 sqrtRatioX96, , , , , ,) = IUniswapV3Pool(pairState.pool).slot0();\r\n\r\n    (amountsOut[0], amountsOut[1]) = UniswapV3Lib.getAmountsForLiquidity(\r\n      sqrtRatioX96,\r\n      pairState.lowerTick,\r\n      pairState.upperTick,\r\n      liquidityAmountToExit\r\n    );\r\n\r\n    if (pairState.depositorSwapTokens) {\r\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n    }\r\n  }\r\n  //endregion ------------------------------------------------ Pool info\r\n\r\n  //region ------------------------------------------------ Join the pool\r\n  /// @notice Enter the pool and provide liquidity with desired token amounts.\r\n  /// @param pool The Uniswap V3 pool to provide liquidity to.\r\n  /// @param lowerTick The lower tick value for the pool.\r\n  /// @param upperTick The upper tick value for the pool.\r\n  /// @param amountsDesired_ An array containing the desired amounts of tokens to provide liquidity.\r\n  /// @param totalLiquidity The current total liquidity in the pool.\r\n  /// @param _depositorSwapTokens A boolean indicating if need to use token B instead of token A.\r\n  /// @return amountsConsumed An array containing the consumed amounts for each token in the pool.\r\n  /// @return liquidityOut The amount of liquidity added to the pool.\r\n  /// @return totalLiquidityNew The updated total liquidity after providing liquidity.\r\n  function enter(\r\n    IUniswapV3Pool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint[] memory amountsDesired_,\r\n    uint128 totalLiquidity,\r\n    bool _depositorSwapTokens\r\n  ) external returns (uint[] memory amountsConsumed, uint liquidityOut, uint128 totalLiquidityNew) {\r\n    amountsConsumed = new uint[](2);\r\n\r\n    if (amountsDesired_[1] > 0) {\r\n      if (_depositorSwapTokens) {\r\n        (amountsDesired_[0], amountsDesired_[1]) = (amountsDesired_[1], amountsDesired_[0]);\r\n      }\r\n      uint128 newLiquidity;\r\n      (amountsConsumed[0], amountsConsumed[1], newLiquidity) = UniswapV3Lib.addLiquidityPreview(address(pool), lowerTick, upperTick, amountsDesired_[0], amountsDesired_[1]);\r\n      pool.mint(address(this), lowerTick, upperTick, newLiquidity, \"\");\r\n      liquidityOut = uint(newLiquidity);\r\n      totalLiquidityNew = totalLiquidity + newLiquidity;\r\n      if (_depositorSwapTokens) {\r\n        (amountsConsumed[0], amountsConsumed[1]) = (amountsConsumed[1], amountsConsumed[0]);\r\n      }\r\n    }\r\n\r\n    return (amountsConsumed, liquidityOut, totalLiquidityNew);\r\n  }\r\n\r\n  //endregion ------------------------------------------------ Join the pool\r\n\r\n  //region ------------------------------------------------ Exit from the pool\r\n  /// @notice Exit the pool and collect tokens proportional to the liquidity amount to exit.\r\n  /// @param pairState The State storage object.\r\n  /// @param liquidityAmountToExit The amount of liquidity to exit.\r\n  /// @return amountsOut An array containing the collected amounts for each token in the pool.\r\n  function exit(\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint128 liquidityAmountToExit\r\n  ) external returns (uint[] memory amountsOut) {\r\n    IUniswapV3Pool pool = IUniswapV3Pool(pairState.pool);\r\n    int24 lowerTick = pairState.lowerTick;\r\n    int24 upperTick = pairState.upperTick;\r\n    uint128 liquidity = pairState.totalLiquidity;\r\n    bool _depositorSwapTokens = pairState.depositorSwapTokens;\r\n\r\n    require(liquidity >= liquidityAmountToExit, Uni3StrategyErrors.WRONG_LIQUIDITY);\r\n\r\n    amountsOut = new uint[](2);\r\n    (amountsOut[0], amountsOut[1]) = pool.burn(lowerTick, upperTick, liquidityAmountToExit);\r\n\r\n    // all fees will be collected but not returned in amountsOut\r\n    pool.collect(address(this), lowerTick, upperTick, type(uint128).max, type(uint128).max);\r\n\r\n    pairState.totalLiquidity = liquidity - liquidityAmountToExit;\r\n\r\n    if (_depositorSwapTokens) {\r\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n    }\r\n  }\r\n  //endregion ------------------------------------------------ Exit from the pool\r\n\r\n  //region ------------------------------------------------ Claims\r\n  /// @notice Claim rewards from the Uniswap V3 pool.\r\n  /// @return tokensOut An array containing tokenA and tokenB.\r\n  /// @return amountsOut An array containing the amounts of token0 and token1 claimed as rewards.\r\n  function claimRewards(PairBasedStrategyLogicLib.PairState storage pairState) external returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    address strategyProfitHolder = pairState.strategyProfitHolder;\r\n    IUniswapV3Pool pool = IUniswapV3Pool(pairState.pool);\r\n    int24 lowerTick = pairState.lowerTick;\r\n    int24 upperTick = pairState.upperTick;\r\n    tokensOut = new address[](2);\r\n    tokensOut[0] = pairState.tokenA;\r\n    tokensOut[1] = pairState.tokenB;\r\n\r\n    balancesBefore = new uint[](2);\r\n    for (uint i; i < tokensOut.length; i++) {\r\n      balancesBefore[i] = IERC20(tokensOut[i]).balanceOf(address(this));\r\n    }\r\n\r\n    amountsOut = new uint[](2);\r\n    if (pairState.totalLiquidity > 0) {\r\n      pool.burn(lowerTick, upperTick, 0);\r\n      (amountsOut[0], amountsOut[1]) = pool.collect(\r\n        address(this),\r\n        lowerTick,\r\n        upperTick,\r\n        type(uint128).max,\r\n        type(uint128).max\r\n      );\r\n    }\r\n\r\n    emit UniV3FeesClaimed(amountsOut[0], amountsOut[1]);\r\n\r\n    if (pairState.depositorSwapTokens) {\r\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\r\n    }\r\n\r\n    for (uint i; i < tokensOut.length; ++i) {\r\n      uint b = IERC20(tokensOut[i]).balanceOf(strategyProfitHolder);\r\n      if (b > 0) {\r\n        IERC20(tokensOut[i]).transferFrom(strategyProfitHolder, address(this), b);\r\n        amountsOut[i] += b;\r\n      }\r\n    }\r\n  }\r\n\r\n  function isReadyToHardWork(PairBasedStrategyLogicLib.PairState storage pairState, ITetuConverter converter) external view returns (\r\n    bool isReady\r\n  ) {\r\n    // check claimable amounts and compare with thresholds\r\n    (uint fee0, uint fee1) = getFees(pairState);\r\n\r\n    if (pairState.depositorSwapTokens) {\r\n      (fee0, fee1) = (fee1, fee0);\r\n    }\r\n\r\n    address tokenA = pairState.tokenA;\r\n    address tokenB = pairState.tokenB;\r\n    address h = pairState.strategyProfitHolder;\r\n\r\n    fee0 += IERC20(tokenA).balanceOf(h);\r\n    fee1 += IERC20(tokenB).balanceOf(h);\r\n\r\n    IPriceOracle oracle = AppLib._getPriceOracle(converter);\r\n    uint priceA = oracle.getAssetPrice(tokenA);\r\n    uint priceB = oracle.getAssetPrice(tokenB);\r\n\r\n    uint fee0USD = fee0 * priceA / 1e18;\r\n    uint fee1USD = fee1 * priceB / 1e18;\r\n\r\n    return fee0USD > HARD_WORK_USD_FEE_THRESHOLD || fee1USD > HARD_WORK_USD_FEE_THRESHOLD;\r\n  }\r\n\r\n  function sendFeeToProfitHolder(PairBasedStrategyLogicLib.PairState storage pairState, uint fee0, uint fee1) external {\r\n    address strategyProfitHolder = pairState.strategyProfitHolder;\r\n    require(strategyProfitHolder != address (0), Uni3StrategyErrors.ZERO_PROFIT_HOLDER);\r\n    if (pairState.depositorSwapTokens) {\r\n      IERC20(pairState.tokenA).safeTransfer(strategyProfitHolder, fee1);\r\n      IERC20(pairState.tokenB).safeTransfer(strategyProfitHolder, fee0);\r\n    } else {\r\n      IERC20(pairState.tokenA).safeTransfer(strategyProfitHolder, fee0);\r\n      IERC20(pairState.tokenB).safeTransfer(strategyProfitHolder, fee1);\r\n    }\r\n    emit UniV3FeesClaimed(fee0, fee1);\r\n  }\r\n\r\n  function calcEarned(address asset, address controller, address[] memory rewardTokens, uint[] memory amounts) external view returns (uint) {\r\n    ITetuLiquidator liquidator = ITetuLiquidator(IController(controller).liquidator());\r\n    uint len = rewardTokens.length;\r\n    uint earned;\r\n    for (uint i; i < len; ++i) {\r\n      address token = rewardTokens[i];\r\n      if (token == asset) {\r\n        earned += amounts[i];\r\n      } else {\r\n        earned += liquidator.getPrice(rewardTokens[i], asset, amounts[i]);\r\n      }\r\n    }\r\n\r\n    return earned;\r\n  }\r\n  //endregion ------------------------------------------------ Claims\r\n\r\n  //region ------------------------------------------------ Rebalance\r\n  /// @notice Determine if the strategy needs to be rebalanced.\r\n  /// @return needRebalance A boolean indicating if {rebalanceNoSwaps} should be called\r\n  function needStrategyRebalance(PairBasedStrategyLogicLib.PairState storage pairState, ITetuConverter converter_) external view returns (\r\n    bool needRebalance\r\n  ) {\r\n    address pool = pairState.pool;\r\n    // poolPrice should have same decimals as a price from oracle == 18\r\n    uint poolPriceAdjustment = PairBasedStrategyLib.getPoolPriceAdjustment(IERC20Metadata(pairState.tokenA).decimals());\r\n    uint poolPrice = UniswapV3Lib.getPrice(pool, pairState.tokenB) * poolPriceAdjustment;\r\n    (needRebalance, , ) = PairBasedStrategyLogicLib.needStrategyRebalance(\r\n      pairState,\r\n      converter_,\r\n      UniswapV3DebtLib.getCurrentTick(IUniswapV3Pool(pool)),\r\n      poolPrice\r\n    );\r\n  }\r\n\r\n  /// @notice Make rebalance without swaps (using borrowing only).\r\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\r\n  /// @param totalAssets_ Current value of totalAssets()\r\n  /// @param checkNeedRebalance_ True if the function should ensure that the rebalance is required\r\n  /// @return tokenAmounts Token amounts for deposit. If length == 0 - rebalance wasn't made and no deposit is required.\r\n  function rebalanceNoSwaps(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    address[2] calldata converterLiquidator,\r\n    uint totalAssets_,\r\n    uint profitToCover,\r\n    address splitter,\r\n    bool checkNeedRebalance_,\r\n    mapping(address => uint) storage liquidityThresholds_\r\n  ) external returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    RebalanceLocal memory v;\r\n    _initLocalVars(v, ITetuConverter(converterLiquidator[0]), pairState, liquidityThresholds_);\r\n    v.poolPrice = UniswapV3Lib.getPrice(address(v.pool), pairState.tokenB) * v.poolPriceAdjustment;\r\n    bool needRebalance;\r\n    int24 tick = UniswapV3DebtLib.getCurrentTick(v.pool);\r\n    (needRebalance,v.fuseStatusChangedAB, v.fuseStatusAB) = PairBasedStrategyLogicLib.needStrategyRebalance(pairState, v.converter, tick, v.poolPrice);\r\n\r\n    // update fuse status if necessary\r\n    if (needRebalance) {\r\n      // we assume here, that needRebalance is true if any fuse has changed state, see needStrategyRebalance impl\r\n      PairBasedStrategyLogicLib.updateFuseStatus(pairState, v.fuseStatusChangedAB, v.fuseStatusAB);\r\n    }\r\n\r\n    require(!checkNeedRebalance_ || needRebalance, Uni3StrategyErrors.NO_REBALANCE_NEEDED);\r\n\r\n    // rebalancing debt, setting new tick range\r\n    if (needRebalance) {\r\n      UniswapV3DebtLib.rebalanceNoSwaps(converterLiquidator, pairState, profitToCover, totalAssets_, splitter, v.liquidationThresholdsAB, tick);\r\n\r\n      uint loss;\r\n      (loss, tokenAmounts) = ConverterStrategyBaseLib2.getTokenAmountsPair(v.converter, totalAssets_, v.tokenA, v.tokenB, v.liquidationThresholdsAB);\r\n      if (loss != 0) {\r\n        ConverterStrategyBaseLib2.coverLossAndCheckResults(csbs, splitter, loss);\r\n      }\r\n      emit Rebalanced(loss, profitToCover, 0);\r\n    }\r\n\r\n    return tokenAmounts;\r\n  }\r\n\r\n  /// @notice Initialize {v} by state values\r\n  function _initLocalVars(\r\n    RebalanceLocal memory v,\r\n    ITetuConverter converter_,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    mapping(address => uint) storage liquidityThresholds_\r\n  ) internal view {\r\n    v.pool = IUniswapV3Pool(pairState.pool);\r\n    v.fuseAB = pairState.fuseAB;\r\n    v.converter = converter_;\r\n    v.tokenA = pairState.tokenA;\r\n    v.tokenB = pairState.tokenB;\r\n    v.isStablePool = pairState.isStablePool;\r\n    v.liquidationThresholdsAB[0] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenA]);\r\n    v.liquidationThresholdsAB[1] = AppLib._getLiquidationThreshold(liquidityThresholds_[v.tokenB]);\r\n    uint poolPriceDecimals = IERC20Metadata(v.tokenA).decimals();\r\n    v.poolPriceAdjustment = poolPriceDecimals < 18 ? 10 ** (18 - poolPriceDecimals) : 1;\r\n  }\r\n\r\n  /// @notice Get proportion of not-underlying in the pool, [0...1e18]\r\n  ///         prop.underlying : prop.not.underlying = 1e18 - PropNotUnderlying18 : propNotUnderlying18\r\n  function getPropNotUnderlying18(PairBasedStrategyLogicLib.PairState storage pairState) view external returns (uint) {\r\n    // get pool proportions\r\n    IUniswapV3Pool pool = IUniswapV3Pool(pairState.pool);\r\n    bool depositorSwapTokens = pairState.depositorSwapTokens;\r\n    (int24 newLowerTick, int24 newUpperTick) = UniswapV3DebtLib._calcNewTickRange(pool, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\r\n    (uint consumed0, uint consumed1) = UniswapV3DebtLib.getEntryDataProportions(pool, newLowerTick, newUpperTick, depositorSwapTokens);\r\n\r\n    require(consumed0 + consumed1 > 0, AppErrors.ZERO_VALUE);\r\n    return consumed1 * 1e18 / (consumed0 + consumed1);\r\n  }\r\n  //endregion ------------------------------------------------ Rebalance\r\n\r\n  //region ------------------------------------------------ WithdrawByAgg\r\n  /// @notice Calculate amounts to be deposited to pool, update pairState.lower/upperTick, fix loss / profitToCover\r\n  /// @param addr_ [tokenToSwap, aggregator, controller, converter, splitter]\r\n  /// @param values_ [amountToSwap_, profitToCover, oldTotalAssets, entryToPool]\r\n  /// @return completed All debts were closed, leftovers were swapped to proper proportions\r\n  /// @return tokenAmountsOut Amounts to be deposited to pool. This array is empty if no deposit allowed/required.\r\n  function withdrawByAggStep(\r\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\r\n    address[5] calldata addr_,\r\n    uint[4] calldata values_,\r\n    bytes memory swapData,\r\n    bytes memory planEntryData,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    mapping(address => uint) storage liquidationThresholds\r\n  ) external returns (\r\n    bool completed,\r\n    uint[] memory tokenAmountsOut\r\n  ) {\r\n    uint entryToPool = values_[3];\r\n    address[2] memory tokens = [pairState.tokenA, pairState.tokenB];\r\n\r\n    // Calculate amounts to be deposited to pool, calculate loss, fix profitToCover\r\n    uint[] memory tokenAmounts;\r\n    uint loss;\r\n    (completed, tokenAmounts, loss) = PairBasedStrategyLogicLib.withdrawByAggStep(\r\n      addr_,\r\n      values_,\r\n      swapData,\r\n      planEntryData,\r\n      tokens,\r\n      liquidationThresholds\r\n    );\r\n\r\n    // cover loss\r\n    if (loss != 0) {\r\n      ConverterStrategyBaseLib2.coverLossAndCheckResults(\r\n        csbs,\r\n        addr_[4],\r\n        loss\r\n      );\r\n    }\r\n    emit RebalancedDebt(loss, values_[1], 0);\r\n\r\n    if (entryToPool == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED\r\n      || (entryToPool == PairBasedStrategyLib.ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED && completed)\r\n    ) {\r\n      // We are going to enter to the pool: update lowerTick and upperTick, initialize tokenAmountsOut\r\n      (pairState.lowerTick, pairState.upperTick) = UniswapV3DebtLib._calcNewTickRange(\r\n        IUniswapV3Pool(pairState.pool),\r\n        pairState.lowerTick,\r\n        pairState.upperTick,\r\n        pairState.tickSpacing\r\n      );\r\n      tokenAmountsOut = tokenAmounts;\r\n    }\r\n    return (completed, tokenAmountsOut); // hide warning\r\n  }\r\n  //endregion ------------------------------------------------ WithdrawByAgg\r\n\r\n}\r\n"
    },
    "contracts/strategies/uniswap/UniswapV3DebtLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"./UniswapV3Lib.sol\";\r\nimport \"./Uni3StrategyErrors.sol\";\r\nimport \"../../libs/BorrowLib.sol\";\r\nimport \"../pair/PairBasedStrategyLogicLib.sol\";\r\n\r\nlibrary UniswapV3DebtLib {\r\n  using SafeERC20 for IERC20;\r\n\r\n//region  -------------------------------------------- Constants\r\n  uint public constant SELL_GAP = 100;\r\n  /// @dev should be placed local, probably will be adjusted later\r\n  uint internal constant BORROW_PERIOD_ESTIMATION = 30 days / 2;\r\n//endregion  -------------------------------------------- Constants\r\n\r\n//region  -------------------------------------------- Entry data\r\n  /// @notice Calculate proportions of the tokens for entry kind 1\r\n  /// @param pool Pool instance\r\n  /// @param lowerTick The lower tick of the pool's main range.\r\n  /// @param upperTick The upper tick of the pool's main range.\r\n  /// @param depositorSwapTokens A boolean indicating if need to use token B instead of token A.\r\n  /// @return prop0 Proportion onf token A. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  /// @return prop1 Proportion onf token B. Any decimals are allowed, prop[0 or 1]/(prop0 + prop1) are important only\r\n  function getEntryDataProportions(\r\n    IUniswapV3Pool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    bool depositorSwapTokens\r\n  ) internal view returns (uint, uint) {\r\n    address token1 = pool.token1();\r\n    uint token1Price = UniswapV3Lib.getPrice(address(pool), token1);\r\n\r\n    uint token1Decimals = IERC20Metadata(token1).decimals();\r\n\r\n    uint token0Desired = token1Price;\r\n    uint token1Desired = 10 ** token1Decimals;\r\n    require(token1Desired != 0, AppErrors.ZERO_VALUE);\r\n\r\n    // calculate proportions\r\n    (uint consumed0, uint consumed1,) = UniswapV3Lib.addLiquidityPreview(address(pool), lowerTick, upperTick, token0Desired, token1Desired);\r\n\r\n    return depositorSwapTokens\r\n      ? (1e18*consumed1 * token1Price / token1Desired, 1e18*consumed0)\r\n      : (1e18*consumed0, 1e18*consumed1 * token1Price / token1Desired);\r\n  }\r\n//endregion  -------------------------------------------- Entry data\r\n\r\n//region  -------------------------------------------- Calc tick range\r\n  function calcTickRange(address pool, int24 tickRange, int24 tickSpacing) public view returns (int24 lowerTick, int24 upperTick) {\r\n    return PairBasedStrategyLogicLib.calcTickRange(getCurrentTick(IUniswapV3Pool(pool)), tickRange, tickSpacing);\r\n  }\r\n\r\n  function getCurrentTick(IUniswapV3Pool pool) public view returns(int24 tick) {\r\n    (, tick, , , , ,) = IUniswapV3Pool(pool).slot0();\r\n  }\r\n\r\n  /// @notice Calculate the new tick range for a Uniswap V3 pool, the tick is read from the pool.\r\n  /// @param pool The Uniswap V3 pool to calculate the new tick range for.\r\n  /// @param lowerTick The current lower tick value for the pool.\r\n  /// @param upperTick The current upper tick value for the pool.\r\n  /// @param tickSpacing The tick spacing for the pool.\r\n  /// @return lowerTickNew The new lower tick value for the pool.\r\n  /// @return upperTickNew The new upper tick value for the pool.\r\n  function _calcNewTickRange(\r\n    IUniswapV3Pool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing\r\n  ) internal view returns (int24 lowerTickNew, int24 upperTickNew) {\r\n    int24 currentTick = getCurrentTick(pool);\r\n    return _calcNewTickRangeForTick(currentTick, lowerTick, upperTick, tickSpacing);\r\n  }\r\n\r\n  /// @notice Calculate the new tick range for a Uniswap V3 pool, the tick is known\r\n  function _calcNewTickRangeForTick(\r\n    int24 currentTick,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing\r\n  ) internal pure returns (int24 lowerTickNew, int24 upperTickNew) {\r\n    int24 fullTickRange = upperTick - lowerTick;\r\n    int24 tickRange = fullTickRange == tickSpacing\r\n      ? int24(0)\r\n      : fullTickRange / 2;\r\n    return PairBasedStrategyLogicLib.calcTickRange(currentTick, tickRange, tickSpacing);\r\n  }\r\n//endregion  -------------------------------------------- Calc tick range\r\n\r\n//region  -------------------------------------------- Rebalance\r\n  /// @notice Calculate right asset proportions, make rebalance, update lower/upper ticks in {pairState}\r\n  /// @param tick Current tick in the pool\r\n  /// @param liquidationThresholdsAB [liquidityThreshold of token A, liquidityThreshold of tokenB]\r\n  function rebalanceNoSwaps(\r\n    address[2] calldata converterLiquidator,\r\n    PairBasedStrategyLogicLib.PairState storage pairState,\r\n    uint profitToCover,\r\n    uint totalAssets,\r\n    address splitter,\r\n    uint[2] calldata liquidationThresholdsAB,\r\n    int24 tick\r\n  ) external {\r\n    (int24 newLowerTick, int24 newUpperTick) = _calcNewTickRangeForTick(tick, pairState.lowerTick, pairState.upperTick, pairState.tickSpacing);\r\n    (uint prop0, uint prop1) = getEntryDataProportions(IUniswapV3Pool(pairState.pool), newLowerTick, newUpperTick, pairState.depositorSwapTokens);\r\n    PairBasedStrategyLogicLib._rebalanceNoSwaps(\r\n      converterLiquidator,\r\n      pairState,\r\n      profitToCover,\r\n      totalAssets,\r\n      splitter,\r\n      liquidationThresholdsAB,\r\n      prop0 * BorrowLib.SUM_PROPORTIONS / (prop0 + prop1)\r\n    );\r\n    (pairState.lowerTick, pairState.upperTick) = (newLowerTick, newUpperTick);\r\n  }\r\n//endregion  -------------------------------------------- Rebalance\r\n\r\n}\r\n"
    },
    "contracts/strategies/uniswap/UniswapV3Depositor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\";\r\nimport \"../DepositorBase.sol\";\r\nimport \"./Uni3StrategyErrors.sol\";\r\nimport \"../../integrations/uniswap/IUniswapV3MintCallback.sol\";\r\nimport \"./UniswapV3ConverterStrategyLogicLib.sol\";\r\n\r\n/// @title UniswapV3Depositor\r\n/// @dev Abstract contract that is designed to interact with Uniswap V3 pools and manage liquidity.\r\n///      Inherits from IUniswapV3MintCallback, DepositorBase, and Initializable.\r\nabstract contract UniswapV3Depositor is IUniswapV3MintCallback, DepositorBase, Initializable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                CONSTANTS\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev Version of this contract. Adjust manually on each code modification.\r\n  string public constant UNISWAPV3_DEPOSITOR_VERSION = \"1.0.4\";\r\n\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A = 0;\r\n  uint internal constant IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B = 1;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                VARIABLES\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev State variable to store the current state of the whole strategy\r\n  UniswapV3ConverterStrategyLogicLib.State internal state;\r\n\r\n  /// @dev reserve space for future needs\r\n  uint[100 - 60] private __gap;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                       View\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @return nums Balances of [tokenA, tokenB] for profit holder\r\n  function getSpecificState() external view returns (\r\n    uint[] memory nums\r\n  ) {\r\n    address strategyProfitHolder = state.pair.strategyProfitHolder;\r\n    nums = new uint[](2);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_A] = IERC20(state.pair.tokenA).balanceOf(strategyProfitHolder);\r\n    nums[IDX_SS_NUMS_PROFIT_HOLDER_BALANCE_B] = IERC20(state.pair.tokenB).balanceOf(strategyProfitHolder);\r\n  }\r\n\r\n  /// @notice Returns the fees for the current state.\r\n  /// @return fee0 and fee1.\r\n  function getFees() public view returns (uint fee0, uint fee1) {\r\n    return UniswapV3ConverterStrategyLogicLib.getFees(state.pair);\r\n  }\r\n\r\n  /// @notice Returns the pool assets.\r\n  /// @return poolAssets An array containing the addresses of the pool assets.\r\n  function _depositorPoolAssets() override internal virtual view returns (address[] memory poolAssets) {\r\n    poolAssets = new address[](2);\r\n    poolAssets[0] = state.pair.tokenA;\r\n    poolAssets[1] = state.pair.tokenB;\r\n  }\r\n\r\n  /// @notice Returns the pool weights and the total weight.\r\n  /// @return weights An array containing the weights of the pool assets, and totalWeight the sum of the weights.\r\n  function _depositorPoolWeights() override internal virtual view returns (uint[] memory weights, uint totalWeight) {\r\n    weights = new uint[](2);\r\n    weights[0] = 1;\r\n    weights[1] = 1;\r\n    totalWeight = 2;\r\n  }\r\n\r\n  /// @notice Returns the pool reserves.\r\n  /// @return reserves An array containing the reserves of the pool assets.\r\n  function _depositorPoolReserves() override internal virtual view returns (uint[] memory reserves) {\r\n    return UniswapV3ConverterStrategyLogicLib.getPoolReserves(state.pair);\r\n  }\r\n\r\n  /// @notice Returns the current liquidity of the depositor.\r\n  /// @return The current liquidity of the depositor.\r\n  function _depositorLiquidity() override internal virtual view returns (uint) {\r\n    return uint(state.pair.totalLiquidity);\r\n  }\r\n\r\n  /// @notice Returns the total supply of the depositor.\r\n  /// @return In UniV3 we can not calculate the total supply of the whole pool. Return only ourself value.\r\n  function _depositorTotalSupply() override internal view virtual returns (uint) {\r\n    return uint(state.pair.totalLiquidity);\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                CALLBACK\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Callback function called by Uniswap V3 pool on mint operation.\r\n  /// @param amount0Owed The amount of token0 owed to the pool.\r\n  /// @param amount1Owed The amount of token1 owed to the pool.\r\n  function uniswapV3MintCallback(\r\n    uint amount0Owed,\r\n    uint amount1Owed,\r\n    bytes calldata /*_data*/\r\n  ) external override {\r\n    require(msg.sender == state.pair.pool, Uni3StrategyErrors.NOT_CALLBACK_CALLER);\r\n    if (amount0Owed > 0) IERC20(state.pair.depositorSwapTokens ? state.pair.tokenB : state.pair.tokenA).safeTransfer(msg.sender, amount0Owed);\r\n    if (amount1Owed > 0) IERC20(state.pair.depositorSwapTokens ? state.pair.tokenA : state.pair.tokenB).safeTransfer(msg.sender, amount1Owed);\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Enter, exit\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Handles the deposit operation.\r\n  function _depositorEnter(uint[] memory amountsDesired_) override internal virtual returns (\r\n    uint[] memory amountsConsumed,\r\n    uint liquidityOut\r\n  ) {\r\n    (amountsConsumed, liquidityOut, state.pair.totalLiquidity) = UniswapV3ConverterStrategyLogicLib.enter(\r\n      IUniswapV3Pool(state.pair.pool),\r\n      state.pair.lowerTick,\r\n      state.pair.upperTick,\r\n      amountsDesired_,\r\n      state.pair.totalLiquidity,\r\n      state.pair.depositorSwapTokens\r\n    );\r\n  }\r\n\r\n  /// @notice Handles the withdrawal operation.\r\n  /// @param liquidityAmount The amount of liquidity to be withdrawn.\r\n  /// @param emergency Emergency exit (only withdraw, don't claim any rewards or make any other additional actions)\r\n  /// @return amountsOut The amounts of the tokens withdrawn.\r\n  function _depositorExit(uint liquidityAmount, bool emergency) override internal virtual returns (uint[] memory amountsOut) {\r\n    uint fee0;\r\n    uint fee1;\r\n    if (! emergency) {\r\n      (fee0, fee1) = getFees();\r\n    }\r\n    amountsOut = UniswapV3ConverterStrategyLogicLib.exit(state.pair, uint128(liquidityAmount));\r\n    if (! emergency) {\r\n      UniswapV3ConverterStrategyLogicLib.sendFeeToProfitHolder(state.pair, fee0, fee1);\r\n    }\r\n  }\r\n\r\n  /// @notice Returns the amount of tokens that would be withdrawn based on the provided liquidity amount.\r\n  /// @param liquidityAmount The amount of liquidity to quote the withdrawal for.\r\n  /// @return amountsOut The amounts of the tokens that would be withdrawn, underlying is first\r\n  function _depositorQuoteExit(uint liquidityAmount) override internal virtual returns (uint[] memory amountsOut) {\r\n    amountsOut = UniswapV3ConverterStrategyLogicLib.quoteExit(state.pair, uint128(liquidityAmount));\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///             Claim rewards\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @notice Claims all possible rewards.\r\n  /// @return tokensOut An array containing the addresses of the reward tokens,\r\n  /// @return amountsOut An array containing the amounts of the reward tokens.\r\n  function _depositorClaimRewards() override internal virtual returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    (tokensOut, amountsOut, balancesBefore) = UniswapV3ConverterStrategyLogicLib.claimRewards(state.pair);\r\n  }\r\n}\r\n"
    },
    "contracts/strategies/uniswap/UniswapV3Lib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../integrations/uniswap/IUniswapV3Pool.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n\r\n/// @title Uniswap V3 liquidity management helper\r\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\r\nlibrary UniswapV3Lib {\r\n  uint8 internal constant RESOLUTION = 96;\r\n  uint internal constant Q96 = 0x1000000000000000000000000;\r\n  uint private constant TWO_96 = 2 ** 96;\r\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n  uint160 private constant MIN_SQRT_RATIO = 4295128739 + 1;\r\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n  uint160 private constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\r\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n  int24 internal constant MIN_TICK = - 887272;\r\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n  int24 internal constant MAX_TICK = - MIN_TICK;\r\n\r\n  struct PoolPosition {\r\n    address pool;\r\n    int24 lowerTick;\r\n    int24 upperTick;\r\n    uint128 liquidity;\r\n    address owner;\r\n  }\r\n\r\n  function getTickSpacing(uint24 fee) external pure returns (int24) {\r\n    if (fee == 10000) {\r\n      return 200;\r\n    }\r\n    if (fee == 3000) {\r\n      return 60;\r\n    }\r\n    if (fee == 500) {\r\n      return 10;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  function getFees(PoolPosition memory position) public view returns (uint fee0, uint fee1) {\r\n    bytes32 positionId = _getPositionId(position);\r\n    IUniswapV3Pool pool = IUniswapV3Pool(position.pool);\r\n    (, int24 tick, , , , ,) = pool.slot0();\r\n    (, uint feeGrowthInside0Last, uint feeGrowthInside1Last, uint128 tokensOwed0, uint128 tokensOwed1) = pool.positions(positionId);\r\n    fee0 = _computeFeesEarned(position, true, feeGrowthInside0Last, tick) + uint(tokensOwed0);\r\n    fee1 = _computeFeesEarned(position, false, feeGrowthInside1Last, tick) + uint(tokensOwed1);\r\n  }\r\n\r\n  function addLiquidityPreview(address pool_, int24 lowerTick_, int24 upperTick_, uint amount0Desired_, uint amount1Desired_) external view returns (uint amount0Consumed, uint amount1Consumed, uint128 liquidityOut) {\r\n    IUniswapV3Pool pool = IUniswapV3Pool(pool_);\r\n    (uint160 sqrtRatioX96, , , , , ,) = pool.slot0();\r\n    liquidityOut = getLiquidityForAmounts(sqrtRatioX96, lowerTick_, upperTick_, amount0Desired_, amount1Desired_);\r\n    (amount0Consumed, amount1Consumed) = getAmountsForLiquidity(sqrtRatioX96, lowerTick_, upperTick_, liquidityOut);\r\n  }\r\n\r\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getLiquidityForAmounts(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint amount0,\r\n    uint amount1\r\n  ) public pure returns (uint128 liquidity) {\r\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\r\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      liquidity = _getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      uint128 liquidity0 = _getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\r\n      uint128 liquidity1 = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\r\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\r\n    }\r\n  }\r\n\r\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\r\n  /// pool prices and the prices at the tick boundaries\r\n  function getAmountsForLiquidity(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint128 liquidity\r\n  ) public pure returns (uint amount0, uint amount1) {\r\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\r\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\r\n\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n\r\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\r\n      amount0 = _getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\r\n      amount0 = _getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\r\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\r\n    } else {\r\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n  function mulDiv(\r\n    uint a,\r\n    uint b,\r\n    uint denominator\r\n  ) public pure returns (uint result) {\r\n  unchecked {\r\n    // 512-bit multiply [prod1 prod0] = a * b\r\n    // Compute the product mod 2**256 and mod 2**256 - 1\r\n    // then use the Chinese Remainder Theorem to reconstruct\r\n    // the 512 bit result. The result is stored in two 256\r\n    // variables such that product = prod1 * 2**256 + prod0\r\n    uint prod0;\r\n    // Least significant 256 bits of the product\r\n    uint prod1;\r\n    // Most significant 256 bits of the product\r\n    assembly {\r\n      let mm := mulmod(a, b, not(0))\r\n      prod0 := mul(a, b)\r\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n    }\r\n\r\n    // Handle non-overflow cases, 256 by 256 division\r\n    if (prod1 == 0) {\r\n      require(denominator > 0);\r\n      assembly {\r\n        result := div(prod0, denominator)\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // Make sure the result is less than 2**256.\r\n    // Also prevents denominator == 0\r\n    require(denominator > prod1);\r\n\r\n    ///////////////////////////////////////////////\r\n    // 512 by 256 division.\r\n    ///////////////////////////////////////////////\r\n\r\n    // Make division exact by subtracting the remainder from [prod1 prod0]\r\n    // Compute remainder using mulmod\r\n    uint remainder;\r\n    assembly {\r\n      remainder := mulmod(a, b, denominator)\r\n    }\r\n    // Subtract 256 bit number from 512 bit number\r\n    assembly {\r\n      prod1 := sub(prod1, gt(remainder, prod0))\r\n      prod0 := sub(prod0, remainder)\r\n    }\r\n\r\n    // Factor powers of two out of denominator\r\n    // Compute largest power of two divisor of denominator.\r\n    // Always >= 1.\r\n    // EDIT for 0.8 compatibility:\r\n    // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint\r\n    uint twos = denominator & (~denominator + 1);\r\n\r\n    // Divide denominator by power of two\r\n    assembly {\r\n      denominator := div(denominator, twos)\r\n    }\r\n\r\n    // Divide [prod1 prod0] by the factors of two\r\n    assembly {\r\n      prod0 := div(prod0, twos)\r\n    }\r\n    // Shift in bits from prod1 into prod0. For this we need\r\n    // to flip `twos` such that it is 2**256 / twos.\r\n    // If twos is zero, then it becomes one\r\n    assembly {\r\n      twos := add(div(sub(0, twos), twos), 1)\r\n    }\r\n    prod0 |= prod1 * twos;\r\n\r\n    // Invert denominator mod 2**256\r\n    // Now that denominator is an odd number, it has an inverse\r\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n    // Compute the inverse by starting with a seed that is correct\r\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n    uint inv = (3 * denominator) ^ 2;\r\n    // Now use Newton-Raphson iteration to improve the precision.\r\n    // Thanks to Hensel's lifting lemma, this also works in modular\r\n    // arithmetic, doubling the correct bits in each step.\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**8\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**16\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**32\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**64\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**128\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**256\r\n\r\n    // Because the division is now exact we can divide by multiplying\r\n    // with the modular inverse of denominator. This will give us the\r\n    // correct result modulo 2**256. Since the precoditions guarantee\r\n    // that the outcome is less than 2**256, this is the final result.\r\n    // We don't need to compute the high bits of the result and prod1\r\n    // is no longer required.\r\n    result = prod0 * inv;\r\n    return result;\r\n  }\r\n  }\r\n\r\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  function mulDivRoundingUp(\r\n    uint a,\r\n    uint b,\r\n    uint denominator\r\n  ) internal pure returns (uint result) {\r\n    result = mulDiv(a, b, denominator);\r\n    if (mulmod(a, b, denominator) > 0) {\r\n      require(result < type(uint).max);\r\n      result++;\r\n    }\r\n  }\r\n\r\n  /// @notice Calculates price in pool\r\n  /// @return price with decimals of paired token\r\n  function getPrice(address pool_, address tokenIn) public view returns (uint) {\r\n    IUniswapV3Pool pool = IUniswapV3Pool(pool_);\r\n    address token0 = pool.token0();\r\n    address token1 = pool.token1();\r\n\r\n    uint tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,,,,) = pool.slot0();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (tokenIn == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n    return purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\r\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount0 The amount0 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function _getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount0) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    uint intermediate = mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\r\n    return _toUint128(mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\r\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param amount1 The amount1 being sent in\r\n  /// @return liquidity The amount of returned liquidity\r\n  function _getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount1) internal pure returns (uint128 liquidity) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return _toUint128(mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\r\n  }\r\n\r\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount0 The amount0\r\n  function _getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount0) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return mulDivRoundingUp(1, mulDivRoundingUp(uint(liquidity) << RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96), sqrtRatioAX96);\r\n  }\r\n\r\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The liquidity being valued\r\n  /// @return amount1 The amount1\r\n  function _getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount1) {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\r\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n    }\r\n    return mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\r\n  }\r\n\r\n  function _computeFeesEarned(\r\n    PoolPosition memory position,\r\n    bool isZero,\r\n    uint feeGrowthInsideLast,\r\n    int24 tick\r\n  ) internal view returns (uint fee) {\r\n    IUniswapV3Pool pool = IUniswapV3Pool(position.pool);\r\n    uint feeGrowthOutsideLower;\r\n    uint feeGrowthOutsideUpper;\r\n    uint feeGrowthGlobal;\r\n    if (isZero) {\r\n      feeGrowthGlobal = pool.feeGrowthGlobal0X128();\r\n      (,, feeGrowthOutsideLower,,,,,) = pool.ticks(position.lowerTick);\r\n      (,, feeGrowthOutsideUpper,,,,,) = pool.ticks(position.upperTick);\r\n    } else {\r\n      feeGrowthGlobal = pool.feeGrowthGlobal1X128();\r\n      (,,, feeGrowthOutsideLower,,,,) = pool.ticks(position.lowerTick);\r\n      (,,, feeGrowthOutsideUpper,,,,) = pool.ticks(position.upperTick);\r\n    }\r\n\r\n  unchecked {\r\n    // calculate fee growth below\r\n    uint feeGrowthBelow;\r\n    if (tick >= position.lowerTick) {\r\n      feeGrowthBelow = feeGrowthOutsideLower;\r\n    } else {\r\n      feeGrowthBelow = feeGrowthGlobal - feeGrowthOutsideLower;\r\n    }\r\n\r\n    // calculate fee growth above\r\n    uint feeGrowthAbove;\r\n    if (tick < position.upperTick) {\r\n      feeGrowthAbove = feeGrowthOutsideUpper;\r\n    } else {\r\n      feeGrowthAbove = feeGrowthGlobal - feeGrowthOutsideUpper;\r\n    }\r\n\r\n    uint feeGrowthInside =\r\n    feeGrowthGlobal - feeGrowthBelow - feeGrowthAbove;\r\n    fee = mulDiv(\r\n      position.liquidity,\r\n      feeGrowthInside - feeGrowthInsideLast,\r\n      0x100000000000000000000000000000000\r\n    );\r\n  }\r\n  }\r\n\r\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n  /// @dev Throws if |tick| > max tick\r\n  /// @param tick The input tick for the above formula\r\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n  /// at the given tick\r\n  function _getSqrtRatioAtTick(int24 tick)\r\n  internal\r\n  pure\r\n  returns (uint160 sqrtPriceX96)\r\n  {\r\n    uint256 absTick =\r\n    tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\r\n\r\n    // EDIT: 0.8 compatibility\r\n    require(absTick <= uint256(int256(MAX_TICK)), \"T\");\r\n\r\n    uint256 ratio =\r\n    absTick & 0x1 != 0\r\n    ? 0xfffcb933bd6fad37aa2d162d1a594001\r\n    : 0x100000000000000000000000000000000;\r\n    if (absTick & 0x2 != 0)\r\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n    if (absTick & 0x4 != 0)\r\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n    if (absTick & 0x8 != 0)\r\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n    if (absTick & 0x10 != 0)\r\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n    if (absTick & 0x20 != 0)\r\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n    if (absTick & 0x40 != 0)\r\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n    if (absTick & 0x80 != 0)\r\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n    if (absTick & 0x100 != 0)\r\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n    if (absTick & 0x200 != 0)\r\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n    if (absTick & 0x400 != 0)\r\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n    if (absTick & 0x800 != 0)\r\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n    if (absTick & 0x1000 != 0)\r\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n    if (absTick & 0x2000 != 0)\r\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n    if (absTick & 0x4000 != 0)\r\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n    if (absTick & 0x8000 != 0)\r\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n    if (absTick & 0x10000 != 0)\r\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n    if (absTick & 0x20000 != 0)\r\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n    if (absTick & 0x40000 != 0)\r\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n    if (absTick & 0x80000 != 0)\r\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n    if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n    sqrtPriceX96 = uint160(\r\n      (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\r\n    );\r\n  }\r\n\r\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n  /// ever return.\r\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n  function _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n    // second inequality must be < because the price can never reach the price at the max tick\r\n    require(\r\n      sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\r\n      \"R\"\r\n    );\r\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n    uint256 r = ratio;\r\n    uint256 msb = 0;\r\n\r\n    assembly {\r\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(5, gt(r, 0xFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(4, gt(r, 0xFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(3, gt(r, 0xFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(2, gt(r, 0xF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(1, gt(r, 0x3))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := gt(r, 0x1)\r\n      msb := or(msb, f)\r\n    }\r\n\r\n    if (msb >= 128) r = ratio >> (msb - 127);\r\n    else r = ratio << (127 - msb);\r\n\r\n    int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(63, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(62, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(61, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(60, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(59, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(58, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(57, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(56, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(55, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(54, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(53, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(52, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(51, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(50, f))\r\n    }\r\n\r\n    tick = _getFinalTick(log_2, sqrtPriceX96);\r\n  }\r\n\r\n  function _getFinalTick(int256 log_2, uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n    // 128.128 number\r\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141;\r\n\r\n    int24 tickLow =\r\n    int24(\r\n      (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\r\n    );\r\n    int24 tickHi =\r\n    int24(\r\n      (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\r\n    );\r\n\r\n    tick = (tickLow == tickHi)\r\n    ? tickLow\r\n    : (_getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\r\n    ? tickHi\r\n    : tickLow);\r\n  }\r\n\r\n  function _getPositionId(PoolPosition memory position) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(position.owner, position.lowerTick, position.upperTick));\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function _min(uint a, uint b) internal pure returns (uint) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function _max(uint a, uint b) internal pure returns (uint) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  function _toUint128(uint x) private pure returns (uint128 y) {\r\n    require((y = uint128(x)) == x);\r\n  }\r\n}\r\n"
    },
    "contracts/test/balancer/BalancerBoostedDepositorFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../integrations/balancer/IBVault.sol\";\r\nimport \"../../strategies/balancer/BalancerBoostedDepositor.sol\";\r\n\r\nimport \"hardhat/console.sol\";\r\n\r\n/// @notice Provide direct access to internal functions of {BalancerBoostedDepositor}\r\ncontract BalancerBoostedDepositorFacade is BalancerBoostedDepositor {\r\n  function init(\r\n    address pool_,\r\n    address gauge_\r\n  ) external initializer {\r\n    console.log(\"BalancerBoostedDepositorFacade.init pool, gauge\", pool_, gauge_);\r\n    __BalancerBoostedDepositor_init(pool_, gauge_);\r\n  }\r\n\r\n  function _depositorPoolAssetsAccess() external virtual view returns (address[] memory poolAssets) {\r\n    return _depositorPoolAssets();\r\n  }\r\n\r\n  function _depositorPoolWeightsAccess() external virtual view returns (uint[] memory weights, uint totalWeight) {\r\n    return _depositorPoolWeights();\r\n  }\r\n\r\n  function _depositorPoolReservesAccess() external virtual view returns (uint[] memory reserves) {\r\n    return _depositorPoolReserves();\r\n  }\r\n\r\n  function _depositorLiquidityAccess() external virtual view returns (uint) {\r\n    return _depositorLiquidity();\r\n  }\r\n\r\n  function _depositorTotalSupplyAccess() external view returns (uint) {\r\n    return _depositorTotalSupply();\r\n  }\r\n\r\n  uint[] public lastAmountsConsumedOut;\r\n  uint public lastAmountsConsumedOutLength;\r\n  uint public lastLiquidityOut;\r\n\r\n  function _depositorEnterAccess(uint[] memory amountsDesired_) external virtual returns (\r\n    uint[] memory amountsConsumedOut,\r\n    uint liquidityOut\r\n  ) {\r\n    (amountsConsumedOut, liquidityOut) = _depositorEnter(amountsDesired_);\r\n    // let's store results of _depositorEnter last call to public members\r\n    (lastAmountsConsumedOut, lastLiquidityOut) = (amountsConsumedOut, liquidityOut);\r\n    lastAmountsConsumedOutLength = lastAmountsConsumedOut.length;\r\n  }\r\n\r\n  uint[] public lastAmountsOut;\r\n  uint public lastAmountsOutLength;\r\n  uint public lastLiquidityAmountIn;\r\n\r\n  function _depositorExitAccess(uint liquidityAmount_, bool emergency) external returns (uint[] memory) {\r\n    lastLiquidityAmountIn = liquidityAmount_ == 0  // 0 means that we should withdraw all liquidity\r\n    ? _depositorLiquidity()\r\n    : liquidityAmount_;\r\n    lastAmountsOut = _depositorExit(lastLiquidityAmountIn, emergency);\r\n    lastAmountsOutLength = lastAmountsOut.length;\r\n    return lastAmountsOut;\r\n  }\r\n\r\n  uint[] public lastQuoteExitAmountsOut;\r\n  uint public lastQuoteExitAmountsOutLength;\r\n\r\n  function _depositorQuoteExitAccess(uint liquidityAmount_) external returns (uint[] memory) {\r\n    lastQuoteExitAmountsOut = _depositorQuoteExit(\r\n      liquidityAmount_ == 0  // 0 means that we should withdraw all liquidity\r\n      ? _depositorLiquidity()\r\n      : liquidityAmount_\r\n    );\r\n    lastQuoteExitAmountsOutLength = lastQuoteExitAmountsOut.length;\r\n    return lastQuoteExitAmountsOut;\r\n  }\r\n\r\n  uint[] public lastRewardsAmountsOut;\r\n  address[] public lastRewardsTokensOut;\r\n  uint public lastRewardsAmountsOutLength;\r\n  uint public lastRewardsTokensOutLength;\r\n\r\n  function _depositorClaimRewardsAccess() external virtual returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory depositorBalancesBefore\r\n  ) {\r\n    (tokensOut, amountsOut, depositorBalancesBefore) = _depositorClaimRewards();\r\n    console.log(\"_depositorClaimRewardsAccess.tokensOut\", tokensOut.length);\r\n    console.log(\"_depositorClaimRewardsAccess.amountsOut\", amountsOut.length);\r\n    lastRewardsAmountsOut = amountsOut;\r\n    lastRewardsTokensOut = tokensOut;\r\n    lastRewardsAmountsOutLength = amountsOut.length;\r\n    lastRewardsTokensOutLength = tokensOut.length;\r\n  }\r\n}\r\n"
    },
    "contracts/test/balancer/BalancerBoostedStrategyAccess.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../strategies/balancer/BalancerBoostedStrategy.sol\";\r\n\r\n/// @notice Provide direct access to BalancerBoostedStrategy internal functions\r\ncontract BalancerBoostedStrategyAccess is BalancerBoostedStrategy {\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///  Access to internal functions\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function _depositToPoolAccess(uint amount_, bool updateTotalAssetsBeforeInvest_) external returns (\r\n    uint loss\r\n  ) {\r\n    return _depositToPool(amount_, updateTotalAssetsBeforeInvest_);\r\n  }\r\n\r\n  function _withdrawFromPoolAccess(uint amount) external returns (\r\n    uint investedAssetsUSD,\r\n    uint assetPrice,\r\n    uint loss\r\n  ) {\r\n    return _withdrawFromPool(amount);\r\n  }\r\n\r\n  function _withdrawAllFromPoolAccess() external returns (\r\n    uint investedAssetsUSD,\r\n    uint assetPrice,\r\n    uint loss\r\n  ) {\r\n    return _withdrawAllFromPool();\r\n  }\r\n}\r\n"
    },
    "contracts/test/balancer/BalancerLogicLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"../../strategies/balancer/BalancerLogicLib.sol\";\r\n\r\n/// @notice Provide external access to all functions of BalancerLogicLib\r\ncontract BalancerLogicLibFacade {\r\n  function getAmountsToDeposit(\r\n    uint[] memory amountsDesired_,\r\n    IERC20[] memory tokens_,\r\n    uint[] memory balances_,\r\n    uint[] memory totalUnderlying_,\r\n    uint indexBpt_\r\n  ) external view returns (\r\n    uint[] memory amountsOut\r\n  ) {\r\n    return BalancerLogicLib.getAmountsToDeposit(amountsDesired_, tokens_, balances_, totalUnderlying_, indexBpt_);\r\n  }\r\n\r\n  function getTotalAssetAmounts(IBVault vault_, IERC20[] memory tokens_, uint indexBpt_) external view returns (\r\n    uint[] memory amountsOut\r\n  ) {\r\n    return BalancerLogicLib.getTotalAssetAmounts(vault_, tokens_, indexBpt_);\r\n  }\r\n\r\n  function getBtpAmountsOut(\r\n    uint liquidityAmount_,\r\n    uint[] memory balances_,\r\n    uint bptIndex_\r\n  ) external pure returns (uint[] memory) {\r\n    return BalancerLogicLib.getBtpAmountsOut(liquidityAmount_, balances_, bptIndex_);\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/BaseJumpRateModelV2.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./InterestRateModel.sol\";\r\n\r\n/**\r\n  * @title Logic for Compound's JumpRateModel Contract V2.\r\n  * @author Compound (modified by Dharma Labs, refactored by Arr00)\r\n  * @notice Version 2 modifies Version 1 by enabling updateable parameters.\r\n  */\r\nabstract contract BaseJumpRateModelV2 is InterestRateModel {\r\n  event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);\r\n\r\n  uint256 private constant BASE = 1e18;\r\n\r\n  /**\r\n   * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\r\n     */\r\n  address public owner;\r\n\r\n  /**\r\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\r\n     */\r\n  uint public constant blocksPerYear = 2102400;\r\n\r\n  /**\r\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\r\n     */\r\n  uint public multiplierPerBlock;\r\n\r\n  /**\r\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\r\n     */\r\n  uint public baseRatePerBlock;\r\n\r\n  /**\r\n   * @notice The multiplierPerBlock after hitting a specified utilization point\r\n     */\r\n  uint public jumpMultiplierPerBlock;\r\n\r\n  /**\r\n   * @notice The utilization point at which the jump multiplier is applied\r\n     */\r\n  uint public kink;\r\n\r\n  /**\r\n   * @notice Construct an interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\r\n     */\r\n  constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_) {\r\n    owner = owner_;\r\n\r\n    updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\r\n  }\r\n\r\n  /**\r\n   * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n  function updateJumpRateModel(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) virtual external {\r\n    require(msg.sender == owner, \"only the owner may call this function.\");\r\n\r\n    updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market (currently unused)\r\n     * @return The utilization rate as a mantissa between [0, BASE]\r\n     */\r\n  function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\r\n    // Utilization rate is 0 when there are no borrows\r\n    if (borrows == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return borrows * BASE / (cash + borrows - reserves);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\r\n     */\r\n  function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {\r\n    uint util = utilizationRate(cash, borrows, reserves);\r\n\r\n    if (util <= kink) {\r\n      return ((util * multiplierPerBlock) / BASE) + baseRatePerBlock;\r\n    } else {\r\n      uint normalRate = ((kink * multiplierPerBlock) / BASE) + baseRatePerBlock;\r\n      uint excessUtil = util - kink;\r\n      return ((excessUtil * jumpMultiplierPerBlock) / BASE) + normalRate;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the current supply rate per block\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @param reserveFactorMantissa The current reserve factor for the market\r\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\r\n     */\r\n  function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual override public view returns (uint) {\r\n    uint oneMinusReserveFactor = BASE - reserveFactorMantissa;\r\n    uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);\r\n    uint rateToPool = borrowRate * oneMinusReserveFactor / BASE;\r\n    return utilizationRate(cash, borrows, reserves) * rateToPool / BASE;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to update the parameters of the interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n  function updateJumpRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {\r\n    baseRatePerBlock = baseRatePerYear / blocksPerYear;\r\n    multiplierPerBlock = (multiplierPerYear * BASE) / (blocksPerYear * kink_);\r\n    jumpMultiplierPerBlock = jumpMultiplierPerYear / blocksPerYear;\r\n    kink = kink_;\r\n\r\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/CDaiDelegate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CErc20Delegate.sol\";\r\n\r\n/**\r\n * @title Compound's CDai Contract\r\n * @notice CToken which wraps Multi-Collateral DAI\r\n * @author Compound\r\n */\r\ncontract CDaiDelegate is CErc20Delegate {\r\n  /**\r\n   * @notice DAI adapter address\r\n     */\r\n  address public daiJoinAddress;\r\n\r\n  /**\r\n   * @notice DAI Savings Rate (DSR) pot address\r\n     */\r\n  address public potAddress;\r\n\r\n  /**\r\n   * @notice DAI vat address\r\n     */\r\n  address public vatAddress;\r\n\r\n  /**\r\n   * @notice Delegate interface to become the implementation\r\n     * @param data The encoded arguments for becoming\r\n     */\r\n  function _becomeImplementation(bytes memory data) override public {\r\n    require(msg.sender == admin, \"only the admin may initialize the implementation\");\r\n\r\n    (address daiJoinAddress_, address potAddress_) = abi.decode(data, (address, address));\r\n    return _becomeImplementation(daiJoinAddress_, potAddress_);\r\n  }\r\n\r\n  /**\r\n   * @notice Explicit interface to become the implementation\r\n     * @param daiJoinAddress_ DAI adapter address\r\n     * @param potAddress_ DAI Savings Rate (DSR) pot address\r\n     */\r\n  function _becomeImplementation(address daiJoinAddress_, address potAddress_) internal {\r\n    // Get dai and vat and sanity check the underlying\r\n    DaiJoinLike daiJoin = DaiJoinLike(daiJoinAddress_);\r\n    PotLike pot = PotLike(potAddress_);\r\n    GemLike dai = daiJoin.dai();\r\n    VatLike vat = daiJoin.vat();\r\n    require(address(dai) == underlying, \"DAI must be the same as underlying\");\r\n\r\n    // Remember the relevant addresses\r\n    daiJoinAddress = daiJoinAddress_;\r\n    potAddress = potAddress_;\r\n    vatAddress = address(vat);\r\n\r\n    // Approve moving our DAI into the vat through daiJoin\r\n    dai.approve(daiJoinAddress, type(uint).max);\r\n\r\n    // Approve the pot to transfer our funds within the vat\r\n    vat.hope(potAddress);\r\n    vat.hope(daiJoinAddress);\r\n\r\n    // Accumulate DSR interest -- must do this in order to doTransferIn\r\n    pot.drip();\r\n\r\n    // Transfer all cash in (doTransferIn does this regardless of amount)\r\n    doTransferIn(address(this), 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Delegate interface to resign the implementation\r\n     */\r\n  function _resignImplementation() override public {\r\n    require(msg.sender == admin, \"only the admin may abandon the implementation\");\r\n\r\n    // Transfer all cash out of the DSR - note that this relies on self-transfer\r\n    DaiJoinLike daiJoin = DaiJoinLike(daiJoinAddress);\r\n    PotLike pot = PotLike(potAddress);\r\n    VatLike vat = VatLike(vatAddress);\r\n\r\n    // Accumulate interest\r\n    pot.drip();\r\n\r\n    // Calculate the total amount in the pot, and move it out\r\n    uint pie = pot.pie(address(this));\r\n    pot.exit(pie);\r\n\r\n    // Checks the actual balance of DAI in the vat after the pot exit\r\n    uint bal = vat.dai(address(this));\r\n\r\n    // Remove our whole balance\r\n    daiJoin.exit(address(this), bal / RAY);\r\n  }\r\n\r\n  /*** CToken Overrides ***/\r\n\r\n  /**\r\n    * @notice Accrues DSR then applies accrued interest to total borrows and reserves\r\n      * @dev This calculates interest accrued from the last checkpointed block\r\n      *      up to the current block and writes new checkpoint to storage.\r\n      */\r\n  function accrueInterest() override public returns (uint) {\r\n    // Accumulate DSR interest\r\n    PotLike(potAddress).drip();\r\n\r\n    // Accumulate CToken interest\r\n    return super.accrueInterest();\r\n  }\r\n\r\n  /*** Safe Token ***/\r\n\r\n  /**\r\n   * @notice Gets balance of this contract in terms of the underlying\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of underlying tokens owned by this contract\r\n     */\r\n  function getCashPrior() override internal view returns (uint) {\r\n    PotLike pot = PotLike(potAddress);\r\n    uint pie = pot.pie(address(this));\r\n    return mul(pot.chi(), pie) / RAY;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer the underlying to this contract and sweep into DSR pot\r\n     * @param from Address to transfer funds from\r\n     * @param amount Amount of underlying to transfer\r\n     * @return The actual amount that is transferred\r\n     */\r\n  function doTransferIn(address from, uint amount) override internal returns (uint) {\r\n    // Read from storage once\r\n    address underlying_ = underlying;\r\n    // Perform the EIP-20 transfer in\r\n    EIP20Interface token = EIP20Interface(underlying_);\r\n    require(token.transferFrom(from, address(this), amount), \"unexpected EIP-20 transfer in return\");\r\n\r\n    DaiJoinLike daiJoin = DaiJoinLike(daiJoinAddress);\r\n    GemLike dai = GemLike(underlying_);\r\n    PotLike pot = PotLike(potAddress);\r\n    VatLike vat = VatLike(vatAddress);\r\n\r\n    // Convert all our DAI to internal DAI in the vat\r\n    daiJoin.join(address(this), dai.balanceOf(address(this)));\r\n\r\n    // Checks the actual balance of DAI in the vat after the join\r\n    uint bal = vat.dai(address(this));\r\n\r\n    // Calculate the percentage increase to th pot for the entire vat, and move it in\r\n    // Note: We may leave a tiny bit of DAI in the vat...but we do the whole thing every time\r\n    uint pie = bal / pot.chi();\r\n    pot.join(pie);\r\n\r\n    return amount;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer the underlying from this contract, after sweeping out of DSR pot\r\n     * @param to Address to transfer funds to\r\n     * @param amount Amount of underlying to transfer\r\n     */\r\n  function doTransferOut(address payable to, uint amount) override internal {\r\n    DaiJoinLike daiJoin = DaiJoinLike(daiJoinAddress);\r\n    PotLike pot = PotLike(potAddress);\r\n\r\n    // Calculate the percentage decrease from the pot, and move that much out\r\n    // Note: Use a slightly larger pie size to ensure that we get at least amount in the vat\r\n    uint pie = add(mul(amount, RAY) / pot.chi(), 1);\r\n    pot.exit(pie);\r\n\r\n    daiJoin.exit(to, amount);\r\n  }\r\n\r\n  /*** Maker Internals ***/\r\n\r\n  uint256 constant RAY = 10 ** 27;\r\n\r\n  function add(uint x, uint y) internal pure returns (uint z) {\r\n    require((z = x + y) >= x, \"add-overflow\");\r\n  }\r\n\r\n  function mul(uint x, uint y) internal pure returns (uint z) {\r\n    require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n  }\r\n}\r\n\r\n/*** Maker Interfaces ***/\r\n\r\ninterface PotLike {\r\n  function chi() external view returns (uint);\r\n\r\n  function pie(address) external view returns (uint);\r\n\r\n  function drip() external returns (uint);\r\n\r\n  function join(uint) external;\r\n\r\n  function exit(uint) external;\r\n}\r\n\r\ninterface GemLike {\r\n  function approve(address, uint) external;\r\n\r\n  function balanceOf(address) external view returns (uint);\r\n\r\n  function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface VatLike {\r\n  function dai(address) external view returns (uint);\r\n\r\n  function hope(address) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n  function vat() external returns (VatLike);\r\n\r\n  function dai() external returns (GemLike);\r\n\r\n  function join(address, uint) external payable;\r\n\r\n  function exit(address, uint) external;\r\n}\r\n"
    },
    "contracts/test/compound-core/CErc20.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\n\r\ninterface CompLike {\r\n  function delegate(address delegatee) external;\r\n}\r\n\r\n/**\r\n * @title Compound's CErc20 Contract\r\n * @notice CTokens which wrap an EIP-20 underlying\r\n * @author Compound\r\n */\r\ncontract CErc20 is CToken, CErc20Interface {\r\n  /**\r\n   * @notice Initialize the new money market\r\n     * @param underlying_ The address of the underlying asset\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     */\r\n  function initialize(address underlying_,\r\n    ComptrollerInterface comptroller_,\r\n    InterestRateModel interestRateModel_,\r\n    uint initialExchangeRateMantissa_,\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint8 decimals_) public {\r\n    // CToken initialize does the bulk of the work\r\n    super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\r\n\r\n    // Set underlying and sanity check it\r\n    underlying = underlying_;\r\n    EIP20Interface(underlying).totalSupply();\r\n  }\r\n\r\n  /*** User Interface ***/\r\n\r\n  /**\r\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function mint(uint mintAmount) override external returns (uint) {\r\n    mintInternal(mintAmount);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function redeem(uint redeemTokens) override external returns (uint) {\r\n    redeemInternal(redeemTokens);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to redeem\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function redeemUnderlying(uint redeemAmount) override external returns (uint) {\r\n    redeemUnderlyingInternal(redeemAmount);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n    * @notice Sender borrows assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function borrow(uint borrowAmount) override external returns (uint) {\r\n    borrowInternal(borrowAmount);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Sender repays their own borrow\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function repayBorrow(uint repayAmount) override external returns (uint) {\r\n    repayBorrowInternal(repayAmount);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Sender repays a borrow belonging to borrower\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function repayBorrowBehalf(address borrower, uint repayAmount) override external returns (uint) {\r\n    repayBorrowBehalfInternal(borrower, repayAmount);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) override external returns (uint) {\r\n    liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\r\n     * @param token The address of the ERC-20 token to sweep\r\n     */\r\n  function sweepToken(EIP20NonStandardInterface token) override external {\r\n    require(msg.sender == admin, \"CErc20::sweepToken: only admin can sweep tokens\");\r\n    require(address(token) != underlying, \"CErc20::sweepToken: can not sweep underlying token\");\r\n    uint256 balance = token.balanceOf(address(this));\r\n    token.transfer(admin, balance);\r\n  }\r\n\r\n  /**\r\n   * @notice The sender adds to reserves.\r\n     * @param addAmount The amount fo underlying token to add as reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _addReserves(uint addAmount) override external returns (uint) {\r\n    return _addReservesInternal(addAmount);\r\n  }\r\n\r\n  /*** Safe Token ***/\r\n\r\n  /**\r\n   * @notice Gets balance of this contract in terms of the underlying\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of underlying tokens owned by this contract\r\n     */\r\n  function getCashPrior() virtual override internal view returns (uint) {\r\n    EIP20Interface token = EIP20Interface(underlying);\r\n    return token.balanceOf(address(this));\r\n  }\r\n\r\n  /**\r\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\r\n     *      This will revert due to insufficient balance or insufficient allowance.\r\n     *      This function returns the actual amount received,\r\n     *      which may be less than `amount` if there is a fee attached to the transfer.\r\n     *\r\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n     */\r\n  function doTransferIn(address from, uint amount) virtual override internal returns (uint) {\r\n    // Read from storage once\r\n    address underlying_ = underlying;\r\n    EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying_);\r\n    uint balanceBefore = EIP20Interface(underlying_).balanceOf(address(this));\r\n    token.transferFrom(from, address(this), amount);\r\n\r\n    bool success;\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {// This is a non-standard ERC-20\r\n        success := not(0)          // set success to true\r\n      }\r\n      case 32 {// This is a compliant ERC-20\r\n        returndatacopy(0, 0, 32)\r\n        success := mload(0)        // Set `success = returndata` of override external call\r\n      }\r\n      default {// This is an excessively non-compliant ERC-20, revert.\r\n        revert(0, 0)\r\n      }\r\n    }\r\n    require(success, \"TOKEN_TRANSFER_IN_FAILED\");\r\n\r\n    // Calculate the amount that was *actually* transferred\r\n    uint balanceAfter = EIP20Interface(underlying_).balanceOf(address(this));\r\n    return balanceAfter - balanceBefore;\r\n    // underflow already checked above, just subtract\r\n  }\r\n\r\n  /**\r\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\r\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\r\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\r\n     *      it is >= amount, this should not revert in normal conditions.\r\n     *\r\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\r\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n     */\r\n  function doTransferOut(address payable to, uint amount) virtual override internal {\r\n    EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\r\n    token.transfer(to, amount);\r\n\r\n    bool success;\r\n    assembly {\r\n      switch returndatasize()\r\n      case 0 {// This is a non-standard ERC-20\r\n        success := not(0)          // set success to true\r\n      }\r\n      case 32 {// This is a compliant ERC-20\r\n        returndatacopy(0, 0, 32)\r\n        success := mload(0)        // Set `success = returndata` of override external call\r\n      }\r\n      default {// This is an excessively non-compliant ERC-20, revert.\r\n        revert(0, 0)\r\n      }\r\n    }\r\n    require(success, \"TOKEN_TRANSFER_OUT_FAILED\");\r\n  }\r\n\r\n  /**\r\n  * @notice Admin call to delegate the votes of the COMP-like underlying\r\n    * @param compLikeDelegatee The address to delegate votes to\r\n    * @dev CTokens whose underlying are not CompLike should revert here\r\n    */\r\n  function _delegateCompLikeTo(address compLikeDelegatee) external {\r\n    require(msg.sender == admin, \"only the admin may set the comp-like delegate\");\r\n    CompLike(underlying).delegate(compLikeDelegatee);\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/CErc20Delegate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CErc20.sol\";\r\n\r\n/**\r\n * @title Compound's CErc20Delegate Contract\r\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\r\n * @author Compound\r\n */\r\ncontract CErc20Delegate is CErc20, CDelegateInterface {\r\n  /**\r\n   * @notice Construct an empty delegate\r\n     */\r\n  constructor() {}\r\n\r\n  /**\r\n   * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n  function _becomeImplementation(bytes memory data) virtual override public {\r\n    // Shh -- currently unused\r\n    data;\r\n\r\n    // Shh -- we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      implementation = address(0);\r\n    }\r\n\r\n    require(msg.sender == admin, \"only the admin may call _becomeImplementation\");\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the delegator on a delegate to forfeit its responsibility\r\n     */\r\n  function _resignImplementation() virtual override public {\r\n    // Shh -- we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      implementation = address(0);\r\n    }\r\n\r\n    require(msg.sender == admin, \"only the admin may call _resignImplementation\");\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/CErc20Delegator.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CTokenInterfaces.sol\";\r\n\r\n/**\r\n * @title Compound's CErc20Delegator Contract\r\n * @notice CTokens which wrap an EIP-20 underlying and delegate to an implementation\r\n * @author Compound\r\n */\r\ncontract CErc20Delegator is CTokenInterface, CErc20Interface, CDelegatorInterface {\r\n  /**\r\n   * @notice Construct a new money market\r\n     * @param underlying_ The address of the underlying asset\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     * @param admin_ Address of the administrator of this token\r\n     * @param implementation_ The address of the implementation the contract delegates to\r\n     * @param becomeImplementationData The encoded args for becomeImplementation\r\n     */\r\n  constructor(address underlying_,\r\n    ComptrollerInterface comptroller_,\r\n    InterestRateModel interestRateModel_,\r\n    uint initialExchangeRateMantissa_,\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint8 decimals_,\r\n    address payable admin_,\r\n    address implementation_,\r\n    bytes memory becomeImplementationData) {\r\n    // Creator of the contract is admin during initialization\r\n    admin = payable(msg.sender);\r\n\r\n    // First delegate gets to initialize the delegator (i.e. storage contract)\r\n    delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\r\n      underlying_,\r\n      comptroller_,\r\n      interestRateModel_,\r\n      initialExchangeRateMantissa_,\r\n      name_,\r\n      symbol_,\r\n      decimals_));\r\n\r\n    // New implementations always get set via the settor (post-initialize)\r\n    _setImplementation(implementation_, false, becomeImplementationData);\r\n\r\n    // Set the proper admin now that initialization is done\r\n    admin = admin_;\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n  function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) override public {\r\n    require(msg.sender == admin, \"CErc20Delegator::_setImplementation: Caller must be admin\");\r\n\r\n    if (allowResign) {\r\n      delegateToImplementation(abi.encodeWithSignature(\"_resignImplementation()\"));\r\n    }\r\n\r\n    address oldImplementation = implementation;\r\n    implementation = implementation_;\r\n\r\n    delegateToImplementation(abi.encodeWithSignature(\"_becomeImplementation(bytes)\", becomeImplementationData));\r\n\r\n    emit NewImplementation(oldImplementation, implementation);\r\n  }\r\n\r\n  /**\r\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function mint(uint mintAmount) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"mint(uint256)\", mintAmount));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function redeem(uint redeemTokens) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"redeem(uint256)\", redeemTokens));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to redeem\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function redeemUnderlying(uint redeemAmount) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"redeemUnderlying(uint256)\", redeemAmount));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n    * @notice Sender borrows assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function borrow(uint borrowAmount) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"borrow(uint256)\", borrowAmount));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Sender repays their own borrow\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function repayBorrow(uint repayAmount) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"repayBorrow(uint256)\", repayAmount));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Sender repays a borrow belonging to borrower\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function repayBorrowBehalf(address borrower, uint repayAmount) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"repayBorrowBehalf(address,uint256)\", borrower, repayAmount));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"liquidateBorrow(address,uint256,address)\", borrower, repayAmount, cTokenCollateral));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n  function transfer(address dst, uint amount) override external returns (bool) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"transfer(address,uint256)\", dst, amount));\r\n    return abi.decode(data, (bool));\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n  function transferFrom(address src, address dst, uint256 amount) override external returns (bool) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", src, dst, amount));\r\n    return abi.decode(data, (bool));\r\n  }\r\n\r\n  /**\r\n   * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved (-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n  function approve(address spender, uint256 amount) override external returns (bool) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"approve(address,uint256)\", spender, amount));\r\n    return abi.decode(data, (bool));\r\n  }\r\n\r\n  /**\r\n   * @notice Get the current allowance from `owner` for `spender`\r\n     * @param owner The address of the account which owns the tokens to be spent\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @return The number of tokens allowed to be spent (-1 means infinite)\r\n     */\r\n  function allowance(address owner, address spender) override external view returns (uint) {\r\n    bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"allowance(address,address)\", owner, spender));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Get the token balance of the `owner`\r\n     * @param owner The address of the account to query\r\n     * @return The number of tokens owned by `owner`\r\n     */\r\n  function balanceOf(address owner) override external view returns (uint) {\r\n    bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"balanceOf(address)\", owner));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Get the underlying balance of the `owner`\r\n     * @dev This also accrues interest in a transaction\r\n     * @param owner The address of the account to query\r\n     * @return The amount of underlying owned by `owner`\r\n     */\r\n  function balanceOfUnderlying(address owner) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"balanceOfUnderlying(address)\", owner));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\r\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\r\n     * @param account Address of the account to snapshot\r\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\r\n     */\r\n  function getAccountSnapshot(address account) override external view returns (uint, uint, uint, uint) {\r\n    bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"getAccountSnapshot(address)\", account));\r\n    return abi.decode(data, (uint, uint, uint, uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current per-block borrow interest rate for this cToken\r\n     * @return The borrow interest rate per block, scaled by 1e18\r\n     */\r\n  function borrowRatePerBlock() override external view returns (uint) {\r\n    bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"borrowRatePerBlock()\"));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current per-block supply interest rate for this cToken\r\n     * @return The supply interest rate per block, scaled by 1e18\r\n     */\r\n  function supplyRatePerBlock() override external view returns (uint) {\r\n    bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"supplyRatePerBlock()\"));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current total borrows plus accrued interest\r\n     * @return The total borrows with interest\r\n     */\r\n  function totalBorrowsCurrent() override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"totalBorrowsCurrent()\"));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\r\n     * @param account The address whose balance should be calculated after updating borrowIndex\r\n     * @return The calculated balance\r\n     */\r\n  function borrowBalanceCurrent(address account) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"borrowBalanceCurrent(address)\", account));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Return the borrow balance of account based on stored data\r\n     * @param account The address whose balance should be calculated\r\n     * @return The calculated balance\r\n     */\r\n  function borrowBalanceStored(address account) override public view returns (uint) {\r\n    bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"borrowBalanceStored(address)\", account));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Accrue interest then return the up-to-date exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n  function exchangeRateCurrent() override public returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"exchangeRateCurrent()\"));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the exchange rate from the underlying to the CToken\r\n     * @dev This function does not accrue interest before calculating the exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n  function exchangeRateStored() override public view returns (uint) {\r\n    bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"exchangeRateStored()\"));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Get cash balance of this cToken in the underlying asset\r\n     * @return The quantity of underlying asset owned by this contract\r\n     */\r\n  function getCash() override external view returns (uint) {\r\n    bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"getCash()\"));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n    * @notice Applies accrued interest to total borrows and reserves.\r\n      * @dev This calculates interest accrued from the last checkpointed block\r\n      *      up to the current block and writes new checkpoint to storage.\r\n      */\r\n  function accrueInterest() override public returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"accrueInterest()\"));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers collateral tokens (this market) to the liquidator.\r\n     * @dev Will fail unless called by another cToken during the process of liquidation.\r\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\r\n     * @param liquidator The account receiving seized collateral\r\n     * @param borrower The account having collateral seized\r\n     * @param seizeTokens The number of cTokens to seize\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function seize(address liquidator, address borrower, uint seizeTokens) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"seize(address,address,uint256)\", liquidator, borrower, seizeTokens));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\r\n     * @param token The address of the ERC-20 token to sweep\r\n     */\r\n  function sweepToken(EIP20NonStandardInterface token) override external {\r\n    delegateToImplementation(abi.encodeWithSignature(\"sweepToken(address)\", token));\r\n  }\r\n\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  /**\r\n    * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setPendingAdmin(address payable newPendingAdmin) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setPendingAdmin(address)\", newPendingAdmin));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n    * @notice Sets a new comptroller for the market\r\n      * @dev Admin function to set a new comptroller\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setComptroller(ComptrollerInterface newComptroller) override public returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setComptroller(address)\", newComptroller));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n    * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\r\n      * @dev Admin function to accrue interest and set a new reserve factor\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setReserveFactor(uint newReserveFactorMantissa) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setReserveFactor(uint256)\", newReserveFactorMantissa));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n    * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _acceptAdmin() override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_acceptAdmin()\"));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Accrues interest and adds reserves by transferring from admin\r\n     * @param addAmount Amount of reserves to add\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _addReserves(uint addAmount) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_addReserves(uint256)\", addAmount));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Accrues interest and reduces reserves by transferring to admin\r\n     * @param reduceAmount Amount of reduction to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _reduceReserves(uint reduceAmount) override external returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_reduceReserves(uint256)\", reduceAmount));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\r\n     * @dev Admin function to accrue interest and update the interest rate model\r\n     * @param newInterestRateModel the new interest rate model to use\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) override public returns (uint) {\r\n    bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setInterestRateModel(address)\", newInterestRateModel));\r\n    return abi.decode(data, (uint));\r\n  }\r\n\r\n  /**\r\n   * @notice Internal method to delegate execution to another contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     * @param callee The contract to delegatecall\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n  function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\r\n    (bool success, bytes memory returnData) = callee.delegatecall(data);\r\n    assembly {\r\n      if eq(success, 0) {\r\n        revert(add(returnData, 0x20), returndatasize())\r\n      }\r\n    }\r\n    return returnData;\r\n  }\r\n\r\n  /**\r\n   * @notice Delegates execution to the implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n  function delegateToImplementation(bytes memory data) public returns (bytes memory) {\r\n    return delegateTo(implementation, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\r\n     * @param data The raw data to delegatecall\r\n     * @return The returned bytes from the delegatecall\r\n     */\r\n  function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\r\n    (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\r\n    assembly {\r\n      if eq(success, 0) {\r\n        revert(add(returnData, 0x20), returndatasize())\r\n      }\r\n    }\r\n    return abi.decode(returnData, (bytes));\r\n  }\r\n\r\n  /**\r\n   * @notice Delegates execution to an implementation contract\r\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\r\n     */\r\n  fallback() external /*payable*/ {\r\n    //        require(msg.value == 0,\"CErc20Delegator:fallback: cannot send value to fallback\");\r\n\r\n    // delegate all other functions to current implementation\r\n    (bool success,) = implementation.delegatecall(msg.data);\r\n\r\n    assembly {\r\n      let free_mem_ptr := mload(0x40)\r\n      returndatacopy(free_mem_ptr, 0, returndatasize())\r\n\r\n      switch success\r\n      case 0 {revert(free_mem_ptr, returndatasize())}\r\n      default {return (free_mem_ptr, returndatasize())}\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/CErc20Immutable.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CErc20.sol\";\r\n\r\n/**\r\n * @title Compound's CErc20Immutable Contract\r\n * @notice CTokens which wrap an EIP-20 underlying and are immutable\r\n * @author Compound\r\n */\r\ncontract CErc20Immutable is CErc20 {\r\n  /**\r\n   * @notice Construct a new money market\r\n     * @param underlying_ The address of the underlying asset\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     * @param admin_ Address of the administrator of this token\r\n     */\r\n  constructor(address underlying_,\r\n    ComptrollerInterface comptroller_,\r\n    InterestRateModel interestRateModel_,\r\n    uint initialExchangeRateMantissa_,\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint8 decimals_,\r\n    address payable admin_) {\r\n    // Creator of the contract is admin during initialization\r\n    admin = payable(msg.sender);\r\n\r\n    // Initialize the market\r\n    initialize(underlying_, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\r\n\r\n    // Set the proper admin now that initialization is done\r\n    admin = admin_;\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/CEther.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\n\r\n/**\r\n * @title Compound's CEther Contract\r\n * @notice CToken which wraps Ether\r\n * @author Compound\r\n */\r\ncontract CEther is CToken {\r\n  /**\r\n   * @notice Construct a new CEther money market\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ ERC-20 name of this token\r\n     * @param symbol_ ERC-20 symbol of this token\r\n     * @param decimals_ ERC-20 decimal precision of this token\r\n     * @param admin_ Address of the administrator of this token\r\n     */\r\n  constructor(ComptrollerInterface comptroller_,\r\n    InterestRateModel interestRateModel_,\r\n    uint initialExchangeRateMantissa_,\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint8 decimals_,\r\n    address payable admin_) {\r\n    // Creator of the contract is admin during initialization\r\n    admin = payable(msg.sender);\r\n\r\n    initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\r\n\r\n    // Set the proper admin now that initialization is done\r\n    admin = admin_;\r\n  }\r\n\r\n\r\n  /*** User Interface ***/\r\n\r\n  /**\r\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Reverts upon any failure\r\n     */\r\n  function mint() external payable {\r\n    mintInternal(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function redeem(uint redeemTokens) external returns (uint) {\r\n    redeemInternal(redeemTokens);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to redeem\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function redeemUnderlying(uint redeemAmount) external returns (uint) {\r\n    redeemUnderlyingInternal(redeemAmount);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n    * @notice Sender borrows assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function borrow(uint borrowAmount) external returns (uint) {\r\n    borrowInternal(borrowAmount);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Sender repays their own borrow\r\n     * @dev Reverts upon any failure\r\n     */\r\n  function repayBorrow() external payable {\r\n    repayBorrowInternal(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @notice Sender repays a borrow belonging to borrower\r\n     * @dev Reverts upon any failure\r\n     * @param borrower the account with the debt being payed off\r\n     */\r\n  function repayBorrowBehalf(address borrower) external payable {\r\n    repayBorrowBehalfInternal(borrower, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @dev Reverts upon any failure\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     */\r\n  function liquidateBorrow(address borrower, CToken cTokenCollateral) external payable {\r\n    liquidateBorrowInternal(borrower, msg.value, cTokenCollateral);\r\n  }\r\n\r\n  /**\r\n   * @notice The sender adds to reserves.\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _addReserves() external payable returns (uint) {\r\n    return _addReservesInternal(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @notice Send Ether to CEther to mint\r\n     */\r\n  receive() external payable {\r\n    mintInternal(msg.value);\r\n  }\r\n\r\n  /*** Safe Token ***/\r\n\r\n  /**\r\n   * @notice Gets balance of this contract in terms of Ether, before this message\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of Ether owned by this contract\r\n     */\r\n  function getCashPrior() override internal view returns (uint) {\r\n    return address(this).balance - msg.value;\r\n  }\r\n\r\n  /**\r\n   * @notice Perform the actual transfer in, which is a no-op\r\n     * @param from Address sending the Ether\r\n     * @param amount Amount of Ether being sent\r\n     * @return The actual amount of Ether transferred\r\n     */\r\n  function doTransferIn(address from, uint amount) override internal returns (uint) {\r\n    // Sanity checks\r\n    require(msg.sender == from, \"sender mismatch\");\r\n    require(msg.value == amount, \"value mismatch\");\r\n    return amount;\r\n  }\r\n\r\n  function doTransferOut(address payable to, uint amount) virtual override internal {\r\n    /* Send the Ether, with minimal gas and revert on failure */\r\n    to.transfer(amount);\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/Comptroller.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\nimport \"./ErrorReporter.sol\";\r\nimport \"./PriceOracle.sol\";\r\nimport \"./ComptrollerInterface.sol\";\r\nimport \"./ComptrollerStorage.sol\";\r\nimport \"./Unitroller.sol\";\r\nimport \"./Governance/Comp.sol\";\r\n\r\n/**\r\n * @title Compound's Comptroller Contract\r\n * @author Compound\r\n */\r\ncontract Comptroller is ComptrollerV7Storage, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {\r\n  /// @notice Emitted when an admin supports a market\r\n  event MarketListed(CToken cToken);\r\n\r\n  /// @notice Emitted when an account enters a market\r\n  event MarketEntered(CToken cToken, address account);\r\n\r\n  /// @notice Emitted when an account exits a market\r\n  event MarketExited(CToken cToken, address account);\r\n\r\n  /// @notice Emitted when close factor is changed by admin\r\n  event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\r\n\r\n  /// @notice Emitted when a collateral factor is changed by admin\r\n  event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\r\n\r\n  /// @notice Emitted when liquidation incentive is changed by admin\r\n  event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\r\n\r\n  /// @notice Emitted when price oracle is changed\r\n  event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\r\n\r\n  /// @notice Emitted when pause guardian is changed\r\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\r\n\r\n  /// @notice Emitted when an action is paused globally\r\n  event ActionPaused(string action, bool pauseState);\r\n\r\n  /// @notice Emitted when an action is paused on a market\r\n  event ActionPaused(CToken cToken, string action, bool pauseState);\r\n\r\n  /// @notice Emitted when a new borrow-side COMP speed is calculated for a market\r\n  event CompBorrowSpeedUpdated(CToken indexed cToken, uint newSpeed);\r\n\r\n  /// @notice Emitted when a new supply-side COMP speed is calculated for a market\r\n  event CompSupplySpeedUpdated(CToken indexed cToken, uint newSpeed);\r\n\r\n  /// @notice Emitted when a new COMP speed is set for a contributor\r\n  event ContributorCompSpeedUpdated(address indexed contributor, uint newSpeed);\r\n\r\n  /// @notice Emitted when COMP is distributed to a supplier\r\n  event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);\r\n\r\n  /// @notice Emitted when COMP is distributed to a borrower\r\n  event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);\r\n\r\n  /// @notice Emitted when borrow cap for a cToken is changed\r\n  event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);\r\n\r\n  /// @notice Emitted when borrow cap guardian is changed\r\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\r\n\r\n  /// @notice Emitted when COMP is granted by admin\r\n  event CompGranted(address recipient, uint amount);\r\n\r\n  /// @notice Emitted when COMP accrued for a user has been manually adjusted.\r\n  event CompAccruedAdjusted(address indexed user, uint oldCompAccrued, uint newCompAccrued);\r\n\r\n  /// @notice Emitted when COMP receivable for a user has been updated.\r\n  event CompReceivableUpdated(address indexed user, uint oldCompReceivable, uint newCompReceivable);\r\n\r\n  /// @notice The initial COMP index for a market\r\n  uint224 public constant compInitialIndex = 1e36;\r\n\r\n  // closeFactorMantissa must be strictly greater than this value\r\n  uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\r\n\r\n  // closeFactorMantissa must not exceed this value\r\n  uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n  // No collateralFactorMantissa may exceed this value\r\n  uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n  constructor() {\r\n    admin = msg.sender;\r\n  }\r\n\r\n  /*** Assets You Are In ***/\r\n\r\n  /**\r\n   * @notice Returns the assets an account has entered\r\n     * @param account The address of the account to pull assets for\r\n     * @return A dynamic list with the assets the account has entered\r\n     */\r\n  function getAssetsIn(address account) external view returns (CToken[] memory) {\r\n    CToken[] memory assetsIn = accountAssets[account];\r\n\r\n    return assetsIn;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns whether the given account is entered in the given asset\r\n     * @param account The address of the account to check\r\n     * @param cToken The cToken to check\r\n     * @return True if the account is in the asset, otherwise false.\r\n     */\r\n  function checkMembership(address account, CToken cToken) external view returns (bool) {\r\n    return markets[address(cToken)].accountMembership[account];\r\n  }\r\n\r\n  /**\r\n   * @notice Add assets to be included in account liquidity calculation\r\n     * @param cTokens The list of addresses of the cToken markets to be enabled\r\n     * @return Success indicator for whether each corresponding market was entered\r\n     */\r\n  function enterMarkets(address[] memory cTokens) override public returns (uint[] memory) {\r\n    uint len = cTokens.length;\r\n\r\n    uint[] memory results = new uint[](len);\r\n    for (uint i = 0; i < len; i++) {\r\n      CToken cToken = CToken(cTokens[i]);\r\n\r\n      results[i] = uint(addToMarketInternal(cToken, msg.sender));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\r\n     * @param cToken The market to enter\r\n     * @param borrower The address of the account to modify\r\n     * @return Success indicator for whether the market was entered\r\n     */\r\n  function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\r\n    Market storage marketToJoin = markets[address(cToken)];\r\n\r\n    if (!marketToJoin.isListed) {\r\n      // market is not listed, cannot join\r\n      return Error.MARKET_NOT_LISTED;\r\n    }\r\n\r\n    if (marketToJoin.accountMembership[borrower] == true) {\r\n      // already joined\r\n      return Error.NO_ERROR;\r\n    }\r\n\r\n    // survived the gauntlet, add to list\r\n    // NOTE: we store these somewhat redundantly as a significant optimization\r\n    //  this avoids having to iterate through the list for the most common use cases\r\n    //  that is, only when we need to perform liquidity checks\r\n    //  and not whenever we want to check if an account is in a particular market\r\n    marketToJoin.accountMembership[borrower] = true;\r\n    accountAssets[borrower].push(cToken);\r\n\r\n    emit MarketEntered(cToken, borrower);\r\n\r\n    return Error.NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Removes asset from sender's account liquidity calculation\r\n     * @dev Sender must not have an outstanding borrow balance in the asset,\r\n     *  or be providing necessary collateral for an outstanding borrow.\r\n     * @param cTokenAddress The address of the asset to be removed\r\n     * @return Whether or not the account successfully exited the market\r\n     */\r\n  function exitMarket(address cTokenAddress) override external returns (uint) {\r\n    CToken cToken = CToken(cTokenAddress);\r\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\r\n    (uint oErr, uint tokensHeld, uint amountOwed,) = cToken.getAccountSnapshot(msg.sender);\r\n    require(oErr == 0, \"exitMarket: getAccountSnapshot failed\");\r\n    // semi-opaque error code\r\n\r\n    /* Fail if the sender has a borrow balance */\r\n    if (amountOwed != 0) {\r\n      return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\r\n    }\r\n\r\n    /* Fail if the sender is not permitted to redeem all of their tokens */\r\n    uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\r\n    if (allowed != 0) {\r\n      return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\r\n    }\r\n\r\n    Market storage marketToExit = markets[address(cToken)];\r\n\r\n    /* Return true if the sender is not already ‘in’ the market */\r\n    if (!marketToExit.accountMembership[msg.sender]) {\r\n      return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /* Set cToken account membership to false */\r\n    delete marketToExit.accountMembership[msg.sender];\r\n\r\n    /* Delete cToken from the account’s list of assets */\r\n    // load into memory for faster iteration\r\n    CToken[] memory userAssetList = accountAssets[msg.sender];\r\n    uint len = userAssetList.length;\r\n    uint assetIndex = len;\r\n    for (uint i = 0; i < len; i++) {\r\n      if (userAssetList[i] == cToken) {\r\n        assetIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // We *must* have found the asset in the list or our redundant data structure is broken\r\n    assert(assetIndex < len);\r\n\r\n    // copy last item in list to location of item to be removed, reduce length by 1\r\n    CToken[] storage storedList = accountAssets[msg.sender];\r\n    storedList[assetIndex] = storedList[storedList.length - 1];\r\n    storedList.pop();\r\n\r\n    emit MarketExited(cToken, msg.sender);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /*** Policy Hooks ***/\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to mint tokens in the given market\r\n     * @param cToken The market to verify the mint against\r\n     * @param minter The account which would get the minted tokens\r\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\r\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function mintAllowed(address cToken, address minter, uint mintAmount) override external returns (uint) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!mintGuardianPaused[cToken], \"mint is paused\");\r\n\r\n    // Shh - currently unused\r\n    minter;\r\n    mintAmount;\r\n\r\n    if (!markets[cToken].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    updateCompSupplyIndex(cToken);\r\n    distributeSupplierComp(cToken, minter);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates mint and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being minted\r\n     * @param minter The address minting the tokens\r\n     * @param actualMintAmount The amount of the underlying asset being minted\r\n     * @param mintTokens The number of tokens being minted\r\n     */\r\n  function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) override external {\r\n    // Shh - currently unused\r\n    cToken;\r\n    minter;\r\n    actualMintAmount;\r\n    mintTokens;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\r\n     * @param cToken The market to verify the redeem against\r\n     * @param redeemer The account which would redeem the tokens\r\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\r\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function redeemAllowed(address cToken, address redeemer, uint redeemTokens) override external returns (uint) {\r\n    uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\r\n    if (allowed != uint(Error.NO_ERROR)) {\r\n      return allowed;\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    updateCompSupplyIndex(cToken);\r\n    distributeSupplierComp(cToken, redeemer);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\r\n    if (!markets[cToken].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\r\n    if (!markets[cToken].accountMembership[redeemer]) {\r\n      return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\r\n    (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0);\r\n    if (err != Error.NO_ERROR) {\r\n      return uint(err);\r\n    }\r\n    if (shortfall > 0) {\r\n      return uint(Error.INSUFFICIENT_LIQUIDITY);\r\n    }\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates redeem and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being redeemed\r\n     * @param redeemer The address redeeming the tokens\r\n     * @param redeemAmount The amount of the underlying asset being redeemed\r\n     * @param redeemTokens The number of tokens being redeemed\r\n     */\r\n  function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) override external pure {\r\n    // Shh - currently unused\r\n    cToken;\r\n    redeemer;\r\n\r\n    // Require tokens is zero or amount is also zero\r\n    if (redeemTokens == 0 && redeemAmount > 0) {\r\n      revert(\"redeemTokens zero\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\r\n     * @param cToken The market to verify the borrow against\r\n     * @param borrower The account which would borrow the asset\r\n     * @param borrowAmount The amount of underlying the account would borrow\r\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function borrowAllowed(address cToken, address borrower, uint borrowAmount) override external returns (uint) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!borrowGuardianPaused[cToken], \"borrow is paused\");\r\n\r\n    if (!markets[cToken].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    if (!markets[cToken].accountMembership[borrower]) {\r\n      // only cTokens may call borrowAllowed if borrower not in market\r\n      require(msg.sender == cToken, \"sender must be cToken\");\r\n\r\n      // attempt to add borrower to the market\r\n      Error err1 = addToMarketInternal(CToken(msg.sender), borrower);\r\n      if (err1 != Error.NO_ERROR) {\r\n        return uint(err1);\r\n      }\r\n\r\n      // it should be impossible to break the important invariant\r\n      assert(markets[cToken].accountMembership[borrower]);\r\n    }\r\n\r\n    if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\r\n      return uint(Error.PRICE_ERROR);\r\n    }\r\n\r\n\r\n    uint borrowCap = borrowCaps[cToken];\r\n    // Borrow cap of 0 corresponds to unlimited borrowing\r\n    if (borrowCap != 0) {\r\n      uint totalBorrows = CToken(cToken).totalBorrows();\r\n      uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\r\n      require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\r\n    }\r\n\r\n    (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\r\n    if (err != Error.NO_ERROR) {\r\n      return uint(err);\r\n    }\r\n    if (shortfall > 0) {\r\n      return uint(Error.INSUFFICIENT_LIQUIDITY);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    Exp memory borrowIndex = Exp({mantissa : CToken(cToken).borrowIndex()});\r\n    updateCompBorrowIndex(cToken, borrowIndex);\r\n    distributeBorrowerComp(cToken, borrower, borrowIndex);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates borrow and reverts on rejection. May emit logs.\r\n     * @param cToken Asset whose underlying is being borrowed\r\n     * @param borrower The address borrowing the underlying\r\n     * @param borrowAmount The amount of the underlying asset requested to borrow\r\n     */\r\n  function borrowVerify(address cToken, address borrower, uint borrowAmount) override external {\r\n    // Shh - currently unused\r\n    cToken;\r\n    borrower;\r\n    borrowAmount;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\r\n     * @param cToken The market to verify the repay against\r\n     * @param payer The account which would repay the asset\r\n     * @param borrower The account which would borrowed the asset\r\n     * @param repayAmount The amount of the underlying asset the account would repay\r\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function repayBorrowAllowed(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint repayAmount) override external returns (uint) {\r\n    // Shh - currently unused\r\n    payer;\r\n    borrower;\r\n    repayAmount;\r\n\r\n    if (!markets[cToken].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    Exp memory borrowIndex = Exp({mantissa : CToken(cToken).borrowIndex()});\r\n    updateCompBorrowIndex(cToken, borrowIndex);\r\n    distributeBorrowerComp(cToken, borrower, borrowIndex);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates repayBorrow and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being repaid\r\n     * @param payer The address repaying the borrow\r\n     * @param borrower The address of the borrower\r\n     * @param actualRepayAmount The amount of underlying being repaid\r\n     */\r\n  function repayBorrowVerify(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint actualRepayAmount,\r\n    uint borrowerIndex) override external {\r\n    // Shh - currently unused\r\n    cToken;\r\n    payer;\r\n    borrower;\r\n    actualRepayAmount;\r\n    borrowerIndex;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the liquidation should be allowed to occur\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param repayAmount The amount of underlying being repaid\r\n     */\r\n  function liquidateBorrowAllowed(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint repayAmount) override external view returns (uint) {\r\n    // Shh - currently unused\r\n    liquidator;\r\n\r\n    if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\r\n\r\n    /* allow accounts to be liquidated if the market is deprecated */\r\n    if (isDeprecated(CToken(cTokenBorrowed))) {\r\n      require(borrowBalance >= repayAmount, \"Can not repay more than the total borrow\");\r\n    } else {\r\n      /* The borrower must have shortfall in order to be liquidatable */\r\n      (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\r\n      if (err != Error.NO_ERROR) {\r\n        return uint(err);\r\n      }\r\n\r\n      if (shortfall == 0) {\r\n        return uint(Error.INSUFFICIENT_SHORTFALL);\r\n      }\r\n\r\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\r\n      uint maxClose = mul_ScalarTruncate(Exp({mantissa : closeFactorMantissa}), borrowBalance);\r\n      if (repayAmount > maxClose) {\r\n        return uint(Error.TOO_MUCH_REPAY);\r\n      }\r\n    }\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param actualRepayAmount The amount of underlying being repaid\r\n     */\r\n  function liquidateBorrowVerify(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint actualRepayAmount,\r\n    uint seizeTokens) override external {\r\n    // Shh - currently unused\r\n    cTokenBorrowed;\r\n    cTokenCollateral;\r\n    liquidator;\r\n    borrower;\r\n    actualRepayAmount;\r\n    seizeTokens;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the seizing of assets should be allowed to occur\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param seizeTokens The number of collateral tokens to seize\r\n     */\r\n  function seizeAllowed(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint seizeTokens) override external returns (uint) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!seizeGuardianPaused, \"seize is paused\");\r\n\r\n    // Shh - currently unused\r\n    seizeTokens;\r\n\r\n    if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\r\n      return uint(Error.COMPTROLLER_MISMATCH);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    updateCompSupplyIndex(cTokenCollateral);\r\n    distributeSupplierComp(cTokenCollateral, borrower);\r\n    distributeSupplierComp(cTokenCollateral, liquidator);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates seize and reverts on rejection. May emit logs.\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param seizeTokens The number of collateral tokens to seize\r\n     */\r\n  function seizeVerify(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint seizeTokens) override external {\r\n    // Shh - currently unused\r\n    cTokenCollateral;\r\n    cTokenBorrowed;\r\n    liquidator;\r\n    borrower;\r\n    seizeTokens;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\r\n     * @param cToken The market to verify the transfer against\r\n     * @param src The account which sources the tokens\r\n     * @param dst The account which receives the tokens\r\n     * @param transferTokens The number of cTokens to transfer\r\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function transferAllowed(address cToken, address src, address dst, uint transferTokens) override external returns (uint) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!transferGuardianPaused, \"transfer is paused\");\r\n\r\n    // Currently the only consideration is whether or not\r\n    //  the src is allowed to redeem this many tokens\r\n    uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\r\n    if (allowed != uint(Error.NO_ERROR)) {\r\n      return allowed;\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    updateCompSupplyIndex(cToken);\r\n    distributeSupplierComp(cToken, src);\r\n    distributeSupplierComp(cToken, dst);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates transfer and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being transferred\r\n     * @param src The account which sources the tokens\r\n     * @param dst The account which receives the tokens\r\n     * @param transferTokens The number of cTokens to transfer\r\n     */\r\n  function transferVerify(address cToken, address src, address dst, uint transferTokens) override external {\r\n    // Shh - currently unused\r\n    cToken;\r\n    src;\r\n    dst;\r\n    transferTokens;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /*** Liquidity/Liquidation Calculations ***/\r\n\r\n  /**\r\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\r\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\r\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\r\n     */\r\n  struct AccountLiquidityLocalVars {\r\n    uint sumCollateral;\r\n    uint sumBorrowPlusEffects;\r\n    uint cTokenBalance;\r\n    uint borrowBalance;\r\n    uint exchangeRateMantissa;\r\n    uint oraclePriceMantissa;\r\n    Exp collateralFactor;\r\n    Exp exchangeRate;\r\n    Exp oraclePrice;\r\n    Exp tokensToDenom;\r\n  }\r\n\r\n  /**\r\n   * @notice Determine the current account liquidity wrt collateral requirements\r\n     * @return (possible error code (semi-opaque),\r\n                account liquidity in excess of collateral requirements,\r\n     *          account shortfall below collateral requirements)\r\n     */\r\n  function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\r\n    (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(address(0)), 0, 0);\r\n\r\n    return (uint(err), liquidity, shortfall);\r\n  }\r\n\r\n  /**\r\n   * @notice Determine the current account liquidity wrt collateral requirements\r\n     * @return (possible error code,\r\n                account liquidity in excess of collateral requirements,\r\n     *          account shortfall below collateral requirements)\r\n     */\r\n  function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\r\n    return getHypotheticalAccountLiquidityInternal(account, CToken(address(0)), 0, 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @return (possible error code (semi-opaque),\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n  function getHypotheticalAccountLiquidity(\r\n    address account,\r\n    address cTokenModify,\r\n    uint redeemTokens,\r\n    uint borrowAmount) public view returns (uint, uint, uint) {\r\n    (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount);\r\n    return (uint(err), liquidity, shortfall);\r\n  }\r\n\r\n  /**\r\n   * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\r\n     *  without calculating accumulated interest.\r\n     * @return (possible error code,\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n  function getHypotheticalAccountLiquidityInternal(\r\n    address account,\r\n    CToken cTokenModify,\r\n    uint redeemTokens,\r\n    uint borrowAmount) internal view returns (Error, uint, uint) {\r\n\r\n    AccountLiquidityLocalVars memory vars;\r\n    // Holds all our calculation results\r\n    uint oErr;\r\n\r\n    // For each asset the account is in\r\n    CToken[] memory assets = accountAssets[account];\r\n    for (uint i = 0; i < assets.length; i++) {\r\n      CToken asset = assets[i];\r\n\r\n      // Read the balances and exchange rate from the cToken\r\n      (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\r\n      if (oErr != 0) {// semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\r\n        return (Error.SNAPSHOT_ERROR, 0, 0);\r\n      }\r\n      vars.collateralFactor = Exp({mantissa : markets[address(asset)].collateralFactorMantissa});\r\n      vars.exchangeRate = Exp({mantissa : vars.exchangeRateMantissa});\r\n\r\n      // Get the normalized price of the asset\r\n      vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\r\n      if (vars.oraclePriceMantissa == 0) {\r\n        return (Error.PRICE_ERROR, 0, 0);\r\n      }\r\n      vars.oraclePrice = Exp({mantissa : vars.oraclePriceMantissa});\r\n\r\n      // Pre-compute a conversion factor from tokens -> ether (normalized price value)\r\n      vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\r\n\r\n      // sumCollateral += tokensToDenom * cTokenBalance\r\n      vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\r\n\r\n      // sumBorrowPlusEffects += oraclePrice * borrowBalance\r\n      vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\r\n\r\n      // Calculate effects of interacting with cTokenModify\r\n      if (asset == cTokenModify) {\r\n        // redeem effect\r\n        // sumBorrowPlusEffects += tokensToDenom * redeemTokens\r\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\r\n\r\n        // borrow effect\r\n        // sumBorrowPlusEffects += oraclePrice * borrowAmount\r\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\r\n      }\r\n    }\r\n\r\n    // These are safe, as the underflow condition is checked first\r\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\r\n      return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\r\n    } else {\r\n      return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\r\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\r\n     * @param cTokenBorrowed The address of the borrowed cToken\r\n     * @param cTokenCollateral The address of the collateral cToken\r\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\r\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\r\n     */\r\n  function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) override external view returns (uint, uint) {\r\n    /* Read oracle prices for borrowed and collateral markets */\r\n    uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\r\n    uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));\r\n    if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\r\n      return (uint(Error.PRICE_ERROR), 0);\r\n    }\r\n\r\n    /*\r\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\r\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\r\n     *  seizeTokens = seizeAmount / exchangeRate\r\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\r\n     */\r\n    uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored();\r\n    // Note: reverts on error\r\n    uint seizeTokens;\r\n    Exp memory numerator;\r\n    Exp memory denominator;\r\n    Exp memory ratio;\r\n\r\n    numerator = mul_(Exp({mantissa : liquidationIncentiveMantissa}), Exp({mantissa : priceBorrowedMantissa}));\r\n    denominator = mul_(Exp({mantissa : priceCollateralMantissa}), Exp({mantissa : exchangeRateMantissa}));\r\n    ratio = div_(numerator, denominator);\r\n\r\n    seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\r\n\r\n    return (uint(Error.NO_ERROR), seizeTokens);\r\n  }\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  /**\r\n    * @notice Sets a new price oracle for the comptroller\r\n      * @dev Admin function to set a new price oracle\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\r\n    }\r\n\r\n    // Track the old oracle for the comptroller\r\n    PriceOracle oldOracle = oracle;\r\n\r\n    // Set comptroller's oracle to newOracle\r\n    oracle = newOracle;\r\n\r\n    // Emit NewPriceOracle(oldOracle, newOracle)\r\n    emit NewPriceOracle(oldOracle, newOracle);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets the closeFactor used when liquidating borrows\r\n      * @dev Admin function to set closeFactor\r\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\r\n      * @return uint 0=success, otherwise a failure\r\n      */\r\n  function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\r\n    // Check caller is admin\r\n    require(msg.sender == admin, \"only admin can set close factor\");\r\n\r\n    uint oldCloseFactorMantissa = closeFactorMantissa;\r\n    closeFactorMantissa = newCloseFactorMantissa;\r\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets the collateralFactor for a market\r\n      * @dev Admin function to set per-market collateralFactor\r\n      * @param cToken The market to set the factor on\r\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\r\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n      */\r\n  function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\r\n    }\r\n\r\n    // Verify market is listed\r\n    Market storage market = markets[address(cToken)];\r\n    if (!market.isListed) {\r\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\r\n    }\r\n\r\n    Exp memory newCollateralFactorExp = Exp({mantissa : newCollateralFactorMantissa});\r\n\r\n    // Check collateral factor <= 0.9\r\n    Exp memory highLimit = Exp({mantissa : collateralFactorMaxMantissa});\r\n    if (lessThanExp(highLimit, newCollateralFactorExp)) {\r\n      return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\r\n    }\r\n\r\n    // If collateral factor != 0, fail if price == 0\r\n    if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\r\n      return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\r\n    }\r\n\r\n    // Set market's collateral factor to new collateral factor, remember old value\r\n    uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\r\n    market.collateralFactorMantissa = newCollateralFactorMantissa;\r\n\r\n    // Emit event with asset, old collateral factor, and new collateral factor\r\n    emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets liquidationIncentive\r\n      * @dev Admin function to set liquidationIncentive\r\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\r\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n      */\r\n  function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\r\n    }\r\n\r\n    // Save current value for use in log\r\n    uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\r\n\r\n    // Set liquidation incentive to new incentive\r\n    liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\r\n\r\n    // Emit event with old incentive, new incentive\r\n    emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n    * @notice Add the market to the markets mapping and set it as listed\r\n      * @dev Admin function to set isListed and add support for the market\r\n      * @param cToken The address of the market (token) to list\r\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n      */\r\n  function _supportMarket(CToken cToken) external returns (uint) {\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\r\n    }\r\n\r\n    if (markets[address(cToken)].isListed) {\r\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\r\n    }\r\n\r\n    cToken.isCToken();\r\n    // Sanity check to make sure its really a CToken\r\n\r\n    // Note that isComped is not in active use anymore\r\n    Market storage newMarket = markets[address(cToken)];\r\n    newMarket.isListed = true;\r\n    newMarket.isComped = false;\r\n    newMarket.collateralFactorMantissa = 0;\r\n\r\n    _addMarketInternal(address(cToken));\r\n    _initializeMarket(address(cToken));\r\n\r\n    emit MarketListed(cToken);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  function _addMarketInternal(address cToken) internal {\r\n    for (uint i = 0; i < allMarkets.length; i ++) {\r\n      require(allMarkets[i] != CToken(cToken), \"market already added\");\r\n    }\r\n    allMarkets.push(CToken(cToken));\r\n  }\r\n\r\n  function _initializeMarket(address cToken) internal {\r\n    uint32 blockNumber = safe32(getBlockNumber(), \"block number exceeds 32 bits\");\r\n\r\n    CompMarketState storage supplyState = compSupplyState[cToken];\r\n    CompMarketState storage borrowState = compBorrowState[cToken];\r\n\r\n    /*\r\n     * Update market state indices\r\n     */\r\n    if (supplyState.index == 0) {\r\n      // Initialize supply state index with default value\r\n      supplyState.index = compInitialIndex;\r\n    }\r\n\r\n    if (borrowState.index == 0) {\r\n      // Initialize borrow state index with default value\r\n      borrowState.index = compInitialIndex;\r\n    }\r\n\r\n    /*\r\n     * Update market state block numbers\r\n     */\r\n    supplyState.block = borrowState.block = blockNumber;\r\n  }\r\n\r\n\r\n  /**\r\n    * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\r\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\r\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\r\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\r\n      */\r\n  function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\r\n    require(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\");\r\n\r\n    uint numMarkets = cTokens.length;\r\n    uint numBorrowCaps = newBorrowCaps.length;\r\n\r\n    require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\r\n\r\n    for (uint i = 0; i < numMarkets; i++) {\r\n      borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\r\n      emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Admin function to change the Borrow Cap Guardian\r\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\r\n     */\r\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\r\n    require(msg.sender == admin, \"only admin can set borrow cap guardian\");\r\n\r\n    // Save current value for inclusion in log\r\n    address oldBorrowCapGuardian = borrowCapGuardian;\r\n\r\n    // Store borrowCapGuardian with value newBorrowCapGuardian\r\n    borrowCapGuardian = newBorrowCapGuardian;\r\n\r\n    // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\r\n    emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\r\n  }\r\n\r\n  /**\r\n   * @notice Admin function to change the Pause Guardian\r\n     * @param newPauseGuardian The address of the new Pause Guardian\r\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n     */\r\n  function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\r\n    }\r\n\r\n    // Save current value for inclusion in log\r\n    address oldPauseGuardian = pauseGuardian;\r\n\r\n    // Store pauseGuardian with value newPauseGuardian\r\n    pauseGuardian = newPauseGuardian;\r\n\r\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\r\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  function _setMintPaused(CToken cToken, bool state) public returns (bool) {\r\n    require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\r\n    require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n    require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n    mintGuardianPaused[address(cToken)] = state;\r\n    emit ActionPaused(cToken, \"Mint\", state);\r\n    return state;\r\n  }\r\n\r\n  function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\r\n    require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\r\n    require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n    require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n    borrowGuardianPaused[address(cToken)] = state;\r\n    emit ActionPaused(cToken, \"Borrow\", state);\r\n    return state;\r\n  }\r\n\r\n  function _setTransferPaused(bool state) public returns (bool) {\r\n    require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n    require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n    transferGuardianPaused = state;\r\n    emit ActionPaused(\"Transfer\", state);\r\n    return state;\r\n  }\r\n\r\n  function _setSeizePaused(bool state) public returns (bool) {\r\n    require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n    require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n    seizeGuardianPaused = state;\r\n    emit ActionPaused(\"Seize\", state);\r\n    return state;\r\n  }\r\n\r\n  function _become(Unitroller unitroller) public {\r\n    require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\r\n    require(unitroller._acceptImplementation() == 0, \"change not authorized\");\r\n  }\r\n\r\n  /// @notice Delete this function after proposal 65 is executed\r\n  function fixBadAccruals(address[] calldata affectedUsers, uint[] calldata amounts) external {\r\n    require(msg.sender == admin, \"Only admin can call this function\");\r\n    // Only the timelock can call this function\r\n    require(!proposal65FixExecuted, \"Already executed this one-off function\");\r\n    // Require that this function is only called once\r\n    require(affectedUsers.length == amounts.length, \"Invalid input\");\r\n\r\n    // Loop variables\r\n    address user;\r\n    uint currentAccrual;\r\n    uint amountToSubtract;\r\n    uint newAccrual;\r\n\r\n    // Iterate through all affected users\r\n    for (uint i = 0; i < affectedUsers.length; ++i) {\r\n      user = affectedUsers[i];\r\n      currentAccrual = compAccrued[user];\r\n\r\n      amountToSubtract = amounts[i];\r\n\r\n      // The case where the user has claimed and received an incorrect amount of COMP.\r\n      // The user has less currently accrued than the amount they incorrectly received.\r\n      if (amountToSubtract > currentAccrual) {\r\n        // Amount of COMP the user owes the protocol\r\n        uint accountReceivable = amountToSubtract - currentAccrual;\r\n        // Underflow safe since amountToSubtract > currentAccrual\r\n\r\n        uint oldReceivable = compReceivable[user];\r\n        uint newReceivable = add_(oldReceivable, accountReceivable);\r\n\r\n        // Accounting: record the COMP debt for the user\r\n        compReceivable[user] = newReceivable;\r\n\r\n        emit CompReceivableUpdated(user, oldReceivable, newReceivable);\r\n\r\n        amountToSubtract = currentAccrual;\r\n      }\r\n\r\n      if (amountToSubtract > 0) {\r\n        // Subtract the bad accrual amount from what they have accrued.\r\n        // Users will keep whatever they have correctly accrued.\r\n        compAccrued[user] = newAccrual = sub_(currentAccrual, amountToSubtract);\r\n\r\n        emit CompAccruedAdjusted(user, currentAccrual, newAccrual);\r\n      }\r\n    }\r\n\r\n    proposal65FixExecuted = true;\r\n    // Makes it so that this function cannot be called again\r\n  }\r\n\r\n  /**\r\n   * @notice Checks caller is admin, or this contract is becoming the new implementation\r\n     */\r\n  function adminOrInitializing() internal view returns (bool) {\r\n    return msg.sender == admin || msg.sender == comptrollerImplementation;\r\n  }\r\n\r\n  /*** Comp Distribution ***/\r\n\r\n  /**\r\n   * @notice Set COMP speed for a single market\r\n     * @param cToken The market whose COMP speed to update\r\n     * @param supplySpeed New supply-side COMP speed for market\r\n     * @param borrowSpeed New borrow-side COMP speed for market\r\n     */\r\n  function setCompSpeedInternal(CToken cToken, uint supplySpeed, uint borrowSpeed) internal {\r\n    Market storage market = markets[address(cToken)];\r\n    require(market.isListed, \"comp market is not listed\");\r\n\r\n    if (compSupplySpeeds[address(cToken)] != supplySpeed) {\r\n      // Supply speed updated so let's update supply state to ensure that\r\n      //  1. COMP accrued properly for the old speed, and\r\n      //  2. COMP accrued at the new speed starts after this block.\r\n      updateCompSupplyIndex(address(cToken));\r\n\r\n      // Update speed and emit event\r\n      compSupplySpeeds[address(cToken)] = supplySpeed;\r\n      emit CompSupplySpeedUpdated(cToken, supplySpeed);\r\n    }\r\n\r\n    if (compBorrowSpeeds[address(cToken)] != borrowSpeed) {\r\n      // Borrow speed updated so let's update borrow state to ensure that\r\n      //  1. COMP accrued properly for the old speed, and\r\n      //  2. COMP accrued at the new speed starts after this block.\r\n      Exp memory borrowIndex = Exp({mantissa : cToken.borrowIndex()});\r\n      updateCompBorrowIndex(address(cToken), borrowIndex);\r\n\r\n      // Update speed and emit event\r\n      compBorrowSpeeds[address(cToken)] = borrowSpeed;\r\n      emit CompBorrowSpeedUpdated(cToken, borrowSpeed);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Accrue COMP to the market by updating the supply index\r\n     * @param cToken The market whose supply index to update\r\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\r\n     */\r\n  function updateCompSupplyIndex(address cToken) internal {\r\n    CompMarketState storage supplyState = compSupplyState[cToken];\r\n    uint supplySpeed = compSupplySpeeds[cToken];\r\n    uint32 blockNumber = safe32(getBlockNumber(), \"block number exceeds 32 bits\");\r\n    uint deltaBlocks = sub_(uint(blockNumber), uint(supplyState.block));\r\n    if (deltaBlocks > 0 && supplySpeed > 0) {\r\n      uint supplyTokens = CToken(cToken).totalSupply();\r\n      uint compAccrued = mul_(deltaBlocks, supplySpeed);\r\n      Double memory ratio = supplyTokens > 0 ? fraction(compAccrued, supplyTokens) : Double({mantissa : 0});\r\n      supplyState.index = safe224(add_(Double({mantissa : supplyState.index}), ratio).mantissa, \"new index exceeds 224 bits\");\r\n      supplyState.block = blockNumber;\r\n    } else if (deltaBlocks > 0) {\r\n      supplyState.block = blockNumber;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Accrue COMP to the market by updating the borrow index\r\n     * @param cToken The market whose borrow index to update\r\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\r\n     */\r\n  function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) internal {\r\n    CompMarketState storage borrowState = compBorrowState[cToken];\r\n    uint borrowSpeed = compBorrowSpeeds[cToken];\r\n    uint32 blockNumber = safe32(getBlockNumber(), \"block number exceeds 32 bits\");\r\n    uint deltaBlocks = sub_(uint(blockNumber), uint(borrowState.block));\r\n    if (deltaBlocks > 0 && borrowSpeed > 0) {\r\n      uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\r\n      uint compAccrued = mul_(deltaBlocks, borrowSpeed);\r\n      Double memory ratio = borrowAmount > 0 ? fraction(compAccrued, borrowAmount) : Double({mantissa : 0});\r\n      borrowState.index = safe224(add_(Double({mantissa : borrowState.index}), ratio).mantissa, \"new index exceeds 224 bits\");\r\n      borrowState.block = blockNumber;\r\n    } else if (deltaBlocks > 0) {\r\n      borrowState.block = blockNumber;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\r\n     * @param cToken The market in which the supplier is interacting\r\n     * @param supplier The address of the supplier to distribute COMP to\r\n     */\r\n  function distributeSupplierComp(address cToken, address supplier) internal {\r\n    // TODO: Don't distribute supplier COMP if the user is not in the supplier market.\r\n    // This check should be as gas efficient as possible as distributeSupplierComp is called in many places.\r\n    // - We really don't want to call an external contract as that's quite expensive.\r\n\r\n    CompMarketState storage supplyState = compSupplyState[cToken];\r\n    uint supplyIndex = supplyState.index;\r\n    uint supplierIndex = compSupplierIndex[cToken][supplier];\r\n\r\n    // Update supplier's index to the current index since we are distributing accrued COMP\r\n    compSupplierIndex[cToken][supplier] = supplyIndex;\r\n\r\n    if (supplierIndex == 0 && supplyIndex >= compInitialIndex) {\r\n      // Covers the case where users supplied tokens before the market's supply state index was set.\r\n      // Rewards the user with COMP accrued from the start of when supplier rewards were first\r\n      // set for the market.\r\n      supplierIndex = compInitialIndex;\r\n    }\r\n\r\n    // Calculate change in the cumulative sum of the COMP per cToken accrued\r\n    Double memory deltaIndex = Double({mantissa : sub_(supplyIndex, supplierIndex)});\r\n\r\n    uint supplierTokens = CToken(cToken).balanceOf(supplier);\r\n\r\n    // Calculate COMP accrued: cTokenAmount * accruedPerCToken\r\n    uint supplierDelta = mul_(supplierTokens, deltaIndex);\r\n\r\n    uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);\r\n    compAccrued[supplier] = supplierAccrued;\r\n\r\n    emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\r\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\r\n     * @param cToken The market in which the borrower is interacting\r\n     * @param borrower The address of the borrower to distribute COMP to\r\n     */\r\n  function distributeBorrowerComp(address cToken, address borrower, Exp memory marketBorrowIndex) internal {\r\n    // TODO: Don't distribute supplier COMP if the user is not in the borrower market.\r\n    // This check should be as gas efficient as possible as distributeBorrowerComp is called in many places.\r\n    // - We really don't want to call an external contract as that's quite expensive.\r\n\r\n    CompMarketState storage borrowState = compBorrowState[cToken];\r\n    uint borrowIndex = borrowState.index;\r\n    uint borrowerIndex = compBorrowerIndex[cToken][borrower];\r\n\r\n    // Update borrowers's index to the current index since we are distributing accrued COMP\r\n    compBorrowerIndex[cToken][borrower] = borrowIndex;\r\n\r\n    if (borrowerIndex == 0 && borrowIndex >= compInitialIndex) {\r\n      // Covers the case where users borrowed tokens before the market's borrow state index was set.\r\n      // Rewards the user with COMP accrued from the start of when borrower rewards were first\r\n      // set for the market.\r\n      borrowerIndex = compInitialIndex;\r\n    }\r\n\r\n    // Calculate change in the cumulative sum of the COMP per borrowed unit accrued\r\n    Double memory deltaIndex = Double({mantissa : sub_(borrowIndex, borrowerIndex)});\r\n\r\n    uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\r\n\r\n    // Calculate COMP accrued: cTokenAmount * accruedPerBorrowedUnit\r\n    uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\r\n\r\n    uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\r\n    compAccrued[borrower] = borrowerAccrued;\r\n\r\n    emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate additional accrued COMP for a contributor since last accrual\r\n     * @param contributor The address to calculate contributor rewards for\r\n     */\r\n  function updateContributorRewards(address contributor) public {\r\n    uint compSpeed = compContributorSpeeds[contributor];\r\n    uint blockNumber = getBlockNumber();\r\n    uint deltaBlocks = sub_(blockNumber, lastContributorBlock[contributor]);\r\n    if (deltaBlocks > 0 && compSpeed > 0) {\r\n      uint newAccrued = mul_(deltaBlocks, compSpeed);\r\n      uint contributorAccrued = add_(compAccrued[contributor], newAccrued);\r\n\r\n      compAccrued[contributor] = contributorAccrued;\r\n      lastContributorBlock[contributor] = blockNumber;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Claim all the comp accrued by holder in all markets\r\n     * @param holder The address to claim COMP for\r\n     */\r\n  function claimComp(address holder) public {\r\n    return claimComp(holder, allMarkets);\r\n  }\r\n\r\n  /**\r\n   * @notice Claim all the comp accrued by holder in the specified markets\r\n     * @param holder The address to claim COMP for\r\n     * @param cTokens The list of markets to claim COMP in\r\n     */\r\n  function claimComp(address holder, CToken[] memory cTokens) public {\r\n    address[] memory holders = new address[](1);\r\n    holders[0] = holder;\r\n    claimComp(holders, cTokens, true, true);\r\n  }\r\n\r\n  /**\r\n   * @notice Claim all comp accrued by the holders\r\n     * @param holders The addresses to claim COMP for\r\n     * @param cTokens The list of markets to claim COMP in\r\n     * @param borrowers Whether or not to claim COMP earned by borrowing\r\n     * @param suppliers Whether or not to claim COMP earned by supplying\r\n     */\r\n  function claimComp(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {\r\n    for (uint i = 0; i < cTokens.length; i++) {\r\n      CToken cToken = cTokens[i];\r\n      require(markets[address(cToken)].isListed, \"market must be listed\");\r\n      if (borrowers == true) {\r\n        Exp memory borrowIndex = Exp({mantissa : cToken.borrowIndex()});\r\n        updateCompBorrowIndex(address(cToken), borrowIndex);\r\n        for (uint j = 0; j < holders.length; j++) {\r\n          distributeBorrowerComp(address(cToken), holders[j], borrowIndex);\r\n        }\r\n      }\r\n      if (suppliers == true) {\r\n        updateCompSupplyIndex(address(cToken));\r\n        for (uint j = 0; j < holders.length; j++) {\r\n          distributeSupplierComp(address(cToken), holders[j]);\r\n        }\r\n      }\r\n    }\r\n    for (uint j = 0; j < holders.length; j++) {\r\n      compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer COMP to the user\r\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\r\n     * @param user The address of the user to transfer COMP to\r\n     * @param amount The amount of COMP to (possibly) transfer\r\n     * @return The amount of COMP which was NOT transferred to the user\r\n     */\r\n  function grantCompInternal(address user, uint amount) internal returns (uint) {\r\n    Comp comp = Comp(getCompAddress());\r\n    uint compRemaining = comp.balanceOf(address(this));\r\n    if (amount > 0 && amount <= compRemaining) {\r\n      comp.transfer(user, amount);\r\n      return 0;\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  /*** Comp Distribution Admin ***/\r\n\r\n  /**\r\n   * @notice Transfer COMP to the recipient\r\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\r\n     * @param recipient The address of the recipient to transfer COMP to\r\n     * @param amount The amount of COMP to (possibly) transfer\r\n     */\r\n  function _grantComp(address recipient, uint amount) public {\r\n    require(adminOrInitializing(), \"only admin can grant comp\");\r\n    uint amountLeft = grantCompInternal(recipient, amount);\r\n    require(amountLeft == 0, \"insufficient comp for grant\");\r\n    emit CompGranted(recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Set COMP borrow and supply speeds for the specified markets.\r\n     * @param cTokens The markets whose COMP speed to update.\r\n     * @param supplySpeeds New supply-side COMP speed for the corresponding market.\r\n     * @param borrowSpeeds New borrow-side COMP speed for the corresponding market.\r\n     */\r\n  function _setCompSpeeds(CToken[] memory cTokens, uint[] memory supplySpeeds, uint[] memory borrowSpeeds) public {\r\n    require(adminOrInitializing(), \"only admin can set comp speed\");\r\n\r\n    uint numTokens = cTokens.length;\r\n    require(numTokens == supplySpeeds.length && numTokens == borrowSpeeds.length, \"Comptroller::_setCompSpeeds invalid input\");\r\n\r\n    for (uint i = 0; i < numTokens; ++i) {\r\n      setCompSpeedInternal(cTokens[i], supplySpeeds[i], borrowSpeeds[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Set COMP speed for a single contributor\r\n     * @param contributor The contributor whose COMP speed to update\r\n     * @param compSpeed New COMP speed for contributor\r\n     */\r\n  function _setContributorCompSpeed(address contributor, uint compSpeed) public {\r\n    require(adminOrInitializing(), \"only admin can set comp speed\");\r\n\r\n    // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\r\n    updateContributorRewards(contributor);\r\n    if (compSpeed == 0) {\r\n      // release storage\r\n      delete lastContributorBlock[contributor];\r\n    } else {\r\n      lastContributorBlock[contributor] = getBlockNumber();\r\n    }\r\n    compContributorSpeeds[contributor] = compSpeed;\r\n\r\n    emit ContributorCompSpeedUpdated(contributor, compSpeed);\r\n  }\r\n\r\n  /**\r\n   * @notice Return all of the markets\r\n     * @dev The automatic getter may be used to access an individual market.\r\n     * @return The list of market addresses\r\n     */\r\n  function getAllMarkets() public view returns (CToken[] memory) {\r\n    return allMarkets;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns true if the given cToken market has been deprecated\r\n     * @dev All borrows in a deprecated cToken market can be immediately liquidated\r\n     * @param cToken The market to check if deprecated\r\n     */\r\n  function isDeprecated(CToken cToken) public view returns (bool) {\r\n    return\r\n    markets[address(cToken)].collateralFactorMantissa == 0 &&\r\n    borrowGuardianPaused[address(cToken)] == true &&\r\n    cToken.reserveFactorMantissa() == 1e18\r\n    ;\r\n  }\r\n\r\n  function getBlockNumber() virtual public view returns (uint) {\r\n    return block.number;\r\n  }\r\n\r\n  /**\r\n   * @notice Return the address of the COMP token\r\n     * @return The address of COMP\r\n     */\r\n  function getCompAddress() virtual public view returns (address) {\r\n    return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/ComptrollerG7.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\nimport \"./ErrorReporter.sol\";\r\nimport \"./PriceOracle.sol\";\r\nimport \"./ComptrollerInterface.sol\";\r\nimport \"./ComptrollerStorage.sol\";\r\nimport \"./Unitroller.sol\";\r\nimport \"./Governance/Comp.sol\";\r\n\r\n/**\r\n * @title Compound's Comptroller Contract\r\n * @author Compound\r\n */\r\ncontract ComptrollerG7 is ComptrollerV5Storage, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {\r\n  /// @notice Emitted when an admin supports a market\r\n  event MarketListed(CToken cToken);\r\n\r\n  /// @notice Emitted when an account enters a market\r\n  event MarketEntered(CToken cToken, address account);\r\n\r\n  /// @notice Emitted when an account exits a market\r\n  event MarketExited(CToken cToken, address account);\r\n\r\n  /// @notice Emitted when close factor is changed by admin\r\n  event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\r\n\r\n  /// @notice Emitted when a collateral factor is changed by admin\r\n  event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\r\n\r\n  /// @notice Emitted when liquidation incentive is changed by admin\r\n  event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\r\n\r\n  /// @notice Emitted when price oracle is changed\r\n  event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\r\n\r\n  /// @notice Emitted when pause guardian is changed\r\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\r\n\r\n  /// @notice Emitted when an action is paused globally\r\n  event ActionPaused(string action, bool pauseState);\r\n\r\n  /// @notice Emitted when an action is paused on a market\r\n  event ActionPaused(CToken cToken, string action, bool pauseState);\r\n\r\n  /// @notice Emitted when a new COMP speed is calculated for a market\r\n  event CompSpeedUpdated(CToken indexed cToken, uint newSpeed);\r\n\r\n  /// @notice Emitted when a new COMP speed is set for a contributor\r\n  event ContributorCompSpeedUpdated(address indexed contributor, uint newSpeed);\r\n\r\n  /// @notice Emitted when COMP is distributed to a supplier\r\n  event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);\r\n\r\n  /// @notice Emitted when COMP is distributed to a borrower\r\n  event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);\r\n\r\n  /// @notice Emitted when borrow cap for a cToken is changed\r\n  event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);\r\n\r\n  /// @notice Emitted when borrow cap guardian is changed\r\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\r\n\r\n  /// @notice Emitted when COMP is granted by admin\r\n  event CompGranted(address recipient, uint amount);\r\n\r\n  /// @notice The initial COMP index for a market\r\n  uint224 public constant compInitialIndex = 1e36;\r\n\r\n  // closeFactorMantissa must be strictly greater than this value\r\n  uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\r\n\r\n  // closeFactorMantissa must not exceed this value\r\n  uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n  // No collateralFactorMantissa may exceed this value\r\n  uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n  constructor() {\r\n    admin = msg.sender;\r\n  }\r\n\r\n  /*** Assets You Are In ***/\r\n\r\n  /**\r\n   * @notice Returns the assets an account has entered\r\n     * @param account The address of the account to pull assets for\r\n     * @return A dynamic list with the assets the account has entered\r\n     */\r\n  function getAssetsIn(address account) external view returns (CToken[] memory) {\r\n    CToken[] memory assetsIn = accountAssets[account];\r\n\r\n    return assetsIn;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns whether the given account is entered in the given asset\r\n     * @param account The address of the account to check\r\n     * @param cToken The cToken to check\r\n     * @return True if the account is in the asset, otherwise false.\r\n     */\r\n  function checkMembership(address account, CToken cToken) external view returns (bool) {\r\n    return markets[address(cToken)].accountMembership[account];\r\n  }\r\n\r\n  /**\r\n   * @notice Add assets to be included in account liquidity calculation\r\n     * @param cTokens The list of addresses of the cToken markets to be enabled\r\n     * @return Success indicator for whether each corresponding market was entered\r\n     */\r\n  function enterMarkets(address[] memory cTokens) override public returns (uint[] memory) {\r\n    uint len = cTokens.length;\r\n\r\n    uint[] memory results = new uint[](len);\r\n    for (uint i = 0; i < len; i++) {\r\n      CToken cToken = CToken(cTokens[i]);\r\n\r\n      results[i] = uint(addToMarketInternal(cToken, msg.sender));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\r\n     * @param cToken The market to enter\r\n     * @param borrower The address of the account to modify\r\n     * @return Success indicator for whether the market was entered\r\n     */\r\n  function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\r\n    Market storage marketToJoin = markets[address(cToken)];\r\n\r\n    if (!marketToJoin.isListed) {\r\n      // market is not listed, cannot join\r\n      return Error.MARKET_NOT_LISTED;\r\n    }\r\n\r\n    if (marketToJoin.accountMembership[borrower] == true) {\r\n      // already joined\r\n      return Error.NO_ERROR;\r\n    }\r\n\r\n    // survived the gauntlet, add to list\r\n    // NOTE: we store these somewhat redundantly as a significant optimization\r\n    //  this avoids having to iterate through the list for the most common use cases\r\n    //  that is, only when we need to perform liquidity checks\r\n    //  and not whenever we want to check if an account is in a particular market\r\n    marketToJoin.accountMembership[borrower] = true;\r\n    accountAssets[borrower].push(cToken);\r\n\r\n    emit MarketEntered(cToken, borrower);\r\n\r\n    return Error.NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Removes asset from sender's account liquidity calculation\r\n     * @dev Sender must not have an outstanding borrow balance in the asset,\r\n     *  or be providing necessary collateral for an outstanding borrow.\r\n     * @param cTokenAddress The address of the asset to be removed\r\n     * @return Whether or not the account successfully exited the market\r\n     */\r\n  function exitMarket(address cTokenAddress) override external returns (uint) {\r\n    CToken cToken = CToken(cTokenAddress);\r\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\r\n    (uint oErr, uint tokensHeld, uint amountOwed,) = cToken.getAccountSnapshot(msg.sender);\r\n    require(oErr == 0, \"exitMarket: getAccountSnapshot failed\");\r\n    // semi-opaque error code\r\n\r\n    /* Fail if the sender has a borrow balance */\r\n    if (amountOwed != 0) {\r\n      return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\r\n    }\r\n\r\n    /* Fail if the sender is not permitted to redeem all of their tokens */\r\n    uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\r\n    if (allowed != 0) {\r\n      return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\r\n    }\r\n\r\n    Market storage marketToExit = markets[address(cToken)];\r\n\r\n    /* Return true if the sender is not already ‘in’ the market */\r\n    if (!marketToExit.accountMembership[msg.sender]) {\r\n      return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /* Set cToken account membership to false */\r\n    delete marketToExit.accountMembership[msg.sender];\r\n\r\n    /* Delete cToken from the account’s list of assets */\r\n    // load into memory for faster iteration\r\n    CToken[] memory userAssetList = accountAssets[msg.sender];\r\n    uint len = userAssetList.length;\r\n    uint assetIndex = len;\r\n    for (uint i = 0; i < len; i++) {\r\n      if (userAssetList[i] == cToken) {\r\n        assetIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // We *must* have found the asset in the list or our redundant data structure is broken\r\n    assert(assetIndex < len);\r\n\r\n    // copy last item in list to location of item to be removed, reduce length by 1\r\n    CToken[] storage storedList = accountAssets[msg.sender];\r\n    storedList[assetIndex] = storedList[storedList.length - 1];\r\n    storedList.pop();\r\n\r\n    emit MarketExited(cToken, msg.sender);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /*** Policy Hooks ***/\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to mint tokens in the given market\r\n     * @param cToken The market to verify the mint against\r\n     * @param minter The account which would get the minted tokens\r\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\r\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function mintAllowed(address cToken, address minter, uint mintAmount) override external returns (uint) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!mintGuardianPaused[cToken], \"mint is paused\");\r\n\r\n    // Shh - currently unused\r\n    minter;\r\n    mintAmount;\r\n\r\n    if (!markets[cToken].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    updateCompSupplyIndex(cToken);\r\n    distributeSupplierComp(cToken, minter);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates mint and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being minted\r\n     * @param minter The address minting the tokens\r\n     * @param actualMintAmount The amount of the underlying asset being minted\r\n     * @param mintTokens The number of tokens being minted\r\n     */\r\n  function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) override external {\r\n    // Shh - currently unused\r\n    cToken;\r\n    minter;\r\n    actualMintAmount;\r\n    mintTokens;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\r\n     * @param cToken The market to verify the redeem against\r\n     * @param redeemer The account which would redeem the tokens\r\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\r\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function redeemAllowed(address cToken, address redeemer, uint redeemTokens) override external returns (uint) {\r\n    uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\r\n    if (allowed != uint(Error.NO_ERROR)) {\r\n      return allowed;\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    updateCompSupplyIndex(cToken);\r\n    distributeSupplierComp(cToken, redeemer);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\r\n    if (!markets[cToken].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\r\n    if (!markets[cToken].accountMembership[redeemer]) {\r\n      return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\r\n    (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0);\r\n    if (err != Error.NO_ERROR) {\r\n      return uint(err);\r\n    }\r\n    if (shortfall > 0) {\r\n      return uint(Error.INSUFFICIENT_LIQUIDITY);\r\n    }\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates redeem and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being redeemed\r\n     * @param redeemer The address redeeming the tokens\r\n     * @param redeemAmount The amount of the underlying asset being redeemed\r\n     * @param redeemTokens The number of tokens being redeemed\r\n     */\r\n  function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) override external pure {\r\n    // Shh - currently unused\r\n    cToken;\r\n    redeemer;\r\n\r\n    // Require tokens is zero or amount is also zero\r\n    if (redeemTokens == 0 && redeemAmount > 0) {\r\n      revert(\"redeemTokens zero\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\r\n     * @param cToken The market to verify the borrow against\r\n     * @param borrower The account which would borrow the asset\r\n     * @param borrowAmount The amount of underlying the account would borrow\r\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function borrowAllowed(address cToken, address borrower, uint borrowAmount) override external returns (uint) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!borrowGuardianPaused[cToken], \"borrow is paused\");\r\n\r\n    if (!markets[cToken].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    if (!markets[cToken].accountMembership[borrower]) {\r\n      // only cTokens may call borrowAllowed if borrower not in market\r\n      require(msg.sender == cToken, \"sender must be cToken\");\r\n\r\n      // attempt to add borrower to the market\r\n      Error err1 = addToMarketInternal(CToken(msg.sender), borrower);\r\n      if (err1 != Error.NO_ERROR) {\r\n        return uint(err1);\r\n      }\r\n\r\n      // it should be impossible to break the important invariant\r\n      assert(markets[cToken].accountMembership[borrower]);\r\n    }\r\n\r\n    if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\r\n      return uint(Error.PRICE_ERROR);\r\n    }\r\n\r\n\r\n    uint borrowCap = borrowCaps[cToken];\r\n    // Borrow cap of 0 corresponds to unlimited borrowing\r\n    if (borrowCap != 0) {\r\n      uint totalBorrows = CToken(cToken).totalBorrows();\r\n      uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\r\n      require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\r\n    }\r\n\r\n    (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\r\n    if (err != Error.NO_ERROR) {\r\n      return uint(err);\r\n    }\r\n    if (shortfall > 0) {\r\n      return uint(Error.INSUFFICIENT_LIQUIDITY);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    Exp memory borrowIndex = Exp({mantissa : CToken(cToken).borrowIndex()});\r\n    updateCompBorrowIndex(cToken, borrowIndex);\r\n    distributeBorrowerComp(cToken, borrower, borrowIndex);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates borrow and reverts on rejection. May emit logs.\r\n     * @param cToken Asset whose underlying is being borrowed\r\n     * @param borrower The address borrowing the underlying\r\n     * @param borrowAmount The amount of the underlying asset requested to borrow\r\n     */\r\n  function borrowVerify(address cToken, address borrower, uint borrowAmount) override external {\r\n    // Shh - currently unused\r\n    cToken;\r\n    borrower;\r\n    borrowAmount;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\r\n     * @param cToken The market to verify the repay against\r\n     * @param payer The account which would repay the asset\r\n     * @param borrower The account which would borrowed the asset\r\n     * @param repayAmount The amount of the underlying asset the account would repay\r\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function repayBorrowAllowed(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint repayAmount) override external returns (uint) {\r\n    // Shh - currently unused\r\n    payer;\r\n    borrower;\r\n    repayAmount;\r\n\r\n    if (!markets[cToken].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    Exp memory borrowIndex = Exp({mantissa : CToken(cToken).borrowIndex()});\r\n    updateCompBorrowIndex(cToken, borrowIndex);\r\n    distributeBorrowerComp(cToken, borrower, borrowIndex);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates repayBorrow and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being repaid\r\n     * @param payer The address repaying the borrow\r\n     * @param borrower The address of the borrower\r\n     * @param actualRepayAmount The amount of underlying being repaid\r\n     */\r\n  function repayBorrowVerify(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint actualRepayAmount,\r\n    uint borrowerIndex) override external {\r\n    // Shh - currently unused\r\n    cToken;\r\n    payer;\r\n    borrower;\r\n    actualRepayAmount;\r\n    borrowerIndex;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the liquidation should be allowed to occur\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param repayAmount The amount of underlying being repaid\r\n     */\r\n  function liquidateBorrowAllowed(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint repayAmount) override external view returns (uint) {\r\n    // Shh - currently unused\r\n    liquidator;\r\n\r\n    if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    /* The borrower must have shortfall in order to be liquidatable */\r\n    (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\r\n    if (err != Error.NO_ERROR) {\r\n      return uint(err);\r\n    }\r\n    if (shortfall == 0) {\r\n      return uint(Error.INSUFFICIENT_SHORTFALL);\r\n    }\r\n\r\n    /* The liquidator may not repay more than what is allowed by the closeFactor */\r\n    uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\r\n    uint maxClose = mul_ScalarTruncate(Exp({mantissa : closeFactorMantissa}), borrowBalance);\r\n    if (repayAmount > maxClose) {\r\n      return uint(Error.TOO_MUCH_REPAY);\r\n    }\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param actualRepayAmount The amount of underlying being repaid\r\n     */\r\n  function liquidateBorrowVerify(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint actualRepayAmount,\r\n    uint seizeTokens) override external {\r\n    // Shh - currently unused\r\n    cTokenBorrowed;\r\n    cTokenCollateral;\r\n    liquidator;\r\n    borrower;\r\n    actualRepayAmount;\r\n    seizeTokens;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the seizing of assets should be allowed to occur\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param seizeTokens The number of collateral tokens to seize\r\n     */\r\n  function seizeAllowed(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint seizeTokens) override external returns (uint) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!seizeGuardianPaused, \"seize is paused\");\r\n\r\n    // Shh - currently unused\r\n    seizeTokens;\r\n\r\n    if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\r\n      return uint(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\r\n      return uint(Error.COMPTROLLER_MISMATCH);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    updateCompSupplyIndex(cTokenCollateral);\r\n    distributeSupplierComp(cTokenCollateral, borrower);\r\n    distributeSupplierComp(cTokenCollateral, liquidator);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates seize and reverts on rejection. May emit logs.\r\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n     * @param liquidator The address repaying the borrow and seizing the collateral\r\n     * @param borrower The address of the borrower\r\n     * @param seizeTokens The number of collateral tokens to seize\r\n     */\r\n  function seizeVerify(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint seizeTokens) override external {\r\n    // Shh - currently unused\r\n    cTokenCollateral;\r\n    cTokenBorrowed;\r\n    liquidator;\r\n    borrower;\r\n    seizeTokens;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\r\n     * @param cToken The market to verify the transfer against\r\n     * @param src The account which sources the tokens\r\n     * @param dst The account which receives the tokens\r\n     * @param transferTokens The number of cTokens to transfer\r\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n     */\r\n  function transferAllowed(address cToken, address src, address dst, uint transferTokens) override external returns (uint) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!transferGuardianPaused, \"transfer is paused\");\r\n\r\n    // Currently the only consideration is whether or not\r\n    //  the src is allowed to redeem this many tokens\r\n    uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\r\n    if (allowed != uint(Error.NO_ERROR)) {\r\n      return allowed;\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    updateCompSupplyIndex(cToken);\r\n    distributeSupplierComp(cToken, src);\r\n    distributeSupplierComp(cToken, dst);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates transfer and reverts on rejection. May emit logs.\r\n     * @param cToken Asset being transferred\r\n     * @param src The account which sources the tokens\r\n     * @param dst The account which receives the tokens\r\n     * @param transferTokens The number of cTokens to transfer\r\n     */\r\n  function transferVerify(address cToken, address src, address dst, uint transferTokens) override external {\r\n    // Shh - currently unused\r\n    cToken;\r\n    src;\r\n    dst;\r\n    transferTokens;\r\n\r\n    // Shh - we don't ever want this hook to be marked pure\r\n    if (false) {\r\n      maxAssets = maxAssets;\r\n    }\r\n  }\r\n\r\n  /*** Liquidity/Liquidation Calculations ***/\r\n\r\n  /**\r\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\r\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\r\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\r\n     */\r\n  struct AccountLiquidityLocalVars {\r\n    uint sumCollateral;\r\n    uint sumBorrowPlusEffects;\r\n    uint cTokenBalance;\r\n    uint borrowBalance;\r\n    uint exchangeRateMantissa;\r\n    uint oraclePriceMantissa;\r\n    Exp collateralFactor;\r\n    Exp exchangeRate;\r\n    Exp oraclePrice;\r\n    Exp tokensToDenom;\r\n  }\r\n\r\n  /**\r\n   * @notice Determine the current account liquidity wrt collateral requirements\r\n     * @return (possible error code (semi-opaque),\r\n                account liquidity in excess of collateral requirements,\r\n     *          account shortfall below collateral requirements)\r\n     */\r\n  function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\r\n    (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(address(0)), 0, 0);\r\n\r\n    return (uint(err), liquidity, shortfall);\r\n  }\r\n\r\n  /**\r\n   * @notice Determine the current account liquidity wrt collateral requirements\r\n     * @return (possible error code,\r\n                account liquidity in excess of collateral requirements,\r\n     *          account shortfall below collateral requirements)\r\n     */\r\n  function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\r\n    return getHypotheticalAccountLiquidityInternal(account, CToken(address(0)), 0, 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @return (possible error code (semi-opaque),\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n  function getHypotheticalAccountLiquidity(\r\n    address account,\r\n    address cTokenModify,\r\n    uint redeemTokens,\r\n    uint borrowAmount) public view returns (uint, uint, uint) {\r\n    (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount);\r\n    return (uint(err), liquidity, shortfall);\r\n  }\r\n\r\n  /**\r\n   * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\r\n     *  without calculating accumulated interest.\r\n     * @return (possible error code,\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n  function getHypotheticalAccountLiquidityInternal(\r\n    address account,\r\n    CToken cTokenModify,\r\n    uint redeemTokens,\r\n    uint borrowAmount) internal view returns (Error, uint, uint) {\r\n\r\n    AccountLiquidityLocalVars memory vars;\r\n    // Holds all our calculation results\r\n    uint oErr;\r\n\r\n    // For each asset the account is in\r\n    CToken[] memory assets = accountAssets[account];\r\n    for (uint i = 0; i < assets.length; i++) {\r\n      CToken asset = assets[i];\r\n\r\n      // Read the balances and exchange rate from the cToken\r\n      (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\r\n      if (oErr != 0) {// semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\r\n        return (Error.SNAPSHOT_ERROR, 0, 0);\r\n      }\r\n      vars.collateralFactor = Exp({mantissa : markets[address(asset)].collateralFactorMantissa});\r\n      vars.exchangeRate = Exp({mantissa : vars.exchangeRateMantissa});\r\n\r\n      // Get the normalized price of the asset\r\n      vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\r\n      if (vars.oraclePriceMantissa == 0) {\r\n        return (Error.PRICE_ERROR, 0, 0);\r\n      }\r\n      vars.oraclePrice = Exp({mantissa : vars.oraclePriceMantissa});\r\n\r\n      // Pre-compute a conversion factor from tokens -> ether (normalized price value)\r\n      vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\r\n\r\n      // sumCollateral += tokensToDenom * cTokenBalance\r\n      vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\r\n\r\n      // sumBorrowPlusEffects += oraclePrice * borrowBalance\r\n      vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\r\n\r\n      // Calculate effects of interacting with cTokenModify\r\n      if (asset == cTokenModify) {\r\n        // redeem effect\r\n        // sumBorrowPlusEffects += tokensToDenom * redeemTokens\r\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\r\n\r\n        // borrow effect\r\n        // sumBorrowPlusEffects += oraclePrice * borrowAmount\r\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\r\n      }\r\n    }\r\n\r\n    // These are safe, as the underflow condition is checked first\r\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\r\n      return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\r\n    } else {\r\n      return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\r\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\r\n     * @param cTokenBorrowed The address of the borrowed cToken\r\n     * @param cTokenCollateral The address of the collateral cToken\r\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\r\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\r\n     */\r\n  function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) override external view returns (uint, uint) {\r\n    /* Read oracle prices for borrowed and collateral markets */\r\n    uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\r\n    uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));\r\n    if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\r\n      return (uint(Error.PRICE_ERROR), 0);\r\n    }\r\n\r\n    /*\r\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\r\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\r\n     *  seizeTokens = seizeAmount / exchangeRate\r\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\r\n     */\r\n    uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored();\r\n    // Note: reverts on error\r\n    uint seizeTokens;\r\n    Exp memory numerator;\r\n    Exp memory denominator;\r\n    Exp memory ratio;\r\n\r\n    numerator = mul_(Exp({mantissa : liquidationIncentiveMantissa}), Exp({mantissa : priceBorrowedMantissa}));\r\n    denominator = mul_(Exp({mantissa : priceCollateralMantissa}), Exp({mantissa : exchangeRateMantissa}));\r\n    ratio = div_(numerator, denominator);\r\n\r\n    seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\r\n\r\n    return (uint(Error.NO_ERROR), seizeTokens);\r\n  }\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  /**\r\n    * @notice Sets a new price oracle for the comptroller\r\n      * @dev Admin function to set a new price oracle\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\r\n    }\r\n\r\n    // Track the old oracle for the comptroller\r\n    PriceOracle oldOracle = oracle;\r\n\r\n    // Set comptroller's oracle to newOracle\r\n    oracle = newOracle;\r\n\r\n    // Emit NewPriceOracle(oldOracle, newOracle)\r\n    emit NewPriceOracle(oldOracle, newOracle);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets the closeFactor used when liquidating borrows\r\n      * @dev Admin function to set closeFactor\r\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\r\n      * @return uint 0=success, otherwise a failure\r\n      */\r\n  function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\r\n    // Check caller is admin\r\n    require(msg.sender == admin, \"only admin can set close factor\");\r\n\r\n    uint oldCloseFactorMantissa = closeFactorMantissa;\r\n    closeFactorMantissa = newCloseFactorMantissa;\r\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets the collateralFactor for a market\r\n      * @dev Admin function to set per-market collateralFactor\r\n      * @param cToken The market to set the factor on\r\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\r\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n      */\r\n  function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\r\n    }\r\n\r\n    // Verify market is listed\r\n    Market storage market = markets[address(cToken)];\r\n    if (!market.isListed) {\r\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\r\n    }\r\n\r\n    Exp memory newCollateralFactorExp = Exp({mantissa : newCollateralFactorMantissa});\r\n\r\n    // Check collateral factor <= 0.9\r\n    Exp memory highLimit = Exp({mantissa : collateralFactorMaxMantissa});\r\n    if (lessThanExp(highLimit, newCollateralFactorExp)) {\r\n      return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\r\n    }\r\n\r\n    // If collateral factor != 0, fail if price == 0\r\n    if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\r\n      return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\r\n    }\r\n\r\n    // Set market's collateral factor to new collateral factor, remember old value\r\n    uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\r\n    market.collateralFactorMantissa = newCollateralFactorMantissa;\r\n\r\n    // Emit event with asset, old collateral factor, and new collateral factor\r\n    emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets liquidationIncentive\r\n      * @dev Admin function to set liquidationIncentive\r\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\r\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n      */\r\n  function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\r\n    }\r\n\r\n    // Save current value for use in log\r\n    uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\r\n\r\n    // Set liquidation incentive to new incentive\r\n    liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\r\n\r\n    // Emit event with old incentive, new incentive\r\n    emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n    * @notice Add the market to the markets mapping and set it as listed\r\n      * @dev Admin function to set isListed and add support for the market\r\n      * @param cToken The address of the market (token) to list\r\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n      */\r\n  function _supportMarket(CToken cToken) external returns (uint) {\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\r\n    }\r\n\r\n    if (markets[address(cToken)].isListed) {\r\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\r\n    }\r\n\r\n    cToken.isCToken();\r\n    // Sanity check to make sure its really a CToken\r\n\r\n    // Note that isComped is not in active use anymore\r\n    Market storage market = markets[address(cToken)];\r\n    market.isListed = true;\r\n    market.isComped = false;\r\n    market.collateralFactorMantissa = 0;\r\n\r\n    _addMarketInternal(address(cToken));\r\n\r\n    emit MarketListed(cToken);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  function _addMarketInternal(address cToken) internal {\r\n    for (uint i = 0; i < allMarkets.length; i ++) {\r\n      require(allMarkets[i] != CToken(cToken), \"market already added\");\r\n    }\r\n    allMarkets.push(CToken(cToken));\r\n  }\r\n\r\n\r\n  /**\r\n    * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\r\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\r\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\r\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\r\n      */\r\n  function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\r\n    require(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\");\r\n\r\n    uint numMarkets = cTokens.length;\r\n    uint numBorrowCaps = newBorrowCaps.length;\r\n\r\n    require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\r\n\r\n    for (uint i = 0; i < numMarkets; i++) {\r\n      borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\r\n      emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Admin function to change the Borrow Cap Guardian\r\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\r\n     */\r\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\r\n    require(msg.sender == admin, \"only admin can set borrow cap guardian\");\r\n\r\n    // Save current value for inclusion in log\r\n    address oldBorrowCapGuardian = borrowCapGuardian;\r\n\r\n    // Store borrowCapGuardian with value newBorrowCapGuardian\r\n    borrowCapGuardian = newBorrowCapGuardian;\r\n\r\n    // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\r\n    emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\r\n  }\r\n\r\n  /**\r\n   * @notice Admin function to change the Pause Guardian\r\n     * @param newPauseGuardian The address of the new Pause Guardian\r\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n     */\r\n  function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\r\n    }\r\n\r\n    // Save current value for inclusion in log\r\n    address oldPauseGuardian = pauseGuardian;\r\n\r\n    // Store pauseGuardian with value newPauseGuardian\r\n    pauseGuardian = newPauseGuardian;\r\n\r\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\r\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  function _setMintPaused(CToken cToken, bool state) public returns (bool) {\r\n    require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\r\n    require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n    require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n    mintGuardianPaused[address(cToken)] = state;\r\n    emit ActionPaused(cToken, \"Mint\", state);\r\n    return state;\r\n  }\r\n\r\n  function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\r\n    require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\r\n    require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n    require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n    borrowGuardianPaused[address(cToken)] = state;\r\n    emit ActionPaused(cToken, \"Borrow\", state);\r\n    return state;\r\n  }\r\n\r\n  function _setTransferPaused(bool state) public returns (bool) {\r\n    require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n    require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n    transferGuardianPaused = state;\r\n    emit ActionPaused(\"Transfer\", state);\r\n    return state;\r\n  }\r\n\r\n  function _setSeizePaused(bool state) public returns (bool) {\r\n    require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\r\n    require(msg.sender == admin || state == true, \"only admin can unpause\");\r\n\r\n    seizeGuardianPaused = state;\r\n    emit ActionPaused(\"Seize\", state);\r\n    return state;\r\n  }\r\n\r\n  function _become(Unitroller unitroller) public {\r\n    require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\r\n    require(unitroller._acceptImplementation() == 0, \"change not authorized\");\r\n  }\r\n\r\n  /**\r\n   * @notice Checks caller is admin, or this contract is becoming the new implementation\r\n     */\r\n  function adminOrInitializing() internal view returns (bool) {\r\n    return msg.sender == admin || msg.sender == comptrollerImplementation;\r\n  }\r\n\r\n  /*** Comp Distribution ***/\r\n\r\n  /**\r\n   * @notice Set COMP speed for a single market\r\n     * @param cToken The market whose COMP speed to update\r\n     * @param compSpeed New COMP speed for market\r\n     */\r\n  function setCompSpeedInternal(CToken cToken, uint compSpeed) internal {\r\n    uint currentCompSpeed = compSpeeds[address(cToken)];\r\n    if (currentCompSpeed != 0) {\r\n      // note that COMP speed could be set to 0 to halt liquidity rewards for a market\r\n      Exp memory borrowIndex = Exp({mantissa : cToken.borrowIndex()});\r\n      updateCompSupplyIndex(address(cToken));\r\n      updateCompBorrowIndex(address(cToken), borrowIndex);\r\n    } else if (compSpeed != 0) {\r\n      // Add the COMP market\r\n      Market storage market = markets[address(cToken)];\r\n      require(market.isListed == true, \"comp market is not listed\");\r\n\r\n      if (compSupplyState[address(cToken)].index == 0 && compSupplyState[address(cToken)].block == 0) {\r\n        compSupplyState[address(cToken)] = CompMarketState({\r\n        index : compInitialIndex,\r\n        block : safe32(getBlockNumber(), \"block number exceeds 32 bits\")\r\n        });\r\n      }\r\n\r\n      if (compBorrowState[address(cToken)].index == 0 && compBorrowState[address(cToken)].block == 0) {\r\n        compBorrowState[address(cToken)] = CompMarketState({\r\n        index : compInitialIndex,\r\n        block : safe32(getBlockNumber(), \"block number exceeds 32 bits\")\r\n        });\r\n      }\r\n    }\r\n\r\n    if (currentCompSpeed != compSpeed) {\r\n      compSpeeds[address(cToken)] = compSpeed;\r\n      emit CompSpeedUpdated(cToken, compSpeed);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Accrue COMP to the market by updating the supply index\r\n     * @param cToken The market whose supply index to update\r\n     */\r\n  function updateCompSupplyIndex(address cToken) internal {\r\n    CompMarketState storage supplyState = compSupplyState[cToken];\r\n    uint supplySpeed = compSpeeds[cToken];\r\n    uint blockNumber = getBlockNumber();\r\n    uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\r\n    if (deltaBlocks > 0 && supplySpeed > 0) {\r\n      uint supplyTokens = CToken(cToken).totalSupply();\r\n      uint compAccrued = mul_(deltaBlocks, supplySpeed);\r\n      Double memory ratio = supplyTokens > 0 ? fraction(compAccrued, supplyTokens) : Double({mantissa : 0});\r\n      Double memory index = add_(Double({mantissa : supplyState.index}), ratio);\r\n      compSupplyState[cToken] = CompMarketState({\r\n      index : safe224(index.mantissa, \"new index exceeds 224 bits\"),\r\n      block : safe32(blockNumber, \"block number exceeds 32 bits\")\r\n      });\r\n    } else if (deltaBlocks > 0) {\r\n      supplyState.block = safe32(blockNumber, \"block number exceeds 32 bits\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Accrue COMP to the market by updating the borrow index\r\n     * @param cToken The market whose borrow index to update\r\n     */\r\n  function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) internal {\r\n    CompMarketState storage borrowState = compBorrowState[cToken];\r\n    uint borrowSpeed = compSpeeds[cToken];\r\n    uint blockNumber = getBlockNumber();\r\n    uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\r\n    if (deltaBlocks > 0 && borrowSpeed > 0) {\r\n      uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\r\n      uint compAccrued = mul_(deltaBlocks, borrowSpeed);\r\n      Double memory ratio = borrowAmount > 0 ? fraction(compAccrued, borrowAmount) : Double({mantissa : 0});\r\n      Double memory index = add_(Double({mantissa : borrowState.index}), ratio);\r\n      compBorrowState[cToken] = CompMarketState({\r\n      index : safe224(index.mantissa, \"new index exceeds 224 bits\"),\r\n      block : safe32(blockNumber, \"block number exceeds 32 bits\")\r\n      });\r\n    } else if (deltaBlocks > 0) {\r\n      borrowState.block = safe32(blockNumber, \"block number exceeds 32 bits\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\r\n     * @param cToken The market in which the supplier is interacting\r\n     * @param supplier The address of the supplier to distribute COMP to\r\n     */\r\n  function distributeSupplierComp(address cToken, address supplier) internal {\r\n    CompMarketState storage supplyState = compSupplyState[cToken];\r\n    Double memory supplyIndex = Double({mantissa : supplyState.index});\r\n    Double memory supplierIndex = Double({mantissa : compSupplierIndex[cToken][supplier]});\r\n    compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\r\n\r\n    if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\r\n      supplierIndex.mantissa = compInitialIndex;\r\n    }\r\n\r\n    Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\r\n    uint supplierTokens = CToken(cToken).balanceOf(supplier);\r\n    uint supplierDelta = mul_(supplierTokens, deltaIndex);\r\n    uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);\r\n    compAccrued[supplier] = supplierAccrued;\r\n    emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex.mantissa);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\r\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\r\n     * @param cToken The market in which the borrower is interacting\r\n     * @param borrower The address of the borrower to distribute COMP to\r\n     */\r\n  function distributeBorrowerComp(address cToken, address borrower, Exp memory marketBorrowIndex) internal {\r\n    CompMarketState storage borrowState = compBorrowState[cToken];\r\n    Double memory borrowIndex = Double({mantissa : borrowState.index});\r\n    Double memory borrowerIndex = Double({mantissa : compBorrowerIndex[cToken][borrower]});\r\n    compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\r\n\r\n    if (borrowerIndex.mantissa > 0) {\r\n      Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\r\n      uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\r\n      uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\r\n      uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\r\n      compAccrued[borrower] = borrowerAccrued;\r\n      emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex.mantissa);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate additional accrued COMP for a contributor since last accrual\r\n     * @param contributor The address to calculate contributor rewards for\r\n     */\r\n  function updateContributorRewards(address contributor) public {\r\n    uint compSpeed = compContributorSpeeds[contributor];\r\n    uint blockNumber = getBlockNumber();\r\n    uint deltaBlocks = sub_(blockNumber, lastContributorBlock[contributor]);\r\n    if (deltaBlocks > 0 && compSpeed > 0) {\r\n      uint newAccrued = mul_(deltaBlocks, compSpeed);\r\n      uint contributorAccrued = add_(compAccrued[contributor], newAccrued);\r\n\r\n      compAccrued[contributor] = contributorAccrued;\r\n      lastContributorBlock[contributor] = blockNumber;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Claim all the comp accrued by holder in all markets\r\n     * @param holder The address to claim COMP for\r\n     */\r\n  function claimComp(address holder) public {\r\n    return claimComp(holder, allMarkets);\r\n  }\r\n\r\n  /**\r\n   * @notice Claim all the comp accrued by holder in the specified markets\r\n     * @param holder The address to claim COMP for\r\n     * @param cTokens The list of markets to claim COMP in\r\n     */\r\n  function claimComp(address holder, CToken[] memory cTokens) public {\r\n    address[] memory holders = new address[](1);\r\n    holders[0] = holder;\r\n    claimComp(holders, cTokens, true, true);\r\n  }\r\n\r\n  /**\r\n   * @notice Claim all comp accrued by the holders\r\n     * @param holders The addresses to claim COMP for\r\n     * @param cTokens The list of markets to claim COMP in\r\n     * @param borrowers Whether or not to claim COMP earned by borrowing\r\n     * @param suppliers Whether or not to claim COMP earned by supplying\r\n     */\r\n  function claimComp(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {\r\n    for (uint i = 0; i < cTokens.length; i++) {\r\n      CToken cToken = cTokens[i];\r\n      require(markets[address(cToken)].isListed, \"market must be listed\");\r\n      if (borrowers == true) {\r\n        Exp memory borrowIndex = Exp({mantissa : cToken.borrowIndex()});\r\n        updateCompBorrowIndex(address(cToken), borrowIndex);\r\n        for (uint j = 0; j < holders.length; j++) {\r\n          distributeBorrowerComp(address(cToken), holders[j], borrowIndex);\r\n          compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\r\n        }\r\n      }\r\n      if (suppliers == true) {\r\n        updateCompSupplyIndex(address(cToken));\r\n        for (uint j = 0; j < holders.length; j++) {\r\n          distributeSupplierComp(address(cToken), holders[j]);\r\n          compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer COMP to the user\r\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\r\n     * @param user The address of the user to transfer COMP to\r\n     * @param amount The amount of COMP to (possibly) transfer\r\n     * @return The amount of COMP which was NOT transferred to the user\r\n     */\r\n  function grantCompInternal(address user, uint amount) internal returns (uint) {\r\n    Comp comp = Comp(getCompAddress());\r\n    uint compRemaining = comp.balanceOf(address(this));\r\n    if (amount > 0 && amount <= compRemaining) {\r\n      comp.transfer(user, amount);\r\n      return 0;\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  /*** Comp Distribution Admin ***/\r\n\r\n  /**\r\n   * @notice Transfer COMP to the recipient\r\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\r\n     * @param recipient The address of the recipient to transfer COMP to\r\n     * @param amount The amount of COMP to (possibly) transfer\r\n     */\r\n  function _grantComp(address recipient, uint amount) public {\r\n    require(adminOrInitializing(), \"only admin can grant comp\");\r\n    uint amountLeft = grantCompInternal(recipient, amount);\r\n    require(amountLeft == 0, \"insufficient comp for grant\");\r\n    emit CompGranted(recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Set COMP speed for a single market\r\n     * @param cToken The market whose COMP speed to update\r\n     * @param compSpeed New COMP speed for market\r\n     */\r\n  function _setCompSpeed(CToken cToken, uint compSpeed) public {\r\n    require(adminOrInitializing(), \"only admin can set comp speed\");\r\n    setCompSpeedInternal(cToken, compSpeed);\r\n  }\r\n\r\n  /**\r\n   * @notice Set COMP speed for a single contributor\r\n     * @param contributor The contributor whose COMP speed to update\r\n     * @param compSpeed New COMP speed for contributor\r\n     */\r\n  function _setContributorCompSpeed(address contributor, uint compSpeed) public {\r\n    require(adminOrInitializing(), \"only admin can set comp speed\");\r\n\r\n    // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\r\n    updateContributorRewards(contributor);\r\n    if (compSpeed == 0) {\r\n      // release storage\r\n      delete lastContributorBlock[contributor];\r\n    } else {\r\n      lastContributorBlock[contributor] = getBlockNumber();\r\n    }\r\n    compContributorSpeeds[contributor] = compSpeed;\r\n\r\n    emit ContributorCompSpeedUpdated(contributor, compSpeed);\r\n  }\r\n\r\n  /**\r\n   * @notice Return all of the markets\r\n     * @dev The automatic getter may be used to access an individual market.\r\n     * @return The list of market addresses\r\n     */\r\n  function getAllMarkets() public view returns (CToken[] memory) {\r\n    return allMarkets;\r\n  }\r\n\r\n  function getBlockNumber() public view returns (uint) {\r\n    return block.number;\r\n  }\r\n\r\n  /**\r\n   * @notice Return the address of the COMP token\r\n     * @return The address of COMP\r\n     */\r\n  function getCompAddress() public pure returns (address) {\r\n    return 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract ComptrollerInterface {\r\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\r\n  bool public constant isComptroller = true;\r\n\r\n  /*** Assets You Are In ***/\r\n\r\n  function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\r\n\r\n  function exitMarket(address cToken) virtual external returns (uint);\r\n\r\n  /*** Policy Hooks ***/\r\n\r\n  function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\r\n\r\n  function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\r\n\r\n  function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\r\n\r\n  function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\r\n\r\n  function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\r\n\r\n  function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\r\n\r\n  function repayBorrowAllowed(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint repayAmount) virtual external returns (uint);\r\n\r\n  function repayBorrowVerify(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint repayAmount,\r\n    uint borrowerIndex) virtual external;\r\n\r\n  function liquidateBorrowAllowed(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint repayAmount) virtual external returns (uint);\r\n\r\n  function liquidateBorrowVerify(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint repayAmount,\r\n    uint seizeTokens) virtual external;\r\n\r\n  function seizeAllowed(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint seizeTokens) virtual external returns (uint);\r\n\r\n  function seizeVerify(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint seizeTokens) virtual external;\r\n\r\n  function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\r\n\r\n  function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\r\n\r\n  /*** Liquidity/Liquidation Calculations ***/\r\n\r\n  function liquidateCalculateSeizeTokens(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    uint repayAmount) virtual external view returns (uint, uint);\r\n}\r\n"
    },
    "contracts/test/compound-core/ComptrollerStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\nimport \"./PriceOracle.sol\";\r\n\r\ncontract UnitrollerAdminStorage {\r\n  /**\r\n  * @notice Administrator for this contract\r\n    */\r\n  address public admin;\r\n\r\n  /**\r\n  * @notice Pending administrator for this contract\r\n    */\r\n  address public pendingAdmin;\r\n\r\n  /**\r\n  * @notice Active brains of Unitroller\r\n    */\r\n  address public comptrollerImplementation;\r\n\r\n  /**\r\n  * @notice Pending brains of Unitroller\r\n    */\r\n  address public pendingComptrollerImplementation;\r\n}\r\n\r\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\r\n\r\n  /**\r\n   * @notice Oracle which gives the price of any given asset\r\n     */\r\n  PriceOracle public oracle;\r\n\r\n  /**\r\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\r\n     */\r\n  uint public closeFactorMantissa;\r\n\r\n  /**\r\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\r\n     */\r\n  uint public liquidationIncentiveMantissa;\r\n\r\n  /**\r\n   * @notice Max number of assets a single account can participate in (borrow or use as collateral)\r\n     */\r\n  uint public maxAssets;\r\n\r\n  /**\r\n   * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\r\n     */\r\n  mapping(address => CToken[]) public accountAssets;\r\n\r\n}\r\n\r\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\r\n  struct Market {\r\n    // Whether or not this market is listed\r\n    bool isListed;\r\n\r\n    //  Multiplier representing the most one can borrow against their collateral in this market.\r\n    //  For instance, 0.9 to allow borrowing 90% of collateral value.\r\n    //  Must be between 0 and 1, and stored as a mantissa.\r\n    uint collateralFactorMantissa;\r\n\r\n    // Per-market mapping of \"accounts in this asset\"\r\n    mapping(address => bool) accountMembership;\r\n\r\n    // Whether or not this market receives COMP\r\n    bool isComped;\r\n  }\r\n\r\n  /**\r\n   * @notice Official mapping of cTokens -> Market metadata\r\n     * @dev Used e.g. to determine if a market is supported\r\n     */\r\n  mapping(address => Market) public markets;\r\n\r\n\r\n  /**\r\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\r\n     *  Actions which allow users to remove their own assets cannot be paused.\r\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\r\n     */\r\n  address public pauseGuardian;\r\n  bool public _mintGuardianPaused;\r\n  bool public _borrowGuardianPaused;\r\n  bool public transferGuardianPaused;\r\n  bool public seizeGuardianPaused;\r\n  mapping(address => bool) public mintGuardianPaused;\r\n  mapping(address => bool) public borrowGuardianPaused;\r\n}\r\n\r\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\r\n  struct CompMarketState {\r\n    // The market's last updated compBorrowIndex or compSupplyIndex\r\n    uint224 index;\r\n\r\n    // The block number the index was last updated at\r\n    uint32 block;\r\n  }\r\n\r\n  /// @notice A list of all markets\r\n  CToken[] public allMarkets;\r\n\r\n  /// @notice The rate at which the flywheel distributes COMP, per block\r\n  uint public compRate;\r\n\r\n  /// @notice The portion of compRate that each market currently receives\r\n  mapping(address => uint) public compSpeeds;\r\n\r\n  /// @notice The COMP market supply state for each market\r\n  mapping(address => CompMarketState) public compSupplyState;\r\n\r\n  /// @notice The COMP market borrow state for each market\r\n  mapping(address => CompMarketState) public compBorrowState;\r\n\r\n  /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\r\n  mapping(address => mapping(address => uint)) public compSupplierIndex;\r\n\r\n  /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\r\n  mapping(address => mapping(address => uint)) public compBorrowerIndex;\r\n\r\n  /// @notice The COMP accrued but not yet transferred to each user\r\n  mapping(address => uint) public compAccrued;\r\n}\r\n\r\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\r\n  // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\r\n  address public borrowCapGuardian;\r\n\r\n  // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\r\n  mapping(address => uint) public borrowCaps;\r\n}\r\n\r\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\r\n  /// @notice The portion of COMP that each contributor receives per block\r\n  mapping(address => uint) public compContributorSpeeds;\r\n\r\n  /// @notice Last block at which a contributor's COMP rewards have been allocated\r\n  mapping(address => uint) public lastContributorBlock;\r\n}\r\n\r\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\r\n  /// @notice The rate at which comp is distributed to the corresponding borrow market (per block)\r\n  mapping(address => uint) public compBorrowSpeeds;\r\n\r\n  /// @notice The rate at which comp is distributed to the corresponding supply market (per block)\r\n  mapping(address => uint) public compSupplySpeeds;\r\n}\r\n\r\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\r\n  /// @notice Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\r\n  bool public proposal65FixExecuted;\r\n\r\n  /// @notice Accounting storage mapping account addresses to how much COMP they owe the protocol.\r\n  mapping(address => uint) public compReceivable;\r\n}\r\n"
    },
    "contracts/test/compound-core/CToken.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./ComptrollerInterface.sol\";\r\nimport \"./CTokenInterfaces.sol\";\r\nimport \"./ErrorReporter.sol\";\r\nimport \"./EIP20Interface.sol\";\r\nimport \"./InterestRateModel.sol\";\r\nimport \"./ExponentialNoError.sol\";\r\n\r\n/**\r\n * @title Compound's CToken Contract\r\n * @notice Abstract base for CTokens\r\n * @author Compound\r\n */\r\nabstract contract CToken is CTokenInterface, ExponentialNoError, TokenErrorReporter {\r\n  /**\r\n   * @notice Initialize the money market\r\n     * @param comptroller_ The address of the Comptroller\r\n     * @param interestRateModel_ The address of the interest rate model\r\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\r\n     * @param name_ EIP-20 name of this token\r\n     * @param symbol_ EIP-20 symbol of this token\r\n     * @param decimals_ EIP-20 decimal precision of this token\r\n     */\r\n  function initialize(ComptrollerInterface comptroller_,\r\n    InterestRateModel interestRateModel_,\r\n    uint initialExchangeRateMantissa_,\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint8 decimals_) public {\r\n    require(msg.sender == admin, \"only admin may initialize the market\");\r\n    require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\r\n\r\n    // Set initial exchange rate\r\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\r\n    require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\r\n\r\n    // Set the comptroller\r\n    uint err = _setComptroller(comptroller_);\r\n    require(err == NO_ERROR, \"setting comptroller failed\");\r\n\r\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\r\n    accrualBlockNumber = getBlockNumber();\r\n    borrowIndex = mantissaOne;\r\n\r\n    // Set the interest rate model (depends on block number / borrow index)\r\n    err = _setInterestRateModelFresh(interestRateModel_);\r\n    require(err == NO_ERROR, \"setting interest rate model failed\");\r\n\r\n    name = name_;\r\n    symbol = symbol_;\r\n    decimals = decimals_;\r\n\r\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\r\n    _notEntered = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\r\n     * @dev Called by both `transfer` and `transferFrom` internally\r\n     * @param spender The address of the account performing the transfer\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param tokens The number of tokens to transfer\r\n     * @return 0 if the transfer succeeded, else revert\r\n     */\r\n  function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\r\n    /* Fail if transfer not allowed */\r\n    uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\r\n    if (allowed != 0) {\r\n      revert TransferComptrollerRejection(allowed);\r\n    }\r\n\r\n    /* Do not allow self-transfers */\r\n    if (src == dst) {\r\n      revert TransferNotAllowed();\r\n    }\r\n\r\n    /* Get the allowance, infinite for the account owner */\r\n    uint startingAllowance = 0;\r\n    if (spender == src) {\r\n      startingAllowance = type(uint).max;\r\n    } else {\r\n      startingAllowance = transferAllowances[src][spender];\r\n    }\r\n\r\n    /* Do the calculations, checking for {under,over}flow */\r\n    uint allowanceNew = startingAllowance - tokens;\r\n    uint srcTokensNew = accountTokens[src] - tokens;\r\n    uint dstTokensNew = accountTokens[dst] + tokens;\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n    accountTokens[src] = srcTokensNew;\r\n    accountTokens[dst] = dstTokensNew;\r\n\r\n    /* Eat some of the allowance (if necessary) */\r\n    if (startingAllowance != type(uint).max) {\r\n      transferAllowances[src][spender] = allowanceNew;\r\n    }\r\n\r\n    /* We emit a Transfer event */\r\n    emit Transfer(src, dst, tokens);\r\n\r\n    // unused function\r\n    // comptroller.transferVerify(address(this), src, dst, tokens);\r\n\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n  function transfer(address dst, uint256 amount) override external nonReentrant returns (bool) {\r\n    return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n  function transferFrom(address src, address dst, uint256 amount) override external nonReentrant returns (bool) {\r\n    return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n  function approve(address spender, uint256 amount) override external returns (bool) {\r\n    address src = msg.sender;\r\n    transferAllowances[src][spender] = amount;\r\n    emit Approval(src, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Get the current allowance from `owner` for `spender`\r\n     * @param owner The address of the account which owns the tokens to be spent\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @return The number of tokens allowed to be spent (-1 means infinite)\r\n     */\r\n  function allowance(address owner, address spender) override external view returns (uint256) {\r\n    return transferAllowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @notice Get the token balance of the `owner`\r\n     * @param owner The address of the account to query\r\n     * @return The number of tokens owned by `owner`\r\n     */\r\n  function balanceOf(address owner) override external view returns (uint256) {\r\n    return accountTokens[owner];\r\n  }\r\n\r\n  /**\r\n   * @notice Get the underlying balance of the `owner`\r\n     * @dev This also accrues interest in a transaction\r\n     * @param owner The address of the account to query\r\n     * @return The amount of underlying owned by `owner`\r\n     */\r\n  function balanceOfUnderlying(address owner) override external returns (uint) {\r\n    Exp memory exchangeRate = Exp({mantissa : exchangeRateCurrent()});\r\n    return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\r\n  }\r\n\r\n  /**\r\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\r\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\r\n     * @param account Address of the account to snapshot\r\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\r\n     */\r\n  function getAccountSnapshot(address account) override external view returns (uint, uint, uint, uint) {\r\n    return (\r\n    NO_ERROR,\r\n    accountTokens[account],\r\n    borrowBalanceStoredInternal(account),\r\n    exchangeRateStoredInternal()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Function to simply retrieve block number\r\n     *  This exists mainly for inheriting test contracts to stub this result.\r\n     */\r\n  function getBlockNumber() virtual internal view returns (uint) {\r\n    return block.number;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current per-block borrow interest rate for this cToken\r\n     * @return The borrow interest rate per block, scaled by 1e18\r\n     */\r\n  function borrowRatePerBlock() override external view returns (uint) {\r\n    return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current per-block supply interest rate for this cToken\r\n     * @return The supply interest rate per block, scaled by 1e18\r\n     */\r\n  function supplyRatePerBlock() override external view returns (uint) {\r\n    return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current total borrows plus accrued interest\r\n     * @return The total borrows with interest\r\n     */\r\n  function totalBorrowsCurrent() override external nonReentrant returns (uint) {\r\n    accrueInterest();\r\n    return totalBorrows;\r\n  }\r\n\r\n  /**\r\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\r\n     * @param account The address whose balance should be calculated after updating borrowIndex\r\n     * @return The calculated balance\r\n     */\r\n  function borrowBalanceCurrent(address account) override external nonReentrant returns (uint) {\r\n    accrueInterest();\r\n    return borrowBalanceStored(account);\r\n  }\r\n\r\n  /**\r\n   * @notice Return the borrow balance of account based on stored data\r\n     * @param account The address whose balance should be calculated\r\n     * @return The calculated balance\r\n     */\r\n  function borrowBalanceStored(address account) override public view returns (uint) {\r\n    return borrowBalanceStoredInternal(account);\r\n  }\r\n\r\n  /**\r\n   * @notice Return the borrow balance of account based on stored data\r\n     * @param account The address whose balance should be calculated\r\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\r\n     */\r\n  function borrowBalanceStoredInternal(address account) internal view returns (uint) {\r\n    /* Get borrowBalance and borrowIndex */\r\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\r\n\r\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\r\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\r\n     */\r\n    if (borrowSnapshot.principal == 0) {\r\n      return 0;\r\n    }\r\n\r\n    /* Calculate new borrow balance using the interest index:\r\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\r\n     */\r\n    uint principalTimesIndex = borrowSnapshot.principal * borrowIndex;\r\n    return principalTimesIndex / borrowSnapshot.interestIndex;\r\n  }\r\n\r\n  /**\r\n   * @notice Accrue interest then return the up-to-date exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n  function exchangeRateCurrent() override public nonReentrant returns (uint) {\r\n    accrueInterest();\r\n    return exchangeRateStored();\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the exchange rate from the underlying to the CToken\r\n     * @dev This function does not accrue interest before calculating the exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n  function exchangeRateStored() override public view returns (uint) {\r\n    return exchangeRateStoredInternal();\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the exchange rate from the underlying to the CToken\r\n     * @dev This function does not accrue interest before calculating the exchange rate\r\n     * @return calculated exchange rate scaled by 1e18\r\n     */\r\n  function exchangeRateStoredInternal() virtual internal view returns (uint) {\r\n    uint _totalSupply = totalSupply;\r\n    if (_totalSupply == 0) {\r\n      /*\r\n       * If there are no tokens minted:\r\n       *  exchangeRate = initialExchangeRate\r\n       */\r\n      return initialExchangeRateMantissa;\r\n    } else {\r\n      /*\r\n       * Otherwise:\r\n       *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\r\n       */\r\n      uint totalCash = getCashPrior();\r\n      uint cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves;\r\n      uint exchangeRate = cashPlusBorrowsMinusReserves * expScale / _totalSupply;\r\n\r\n      return exchangeRate;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get cash balance of this cToken in the underlying asset\r\n     * @return The quantity of underlying asset owned by this contract\r\n     */\r\n  function getCash() override external view returns (uint) {\r\n    return getCashPrior();\r\n  }\r\n\r\n  /**\r\n   * @notice Applies accrued interest to total borrows and reserves\r\n     * @dev This calculates interest accrued from the last checkpointed block\r\n     *   up to the current block and writes new checkpoint to storage.\r\n     */\r\n  function accrueInterest() virtual override public returns (uint) {\r\n    /* Remember the initial block number */\r\n    uint currentBlockNumber = getBlockNumber();\r\n    uint accrualBlockNumberPrior = accrualBlockNumber;\r\n\r\n    /* Short-circuit accumulating 0 interest */\r\n    if (accrualBlockNumberPrior == currentBlockNumber) {\r\n      return NO_ERROR;\r\n    }\r\n\r\n    /* Read the previous values out of storage */\r\n    uint cashPrior = getCashPrior();\r\n    uint borrowsPrior = totalBorrows;\r\n    uint reservesPrior = totalReserves;\r\n    uint borrowIndexPrior = borrowIndex;\r\n\r\n    /* Calculate the current borrow interest rate */\r\n    uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\r\n    require(borrowRateMantissa <= borrowRateMaxMantissa, \"borrow rate is absurdly high\");\r\n\r\n    /* Calculate the number of blocks elapsed since the last accrual */\r\n    uint blockDelta = currentBlockNumber - accrualBlockNumberPrior;\r\n\r\n    /*\r\n     * Calculate the interest accumulated into borrows and reserves and the new index:\r\n     *  simpleInterestFactor = borrowRate * blockDelta\r\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\r\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\r\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\r\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\r\n     */\r\n\r\n    Exp memory simpleInterestFactor = mul_(Exp({mantissa : borrowRateMantissa}), blockDelta);\r\n    uint interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\r\n    uint totalBorrowsNew = interestAccumulated + borrowsPrior;\r\n    uint totalReservesNew = mul_ScalarTruncateAddUInt(Exp({mantissa : reserveFactorMantissa}), interestAccumulated, reservesPrior);\r\n    uint borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n    /* We write the previously calculated values into storage */\r\n    accrualBlockNumber = currentBlockNumber;\r\n    borrowIndex = borrowIndexNew;\r\n    totalBorrows = totalBorrowsNew;\r\n    totalReserves = totalReservesNew;\r\n\r\n    /* We emit an AccrueInterest event */\r\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\r\n\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     */\r\n  function mintInternal(uint mintAmount) internal nonReentrant {\r\n    accrueInterest();\r\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\r\n    mintFresh(msg.sender, mintAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice User supplies assets into the market and receives cTokens in exchange\r\n     * @dev Assumes interest has already been accrued up to the current block\r\n     * @param minter The address of the account which is supplying the assets\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     */\r\n  function mintFresh(address minter, uint mintAmount) internal {\r\n    /* Fail if mint not allowed */\r\n    uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\r\n    if (allowed != 0) {\r\n      revert MintComptrollerRejection(allowed);\r\n    }\r\n\r\n    /* Verify market's block number equals current block number */\r\n    if (accrualBlockNumber != getBlockNumber()) {\r\n      revert MintFreshnessCheck();\r\n    }\r\n\r\n    Exp memory exchangeRate = Exp({mantissa : exchangeRateStoredInternal()});\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n    /*\r\n     *  We call `doTransferIn` for the minter and the mintAmount.\r\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\r\n     *  side-effects occurred. The function returns the amount actually transferred,\r\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\r\n     *  of cash.\r\n     */\r\n    uint actualMintAmount = doTransferIn(minter, mintAmount);\r\n\r\n    /*\r\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\r\n     *  mintTokens = actualMintAmount / exchangeRate\r\n     */\r\n\r\n    uint mintTokens = div_(actualMintAmount, exchangeRate);\r\n\r\n    /*\r\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\r\n     *  totalSupplyNew = totalSupply + mintTokens\r\n     *  accountTokensNew = accountTokens[minter] + mintTokens\r\n     * And write them into storage\r\n     */\r\n    totalSupply = totalSupply + mintTokens;\r\n    accountTokens[minter] = accountTokens[minter] + mintTokens;\r\n\r\n    /* We emit a Mint event, and a Transfer event */\r\n    emit Mint(minter, actualMintAmount, mintTokens);\r\n    emit Transfer(address(this), minter, mintTokens);\r\n\r\n    /* We call the defense hook */\r\n    // unused function\r\n    // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\r\n  }\r\n\r\n  /**\r\n   * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     */\r\n  function redeemInternal(uint redeemTokens) internal nonReentrant {\r\n    accrueInterest();\r\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\r\n    redeemFresh(payable(msg.sender), redeemTokens, 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\r\n     */\r\n  function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant {\r\n    accrueInterest();\r\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\r\n    redeemFresh(payable(msg.sender), 0, redeemAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice User redeems cTokens in exchange for the underlying asset\r\n     * @dev Assumes interest has already been accrued up to the current block\r\n     * @param redeemer The address of the account which is redeeming the tokens\r\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\r\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\r\n     */\r\n  function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal {\r\n    require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\r\n\r\n    /* exchangeRate = invoke Exchange Rate Stored() */\r\n    Exp memory exchangeRate = Exp({mantissa : exchangeRateStoredInternal()});\r\n\r\n    uint redeemTokens;\r\n    uint redeemAmount;\r\n    /* If redeemTokensIn > 0: */\r\n    if (redeemTokensIn > 0) {\r\n      /*\r\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\r\n       *  redeemTokens = redeemTokensIn\r\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\r\n       */\r\n      redeemTokens = redeemTokensIn;\r\n      redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\r\n    } else {\r\n      /*\r\n       * We get the current exchange rate and calculate the amount to be redeemed:\r\n       *  redeemTokens = redeemAmountIn / exchangeRate\r\n       *  redeemAmount = redeemAmountIn\r\n       */\r\n      redeemTokens = div_(redeemAmountIn, exchangeRate);\r\n      redeemAmount = redeemAmountIn;\r\n    }\r\n\r\n    /* Fail if redeem not allowed */\r\n    uint allowed = comptroller.redeemAllowed(address(this), redeemer, redeemTokens);\r\n    if (allowed != 0) {\r\n      revert RedeemComptrollerRejection(allowed);\r\n    }\r\n\r\n    /* Verify market's block number equals current block number */\r\n    if (accrualBlockNumber != getBlockNumber()) {\r\n      revert RedeemFreshnessCheck();\r\n    }\r\n\r\n    /* Fail gracefully if protocol has insufficient cash */\r\n    if (getCashPrior() < redeemAmount) {\r\n      revert RedeemTransferOutNotPossible();\r\n    }\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n\r\n    /*\r\n     * We write the previously calculated values into storage.\r\n     *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\r\n     */\r\n    totalSupply = totalSupply - redeemTokens;\r\n    accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\r\n\r\n    /*\r\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\r\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n     *  On success, the cToken has redeemAmount less of cash.\r\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n     */\r\n    doTransferOut(redeemer, redeemAmount);\r\n\r\n    /* We emit a Transfer event, and a Redeem event */\r\n    emit Transfer(redeemer, address(this), redeemTokens);\r\n    emit Redeem(redeemer, redeemAmount, redeemTokens);\r\n\r\n    /* We call the defense hook */\r\n    comptroller.redeemVerify(address(this), redeemer, redeemAmount, redeemTokens);\r\n  }\r\n\r\n  /**\r\n    * @notice Sender borrows assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      */\r\n  function borrowInternal(uint borrowAmount) internal nonReentrant {\r\n    accrueInterest();\r\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\r\n    borrowFresh(payable(msg.sender), borrowAmount);\r\n  }\r\n\r\n  /**\r\n    * @notice Users borrow assets from the protocol to their own address\r\n      * @param borrowAmount The amount of the underlying asset to borrow\r\n      */\r\n  function borrowFresh(address payable borrower, uint borrowAmount) internal {\r\n    /* Fail if borrow not allowed */\r\n    uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\r\n    if (allowed != 0) {\r\n      revert BorrowComptrollerRejection(allowed);\r\n    }\r\n\r\n    /* Verify market's block number equals current block number */\r\n    if (accrualBlockNumber != getBlockNumber()) {\r\n      revert BorrowFreshnessCheck();\r\n    }\r\n\r\n    /* Fail gracefully if protocol has insufficient underlying cash */\r\n    if (getCashPrior() < borrowAmount) {\r\n      revert BorrowCashNotAvailable();\r\n    }\r\n\r\n    /*\r\n     * We calculate the new borrower and total borrow balances, failing on overflow:\r\n     *  accountBorrowNew = accountBorrow + borrowAmount\r\n     *  totalBorrowsNew = totalBorrows + borrowAmount\r\n     */\r\n    uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\r\n    uint accountBorrowsNew = accountBorrowsPrev + borrowAmount;\r\n    uint totalBorrowsNew = totalBorrows + borrowAmount;\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n    /*\r\n     * We write the previously calculated values into storage.\r\n     *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\r\n    `*/\r\n    accountBorrows[borrower].principal = accountBorrowsNew;\r\n    accountBorrows[borrower].interestIndex = borrowIndex;\r\n    totalBorrows = totalBorrowsNew;\r\n\r\n    /*\r\n     * We invoke doTransferOut for the borrower and the borrowAmount.\r\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n     *  On success, the cToken borrowAmount less of cash.\r\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n     */\r\n    doTransferOut(borrower, borrowAmount);\r\n\r\n    /* We emit a Borrow event */\r\n    emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\r\n  }\r\n\r\n  /**\r\n   * @notice Sender repays their own borrow\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     */\r\n  function repayBorrowInternal(uint repayAmount) internal nonReentrant {\r\n    accrueInterest();\r\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\r\n    repayBorrowFresh(msg.sender, msg.sender, repayAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Sender repays a borrow belonging to borrower\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\r\n     */\r\n  function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant {\r\n    accrueInterest();\r\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\r\n    repayBorrowFresh(msg.sender, borrower, repayAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Borrows are repaid by another user (possibly the borrower).\r\n     * @param payer the account paying off the borrow\r\n     * @param borrower the account with the debt being payed off\r\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\r\n     * @return (uint) the actual repayment amount.\r\n     */\r\n  function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint) {\r\n    /* Fail if repayBorrow not allowed */\r\n    uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\r\n    if (allowed != 0) {\r\n      revert RepayBorrowComptrollerRejection(allowed);\r\n    }\r\n\r\n    /* Verify market's block number equals current block number */\r\n    if (accrualBlockNumber != getBlockNumber()) {\r\n      revert RepayBorrowFreshnessCheck();\r\n    }\r\n\r\n    /* We fetch the amount the borrower owes, with accumulated interest */\r\n    uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\r\n\r\n    /* If repayAmount == -1, repayAmount = accountBorrows */\r\n    uint repayAmountFinal = repayAmount == type(uint).max ? accountBorrowsPrev : repayAmount;\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n    /*\r\n     * We call doTransferIn for the payer and the repayAmount\r\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n     *  On success, the cToken holds an additional repayAmount of cash.\r\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n     *   it returns the amount actually transferred, in case of a fee.\r\n     */\r\n    uint actualRepayAmount = doTransferIn(payer, repayAmountFinal);\r\n\r\n    /*\r\n     * We calculate the new borrower and total borrow balances, failing on underflow:\r\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\r\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\r\n     */\r\n    uint accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\r\n    uint totalBorrowsNew = totalBorrows - actualRepayAmount;\r\n\r\n    /* We write the previously calculated values into storage */\r\n    accountBorrows[borrower].principal = accountBorrowsNew;\r\n    accountBorrows[borrower].interestIndex = borrowIndex;\r\n    totalBorrows = totalBorrowsNew;\r\n\r\n    /* We emit a RepayBorrow event */\r\n    emit RepayBorrow(payer, borrower, actualRepayAmount, accountBorrowsNew, totalBorrowsNew);\r\n\r\n    return actualRepayAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice The sender liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     */\r\n  function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant {\r\n    accrueInterest();\r\n\r\n    uint error = cTokenCollateral.accrueInterest();\r\n    if (error != NO_ERROR) {\r\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\r\n      revert LiquidateAccrueCollateralInterestFailed(error);\r\n    }\r\n\r\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\r\n    liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\r\n  }\r\n\r\n  /**\r\n   * @notice The liquidator liquidates the borrowers collateral.\r\n     *  The collateral seized is transferred to the liquidator.\r\n     * @param borrower The borrower of this cToken to be liquidated\r\n     * @param liquidator The address repaying the borrow and seizing collateral\r\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\r\n     * @param repayAmount The amount of the underlying borrowed asset to repay\r\n     */\r\n  function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal {\r\n    /* Fail if liquidate not allowed */\r\n    uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\r\n    if (allowed != 0) {\r\n      revert LiquidateComptrollerRejection(allowed);\r\n    }\r\n\r\n    /* Verify market's block number equals current block number */\r\n    if (accrualBlockNumber != getBlockNumber()) {\r\n      revert LiquidateFreshnessCheck();\r\n    }\r\n\r\n    /* Verify cTokenCollateral market's block number equals current block number */\r\n    if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\r\n      revert LiquidateCollateralFreshnessCheck();\r\n    }\r\n\r\n    /* Fail if borrower = liquidator */\r\n    if (borrower == liquidator) {\r\n      revert LiquidateLiquidatorIsBorrower();\r\n    }\r\n\r\n    /* Fail if repayAmount = 0 */\r\n    if (repayAmount == 0) {\r\n      revert LiquidateCloseAmountIsZero();\r\n    }\r\n\r\n    /* Fail if repayAmount = -1 */\r\n    if (repayAmount == type(uint).max) {\r\n      revert LiquidateCloseAmountIsUintMax();\r\n    }\r\n\r\n    /* Fail if repayBorrow fails */\r\n    uint actualRepayAmount = repayBorrowFresh(liquidator, borrower, repayAmount);\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n    /* We calculate the number of collateral tokens that will be seized */\r\n    (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\r\n    require(amountSeizeError == NO_ERROR, \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\r\n\r\n    /* Revert if borrower collateral token balance < seizeTokens */\r\n    require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \"LIQUIDATE_SEIZE_TOO_MUCH\");\r\n\r\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\r\n    if (address(cTokenCollateral) == address(this)) {\r\n      seizeInternal(address(this), liquidator, borrower, seizeTokens);\r\n    } else {\r\n      require(cTokenCollateral.seize(liquidator, borrower, seizeTokens) == NO_ERROR, \"token seizure failed\");\r\n    }\r\n\r\n    /* We emit a LiquidateBorrow event */\r\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers collateral tokens (this market) to the liquidator.\r\n     * @dev Will fail unless called by another cToken during the process of liquidation.\r\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\r\n     * @param liquidator The account receiving seized collateral\r\n     * @param borrower The account having collateral seized\r\n     * @param seizeTokens The number of cTokens to seize\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function seize(address liquidator, address borrower, uint seizeTokens) override external nonReentrant returns (uint) {\r\n    seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\r\n\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers collateral tokens (this market) to the liquidator.\r\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\r\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\r\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\r\n     * @param liquidator The account receiving seized collateral\r\n     * @param borrower The account having collateral seized\r\n     * @param seizeTokens The number of cTokens to seize\r\n     */\r\n  function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal {\r\n    /* Fail if seize not allowed */\r\n    uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\r\n    if (allowed != 0) {\r\n      revert LiquidateSeizeComptrollerRejection(allowed);\r\n    }\r\n\r\n    /* Fail if borrower = liquidator */\r\n    if (borrower == liquidator) {\r\n      revert LiquidateSeizeLiquidatorIsBorrower();\r\n    }\r\n\r\n    /*\r\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\r\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\r\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\r\n     */\r\n    uint protocolSeizeTokens = mul_(seizeTokens, Exp({mantissa : protocolSeizeShareMantissa}));\r\n    uint liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\r\n    Exp memory exchangeRate = Exp({mantissa : exchangeRateStoredInternal()});\r\n    uint protocolSeizeAmount = mul_ScalarTruncate(exchangeRate, protocolSeizeTokens);\r\n    uint totalReservesNew = totalReserves + protocolSeizeAmount;\r\n\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n    /* We write the calculated values into storage */\r\n    totalReserves = totalReservesNew;\r\n    totalSupply = totalSupply - protocolSeizeTokens;\r\n    accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\r\n    accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens;\r\n\r\n    /* Emit a Transfer event */\r\n    emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\r\n    emit Transfer(borrower, address(this), protocolSeizeTokens);\r\n    emit ReservesAdded(address(this), protocolSeizeAmount, totalReservesNew);\r\n  }\r\n\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  /**\r\n    * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setPendingAdmin(address payable newPendingAdmin) override external returns (uint) {\r\n    // Check caller = admin\r\n    if (msg.sender != admin) {\r\n      revert SetPendingAdminOwnerCheck();\r\n    }\r\n\r\n    // Save current value, if any, for inclusion in log\r\n    address oldPendingAdmin = pendingAdmin;\r\n\r\n    // Store pendingAdmin with value newPendingAdmin\r\n    pendingAdmin = newPendingAdmin;\r\n\r\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n    * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _acceptAdmin() override external returns (uint) {\r\n    // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\r\n      revert AcceptAdminPendingAdminCheck();\r\n    }\r\n\r\n    // Save current values for inclusion in log\r\n    address oldAdmin = admin;\r\n    address oldPendingAdmin = pendingAdmin;\r\n\r\n    // Store admin with value pendingAdmin\r\n    admin = pendingAdmin;\r\n\r\n    // Clear the pending value\r\n    pendingAdmin = payable(address(0));\r\n\r\n    emit NewAdmin(oldAdmin, admin);\r\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n    * @notice Sets a new comptroller for the market\r\n      * @dev Admin function to set a new comptroller\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setComptroller(ComptrollerInterface newComptroller) override public returns (uint) {\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      revert SetComptrollerOwnerCheck();\r\n    }\r\n\r\n    ComptrollerInterface oldComptroller = comptroller;\r\n    // Ensure invoke comptroller.isComptroller() returns true\r\n    require(newComptroller.isComptroller(), \"marker method returned false\");\r\n\r\n    // Set market's comptroller to newComptroller\r\n    comptroller = newComptroller;\r\n\r\n    // Emit NewComptroller(oldComptroller, newComptroller)\r\n    emit NewComptroller(oldComptroller, newComptroller);\r\n\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n    * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\r\n      * @dev Admin function to accrue interest and set a new reserve factor\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setReserveFactor(uint newReserveFactorMantissa) override external nonReentrant returns (uint) {\r\n    accrueInterest();\r\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\r\n    return _setReserveFactorFresh(newReserveFactorMantissa);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\r\n      * @dev Admin function to set a new reserve factor\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      revert SetReserveFactorAdminCheck();\r\n    }\r\n\r\n    // Verify market's block number equals current block number\r\n    if (accrualBlockNumber != getBlockNumber()) {\r\n      revert SetReserveFactorFreshCheck();\r\n    }\r\n\r\n    // Check newReserveFactor ≤ maxReserveFactor\r\n    if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\r\n      revert SetReserveFactorBoundsCheck();\r\n    }\r\n\r\n    uint oldReserveFactorMantissa = reserveFactorMantissa;\r\n    reserveFactorMantissa = newReserveFactorMantissa;\r\n\r\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\r\n\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Accrues interest and reduces reserves by transferring from msg.sender\r\n     * @param addAmount Amount of addition to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\r\n    accrueInterest();\r\n\r\n    // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\r\n    _addReservesFresh(addAmount);\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Add reserves by transferring from caller\r\n     * @dev Requires fresh interest accrual\r\n     * @param addAmount Amount of addition to reserves\r\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\r\n     */\r\n  function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\r\n    // totalReserves + actualAddAmount\r\n    uint totalReservesNew;\r\n    uint actualAddAmount;\r\n\r\n    // We fail gracefully unless market's block number equals current block number\r\n    if (accrualBlockNumber != getBlockNumber()) {\r\n      revert AddReservesFactorFreshCheck(actualAddAmount);\r\n    }\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n    /*\r\n     * We call doTransferIn for the caller and the addAmount\r\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\r\n     *  On success, the cToken holds an additional addAmount of cash.\r\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n     *  it returns the amount actually transferred, in case of a fee.\r\n     */\r\n\r\n    actualAddAmount = doTransferIn(msg.sender, addAmount);\r\n\r\n    totalReservesNew = totalReserves + actualAddAmount;\r\n\r\n    // Store reserves[n+1] = reserves[n] + actualAddAmount\r\n    totalReserves = totalReservesNew;\r\n\r\n    /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\r\n    emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\r\n\r\n    /* Return (NO_ERROR, actualAddAmount) */\r\n    return (NO_ERROR, actualAddAmount);\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice Accrues interest and reduces reserves by transferring to admin\r\n     * @param reduceAmount Amount of reduction to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _reduceReserves(uint reduceAmount) override external nonReentrant returns (uint) {\r\n    accrueInterest();\r\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\r\n    return _reduceReservesFresh(reduceAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Reduces reserves by transferring to admin\r\n     * @dev Requires fresh interest accrual\r\n     * @param reduceAmount Amount of reduction to reserves\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\r\n    // totalReserves - reduceAmount\r\n    uint totalReservesNew;\r\n\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      revert ReduceReservesAdminCheck();\r\n    }\r\n\r\n    // We fail gracefully unless market's block number equals current block number\r\n    if (accrualBlockNumber != getBlockNumber()) {\r\n      revert ReduceReservesFreshCheck();\r\n    }\r\n\r\n    // Fail gracefully if protocol has insufficient underlying cash\r\n    if (getCashPrior() < reduceAmount) {\r\n      revert ReduceReservesCashNotAvailable();\r\n    }\r\n\r\n    // Check reduceAmount ≤ reserves[n] (totalReserves)\r\n    if (reduceAmount > totalReserves) {\r\n      revert ReduceReservesCashValidation();\r\n    }\r\n\r\n    /////////////////////////\r\n    // EFFECTS & INTERACTIONS\r\n    // (No safe failures beyond this point)\r\n\r\n    totalReservesNew = totalReserves - reduceAmount;\r\n\r\n    // Store reserves[n+1] = reserves[n] - reduceAmount\r\n    totalReserves = totalReservesNew;\r\n\r\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\r\n    doTransferOut(admin, reduceAmount);\r\n\r\n    emit ReservesReduced(admin, reduceAmount, totalReservesNew);\r\n\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\r\n     * @dev Admin function to accrue interest and update the interest rate model\r\n     * @param newInterestRateModel the new interest rate model to use\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) override public returns (uint) {\r\n    accrueInterest();\r\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\r\n    return _setInterestRateModelFresh(newInterestRateModel);\r\n  }\r\n\r\n  /**\r\n   * @notice updates the interest rate model (*requires fresh interest accrual)\r\n     * @dev Admin function to update the interest rate model\r\n     * @param newInterestRateModel the new interest rate model to use\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n  function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\r\n\r\n    // Used to store old model for use in the event that is emitted on success\r\n    InterestRateModel oldInterestRateModel;\r\n\r\n    // Check caller is admin\r\n    if (msg.sender != admin) {\r\n      revert SetInterestRateModelOwnerCheck();\r\n    }\r\n\r\n    // We fail gracefully unless market's block number equals current block number\r\n    if (accrualBlockNumber != getBlockNumber()) {\r\n      revert SetInterestRateModelFreshCheck();\r\n    }\r\n\r\n    // Track the market's current interest rate model\r\n    oldInterestRateModel = interestRateModel;\r\n\r\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\r\n    require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\r\n\r\n    // Set the interest rate model to newInterestRateModel\r\n    interestRateModel = newInterestRateModel;\r\n\r\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\r\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\r\n\r\n    return NO_ERROR;\r\n  }\r\n\r\n  /*** Safe Token ***/\r\n\r\n  /**\r\n   * @notice Gets balance of this contract in terms of the underlying\r\n     * @dev This excludes the value of the current message, if any\r\n     * @return The quantity of underlying owned by this contract\r\n     */\r\n  function getCashPrior() virtual internal view returns (uint);\r\n\r\n  /**\r\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\r\n     *  This may revert due to insufficient balance or insufficient allowance.\r\n     */\r\n  function doTransferIn(address from, uint amount) virtual internal returns (uint);\r\n\r\n  /**\r\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\r\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\r\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\r\n     */\r\n  function doTransferOut(address payable to, uint amount) virtual internal;\r\n\r\n\r\n  /*** Reentrancy Guard ***/\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     */\r\n  modifier nonReentrant() {\r\n    require(_notEntered, \"re-entered\");\r\n    _notEntered = false;\r\n    _;\r\n    _notEntered = true;\r\n    // get a gas-refund post-Istanbul\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/CTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./ComptrollerInterface.sol\";\r\nimport \"./InterestRateModel.sol\";\r\nimport \"./EIP20NonStandardInterface.sol\";\r\nimport \"./ErrorReporter.sol\";\r\n\r\ncontract CTokenStorage {\r\n  /**\r\n   * @dev Guard variable for re-entrancy checks\r\n     */\r\n  bool internal _notEntered;\r\n\r\n  /**\r\n   * @notice EIP-20 token name for this token\r\n     */\r\n  string public name;\r\n\r\n  /**\r\n   * @notice EIP-20 token symbol for this token\r\n     */\r\n  string public symbol;\r\n\r\n  /**\r\n   * @notice EIP-20 token decimals for this token\r\n     */\r\n  uint8 public decimals;\r\n\r\n  // Maximum borrow rate that can ever be applied (.0005% / block)\r\n  uint internal constant borrowRateMaxMantissa = 0.0005e16;\r\n\r\n  // Maximum fraction of interest that can be set aside for reserves\r\n  uint internal constant reserveFactorMaxMantissa = 1e18;\r\n\r\n  /**\r\n   * @notice Administrator for this contract\r\n     */\r\n  address payable public admin;\r\n\r\n  /**\r\n   * @notice Pending administrator for this contract\r\n     */\r\n  address payable public pendingAdmin;\r\n\r\n  /**\r\n   * @notice Contract which oversees inter-cToken operations\r\n     */\r\n  ComptrollerInterface public comptroller;\r\n\r\n  /**\r\n   * @notice Model which tells what the current interest rate should be\r\n     */\r\n  InterestRateModel public interestRateModel;\r\n\r\n  // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\r\n  uint internal initialExchangeRateMantissa;\r\n\r\n  /**\r\n   * @notice Fraction of interest currently set aside for reserves\r\n     */\r\n  uint public reserveFactorMantissa;\r\n\r\n  /**\r\n   * @notice Block number that interest was last accrued at\r\n     */\r\n  uint public accrualBlockNumber;\r\n\r\n  /**\r\n   * @notice Accumulator of the total earned interest rate since the opening of the market\r\n     */\r\n  uint public borrowIndex;\r\n\r\n  /**\r\n   * @notice Total amount of outstanding borrows of the underlying in this market\r\n     */\r\n  uint public totalBorrows;\r\n\r\n  /**\r\n   * @notice Total amount of reserves of the underlying held in this market\r\n     */\r\n  uint public totalReserves;\r\n\r\n  /**\r\n   * @notice Total number of tokens in circulation\r\n     */\r\n  uint public totalSupply;\r\n\r\n  // Official record of token balances for each account\r\n  mapping(address => uint) internal accountTokens;\r\n\r\n  // Approved token transfer amounts on behalf of others\r\n  mapping(address => mapping(address => uint)) internal transferAllowances;\r\n\r\n  /**\r\n   * @notice Container for borrow balance information\r\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\r\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\r\n     */\r\n  struct BorrowSnapshot {\r\n    uint principal;\r\n    uint interestIndex;\r\n  }\r\n\r\n  // Mapping of account addresses to outstanding borrow balances\r\n  mapping(address => BorrowSnapshot) internal accountBorrows;\r\n\r\n  /**\r\n   * @notice Share of seized collateral that is added to reserves\r\n     */\r\n  uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\r\n}\r\n\r\nabstract contract CTokenInterface is CTokenStorage {\r\n  /**\r\n   * @notice Indicator that this is a CToken contract (for inspection)\r\n     */\r\n  bool public constant isCToken = true;\r\n\r\n\r\n  /*** Market Events ***/\r\n\r\n  /**\r\n   * @notice Event emitted when interest is accrued\r\n     */\r\n  event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\r\n\r\n  /**\r\n   * @notice Event emitted when tokens are minted\r\n     */\r\n  event Mint(address minter, uint mintAmount, uint mintTokens);\r\n\r\n  /**\r\n   * @notice Event emitted when tokens are redeemed\r\n     */\r\n  event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\r\n\r\n  /**\r\n   * @notice Event emitted when underlying is borrowed\r\n     */\r\n  event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\r\n\r\n  /**\r\n   * @notice Event emitted when a borrow is repaid\r\n     */\r\n  event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\r\n\r\n  /**\r\n   * @notice Event emitted when a borrow is liquidated\r\n     */\r\n  event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\r\n\r\n\r\n  /*** Admin Events ***/\r\n\r\n  /**\r\n   * @notice Event emitted when pendingAdmin is changed\r\n     */\r\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n  /**\r\n   * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\r\n     */\r\n  event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @notice Event emitted when comptroller is changed\r\n     */\r\n  event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\r\n\r\n  /**\r\n   * @notice Event emitted when interestRateModel is changed\r\n     */\r\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\r\n\r\n  /**\r\n   * @notice Event emitted when the reserve factor is changed\r\n     */\r\n  event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\r\n\r\n  /**\r\n   * @notice Event emitted when the reserves are added\r\n     */\r\n  event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\r\n\r\n  /**\r\n   * @notice Event emitted when the reserves are reduced\r\n     */\r\n  event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\r\n\r\n  /**\r\n   * @notice EIP20 Transfer event\r\n     */\r\n  event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n  /**\r\n   * @notice EIP20 Approval event\r\n     */\r\n  event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n\r\n  /*** User Interface ***/\r\n\r\n  function transfer(address dst, uint amount) virtual external returns (bool);\r\n\r\n  function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\r\n\r\n  function approve(address spender, uint amount) virtual external returns (bool);\r\n\r\n  function allowance(address owner, address spender) virtual external view returns (uint);\r\n\r\n  function balanceOf(address owner) virtual external view returns (uint);\r\n\r\n  function balanceOfUnderlying(address owner) virtual external returns (uint);\r\n\r\n  function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\r\n\r\n  function borrowRatePerBlock() virtual external view returns (uint);\r\n\r\n  function supplyRatePerBlock() virtual external view returns (uint);\r\n\r\n  function totalBorrowsCurrent() virtual external returns (uint);\r\n\r\n  function borrowBalanceCurrent(address account) virtual external returns (uint);\r\n\r\n  function borrowBalanceStored(address account) virtual external view returns (uint);\r\n\r\n  function exchangeRateCurrent() virtual external returns (uint);\r\n\r\n  function exchangeRateStored() virtual external view returns (uint);\r\n\r\n  function getCash() virtual external view returns (uint);\r\n\r\n  function accrueInterest() virtual external returns (uint);\r\n\r\n  function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\r\n\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  function _setPendingAdmin(address payable newPendingAdmin) virtual external returns (uint);\r\n\r\n  function _acceptAdmin() virtual external returns (uint);\r\n\r\n  function _setComptroller(ComptrollerInterface newComptroller) virtual external returns (uint);\r\n\r\n  function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\r\n\r\n  function _reduceReserves(uint reduceAmount) virtual external returns (uint);\r\n\r\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual external returns (uint);\r\n}\r\n\r\ncontract CErc20Storage {\r\n  /**\r\n   * @notice Underlying asset for this CToken\r\n     */\r\n  address public underlying;\r\n}\r\n\r\nabstract contract CErc20Interface is CErc20Storage {\r\n\r\n  /*** User Interface ***/\r\n\r\n  function mint(uint mintAmount) virtual external returns (uint);\r\n\r\n  function redeem(uint redeemTokens) virtual external returns (uint);\r\n\r\n  function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\r\n\r\n  function borrow(uint borrowAmount) virtual external returns (uint);\r\n\r\n  function repayBorrow(uint repayAmount) virtual external returns (uint);\r\n\r\n  function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\r\n\r\n  function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\r\n\r\n  function sweepToken(EIP20NonStandardInterface token) virtual external;\r\n\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  function _addReserves(uint addAmount) virtual external returns (uint);\r\n}\r\n\r\ncontract CDelegationStorage {\r\n  /**\r\n   * @notice Implementation address for this contract\r\n     */\r\n  address public implementation;\r\n}\r\n\r\nabstract contract CDelegatorInterface is CDelegationStorage {\r\n  /**\r\n   * @notice Emitted when implementation is changed\r\n     */\r\n  event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n  /**\r\n   * @notice Called by the admin to update the implementation of the delegator\r\n     * @param implementation_ The address of the new implementation for delegation\r\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\r\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n     */\r\n  function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) virtual external;\r\n}\r\n\r\nabstract contract CDelegateInterface is CDelegationStorage {\r\n  /**\r\n   * @notice Called by the delegator on a delegate to initialize it for duty\r\n     * @dev Should revert if any issues arise which make it unfit for delegation\r\n     * @param data The encoded bytes data for any initialization\r\n     */\r\n  function _becomeImplementation(bytes memory data) virtual external;\r\n\r\n  /**\r\n   * @notice Called by the delegator on a delegate to forfeit its responsibility\r\n     */\r\n  function _resignImplementation() virtual external;\r\n}\r\n"
    },
    "contracts/test/compound-core/DAIInterestRateModelV3.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./JumpRateModelV2.sol\";\r\n\r\n/**\r\n  * @title Compound's DAIInterestRateModel Contract (version 3)\r\n  * @author Compound (modified by Dharma Labs)\r\n  * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper.\r\n  * Version 3 modifies the interest rate model in Version 2 by increasing the initial \"gap\" or slope of\r\n  * the model prior to the \"kink\" from 2% to 4%, and enabling updateable parameters.\r\n  */\r\ncontract DAIInterestRateModelV3 is JumpRateModelV2 {\r\n  uint256 private constant BASE = 1e18;\r\n  uint256 private constant RAY_BASE = 1e27;\r\n  uint256 private constant RAY_TO_BASE_SCALE = 1e9;\r\n  uint256 private constant SECONDS_PER_BLOCK = 15;\r\n\r\n  /**\r\n   * @notice The additional margin per block separating the base borrow rate from the roof.\r\n     */\r\n  uint public gapPerBlock;\r\n\r\n  /**\r\n   * @notice The assumed (1 - reserve factor) used to calculate the minimum borrow rate (reserve factor = 0.05)\r\n     */\r\n  uint public constant assumedOneMinusReserveFactorMantissa = 0.95e18;\r\n\r\n  PotLike pot;\r\n  JugLike jug;\r\n\r\n  /**\r\n   * @notice Construct an interest rate model\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     * @param pot_ The address of the Dai pot (where DSR is earned)\r\n     * @param jug_ The address of the Dai jug (where SF is kept)\r\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\r\n     */\r\n  constructor(uint jumpMultiplierPerYear, uint kink_, address pot_, address jug_, address owner_) JumpRateModelV2(0, 0, jumpMultiplierPerYear, kink_, owner_) {\r\n    gapPerBlock = 4e16 / blocksPerYear;\r\n    pot = PotLike(pot_);\r\n    jug = JugLike(jug_);\r\n    poke();\r\n  }\r\n\r\n  /**\r\n   * @notice External function to update the parameters of the interest rate model\r\n     * @param gapPerYear The Additional margin per year separating the base borrow rate from the roof. (scaled by BASE)\r\n     * @param jumpMultiplierPerYear The jumpMultiplierPerYear after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n  function updateJumpRateModel(uint /*baseRatePerYear*/, uint gapPerYear, uint jumpMultiplierPerYear, uint kink_) override external {\r\n    require(msg.sender == owner, \"only the owner may call this function.\");\r\n    gapPerBlock = gapPerYear / blocksPerYear;\r\n    updateJumpRateModelInternal(0, 0, jumpMultiplierPerYear, kink_);\r\n    poke();\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the current supply interest rate per block including the Dai savings rate\r\n     * @param cash The total amount of cash the market has\r\n     * @param borrows The total amount of borrows the market has outstanding\r\n     * @param reserves The total amnount of reserves the market has\r\n     * @param reserveFactorMantissa The current reserve factor the market has\r\n     * @return The supply rate per block (as a percentage, and scaled by BASE)\r\n     */\r\n  function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) override(BaseJumpRateModelV2, InterestRateModel) public view returns (uint) {\r\n    uint protocolRate = super.getSupplyRate(cash, borrows, reserves, reserveFactorMantissa);\r\n\r\n    uint underlying = cash + borrows - reserves;\r\n    if (underlying == 0) {\r\n      return protocolRate;\r\n    } else {\r\n      uint cashRate = cash * dsrPerBlock() / underlying;\r\n      return cashRate + protocolRate;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the Dai savings rate per block\r\n     * @return The Dai savings rate per block (as a percentage, and scaled by BASE)\r\n     */\r\n  function dsrPerBlock() public view returns (uint) {\r\n    return (pot.dsr() - RAY_BASE) // scaled RAY_BASE aka RAY, and includes an extra \"ONE\" before subtraction\r\n    / RAY_TO_BASE_SCALE // descale to BASE\r\n    * SECONDS_PER_BLOCK;\r\n    // seconds per block\r\n  }\r\n\r\n  /**\r\n   * @notice Resets the baseRate and multiplier per block based on the stability fee and Dai savings rate\r\n     */\r\n  function poke() public {\r\n    (uint duty,) = jug.ilks(\"ETH-A\");\r\n    uint stabilityFeePerBlock = (duty + jug.base() - RAY_BASE) / RAY_TO_BASE_SCALE * SECONDS_PER_BLOCK;\r\n\r\n    // We ensure the minimum borrow rate >= DSR / (1 - reserve factor)\r\n    baseRatePerBlock = dsrPerBlock() * BASE / assumedOneMinusReserveFactorMantissa;\r\n\r\n    // The roof borrow rate is max(base rate, stability fee) + gap, from which we derive the slope\r\n    if (baseRatePerBlock < stabilityFeePerBlock) {\r\n      multiplierPerBlock = (stabilityFeePerBlock - baseRatePerBlock + gapPerBlock) * BASE / kink;\r\n    } else {\r\n      multiplierPerBlock = gapPerBlock * BASE / kink;\r\n    }\r\n\r\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\r\n  }\r\n}\r\n\r\n\r\n/*** Maker Interfaces ***/\r\n\r\ninterface PotLike {\r\n  function chi() external view returns (uint);\r\n\r\n  function dsr() external view returns (uint);\r\n\r\n  function rho() external view returns (uint);\r\n\r\n  function pie(address) external view returns (uint);\r\n\r\n  function drip() external returns (uint);\r\n\r\n  function join(uint) external;\r\n\r\n  function exit(uint) external;\r\n}\r\n\r\ncontract JugLike {\r\n  // --- Data ---\r\n  struct Ilk {\r\n    uint256 duty;\r\n    uint256 rho;\r\n  }\r\n\r\n  mapping(bytes32 => Ilk) public ilks;\r\n  uint256 public base;\r\n}\r\n"
    },
    "contracts/test/compound-core/EIP20Interface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @title ERC 20 Token Standard Interface\r\n *  https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface EIP20Interface {\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n    * @notice Get the total number of tokens in circulation\r\n      * @return The supply of tokens\r\n      */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return balance The balance\r\n     */\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  /**\r\n    * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return success Whether or not the transfer succeeded\r\n      */\r\n  function transfer(address dst, uint256 amount) external returns (bool success);\r\n\r\n  /**\r\n    * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return success Whether or not the transfer succeeded\r\n      */\r\n  function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\r\n\r\n  /**\r\n    * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved (-1 means infinite)\r\n      * @return success Whether or not the approval succeeded\r\n      */\r\n  function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n  /**\r\n    * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\r\n      */\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 amount);\r\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n"
    },
    "contracts/test/compound-core/EIP20NonStandardInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @title EIP20NonStandardInterface\r\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\r\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n */\r\ninterface EIP20NonStandardInterface {\r\n\r\n  /**\r\n   * @notice Get the total number of tokens in circulation\r\n     * @return The supply of tokens\r\n     */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return balance The balance\r\n     */\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  ///\r\n  /// !!!!!!!!!!!!!!\r\n  /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\r\n  /// !!!!!!!!!!!!!!\r\n  ///\r\n\r\n  /**\r\n    * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n  function transfer(address dst, uint256 amount) external;\r\n\r\n  ///\r\n  /// !!!!!!!!!!!!!!\r\n  /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\r\n  /// !!!!!!!!!!!!!!\r\n  ///\r\n\r\n  /**\r\n    * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      */\r\n  function transferFrom(address src, address dst, uint256 amount) external;\r\n\r\n  /**\r\n    * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved\r\n      * @return success Whether or not the approval succeeded\r\n      */\r\n  function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n  /**\r\n    * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @return remaining The number of tokens allowed to be spent\r\n      */\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 amount);\r\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n"
    },
    "contracts/test/compound-core/ErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\ncontract ComptrollerErrorReporter {\r\n  enum Error {\r\n    NO_ERROR,\r\n    UNAUTHORIZED,\r\n    COMPTROLLER_MISMATCH,\r\n    INSUFFICIENT_SHORTFALL,\r\n    INSUFFICIENT_LIQUIDITY,\r\n    INVALID_CLOSE_FACTOR,\r\n    INVALID_COLLATERAL_FACTOR,\r\n    INVALID_LIQUIDATION_INCENTIVE,\r\n    MARKET_NOT_ENTERED, // no longer possible\r\n    MARKET_NOT_LISTED,\r\n    MARKET_ALREADY_LISTED,\r\n    MATH_ERROR,\r\n    NONZERO_BORROW_BALANCE,\r\n    PRICE_ERROR,\r\n    REJECTION,\r\n    SNAPSHOT_ERROR,\r\n    TOO_MANY_ASSETS,\r\n    TOO_MUCH_REPAY\r\n  }\r\n\r\n  enum FailureInfo {\r\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\r\n    EXIT_MARKET_BALANCE_OWED,\r\n    EXIT_MARKET_REJECTION,\r\n    SET_CLOSE_FACTOR_OWNER_CHECK,\r\n    SET_CLOSE_FACTOR_VALIDATION,\r\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\r\n    SET_COLLATERAL_FACTOR_VALIDATION,\r\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\r\n    SET_IMPLEMENTATION_OWNER_CHECK,\r\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\r\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\r\n    SET_MAX_ASSETS_OWNER_CHECK,\r\n    SET_PENDING_ADMIN_OWNER_CHECK,\r\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\r\n    SET_PRICE_ORACLE_OWNER_CHECK,\r\n    SUPPORT_MARKET_EXISTS,\r\n    SUPPORT_MARKET_OWNER_CHECK,\r\n    SET_PAUSE_GUARDIAN_OWNER_CHECK\r\n  }\r\n\r\n  /**\r\n    * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n      **/\r\n  event Failure(uint error, uint info, uint detail);\r\n\r\n  /**\r\n    * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n      */\r\n  function fail(Error err, FailureInfo info) internal returns (uint) {\r\n    emit Failure(uint(err), uint(info), 0);\r\n\r\n    return uint(err);\r\n  }\r\n\r\n  /**\r\n    * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n      */\r\n  function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\r\n    emit Failure(uint(err), uint(info), opaqueError);\r\n\r\n    return uint(err);\r\n  }\r\n}\r\n\r\ncontract TokenErrorReporter {\r\n  uint public constant NO_ERROR = 0; // support legacy return codes\r\n\r\n  error TransferComptrollerRejection(uint256 errorCode);\r\n  error TransferNotAllowed();\r\n  error TransferNotEnough();\r\n  error TransferTooMuch();\r\n\r\n  error MintComptrollerRejection(uint256 errorCode);\r\n  error MintFreshnessCheck();\r\n\r\n  error RedeemComptrollerRejection(uint256 errorCode);\r\n  error RedeemFreshnessCheck();\r\n  error RedeemTransferOutNotPossible();\r\n\r\n  error BorrowComptrollerRejection(uint256 errorCode);\r\n  error BorrowFreshnessCheck();\r\n  error BorrowCashNotAvailable();\r\n\r\n  error RepayBorrowComptrollerRejection(uint256 errorCode);\r\n  error RepayBorrowFreshnessCheck();\r\n\r\n  error LiquidateComptrollerRejection(uint256 errorCode);\r\n  error LiquidateFreshnessCheck();\r\n  error LiquidateCollateralFreshnessCheck();\r\n  error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\r\n  error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\r\n  error LiquidateLiquidatorIsBorrower();\r\n  error LiquidateCloseAmountIsZero();\r\n  error LiquidateCloseAmountIsUintMax();\r\n  error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\r\n\r\n  error LiquidateSeizeComptrollerRejection(uint256 errorCode);\r\n  error LiquidateSeizeLiquidatorIsBorrower();\r\n\r\n  error AcceptAdminPendingAdminCheck();\r\n\r\n  error SetComptrollerOwnerCheck();\r\n  error SetPendingAdminOwnerCheck();\r\n\r\n  error SetReserveFactorAdminCheck();\r\n  error SetReserveFactorFreshCheck();\r\n  error SetReserveFactorBoundsCheck();\r\n\r\n  error AddReservesFactorFreshCheck(uint256 actualAddAmount);\r\n\r\n  error ReduceReservesAdminCheck();\r\n  error ReduceReservesFreshCheck();\r\n  error ReduceReservesCashNotAvailable();\r\n  error ReduceReservesCashValidation();\r\n\r\n  error SetInterestRateModelOwnerCheck();\r\n  error SetInterestRateModelFreshCheck();\r\n}\r\n"
    },
    "contracts/test/compound-core/ExponentialNoError.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @title Exponential module for storing fixed-precision decimals\r\n * @author Compound\r\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\r\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\r\n *         `Exp({mantissa: 5100000000000000000})`.\r\n */\r\ncontract ExponentialNoError {\r\n  uint constant expScale = 1e18;\r\n  uint constant doubleScale = 1e36;\r\n  uint constant halfExpScale = expScale / 2;\r\n  uint constant mantissaOne = expScale;\r\n\r\n  struct Exp {\r\n    uint mantissa;\r\n  }\r\n\r\n  struct Double {\r\n    uint mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n  function truncate(Exp memory exp) pure internal returns (uint) {\r\n    // Note: We are not using careful math here as we're performing a division that cannot fail\r\n    return exp.mantissa / expScale;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n  function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\r\n    Exp memory product = mul_(a, scalar);\r\n    return truncate(product);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n     */\r\n  function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\r\n    Exp memory product = mul_(a, scalar);\r\n    return add_(truncate(product), addend);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if first Exp is less than second Exp.\r\n     */\r\n  function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n    return left.mantissa < right.mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if left Exp <= right Exp.\r\n     */\r\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n    return left.mantissa <= right.mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if left Exp > right Exp.\r\n     */\r\n  function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n    return left.mantissa > right.mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev returns true if Exp is exactly zero\r\n     */\r\n  function isZeroExp(Exp memory value) pure internal returns (bool) {\r\n    return value.mantissa == 0;\r\n  }\r\n\r\n  function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\r\n    require(n < 2 ** 224, errorMessage);\r\n    return uint224(n);\r\n  }\r\n\r\n  function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\r\n    require(n < 2 ** 32, errorMessage);\r\n    return uint32(n);\r\n  }\r\n\r\n  function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n    return Exp({mantissa : add_(a.mantissa, b.mantissa)});\r\n  }\r\n\r\n  function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n    return Double({mantissa : add_(a.mantissa, b.mantissa)});\r\n  }\r\n\r\n  function add_(uint a, uint b) pure internal returns (uint) {\r\n    return a + b;\r\n  }\r\n\r\n  function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n    return Exp({mantissa : sub_(a.mantissa, b.mantissa)});\r\n  }\r\n\r\n  function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n    return Double({mantissa : sub_(a.mantissa, b.mantissa)});\r\n  }\r\n\r\n  function sub_(uint a, uint b) pure internal returns (uint) {\r\n    return a - b;\r\n  }\r\n\r\n  function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n    return Exp({mantissa : mul_(a.mantissa, b.mantissa) / expScale});\r\n  }\r\n\r\n  function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n    return Exp({mantissa : mul_(a.mantissa, b)});\r\n  }\r\n\r\n  function mul_(uint a, Exp memory b) pure internal returns (uint) {\r\n    return mul_(a, b.mantissa) / expScale;\r\n  }\r\n\r\n  function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n    return Double({mantissa : mul_(a.mantissa, b.mantissa) / doubleScale});\r\n  }\r\n\r\n  function mul_(Double memory a, uint b) pure internal returns (Double memory) {\r\n    return Double({mantissa : mul_(a.mantissa, b)});\r\n  }\r\n\r\n  function mul_(uint a, Double memory b) pure internal returns (uint) {\r\n    return mul_(a, b.mantissa) / doubleScale;\r\n  }\r\n\r\n  function mul_(uint a, uint b) pure internal returns (uint) {\r\n    return a * b;\r\n  }\r\n\r\n  function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n    return Exp({mantissa : div_(mul_(a.mantissa, expScale), b.mantissa)});\r\n  }\r\n\r\n  function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n    return Exp({mantissa : div_(a.mantissa, b)});\r\n  }\r\n\r\n  function div_(uint a, Exp memory b) pure internal returns (uint) {\r\n    return div_(mul_(a, expScale), b.mantissa);\r\n  }\r\n\r\n  function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n    return Double({mantissa : div_(mul_(a.mantissa, doubleScale), b.mantissa)});\r\n  }\r\n\r\n  function div_(Double memory a, uint b) pure internal returns (Double memory) {\r\n    return Double({mantissa : div_(a.mantissa, b)});\r\n  }\r\n\r\n  function div_(uint a, Double memory b) pure internal returns (uint) {\r\n    return div_(mul_(a, doubleScale), b.mantissa);\r\n  }\r\n\r\n  function div_(uint a, uint b) pure internal returns (uint) {\r\n    return a / b;\r\n  }\r\n\r\n  function fraction(uint a, uint b) pure internal returns (Double memory) {\r\n    return Double({mantissa : div_(mul_(a, doubleScale), b)});\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/Governance/Comp.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\ncontract Comp {\r\n  /// @notice EIP-20 token name for this token\r\n  string public constant name = \"Compound\";\r\n\r\n  /// @notice EIP-20 token symbol for this token\r\n  string public constant symbol = \"COMP\";\r\n\r\n  /// @notice EIP-20 token decimals for this token\r\n  uint8 public constant decimals = 18;\r\n\r\n  /// @notice Total number of tokens in circulation\r\n  uint public constant totalSupply = 10000000e18; // 10 million Comp\r\n\r\n  /// @notice Allowance amounts on behalf of others\r\n  mapping(address => mapping(address => uint96)) internal allowances;\r\n\r\n  /// @notice Official record of token balances for each account\r\n  mapping(address => uint96) internal balances;\r\n\r\n  /// @notice A record of each accounts delegate\r\n  mapping(address => address) public delegates;\r\n\r\n  /// @notice A checkpoint for marking number of votes from a given block\r\n  struct Checkpoint {\r\n    uint32 fromBlock;\r\n    uint96 votes;\r\n  }\r\n\r\n  /// @notice A record of votes checkpoints for each account, by index\r\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n  /// @notice The number of checkpoints for each account\r\n  mapping(address => uint32) public numCheckpoints;\r\n\r\n  /// @notice The EIP-712 typehash for the contract's domain\r\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n  /// @notice A record of states for signing / validating signatures\r\n  mapping(address => uint) public nonces;\r\n\r\n  /// @notice An event thats emitted when an account changes its delegate\r\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n  /// @notice An event thats emitted when a delegate account's vote balance changes\r\n  event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n  /// @notice The standard EIP-20 transfer event\r\n  event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n  /// @notice The standard EIP-20 approval event\r\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n  /**\r\n   * @notice Construct a new Comp token\r\n     * @param account The initial account to grant all the tokens\r\n     */\r\n  constructor(address account) {\r\n    balances[account] = uint96(totalSupply);\r\n    emit Transfer(address(0), account, totalSupply);\r\n  }\r\n\r\n  /**\r\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n  function allowance(address account, address spender) external view returns (uint) {\r\n    return allowances[account][spender];\r\n  }\r\n\r\n  /**\r\n   * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n  function approve(address spender, uint rawAmount) external returns (bool) {\r\n    uint96 amount;\r\n    if (rawAmount == type(uint).max) {\r\n      amount = type(uint96).max;\r\n    } else {\r\n      amount = safe96(rawAmount, \"Comp::approve: amount exceeds 96 bits\");\r\n    }\r\n\r\n    allowances[msg.sender][spender] = amount;\r\n\r\n    emit Approval(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n  function balanceOf(address account) external view returns (uint) {\r\n    return balances[account];\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n  function transfer(address dst, uint rawAmount) external returns (bool) {\r\n    uint96 amount = safe96(rawAmount, \"Comp::transfer: amount exceeds 96 bits\");\r\n    _transferTokens(msg.sender, dst, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n  function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\r\n    address spender = msg.sender;\r\n    uint96 spenderAllowance = allowances[src][spender];\r\n    uint96 amount = safe96(rawAmount, \"Comp::approve: amount exceeds 96 bits\");\r\n\r\n    if (spender != src && spenderAllowance != type(uint96).max) {\r\n      uint96 newAllowance = sub96(spenderAllowance, amount, \"Comp::transferFrom: transfer amount exceeds spender allowance\");\r\n      allowances[src][spender] = newAllowance;\r\n\r\n      emit Approval(src, spender, newAllowance);\r\n    }\r\n\r\n    _transferTokens(src, dst, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n  function delegate(address delegatee) public {\r\n    return _delegate(msg.sender, delegatee);\r\n  }\r\n\r\n  /**\r\n   * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n  function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\r\n    bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), \"Comp::delegateBySig: invalid signature\");\r\n    require(nonce == nonces[signatory]++, \"Comp::delegateBySig: invalid nonce\");\r\n    require(block.timestamp <= expiry, \"Comp::delegateBySig: signature expired\");\r\n    return _delegate(signatory, delegatee);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n  function getCurrentVotes(address account) external view returns (uint96) {\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n  function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\r\n    require(blockNumber < block.number, \"Comp::getPriorVotes: not yet determined\");\r\n\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    if (nCheckpoints == 0) {\r\n      return 0;\r\n    }\r\n\r\n    // First check most recent balance\r\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n      return checkpoints[account][nCheckpoints - 1].votes;\r\n    }\r\n\r\n    // Next check implicit zero balance\r\n    if (checkpoints[account][0].fromBlock > blockNumber) {\r\n      return 0;\r\n    }\r\n\r\n    uint32 lower = 0;\r\n    uint32 upper = nCheckpoints - 1;\r\n    while (upper > lower) {\r\n      uint32 center = upper - (upper - lower) / 2;\r\n      // ceil, avoiding overflow\r\n      Checkpoint memory cp = checkpoints[account][center];\r\n      if (cp.fromBlock == blockNumber) {\r\n        return cp.votes;\r\n      } else if (cp.fromBlock < blockNumber) {\r\n        lower = center;\r\n      } else {\r\n        upper = center - 1;\r\n      }\r\n    }\r\n    return checkpoints[account][lower].votes;\r\n  }\r\n\r\n  function _delegate(address delegator, address delegatee) internal {\r\n    address currentDelegate = delegates[delegator];\r\n    uint96 delegatorBalance = balances[delegator];\r\n    delegates[delegator] = delegatee;\r\n\r\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n  }\r\n\r\n  function _transferTokens(address src, address dst, uint96 amount) internal {\r\n    require(src != address(0), \"Comp::_transferTokens: cannot transfer from the zero address\");\r\n    require(dst != address(0), \"Comp::_transferTokens: cannot transfer to the zero address\");\r\n\r\n    balances[src] = sub96(balances[src], amount, \"Comp::_transferTokens: transfer amount exceeds balance\");\r\n    balances[dst] = add96(balances[dst], amount, \"Comp::_transferTokens: transfer amount overflows\");\r\n    emit Transfer(src, dst, amount);\r\n\r\n    _moveDelegates(delegates[src], delegates[dst], amount);\r\n  }\r\n\r\n  function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\r\n    if (srcRep != dstRep && amount > 0) {\r\n      if (srcRep != address(0)) {\r\n        uint32 srcRepNum = numCheckpoints[srcRep];\r\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n        uint96 srcRepNew = sub96(srcRepOld, amount, \"Comp::_moveVotes: vote amount underflows\");\r\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n      }\r\n\r\n      if (dstRep != address(0)) {\r\n        uint32 dstRepNum = numCheckpoints[dstRep];\r\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n        uint96 dstRepNew = add96(dstRepOld, amount, \"Comp::_moveVotes: vote amount overflows\");\r\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\r\n    uint32 blockNumber = safe32(block.number, \"Comp::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n    } else {\r\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n      numCheckpoints[delegatee] = nCheckpoints + 1;\r\n    }\r\n\r\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n  }\r\n\r\n  function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n    require(n < 2 ** 32, errorMessage);\r\n    return uint32(n);\r\n  }\r\n\r\n  function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\r\n    require(n < 2 ** 96, errorMessage);\r\n    return uint96(n);\r\n  }\r\n\r\n  function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n    uint96 c = a + b;\r\n    require(c >= a, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n    require(b <= a, errorMessage);\r\n    return a - b;\r\n  }\r\n\r\n  function getChainId() internal view returns (uint) {\r\n    uint256 chainId;\r\n    assembly {chainId := chainid()}\r\n    return chainId;\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n  * @title Compound's InterestRateModel Interface\r\n  * @author Compound\r\n  */\r\nabstract contract InterestRateModel {\r\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\r\n  bool public constant isInterestRateModel = true;\r\n\r\n  /**\r\n    * @notice Calculates the current borrow interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amount of reserves the market has\r\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n  function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\r\n\r\n  /**\r\n    * @notice Calculates the current supply interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amount of reserves the market has\r\n      * @param reserveFactorMantissa The current reserve factor the market has\r\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n  function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\r\n}\r\n"
    },
    "contracts/test/compound-core/JumpRateModel.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./InterestRateModel.sol\";\r\n\r\n/**\r\n  * @title Compound's JumpRateModel Contract\r\n  * @author Compound\r\n  */\r\ncontract JumpRateModel is InterestRateModel {\r\n  event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);\r\n\r\n  uint256 private constant BASE = 1e18;\r\n\r\n  /**\r\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\r\n     */\r\n  uint public constant blocksPerYear = 2102400;\r\n\r\n  /**\r\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\r\n     */\r\n  uint public multiplierPerBlock;\r\n\r\n  /**\r\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\r\n     */\r\n  uint public baseRatePerBlock;\r\n\r\n  /**\r\n   * @notice The multiplierPerBlock after hitting a specified utilization point\r\n     */\r\n  uint public jumpMultiplierPerBlock;\r\n\r\n  /**\r\n   * @notice The utilization point at which the jump multiplier is applied\r\n     */\r\n  uint public kink;\r\n\r\n  /**\r\n   * @notice Construct an interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\r\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\r\n     * @param kink_ The utilization point at which the jump multiplier is applied\r\n     */\r\n  constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) {\r\n    baseRatePerBlock = baseRatePerYear / blocksPerYear;\r\n    multiplierPerBlock = multiplierPerYear / blocksPerYear;\r\n    jumpMultiplierPerBlock = jumpMultiplierPerYear / blocksPerYear;\r\n    kink = kink_;\r\n\r\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market (currently unused)\r\n     * @return The utilization rate as a mantissa between [0, BASE]\r\n     */\r\n  function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\r\n    // Utilization rate is 0 when there are no borrows\r\n    if (borrows == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return borrows * BASE / (cash + borrows - reserves);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\r\n     */\r\n  function getBorrowRate(uint cash, uint borrows, uint reserves) override public view returns (uint) {\r\n    uint util = utilizationRate(cash, borrows, reserves);\r\n\r\n    if (util <= kink) {\r\n      return (util * multiplierPerBlock / BASE) + baseRatePerBlock;\r\n    } else {\r\n      uint normalRate = (kink * multiplierPerBlock / BASE) + baseRatePerBlock;\r\n      uint excessUtil = util - kink;\r\n      return (excessUtil * jumpMultiplierPerBlock / BASE) + normalRate;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the current supply rate per block\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @param reserveFactorMantissa The current reserve factor for the market\r\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\r\n     */\r\n  function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) override public view returns (uint) {\r\n    uint oneMinusReserveFactor = BASE - reserveFactorMantissa;\r\n    uint borrowRate = getBorrowRate(cash, borrows, reserves);\r\n    uint rateToPool = borrowRate * oneMinusReserveFactor / BASE;\r\n    return utilizationRate(cash, borrows, reserves) * rateToPool / BASE;\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/JumpRateModelV2.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./BaseJumpRateModelV2.sol\";\r\nimport \"./InterestRateModel.sol\";\r\n\r\n\r\n/**\r\n  * @title Compound's JumpRateModel Contract V2 for V2 cTokens\r\n  * @author Arr00\r\n  * @notice Supports only for V2 cTokens\r\n  */\r\ncontract JumpRateModelV2 is InterestRateModel, BaseJumpRateModelV2 {\r\n\r\n  /**\r\n     * @notice Calculates the current borrow rate per block\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\r\n     */\r\n  function getBorrowRate(uint cash, uint borrows, uint reserves) override external view returns (uint) {\r\n    return getBorrowRateInternal(cash, borrows, reserves);\r\n  }\r\n\r\n  constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_)\r\n\r\n  BaseJumpRateModelV2(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_, owner_) {}\r\n}\r\n"
    },
    "contracts/test/compound-core/Maximillion.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CEther.sol\";\r\n\r\n/**\r\n * @title Compound's Maximillion Contract\r\n * @author Compound\r\n */\r\ncontract Maximillion {\r\n  /**\r\n   * @notice The default cEther market to repay in\r\n     */\r\n  CEther public cEther;\r\n\r\n  /**\r\n   * @notice Construct a Maximillion to repay max in a CEther market\r\n     */\r\n  constructor(CEther cEther_) {\r\n    cEther = cEther_;\r\n  }\r\n\r\n  /**\r\n   * @notice msg.sender sends Ether to repay an account's borrow in the cEther market\r\n     * @dev The provided Ether is applied towards the borrow balance, any excess is refunded\r\n     * @param borrower The address of the borrower account to repay on behalf of\r\n     */\r\n  function repayBehalf(address borrower) public payable {\r\n    repayBehalfExplicit(borrower, cEther);\r\n  }\r\n\r\n  /**\r\n   * @notice msg.sender sends Ether to repay an account's borrow in a cEther market\r\n     * @dev The provided Ether is applied towards the borrow balance, any excess is refunded\r\n     * @param borrower The address of the borrower account to repay on behalf of\r\n     * @param cEther_ The address of the cEther contract to repay in\r\n     */\r\n  function repayBehalfExplicit(address borrower, CEther cEther_) public payable {\r\n    uint received = msg.value;\r\n    uint borrows = cEther_.borrowBalanceCurrent(borrower);\r\n    if (received > borrows) {\r\n      cEther_.repayBorrowBehalf{value : borrows}(borrower);\r\n      payable(msg.sender).transfer(received - borrows);\r\n    } else {\r\n      cEther_.repayBorrowBehalf{value : received}(borrower);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./CToken.sol\";\r\n\r\nabstract contract PriceOracle {\r\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\r\n  bool public constant isPriceOracle = true;\r\n\r\n  /**\r\n    * @notice Get the underlying price of a cToken asset\r\n      * @param cToken The cToken to get the underlying price of\r\n      * @return The underlying asset price mantissa (scaled by 1e18).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n  function getUnderlyingPrice(CToken cToken) virtual external view returns (uint);\r\n}\r\n"
    },
    "contracts/test/compound-core/Reservoir.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @title Reservoir Contract\r\n * @notice Distributes a token to a different contract at a fixed rate.\r\n * @dev This contract must be poked via the `drip()` function every so often.\r\n * @author Compound\r\n */\r\ncontract Reservoir {\r\n\r\n  /// @notice The block number when the Reservoir started (immutable)\r\n  uint public dripStart;\r\n\r\n  /// @notice Tokens per block that to drip to target (immutable)\r\n  uint public dripRate;\r\n\r\n  /// @notice Reference to token to drip (immutable)\r\n  EIP20Interface public token;\r\n\r\n  /// @notice Target to receive dripped tokens (immutable)\r\n  address public target;\r\n\r\n  /// @notice Amount that has already been dripped\r\n  uint public dripped;\r\n\r\n  /**\r\n    * @notice Constructs a Reservoir\r\n    * @param dripRate_ Numer of tokens per block to drip\r\n    * @param token_ The token to drip\r\n    * @param target_ The recipient of dripped tokens\r\n    */\r\n  constructor(uint dripRate_, EIP20Interface token_, address target_) {\r\n    dripStart = block.number;\r\n    dripRate = dripRate_;\r\n    token = token_;\r\n    target = target_;\r\n    dripped = 0;\r\n  }\r\n\r\n  /**\r\n    * @notice Drips the maximum amount of tokens to match the drip rate since inception\r\n    * @dev Note: this will only drip up to the amount of tokens available.\r\n    * @return The amount of tokens dripped in this call\r\n    */\r\n  function drip() public returns (uint) {\r\n    // First, read storage into memory\r\n    EIP20Interface token_ = token;\r\n    uint reservoirBalance_ = token_.balanceOf(address(this));\r\n    // TODO: Verify this is a static call\r\n    uint dripRate_ = dripRate;\r\n    uint dripStart_ = dripStart;\r\n    uint dripped_ = dripped;\r\n    address target_ = target;\r\n    uint blockNumber_ = block.number;\r\n\r\n    // Next, calculate intermediate values\r\n    uint dripTotal_ = mul(dripRate_, blockNumber_ - dripStart_, \"dripTotal overflow\");\r\n    uint deltaDrip_ = sub(dripTotal_, dripped_, \"deltaDrip underflow\");\r\n    uint toDrip_ = min(reservoirBalance_, deltaDrip_);\r\n    uint drippedNext_ = add(dripped_, toDrip_, \"tautological\");\r\n\r\n    // Finally, write new `dripped` value and transfer tokens to target\r\n    dripped = drippedNext_;\r\n    token_.transfer(target_, toDrip_);\r\n\r\n    return toDrip_;\r\n  }\r\n\r\n  /* Internal helper functions for safe math */\r\n\r\n  function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    uint c;\r\n  unchecked {c = a + b;}\r\n    require(c >= a, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    require(b <= a, errorMessage);\r\n    uint c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c;\r\n  unchecked {c = a * b;}\r\n    require(c / a == b, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function min(uint a, uint b) internal pure returns (uint) {\r\n    if (a <= b) {\r\n      return a;\r\n    } else {\r\n      return b;\r\n    }\r\n  }\r\n}\r\n\r\nimport \"./EIP20Interface.sol\";\r\n"
    },
    "contracts/test/compound-core/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c;\r\n  unchecked {c = a + b;}\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n  function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    uint256 c;\r\n  unchecked {c = a + b;}\r\n    require(c >= a, errorMessage);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction underflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c;\r\n  unchecked {c = a * b;}\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n  function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c;\r\n  unchecked {c = a * b;}\r\n    require(c / a == b, errorMessage);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/SimplePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./PriceOracle.sol\";\r\nimport \"./CErc20.sol\";\r\n\r\ncontract SimplePriceOracle is PriceOracle {\r\n  mapping(address => uint) prices;\r\n\r\n  event PricePosted(address asset, uint previousPriceMantissa, uint requestedPriceMantissa, uint newPriceMantissa);\r\n\r\n  function _getUnderlyingAddress(CToken cToken) private view returns (address) {\r\n    address asset;\r\n    if (compareStrings(cToken.symbol(), \"cETH\")) {\r\n      asset = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    } else {\r\n      asset = address(CErc20(address(cToken)).underlying());\r\n    }\r\n    return asset;\r\n  }\r\n\r\n  function getUnderlyingPrice(CToken cToken) public override view returns (uint) {\r\n    return prices[_getUnderlyingAddress(cToken)];\r\n  }\r\n\r\n  function setUnderlyingPrice(CToken cToken, uint underlyingPriceMantissa) public {\r\n    address asset = _getUnderlyingAddress(cToken);\r\n    emit PricePosted(asset, prices[asset], underlyingPriceMantissa, underlyingPriceMantissa);\r\n    prices[asset] = underlyingPriceMantissa;\r\n  }\r\n\r\n  function setDirectPrice(address asset, uint price) public {\r\n    emit PricePosted(asset, prices[asset], price, price);\r\n    prices[asset] = price;\r\n  }\r\n\r\n  // v1 price oracle interface for use as backing of proxy\r\n  function assetPrices(address asset) external view returns (uint) {\r\n    return prices[asset];\r\n  }\r\n\r\n  function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n    return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/Timelock.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract Timelock {\r\n  using SafeMath for uint;\r\n\r\n  event NewAdmin(address indexed newAdmin);\r\n  event NewPendingAdmin(address indexed newPendingAdmin);\r\n  event NewDelay(uint indexed newDelay);\r\n  event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\r\n  event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\r\n  event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\r\n\r\n  uint public constant GRACE_PERIOD = 14 days;\r\n  uint public constant MINIMUM_DELAY = 2 days;\r\n  uint public constant MAXIMUM_DELAY = 30 days;\r\n\r\n  address public admin;\r\n  address public pendingAdmin;\r\n  uint public delay;\r\n\r\n  mapping(bytes32 => bool) public queuedTransactions;\r\n\r\n\r\n  constructor(address admin_, uint delay_) {\r\n    require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\r\n    require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n\r\n    admin = admin_;\r\n    delay = delay_;\r\n  }\r\n\r\n  fallback() external /*payable */{}\r\n\r\n  function setDelay(uint delay_) public {\r\n    require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\r\n    require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\r\n    require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n    delay = delay_;\r\n\r\n    emit NewDelay(delay);\r\n  }\r\n\r\n  function acceptAdmin() public {\r\n    require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\r\n    admin = msg.sender;\r\n    pendingAdmin = address(0);\r\n\r\n    emit NewAdmin(admin);\r\n  }\r\n\r\n  function setPendingAdmin(address pendingAdmin_) public {\r\n    require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\r\n    pendingAdmin = pendingAdmin_;\r\n\r\n    emit NewPendingAdmin(pendingAdmin);\r\n  }\r\n\r\n  function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\r\n    require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\r\n    require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\r\n\r\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n    queuedTransactions[txHash] = true;\r\n\r\n    emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n    return txHash;\r\n  }\r\n\r\n  function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\r\n    require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\r\n\r\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n    queuedTransactions[txHash] = false;\r\n\r\n    emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n  }\r\n\r\n  function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\r\n    require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\r\n\r\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n    require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\r\n    require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\r\n    require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\r\n\r\n    queuedTransactions[txHash] = false;\r\n\r\n    bytes memory callData;\r\n\r\n    if (bytes(signature).length == 0) {\r\n      callData = data;\r\n    } else {\r\n      callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n    }\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    (bool success, bytes memory returnData) = target.call{value : value}(callData);\r\n    require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\r\n\r\n    emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n    return returnData;\r\n  }\r\n\r\n  function getBlockTimestamp() internal view returns (uint) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp;\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/Unitroller.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./ErrorReporter.sol\";\r\nimport \"./ComptrollerStorage.sol\";\r\n/**\r\n * @title ComptrollerCore\r\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\r\n * CTokens should reference this contract as their comptroller.\r\n */\r\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\r\n\r\n  /**\r\n    * @notice Emitted when pendingComptrollerImplementation is changed\r\n      */\r\n  event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\r\n\r\n  /**\r\n    * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\r\n      */\r\n  event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n  /**\r\n    * @notice Emitted when pendingAdmin is changed\r\n      */\r\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n  /**\r\n    * @notice Emitted when pendingAdmin is accepted, which means admin is updated\r\n      */\r\n  event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n  constructor() {\r\n    // Set admin to caller\r\n    admin = msg.sender;\r\n  }\r\n\r\n  /*** Admin Functions ***/\r\n  function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\r\n\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\r\n    }\r\n\r\n    address oldPendingImplementation = pendingComptrollerImplementation;\r\n\r\n    pendingComptrollerImplementation = newPendingImplementation;\r\n\r\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n  * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\r\n    * @dev Admin function for new implementation to accept it's role as implementation\r\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n    */\r\n  function _acceptImplementation() public returns (uint) {\r\n    // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\r\n    if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\r\n    }\r\n\r\n    // Save current values for inclusion in log\r\n    address oldImplementation = comptrollerImplementation;\r\n    address oldPendingImplementation = pendingComptrollerImplementation;\r\n\r\n    comptrollerImplementation = pendingComptrollerImplementation;\r\n\r\n    pendingComptrollerImplementation = address(0);\r\n\r\n    emit NewImplementation(oldImplementation, comptrollerImplementation);\r\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n\r\n  /**\r\n    * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\r\n    // Check caller = admin\r\n    if (msg.sender != admin) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\r\n    }\r\n\r\n    // Save current value, if any, for inclusion in log\r\n    address oldPendingAdmin = pendingAdmin;\r\n\r\n    // Store pendingAdmin with value newPendingAdmin\r\n    pendingAdmin = newPendingAdmin;\r\n\r\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n    * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n  function _acceptAdmin() public returns (uint) {\r\n    // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\r\n    }\r\n\r\n    // Save current values for inclusion in log\r\n    address oldAdmin = admin;\r\n    address oldPendingAdmin = pendingAdmin;\r\n\r\n    // Store admin with value pendingAdmin\r\n    admin = pendingAdmin;\r\n\r\n    // Clear the pending value\r\n    pendingAdmin = address(0);\r\n\r\n    emit NewAdmin(oldAdmin, admin);\r\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n\r\n    return uint(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n     * It returns to the external caller whatever the implementation returns\r\n     * or forwards reverts.\r\n     */\r\n  fallback()/* payable*/ external {\r\n    // delegate all other functions to current implementation\r\n    (bool success,) = comptrollerImplementation.delegatecall(msg.data);\r\n\r\n    assembly {\r\n      let free_mem_ptr := mload(0x40)\r\n      returndatacopy(free_mem_ptr, 0, returndatasize())\r\n\r\n      switch success\r\n      case 0 {revert(free_mem_ptr, returndatasize())}\r\n      default {return (free_mem_ptr, returndatasize())}\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/compound-core/WhitePaperInterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./InterestRateModel.sol\";\r\n\r\n/**\r\n  * @title Compound's WhitePaperInterestRateModel Contract\r\n  * @author Compound\r\n  * @notice The parameterized model described in section 2.4 of the original Compound Protocol whitepaper\r\n  */\r\ncontract WhitePaperInterestRateModel is InterestRateModel {\r\n  event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock);\r\n\r\n  uint256 private constant BASE = 1e18;\r\n\r\n  /**\r\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\r\n     */\r\n  uint public constant blocksPerYear = 2102400;\r\n\r\n  /**\r\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\r\n     */\r\n  uint public multiplierPerBlock;\r\n\r\n  /**\r\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\r\n     */\r\n  uint public baseRatePerBlock;\r\n\r\n  /**\r\n   * @notice Construct an interest rate model\r\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\r\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\r\n     */\r\n  constructor(uint baseRatePerYear, uint multiplierPerYear) {\r\n    baseRatePerBlock = baseRatePerYear / blocksPerYear;\r\n    multiplierPerBlock = multiplierPerYear / blocksPerYear;\r\n\r\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market (currently unused)\r\n     * @return The utilization rate as a mantissa between [0, BASE]\r\n     */\r\n  function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\r\n    // Utilization rate is 0 when there are no borrows\r\n    if (borrows == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return borrows * BASE / (cash + borrows - reserves);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\r\n     */\r\n  function getBorrowRate(uint cash, uint borrows, uint reserves) override public view returns (uint) {\r\n    uint ur = utilizationRate(cash, borrows, reserves);\r\n    return (ur * multiplierPerBlock / BASE) + baseRatePerBlock;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the current supply rate per block\r\n     * @param cash The amount of cash in the market\r\n     * @param borrows The amount of borrows in the market\r\n     * @param reserves The amount of reserves in the market\r\n     * @param reserveFactorMantissa The current reserve factor for the market\r\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\r\n     */\r\n  function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) override public view returns (uint) {\r\n    uint oneMinusReserveFactor = BASE - reserveFactorMantissa;\r\n    uint borrowRate = getBorrowRate(cash, borrows, reserves);\r\n    uint rateToPool = borrowRate * oneMinusReserveFactor / BASE;\r\n    return utilizationRate(cash, borrows, reserves) * rateToPool / BASE;\r\n  }\r\n}\r\n"
    },
    "contracts/test/CompPriceOracleImitator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n//import \"hardhat/console.sol\";\r\nimport \"./compound-core/PriceOracle.sol\";\r\nimport \"./compound-core/CErc20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n\r\ncontract CompPriceOracleImitator is PriceOracle {\r\n  address public usdc;\r\n  ITetuLiquidator liquidator;\r\n\r\n  constructor(address usdc_, address liquidator_) {\r\n    usdc = usdc_;\r\n    liquidator = ITetuLiquidator(liquidator_);\r\n  }\r\n\r\n  function _getUnderlyingAddress(CToken cToken) private view returns (address) {\r\n    return address(CErc20(address(cToken)).underlying());\r\n  }\r\n\r\n  function getUnderlyingPrice(CToken cToken) public override view returns (uint) {\r\n    address asset = _getUnderlyingAddress(cToken);\r\n    uint tokenInDecimals = IERC20Metadata(asset).decimals();\r\n    uint tokenOutDecimals = IERC20Metadata(usdc).decimals();\r\n\r\n    if (asset == usdc) {\r\n      return 10 ** (36 - tokenOutDecimals) * 10000;\r\n    }\r\n\r\n    uint price = liquidator.getPrice(asset, usdc, 10 ** tokenInDecimals);\r\n\r\n    return price * 10 ** (36 - tokenInDecimals) / 10 ** tokenOutDecimals * 10000;\r\n  }\r\n}\r\n"
    },
    "contracts/test/Converter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n// converter\r\nimport \"@tetu_io/tetu-converter/contracts/proxy/ProxyControlled.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/core/BorrowManager.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/core/ConverterController.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/core/DebtMonitor.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/core/Keeper.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/core/SwapManager.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/core/TetuConverter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/oracles/PriceOracle.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/oracles/PriceOracleKeomZkevm.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/core/Bookkeeper.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/tests/keeper/KeeperCaller.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/protocols/hundred-finance/HfPoolAdapter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/protocols/hundred-finance/HfPlatformAdapter.sol\";\r\n//import \"@tetu_io/tetu-converter/contracts/tests/dforce/DForcePriceOracleMock.sol\";\r\n//import \"@tetu_io/tetu-converter/contracts/integrations/dforce/IDForceController.sol\";\r\n//import \"@tetu_io/tetu-converter/contracts/integrations/dforce/IDForcePriceOracle.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/protocols/aave3/Aave3PlatformAdapter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/protocols/aave3/Aave3PoolAdapter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/protocols/aave3/Aave3PoolAdapterEMode.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/protocols/aaveTwo/AaveTwoPlatformAdapter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/protocols/aaveTwo/AaveTwoPoolAdapter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/protocols/moonwell/MoonwellPlatformAdapter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/protocols/moonwell/MoonwellPoolAdapter.sol\";\r\n//import \"@tetu_io/tetu-converter/contracts/protocols/dforce/DForcePlatformAdapter.sol\";\r\n//import \"@tetu_io/tetu-converter/contracts/protocols/dforce/DForcePoolAdapter.sol\";\r\n"
    },
    "contracts/test/DepositorTestBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../strategies/DepositorBase.sol\";\r\n\r\n\r\n/// @title Abstract Depositor Test Base contract.\r\n/// @author bogdoslav\r\nabstract contract DepositorTestBase is DepositorBase {\r\n\r\n  address[] private _claimedRewardTokens;\r\n  uint[] private _claimedRewardAmounts;\r\n\r\n  /// @dev Deposit given amount to the pool.\r\n  /// @notice Depositor must care about tokens approval by itself.\r\n  function depositorEnter(uint[] memory amountsDesired_)\r\n  external returns (uint[] memory amountsConsumed, uint liquidityOut) {\r\n    return _depositorEnter(amountsDesired_);\r\n  }\r\n\r\n  /// @dev Withdraw given lp amount from the pool.\r\n  /// @notice if requested liquidityAmount >= invested, then should make full exit\r\n  function depositorExit(uint liquidityAmount) external returns (uint[] memory amountsOut) {\r\n    return _depositorExit(liquidityAmount, false);\r\n  }\r\n\r\n  /// @dev Quotes output for given lp amount from the pool.\r\n  function depositorQuoteExit(uint liquidityAmount) external returns (uint[] memory amountsOut) {\r\n    return _depositorQuoteExit(liquidityAmount);\r\n  }\r\n\r\n  /// @dev If pool supports emergency withdraw need to call it for emergencyExit()\r\n  function depositorEmergencyExit() external returns (uint[] memory amountsOut) {\r\n    return _depositorEmergencyExit();\r\n  }\r\n\r\n  /// @dev Claim all possible rewards.\r\n  function depositorClaimRewards()\r\n  external returns (address[] memory rewardTokens, uint[] memory rewardAmounts, uint[] memory depositorBalancesBefore) {\r\n    (rewardTokens, rewardAmounts, depositorBalancesBefore) = _depositorClaimRewards();\r\n    _claimedRewardTokens = rewardTokens;\r\n    _claimedRewardAmounts = rewardAmounts;\r\n  }\r\n\r\n  function claimedRewardTokens()\r\n  external view returns (address[] memory) {\r\n    return _claimedRewardTokens;\r\n  }\r\n\r\n  function claimedRewardAmounts()\r\n  external view returns (uint[] memory) {\r\n    return _claimedRewardAmounts;\r\n  }\r\n\r\n  /// @dev Returns depositor's pool shares / lp token amount\r\n  function depositorLiquidity() external view returns (uint) {\r\n    return _depositorLiquidity();\r\n\r\n  }\r\n\r\n  /// @dev Returns pool token reserves\r\n  function depositorPoolReserves() external view returns (uint[] memory reserves) {\r\n    return _depositorPoolReserves();\r\n  }\r\n\r\n  /// @dev Returns pool token assets\r\n  function depositorPoolAssets() external view returns (address[] memory assets) {\r\n    return _depositorPoolAssets();\r\n  }\r\n\r\n  /// @dev Returns pool token weights\r\n  function depositorPoolWeights() external view returns (uint[] memory weights, uint total) {\r\n    return _depositorPoolWeights();\r\n  }\r\n\r\n\r\n}\r\n"
    },
    "contracts/test/DummyERC4626Strict.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/vault/ERC4626Strict.sol\";\r\n\r\n\r\ncontract DummyERC4626Strict is ERC4626Strict {\r\n  constructor(IERC20 asset_,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address _strategy,\r\n    uint _buffer)  ERC4626Strict(asset_, _name, _symbol, _strategy, _buffer){}\r\n}\r\n"
    },
    "contracts/test/facades/AppLibFacade.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../libs/AppLib.sol\";\r\n\r\n/// @notice Provide public access to internal functions of AppLib\r\ncontract AppLibFacade {\r\n  function getAssetIndex(address[] memory tokens_, address asset_) external pure returns (uint) {\r\n    return AppLib.getAssetIndex(tokens_, asset_);\r\n  }\r\n\r\n  function _getLiquidationThreshold(uint threshold) external pure returns (uint) {\r\n    return AppLib._getLiquidationThreshold(threshold);\r\n  }\r\n\r\n  function getDefaultLiquidationThresholdConstant() external pure returns (uint) {\r\n    return AppLib.DEFAULT_LIQUIDATION_THRESHOLD;\r\n  }\r\n}\r\n"
    },
    "contracts/test/facades/BorrowLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"../../libs/BorrowLib.sol\";\r\n\r\ncontract BorrowLibFacade {\r\n  function rebalanceAssets(\r\n    ITetuConverter tetuConverter_,\r\n    ITetuLiquidator tetuLiquidator_,\r\n    address asset0,\r\n    address asset1,\r\n    uint prop0,\r\n    uint threshold0,\r\n    uint threshold1,\r\n    uint addition0\r\n  ) external {\r\n    BorrowLib.rebalanceAssets(tetuConverter_, tetuLiquidator_, asset0, asset1, prop0, threshold0, threshold1, addition0);\r\n  }\r\n\r\n  function _makeLittleSwap(\r\n    BorrowLib.RebalanceAssetsCore memory c,\r\n    BorrowLib.PricesDecs memory pd,\r\n    uint balanceA_,\r\n    uint requiredAmountB\r\n  ) external returns (\r\n    uint spentAmountIn,\r\n    uint receivedAmountOut\r\n  ) {\r\n    return BorrowLib._makeLittleSwap(c, pd, balanceA_, requiredAmountB);\r\n  }\r\n\r\n  function openPosition(\r\n    BorrowLib.RebalanceAssetsCore memory c,\r\n    BorrowLib.PricesDecs memory pd,\r\n    uint balanceA_,\r\n    uint balanceB_\r\n  ) external returns (\r\n    uint collateralAmountOut,\r\n    uint borrowedAmountOut\r\n  ) {\r\n    return BorrowLib.openPosition(c, pd, balanceA_, balanceB_);\r\n  }\r\n\r\n  function _openPosition(BorrowLib.RebalanceAssetsCore memory c, uint balanceA_, uint balanceB_) external returns (\r\n    uint collateralAmountOut,\r\n    uint borrowedAmountOut\r\n  ) {\r\n    return BorrowLib._openPosition(c, balanceA_, balanceB_);\r\n  }\r\n\r\n  function _makeBorrowToDeposit(\r\n    ITetuConverter converter_,\r\n    uint[2] memory amounts_,\r\n    address[2] memory tokens_,\r\n    uint[2] memory thresholds_,\r\n    uint prop0\r\n  ) external {\r\n    BorrowLib._makeBorrowToDeposit(converter_, amounts_, tokens_, thresholds_, prop0);\r\n  }\r\n\r\n  function prepareToDeposit(\r\n    ITetuConverter converter_,\r\n    uint amount_,\r\n    address[2] memory tokens_,\r\n    uint[2] memory thresholds_,\r\n    uint prop0\r\n  ) external returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    return BorrowLib.prepareToDeposit(converter_, amount_, tokens_, thresholds_, prop0);\r\n  }\r\n}"
    },
    "contracts/test/facades/ConverterStrategyBaseLibFacade.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"../../strategies/ConverterStrategyBaseLib.sol\";\r\n\r\n/// @notice Provide public access to internal functions of ConverterStrategyBaseLib\r\ncontract ConverterStrategyBaseLibFacade {\r\n  mapping(address => uint) private liquidationThresholds;\r\n\r\n  function setLiquidationThreshold(address asset, uint values) external {\r\n    liquidationThresholds[asset] = values;\r\n  }\r\n\r\n  function getCollaterals(\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint[] memory weights_,\r\n    uint totalWeight_,\r\n    uint indexAsset_,\r\n    IPriceOracle priceOracle\r\n  ) external view returns (uint[] memory tokenAmountsOut) {\r\n    return ConverterStrategyBaseLib._getCollaterals(\r\n      amount_,\r\n      tokens_,\r\n      weights_,\r\n      totalWeight_,\r\n      indexAsset_,\r\n      priceOracle\r\n    );\r\n  }\r\n\r\n  function openPosition(\r\n    ITetuConverter tetuConverter_,\r\n    bytes memory entryData_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint amountIn_,\r\n    uint thresholdMainAsset_\r\n  ) external returns (\r\n    uint collateralAmountOut,\r\n    uint borrowedAmountOut\r\n  ) {\r\n    return ConverterStrategyBaseLib.openPosition(\r\n      tetuConverter_,\r\n      entryData_,\r\n      collateralAsset_,\r\n      borrowAsset_,\r\n      amountIn_,\r\n      thresholdMainAsset_\r\n    );\r\n  }\r\n\r\n  function openPositionEntryKind1(\r\n    ITetuConverter tetuConverter_,\r\n    bytes memory entryData_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint amountIn_,\r\n    uint collateralThreshold_\r\n  ) external returns (\r\n    uint collateralAmountOut,\r\n    uint borrowedAmountOut\r\n  ) {\r\n    return ConverterStrategyBaseLib.openPositionEntryKind1(\r\n      tetuConverter_,\r\n      entryData_,\r\n      collateralAsset_,\r\n      borrowAsset_,\r\n      amountIn_,\r\n      collateralThreshold_\r\n    );\r\n  }\r\n\r\n  function closePosition(\r\n    ITetuConverter tetuConverter_,\r\n    address collateralAsset,\r\n    address borrowAsset,\r\n    uint amountToRepay\r\n  ) external returns (\r\n    uint returnedAssetAmountOut,\r\n    uint leftoverOut\r\n  ) {\r\n    return ConverterStrategyBaseLib.closePosition(\r\n      tetuConverter_,\r\n      collateralAsset,\r\n      borrowAsset,\r\n      amountToRepay\r\n    );\r\n  }\r\n\r\n  function liquidate(\r\n    ITetuConverter converter_,\r\n    ITetuLiquidator liquidator_,\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint amountIn,\r\n    uint slippage,\r\n    uint rewardLiquidationThresholdForTokenIn,\r\n    bool skipValidation\r\n  ) external returns (\r\n    uint spentAmountIn,\r\n    uint receivedAmountOut\r\n  ) {\r\n    return ConverterStrategyBaseLib.liquidate(\r\n      converter_,\r\n      liquidator_,\r\n      tokenIn,\r\n      tokenOut,\r\n      amountIn,\r\n      slippage,\r\n      rewardLiquidationThresholdForTokenIn,\r\n      skipValidation\r\n    );\r\n  }\r\n\r\n  function sendPerformanceFee(address asset_, uint amount_, address splitter, address receiver_, uint ratio) external returns (\r\n    uint toPerf,\r\n    uint toInsurance\r\n  ) {\r\n    return ConverterStrategyBaseLib._sendPerformanceFee(asset_, amount_, splitter, receiver_, ratio);\r\n  }\r\n\r\n  function closePositionsToGetAmount(\r\n    ITetuConverter tetuConverter,\r\n    ITetuLiquidator liquidator,\r\n    uint indexAsset,\r\n    uint requestedAmount,\r\n    address[] memory tokens\r\n  ) external returns (\r\n    uint expectedAmountMainAssetOut\r\n  ) {\r\n    return ConverterStrategyBaseLib.closePositionsToGetAmount(\r\n      tetuConverter,\r\n      liquidator,\r\n      indexAsset,\r\n      liquidationThresholds,\r\n      requestedAmount,\r\n      tokens\r\n    );\r\n  }\r\n\r\n  function _getAmountToSell(\r\n    uint remainingRequestedAmount,\r\n    uint totalDebt,\r\n    uint totalCollateral,\r\n    uint[] memory prices,\r\n    uint[] memory decs,\r\n    uint indexCollateral,\r\n    uint indexBorrowAsset,\r\n    uint balanceBorrowAsset\r\n  ) external view returns (\r\n    uint amountOut\r\n  ) {\r\n    liquidationThresholds[address(0)]; // hide pure warning\r\n    return IterationPlanLib._getAmountToSell(\r\n      remainingRequestedAmount,\r\n      totalDebt,\r\n      totalCollateral,\r\n      prices,\r\n      decs,\r\n      indexCollateral,\r\n      indexBorrowAsset,\r\n      balanceBorrowAsset\r\n    );\r\n  }\r\n\r\n  function sendTokensToForwarder(\r\n    address controller_,\r\n    address splitter_,\r\n    address[] memory tokens_,\r\n    uint[] memory amounts_,\r\n    uint[] memory thresholds_\r\n  ) external returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut\r\n  ) {\r\n    return ConverterStrategyBaseLib._sendTokensToForwarder(controller_, splitter_, tokens_, amounts_, thresholds_);\r\n  }\r\n\r\n  function _recycle(ConverterStrategyBaseLib.RecycleParams memory p) external returns (\r\n    uint[] memory amountsToForward,\r\n    uint amountToPerformanceAndInsurance,\r\n    int debtToInsuranceOut\r\n  ) {\r\n    return ConverterStrategyBaseLib._recycle(p);\r\n  }\r\n\r\n  function getTokenAmounts(\r\n    ITetuConverter tetuConverter_,\r\n    address[] memory tokens_,\r\n    uint indexAsset_,\r\n    uint[] memory collaterals_,\r\n    uint thresholdMainAsset_\r\n  ) external returns (\r\n    uint[] memory tokenAmountsOut\r\n  ) {\r\n    return ConverterStrategyBaseLib._getTokenAmounts(\r\n      tetuConverter_,\r\n      tokens_,\r\n      indexAsset_,\r\n      collaterals_,\r\n      thresholdMainAsset_\r\n    );\r\n  }\r\n\r\n  function _closePositionExact(\r\n    ITetuConverter converter_,\r\n    address collateralAsset,\r\n    address borrowAsset,\r\n    uint amountRepay,\r\n    uint balanceBorrowAsset\r\n  ) external returns (\r\n    uint collateralOut,\r\n    uint repaidAmountOut\r\n  ) {\r\n    return ConverterStrategyBaseLib._closePositionExact(\r\n      converter_,\r\n      collateralAsset,\r\n      borrowAsset,\r\n      amountRepay,\r\n      balanceBorrowAsset\r\n    );\r\n  }\r\n\r\n  function _closePosition(\r\n    ITetuConverter converter_,\r\n    address collateralAsset,\r\n    address borrowAsset,\r\n    uint amountToRepay\r\n  ) external returns (\r\n    uint returnedAssetAmountOut,\r\n    uint repaidAmountOut\r\n  ) {\r\n    return ConverterStrategyBaseLib._closePosition(converter_, collateralAsset, borrowAsset, amountToRepay);\r\n  }\r\n\r\n\r\n  function _makeRequestedAmountAccess(\r\n    address[] memory tokens_,\r\n    uint indexAsset_,\r\n    ITetuConverter converter_,\r\n    ITetuLiquidator liquidator_,\r\n    uint requestedAmount\r\n  ) external returns (\r\n    uint expectedTotalAmountMainAsset\r\n  ) {\r\n    return ConverterStrategyBaseLib.makeRequestedAmount(\r\n      tokens_,\r\n      indexAsset_,\r\n      converter_,\r\n      liquidator_,\r\n      requestedAmount,\r\n      liquidationThresholds\r\n    );\r\n  }\r\n\r\n  function _repayDebt(\r\n    ITetuConverter converter,\r\n    address collateralAsset,\r\n    address borrowAsset,\r\n    uint amountToRepay\r\n  ) external returns (\r\n    uint expectedAmountOut,\r\n    uint repaidAmountOut,\r\n    uint amountSendToRepay\r\n  ) {\r\n    return ConverterStrategyBaseLib._repayDebt(converter, collateralAsset, borrowAsset, amountToRepay);\r\n  }\r\n\r\n  function _coverDebtToInsuranceFromRewards(\r\n    ConverterStrategyBaseLib.RecycleParams memory p,\r\n    uint index,\r\n    uint debtAmount\r\n  ) external returns (\r\n    uint rewardsLeftovers,\r\n    int debtToInsuranceOut\r\n  ) {\r\n    return ConverterStrategyBaseLib._coverDebtToInsuranceFromRewards(p, index, debtAmount);\r\n  }\r\n}\r\n"
    },
    "contracts/test/facades/ConverterStrategyBaseLibFacade2.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\npragma solidity 0.8.17;\r\n\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"../../strategies/ConverterStrategyBaseLib2.sol\";\r\n\r\n/// @notice Provide public access to internal functions of ConverterStrategyBaseLib2\r\ncontract ConverterStrategyBaseLibFacade2 {\r\n  mapping(address => uint) private liquidationThresholds;\r\n  IStrategyV3.BaseState private baseState;\r\n  IConverterStrategyBase.ConverterStrategyBaseState private _csbs;\r\n\r\n  function setLiquidationThreshold(address asset, uint values) external {\r\n    liquidationThresholds[asset] = values;\r\n  }\r\n\r\n  function setCsbs(\r\n    uint investedAssets,\r\n    ITetuConverter converter,\r\n    uint reinvestThresholdPercent,\r\n    int debtToInsurance\r\n  ) external {\r\n    _csbs.investedAssets = investedAssets;\r\n    _csbs.converter = converter;\r\n    _csbs.reinvestThresholdPercent = reinvestThresholdPercent;\r\n    _csbs.debtToInsurance = debtToInsurance;\r\n  }\r\n\r\n  function setDebtToInsurance(int debtToInsurance_) external {\r\n    _csbs.debtToInsurance = debtToInsurance_;\r\n  }\r\n\r\n  function getCsb() external view returns (IConverterStrategyBase.ConverterStrategyBaseState memory) {\r\n    return _csbs;\r\n  }\r\n\r\n  function getExpectedWithdrawnAmounts(\r\n    uint[] memory reserves_,\r\n    uint liquidityAmount_,\r\n    uint totalSupply_\r\n  ) external pure returns (\r\n    uint[] memory withdrawnAmountsOut\r\n  ) {\r\n    return ConverterStrategyBaseLib2.getExpectedWithdrawnAmounts(reserves_, liquidityAmount_, totalSupply_);\r\n  }\r\n\r\n  function getLiquidityAmount(\r\n    uint targetAmount_,\r\n    address[] memory tokens,\r\n    uint indexAsset,\r\n    ITetuConverter converter,\r\n    uint[] memory assetsInPool,\r\n    uint depositorLiquidity,\r\n    uint indexUnderlying\r\n  ) external view returns (\r\n    uint resultAmount\r\n  ) {\r\n    return ConverterStrategyBaseLib2.getLiquidityAmount(\r\n      targetAmount_,\r\n      tokens,\r\n      indexAsset,\r\n      converter,\r\n      assetsInPool,\r\n      depositorLiquidity,\r\n      indexUnderlying\r\n    );\r\n  }\r\n\r\n  function getAvailableBalances(\r\n    address[] memory tokens_,\r\n    uint indexAsset\r\n  ) external view returns (uint[] memory) {\r\n    return ConverterStrategyBaseLib2.getAvailableBalances(tokens_, indexAsset);\r\n  }\r\n\r\n  function calcInvestedAssets(\r\n    address[] memory tokens,\r\n    uint[] memory amountsOut,\r\n    uint indexAsset,\r\n    ITetuConverter converter_,\r\n    bool makeCheckout_\r\n  ) external returns (\r\n    uint amountOut,\r\n    uint[] memory prices,\r\n    uint[] memory decs\r\n  ) {\r\n    return ConverterStrategyBaseLib2.calcInvestedAssets(tokens, amountsOut, indexAsset, converter_, makeCheckout_);\r\n  }\r\n\r\n  function registerIncome(uint assetBefore, uint assetAfter) external pure returns (uint earned, uint lost) {\r\n    return ConverterStrategyBaseLib2._registerIncome(assetBefore, assetAfter);\r\n  }\r\n\r\n  function claimConverterRewards(\r\n    ITetuConverter tetuConverter_,\r\n    address[] memory tokens_,\r\n    address[] memory rewardTokens_,\r\n    uint[] memory rewardAmounts_,\r\n    uint[] memory balancesBefore\r\n  ) external returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut\r\n  ) {\r\n    return ConverterStrategyBaseLib2.claimConverterRewards(\r\n      tetuConverter_,\r\n      tokens_,\r\n      rewardTokens_,\r\n      rewardAmounts_,\r\n      balancesBefore\r\n    );\r\n  }\r\n\r\n  function postWithdrawActions(\r\n    ITetuConverter converter,\r\n    address[] memory tokens,\r\n    uint indexAsset,\r\n\r\n    uint[] memory reservesBeforeWithdraw,\r\n    uint liquidityAmountWithdrew,\r\n    uint totalSupplyBeforeWithdraw,\r\n\r\n    uint[] memory amountsToConvert,\r\n    uint[] memory withdrawnAmounts\r\n  ) external returns (\r\n    uint[] memory expectedMainAssetAmounts,\r\n    uint[] memory _amountsToConvert\r\n  ) {\r\n    return ConverterStrategyBaseLib2.postWithdrawActions(\r\n      converter,\r\n      tokens,\r\n      indexAsset,\r\n      reservesBeforeWithdraw,\r\n      liquidityAmountWithdrew,\r\n      totalSupplyBeforeWithdraw,\r\n      amountsToConvert,\r\n      withdrawnAmounts\r\n    );\r\n  }\r\n\r\n  function postWithdrawActionsEmpty(\r\n    ITetuConverter converter,\r\n    address[] memory tokens,\r\n    uint indexAsset,\r\n    uint[] memory amountsToConvert_\r\n  ) external returns (\r\n    uint[] memory expectedAmountsMainAsset\r\n  ) {\r\n    return ConverterStrategyBaseLib2.postWithdrawActionsEmpty(converter, tokens, indexAsset, amountsToConvert_);\r\n  }\r\n\r\n  function sendToInsurance(address asset, uint amount, address splitter, uint strategyBalance) external returns (\r\n    uint sentAmount,\r\n    uint unsentAmount\r\n  ) {\r\n    return ConverterStrategyBaseLib2.sendToInsurance(\r\n      asset,\r\n      amount,\r\n      splitter,\r\n      strategyBalance,\r\n      IERC20(asset).balanceOf(address(this))\r\n    );\r\n  }\r\n\r\n  function getSafeLossToCover(uint loss, uint totalAssets_) external pure returns (\r\n    uint lossToCover,\r\n    uint lossUncovered\r\n  ) {\r\n    return ConverterStrategyBaseLib2._getSafeLossToCover(loss, totalAssets_);\r\n  }\r\n\r\n  function setBaseState(\r\n    address asset,\r\n    address splitter,\r\n    address performanceReceiver,\r\n    uint performanceFee,\r\n    uint performanceFeeRatio,\r\n    uint compoundRatio,\r\n    string memory strategySpecificName\r\n  ) external {\r\n    baseState.asset = asset;\r\n    baseState.splitter = splitter;\r\n    baseState.performanceFee = performanceFee;\r\n    baseState.performanceReceiver = performanceReceiver;\r\n    baseState.performanceFeeRatio = performanceFeeRatio;\r\n    baseState.compoundRatio = compoundRatio;\r\n    baseState.strategySpecificName = strategySpecificName;\r\n  }\r\n\r\n  function getHardworkLossToleranceValue() external pure returns (uint) {\r\n    return ConverterStrategyBaseLib2.HARDWORK_LOSS_TOLERANCE;\r\n  }\r\n\r\n  function findZeroAmount(uint[] memory amounts_) external pure returns (bool) {\r\n    return ConverterStrategyBaseLib2.findZeroAmount(amounts_);\r\n  }\r\n\r\n  function getTokenAmountsPair(\r\n    ITetuConverter converter,\r\n    uint totalAssets,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint[2] calldata liquidationThresholdsAB\r\n  ) external returns (\r\n    uint loss,\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    return ConverterStrategyBaseLib2.getTokenAmountsPair(converter, totalAssets, tokenA, tokenB, liquidationThresholdsAB);\r\n  }\r\n\r\n  function getOracleAssetsPrice(ITetuConverter converter, address tokenA, address tokenB) external view returns (\r\n    uint price\r\n  ) {\r\n    return ConverterStrategyBaseLib2.getOracleAssetsPrice(converter, tokenA, tokenB);\r\n  }\r\n\r\n  function coverLossAfterPriceChanging(\r\n    uint investedAssetsBefore,\r\n    uint investedAssetsAfter,\r\n    int increaseToDebt,\r\n    address asset,\r\n    address splitter\r\n  ) external returns (uint earned) {\r\n    baseState.asset = asset;\r\n    baseState.splitter = splitter;\r\n    return ConverterStrategyBaseLib2._coverLossAfterPriceChanging(\r\n      _csbs,\r\n      investedAssetsBefore,\r\n      investedAssetsAfter,\r\n      increaseToDebt,\r\n      baseState\r\n    );\r\n  }\r\n\r\n  function _coverLossAndCheckResults(address splitter, uint lossToCover, int debtToInsuranceInc) external {\r\n    ConverterStrategyBaseLib2._coverLossAndCheckResults(_csbs, splitter, lossToCover, debtToInsuranceInc);\r\n  }\r\n\r\n  function sendProfitGetAssetBalance(\r\n    address theAsset_,\r\n    uint balanceTheAsset_,\r\n    uint investedAssets_,\r\n    uint earnedByPrices_\r\n  ) external returns (\r\n    uint balanceTheAssetOut\r\n  ) {\r\n    return ConverterStrategyBaseLib2.sendProfitGetAssetBalance(theAsset_, balanceTheAsset_, investedAssets_, earnedByPrices_, baseState);\r\n  }\r\n\r\n  function _getIncreaseToDebt(\r\n    address[] memory tokens,\r\n    uint indexAsset,\r\n    uint[] memory prices,\r\n    uint[] memory decs,\r\n    ITetuConverter converter\r\n  ) external returns (\r\n    int increaseToDebt\r\n  ) {\r\n    return ConverterStrategyBaseLib2._getIncreaseToDebt(tokens, indexAsset, prices, decs, converter);\r\n  }\r\n\r\n  function fixPriceChanges(\r\n    uint[] memory depositorQuoteExitAmountsOut,\r\n    address[] memory tokens,\r\n    uint indexAsset\r\n  ) external returns (\r\n    uint investedAssetsOut,\r\n    uint earnedOut\r\n  ) {\r\n    return ConverterStrategyBaseLib2.fixPriceChanges(_csbs, baseState, depositorQuoteExitAmountsOut, tokens, indexAsset);\r\n  }\r\n}\r\n"
    },
    "contracts/test/facades/IterationPlanLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../libs/IterationPlanLib.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract IterationPlanLibFacade {\r\n  function estimateSwapAmountForRepaySwapRepay(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    uint balanceA,\r\n    uint balanceB,\r\n    uint indexA,\r\n    uint indexB,\r\n    uint propB,\r\n    uint totalCollateralA,\r\n    uint totalBorrowB,\r\n    uint collateralA,\r\n    uint amountToRepayB\r\n  ) external view returns(uint amountToSwap, bool swapB) {\r\n    console.log(\"estimateSwapAmountForRepaySwapRepay\"); // hide pure/view warning\r\n    return IterationPlanLib.estimateSwapAmountForRepaySwapRepay(\r\n      p,\r\n      [balanceA, balanceB],\r\n      [indexA, indexB],\r\n      propB,\r\n      totalCollateralA,\r\n      totalBorrowB,\r\n      collateralA,\r\n      amountToRepayB\r\n    );\r\n  }\r\n\r\n  function getEntryKind(bytes memory entryData_) external pure returns (uint) {\r\n    return IterationPlanLib.getEntryKind(entryData_);\r\n  }\r\n\r\n  function _buildPlanRepaySwapRepay(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    uint[2] memory balancesAB,\r\n    uint[2] memory idxAB,\r\n    uint propB,\r\n    uint totalCollateralA,\r\n    uint totalBorrowB,\r\n    uint requiredAmountToReduceDebt\r\n  ) external returns (\r\n    uint indexToSwapPlus1,\r\n    uint amountToSwap,\r\n    uint indexToRepayPlus1\r\n  ) {\r\n    return IterationPlanLib._buildPlanRepaySwapRepay(\r\n      p,\r\n      balancesAB,\r\n      idxAB,\r\n      propB,\r\n      [totalCollateralA, totalBorrowB],\r\n      requiredAmountToReduceDebt\r\n    );\r\n  }\r\n}"
    },
    "contracts/test/facades/KyberLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../strategies/kyber/KyberLib.sol\";\r\n\r\n/// @notice Provide direct access to UniswapV3Lib functions for unit tests\r\ncontract KyberLibFacade {\r\n  function getAmountsForLiquidity(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint128 liquidity\r\n  ) public pure returns (uint amount0, uint amount1) {\r\n    return KyberLib.getAmountsForLiquidity(sqrtRatioX96, lowerTick, upperTick, liquidity);\r\n  }\r\n}\r\n"
    },
    "contracts/test/facades/PairBasedStrategyLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../strategies/uniswap/UniswapV3Lib.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"../../strategies/pair/PairBasedStrategyLib.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/// @notice Provide direct access to UniswapV3Lib functions for unit tests\r\ncontract PairBasedStrategyLibFacade is IPoolProportionsProvider {\r\n  function quoteWithdrawStep(\r\n    address[2] memory converterLiquidator_,\r\n    address[] memory tokens,\r\n    uint[] memory liquidationThresholds,\r\n    uint[] memory amountsFromPool,\r\n    uint planKind,\r\n    uint[2] memory entryDataValues\r\n  ) external returns (\r\n    address tokenToSwap,\r\n    uint amountToSwap\r\n  ) {\r\n    return PairBasedStrategyLib.quoteWithdrawStep(converterLiquidator_, tokens, liquidationThresholds, amountsFromPool, planKind, entryDataValues);\r\n  }\r\n\r\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\r\n  function withdrawStep(\r\n    address[2] memory converterLiquidator_,\r\n    address[] memory tokens,\r\n    uint[] memory liquidationThresholds,\r\n    address tokenToSwap_,\r\n    uint amountToSwap_,\r\n    address aggregator_,\r\n    bytes memory swapData_,\r\n    bool useLiquidator_,\r\n    uint planKind,\r\n    uint[2] memory entryDataValues\r\n  ) external returns (\r\n    bool completed\r\n  ) {\r\n    return PairBasedStrategyLib.withdrawStep(\r\n      converterLiquidator_,\r\n      tokens,\r\n      liquidationThresholds,\r\n      tokenToSwap_,\r\n      amountToSwap_,\r\n      aggregator_,\r\n      swapData_,\r\n      useLiquidator_,\r\n      planKind,\r\n      entryDataValues\r\n    );\r\n  }\r\n\r\n  function _swap(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    PairBasedStrategyLib.SwapByAggParams memory aggParams,\r\n    uint indexIn,\r\n    uint indexOut,\r\n    uint amountIn\r\n  ) external returns (\r\n    uint spentAmountIn,\r\n    uint updatedPropNotUnderlying18\r\n  ) {\r\n    return PairBasedStrategyLib._swap(p, aggParams, indexIn, indexOut, amountIn);\r\n  }\r\n\r\n  function _getAmountToRepay2(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    uint indexCollateral,\r\n    uint indexBorrow\r\n  ) external view returns (\r\n    uint amountToRepay,\r\n    bool borrowInsteadRepay\r\n  ) {\r\n    return PairBasedStrategyLib._getAmountToRepay2(p, indexCollateral, indexBorrow);\r\n  }\r\n\r\n  function borrowToProportions(\r\n    IterationPlanLib.SwapRepayPlanParams memory p,\r\n    uint indexCollateral,\r\n    uint indexBorrow\r\n  ) external {\r\n    return PairBasedStrategyLib._borrowToProportions(p, indexCollateral, indexBorrow, true);\r\n  }\r\n\r\n  //region ---------------------------------------------- IPoolProportionsProvider implementation\r\n\r\n  uint[] internal valuesPropNotUnderlying18;\r\n  /// @notice getPropNotUnderlying18() uses a value of balance of this token to detect what value should be returned\r\n  address switchToken;\r\n  /// @notice getPropNotUnderlying18 should return second value if balance of the switch token is equal to the given value\r\n  uint switchTokenBalanceToSwitch;\r\n  function setPropNotUnderlying18(\r\n    uint[] memory valuesPropNotUnderlying18_,\r\n    address switchToken_,\r\n    uint switchTokenBalanceToSwitch_\r\n  ) external {\r\n    require(valuesPropNotUnderlying18_.length == 2, \"Incorrect length array in setPropNotUnderlying18\");\r\n    valuesPropNotUnderlying18 = valuesPropNotUnderlying18_;\r\n    switchToken = switchToken_;\r\n    switchTokenBalanceToSwitch = switchTokenBalanceToSwitch_;\r\n  }\r\n\r\n  /// @notice Take next proportions of not-underlying from array\r\n  ///         First call should return valuesPropNotUnderlying18[0], second call - valuesPropNotUnderlying18[1]\r\n  ///         The function is view, so we cannot use counter. So we detect required value implicitly\r\n  ///         through the value of balance of the {switchToken} of the sender.\r\n  /// @return Proportion of the not-underlying [0...1e18]\r\n  function getPropNotUnderlying18() external view returns (uint) {\r\n    console.log(\"getPropNotUnderlying18.IERC20(switchToken).balanceOf(msg.sender)\", IERC20(switchToken).balanceOf(msg.sender));\r\n    uint ret = IERC20(switchToken).balanceOf(msg.sender) == switchTokenBalanceToSwitch\r\n      ? valuesPropNotUnderlying18[1]\r\n      : valuesPropNotUnderlying18[0];\r\n    console.log(\"getPropNotUnderlying18.ret\", ret);\r\n    return ret;\r\n  }\r\n  //endregion ---------------------------------------------- IPoolProportionsProvider implementation\r\n\r\n  function _extractProp(uint planKind, bytes memory planEntryData) external pure returns(\r\n    uint propNotUnderlying18,\r\n    uint entryDataParamValue\r\n  ) {\r\n    return PairBasedStrategyLib._extractProp(planKind, planEntryData);\r\n  }\r\n\r\n  //region ------------------------------------------------ Fuse functions\r\n  PairBasedStrategyLib.FuseStateParams internal _fuse;\r\n  function setUpFuse(uint status, uint[4] memory thresholds) external {\r\n    _fuse.status = PairBasedStrategyLib.FuseStatus(status);\r\n    _fuse.thresholds = thresholds;\r\n  }\r\n  function getFuseData() external view returns (uint status, uint[4] memory thresholds) {\r\n    return (uint(_fuse.status), _fuse.thresholds);\r\n  }\r\n\r\n  function setFuseStatus(uint status) external {\r\n    PairBasedStrategyLib.setFuseStatus(_fuse, PairBasedStrategyLib.FuseStatus(status));\r\n  }\r\n\r\n  function setFuseThresholds(uint[4] memory values) external {\r\n    PairBasedStrategyLib.setFuseThresholds(_fuse, values);\r\n  }\r\n\r\n  function needChangeFuseStatus(PairBasedStrategyLib.FuseStatus status_, uint[4] memory thresholds_, uint price, uint poolPrice) external pure returns (\r\n    bool needToChange,\r\n    PairBasedStrategyLib.FuseStatus status\r\n  ) {\r\n    PairBasedStrategyLib.FuseStateParams memory fuse;\r\n    fuse.status = status_;\r\n    fuse.thresholds = thresholds_;\r\n\r\n    return PairBasedStrategyLib.needChangeFuseStatus(fuse, price, poolPrice);\r\n  }\r\n  //endregion ------------------------------------------------ Fuse functions\r\n}\r\n"
    },
    "contracts/test/facades/PairBasedStrategyLogicLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../strategies/pair/PairBasedStrategyLogicLib.sol\";\r\nimport \"../../strategies/pair/PairBasedStrategyLib.sol\";\r\n\r\ncontract PairBasedStrategyLogicLibFacade {\r\n  mapping(address => uint) public liquidationThresholds;\r\n  PairBasedStrategyLogicLib.PairState internal pairState;\r\n\r\n  //region Auxiliary functions\r\n  function setLiquidationThreshold(address asset, uint threshold) external {\r\n    liquidationThresholds[asset] = threshold;\r\n  }\r\n\r\n  /// @param tickParams [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  function setPairState(\r\n    address[2] memory tokensAB,\r\n    address pool,\r\n    bool isStablePool,\r\n    int24[4] memory tickParams,\r\n    bool depositorSwapTokens,\r\n    uint128 totalLiquidity,\r\n    address strategyProfitHolder,\r\n    PairBasedStrategyLib.FuseStatus status_,\r\n    uint[4] memory thresholds_,\r\n    uint withdrawDone,\r\n    uint lastRebalanceNoSwap\r\n  ) external {\r\n    pairState.tokenA = tokensAB[0];\r\n    pairState.tokenB = tokensAB[1];\r\n\r\n    pairState.pool = address(pool);\r\n    pairState.isStablePool = isStablePool;\r\n\r\n    pairState.tickSpacing = tickParams[0];\r\n    pairState.lowerTick = tickParams[1];\r\n    pairState.upperTick = tickParams[2];\r\n    pairState.rebalanceTickRange = tickParams[3];\r\n\r\n    pairState.depositorSwapTokens = depositorSwapTokens;\r\n    pairState.totalLiquidity = totalLiquidity;\r\n    pairState.strategyProfitHolder = strategyProfitHolder;\r\n    pairState.fuseAB.status = status_;\r\n    pairState.fuseAB.thresholds = thresholds_;\r\n\r\n    pairState.withdrawDone = withdrawDone;\r\n    pairState.lastRebalanceNoSwap = lastRebalanceNoSwap;\r\n  }\r\n\r\n  function getPairState() external view returns(\r\n    address[2] memory tokensAB,\r\n    address pool,\r\n    bool isStablePool,\r\n    int24[4] memory tickParams,\r\n    bool depositorSwapTokens,\r\n    uint128 totalLiquidity,\r\n    address strategyProfitHolder,\r\n    uint[10] memory fuseParams, // [fuse status, 4 thresholds of fuse, 5 deprecated valuues]\r\n    uint withdrawDone\r\n  ) {\r\n    return (\r\n      [pairState.tokenA, pairState.tokenB],\r\n      pairState.pool,\r\n      pairState.isStablePool,\r\n      [pairState.tickSpacing, pairState.lowerTick, pairState.upperTick, pairState.rebalanceTickRange],\r\n      pairState.depositorSwapTokens,\r\n      pairState.totalLiquidity,\r\n      pairState.strategyProfitHolder,\r\n      [\r\n        uint(pairState.fuseAB.status),\r\n        pairState.fuseAB.thresholds[0],\r\n        pairState.fuseAB.thresholds[1],\r\n        pairState.fuseAB.thresholds[2],\r\n        pairState.fuseAB.thresholds[3],\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        0\r\n      ],\r\n      pairState.withdrawDone\r\n    );\r\n  }\r\n  //endregion Auxiliary functions\r\n\r\n  function _beforeDeposit(\r\n    ITetuConverter tetuConverter_,\r\n    uint amount_,\r\n    address tokenA,\r\n    address tokenB,\r\n    uint prop0\r\n  ) external returns (uint[] memory tokenAmounts) {\r\n    return PairBasedStrategyLogicLib._beforeDeposit(tetuConverter_, amount_, tokenA, tokenB, prop0, liquidationThresholds);\r\n  }\r\n\r\n  function initWithdrawLocal(\r\n    address[2] calldata tokens,\r\n    bytes memory planEntryData,\r\n    address controller\r\n  ) external view returns (\r\n    PairBasedStrategyLogicLib.WithdrawLocal memory dest // for tests it's ok to return a struct\r\n  ) {\r\n    PairBasedStrategyLogicLib.initWithdrawLocal(dest, tokens, liquidationThresholds, planEntryData, controller);\r\n    return dest;\r\n  }\r\n\r\n  function _needPoolRebalance(\r\n    int24 tick,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    int24 tickSpacing,\r\n    int24 rebalanceTickRange\r\n  ) external pure returns (bool) {\r\n    return PairBasedStrategyLogicLib._needPoolRebalance(tick, lowerTick, upperTick, tickSpacing, rebalanceTickRange);\r\n  }\r\n\r\n  function needStrategyRebalance(\r\n    ITetuConverter converter_,\r\n    int24 tick,\r\n    uint poolPrice\r\n  ) external view returns (\r\n    bool needRebalance,\r\n    bool fuseStatusChangedAB,\r\n    PairBasedStrategyLib.FuseStatus fuseStatusAB\r\n  ) {\r\n    return PairBasedStrategyLogicLib.needStrategyRebalance(pairState, converter_, tick, poolPrice);\r\n  }\r\n\r\n  function setInitialDepositorValues(\r\n    address[4] calldata addr,\r\n    int24[4] calldata tickData,\r\n    bool isStablePool_,\r\n    uint[4] calldata fuseThresholds\r\n  ) external {\r\n    PairBasedStrategyLogicLib.setInitialDepositorValues(pairState, addr, tickData, isStablePool_, fuseThresholds);\r\n  }\r\n\r\n  function updateFuseStatus(\r\n    bool fuseStatusChangedAB,\r\n    PairBasedStrategyLib.FuseStatus fuseStatusAB\r\n  ) external {\r\n    PairBasedStrategyLogicLib.updateFuseStatus(pairState, fuseStatusChangedAB, fuseStatusAB);\r\n  }\r\n\r\n  function getDefaultState() external view returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  ) {\r\n    return PairBasedStrategyLogicLib.getDefaultState(pairState);\r\n  }\r\n\r\n  function calcTickRange(int24 tick, int24 tickRange, int24 tickSpacing) external pure returns (\r\n    int24 lowerTick,\r\n    int24 upperTick\r\n  ) {\r\n    return PairBasedStrategyLogicLib.calcTickRange(tick, tickRange, tickSpacing);\r\n  }\r\n}\r\n\r\n"
    },
    "contracts/test/facades/pancake/PancakeConverterStrategyLogicLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../../strategies/pancake/PancakeConverterStrategyLogicLib.sol\";\r\nimport \"@tetu_io/tetu-liquidator/contracts/dex/uniswap3/interfaces/IUniswapV3Pool.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract PancakeConverterStrategyLogicLibFacade {\r\n  PancakeConverterStrategyLogicLib.State public state;\r\n\r\n  function setState(uint tokenId, IPancakeMasterChefV3 chef) external {\r\n    state.tokenId = tokenId;\r\n    state.chef = chef;\r\n    // use initStrategyState to initialize state.pair\r\n  }\r\n\r\n  function setStrategyProfitHolder(address strategyProfitHolder) external {\r\n    state.pair.strategyProfitHolder = strategyProfitHolder;\r\n  }\r\n\r\n  function enter(uint[] memory amountsDesired_) external returns (uint[] memory amountsConsumed, uint liquidityOut) {\r\n    return PancakeConverterStrategyLogicLib.enter(state, amountsDesired_);\r\n  }\r\n\r\n  function exit(uint128 liquidityAmountToExit, bool emergency) external returns (uint[] memory amountsOut) {\r\n    return PancakeConverterStrategyLogicLib.exit(state, liquidityAmountToExit, emergency);\r\n  }\r\n\r\n  function initStrategyState(\r\n    address controller_,\r\n    address pool,\r\n    int24 tickRange,\r\n    int24 rebalanceTickRange,\r\n    address asset_,\r\n    uint[4] calldata fuseThresholds,\r\n    address chef_\r\n  ) external {\r\n    PancakeConverterStrategyLogicLib.initStrategyState(state, [controller_, pool, chef_], tickRange, rebalanceTickRange, asset_, fuseThresholds);\r\n  }\r\n\r\n  function moveTickRange(int24 increment) external {\r\n    state.pair.upperTick += increment;\r\n    state.pair.lowerTick += increment;\r\n  }\r\n\r\n  function claimRewards() external returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    return PancakeConverterStrategyLogicLib.claimRewards(state);\r\n  }\r\n\r\n  function getDefaultState() external view returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  ) {\r\n    return PairBasedStrategyLogicLib.getDefaultState(state.pair);\r\n  }\r\n\r\n  function getPoolReserves() external view returns (\r\n    uint[] memory reserves\r\n  ) {\r\n    return PancakeConverterStrategyLogicLib.getPoolReserves(state.pair);\r\n  }\r\n\r\n  function quoteExit(uint128 liquidityAmountToExit) public view returns (uint[] memory amountsOut) {\r\n    return PancakeConverterStrategyLogicLib.quoteExit(state.pair, liquidityAmountToExit);\r\n  }\r\n\r\n//  function onERC721Received(\r\n//    address,\r\n//    address,\r\n//    uint256,\r\n//    bytes memory\r\n//  ) external pure returns (bytes4) {\r\n//    return this.onERC721Received.selector;\r\n//  }\r\n}\r\n"
    },
    "contracts/test/facades/pancake/PancakeDebtLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../../libs/TokenAmountsLib.sol\";\r\nimport \"../../../integrations/pancake/IPancakeV3Pool.sol\";\r\nimport \"../../../strategies/pancake/PancakeDebtLib.sol\";\r\n\r\ncontract PancakeDebtLibFacade {\r\n  function getEntryDataProportions(\r\n    IPancakeV3Pool pool,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    bool depositorSwapTokens\r\n  ) external view returns (uint prop0, uint prop1) {\r\n    return PancakeDebtLib.getEntryDataProportions(pool, lowerTick, upperTick, depositorSwapTokens);\r\n  }\r\n\r\n  function callNftPositions(address nft, uint256 tokenId) external view returns (\r\n    int24 tickLower,\r\n    int24 tickUpper\r\n  ) {\r\n    return PancakeDebtLib.callNftPositions(nft, tokenId);\r\n  }\r\n\r\n}"
    },
    "contracts/test/facades/TokenAmountsLibTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../libs/TokenAmountsLib.sol\";\r\n\r\n/// @author bogdoslav\r\ncontract TokenAmountsLibTest {\r\n\r\n  function filterZeroAmounts(\r\n    address[] memory tokens,\r\n    uint[] memory amounts\r\n  ) external pure returns (\r\n    address[] memory t,\r\n    uint[] memory a\r\n  ) {\r\n    return TokenAmountsLib.filterZeroAmounts(tokens, amounts);\r\n  }\r\n\r\n  function combineArrays(\r\n    address[] memory tokens0,\r\n    uint[] memory amounts0,\r\n    address[] memory tokens1,\r\n    uint[] memory amounts1,\r\n    address[] memory tokens2,\r\n    uint[] memory amounts2\r\n  ) external pure returns (\r\n    address[] memory allTokens,\r\n    uint[] memory allAmounts\r\n  ) {\r\n    return TokenAmountsLib.combineArrays(\r\n      tokens0, amounts0,\r\n      tokens1, amounts1,\r\n      tokens2, amounts2\r\n    );\r\n  }\r\n\r\n  function uncheckedInc(uint i) external pure returns (uint) {\r\n    return TokenAmountsLib.uncheckedInc(i);\r\n  }\r\n}\r\n"
    },
    "contracts/test/facades/Uniswap2LibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n//import \"../../integrations/uniswap/IUniswapV2Router02.sol\";\r\n//import \"../../tools/Uniswap2Lib.sol\";\r\n//\r\n///// @notice Provide direct access to Uniswal2Lib functions for unit tests\r\n//contract Uniswap2LibFacade {\r\n//  function quoteRemoveLiquidity(\r\n//    IUniswapV2Router02 router_,\r\n//    address user_,\r\n//    address tokenA_,\r\n//    address tokenB_,\r\n//    uint liquidity_\r\n//  ) external view returns(\r\n//    uint amountAOut,\r\n//    uint amountBOut\r\n//  ) {\r\n//    return Uniswap2Lib.quoteRemoveLiquidity(router_, user_, tokenA_, tokenB_, liquidity_);\r\n//  }\r\n//}\r\n"
    },
    "contracts/test/facades/UniswapV3ConverterStrategyLogicLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../strategies/uniswap/UniswapV3ConverterStrategyLogicLib.sol\";\r\n\r\ncontract UniswapV3ConverterStrategyLogicLibFacade {\r\n  UniswapV3ConverterStrategyLogicLib.State internal state;\r\n\r\n  /// @param tickParams [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  function setState(\r\n    address[2] memory tokensAB,\r\n    IUniswapV3Pool pool,\r\n    bool isStablePool,\r\n    int24[4] memory tickParams,\r\n    bool depositorSwapTokens,\r\n    uint128 totalLiquidity,\r\n    address strategyProfitHolder,\r\n    PairBasedStrategyLib.FuseStateParams memory fuseAB\r\n  ) external {\r\n    state.pair.tokenA = tokensAB[0];\r\n    state.pair.tokenB = tokensAB[1];\r\n\r\n    state.pair.pool = address(pool);\r\n    state.pair.isStablePool = isStablePool;\r\n\r\n    state.pair.tickSpacing = tickParams[0];\r\n    state.pair.lowerTick = tickParams[1];\r\n    state.pair.upperTick = tickParams[2];\r\n    state.pair.rebalanceTickRange = tickParams[3];\r\n\r\n    state.pair.depositorSwapTokens = depositorSwapTokens;\r\n    state.pair.totalLiquidity = totalLiquidity;\r\n    state.pair.strategyProfitHolder = strategyProfitHolder;\r\n    state.pair.fuseAB = fuseAB;\r\n  }\r\n\r\n  function needStrategyRebalance(ITetuConverter converter_) external view returns (bool needRebalance) {\r\n    return UniswapV3ConverterStrategyLogicLib.needStrategyRebalance(state.pair, converter_);\r\n  }\r\n}"
    },
    "contracts/test/facades/UniswapV3DebtLibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../integrations/uniswap/IUniswapV3Pool.sol\";\r\nimport \"../../strategies/uniswap/UniswapV3DebtLib.sol\";\r\n\r\ncontract UniswapV3DebtLibFacade {\r\n\r\n  function getCurrentTick(IUniswapV3Pool pool) internal view returns (int24 tick) {\r\n    return UniswapV3DebtLib.getCurrentTick(pool);\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/test/facades/UniswapV3LibFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../strategies/uniswap/UniswapV3Lib.sol\";\r\n\r\n/// @notice Provide direct access to UniswapV3Lib functions for unit tests\r\ncontract UniswapV3LibFacade {\r\n  function getAmountsForLiquidity(\r\n    uint160 sqrtRatioX96,\r\n    int24 lowerTick,\r\n    int24 upperTick,\r\n    uint128 liquidity\r\n  ) public pure returns (uint amount0, uint amount1) {\r\n    return UniswapV3Lib.getAmountsForLiquidity(sqrtRatioX96, lowerTick, upperTick, liquidity);\r\n  }\r\n}\r\n"
    },
    "contracts/test/helpers/SwapHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport \"@tetu_io/tetu-liquidator/contracts/interfaces/ISwapper.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\";\r\n\r\n/// @notice Combine \"transfer\" and \"swap\" to single transaction (to be able to revert both)\r\ncontract SwapHelper {\r\n  using SafeERC20 for IERC20;\r\n  function transferAndSwap(\r\n    ISwapper swapper,\r\n    uint swapAmount,\r\n    address pool,\r\n    IERC20 tokenIn,\r\n    IERC20 tokenOut,\r\n    uint priceImpactTolerance\r\n  ) external {\r\n    tokenIn.safeTransferFrom(msg.sender, address(this), swapAmount);\r\n    tokenIn.safeTransfer(address(swapper), swapAmount);\r\n    swapper.swap(\r\n      pool,\r\n      address(tokenIn),\r\n      address(tokenOut),\r\n      msg.sender,\r\n      priceImpactTolerance\r\n    );\r\n  }\r\n\r\n}"
    },
    "contracts/test/Liquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-liquidator/contracts/Controller.sol\";\r\nimport \"@tetu_io/tetu-liquidator/contracts/TetuLiquidator.sol\";\r\nimport \"@tetu_io/tetu-liquidator/contracts/proxy/ProxyControlled.sol\";\r\nimport \"@tetu_io/tetu-liquidator/contracts/swappers/Uni3Swapper.sol\";\r\n"
    },
    "contracts/test/mocks/MockAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n\r\n/// @notice This is a mock pool that swaps one token to another using prices a bit different from the prices from the given oracle\r\n/// 1) Put enough amounts of potential tokens-out to balance on this contract\r\n/// 2) For each pair (tokenIn, tokenOut) set up liquidation params\r\ncontract MockAggregator {\r\n  uint internal constant DENOMINATOR = 100_000;\r\n  IPriceOracle internal priceOracle;\r\n\r\n  struct SwapParams {\r\n    address tokenIn;\r\n    address tokenOut;\r\n    /// @notice true - increase output amount on {percentToIncrease}\r\n    bool increaseOutput;\r\n    /// @notice Percent of changing output amount, DENOMINATOR = 100_000, so 1000 = 1%\r\n    uint percentToIncrease;\r\n  }\r\n  mapping(bytes32 => SwapParams) internal _swapParams;\r\n\r\n  constructor(address priceOracle_) {\r\n    priceOracle = IPriceOracle(priceOracle_);\r\n  }\r\n\r\n  function setupLiquidate(address tokenIn, address tokenOut, bool increaseOutput, uint percentToIncrease) external {\r\n    bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenIn));\r\n    _swapParams[key] = SwapParams({\r\n      tokenIn: tokenIn,\r\n      tokenOut: tokenOut,\r\n      increaseOutput: increaseOutput,\r\n      percentToIncrease: percentToIncrease\r\n    });\r\n  }\r\n\r\n  /// @dev The function has same declaration as TetuLiquidator.liquidate\r\n  function liquidate(address tokenIn, address tokenOut, uint amountIn, uint slippage) external {\r\n    slippage; //hide warning\r\n\r\n    SwapParams memory swapParams;\r\n    {\r\n      bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenIn));\r\n      swapParams = _swapParams[key];\r\n    }\r\n\r\n    uint amountOut;\r\n    {\r\n      uint priceIn = priceOracle.getAssetPrice(tokenIn);\r\n      uint priceOut = priceOracle.getAssetPrice(tokenOut);\r\n\r\n      uint decimalsIn = IERC20Metadata(tokenIn).decimals();\r\n      uint decimalsOut = IERC20Metadata(tokenOut).decimals();\r\n\r\n      uint amountOutByOracle = amountIn * priceIn * decimalsOut / priceOut / decimalsIn;\r\n      uint delta = amountOutByOracle * (DENOMINATOR + swapParams.percentToIncrease) / DENOMINATOR;\r\n      if (swapParams.increaseOutput) {\r\n        amountOut += delta;\r\n      } else {\r\n        amountOut = amountOut > delta\r\n          ? amountOut - delta\r\n          : 0;\r\n      }\r\n    }\r\n\r\n    {\r\n      uint balanceOut = IERC20(tokenIn).balanceOf(address(this));\r\n      require(balanceOut >= amountOut, \"MockAggregator has not enough balance\");\r\n    }\r\n\r\n    if (amountOut != 0) {\r\n      IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\r\n      IERC20(tokenOut).transfer(msg.sender, amountOut);\r\n    }\r\n  }\r\n\r\n}"
    },
    "contracts/test/mocks/MockBookkeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"hardhat/console.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IBookkeeper.sol\";\r\n\r\ncontract MockBookkeeper is IBookkeeper {\r\n  uint[] private _deltaGains;\r\n  uint[] private _deltaLosses;\r\n  address[] private _tokensPassed;\r\n\r\n  function setCheckpoint(uint[] memory deltaGains_, uint[] memory deltaLosses_) external {\r\n    _deltaGains = deltaGains_;\r\n    _deltaLosses = deltaLosses_;\r\n  }\r\n\r\n  function getCheckpointResults() external view returns (address[] memory ) {\r\n    console.log(\"len tokens 2\", _tokensPassed.length, address(this));\r\n    return _tokensPassed;\r\n  }\r\n\r\n  /// @notice Save checkpoint for all pool adapters of the given {user_}\r\n  /// @return deltaGains Total amount of gains for the {tokens_} by all pool adapter\r\n  /// @return deltaLosses Total amount of losses for the {tokens_} by all pool adapter\r\n  function checkpoint(address[] memory tokens_) external returns (\r\n    uint[] memory deltaGains,\r\n    uint[] memory deltaLosses\r\n  ) {\r\n    console.log(\"checkpoint\");\r\n    console.log(\"len tokens\", tokens_.length, address(this));\r\n    _tokensPassed = tokens_;\r\n    return (_deltaGains, _deltaLosses);\r\n  }\r\n\r\n  function onBorrow(uint collateralAmount, uint borrowedAmount) external pure {\r\n    collateralAmount;\r\n    borrowedAmount;\r\n  }\r\n\r\n  function onRepay(uint withdrawnCollateral, uint paidAmount) external pure {\r\n    withdrawnCollateral;\r\n    paidAmount;\r\n  }\r\n\r\n  function previewCheckpoint(address user, address[] memory tokens_) external pure returns (\r\n    uint[] memory deltaGains,\r\n    uint[] memory deltaLosses\r\n  ) {\r\n    user;\r\n    tokens_;\r\n    return (deltaGains, deltaLosses);\r\n  }\r\n\r\n  function startPeriod(address underlying_) external pure returns (\r\n    uint gains,\r\n    uint losses\r\n  ) {\r\n    underlying_;\r\n    return (gains, losses);\r\n  }\r\n\r\n  function previewPeriod(address underlying_, address user_) external pure returns (uint gains, uint losses) {\r\n    underlying_;\r\n    user_;\r\n    return (gains, losses);\r\n  }\r\n}"
    },
    "contracts/test/mocks/MockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Mock of IController (only methods required for tests)\r\ncontract MockController {\r\n  address private _forwarder;\r\n  mapping(address => bool) internal operators;\r\n\r\n  function setForwarder(address forwarder_) external {\r\n    _forwarder = forwarder_;\r\n  }\r\n  function forwarder() external view returns (address) {\r\n    return _forwarder;\r\n  }\r\n\r\n\r\n  function setOperator(address adr_, bool value) external {\r\n    operators[adr_] = value;\r\n  }\r\n  function isOperator(address adr_) external view returns (bool) {\r\n    return operators[adr_];\r\n  }\r\n}"
    },
    "contracts/test/mocks/MockConverterStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\";\r\nimport \"../../strategies/ConverterStrategyBase.sol\";\r\nimport \"./MockDepositor.sol\";\r\n\r\n/// @title Mock Converter Strategy with MockDepositor\r\n/// @author bogdoslav\r\ncontract MockConverterStrategy is ConverterStrategyBase, MockDepositor {\r\n\r\n  string public constant override NAME = \"mock converter strategy\";\r\n  string public constant override PLATFORM = \"test\";\r\n  string public constant override STRATEGY_VERSION = \"1.0.0\";\r\n\r\n  //region ------------------------------------------------------- init\r\n\r\n  function init(\r\n    address controller_,\r\n    address splitter_,\r\n    address converter_,\r\n    address[] memory depositorTokens_,\r\n    uint[] memory depositorWeights_,\r\n    uint[] memory depositorReserves_\r\n  ) external initializer {\r\n\r\n    __MockDepositor_init(\r\n      depositorTokens_,\r\n      depositorWeights_,\r\n      depositorReserves_\r\n    );\r\n\r\n    __ConverterStrategyBase_init(\r\n      controller_,\r\n      splitter_,\r\n      converter_\r\n    );\r\n  }\r\n\r\n  function init2(address controller_, address splitter_, address converter_) external {\r\n    __ConverterStrategyBase_init(\r\n      controller_,\r\n      splitter_,\r\n      converter_\r\n    );\r\n  }\r\n\r\n  function setInvestedAssets(uint investedAssets_) external {\r\n    _csbs.investedAssets = investedAssets_;\r\n  }\r\n  //endregion ------------------------------------------------------- init\r\n\r\n  //region ------------------------------------------------------- direct access to internal functions for tests\r\n  function closePositionTestAccess(address collateralAsset, address borrowAsset, uint amountToRepay) external returns (\r\n    uint returnedAssetAmount,\r\n    uint leftover\r\n  ) {\r\n    return ConverterStrategyBaseLib.closePosition(_csbs.converter, collateralAsset, borrowAsset, amountToRepay);\r\n  }\r\n\r\n  function updateInvestedAssetsTestAccess() external {\r\n    _updateInvestedAssets();\r\n  }\r\n\r\n  function _doHardWorkAccess(bool reInvest) external returns (uint earned, uint lost) {\r\n    return _doHardWork(reInvest);\r\n  }\r\n  //endregion ------------------------------------------------------- direct access to internal functions for tests\r\n\r\n  //region ------------------------------------------------------- Withdraw universal\r\n  struct MockedWithdrawUniversalParams {\r\n    // auxiliary params\r\n    bool initialized;\r\n    address assetProvider;\r\n    uint assetAmountToGetFromProvider;\r\n\r\n    // input params\r\n    uint amount;\r\n    uint earnedByPrices;\r\n    uint investedAssets;\r\n\r\n    // output params\r\n    uint expectedWithdrewUSD;\r\n    uint assetPrice;\r\n    uint strategyLoss;\r\n    uint amountSentToInsurance;\r\n  }\r\n\r\n  mapping(bytes32 => MockedWithdrawUniversalParams) internal _mockedWithdrawParams;\r\n\r\n  function setUpMockedWithdrawUniversal(\r\n  // auxiliary params\r\n    address assetProvider_,\r\n    uint assetAmountToGetFromProvider_,\r\n  // input params\r\n    uint amount,\r\n    uint earnedByPrices_,\r\n    uint investedAssets_,\r\n  // output params\r\n    uint expectedWithdrewUSD,\r\n    uint assetPrice,\r\n    uint strategyLoss,\r\n    uint amountSentToInsurance\r\n  ) external {\r\n    bytes32 key = keccak256(abi.encodePacked(amount, earnedByPrices_, investedAssets_));\r\n    _mockedWithdrawParams[key] = MockedWithdrawUniversalParams({\r\n      initialized: true,\r\n      assetProvider: assetProvider_,\r\n      assetAmountToGetFromProvider: assetAmountToGetFromProvider_,\r\n\r\n      amount: amount,\r\n      earnedByPrices: earnedByPrices_,\r\n      investedAssets: investedAssets_,\r\n\r\n      expectedWithdrewUSD: expectedWithdrewUSD,\r\n      assetPrice: assetPrice,\r\n      strategyLoss: strategyLoss,\r\n      amountSentToInsurance: amountSentToInsurance\r\n    });\r\n  }\r\n\r\n  /// @notice Direct access to internal _withdrawUniversal\r\n  function withdrawUniversalTestAccess(uint amount, bool all, uint earnedByPrices_, uint investedAssets_) external returns (\r\n    uint expectedWithdrewUSD,\r\n    uint assetPrice,\r\n    uint strategyLoss,\r\n    uint amountSentToInsurance\r\n  ) {\r\n    return _withdrawUniversal(all ? type(uint).max : amount, earnedByPrices_, investedAssets_);\r\n  }\r\n\r\n  /// @notice Call original OR mocked version of _withdrawUniversal\r\n  function _withdrawUniversal(uint amount, uint earnedByPrices_, uint investedAssets_) override internal returns (\r\n    uint expectedWithdrewUSD,\r\n    uint __assetPrice,\r\n    uint strategyLoss,\r\n    uint amountSentToInsurance\r\n  ) {\r\n    bytes32 key = keccak256(abi.encodePacked(amount, earnedByPrices_, investedAssets_));\r\n    MockedWithdrawUniversalParams memory data = _mockedWithdrawParams[key];\r\n\r\n    if (data.initialized) {\r\n      if (data.assetProvider != address(0)) {\r\n        // get asset from the asset provider to balance\r\n        IERC20(baseState.asset).transferFrom(\r\n          data.assetProvider,\r\n          address(this),\r\n          data.assetAmountToGetFromProvider\r\n        );\r\n      }\r\n      if (data.amountSentToInsurance != 0) {\r\n        address insurance = address(ITetuVaultV2(ISplitter(baseState.splitter).vault()).insurance());\r\n        IERC20(baseState.asset).transfer(insurance, data.amountSentToInsurance);\r\n      }\r\n\r\n      return (\r\n        data.expectedWithdrewUSD,\r\n        data.assetPrice,\r\n        data.strategyLoss,\r\n        data.amountSentToInsurance\r\n      );\r\n    } else {\r\n      return super._withdrawUniversal(amount, earnedByPrices_, investedAssets_);\r\n    }\r\n  }\r\n  //endregion ------------------------------------------------------- Withdraw universal\r\n\r\n  //region--------------------------------------- _handleRewards, mocked version + accessor\r\n  function _handleRewards() internal override returns (uint earned, uint lost, uint assetBalanceAfterClaim, uint paidDebtToInsurance, uint amountPerf) {\r\n    address asset = baseState.asset;\r\n    if (handleRewardsParams.initialized) {\r\n      //      console.log(\"_handleRewards.mocked-version is called\");\r\n      if (handleRewardsParams.assetBalanceChange > 0) {\r\n        IERC20(asset).transferFrom(\r\n          handleRewardsParams.providerBalanceChange,\r\n          address(this),\r\n          uint(handleRewardsParams.assetBalanceChange)\r\n        );\r\n      } else if (handleRewardsParams.assetBalanceChange < 0) {\r\n        IERC20(asset).transfer(\r\n          handleRewardsParams.providerBalanceChange,\r\n          uint(- handleRewardsParams.assetBalanceChange)\r\n        );\r\n      }\r\n      return (handleRewardsParams.earned, handleRewardsParams.lost, AppLib.balance(asset), handleRewardsParams.paidDebtToInsurance, amountPerf);\r\n    } else {\r\n      return __handleRewardsImpl();\r\n    }\r\n  }\r\n\r\n  function __handleRewardsImpl() internal returns (\r\n    uint earned,\r\n    uint lost,\r\n    uint assetBalanceAfterClaim,\r\n    uint paidDebtToInsurance,\r\n    uint amountPerf\r\n  ) {\r\n    address asset = baseState.asset;\r\n    uint assetBalanceBefore = AppLib.balance(asset);\r\n    (address[] memory rewardTokens, uint[] memory amounts) = _claim();\r\n    (paidDebtToInsurance, amountPerf) = _rewardsLiquidation(rewardTokens, amounts);\r\n    assetBalanceAfterClaim = AppLib.balance(asset);\r\n    (uint earned2, uint lost2) = ConverterStrategyBaseLib2._registerIncome(assetBalanceBefore, assetBalanceAfterClaim);\r\n    return (earned + earned2, lost + lost2, assetBalanceAfterClaim, paidDebtToInsurance, amountPerf);\r\n  }\r\n\r\n  struct MockedHandleRewardsParams {\r\n    bool initialized;\r\n    uint earned;\r\n    uint lost;\r\n    int assetBalanceChange;\r\n    address providerBalanceChange;\r\n    uint paidDebtToInsurance;\r\n  }\r\n\r\n  MockedHandleRewardsParams private handleRewardsParams;\r\n\r\n  function setMockedHandleRewardsResults(\r\n    uint earned,\r\n    uint lost,\r\n    int assetBalanceChange,\r\n    address providerBalanceChange,\r\n    uint paidDebtToInsurance\r\n  ) external {\r\n    handleRewardsParams = MockedHandleRewardsParams({\r\n      initialized: true,\r\n      earned: earned,\r\n      lost: lost,\r\n      assetBalanceChange: assetBalanceChange,\r\n      providerBalanceChange: providerBalanceChange,\r\n      paidDebtToInsurance: paidDebtToInsurance\r\n    });\r\n  }\r\n  //endregion--------------------------------------- _handleRewards, mocked version + accessor\r\n\r\n  //region -------------------------------------------- _depositToPoolUni mock\r\n  struct MockedDepositToPoolUniParams {\r\n    bool initialized;\r\n    int balanceChange;\r\n    address providerBalanceChange;\r\n    uint loss;\r\n    uint amountSentToInsurance;\r\n  }\r\n\r\n  MockedDepositToPoolUniParams internal depositToPoolParams;\r\n\r\n  function _depositToPoolAccess(uint amount_, bool updateTotalAssetsBeforeInvest_) external returns (\r\n    uint loss\r\n  ) {\r\n    return _depositToPool(amount_, updateTotalAssetsBeforeInvest_);\r\n  }\r\n\r\n\r\n  function depositToPoolUniAccess(\r\n    uint amount_,\r\n    uint earnedByPrices_,\r\n    uint investedAssets_,\r\n    bool updateInvestedAssetsInAnyCase_\r\n  ) external returns (\r\n    uint strategyLoss,\r\n    uint amountSentToInsurance\r\n  ) {\r\n    return _depositToPoolUniversal(amount_, earnedByPrices_, investedAssets_, updateInvestedAssetsInAnyCase_);\r\n  }\r\n\r\n  function _depositToPoolUniversal(\r\n    uint amount_,\r\n    uint earnedByPrices_,\r\n    uint investedAssets_,\r\n    bool updateInvestedAssetsInAnyCase_\r\n  ) override internal virtual returns (\r\n    uint strategyLoss,\r\n    uint amountSentToInsurance\r\n  ) {\r\n    address asset = baseState.asset;\r\n    if (depositToPoolParams.initialized) {\r\n      //      console.log(\"_depositToPool.mocked-version is called\");\r\n      if (depositToPoolParams.balanceChange > 0) {\r\n        IERC20(asset).transferFrom(\r\n          depositToPoolParams.providerBalanceChange,\r\n          address(this),\r\n          uint(depositToPoolParams.balanceChange)\r\n        );\r\n      } else if (depositToPoolParams.balanceChange < 0) {\r\n        IERC20(asset).transfer(\r\n          depositToPoolParams.providerBalanceChange,\r\n          uint(- depositToPoolParams.balanceChange)\r\n        );\r\n      }\r\n      return (depositToPoolParams.loss, depositToPoolParams.amountSentToInsurance);\r\n    } else {\r\n      return super._depositToPoolUniversal(amount_, earnedByPrices_, investedAssets_, updateInvestedAssetsInAnyCase_);\r\n    }\r\n  }\r\n\r\n  function setMockedDepositToPoolUni(\r\n    int balanceChange,\r\n    address providerBalanceChange,\r\n    uint loss,\r\n    uint amountSentToInsurance\r\n  ) external {\r\n    depositToPoolParams = MockedDepositToPoolUniParams({\r\n      initialized: true,\r\n      balanceChange: balanceChange,\r\n      providerBalanceChange: providerBalanceChange,\r\n      loss: loss,\r\n      amountSentToInsurance: amountSentToInsurance\r\n    });\r\n  }\r\n  //endregion -------------------------------------------- _depositToPoolUni mock\r\n\r\n  //region ---------------------------------------- _beforeDeposit\r\n  struct BeforeDepositParams {\r\n    uint amount;\r\n    uint indexAsset;\r\n    uint[] tokenAmounts;\r\n  }\r\n\r\n  mapping(bytes32 => BeforeDepositParams) internal _beforeDepositParams;\r\n\r\n  function setBeforeDeposit(uint amount_, uint indexAsset_, uint[] memory tokenAmounts) external {\r\n    bytes32 key = keccak256(abi.encodePacked(amount_, indexAsset_));\r\n    _beforeDepositParams[key] = BeforeDepositParams({\r\n      amount: amount_,\r\n      indexAsset: indexAsset_,\r\n      tokenAmounts: tokenAmounts\r\n    });\r\n  }\r\n\r\n  function _beforeDeposit(\r\n    ITetuConverter tetuConverter_,\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint indexAsset_\r\n  ) internal override returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    bytes32 key = keccak256(abi.encodePacked(amount_, indexAsset_));\r\n    if (_beforeDepositParams[key].amount == amount_) {\r\n      return _beforeDepositParams[key].tokenAmounts;\r\n    } else {\r\n      return super._beforeDeposit(tetuConverter_, amount_, tokens_, indexAsset_);\r\n    }\r\n  }\r\n\r\n  function _beforeDepositAccess(\r\n    ITetuConverter tetuConverter_,\r\n    uint amount_,\r\n    address[] memory tokens_,\r\n    uint indexAsset_\r\n  ) external returns (\r\n    uint[] memory tokenAmounts\r\n  ) {\r\n    return _beforeDeposit(\r\n      tetuConverter_,\r\n      amount_,\r\n      tokens_,\r\n      indexAsset_\r\n    );\r\n  }\r\n  //endregion ---------------------------------------- _beforeDeposit\r\n\r\n  //region ----------------------------------------------------- makeRequestedAmount\r\n\r\n  struct MakeRequestedAmountParams {\r\n    bool useMockedValues;\r\n    address asset;\r\n    address assetProvider;\r\n    int amountToPutOnBalance;\r\n    uint expectedTotalAssetAmountOut;\r\n  }\r\n\r\n  MakeRequestedAmountParams private _makeRequestedAmountParams;\r\n\r\n  function setMakeRequestedAmountParams(\r\n    address asset,\r\n    address assetProvider,\r\n    int amountToPutOnBalance,\r\n    uint expectedTotalAssetAmountOut\r\n  ) external {\r\n    _makeRequestedAmountParams = MakeRequestedAmountParams({\r\n      useMockedValues: true,\r\n      asset: asset,\r\n      assetProvider: assetProvider,\r\n      amountToPutOnBalance: amountToPutOnBalance,\r\n      expectedTotalAssetAmountOut: expectedTotalAssetAmountOut\r\n    });\r\n  }\r\n\r\n  function _makeRequestedAmount(uint amount_, WithdrawUniversalLocal memory v) internal override returns (\r\n    uint expectedTotalAssetAmount\r\n  ) {\r\n    if (_makeRequestedAmountParams.useMockedValues) {\r\n      if (_makeRequestedAmountParams.amountToPutOnBalance >= 0) { // add amount on strategy balance\r\n        IERC20(_makeRequestedAmountParams.asset).transferFrom(_makeRequestedAmountParams.assetProvider, address(this), uint(_makeRequestedAmountParams.amountToPutOnBalance));\r\n      } else { // reduce strategy balance\r\n        IERC20(_makeRequestedAmountParams.asset).transfer(_makeRequestedAmountParams.assetProvider, uint(-_makeRequestedAmountParams.amountToPutOnBalance));\r\n      }\r\n      return _makeRequestedAmountParams.expectedTotalAssetAmountOut;\r\n    } else {\r\n      return super._makeRequestedAmount(amount_, v);\r\n    }\r\n  }\r\n\r\n  function _makeRequestedAmountAccess(uint amount_, WithdrawUniversalLocal memory v) external returns (\r\n    uint expectedTotalAssetAmount\r\n  ) {\r\n    return _makeRequestedAmount(amount_, v);\r\n  }\r\n  //endregion ----------------------------------------------------- makeRequestedAmount\r\n\r\n  //region ----------------------------------------------------- Others\r\n  function _emergencyExitFromPoolAccess() external {\r\n    _emergencyExitFromPool();\r\n  }\r\n\r\n  function _prepareRewardsListAccess(\r\n    ITetuConverter tetuConverter_,\r\n    address[] memory tokens_,\r\n    address[] memory rewardTokens_,\r\n    uint[] memory rewardAmounts_\r\n  ) external returns (\r\n    address[] memory tokensOut,\r\n    uint[] memory amountsOut\r\n  ) {\r\n    return ConverterStrategyBaseLib2.claimConverterRewards(tetuConverter_, tokens_, rewardTokens_, rewardAmounts_, new uint[](0));\r\n  }\r\n\r\n  function recycleAccess(address[] memory tokens, uint[] memory amounts) external {\r\n    ConverterStrategyBaseLib.recycle(\r\n      baseState,\r\n      _csbs,\r\n      _depositorPoolAssets(),\r\n      controller(),\r\n      liquidationThresholds,\r\n      tokens,\r\n      amounts\r\n    );\r\n  }\r\n\r\n  //endregion ----------------------------------------------------- Others\r\n\r\n  function _getTokensAccess(address asset_) external view returns (address[] memory tokens, uint indexAsset) {\r\n    return _getTokens(asset_);\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/test/mocks/MockDepositor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../strategies/DepositorBase.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/test/IMockToken.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\";\r\n// import \"hardhat/console.sol\";\r\n\r\n/// @title Mock contract for base Depositor.\r\ncontract MockDepositor is DepositorBase, Initializable {\r\n\r\n  uint[] private _depositorReserves;\r\n  uint[] private _depositorWeights;\r\n\r\n  address[] private _depositorAssets;\r\n\r\n  /// @notice total amount of active LP tokens.\r\n  uint public totalSupply;\r\n  uint private depositorLiquidity;\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                   Initialization\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  // @notice tokens must be MockTokens\r\n  function __MockDepositor_init(\r\n    address[] memory tokens_,\r\n    uint[] memory depositorWeights_,\r\n    uint[] memory depositorReserves_\r\n  ) internal onlyInitializing {\r\n    uint tokensLength = tokens_.length;\r\n    for (uint i = 0; i < tokensLength; ++i) {\r\n      _depositorAssets.push(tokens_[i]);\r\n      _depositorWeights.push(depositorWeights_[i]);\r\n      _depositorReserves.push(depositorReserves_[i]);\r\n    }\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                   _depositorTotalSupply\r\n  /////////////////////////////////////////////////////////////////////\r\n  function setTotalSupply(uint totalSupply_) external {\r\n    totalSupply = totalSupply_;\r\n  }\r\n  //// @notice Total amount of LP tokens in the depositor\r\n  function _depositorTotalSupply() override internal view returns (uint) {\r\n    return totalSupply;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                   _depositorLiquidity\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  function _depositorLiquidity() override internal virtual view returns (uint) {\r\n    return depositorLiquidity;\r\n  }\r\n\r\n  function setDepositorLiquidity(uint depositorLiquidity_) external {\r\n    depositorLiquidity = depositorLiquidity_;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                   Misc\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  /// @dev Returns pool assets\r\n  function _depositorPoolAssets() override internal virtual view returns (address[] memory) {\r\n    //    console.log(\"_depositorPoolAssets\");\r\n    return _depositorAssets;\r\n  }\r\n\r\n  /// @dev Returns pool weights\r\n  function _depositorPoolWeights() override internal virtual view returns (uint[] memory weights, uint totalWeight) {\r\n    //    console.log(\"_depositorPoolWeights\", _depositorWeights.length);\r\n    weights = _depositorWeights;\r\n    uint len = weights.length;\r\n    totalWeight = 0;\r\n    for (uint i; i < len; i++) {\r\n      totalWeight += weights[i];\r\n    }\r\n  }\r\n\r\n  function _depositorPoolReserves() override internal virtual view returns (uint[] memory reserves) {\r\n    reserves = _depositorReserves;\r\n  }\r\n\r\n  function setDepositorPoolReserves(uint[] memory depositorReserves_) external {\r\n    _depositorReserves = depositorReserves_;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                   _depositorEnter\r\n  /////////////////////////////////////////////////////////////////////\r\n  struct DepositorEnterParams {\r\n    uint[] amountsDesired;\r\n    uint[] amountsConsumed;\r\n    uint liquidityOut;\r\n  }\r\n\r\n  DepositorEnterParams internal depositorEnterParams;\r\n\r\n  function _depositorEnter(uint[] memory amountsDesired_) override internal virtual returns (\r\n    uint[] memory amountsConsumed,\r\n    uint liquidityOut\r\n  ) {\r\n    require(_depositorAssets.length == amountsDesired_.length);\r\n\r\n    uint len = amountsDesired_.length;\r\n    amountsConsumed = depositorEnterParams.amountsConsumed;\r\n\r\n    for (uint i = 0; i < len; ++i) {\r\n      require(amountsDesired_[i] == depositorEnterParams.amountsDesired[i], \"!depositorEnter\");\r\n      IMockToken token = IMockToken(_depositorAssets[i]);\r\n      token.burn(address(this), depositorEnterParams.amountsConsumed[i]);\r\n    }\r\n\r\n    liquidityOut = depositorEnterParams.liquidityOut;\r\n    depositorLiquidity += liquidityOut;\r\n  }\r\n\r\n  function setDepositorEnter(uint[] memory amountsDesired_, uint[] memory amountsConsumed_, uint liquidityOut_) external {\r\n    depositorEnterParams.liquidityOut = liquidityOut_;\r\n    depositorEnterParams.amountsDesired = amountsDesired_;\r\n    depositorEnterParams.amountsConsumed = amountsConsumed_;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                   _depositorExit\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  struct DepositorExitParams {\r\n    uint liquidityAmount;\r\n    uint[] amountsOut;\r\n  }\r\n\r\n  DepositorExitParams internal depositorExitParams;\r\n\r\n  function _depositorExit(uint liquidityAmount, bool emergency) override internal virtual returns (uint[] memory amountsOut) {\r\n    emergency; // hide warning\r\n    require(liquidityAmount == depositorExitParams.liquidityAmount, \"!depositorExit\");\r\n\r\n    uint len = _depositorAssets.length;\r\n    amountsOut = depositorExitParams.amountsOut;\r\n\r\n    for (uint i = 0; i < len; ++i) {\r\n      IMockToken token = IMockToken(_depositorAssets[i]);\r\n      token.mint(address(this), depositorExitParams.amountsOut[i]);\r\n    }\r\n\r\n    // we need to modify depositorLiquidity for tests with _updateInvestedAssets\r\n    if (depositorLiquidity >= liquidityAmount) {\r\n      depositorLiquidity -= liquidityAmount;\r\n    }\r\n  }\r\n\r\n  function setDepositorExit(uint liquidityAmount_, uint[] memory amountsOut_) external {\r\n    //    console.log(\"MockDepositor.setDepositorExit liquidityAmount\", liquidityAmount_);\r\n    depositorExitParams.liquidityAmount = liquidityAmount_;\r\n    depositorExitParams.amountsOut = amountsOut_;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                   _depositorQuoteExit\r\n  /////////////////////////////////////////////////////////////////////\r\n  struct DepositorQuoteExitParams {\r\n    uint liquidityAmount;\r\n    uint[] amountsOut;\r\n  }\r\n  /// @notice keccak256(liquidityAmount + 1) => results\r\n  mapping(bytes32 => DepositorQuoteExitParams) internal depositorQuoteExitParams;\r\n\r\n  /// @dev Quotes output for given lp amount from the pool.\r\n  function _depositorQuoteExit(uint liquidityAmount) override internal virtual view returns (uint[] memory amountsOut) {\r\n    // console.log(\"_depositorQuoteExit.liquidityAmount\", liquidityAmount);\r\n    bytes32 key = keccak256(abi.encodePacked(liquidityAmount + 1));\r\n    DepositorQuoteExitParams memory p = depositorQuoteExitParams[key];\r\n    if (p.liquidityAmount == liquidityAmount) {\r\n      amountsOut = p.amountsOut;\r\n    } else {\r\n      //console.log(\"_depositorQuoteExit.missed liquidityAmount\", liquidityAmount);\r\n      revert(\"MockDepositor.!liquidityAmount\");\r\n    }\r\n\r\n    return amountsOut;\r\n  }\r\n\r\n  function setDepositorQuoteExit(uint liquidityAmount_, uint[] memory amountsOut_) external {\r\n    //    console.log(\"setDepositorQuoteExit, liquidityAmount_\", liquidityAmount_);\r\n    bytes32 key = keccak256(abi.encodePacked(liquidityAmount_ + 1));\r\n\r\n    DepositorQuoteExitParams memory p = DepositorQuoteExitParams({\r\n    liquidityAmount : liquidityAmount_,\r\n    amountsOut : amountsOut_\r\n    });\r\n\r\n    depositorQuoteExitParams[key] = p;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  ///                   _depositorClaimRewards\r\n  /////////////////////////////////////////////////////////////////////\r\n  struct DepositorClaimRewardsParams {\r\n    address[] rewardTokens;\r\n    uint[] rewardAmounts;\r\n  }\r\n\r\n  DepositorClaimRewardsParams internal depositorClaimRewardsParams;\r\n\r\n  function _depositorClaimRewards() override internal virtual returns (\r\n    address[] memory rewardTokens,\r\n    uint[] memory rewardAmounts,\r\n    uint[] memory balancesBefore\r\n  ) {\r\n    uint len = depositorClaimRewardsParams.rewardTokens.length;\r\n    rewardTokens = depositorClaimRewardsParams.rewardTokens;\r\n    rewardAmounts = depositorClaimRewardsParams.rewardAmounts;\r\n\r\n    for (uint i = 0; i < len; ++i) {\r\n      IMockToken token = IMockToken(depositorClaimRewardsParams.rewardTokens[i]);\r\n      token.mint(address(this), depositorClaimRewardsParams.rewardAmounts[i]);\r\n    }\r\n    return (rewardTokens, rewardAmounts, balancesBefore);\r\n  }\r\n\r\n  function setDepositorClaimRewards(address[] memory rewardTokens_, uint[] memory rewardAmounts_) external {\r\n    depositorClaimRewardsParams.rewardTokens = rewardTokens_;\r\n    depositorClaimRewardsParams.rewardAmounts = rewardAmounts_;\r\n  }\r\n}\r\n"
    },
    "contracts/test/mocks/MockForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract MockForwarder {\r\n  address[] private lastRegisterIncomeTokens;\r\n  uint[] private lastRegisterIncomeAmounts;\r\n  address private lastRegisterVault;\r\n  bool private lastRegisterIsDistribute;\r\n\r\n  function tokenPerDestinationLength(address destination) external pure returns (uint) {\r\n    destination;\r\n    return 0;\r\n  }\r\n\r\n  function tokenPerDestinationAt(address destination, uint i) external pure returns (address) {\r\n    destination;\r\n    i;\r\n\r\n    return address(0);\r\n  }\r\n\r\n  function registerIncome(\r\n    address[] memory tokens,\r\n    uint[] memory amounts,\r\n    address vault,\r\n    bool isDistribute\r\n  ) external {\r\n    console.log(\"registerIncome\", gasleft());\r\n    lastRegisterIncomeTokens = tokens;\r\n    lastRegisterIncomeAmounts = amounts;\r\n    lastRegisterVault = vault;\r\n    lastRegisterIsDistribute = isDistribute;\r\n    // move all tokens to the balance of the IForwarder\r\n    for (uint i = 0; i < tokens.length; ++i) {\r\n      console.log(\"i\", i);\r\n      console.log(\"balance\", IERC20(tokens[i]).balanceOf(address(this)));\r\n      console.log(\"amount\", amounts[i]);\r\n      console.log(\"allowance\", IERC20Metadata(tokens[i]).allowance(msg.sender, address(this)));\r\n      IERC20(tokens[i]).transferFrom(msg.sender, address(this), amounts[i]);\r\n    }\r\n    vault;\r\n    isDistribute;\r\n    console.log(\"registerIncome.end\", gasleft());\r\n  }\r\n\r\n  function getLastRegisterIncomeResults() external view returns (\r\n    address[] memory tokens,\r\n    uint[] memory amounts,\r\n    address vault,\r\n    bool isDistribute\r\n  ) {\r\n    return (lastRegisterIncomeTokens, lastRegisterIncomeAmounts, lastRegisterVault, lastRegisterIsDistribute);\r\n  }\r\n\r\n  function distributeAll(address destination) external pure {\r\n    destination;\r\n  }\r\n\r\n  function distribute(address token) external pure {\r\n    token;\r\n  }\r\n\r\n  function setInvestFundRatio(uint value) external pure {\r\n    value;\r\n  }\r\n\r\n  function setGaugesRatio(uint value) external pure {\r\n    value;\r\n  }\r\n\r\n  function supportsInterface(bytes4) public pure returns (bool) {\r\n    return true;\r\n  }\r\n}\r\n"
    },
    "contracts/test/mocks/MockLiquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\n\r\ncontract MockLiquidator is ITetuLiquidator {\r\n\r\n  uint price = 100_000 * 1e18;\r\n  string error = \"\";\r\n  uint routeLength = 1;\r\n\r\n  function setPrice(uint value) external {\r\n    price = value;\r\n  }\r\n\r\n  function setError(string memory value) external {\r\n    error = value;\r\n  }\r\n\r\n  function setRouteLength(uint value) external {\r\n    routeLength = value;\r\n  }\r\n\r\n  function getPrice(address, address, uint) external view override returns (uint) {\r\n    return price;\r\n  }\r\n\r\n  function getPriceForRoute(PoolData[] memory, uint) external view override returns (uint) {\r\n    return price;\r\n  }\r\n\r\n  function isRouteExist(address, address) external pure override returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function buildRoute(\r\n    address tokenIn,\r\n    address tokenOut\r\n  ) external view override returns (PoolData[] memory route, string memory errorMessage) {\r\n    if (routeLength == 1) {\r\n      route = new PoolData[](1);\r\n      route[0].tokenIn = tokenIn;\r\n      route[0].tokenOut = tokenOut;\r\n    } else {\r\n      route = new PoolData[](0);\r\n    }\r\n    return (route, error);\r\n  }\r\n\r\n  function liquidate(\r\n    address,\r\n    address tokenOut,\r\n    uint amount,\r\n    uint\r\n  ) external override {\r\n    IERC20(tokenOut).transfer(msg.sender, amount);\r\n  }\r\n\r\n  function liquidateWithRoute(\r\n    PoolData[] memory route,\r\n    uint amount,\r\n    uint\r\n  ) external override {\r\n    IERC20(route[0].tokenIn).transferFrom(msg.sender, address(this), amount);\r\n    IERC20(route[route.length - 1].tokenOut).transfer(msg.sender, amount);\r\n  }\r\n\r\n  function addLargestPools(PoolData[] memory /*_pools*/, bool /*rewrite*/) external pure {\r\n    // noop\r\n  }\r\n\r\n  function addBlueChipsPools(PoolData[] memory /*_pools*/, bool /*rewrite*/) external pure {\r\n    // noop\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/test/mocks/MockSplitterVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/// @notice Mock of ISplitter (only methods required for tests)\r\ncontract MockSplitterVault {\r\n  address private _vault;\r\n  address private _asset;\r\n  address private _insurance;\r\n  bool private _coverFromInsurance;\r\n\r\n  function setVault(address vault_) external {\r\n    _vault = vault_;\r\n  }\r\n  function vault() external view returns (address) {\r\n    return _vault;\r\n  }\r\n\r\n  function setAsset(address asset_) external {\r\n    _asset = asset_;\r\n  }\r\n  function asset() external view returns (address) {\r\n    return _asset;\r\n  }\r\n\r\n  function setInsurance(address insurance_) external {\r\n    _insurance = insurance_;\r\n  }\r\n  function insurance() external view returns (address) {\r\n    return _insurance;\r\n  }\r\n\r\n  function setCoverFromInsurance(bool value) external {\r\n    _coverFromInsurance = value;\r\n  }\r\n\r\n  /// @notice Emulate insurance. Cover possible amount of loss, leave leftovers uncovered\r\n  function coverPossibleStrategyLoss(uint earned, uint lost) external {\r\n    console.log(\"MockSplitterVault.coverPossibleStrategyLoss.lost\", lost);\r\n    console.log(\"MockSplitterVault.coverPossibleStrategyLoss.earned\", earned);\r\n    earned; // hide warning\r\n    if (lost != 0) {\r\n      require(_vault != address(0), \"MockSplitterVault zero vault\");\r\n      require(_asset != address(0), \"MockSplitterVault zero asset\");\r\n      if (_coverFromInsurance) {\r\n        uint balance = IERC20(_asset).balanceOf(_insurance);\r\n        console.log(\"MockSplitterVault.coverPossibleStrategyLoss.balance.2\", balance);\r\n        IERC20(_asset).transferFrom(_insurance, _vault, Math.min(lost, balance));\r\n      } else {\r\n        uint balance = IERC20(_asset).balanceOf(address(this));\r\n        console.log(\"MockSplitterVault.coverPossibleStrategyLoss.balance.1\", balance);\r\n        IERC20(_asset).transfer(_vault, Math.min(lost, balance));\r\n      }\r\n    }\r\n  }\r\n}"
    },
    "contracts/test/mocks/MockSwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"@tetu_io/tetu-liquidator/contracts/interfaces/ISwapper.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/// @notice This is a mock swapper that swaps one token to another using prices a bit different from the prices from the given oracle\r\n/// 1) Put enough amounts of potential tokens-out to balance on this contract\r\n/// 2) For each pair (tokenIn, tokenOut) set up liquidation params\r\n/// By default, price from oracle is used.\r\n/// Pool is not used by this swapper, the swapper makes any swaps using assets from its own balances.\r\ncontract MockSwapper is ISwapper {\r\n  uint internal constant DENOMINATOR = 100_000;\r\n  IPriceOracle internal priceOracle;\r\n  address internal token0;\r\n  address internal token1;\r\n  uint internal reserves0;\r\n  uint internal reserves1;\r\n\r\n\r\n  struct SwapParams {\r\n    address tokenIn;\r\n    address tokenOut;\r\n    /// @notice true - increase output amount on {percentToIncrease}\r\n    bool increaseOutput;\r\n    /// @notice Percent of changing output amount, DENOMINATOR = 100_000, so 1000 = 1%\r\n    uint percentToIncrease;\r\n  }\r\n  mapping(bytes32 => SwapParams) internal _swapParams;\r\n\r\n  constructor(address priceOracle_, address token0_, address token1_) {\r\n    priceOracle = IPriceOracle(priceOracle_);\r\n    token0 = token0_;\r\n    token1 = token1_;\r\n  }\r\n\r\n  function setupReserves() external {\r\n    reserves0 = IERC20(token0).balanceOf(address(this));\r\n    reserves1 = IERC20(token1).balanceOf(address(this));\r\n    console.log(\"setupReserves.reserves0\", reserves0);\r\n    console.log(\"setupReserves.reserves1\", reserves1);\r\n  }\r\n\r\n  function setupSwap(address tokenIn, address tokenOut, bool increaseOutput, uint percentToIncrease) external {\r\n    bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenIn));\r\n    _swapParams[key] = SwapParams({\r\n      tokenIn: tokenIn,\r\n      tokenOut: tokenOut,\r\n      increaseOutput: increaseOutput,\r\n      percentToIncrease: percentToIncrease\r\n    });\r\n  }\r\n\r\n  function swap(address pool, address tokenIn, address tokenOut, address recipient, uint priceImpactTolerance) external override {\r\n    priceImpactTolerance; //hide warning\r\n    pool; //hide warning\r\n\r\n    uint reserves = (tokenIn == token0 ? reserves0 : reserves1);\r\n    console.log(\"MockSwapper.swap.reserves\", reserves);\r\n    console.log(\"MockSwapper.swap.reserves0\", reserves0);\r\n    console.log(\"MockSwapper.swap.reserves1\", reserves1);\r\n    console.log(\"MockSwapper.swap.balance\", IERC20(tokenIn).balanceOf(address(this)));\r\n    uint amountIn = IERC20(tokenIn).balanceOf(address(this)) - reserves;\r\n    console.log(\"MockSwapper.swap.amountIn\", amountIn);\r\n\r\n    SwapParams memory swapParams;\r\n    {\r\n      bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenIn));\r\n      swapParams = _swapParams[key];\r\n    }\r\n\r\n    if (tokenOut == address(0)) {\r\n      tokenOut = tokenIn == token0 ? token1 : token0;\r\n    }\r\n\r\n    uint amountOut;\r\n    {\r\n      uint priceIn = priceOracle.getAssetPrice(tokenIn);\r\n      uint priceOut = priceOracle.getAssetPrice(tokenOut);\r\n\r\n      uint decimalsIn = IERC20Metadata(tokenIn).decimals();\r\n      uint decimalsOut = IERC20Metadata(tokenOut).decimals();\r\n\r\n      uint amountOutByOracle = amountIn * priceIn * decimalsOut / priceOut / decimalsIn;\r\n      if (swapParams.increaseOutput) {\r\n        amountOut += amountOutByOracle * (DENOMINATOR + swapParams.percentToIncrease) / DENOMINATOR;\r\n      } else {\r\n        amountOut = amountOutByOracle * (DENOMINATOR - swapParams.percentToIncrease) / DENOMINATOR;\r\n      }\r\n    }\r\n\r\n    {\r\n      uint balanceOut = IERC20(tokenIn).balanceOf(address(this));\r\n      require(balanceOut >= amountOut, \"MockSwapper has not enough balance\");\r\n    }\r\n\r\n    if (amountOut != 0) {\r\n      IERC20(tokenOut).transfer(recipient, amountOut);\r\n      console.log(\"MockSwapper.transfer amountOut to recipient\", amountOut, recipient);\r\n    }\r\n\r\n    reserves0 = IERC20(token0).balanceOf(address(this));\r\n    reserves1 = IERC20(token1).balanceOf(address(this));\r\n    console.log(\"MockSwapper.swap.final.reserves0\", reserves0);\r\n    console.log(\"MockSwapper.swap.final.reserves1\", reserves1);\r\n  }\r\n\r\n  /// @notice getPrice always return amount calculated by oracle prices\r\n  function getPrice(address pool, address tokenIn, address tokenOut, uint amount) external override view returns (uint) {\r\n    console.log(\"getPrice.pool\", pool);\r\n    console.log(\"getPrice.tokenIn\", tokenIn);\r\n    console.log(\"getPrice.tokenOut\", tokenOut);\r\n    console.log(\"getPrice.amount\", amount);\r\n    pool; // hide warning\r\n\r\n    if (tokenOut == address(0)) {\r\n      tokenOut = tokenIn == token0 ? token1 : token0;\r\n    }\r\n\r\n    uint priceIn = priceOracle.getAssetPrice(tokenIn);\r\n    uint priceOut = priceOracle.getAssetPrice(tokenOut);\r\n    console.log(\"getPrice.priceIn\", priceIn);\r\n    console.log(\"getPrice.priceOut\", priceOut);\r\n\r\n    uint decimalsIn = IERC20Metadata(tokenIn).decimals();\r\n    uint decimalsOut = IERC20Metadata(tokenOut).decimals();\r\n\r\n    if (amount == 0) {\r\n      return priceOut;\r\n    } else {\r\n      uint amountOutByOracle = amount * priceIn * decimalsOut / priceOut / decimalsIn;\r\n      console.log(\"getPrice.amountOutByOracle\", amountOutByOracle);\r\n      return amountOutByOracle;\r\n    }\r\n  }\r\n}"
    },
    "contracts/test/mocks/MockTetuConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverterCallback.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\";\r\nimport \"../../libs/AppErrors.sol\";\r\n\r\nimport \"hardhat/console.sol\";\r\n\r\n/// @notice Mock of ITetuConverter, each function saves input params and has customizable output value\r\n///         Some functions can be not implemented\r\n/// @dev We assume, that in each test only single function is called, so we can setup behavior before the call\r\n///      and check results after the call on the side of the script\r\ncontract MockTetuConverter is ITetuConverter {\r\n  //region -------------------------------------------  Controller\r\n  address public _controller;\r\n\r\n  function controller() external view returns (address) {\r\n    return _controller;\r\n  }\r\n\r\n  function setController(address controller_) external {\r\n    _controller = controller_;\r\n  }\r\n  //endregion -------------------------------------------  Controller\r\n\r\n  //region -------------------------------------------  findBorrowStrategy\r\n  struct FindBorrowStrategyOutputParams {\r\n    bytes entryData;\r\n    address[] converters;\r\n    uint[] collateralAmountsOut;\r\n    uint[] amountsToBorrowOut;\r\n    int[] aprs18;\r\n\r\n    address sourceToken;\r\n    uint sourceAmount;\r\n    address targetToken;\r\n    uint periodInBlocks;\r\n  }\r\n  /// @notice keccak256(entryData, sourceToken, targetToken) => results\r\n  mapping(bytes32 => FindBorrowStrategyOutputParams) public findBorrowStrategyOutputParams;\r\n\r\n  function findBorrowStrategies(\r\n    bytes memory entryData_,\r\n    address sourceToken_,\r\n    uint amountIn_,\r\n    address targetToken_,\r\n    uint periodInBlocks_\r\n  ) external view returns (\r\n    address[] memory converters,\r\n    uint[] memory collateralAmountsOut,\r\n    uint[] memory amountsToBorrowOut,\r\n    int[] memory aprs18\r\n  ) {\r\n    periodInBlocks_;\r\n    console.log(\"MockTetuConverter.findBorrowStrategies source token,amountIn\", _tokenName(sourceToken_), amountIn_);\r\n    console.log(\"MockTetuConverter.findBorrowStrategies target token\", _tokenName(targetToken_));\r\n    bytes32 key = keccak256(abi.encodePacked(entryData_, sourceToken_, targetToken_));\r\n    console.log(\"MockTetuConverter.findBorrowStrategies.key\", uint(key));\r\n    FindBorrowStrategyOutputParams memory p = findBorrowStrategyOutputParams[key];\r\n    require(p.sourceToken != address(0), \"findBorrowStrategies key not found\");\r\n    console.log(\"MockTetuConverter.p.sourceToken\", _tokenName(p.sourceToken));\r\n    if (sourceToken_ == p.sourceToken) {\r\n      return (\r\n        p.converters,\r\n        p.collateralAmountsOut,\r\n        p.amountsToBorrowOut,\r\n        p.aprs18\r\n      );\r\n    } else {\r\n      console.log(\"findBorrowStrategy.missed\", _tokenName(sourceToken_), amountIn_, _tokenName(targetToken_));\r\n      return (converters, collateralAmountsOut, amountsToBorrowOut, aprs18);\r\n    }\r\n  }\r\n\r\n  function setFindBorrowStrategyOutputParams(\r\n    bytes memory entryData_,\r\n    address[] memory converters_,\r\n    uint[] memory collateralAmountsOut_,\r\n    uint[] memory amountToBorrowsOut_,\r\n    int[] memory aprs18_,\r\n    address sourceToken_,\r\n    uint sourceAmount_,\r\n    address targetToken_,\r\n    uint periodInBlocks_\r\n  ) external {\r\n    console.log(\"setFindBorrowStrategyOutputParams source token, source amount, target token\", _tokenName(sourceToken_), sourceAmount_, _tokenName(targetToken_));\r\n    bytes32 key = keccak256(abi.encodePacked(entryData_, sourceToken_, targetToken_));\r\n    console.log(\"setFindBorrowStrategyOutputParams.key\", uint(key));\r\n    findBorrowStrategyOutputParams[key] = FindBorrowStrategyOutputParams({\r\n      entryData: entryData_,\r\n      converters: converters_,\r\n      collateralAmountsOut: collateralAmountsOut_,\r\n      amountsToBorrowOut: amountToBorrowsOut_,\r\n      aprs18: aprs18_,\r\n      sourceAmount: sourceAmount_,\r\n      sourceToken: sourceToken_,\r\n      targetToken: targetToken_,\r\n      periodInBlocks: periodInBlocks_\r\n    });\r\n  }\r\n  //endregion -------------------------------------------  findBorrowStrategy\r\n\r\n  //region -------------------------------------------  findSwapStrategy\r\n  struct FindSwapStrategyOutputParams {\r\n    bytes entryData;\r\n    address converter;\r\n    uint sourceAmountOut;\r\n    uint targetAmountOut;\r\n    int apr18;\r\n\r\n    address sourceToken;\r\n    uint sourceAmount;\r\n    address targetToken;\r\n  }\r\n  /// @notice keccak256(entryData_, sourceToken, targetToken) => results\r\n  mapping(bytes32 => FindSwapStrategyOutputParams) public findSwapStrategyOutputParams;\r\n\r\n  function findSwapStrategy(\r\n    bytes memory entryData_,\r\n    address sourceToken_,\r\n    uint sourceAmount_,\r\n    address targetToken_\r\n  ) external view returns (\r\n    address converter,\r\n    uint sourceAmountOut,\r\n    uint targetAmountOut,\r\n    int apr18\r\n  ) {\r\n    console.log(\"MockTetuConverter.findSwapStrategy token,amount\", sourceToken_, sourceAmount_);\r\n    bytes32 key = keccak256(abi.encodePacked(entryData_, sourceToken_, targetToken_));\r\n    FindSwapStrategyOutputParams memory p = findSwapStrategyOutputParams[key];\r\n    if (sourceToken_ == p.sourceToken) {\r\n      return (p.converter, p.sourceAmountOut, p.targetAmountOut, p.apr18);\r\n    } else {\r\n      console.log(\"findSwapStrategy.missed\", _tokenName(sourceToken_), sourceAmount_, _tokenName(targetToken_));\r\n      return (converter, sourceAmountOut, targetAmountOut, apr18);\r\n    }\r\n  }\r\n\r\n  function setFindSwapStrategyOutputParams(\r\n    bytes memory entryData_,\r\n    address converter_,\r\n    uint sourceAmountOut_,\r\n    uint targetAmountOut_,\r\n    int apr18_,\r\n    address sourceToken_,\r\n    uint sourceAmount_,\r\n    address targetToken_\r\n  ) external {\r\n    console.log(\"setFindSwapStrategyOutputParams\", sourceToken_, sourceAmount_, targetToken_);\r\n    bytes32 key = keccak256(abi.encodePacked(sourceToken_, targetToken_));\r\n    findSwapStrategyOutputParams[key] = FindSwapStrategyOutputParams({\r\n      entryData: entryData_,\r\n      converter: converter_,\r\n      sourceAmountOut: sourceAmountOut_,\r\n      targetAmountOut: targetAmountOut_,\r\n      apr18: apr18_,\r\n      sourceToken: sourceToken_,\r\n      sourceAmount: sourceAmount_,\r\n      targetToken: targetToken_\r\n    });\r\n  }\r\n  //endregion -------------------------------------------  findSwapStrategy\r\n\r\n  //region -------------------------------------------  findConversionStrategy\r\n  struct FindConversionStrategyOutputParams {\r\n    bytes entryData;\r\n    address converter;\r\n    uint amountToBorrowOut;\r\n    uint collateralAmountOut;\r\n    int apr18;\r\n\r\n    address sourceToken;\r\n    uint sourceAmount;\r\n    address targetToken;\r\n    uint periodInBlocks;\r\n  }\r\n  /// @notice keccak256(entryData, sourceToken, targetToken) => results\r\n  mapping(bytes32 => FindConversionStrategyOutputParams) public findConversionStrategyOutputParams;\r\n\r\n  function findConversionStrategy(\r\n    bytes memory entryData_,\r\n    address sourceToken_,\r\n    uint sourceAmount_,\r\n    address targetToken_,\r\n    uint periodInBlocks_\r\n  ) external view returns (\r\n    address converter,\r\n    uint collateralAmountOut,\r\n    uint amountToBorrowOut,\r\n    int apr18\r\n  ) {\r\n    periodInBlocks_;\r\n    console.log(\"MockTetuConverter.findConversionStrategy token,amount\", sourceToken_, sourceAmount_);\r\n\r\n    bytes32 key = keccak256(abi.encodePacked(entryData_, sourceToken_, targetToken_));\r\n    FindConversionStrategyOutputParams memory p = findConversionStrategyOutputParams[key];\r\n    if (sourceToken_ == p.sourceToken) {\r\n      return (p.converter, p.collateralAmountOut, p.amountToBorrowOut, p.apr18);\r\n    } else {\r\n      console.log(\"findConversionStrategy.missed\", _tokenName(sourceToken_), sourceAmount_, _tokenName(targetToken_));\r\n      return (converter, collateralAmountOut, amountToBorrowOut, apr18);\r\n    }\r\n  }\r\n\r\n  function setFindConversionStrategyOutputParams(\r\n    bytes memory entryData_,\r\n    address converter_,\r\n    uint collateralAmountOut_,\r\n    uint amountToBorrowOut_,\r\n    int apr18_,\r\n    address sourceToken_,\r\n    uint sourceAmount_,\r\n    address targetToken_,\r\n    uint periodInBlocks_\r\n  ) external {\r\n    console.log(\"setFindConversionStrategyOutputParams\", sourceToken_, sourceAmount_, targetToken_);\r\n    bytes32 key = keccak256(abi.encodePacked(entryData_, sourceToken_, targetToken_));\r\n    findConversionStrategyOutputParams[key] = FindConversionStrategyOutputParams({\r\n      entryData: entryData_,\r\n      converter: converter_,\r\n      collateralAmountOut: collateralAmountOut_,\r\n      amountToBorrowOut: amountToBorrowOut_,\r\n      apr18: apr18_,\r\n      sourceAmount: sourceAmount_,\r\n      sourceToken: sourceToken_,\r\n      targetToken: targetToken_,\r\n      periodInBlocks: periodInBlocks_\r\n    });\r\n  }\r\n  //endregion -------------------------------------------  findConversionStrategy\r\n\r\n  //region -------------------------------------------  borrow\r\n  struct BorrowParams {\r\n    uint borrowedAmountOut;\r\n\r\n    address converter;\r\n    address collateralAsset;\r\n    uint collateralAmount;\r\n    address borrowAsset;\r\n    uint amountToBorrow;\r\n    address receiver;\r\n  }\r\n  /// @notice keccak256(converter_, collateralAsset_, collateralAmount_, borrowAsset_) => results\r\n  mapping(bytes32 => BorrowParams) public borrowParams;\r\n\r\n  function borrow(\r\n    address converter_,\r\n    address collateralAsset_,\r\n    uint collateralAmount_,\r\n    address borrowAsset_,\r\n    uint amountToBorrow_,\r\n    address receiver_\r\n  ) external returns (\r\n    uint borrowedAmountOut\r\n  ) {\r\n    console.log(\"MockTetuConverter.borrow token,amount\", _tokenName(collateralAsset_), collateralAmount_);\r\n    bytes32 key = keccak256(abi.encodePacked(converter_, collateralAsset_, collateralAmount_, borrowAsset_));\r\n    BorrowParams memory p = borrowParams[key];\r\n    if (converter_ == p.converter\r\n    && collateralAsset_ == p.collateralAsset\r\n    && collateralAmount_ == p.collateralAmount\r\n      && borrowAsset_ == p.borrowAsset\r\n    ) {\r\n      IERC20Metadata(collateralAsset_).transferFrom(msg.sender, address(this), collateralAmount_);\r\n\r\n      uint balance = IERC20Metadata(borrowAsset_).balanceOf(address(this));\r\n      console.log(\"MockTetuConverter.borrow.balance, amountToBorrow_\", balance, amountToBorrow_);\r\n      require(balance >= amountToBorrow_, \"MockTetuConverter.borrow.balance\");\r\n      IERC20Metadata(borrowAsset_).transfer(receiver_, amountToBorrow_);\r\n\r\n      return p.borrowedAmountOut;\r\n    } else {\r\n      console.log(\"MockTetuConverter.borrow.missed.collateralAsset_\", _tokenName(collateralAsset_));\r\n      console.log(\"MockTetuConverter.borrow.missed.collateralAmount_\", collateralAmount_);\r\n      console.log(\"MockTetuConverter.borrow.missed.borrowAsset_\", _tokenName(borrowAsset_));\r\n      console.log(\"MockTetuConverter.borrow.missed.amountToBorrow_\", amountToBorrow_);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function setBorrowParams(\r\n    address converter_,\r\n    address collateralAsset_,\r\n    uint collateralAmount_,\r\n    address borrowAsset_,\r\n    uint amountToBorrow_,\r\n    address receiver_,\r\n    uint borrowedAmountOut_\r\n  ) external {\r\n    console.log(\"setBorrowParams.collateralAsset_\", collateralAsset_, collateralAmount_);\r\n    console.log(\"setBorrowParams.borrowAsset_\", borrowAsset_, amountToBorrow_);\r\n    console.log(\"setBorrowParams.receiver_\", receiver_);\r\n    bytes32 key = keccak256(abi.encodePacked(converter_, collateralAsset_, collateralAmount_, borrowAsset_));\r\n    borrowParams[key] = BorrowParams({\r\n      converter: converter_,\r\n      collateralAsset: collateralAsset_,\r\n      collateralAmount: collateralAmount_,\r\n      borrowAsset: borrowAsset_,\r\n      amountToBorrow: amountToBorrow_,\r\n      receiver: receiver_,\r\n      borrowedAmountOut: borrowedAmountOut_\r\n    });\r\n  }\r\n  //endregion -------------------------------------------  borrow\r\n\r\n  //region -------------------------------------------  repay\r\n  struct RepayParams {\r\n    address collateralAsset;\r\n    address borrowAsset;\r\n    uint amountToRepay;\r\n    address receiver;\r\n    uint collateralAmountOut;\r\n    uint returnedBorrowAmountOut;\r\n    uint swappedLeftoverCollateralOut;\r\n    uint swappedLeftoverBorrowOut;\r\n    uint debtGapValue;\r\n  }\r\n  /// @notice keccak256(collateralAsset_, borrowAsset_, amountToRepay_) => results\r\n  mapping(bytes32 => RepayParams) public repayParams;\r\n\r\n  function repay(\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint amountToRepay_,\r\n    address receiver_\r\n  ) external returns (\r\n    uint collateralAmountOut,\r\n    uint returnedBorrowAmountOut,\r\n    uint swappedLeftoverCollateralOut,\r\n    uint swappedLeftoverBorrowOut\r\n  ) {\r\n    console.log(\"MockTetuConverter.repay collateral,borrow,amount\", _tokenName(collateralAsset_), _tokenName(borrowAsset_), amountToRepay_);\r\n\r\n    require(IERC20Metadata(borrowAsset_).balanceOf(address(this)) >= amountToRepay_, \"MockTetuConverter.repay.amountToRepay_\");\r\n\r\n    bytes32 key = keccak256(abi.encodePacked(collateralAsset_, borrowAsset_, amountToRepay_));\r\n    RepayParams memory p = repayParams[key];\r\n    if (collateralAsset_ == p.collateralAsset && borrowAsset_ == p.borrowAsset && amountToRepay_ == p.amountToRepay) {\r\n      // transfer collateral back to the strategy\r\n      uint balanceCollateral = IERC20Metadata(collateralAsset_).balanceOf(address(this));\r\n      console.log(\"MockTetuConverter.repay balanceCollateral, collateralAmountOut\", balanceCollateral, p.collateralAmountOut);\r\n      require(balanceCollateral >= p.collateralAmountOut, \"MockTetuConverter.repay.collateralAmountOut\");\r\n      IERC20Metadata(collateralAsset_).transfer(receiver_, p.collateralAmountOut);\r\n\r\n      // return debtGap if any\r\n      uint balanceBorrow = IERC20Metadata(borrowAsset_).balanceOf(address(this));\r\n      if (p.debtGapValue != 0) {\r\n        require(balanceBorrow >= p.debtGapValue, \"MockTetuConverter.repay.debtGapValue\");\r\n        IERC20Metadata(borrowAsset_).transfer(receiver_, p.debtGapValue);\r\n      }\r\n\r\n      // needToRepay was bigger than amountRepaid, we need to return the leftover back to the strategy\r\n      balanceBorrow = IERC20Metadata(borrowAsset_).balanceOf(address(this));\r\n      console.log(\"MockTetuConverter.repay balanceBorrow, returnedBorrowAmountOut\", balanceBorrow, p.returnedBorrowAmountOut);\r\n      if (p.returnedBorrowAmountOut != 0) {\r\n        require(balanceBorrow >= p.returnedBorrowAmountOut, \"MockTetuConverter.repay.returnedBorrowAmountOut\");\r\n        IERC20Metadata(borrowAsset_).transfer(receiver_, p.returnedBorrowAmountOut);\r\n      }\r\n\r\n      // clear debt info\r\n      key = keccak256(abi.encodePacked(receiver_, collateralAsset_, borrowAsset_, true));\r\n      getDebtAmountCurrentParams[key] = getDebtAmountCurrentParamsQueue[key];\r\n      delete getDebtAmountCurrentParamsQueue[key];\r\n      getDebtAmountStoredParams[key] = getDebtAmountStoredParamsQueue[key];\r\n      delete getDebtAmountStoredParamsQueue[key];\r\n\r\n      key = keccak256(abi.encodePacked(receiver_, collateralAsset_, borrowAsset_, false));\r\n      getDebtAmountCurrentParams[key] = getDebtAmountCurrentParamsQueue[key];\r\n      delete getDebtAmountCurrentParamsQueue[key];\r\n      getDebtAmountStoredParams[key] = getDebtAmountStoredParamsQueue[key];\r\n      delete getDebtAmountStoredParamsQueue[key];\r\n\r\n      return (\r\n        p.collateralAmountOut,\r\n        p.returnedBorrowAmountOut,\r\n        p.swappedLeftoverCollateralOut,\r\n        p.swappedLeftoverBorrowOut\r\n      );\r\n    } else {\r\n      console.log(\"MockTetuConverter.repay.missed collateral,borrow,amountToRepay\", _tokenName(collateralAsset_), _tokenName(borrowAsset_), amountToRepay_);\r\n      return (collateralAmountOut, returnedBorrowAmountOut, swappedLeftoverCollateralOut, swappedLeftoverBorrowOut);\r\n    }\r\n  }\r\n\r\n  function setRepay(\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint amountToRepay_,\r\n    address receiver_,\r\n    uint collateralAmountOut_,\r\n    uint returnedBorrowAmountOut_,\r\n    uint swappedLeftoverCollateralOut_,\r\n    uint swappedLeftoverBorrowOut_,\r\n    uint debtGapValue\r\n  ) external {\r\n    bytes32 key = keccak256(abi.encodePacked(collateralAsset_, borrowAsset_, amountToRepay_));\r\n    repayParams[key] = RepayParams({\r\n      collateralAsset: collateralAsset_,\r\n      borrowAsset: borrowAsset_,\r\n      amountToRepay: amountToRepay_,\r\n      receiver: receiver_,\r\n      collateralAmountOut: collateralAmountOut_,\r\n      returnedBorrowAmountOut: returnedBorrowAmountOut_,\r\n      swappedLeftoverCollateralOut: swappedLeftoverCollateralOut_,\r\n      swappedLeftoverBorrowOut: swappedLeftoverBorrowOut_,\r\n      debtGapValue: debtGapValue\r\n    });\r\n  }\r\n  //endregion -------------------------------------------  repay\r\n\r\n  //region -------------------------------------------  quoteRepay\r\n  struct QuoteRepayParams {\r\n    address user;\r\n    address collateralAsset;\r\n    address borrowAsset;\r\n    uint amountToRepay;\r\n    uint collateralAmountOut;\r\n    uint swappedAmountOut;\r\n  }\r\n  /// @notice keccak256(collateralAsset_, borrowAsset_, amountToRepay_) => results\r\n  mapping(bytes32 => QuoteRepayParams) public quoteRepayParams;\r\n\r\n  function quoteRepay(\r\n    address user_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint amountToRepay_\r\n  ) external view returns (\r\n    uint collateralAmountOut,\r\n    uint swappedAmountOut\r\n  ) {\r\n    user_;\r\n    // hide warning\r\n    console.log(\"MockTetuConverter.quoteRepay collateral,borrow,amountToRepay\", _tokenName(collateralAsset_), _tokenName(borrowAsset_), amountToRepay_);\r\n\r\n    bytes32 key = keccak256(abi.encodePacked(collateralAsset_, borrowAsset_, amountToRepay_));\r\n    QuoteRepayParams memory p = quoteRepayParams[key];\r\n    if (p.collateralAsset == collateralAsset_) {\r\n      return (p.collateralAmountOut, p.swappedAmountOut);\r\n    } else {\r\n      console.log(\"MockTetuConverter.quoteRepay.missed amountToRepay_,collateralAsset_,borrowAsset_\", amountToRepay_, _tokenName(collateralAsset_), _tokenName(borrowAsset_));\r\n      return (0, 0);\r\n    }\r\n  }\r\n\r\n  function setQuoteRepay(\r\n    address user_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint amountToRepay_,\r\n    uint collateralAmountOut,\r\n    uint swappedAmountOut\r\n  ) external {\r\n    bytes32 key = keccak256(abi.encodePacked(collateralAsset_, borrowAsset_, amountToRepay_));\r\n    quoteRepayParams[key] = QuoteRepayParams({\r\n      user: user_,\r\n      collateralAsset: collateralAsset_,\r\n      borrowAsset: borrowAsset_,\r\n      amountToRepay: amountToRepay_,\r\n      collateralAmountOut: collateralAmountOut,\r\n      swappedAmountOut: swappedAmountOut\r\n    });\r\n  }\r\n  //endregion -------------------------------------------  quoteRepay\r\n\r\n  //region----------------------------------------------------  getDebtAmountCurrent\r\n  struct GetDebtAmountParams {\r\n    address user;\r\n    address collateralAsset;\r\n    address borrowAsset;\r\n    uint totalDebtAmountOut;\r\n    uint totalCollateralAmountOut;\r\n    bool useDebtGap;\r\n  }\r\n\r\n  /// @notice keccak256(user_, collateralAsset_, borrowAsset_, useDebtGap_) => results\r\n  mapping(bytes32 => GetDebtAmountParams) public getDebtAmountCurrentParams;\r\n  mapping(bytes32 => GetDebtAmountParams) public getDebtAmountCurrentParamsQueue;\r\n\r\n  function getDebtAmountCurrent(\r\n    address user_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    bool useDebtGap_\r\n  ) external view returns (\r\n    uint totalDebtAmountOut,\r\n    uint totalCollateralAmountOut\r\n  ) {\r\n    console.log(\"MockTetuConverter.getDebtAmountCurrent user,collateral,borrow\", user_, _tokenName(collateralAsset_), _tokenName(borrowAsset_));\r\n\r\n    bytes32 key = keccak256(abi.encodePacked(user_, collateralAsset_, borrowAsset_, useDebtGap_));\r\n    GetDebtAmountParams memory p = getDebtAmountCurrentParams[key];\r\n    if (\r\n      p.user == user_\r\n      && p.collateralAsset == collateralAsset_\r\n      && p.borrowAsset == borrowAsset_\r\n    ) {\r\n      console.log(\"MockTetuConverter.getDebtAmountCurrent totalDebtAmountOut,totalCollateralAmountOut\",\r\n        p.totalDebtAmountOut,\r\n        p.totalCollateralAmountOut\r\n      );\r\n      return (\r\n        p.totalDebtAmountOut,\r\n        p.totalCollateralAmountOut\r\n      );\r\n    } else {\r\n      console.log(\"MockTetuConverter.getDebtAmountCurrent.missed user,collateral,borrow\", user_, _tokenName(collateralAsset_), _tokenName(borrowAsset_));\r\n      console.log(\"MockTetuConverter.getDebtAmountCurrent.missed useDebtGap\", useDebtGap_);\r\n      return (0, 0);\r\n    }\r\n  }\r\n\r\n  function setGetDebtAmountCurrent(\r\n    address user_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint totalDebtAmountOut,\r\n    uint totalCollateralAmountOut,\r\n    bool useDebtGap,\r\n    bool addToQueue\r\n  ) external {\r\n    console.log(\"setGetDebtAmountCurrent, user, collateral asset, borrow asset\", user_, _tokenName(collateralAsset_), _tokenName(borrowAsset_));\r\n    console.log(\"setGetDebtAmountCurrent, totalDebtAmountOut, totalCollateralAmountOut, useDebtGap\", totalDebtAmountOut, totalCollateralAmountOut, useDebtGap);\r\n    bytes32 key = keccak256(abi.encodePacked(user_, collateralAsset_, borrowAsset_, useDebtGap));\r\n    GetDebtAmountParams memory data = GetDebtAmountParams({\r\n      user: user_,\r\n      collateralAsset: collateralAsset_,\r\n      borrowAsset: borrowAsset_,\r\n      totalCollateralAmountOut: totalCollateralAmountOut,\r\n      totalDebtAmountOut: totalDebtAmountOut,\r\n      useDebtGap: useDebtGap\r\n    });\r\n    if (addToQueue) {\r\n      getDebtAmountCurrentParamsQueue[key] = data;\r\n    } else {\r\n      getDebtAmountCurrentParams[key] = data;\r\n    }\r\n  }\r\n  //endregion----------------------------------------------------  getDebtAmountCurrent\r\n\r\n  //region----------------------------------------------------  getDebtAmountStored\r\n  /// @notice keccak256(user_, collateralAsset_, borrowAsset_, useDebtGap_) => results\r\n  mapping(bytes32 => GetDebtAmountParams) public getDebtAmountStoredParams;\r\n  mapping(bytes32 => GetDebtAmountParams) public getDebtAmountStoredParamsQueue;\r\n\r\n  function getDebtAmountStored(\r\n    address user_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    bool useDebtGap_\r\n  ) external view returns (\r\n    uint totalDebtAmountOut,\r\n    uint totalCollateralAmountOut\r\n  ) {\r\n    console.log(\"MockTetuConverter.getDebtAmountStored user,collateral,borrow\", user_, _tokenName(collateralAsset_), _tokenName(borrowAsset_));\r\n\r\n    bytes32 key = keccak256(abi.encodePacked(user_, collateralAsset_, borrowAsset_, useDebtGap_));\r\n    GetDebtAmountParams memory p = getDebtAmountStoredParams[key];\r\n    if (p.user == user_) {\r\n      console.log(\"MockTetuConverter.getDebtAmountStored totalDebtAmountOut,totalCollateralAmountOut,useDebtGap_\",\r\n        p.totalDebtAmountOut,\r\n        p.totalCollateralAmountOut,\r\n        useDebtGap_\r\n      );\r\n      return (\r\n        p.totalDebtAmountOut,\r\n        p.totalCollateralAmountOut\r\n      );\r\n    } else {\r\n      console.log(\"MockTetuConverter.getDebtAmountStored.missed user,collateral,borrow\", user_, _tokenName(collateralAsset_), _tokenName(borrowAsset_));\r\n      console.log(\"MockTetuConverter.getDebtAmountStored.missed useDebtGap_\", useDebtGap_);\r\n      return (0, 0);\r\n    }\r\n  }\r\n\r\n  function setGetDebtAmountStored(\r\n    address user_,\r\n    address collateralAsset_,\r\n    address borrowAsset_,\r\n    uint totalDebtAmountOut,\r\n    uint totalCollateralAmountOut,\r\n    bool useDebtGap,\r\n    bool addToQueue\r\n  ) external {\r\n    console.log(\"setGetDebtAmountStored, user, collateral asset, borrow asset\", user_,  _tokenName(collateralAsset_), _tokenName(borrowAsset_));\r\n    console.log(\"setGetDebtAmountStored, totalDebtAmountOut, totalCollateralAmountOut, useDebtGap\", totalDebtAmountOut, totalCollateralAmountOut, useDebtGap);\r\n    bytes32 key = keccak256(abi.encodePacked(user_, collateralAsset_, borrowAsset_, useDebtGap));\r\n    GetDebtAmountParams memory data = GetDebtAmountParams({\r\n      user: user_,\r\n      collateralAsset: collateralAsset_,\r\n      borrowAsset: borrowAsset_,\r\n      totalCollateralAmountOut: totalCollateralAmountOut,\r\n      totalDebtAmountOut: totalDebtAmountOut,\r\n      useDebtGap: useDebtGap\r\n    });\r\n    if (addToQueue) {\r\n      getDebtAmountStoredParamsQueue[key] = data;\r\n    } else {\r\n      getDebtAmountStoredParams[key] = data;\r\n    }\r\n  }\r\n  //endregion----------------------------------------------------  getDebtAmountStored\r\n\r\n  //region----------------------------------------------------  estimateRepay\r\n  function estimateRepay(\r\n    address user_,\r\n    address collateralAsset_,\r\n    uint collateralAmountRequired_,\r\n    address borrowAsset_\r\n  ) external pure returns (\r\n    uint borrowAssetAmount,\r\n    uint unobtainableCollateralAssetAmount\r\n  ) {\r\n    user_;\r\n    collateralAsset_;\r\n    collateralAmountRequired_;\r\n    borrowAsset_;\r\n    borrowAssetAmount;\r\n    unobtainableCollateralAssetAmount;\r\n    revert (\"estimateRepay is not implemented\");\r\n  }\r\n  //endregion----------------------------------------------------  estimateRepay\r\n\r\n  //region----------------------------------------------------  claimRewards\r\n  struct ClaimRewardsParams {\r\n    address[] rewardTokensOut;\r\n    uint[] amountsOut;\r\n  }\r\n\r\n  ClaimRewardsParams private claimRewardsParams;\r\n\r\n  function claimRewards(address receiver_) external returns (\r\n    address[] memory rewardTokensOut,\r\n    uint[] memory amountsOut\r\n  ) {\r\n    for (uint i = 0; i < claimRewardsParams.rewardTokensOut.length; ++i) {\r\n      uint balance = IERC20Metadata(claimRewardsParams.rewardTokensOut[i]).balanceOf(address(this));\r\n      console.log(\"claimRewards asset, balance, amountOut\", claimRewardsParams.rewardTokensOut[i], balance, claimRewardsParams.amountsOut[i]);\r\n      IERC20Metadata(claimRewardsParams.rewardTokensOut[i]).transfer(receiver_, claimRewardsParams.amountsOut[i]);\r\n    }\r\n    return (claimRewardsParams.rewardTokensOut, claimRewardsParams.amountsOut);\r\n  }\r\n\r\n  function setClaimRewards(address[] memory rewardTokensOut, uint[] memory amountsOut) external {\r\n    claimRewardsParams = ClaimRewardsParams({\r\n      rewardTokensOut: rewardTokensOut,\r\n      amountsOut: amountsOut\r\n    });\r\n  }\r\n  //endregion----------------------------------------------------  claimRewards\r\n\r\n  //region----------------------------------------------------  safeLiquidate\r\n  function safeLiquidate(\r\n    address assetIn_,\r\n    uint amountIn_,\r\n    address assetOut_,\r\n    address receiver_,\r\n    uint priceImpactToleranceSource_,\r\n    uint priceImpactToleranceTarget_\r\n  ) external pure returns (\r\n    uint amountOut\r\n  ) {\r\n    assetIn_;\r\n    amountIn_;\r\n    assetOut_;\r\n    receiver_;\r\n    priceImpactToleranceSource_;\r\n    priceImpactToleranceTarget_;\r\n    amountOut;\r\n    revert(\"safeLiquidate is not implemented\");\r\n  }\r\n  //endregion----------------------------------------------------  safeLiquidate\r\n\r\n  //region ----------------------------------------------  isConversionValid\r\n  enum SetIsConversionValidResult {\r\n    FAILED_0,\r\n    SUCCESS_1,\r\n    PRICE_ZERO_ERROR_2\r\n  }\r\n\r\n  struct IsConversionValidParams {\r\n    address assetIn;\r\n    uint amountIn;\r\n    address assetOut;\r\n    uint amountOut;\r\n    SetIsConversionValidResult result;\r\n  }\r\n  /// @notice keccak256(assetIn_, amountIn_, assetOut_, amountOut_) => results\r\n  mapping(bytes32 => IsConversionValidParams) public isConversionValidParams;\r\n\r\n  function isConversionValid(\r\n    address assetIn_,\r\n    uint amountIn_,\r\n    address assetOut_,\r\n    uint amountOut_,\r\n    uint priceImpactTolerance_\r\n  ) external view returns (bool) {\r\n    bytes32 key = keccak256(abi.encodePacked(assetIn_, amountIn_, assetOut_, amountOut_));\r\n    priceImpactTolerance_;\r\n    IsConversionValidParams memory p = isConversionValidParams[key];\r\n    if (p.assetIn == assetIn_) {\r\n      if (p.result == SetIsConversionValidResult.FAILED_0) {\r\n        return false;\r\n      } else if (p.result == SetIsConversionValidResult.SUCCESS_1) {\r\n        return true;\r\n      } else {\r\n        revert(AppErrors.ZERO_PRICE);\r\n      }\r\n    } else {\r\n      // we also support variant with arbitrary (unknown before hand) amount-out\r\n      key = keccak256(abi.encodePacked(assetIn_, amountIn_, assetOut_));\r\n      p = isConversionValidParams[key];\r\n      if (p.assetIn == assetIn_) {\r\n        if (p.result == SetIsConversionValidResult.FAILED_0) {\r\n          return false;\r\n        } else if (p.result == SetIsConversionValidResult.SUCCESS_1) {\r\n          return true;\r\n        } else {\r\n          revert(AppErrors.ZERO_PRICE);\r\n        }\r\n      } else {\r\n        console.log(\"isConversionValid assetIn\", _tokenName(assetIn_), amountIn_);\r\n        console.log(\"isConversionValid assetOut\", _tokenName(assetOut_), amountOut_);\r\n        revert(\"isConversionValid is missed\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @param amountOut_ 0 - to set up isConversionValid for arbitrary (unknown before hand) amount-out\r\n  function setIsConversionValid(\r\n    address assetIn_,\r\n    uint amountIn_,\r\n    address assetOut_,\r\n    uint amountOut_,\r\n    SetIsConversionValidResult result_\r\n  ) external {\r\n    console.log(\"setIsConversionValid assetIn\", assetIn_, amountIn_);\r\n    console.log(\"setIsConversionValid assetOut\", assetOut_, amountOut_);\r\n    bytes32 key = amountOut_ == 0\r\n      ? keccak256(abi.encodePacked(assetIn_, amountIn_, assetOut_))\r\n      : keccak256(abi.encodePacked(assetIn_, amountIn_, assetOut_, amountOut_));\r\n    isConversionValidParams[key] = IsConversionValidParams({\r\n      assetIn: assetIn_,\r\n      amountIn: amountIn_,\r\n      assetOut: assetOut_,\r\n      amountOut: amountOut_,\r\n      result: result_\r\n    });\r\n  }\r\n  //endregion ----------------------------------------------  isConversionValid\r\n\r\n  //region Others\r\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external pure returns (\r\n    uint collateralAmountOut,\r\n    uint repaidAmountOut\r\n  ) {\r\n    poolAdapter_;\r\n    closePosition;\r\n    return (collateralAmountOut, repaidAmountOut);\r\n  }\r\n\r\n  function _tokenName(address token) internal view returns (string memory) {\r\n    return IERC20Metadata(token).symbol();\r\n  }\r\n\r\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external pure returns (\r\n    address[] memory poolAdaptersOut\r\n  ) {\r\n    user_; // hide warning\r\n    collateralToken_; // hide warning\r\n    borrowedToken_; // hide warning\r\n\r\n    return poolAdaptersOut;\r\n  }\r\n\r\n  function salvage(address receiver, address token, uint amount) external pure {\r\n    receiver;\r\n    token;\r\n    amount;\r\n    // not implemented\r\n  }\r\n  //endregion Others\r\n}\r\n"
    },
    "contracts/test/mocks/MockTetuConverterController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract MockTetuConverterController {\r\n  address public priceOracle;\r\n  address public bookkeeper;\r\n\r\n  constructor(address priceOracle_) {\r\n    priceOracle = priceOracle_;\r\n  }\r\n\r\n  function setBookkeeper(address bookkeeper_) external {\r\n    bookkeeper = bookkeeper_;\r\n  }\r\n}\r\n"
    },
    "contracts/test/mocks/MockTetuLiquidatorSingleCall.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/// @notice Mock of ITetuLiquidator, each function saves input params and has customizable output value\r\n///         Some functions can be not implemented\r\n/// @dev We assume, that in each test only single function is called, so we can setup behavior before the call\r\n///      and check results after the call on the side of the script\r\ncontract MockTetuLiquidatorSingleCall is ITetuLiquidator {\r\n\r\n\r\n  ///////////////////////////////////////////////////\r\n  ///               build route\r\n  ///////////////////////////////////////////////////\r\n  struct BuildRouteParams {\r\n    address tokenIn;\r\n    address tokenOut;\r\n    address pool;\r\n    address swapper;\r\n    string errorMessage;\r\n  }\r\n  /// @notice keccak256(tokenIn, tokenOut) => results\r\n  mapping(bytes32 => BuildRouteParams) public buildRouteParams;\r\n\r\n  function buildRoute(\r\n    address tokenIn,\r\n    address tokenOut\r\n  ) external view override returns (\r\n    PoolData[] memory route,\r\n    string memory errorMessage\r\n  ) {\r\n    console.log(\"MockTetuLiquidatorSingleCall.buildRoute\", _tokenName(tokenIn), _tokenName(tokenOut));\r\n    bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenOut));\r\n    BuildRouteParams memory p = buildRouteParams[key];\r\n\r\n    if (bytes(p.errorMessage).length != 0) {\r\n      console.log(\"MockTetuLiquidatorSingleCall.buildRoute.error\");\r\n      return (route, p.errorMessage);\r\n    } else {\r\n      if (tokenIn == p.tokenIn && tokenOut == p.tokenOut) {\r\n        if (p.pool == address(0)) {\r\n          return (new PoolData[](0), \"route not found\");\r\n        } else {\r\n          route = new PoolData[](1);\r\n          route[0].tokenIn = p.tokenIn;\r\n          route[0].tokenOut = p.tokenOut;\r\n          route[0].pool = p.pool;\r\n          route[0].swapper = p.swapper;\r\n          return (route, errorMessage);\r\n        }\r\n      } else {\r\n        console.log(\"MockTetuLiquidatorSingleCall.buildRoute.error.not.found\", _tokenName(tokenIn), _tokenName(tokenOut));\r\n        return (route, \"route not found\");\r\n      }\r\n    }\r\n  }\r\n\r\n  function setBuildRoute(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    address pool,\r\n    address swapper,\r\n    string memory errorMessage\r\n  ) external {\r\n    console.log(\"setBuildRoute\", tokenIn, tokenOut);\r\n    bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenOut));\r\n    buildRouteParams[key] = BuildRouteParams({\r\n      errorMessage: errorMessage,\r\n      tokenIn: tokenIn,\r\n      tokenOut: tokenOut,\r\n      pool: pool,\r\n      swapper: swapper\r\n    });\r\n  }\r\n\r\n  ///////////////////////////////////////////////////\r\n  ///               Get price for route\r\n  ///////////////////////////////////////////////////\r\n  struct GetPriceForRouteParams {\r\n    address tokenIn;\r\n    address tokenOut;\r\n    address pool;\r\n    address swapper;\r\n    uint amount;\r\n    uint priceOut;\r\n  }\r\n  /// @notice keccak256(tokenIn, tokenOut, pool, swapper, amount) => results\r\n  mapping(bytes32 => GetPriceForRouteParams) public getPriceForRouteParams;\r\n\r\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view override returns (uint) {\r\n    //console.log(\"MockTetuLiquidatorSingleCall.getPriceForRoute amount route.length\", amount, route.length);\r\n    //console.log(\"MockTetuLiquidatorSingleCall.getPriceForRoute tokenIn, tokenOut\", route[0].tokenIn, route[0].tokenOut);\r\n    //console.log(\"MockTetuLiquidatorSingleCall.getPriceForRoute pool, swapper\", route[0].pool, route[0].swapper);\r\n\r\n    bytes32 key = keccak256(abi.encodePacked(route[0].tokenIn, route[0].tokenOut, route[0].pool, route[0].swapper, amount));\r\n    GetPriceForRouteParams memory p = getPriceForRouteParams[key];\r\n\r\n    if (route.length == 1 && route[0].tokenOut == p.tokenOut) {\r\n      //console.log(\"MockTetuLiquidatorSingleCall.getPriceForRoute.data\");\r\n      return p.priceOut;\r\n    } else {\r\n      console.log(\"MockTetuLiquidatorSingleCall.getPriceForRoute.missed amount\", amount);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function setGetPriceForRoute(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    address pool,\r\n    address swapper,\r\n    uint amount,\r\n    uint priceOut\r\n  ) external {\r\n    bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenOut, pool, swapper, amount));\r\n    getPriceForRouteParams[key] = GetPriceForRouteParams({\r\n    tokenIn : tokenIn,\r\n    tokenOut : tokenOut,\r\n    pool : pool,\r\n    swapper : swapper,\r\n    amount : amount,\r\n    priceOut : priceOut\r\n    });\r\n  }\r\n\r\n  ///////////////////////////////////////////////////\r\n  ///               liquidateWithRoute\r\n  ///////////////////////////////////////////////////\r\n  struct LiquidateWithRouteParams {\r\n    address tokenIn;\r\n    address tokenOut;\r\n    address pool;\r\n    address swapper;\r\n    uint amount;\r\n    uint slippage;\r\n    uint amountOut;\r\n  }\r\n  /// @notice keccak256(tokenIn, tokenOut, pool, swapper, amount) => results\r\n  mapping(bytes32 => LiquidateWithRouteParams) public liquidateWithRouteParams;\r\n\r\n  function liquidateWithRoute(\r\n    PoolData[] memory route,\r\n    uint amount,\r\n    uint /*slippage*/\r\n  ) external override {\r\n    //console.log(\"MockTetuLiquidatorSingleCall.liquidateWithRoute\");\r\n\r\n    bytes32 key = keccak256(abi.encodePacked(route[0].tokenIn, route[0].tokenOut, route[0].pool, route[0].swapper, amount));\r\n    LiquidateWithRouteParams memory p = liquidateWithRouteParams[key];\r\n\r\n    if (route.length == 1 && route[0].tokenOut == p.tokenOut) {\r\n      console.log(\"MockTetuLiquidatorSingleCall.liquidateWithRoute.data.1 balanceIn amount\", IERC20(route[0].tokenIn).balanceOf(msg.sender), amount);\r\n      IERC20(route[0].tokenIn).transferFrom(msg.sender, address(this), amount);\r\n\r\n      console.log(\"MockTetuLiquidatorSingleCall.liquidateWithRoute.data.2 balanceOut amount\", IERC20(route[0].tokenOut).balanceOf(address(this)), p.amountOut);\r\n      IERC20(route[0].tokenOut).transfer(msg.sender, p.amountOut);\r\n\r\n    } else {\r\n      console.log(\"MockTetuLiquidatorSingleCall.route.length\", route.length);\r\n      console.log(\"MockTetuLiquidatorSingleCall.route[0].tokenIn\", _tokenName(route[0].tokenIn));\r\n      console.log(\"MockTetuLiquidatorSingleCall.route[0].tokenOut\", _tokenName(route[0].tokenOut));\r\n      console.log(\"MockTetuLiquidatorSingleCall.amount\", amount);\r\n      console.log(\"MockTetuLiquidatorSingleCall.liquidateWithRoute.missed.amount\", amount);\r\n    }\r\n  }\r\n\r\n  function setLiquidateWithRoute(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    address pool,\r\n    address swapper,\r\n    uint amount,\r\n    uint amountOut\r\n  ) external {\r\n    bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenOut, pool, swapper, amount));\r\n    liquidateWithRouteParams[key] = LiquidateWithRouteParams({\r\n    tokenIn : tokenIn,\r\n    tokenOut : tokenOut,\r\n    pool : pool,\r\n    swapper : swapper,\r\n    amount : amount,\r\n    slippage : 0,\r\n    amountOut : amountOut\r\n    });\r\n  }\r\n\r\n  ///////////////////////////////////////////////////\r\n  ///               Get price\r\n  ///////////////////////////////////////////////////\r\n  struct GetPriceParams {\r\n    address tokenIn;\r\n    address tokenOut;\r\n    uint amount;\r\n    uint priceOut;\r\n  }\r\n  /// @notice keccak256(tokenIn, tokenOut, pool, swapper, amount) => results\r\n  mapping(bytes32 => GetPriceParams) private _getPriceParams;\r\n\r\n  function setPrice(address tokenIn, address tokenOut, uint amount, uint priceOut) external {\r\n    console.log(\"setPrice.tokenIn\", _tokenName(tokenIn));\r\n    console.log(\"setPrice.tokenOut\", _tokenName(tokenOut));\r\n    console.log(\"setPrice.amount\", amount);\r\n    bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenOut, amount));\r\n    _getPriceParams[key] = GetPriceParams({\r\n      tokenIn: tokenIn,\r\n      tokenOut: tokenOut,\r\n      amount: amount,\r\n      priceOut: priceOut\r\n    });\r\n  }\r\n\r\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view override returns (uint) {\r\n    console.log(\"setPrice.tokenIn\", _tokenName(tokenIn));\r\n    console.log(\"setPrice.tokenOut\", _tokenName(tokenOut));\r\n    console.log(\"getPrice.amount\", amount);\r\n    bytes32 key = keccak256(abi.encodePacked(tokenIn, tokenOut, amount));\r\n    GetPriceParams memory p = _getPriceParams[key];\r\n\r\n    if (p.tokenOut == tokenOut) {\r\n      return p.priceOut;\r\n    } else {\r\n      console.log(\"MockTetuLiquidatorSingleCall.getPrice.missed amount\", amount);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////\r\n  ///               liquidate\r\n  ///////////////////////////////////////////////////\r\n  function liquidate(\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint amount,\r\n    uint slippage\r\n  ) external override {\r\n    tokenIn;\r\n    tokenOut;\r\n    slippage;\r\n    IERC20(tokenOut).transfer(msg.sender, amount);\r\n    revert(\"liquidate is not implemented\");\r\n  }\r\n\r\n  ///////////////////////////////////////////////////\r\n  ///               Is route exists\r\n  ///////////////////////////////////////////////////\r\n  function isRouteExist(address tokenIn, address tokenOut) external pure override returns (bool) {\r\n    tokenIn;\r\n    tokenOut;\r\n    revert(\"isRouteExist is not implemented\");\r\n  }\r\n\r\n  ///////////////////////////////////////////////////\r\n  ///               addLargestPools\r\n  ///////////////////////////////////////////////////\r\n  function addLargestPools(PoolData[] memory /*_pools*/, bool /*rewrite*/) external pure {\r\n    // noop\r\n    revert(\"addLargestPools is not implemented\");\r\n  }\r\n\r\n  ///////////////////////////////////////////////////\r\n  ///               addBlueChipsPools\r\n  ///////////////////////////////////////////////////\r\n  function addBlueChipsPools(PoolData[] memory /*_pools*/, bool /*rewrite*/) external pure {\r\n    // noop\r\n    revert(\"addBlueChipsPools is not implemented\");\r\n  }\r\n\r\n  function _tokenName(address token) internal view returns (string memory) {\r\n    return IERC20Metadata(token).symbol();\r\n  }\r\n}\r\n"
    },
    "contracts/test/mocks/MockUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ncontract MockUniswapV3Pool {\r\n  Slot0Data internal slot0data;\r\n  struct Slot0Data {\r\n    uint160 sqrtPriceX96;\r\n    int24 tick;\r\n    uint16 observationIndex;\r\n    uint16 observationCardinality;\r\n    uint16 observationCardinalityNext;\r\n    uint8 feeProtocol;\r\n    bool unlocked;\r\n  }\r\n  function setSlot0(\r\n    uint160 sqrtPriceX96,\r\n    int24 tick,\r\n    uint16 observationIndex,\r\n    uint16 observationCardinality,\r\n    uint16 observationCardinalityNext,\r\n    uint8 feeProtocol,\r\n    bool unlocked\r\n  ) external {\r\n    slot0data.sqrtPriceX96 = sqrtPriceX96;\r\n    slot0data.tick = tick;\r\n    slot0data.observationIndex = observationIndex;\r\n    slot0data.observationCardinality = observationCardinality;\r\n    slot0data.observationCardinalityNext = observationCardinalityNext;\r\n    slot0data.feeProtocol = feeProtocol;\r\n    slot0data.unlocked = unlocked;\r\n  }\r\n\r\n  function slot0() external view returns (\r\n    uint160 sqrtPriceX96,\r\n    int24 tick,\r\n    uint16 observationIndex,\r\n    uint16 observationCardinality,\r\n    uint16 observationCardinalityNext,\r\n    uint8 feeProtocol,\r\n    bool unlocked\r\n  ) {\r\n    return (\r\n      slot0data.sqrtPriceX96,\r\n      slot0data.tick,\r\n      slot0data.observationIndex,\r\n      slot0data.observationCardinality,\r\n      slot0data.observationCardinalityNext,\r\n      slot0data.feeProtocol,\r\n      slot0data.unlocked\r\n    );\r\n  }\r\n}"
    },
    "contracts/test/mocks/MockVaultInsurance.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Mock of ITetuVaultV2 (only methods required for tests)\r\ncontract MockVaultInsurance {\r\n  address private _insurance;\r\n\r\n  function setInsurance(address vault_) external {\r\n    _insurance = vault_;\r\n  }\r\n  function insurance() external view returns (address) {\r\n    return _insurance;\r\n  }\r\n}"
    },
    "contracts/test/mocks/PairBasedStrategyReaderAccessMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../interfaces/IPairBasedStrategyReaderAccess.sol\";\r\nimport \"hardhat/console.sol\";\r\nimport \"../../strategies/pair/PairBasedStrategyLib.sol\";\r\n\r\ncontract PairBasedStrategyReaderAccessMock is IPairBasedStrategyReaderAccess {\r\n  address internal _converter;\r\n  address internal _splitter;\r\n  address internal _tokenA;\r\n  address internal _tokenB;\r\n  address internal _asset;\r\n  uint internal _totalAssets;\r\n  uint[] internal _nums;\r\n\r\n  function setConverter(address converter_) external {\r\n    _converter = converter_;\r\n  }\r\n\r\n  function setSplitter(address splitter_) external {\r\n    _splitter = splitter_;\r\n  }\r\n\r\n  function setTotalAssets(uint totalAssets_) external {\r\n    _totalAssets = totalAssets_;\r\n  }\r\n\r\n  function setPoolTokens(address tokenA, address tokenB) external {\r\n    _tokenA = tokenA;\r\n    _tokenB = tokenB;\r\n  }\r\n\r\n  function setDefaultStateNums(uint[] memory nums_) external {\r\n    require(nums_.length == 13, \"setDefaultStateNums nums length != 13, see getDefaultState impl\");\r\n    _nums = nums_;\r\n  }\r\n\r\n  function setAsset(address asset_) external {\r\n    _asset = asset_;\r\n  }\r\n\r\n  function converter() external view returns (address) {\r\n    return _converter;\r\n  }\r\n\r\n  function splitter() external view returns (address) {\r\n    return _splitter;\r\n  }\r\n\r\n  function totalAssets() external view returns (uint) {\r\n    return _totalAssets;\r\n  }\r\n\r\n  function asset() external view returns (address) {\r\n    return _asset;\r\n  }\r\n\r\n  /// @notice Returns the current state of the contract\r\n  /// @return addr [tokenA, tokenB, pool, profitHolder]\r\n  /// @return tickData [tickSpacing, lowerTick, upperTick, rebalanceTickRange]\r\n  /// @return nums [totalLiquidity, fuse-status-tokenA, fuse-status-tokenB, withdrawDone]\r\n  function getDefaultState() external view returns (\r\n    address[] memory addr,\r\n    int24[] memory tickData,\r\n    uint[] memory nums,\r\n    bool[] memory boolValues\r\n  ) {\r\n    addr = new address[](4);\r\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_A] = _tokenA;\r\n    addr[PairBasedStrategyLib.IDX_ADDR_DEFAULT_STATE_TOKEN_B] = _tokenB;\r\n\r\n    tickData = new int24[](4);\r\n    nums = _nums;\r\n    boolValues = new bool[](2);\r\n\r\n    return (addr, tickData, nums, boolValues);\r\n  }\r\n}"
    },
    "contracts/test/mocks/PriceOracleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\n// import \"hardhat/console.sol\";\r\n\r\ncontract PriceOracleMock is IPriceOracle {\r\n  /// how much 1 token costs in USD, decimals 18\r\n  mapping(address => uint256) public prices;\r\n\r\n  constructor(address[] memory assets, uint[] memory pricesInUSD) {\r\n    _changePrices(assets, pricesInUSD);\r\n  }\r\n  ///////////////////////////////////////////////////////\r\n  ///           Set up\r\n  ///////////////////////////////////////////////////////\r\n  function changePrices(address[] memory assets, uint[] memory pricesInUSD) external {\r\n    _changePrices(assets, pricesInUSD);\r\n  }\r\n\r\n  function _changePrices(address[] memory assets, uint[] memory pricesInUSD) internal {\r\n    require(assets.length == pricesInUSD.length, \"wrong lengths\");\r\n    for (uint i = 0; i < assets.length; ++i) {\r\n      prices[assets[i]] = pricesInUSD[i];\r\n      // console.log(\"Price for %d is %d USD\", assets[i], pricesInUSD[i]);\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////\r\n  ///           IPriceOracle\r\n  ///////////////////////////////////////////////////////\r\n\r\n  /// @notice Return asset price in USD, decimals 18\r\n  function getAssetPrice(address asset) external view override returns (uint256) {\r\n    // console.log(\"PriceOracleMock.getAssetPrice\", asset, prices[asset]);\r\n    return prices[asset];\r\n  }\r\n}\r\n"
    },
    "contracts/test/oracles/aave/Aave3AggregatorInterfaceMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../../integrations/aave/AggregatorInterface.sol\";\r\n\r\n/// @notice A source of asset's price for AAVE3 price oracle\r\n///         See price oracle 0xb023e699F5a33916Ea823A16485e259257cA8Bd1\r\ncontract Aave3AggregatorInterfaceMock is AggregatorInterface {\r\n  int256 public price;\r\n  uint public round;\r\n  mapping(uint => uint) roundToTimestamp;\r\n  mapping(uint => int256) roundToPrice;\r\n\r\n  constructor (int256 price_) {\r\n    price = price_;\r\n    round = 1;\r\n    roundToTimestamp[round] = block.timestamp;\r\n    roundToPrice[round] = price_;\r\n  }\r\n\r\n  function setPrice(int256 price_) external {\r\n    price = price_;\r\n    round += 1;\r\n    roundToTimestamp[round] = block.timestamp;\r\n    roundToPrice[round] = price_;\r\n  }\r\n\r\n  // ---------------  AggregatorInterface ----------------------------------------------------------\r\n  function latestAnswer() external override view returns (int256) {\r\n    return price;\r\n  }\r\n\r\n  function latestTimestamp() external override view returns (uint256) {\r\n    return roundToTimestamp[round];\r\n  }\r\n\r\n  function latestRound() external override view returns (uint256) {\r\n    return round;\r\n  }\r\n\r\n  function getAnswer(uint256 roundId) external override view returns (int256) {\r\n    return roundToPrice[roundId];\r\n  }\r\n\r\n  function getTimestamp(uint256 roundId) external override view returns (uint256) {\r\n    return roundToTimestamp[roundId];\r\n  }\r\n}"
    },
    "contracts/test/oracles/aave/Aave3PriceSourceAlgebra.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../../integrations/aave/AggregatorInterface.sol\";\r\nimport \"../../../integrations/algebra/IAlgebraPool.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n//import \"hardhat/console.sol\";\r\n\r\n/// @notice A source of asset's price for AAVE3 price oracle\r\n///         See price oracle 0xb023e699F5a33916Ea823A16485e259257cA8Bd1\r\ncontract Aave3PriceSourceAlgebra is AggregatorInterface {\r\n  IAlgebraPool public pool;\r\n  address public token;\r\n  uint private constant TWO_96 = 2 ** 96;\r\n\r\n  constructor (address pool_, address token_) {\r\n    pool = IAlgebraPool(pool_);\r\n    token = token_;\r\n  }\r\n\r\n  // ---------------  AggregatorInterface ----------------------------------------------------------\r\n  function latestAnswer() external override view returns (int256) {\r\n    return int(_getPrice());\r\n  }\r\n\r\n  function latestTimestamp() external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n  function latestRound() external override view returns (uint256) {\r\n    return block.timestamp / 60;\r\n  }\r\n\r\n  function getAnswer(uint256 /*roundId*/) external override view returns (int256) {\r\n    return int(_getPrice());\r\n  }\r\n\r\n  function getTimestamp(uint256 /*roundId*/) external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n  // ---------------  UniswapV3 ----------------------------------------------------------\r\n\r\n  /// @notice Calculates price in pool\r\n  function _getPrice() internal view returns (uint) {\r\n    address token0 = pool.token0();\r\n    address token1 = pool.token1();\r\n\r\n    uint tokenInDecimals = token == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint tokenOutDecimals = token == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,,,,) = pool.globalState();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (token == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n\r\n    uint price = purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n\r\n    if (tokenOutDecimals > 8) {\r\n      price = price / 10 ** (tokenOutDecimals - 8);\r\n    } else if (tokenOutDecimals < 8) {\r\n      price = price * 10 ** (8 - tokenOutDecimals);\r\n    }\r\n\r\n    // console.log('Aave3PriceSourceUniswapV3 price', price);\r\n    return price;\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function _max(uint a, uint b) internal pure returns (uint) {\r\n    return a > b ? a : b;\r\n  }\r\n}\r\n"
    },
    "contracts/test/oracles/aave/Aave3PriceSourceBalancerBoosted.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../../integrations/aave/AggregatorInterface.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"../../../integrations/balancer/IComposableStablePool.sol\";\r\nimport \"../../../integrations/balancer/ILinearPool.sol\";\r\nimport \"../../../integrations/balancer/IBVault.sol\";\r\n// import \"hardhat/console.sol\";\r\n\r\ninterface ISwapper {\r\n  function getPrice(\r\n    address pool,\r\n    address tokenIn,\r\n    address tokenOut,\r\n    uint amount\r\n  ) external view returns (uint);\r\n}\r\n\r\n/// @notice A source of asset's price for AAVE3 price oracle\r\n///         See price oracle 0xb023e699F5a33916Ea823A16485e259257cA8Bd1\r\ncontract Aave3PriceSourceBalancerBoosted is AggregatorInterface {\r\n  IBVault public constant BALANCER_VAULT = IBVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\r\n  ISwapper internal constant BALANCER_COMPOSABLE_STABLE_SWAPPER = ISwapper(0xFae1b6961F4a24B8A02AD4B4C66de447c35bf09f);\r\n\r\n  IComposableStablePool public pool;\r\n  address public inputToken;\r\n  address public outputToken;\r\n\r\n  struct LinearPoolParams {\r\n    uint fee;\r\n    uint lowerTarget;\r\n    uint upperTarget;\r\n  }\r\n\r\n  constructor (address pool_, address inputToken_, address outputToken_) {\r\n    pool = IComposableStablePool(pool_);\r\n    // console.log('pool', pool_);\r\n    inputToken = inputToken_;\r\n    outputToken = outputToken_;\r\n  }\r\n\r\n  // ---------------  AggregatorInterface ----------------------------------------------------------\r\n  function latestAnswer() external override view returns (int256) {\r\n    return int(_getPrice());\r\n  }\r\n\r\n  function latestTimestamp() external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n  function latestRound() external override view returns (uint256) {\r\n    return block.timestamp / 60;\r\n  }\r\n\r\n  function getAnswer(uint256 /*roundId*/) external override view returns (int256) {\r\n    return int(_getPrice());\r\n  }\r\n\r\n  function getTimestamp(uint256 /*roundId*/) external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n  // ---------------  Balancer ----------------------------------------------------------\r\n\r\n  /// @notice Calculates price in pool\r\n  function _getPrice() internal view returns (uint) {\r\n    uint inputTokenDecimals = IERC20Metadata(inputToken).decimals();\r\n    uint outputTokenDecimals = IERC20Metadata(outputToken).decimals();\r\n    // get input linear bpt price in term of inputToken\r\n    ILinearPool linearInputPool = _getLinearPool(inputToken);\r\n    // console.log('input linear pool', address(linearInputPool));\r\n    uint linearInputBptOut = _calcLinearBptOutPerMainIn(BALANCER_VAULT, linearInputPool, 10 ** inputTokenDecimals);\r\n    // console.log('input linear price', linearInputBptOut);\r\n\r\n    // get input linear bpt price in term of output linear bpt\r\n    ILinearPool linearOutputPool = _getLinearPool(outputToken);\r\n    // console.log('output linear pool', address(linearOutputPool));\r\n    uint linearOutputBptOut = BALANCER_COMPOSABLE_STABLE_SWAPPER.getPrice(address(pool), address(linearInputPool), address(linearOutputPool), linearInputBptOut);\r\n    // console.log('bpt swap price', linearOutputBptOut);\r\n\r\n    // get output linear bpt price in term of outputToken\r\n    uint price = _calcLinearMainOutPerBptIn(BALANCER_VAULT, linearOutputPool, linearOutputBptOut);\r\n    // console.log('output linear price', price);\r\n\r\n    if (outputTokenDecimals > 8) {\r\n      price = price / 10 ** (outputTokenDecimals - 8);\r\n    } else if (outputTokenDecimals < 8) {\r\n      price = price * 10 ** (8 - outputTokenDecimals);\r\n    }\r\n\r\n    return price;\r\n  }\r\n\r\n  function _getLinearPool(address mainToken) internal view returns (ILinearPool) {\r\n    bytes32 rootPoolId = pool.getPoolId();\r\n    (IERC20[] memory rootTokens,,) = BALANCER_VAULT.getPoolTokens(rootPoolId);\r\n    uint bptIndex = pool.getBptIndex();\r\n    for (uint i; i < rootTokens.length; ++i) {\r\n      if (i != bptIndex) {\r\n        ILinearPool lpool = ILinearPool(address(rootTokens[i]));\r\n        if (lpool.getMainToken() == mainToken) {\r\n          return lpool;\r\n        }\r\n      }\r\n    }\r\n    revert('Incorrect tokenIn');\r\n  }\r\n\r\n  function _calcLinearBptOutPerMainIn(IBVault vault, ILinearPool pool_, uint amount) internal view returns (uint) {\r\n    (uint lowerTarget, uint upperTarget) = pool_.getTargets();\r\n    LinearPoolParams memory params = LinearPoolParams(pool_.getSwapFeePercentage(), lowerTarget, upperTarget);\r\n    (,uint[] memory balances,) = vault.getPoolTokens(pool_.getPoolId());\r\n    uint[] memory scalingFactors = pool_.getScalingFactors();\r\n    _upscaleArray(balances, scalingFactors);\r\n    uint mainIndex = pool_.getMainIndex();\r\n    amount *= scalingFactors[mainIndex] / 1e18;\r\n    uint mainBalance = balances[mainIndex];\r\n    uint bptSupply = pool_.totalSupply() - balances[0];\r\n    uint previousNominalMain = _toNominal(mainBalance, params);\r\n    uint afterNominalMain = _toNominal(mainBalance + amount, params);\r\n    uint deltaNominalMain = afterNominalMain - previousNominalMain;\r\n    uint invariant = previousNominalMain + balances[pool_.getWrappedIndex()];\r\n    return bptSupply * deltaNominalMain / invariant * 1e18 / scalingFactors[0];\r\n  }\r\n\r\n  function _calcLinearMainOutPerBptIn(IBVault vault, ILinearPool pool_, uint amount) internal view returns (uint) {\r\n    (uint lowerTarget, uint upperTarget) = pool_.getTargets();\r\n    LinearPoolParams memory params = LinearPoolParams(pool_.getSwapFeePercentage(), lowerTarget, upperTarget);\r\n    (,uint[] memory balances,) = vault.getPoolTokens(pool_.getPoolId());\r\n    uint[] memory scalingFactors = pool_.getScalingFactors();\r\n    _upscaleArray(balances, scalingFactors);\r\n    amount *= scalingFactors[0] / 1e18;\r\n    uint mainIndex = pool_.getMainIndex();\r\n    uint mainBalance = balances[mainIndex];\r\n    uint bptSupply = pool_.totalSupply() - balances[0];\r\n    uint previousNominalMain = _toNominal(mainBalance, params);\r\n    uint invariant = previousNominalMain + balances[pool_.getWrappedIndex()];\r\n    uint deltaNominalMain = invariant * amount / bptSupply;\r\n    uint afterNominalMain = previousNominalMain > deltaNominalMain ? previousNominalMain - deltaNominalMain : 0;\r\n    uint newMainBalance = _fromNominal(afterNominalMain, params);\r\n    return (mainBalance - newMainBalance) * 1e18 / scalingFactors[mainIndex];\r\n  }\r\n\r\n  function _toNominal(uint real, LinearPoolParams memory params) internal pure returns (uint) {\r\n    if (real < params.lowerTarget) {\r\n      uint fees = (params.lowerTarget - real) * params.fee / 1e18;\r\n      return real - fees;\r\n    } else if (real <= params.upperTarget) {\r\n      return real;\r\n    } else {\r\n      uint fees = (real - params.upperTarget) * params.fee / 1e18;\r\n      return real - fees;\r\n    }\r\n  }\r\n\r\n  function _fromNominal(uint nominal, LinearPoolParams memory params) internal pure returns (uint) {\r\n    if (nominal < params.lowerTarget) {\r\n      return (nominal + (params.fee * params.lowerTarget / 1e18)) * 1e18 / (1e18 + params.fee);\r\n    } else if (nominal <= params.upperTarget) {\r\n      return nominal;\r\n    } else {\r\n      return (nominal - (params.fee * params.upperTarget / 1e18)) * 1e18/ (1e18 - params.fee);\r\n    }\r\n  }\r\n\r\n  function _upscaleArray(uint[] memory amounts, uint[] memory scalingFactors) internal pure {\r\n    uint length = amounts.length;\r\n    for (uint i; i < length; ++i) {\r\n      amounts[i] = amounts[i] * scalingFactors[i] / 1e18;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/oracles/aave/Aave3PriceSourceFixed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../../integrations/aave/AggregatorInterface.sol\";\r\n\r\n\r\n/// @notice A source of asset's price for AAVE3 price oracle\r\n///         See price oracle 0xb023e699F5a33916Ea823A16485e259257cA8Bd1\r\ncontract Aave3PriceSourceFixed is AggregatorInterface {\r\n  int256 public price;\r\n\r\n  constructor (int256 price_) {\r\n    price = price_;\r\n  }\r\n\r\n  // ---------------  AggregatorInterface ----------------------------------------------------------\r\n  function latestAnswer() external override view returns (int256) {\r\n    return price;\r\n  }\r\n\r\n  function latestTimestamp() external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n  function latestRound() external override view returns (uint256) {\r\n    return block.timestamp / 60;\r\n  }\r\n\r\n  function getAnswer(uint256 /*roundId*/) external override view returns (int256) {\r\n    return price;\r\n  }\r\n\r\n  function getTimestamp(uint256 /*roundId*/) external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n}"
    },
    "contracts/test/oracles/aave/Aave3PriceSourceKyber.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../../integrations/aave/AggregatorInterface.sol\";\r\nimport \"../../../integrations/kyber/IPool.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n//import \"hardhat/console.sol\";\r\n\r\n/// @notice A source of asset's price for AAVE3 price oracle\r\n///         See price oracle 0xb023e699F5a33916Ea823A16485e259257cA8Bd1\r\ncontract Aave3PriceSourceKyber is AggregatorInterface {\r\n  IPool public pool;\r\n  address public token;\r\n  uint private constant TWO_96 = 2 ** 96;\r\n\r\n  constructor (address pool_, address token_) {\r\n    pool = IPool(pool_);\r\n    token = token_;\r\n  }\r\n\r\n  // ---------------  AggregatorInterface ----------------------------------------------------------\r\n  function latestAnswer() external override view returns (int256) {\r\n    return int(_getPrice());\r\n  }\r\n\r\n  function latestTimestamp() external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n  function latestRound() external override view returns (uint256) {\r\n    return block.timestamp / 60;\r\n  }\r\n\r\n  function getAnswer(uint256 /*roundId*/) external override view returns (int256) {\r\n    return int(_getPrice());\r\n  }\r\n\r\n  function getTimestamp(uint256 /*roundId*/) external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n  // ---------------  UniswapV3 ----------------------------------------------------------\r\n\r\n  /// @notice Calculates price in pool\r\n  function _getPrice() internal view returns (uint) {\r\n    address token0 = address(pool.token0());\r\n    address token1 = address(pool.token1());\r\n\r\n    uint tokenInDecimals = token == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint tokenOutDecimals = token == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,) = pool.getPoolState();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (token == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n\r\n    uint price = purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n\r\n    if (tokenOutDecimals > 8) {\r\n      price = price / 10 ** (tokenOutDecimals - 8);\r\n    } else if (tokenOutDecimals < 8) {\r\n      price = price * 10 ** (8 - tokenOutDecimals);\r\n    }\r\n\r\n    // console.log('Aave3PriceSourceUniswapV3 price', price);\r\n    return price;\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function _max(uint a, uint b) internal pure returns (uint) {\r\n    return a > b ? a : b;\r\n  }\r\n}\r\n"
    },
    "contracts/test/oracles/aave/Aave3PriceSourceUniswapV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../../integrations/aave/AggregatorInterface.sol\";\r\nimport \"../../../integrations/uniswap/IUniswapV3Pool.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n\r\n/// @notice A source of asset's price for AAVE3 price oracle\r\n///         See price oracle 0xb023e699F5a33916Ea823A16485e259257cA8Bd1\r\ncontract Aave3PriceSourceUniswapV3 is AggregatorInterface {\r\n  IUniswapV3Pool public pool;\r\n  address public token;\r\n  uint private constant TWO_96 = 2 ** 96;\r\n\r\n  constructor (address pool_, address token_) {\r\n    pool = IUniswapV3Pool(pool_);\r\n    token = token_;\r\n  }\r\n\r\n  // ---------------  AggregatorInterface ----------------------------------------------------------\r\n  function latestAnswer() external override view returns (int256) {\r\n    return int(_getPrice());\r\n  }\r\n\r\n  function latestTimestamp() external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n  function latestRound() external override view returns (uint256) {\r\n    return block.timestamp / 60;\r\n  }\r\n\r\n  function getAnswer(uint256 /*roundId*/) external override view returns (int256) {\r\n    return int(_getPrice());\r\n  }\r\n\r\n  function getTimestamp(uint256 /*roundId*/) external override view returns (uint256) {\r\n    return block.timestamp / 60 * 60;\r\n  }\r\n\r\n  // ---------------  UniswapV3 ----------------------------------------------------------\r\n\r\n  /// @notice Calculates price in pool\r\n  function _getPrice() internal view returns (uint) {\r\n    address token0 = pool.token0();\r\n    address token1 = pool.token1();\r\n\r\n    uint tokenInDecimals = token == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint tokenOutDecimals = token == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,,,,) = pool.slot0();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (token == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n\r\n    uint price = purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n\r\n    if (tokenOutDecimals > 8) {\r\n      price = price / 10 ** (tokenOutDecimals - 8);\r\n    } else if (tokenOutDecimals < 8) {\r\n      price = price * 10 ** (8 - tokenOutDecimals);\r\n    }\r\n\r\n    // console.log('Aave3PriceSourceUniswapV3 price', price);\r\n    return price;\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function _max(uint a, uint b) internal pure returns (uint) {\r\n    return a > b ? a : b;\r\n  }\r\n}\r\n"
    },
    "contracts/test/oracles/keom/KeomApi3ServerPancakePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"../../../integrations/pancake/IPancakeV3Pool.sol\";\r\nimport \"../../../integrations/keom/IKeomPriceOracle.sol\";\r\nimport \"../../../integrations/keom/IKeomApi3Server.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract KeomApi3ServerPancakePool is IKeomApi3Server {\r\n  uint private constant TWO_96 = 2 ** 96;\r\n\r\n  IKeomPriceOracle public keomPriceOracle;\r\n  address public stableKToken;\r\n  address public volatileKToken;\r\n  address public tokenIn;\r\n  address public pool;\r\n\r\n  constructor (\r\n    address keomPriceOracle_,\r\n    address stableKToken_,\r\n    address volatileKToken_,\r\n    address pool_,\r\n    address variableAsset_\r\n  ) {\r\n    pool = pool_;\r\n    keomPriceOracle = IKeomPriceOracle(keomPriceOracle_);\r\n    stableKToken = stableKToken_;\r\n    volatileKToken = volatileKToken_;\r\n    tokenIn = variableAsset_;\r\n  }\r\n\r\n  /// @return value Price with decimals 18\r\n  function readDataFeedWithId(bytes32 dataFeedId) external view returns (int224 value, uint32 timestamp) {\r\n    console.log(\"readDataFeedWithId\");\r\n    bytes32 feedStable = keomPriceOracle.feeds(stableKToken);\r\n    bytes32 feedVariable = keomPriceOracle.feeds(volatileKToken);\r\n    if (dataFeedId == feedStable) {\r\n      (value, timestamp) = IKeomApi3Server(keomPriceOracle.api3Server()).readDataFeedWithId(dataFeedId);\r\n      console.log(\"readDataFeedWithId.1.real.value\");console.logInt(value);\r\n      console.log(\"readDataFeedWithId.1.real.timestamp\", timestamp);\r\n      console.log(\"readDataFeedWithId.1.price\", 1e18);\r\n      console.log(\"readDataFeedWithId.1.timestamp\", timestamp);\r\n      timestamp = uint32(block.timestamp);\r\n      value = int224(1e18); // price of the stable token\r\n    } else if (dataFeedId == feedVariable) {\r\n      (value, timestamp) = IKeomApi3Server(keomPriceOracle.api3Server()).readDataFeedWithId(dataFeedId);\r\n      console.log(\"readDataFeedWithId.2.real.value\");console.logInt(value);\r\n      console.log(\"readDataFeedWithId.2.real.timestamp\", timestamp);\r\n      timestamp = uint32(block.timestamp);\r\n      uint price = getPrice() * 10**10;\r\n      console.log(\"readDataFeedWithId.2.price\", price);\r\n      console.log(\"readDataFeedWithId.2.timestamp\", timestamp);\r\n      value = int224(int(price));\r\n    } else {\r\n      (value, timestamp) = IKeomApi3Server(keomPriceOracle.api3Server()).readDataFeedWithId(dataFeedId);\r\n      console.log(\"readDataFeedWithId.3.value\");console.logInt(value);\r\n      console.log(\"readDataFeedWithId.3.timestamp\", timestamp);\r\n    }\r\n  }\r\n\r\n  /// @return price with decimals 8\r\n  function getPrice() public view returns (uint) {\r\n    address token0 = IPancakeV3Pool(pool).token0();\r\n    address token1 = IPancakeV3Pool(pool).token1();\r\n\r\n    uint256 tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint256 tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,,,,) = IPancakeV3Pool(pool).slot0();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? Math.max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (tokenIn == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n    uint price = purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n\r\n    if (tokenOutDecimals > 8) {\r\n      price = price / 10 ** (tokenOutDecimals - 8);\r\n    } else if (tokenOutDecimals < 8) {\r\n      price = price * 10 ** (8 - tokenOutDecimals);\r\n    }\r\n    // console.log(\"getPrice.price\", price);\r\n    return price;\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n}"
    },
    "contracts/test/oracles/keom/KeomPriceOraclePancake.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"../../../integrations/pancake/IPancakeV3Pool.sol\";\r\nimport \"../../../integrations/keom/IKeomPriceOracle.sol\";\r\nimport \"../../../integrations/keom/IKeomApi3Server.sol\";\r\n\r\ncontract KeomPriceOraclePancake {\r\n  uint private constant TWO_96 = 2 ** 96;\r\n\r\n  IKeomPriceOracle public keomPriceOracle;\r\n  address public stableAsset;\r\n  address public stableKToken;\r\n  address public tokenIn;\r\n  address public volatileKToken;\r\n  address public pool;\r\n\r\n  constructor (\r\n    address keomPriceOracle_,\r\n    address stableAsset_,\r\n    address stableKToken_,\r\n    address volatileAsset_,\r\n    address volatileKToken_,\r\n    address pool_\r\n  ) {\r\n    pool = pool_;\r\n    keomPriceOracle = IKeomPriceOracle(keomPriceOracle_);\r\n    stableKToken = stableKToken_;\r\n    volatileKToken = volatileKToken_;\r\n    tokenIn = volatileAsset_;\r\n    stableAsset = stableAsset_;\r\n  }\r\n\r\n  /// @return price with decimals: (36-token decimals)\r\n  function getUnderlyingPrice(address kToken) external view returns (uint256 price) {\r\n    if (kToken == stableKToken) {\r\n      price = 1e36 / 10**IERC20Metadata(stableAsset).decimals();\r\n    } else if (kToken == volatileKToken) {\r\n      price = getPrice() * 10**(36 - 8) / 10**IERC20Metadata(tokenIn).decimals();\r\n    } else {\r\n      price = keomPriceOracle.getUnderlyingPrice(kToken);\r\n    }\r\n  }\r\n\r\n  /// @return price with decimals 8\r\n  function getPrice() public view returns (uint) {\r\n    address token0 = IPancakeV3Pool(pool).token0();\r\n    address token1 = IPancakeV3Pool(pool).token1();\r\n\r\n    uint256 tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint256 tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,,,,) = IPancakeV3Pool(pool).slot0();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? Math.max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (tokenIn == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n    uint price = purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n\r\n    if (tokenOutDecimals > 8) {\r\n      price = price / 10 ** (tokenOutDecimals - 8);\r\n    } else if (tokenOutDecimals < 8) {\r\n      price = price * 10 ** (8 - tokenOutDecimals);\r\n    }\r\n    // console.log(\"getPrice.price\", price);\r\n    return price;\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n}"
    },
    "contracts/test/oracles/moonwell/MoonwellAggregatorV3Fixed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"../../../integrations/pancake/IPancakeV3Pool.sol\";\r\nimport \"../../../integrations/moonwell/IMoonwellPriceOracle.sol\";\r\nimport \"../../../integrations/moonwell/IMoonwellAggregatorV3Interface.sol\";\r\n\r\ncontract MoonwellAggregatorV3Fixed is IMoonwellAggregatorV3Interface {\r\n  uint public price8;\r\n  constructor (uint price_) {\r\n    price8 = price_;\r\n  }\r\n\r\n  function decimals() external pure returns (uint8) {\r\n    return 8;\r\n  }\r\n\r\n  function description() external pure returns (string memory) {\r\n    return \"test\";\r\n  }\r\n\r\n  function version() external pure returns (uint256) {\r\n    return 1;\r\n  }\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 /*_roundId*/) external view returns (\r\n    uint80 roundId,\r\n    int256 answer,\r\n    uint256 startedAt,\r\n    uint256 updatedAt,\r\n    uint80 answeredInRound\r\n  ) {\r\n    return (\r\n      uint80(block.timestamp / 60),\r\n      int256(price8),\r\n      block.timestamp / 60 * 60,\r\n      block.timestamp / 60 * 60,\r\n      uint80(block.timestamp / 60)\r\n    );\r\n  }\r\n\r\n  function latestRoundData() external view returns (\r\n    uint80 roundId,\r\n    int256 answer,\r\n    uint256 startedAt,\r\n    uint256 updatedAt,\r\n    uint80 answeredInRound\r\n  ) {\r\n    return (\r\n      uint80(block.timestamp / 60),\r\n      int256(price8),\r\n      block.timestamp / 60 * 60,\r\n      block.timestamp / 60 * 60,\r\n      uint80(block.timestamp / 60)\r\n    );\r\n  }\r\n}"
    },
    "contracts/test/oracles/moonwell/MoonwellAggregatorV3PancakePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\";\r\nimport \"../../../integrations/pancake/IPancakeV3Pool.sol\";\r\nimport \"../../../integrations/moonwell/IMoonwellPriceOracle.sol\";\r\nimport \"../../../integrations/moonwell/IMoonwellAggregatorV3Interface.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract MoonwellAggregatorV3PancakePool is IMoonwellAggregatorV3Interface{\r\n  uint private constant TWO_96 = 2 ** 96;\r\n\r\n  address public pool;\r\n  address public tokenIn;\r\n  constructor (address pool_, address tokenIn_) {\r\n    pool = pool_;\r\n    tokenIn = tokenIn_;\r\n  }\r\n\r\n  function decimals() external pure returns (uint8) {\r\n    return 8;\r\n  }\r\n\r\n  function description() external pure returns (string memory) {\r\n    return \"test\";\r\n  }\r\n\r\n  function version() external pure returns (uint256) {\r\n    return 1;\r\n  }\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 /*_roundId*/) external view returns (\r\n    uint80 roundId,\r\n    int256 answer,\r\n    uint256 startedAt,\r\n    uint256 updatedAt,\r\n    uint80 answeredInRound\r\n  ) {\r\n    return (\r\n      uint80(block.timestamp / 60),\r\n      int256(getPrice()),\r\n      block.timestamp / 60 * 60,\r\n      block.timestamp / 60 * 60,\r\n      uint80(block.timestamp / 60)\r\n    );\r\n  }\r\n\r\n  function latestRoundData() external view returns (\r\n    uint80 roundId,\r\n    int256 answer,\r\n    uint256 startedAt,\r\n    uint256 updatedAt,\r\n    uint80 answeredInRound\r\n  ) {\r\n    return (\r\n      uint80(block.timestamp / 60),\r\n      int256(getPrice()),\r\n      block.timestamp / 60 * 60,\r\n      block.timestamp / 60 * 60,\r\n      uint80(block.timestamp / 60)\r\n    );\r\n  }\r\n\r\n  function getPrice() public view returns (uint) {\r\n    address token0 = IPancakeV3Pool(pool).token0();\r\n    address token1 = IPancakeV3Pool(pool).token1();\r\n\r\n    uint256 tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    uint256 tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\r\n    (uint160 sqrtPriceX96,,,,,,) = IPancakeV3Pool(pool).slot0();\r\n\r\n    uint divider = tokenOutDecimals < 18 ? Math.max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\r\n\r\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\r\n    uint purePrice;\r\n    uint precision;\r\n    if (tokenIn == token0) {\r\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\r\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\r\n      purePrice = part * part;\r\n    } else {\r\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\r\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\r\n      purePrice = part * part;\r\n    }\r\n    uint price = purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\r\n\r\n    if (tokenOutDecimals > 8) {\r\n      price = price / 10 ** (tokenOutDecimals - 8);\r\n    } else if (tokenOutDecimals < 8) {\r\n      price = price * 10 ** (8 - tokenOutDecimals);\r\n    }\r\n    // console.log(\"getPrice.price\", price);\r\n    return price;\r\n  }\r\n\r\n  function _countDigits(uint n) internal pure returns (uint) {\r\n    if (n == 0) {\r\n      return 0;\r\n    }\r\n    uint count = 0;\r\n    while (n != 0) {\r\n      n = n / 10;\r\n      ++count;\r\n    }\r\n    return count;\r\n  }\r\n\r\n}"
    },
    "contracts/test/PriceOracleImitator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n\r\ncontract PriceOracleImitator is IPriceOracle {\r\n  address public usdc;\r\n  ITetuLiquidator liquidator;\r\n\r\n  constructor(address usdc_, address liquidator_) {\r\n    usdc = usdc_;\r\n    liquidator = ITetuLiquidator(liquidator_);\r\n  }\r\n\r\n  /// @notice Return asset price in USD, decimals 18\r\n  function getAssetPrice(address asset) external view override returns (uint256) {\r\n    if (asset == usdc) {\r\n      return 1e18/* * 10000*/;\r\n    }\r\n    uint tokenInDecimals = IERC20Metadata(asset).decimals();\r\n    uint tokenOutDecimals = IERC20Metadata(usdc).decimals();\r\n    uint price = liquidator.getPrice(asset, usdc, 10 ** tokenInDecimals);\r\n\r\n    if (tokenOutDecimals > 18) {\r\n      price = price / 10 ** (tokenOutDecimals - 18);\r\n    } else if (tokenOutDecimals < 18) {\r\n      price = price * 10 ** (18 - tokenOutDecimals);\r\n    }\r\n\r\n    return price /** 10000*/;\r\n  }\r\n\r\n  function setUsdc(address asset) external {\r\n    usdc = asset;\r\n  }\r\n}\r\n"
    },
    "contracts/test/Typechain.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\n// import contracts here from node_moules to include it in to typechain\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/test/MockToken.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/proxy/ProxyControlled.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/test/Multicall.sol\";\r\n\r\n// for hardhat chain quick tests\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/test/ControllerMinimal.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/test/MockGauge.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/test/MockStrategy.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/test/MockStrategySimple.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/test/MockSplitter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/vault/TetuVaultV2.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/vault/VaultInsurance.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/vault/StrategySplitterV2.sol\";\r\n\r\n// for TokenUtils / Tests\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IVeTetu.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IPlatformVoter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IVeDistributor.sol\";\r\n\r\n//\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/vault/VaultFactory.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/infrastructure/ForwarderV3.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/infrastructure/ControllerV2.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/infrastructure/PlatformVoter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/infrastructure/InvestFundV2.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/ve/VeTetu.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/ve/VeDistributor.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/ve/TetuVoter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/reward/MultiGauge.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/reward/MultiBribe.sol\";\r\n\r\n\r\ncontract ___typechain___ {}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/callback/IUniswapV3FlashCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IUniswapV3PoolActions#flash\r\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\r\ninterface IUniswapV3FlashCallback {\r\n  /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\r\n  /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\r\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n  /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\r\n  /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\r\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\r\n  function uniswapV3FlashCallback(\r\n    uint256 fee0,\r\n    uint256 fee1,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/callback/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IUniswapV3PoolActions#mint\r\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\r\ninterface IUniswapV3MintCallback {\r\n  /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\r\n  /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\r\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\r\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\r\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\r\n  function uniswapV3MintCallback(\r\n    uint256 amount0Owed,\r\n    uint256 amount1Owed,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n  /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n  function uniswapV3SwapCallback(\r\n    int256 amount0Delta,\r\n    int256 amount1Delta,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Minimal ERC20 interface for Uniswap\r\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\r\ninterface IERC20Minimal {\r\n  /// @notice Returns the balance of a token\r\n  /// @param account The account for which to look up the number of tokens it has, i.e. its balance\r\n  /// @return The number of tokens held by the account\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /// @notice Transfers the amount of token from the `msg.sender` to the recipient\r\n  /// @param recipient The account that will receive the amount transferred\r\n  /// @param amount The number of tokens to send from the sender to the recipient\r\n  /// @return Returns true for a successful transfer, false for an unsuccessful transfer\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /// @notice Returns the current allowance given to a spender by an owner\r\n  /// @param owner The account of the token owner\r\n  /// @param spender The account of the token spender\r\n  /// @return The current allowance granted by `owner` to `spender`\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\r\n  /// @param spender The account which will be allowed to spend a given amount of the owners tokens\r\n  /// @param amount The amount of tokens allowed to be used by `spender`\r\n  /// @return Returns true for a successful approval, false for unsuccessful\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\r\n  /// @param sender The account from which the transfer will be initiated\r\n  /// @param recipient The recipient of the transfer\r\n  /// @param amount The amount of the transfer\r\n  /// @return Returns true for a successful transfer, false for unsuccessful\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\r\n  /// @param from The account from which the tokens were sent, i.e. the balance decreased\r\n  /// @param to The account to which the tokens were sent, i.e. the balance increased\r\n  /// @param value The amount of tokens that were transferred\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\r\n  /// @param owner The account that approved spending of its tokens\r\n  /// @param spender The account for which the spending allowance was modified\r\n  /// @param value The new allowance from the owner to the spender\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the Uniswap V3 Factory\r\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\r\ninterface IUniswapV3Factory {\r\n  /// @notice Emitted when the owner of the factory is changed\r\n  /// @param oldOwner The owner before the owner was changed\r\n  /// @param newOwner The owner after the owner was changed\r\n  event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n  /// @notice Emitted when a pool is created\r\n  /// @param token0 The first token of the pool by address sort order\r\n  /// @param token1 The second token of the pool by address sort order\r\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n  /// @param tickSpacing The minimum number of ticks between initialized ticks\r\n  /// @param pool The address of the created pool\r\n  event PoolCreated(\r\n    address indexed token0,\r\n    address indexed token1,\r\n    uint24 indexed fee,\r\n    int24 tickSpacing,\r\n    address pool\r\n  );\r\n\r\n  /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\r\n  /// @param fee The enabled fee, denominated in hundredths of a bip\r\n  /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\r\n  event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\r\n\r\n  /// @notice Returns the current owner of the factory\r\n  /// @dev Can be changed by the current owner via setOwner\r\n  /// @return The address of the factory owner\r\n  function owner() external view returns (address);\r\n\r\n  /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\r\n  /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\r\n  /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\r\n  /// @return The tick spacing\r\n  function feeAmountTickSpacing(uint24 fee) external view returns (int24);\r\n\r\n  /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\r\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n  /// @param tokenA The contract address of either token0 or token1\r\n  /// @param tokenB The contract address of the other token\r\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n  /// @return pool The pool address\r\n  function getPool(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint24 fee\r\n  ) external view returns (address pool);\r\n\r\n  /// @notice Creates a pool for the given two tokens and fee\r\n  /// @param tokenA One of the two tokens in the desired pool\r\n  /// @param tokenB The other of the two tokens in the desired pool\r\n  /// @param fee The desired fee for the pool\r\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\r\n  /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\r\n  /// are invalid.\r\n  /// @return pool The address of the newly created pool\r\n  function createPool(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint24 fee\r\n  ) external returns (address pool);\r\n\r\n  /// @notice Updates the owner of the factory\r\n  /// @dev Must be called by the current owner\r\n  /// @param _owner The new owner of the factory\r\n  function setOwner(address _owner) external;\r\n\r\n  /// @notice Enables a fee amount with the given tickSpacing\r\n  /// @dev Fee amounts may never be removed once enabled\r\n  /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\r\n  /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\r\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\nimport {IUniswapV3PoolImmutables} from './pool/IUniswapV3PoolImmutables.sol';\r\nimport {IUniswapV3PoolState} from './pool/IUniswapV3PoolState.sol';\r\nimport {IUniswapV3PoolDerivedState} from './pool/IUniswapV3PoolDerivedState.sol';\r\nimport {IUniswapV3PoolActions} from './pool/IUniswapV3PoolActions.sol';\r\nimport {IUniswapV3PoolOwnerActions} from './pool/IUniswapV3PoolOwnerActions.sol';\r\nimport {IUniswapV3PoolErrors} from './pool/IUniswapV3PoolErrors.sol';\r\nimport {IUniswapV3PoolEvents} from './pool/IUniswapV3PoolEvents.sol';\r\n\r\n/// @title The interface for a Uniswap V3 Pool\r\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\r\n/// to the ERC20 specification\r\n/// @dev The pool interface is broken up into many smaller pieces\r\ninterface IUniswapV3Pool is\r\nIUniswapV3PoolImmutables,\r\nIUniswapV3PoolState,\r\nIUniswapV3PoolDerivedState,\r\nIUniswapV3PoolActions,\r\nIUniswapV3PoolOwnerActions,\r\nIUniswapV3PoolErrors,\r\nIUniswapV3PoolEvents\r\n{\r\n\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/IUniswapV3PoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\r\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\r\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\r\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\r\ninterface IUniswapV3PoolDeployer {\r\n  /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\r\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\r\n  /// Returns factory The factory address\r\n  /// Returns token0 The first token of the pool by address sort order\r\n  /// Returns token1 The second token of the pool by address sort order\r\n  /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n  /// Returns tickSpacing The minimum number of ticks between initialized ticks\r\n  function parameters()\r\n  external\r\n  view\r\n  returns (\r\n    address factory,\r\n    address token0,\r\n    address token1,\r\n    uint24 fee,\r\n    int24 tickSpacing\r\n  );\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissionless pool actions\r\n/// @notice Contains pool methods that can be called by anyone\r\ninterface IUniswapV3PoolActions {\r\n  /// @notice Sets the initial price for the pool\r\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\r\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\r\n  function initialize(uint160 sqrtPriceX96) external;\r\n\r\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\r\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\r\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\r\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\r\n  /// @param recipient The address for which the liquidity will be created\r\n  /// @param tickLower The lower tick of the position in which to add liquidity\r\n  /// @param tickUpper The upper tick of the position in which to add liquidity\r\n  /// @param amount The amount of liquidity to mint\r\n  /// @param data Any data that should be passed through to the callback\r\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n  function mint(\r\n    address recipient,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount,\r\n    bytes calldata data\r\n  ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  /// @notice Collects tokens owed to a position\r\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\r\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\r\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\r\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\r\n  /// @param recipient The address which should receive the fees collected\r\n  /// @param tickLower The lower tick of the position for which to collect fees\r\n  /// @param tickUpper The upper tick of the position for which to collect fees\r\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\r\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\r\n  /// @return amount0 The amount of fees collected in token0\r\n  /// @return amount1 The amount of fees collected in token1\r\n  function collect(\r\n    address recipient,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount0Requested,\r\n    uint128 amount1Requested\r\n  ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\r\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\r\n  /// @dev Fees must be collected separately via a call to #collect\r\n  /// @param tickLower The lower tick of the position for which to burn liquidity\r\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\r\n  /// @param amount How much liquidity to burn\r\n  /// @return amount0 The amount of token0 sent to the recipient\r\n  /// @return amount1 The amount of token1 sent to the recipient\r\n  function burn(\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount\r\n  ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  /// @notice Swap token0 for token1, or token1 for token0\r\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\r\n  /// @param recipient The address to receive the output of the swap\r\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n  /// @param data Any data to be passed through to the callback\r\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n  function swap(\r\n    address recipient,\r\n    bool zeroForOne,\r\n    int256 amountSpecified,\r\n    uint160 sqrtPriceLimitX96,\r\n    bytes calldata data\r\n  ) external returns (int256 amount0, int256 amount1);\r\n\r\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\r\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\r\n  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\r\n  /// with 0 amount{0,1} and sending the donation amount(s) from the callback\r\n  /// @param recipient The address which will receive the token0 and token1 amounts\r\n  /// @param amount0 The amount of token0 to send\r\n  /// @param amount1 The amount of token1 to send\r\n  /// @param data Any data to be passed through to the callback\r\n  function flash(\r\n    address recipient,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\r\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\r\n  /// the input observationCardinalityNext.\r\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\r\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that is not stored\r\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\r\n/// blockchain. The functions here may have variable gas costs.\r\ninterface IUniswapV3PoolDerivedState {\r\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\r\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\r\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\r\n  /// you must call it with secondsAgos = [3600, 0].\r\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\r\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\r\n  /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\r\n  /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\r\n  /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\r\n  /// timestamp\r\n  function observe(uint32[] calldata secondsAgos)\r\n  external\r\n  view\r\n  returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\r\n\r\n  /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\r\n  /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\r\n  /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\r\n  /// snapshot is taken and the second snapshot is taken.\r\n  /// @param tickLower The lower tick of the range\r\n  /// @param tickUpper The upper tick of the range\r\n  /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\r\n  /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\r\n  /// @return secondsInside The snapshot of seconds per liquidity for the range\r\n  function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\r\n  external\r\n  view\r\n  returns (\r\n    int56 tickCumulativeInside,\r\n    uint160 secondsPerLiquidityInsideX128,\r\n    uint32 secondsInside\r\n  );\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/pool/IUniswapV3PoolErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Errors emitted by a pool\r\n/// @notice Contains all events emitted by the pool\r\ninterface IUniswapV3PoolErrors {\r\n  error LOK();\r\n  error TLU();\r\n  error TLM();\r\n  error TUM();\r\n  error AI();\r\n  error M0();\r\n  error M1();\r\n  error AS();\r\n  error IIA();\r\n  error L();\r\n  error F0();\r\n  error F1();\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Events emitted by a pool\r\n/// @notice Contains all events emitted by the pool\r\ninterface IUniswapV3PoolEvents {\r\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\r\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\r\n  /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\r\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\r\n  event Initialize(uint160 sqrtPriceX96, int24 tick);\r\n\r\n  /// @notice Emitted when liquidity is minted for a given position\r\n  /// @param sender The address that minted the liquidity\r\n  /// @param owner The owner of the position and recipient of any minted liquidity\r\n  /// @param tickLower The lower tick of the position\r\n  /// @param tickUpper The upper tick of the position\r\n  /// @param amount The amount of liquidity minted to the position range\r\n  /// @param amount0 How much token0 was required for the minted liquidity\r\n  /// @param amount1 How much token1 was required for the minted liquidity\r\n  event Mint(\r\n    address sender,\r\n    address indexed owner,\r\n    int24 indexed tickLower,\r\n    int24 indexed tickUpper,\r\n    uint128 amount,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  );\r\n\r\n  /// @notice Emitted when fees are collected by the owner of a position\r\n  /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\r\n  /// @param owner The owner of the position for which fees are collected\r\n  /// @param tickLower The lower tick of the position\r\n  /// @param tickUpper The upper tick of the position\r\n  /// @param amount0 The amount of token0 fees collected\r\n  /// @param amount1 The amount of token1 fees collected\r\n  event Collect(\r\n    address indexed owner,\r\n    address recipient,\r\n    int24 indexed tickLower,\r\n    int24 indexed tickUpper,\r\n    uint128 amount0,\r\n    uint128 amount1\r\n  );\r\n\r\n  /// @notice Emitted when a position's liquidity is removed\r\n  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\r\n  /// @param owner The owner of the position for which liquidity is removed\r\n  /// @param tickLower The lower tick of the position\r\n  /// @param tickUpper The upper tick of the position\r\n  /// @param amount The amount of liquidity to remove\r\n  /// @param amount0 The amount of token0 withdrawn\r\n  /// @param amount1 The amount of token1 withdrawn\r\n  event Burn(\r\n    address indexed owner,\r\n    int24 indexed tickLower,\r\n    int24 indexed tickUpper,\r\n    uint128 amount,\r\n    uint256 amount0,\r\n    uint256 amount1\r\n  );\r\n\r\n  /// @notice Emitted by the pool for any swaps between token0 and token1\r\n  /// @param sender The address that initiated the swap call, and that received the callback\r\n  /// @param recipient The address that received the output of the swap\r\n  /// @param amount0 The delta of the token0 balance of the pool\r\n  /// @param amount1 The delta of the token1 balance of the pool\r\n  /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\r\n  /// @param liquidity The liquidity of the pool after the swap\r\n  /// @param tick The log base 1.0001 of price of the pool after the swap\r\n  event Swap(\r\n    address indexed sender,\r\n    address indexed recipient,\r\n    int256 amount0,\r\n    int256 amount1,\r\n    uint160 sqrtPriceX96,\r\n    uint128 liquidity,\r\n    int24 tick\r\n  );\r\n\r\n  /// @notice Emitted by the pool for any flashes of token0/token1\r\n  /// @param sender The address that initiated the swap call, and that received the callback\r\n  /// @param recipient The address that received the tokens from flash\r\n  /// @param amount0 The amount of token0 that was flashed\r\n  /// @param amount1 The amount of token1 that was flashed\r\n  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\r\n  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\r\n  event Flash(\r\n    address indexed sender,\r\n    address indexed recipient,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    uint256 paid0,\r\n    uint256 paid1\r\n  );\r\n\r\n  /// @notice Emitted by the pool for increases to the number of observations that can be stored\r\n  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\r\n  /// just before a mint/swap/burn.\r\n  /// @param observationCardinalityNextOld The previous value of the next observation cardinality\r\n  /// @param observationCardinalityNextNew The updated value of the next observation cardinality\r\n  event IncreaseObservationCardinalityNext(\r\n    uint16 observationCardinalityNextOld,\r\n    uint16 observationCardinalityNextNew\r\n  );\r\n\r\n  /// @notice Emitted when the protocol fee is changed by the pool\r\n  /// @param feeProtocol0Old The previous value of the token0 protocol fee\r\n  /// @param feeProtocol1Old The previous value of the token1 protocol fee\r\n  /// @param feeProtocol0New The updated value of the token0 protocol fee\r\n  /// @param feeProtocol1New The updated value of the token1 protocol fee\r\n  event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\r\n\r\n  /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\r\n  /// @param sender The address that collects the protocol fees\r\n  /// @param recipient The address that receives the collected protocol fees\r\n  /// @param amount0 The amount of token0 protocol fees that is withdrawn\r\n  /// @param amount0 The amount of token1 protocol fees that is withdrawn\r\n  event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that never changes\r\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\r\ninterface IUniswapV3PoolImmutables {\r\n  /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\r\n  /// @return The contract address\r\n  function factory() external view returns (address);\r\n\r\n  /// @notice The first of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token0() external view returns (address);\r\n\r\n  /// @notice The second of the two tokens of the pool, sorted by address\r\n  /// @return The token contract address\r\n  function token1() external view returns (address);\r\n\r\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\r\n  /// @return The fee\r\n  function fee() external view returns (uint24);\r\n\r\n  /// @notice The pool tick spacing\r\n  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\r\n  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\r\n  /// This value is an int24 to avoid casting even though it is always positive.\r\n  /// @return The tick spacing\r\n  function tickSpacing() external view returns (int24);\r\n\r\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n  /// @return The max amount of liquidity per tick\r\n  function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Permissioned pool actions\r\n/// @notice Contains pool methods that may only be called by the factory owner\r\ninterface IUniswapV3PoolOwnerActions {\r\n  /// @notice Set the denominator of the protocol's % share of the fees\r\n  /// @param feeProtocol0 new protocol fee for token0 of the pool\r\n  /// @param feeProtocol1 new protocol fee for token1 of the pool\r\n  function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\r\n\r\n  /// @notice Collect the protocol fee accrued to the pool\r\n  /// @param recipient The address to which collected protocol fees should be sent\r\n  /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\r\n  /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\r\n  /// @return amount0 The protocol fee collected in token0\r\n  /// @return amount1 The protocol fee collected in token1\r\n  function collectProtocol(\r\n    address recipient,\r\n    uint128 amount0Requested,\r\n    uint128 amount1Requested\r\n  ) external returns (uint128 amount0, uint128 amount1);\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Pool state that can change\r\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\r\n/// per transaction\r\ninterface IUniswapV3PoolState {\r\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\r\n  /// when accessed externally.\r\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\r\n  /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\r\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\r\n  /// boundary.\r\n  /// @return observationIndex The index of the last oracle observation that was written,\r\n  /// @return observationCardinality The current maximum number of observations stored in the pool,\r\n  /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\r\n  /// @return feeProtocol The protocol fee for both tokens of the pool.\r\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\r\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\r\n  /// unlocked Whether the pool is currently locked to reentrancy\r\n  function slot0()\r\n  external\r\n  view\r\n  returns (\r\n    uint160 sqrtPriceX96,\r\n    int24 tick,\r\n    uint16 observationIndex,\r\n    uint16 observationCardinality,\r\n    uint16 observationCardinalityNext,\r\n    uint8 feeProtocol,\r\n    bool unlocked\r\n  );\r\n\r\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\r\n  /// @dev This value can overflow the uint256\r\n  function feeGrowthGlobal0X128() external view returns (uint256);\r\n\r\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\r\n  /// @dev This value can overflow the uint256\r\n  function feeGrowthGlobal1X128() external view returns (uint256);\r\n\r\n  /// @notice The amounts of token0 and token1 that are owed to the protocol\r\n  /// @dev Protocol fees will never exceed uint128 max in either token\r\n  function protocolFees() external view returns (uint128 token0, uint128 token1);\r\n\r\n  /// @notice The currently in range liquidity available to the pool\r\n  /// @dev This value has no relationship to the total liquidity across all ticks\r\n  /// @return The liquidity at the current price of the pool\r\n  function liquidity() external view returns (uint128);\r\n\r\n  /// @notice Look up information about a specific tick in the pool\r\n  /// @param tick The tick to look up\r\n  /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\r\n  /// tick upper\r\n  /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\r\n  /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\r\n  /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\r\n  /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\r\n  /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\r\n  /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\r\n  /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\r\n  /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\r\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\r\n  /// a specific position.\r\n  function ticks(int24 tick)\r\n  external\r\n  view\r\n  returns (\r\n    uint128 liquidityGross,\r\n    int128 liquidityNet,\r\n    uint256 feeGrowthOutside0X128,\r\n    uint256 feeGrowthOutside1X128,\r\n    int56 tickCumulativeOutside,\r\n    uint160 secondsPerLiquidityOutsideX128,\r\n    uint32 secondsOutside,\r\n    bool initialized\r\n  );\r\n\r\n  /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\r\n  function tickBitmap(int16 wordPosition) external view returns (uint256);\r\n\r\n  /// @notice Returns the information about a position by the position's key\r\n  /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\r\n  /// @return liquidity The amount of liquidity in the position,\r\n  /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\r\n  /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\r\n  /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\r\n  /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\r\n  function positions(bytes32 key)\r\n  external\r\n  view\r\n  returns (\r\n    uint128 liquidity,\r\n    uint256 feeGrowthInside0LastX128,\r\n    uint256 feeGrowthInside1LastX128,\r\n    uint128 tokensOwed0,\r\n    uint128 tokensOwed1\r\n  );\r\n\r\n  /// @notice Returns data about a specific observation index\r\n  /// @param index The element of the observations array to fetch\r\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\r\n  /// ago, rather than at a specific index in the array.\r\n  /// @return blockTimestamp The timestamp of the observation,\r\n  /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\r\n  /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\r\n  /// @return initialized whether the observation has been initialized and the values are safe to use\r\n  function observations(uint256 index)\r\n  external\r\n  view\r\n  returns (\r\n    uint32 blockTimestamp,\r\n    int56 tickCumulative,\r\n    uint160 secondsPerLiquidityCumulativeX128,\r\n    bool initialized\r\n  );\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/BitMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\n/// @title BitMath\r\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\r\nlibrary BitMath {\r\n  /// @notice Returns the index of the most significant bit of the number,\r\n  ///     where the least significant bit is at index 0 and the most significant bit is at index 255\r\n  /// @dev The function satisfies the property:\r\n  ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\r\n  /// @param x the value for which to compute the most significant bit, must be greater than 0\r\n  /// @return r the index of the most significant bit\r\n  function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\r\n    require(x > 0);\r\n\r\n  unchecked {\r\n    if (x >= 0x100000000000000000000000000000000) {\r\n      x >>= 128;\r\n      r += 128;\r\n    }\r\n    if (x >= 0x10000000000000000) {\r\n      x >>= 64;\r\n      r += 64;\r\n    }\r\n    if (x >= 0x100000000) {\r\n      x >>= 32;\r\n      r += 32;\r\n    }\r\n    if (x >= 0x10000) {\r\n      x >>= 16;\r\n      r += 16;\r\n    }\r\n    if (x >= 0x100) {\r\n      x >>= 8;\r\n      r += 8;\r\n    }\r\n    if (x >= 0x10) {\r\n      x >>= 4;\r\n      r += 4;\r\n    }\r\n    if (x >= 0x4) {\r\n      x >>= 2;\r\n      r += 2;\r\n    }\r\n    if (x >= 0x2) r += 1;\r\n  }\r\n  }\r\n\r\n  /// @notice Returns the index of the least significant bit of the number,\r\n  ///     where the least significant bit is at index 0 and the most significant bit is at index 255\r\n  /// @dev The function satisfies the property:\r\n  ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\r\n  /// @param x the value for which to compute the least significant bit, must be greater than 0\r\n  /// @return r the index of the least significant bit\r\n  function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\r\n    require(x > 0);\r\n\r\n  unchecked {\r\n    r = 255;\r\n    if (x & type(uint128).max > 0) {\r\n      r -= 128;\r\n    } else {\r\n      x >>= 128;\r\n    }\r\n    if (x & type(uint64).max > 0) {\r\n      r -= 64;\r\n    } else {\r\n      x >>= 64;\r\n    }\r\n    if (x & type(uint32).max > 0) {\r\n      r -= 32;\r\n    } else {\r\n      x >>= 32;\r\n    }\r\n    if (x & type(uint16).max > 0) {\r\n      r -= 16;\r\n    } else {\r\n      x >>= 16;\r\n    }\r\n    if (x & type(uint8).max > 0) {\r\n      r -= 8;\r\n    } else {\r\n      x >>= 8;\r\n    }\r\n    if (x & 0xf > 0) {\r\n      r -= 4;\r\n    } else {\r\n      x >>= 4;\r\n    }\r\n    if (x & 0x3 > 0) {\r\n      r -= 2;\r\n    } else {\r\n      x >>= 2;\r\n    }\r\n    if (x & 0x1 > 0) r -= 1;\r\n  }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/FixedPoint128.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.4.0;\r\n\r\n/// @title FixedPoint128\r\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\r\nlibrary FixedPoint128 {\r\n  uint256 internal constant Q128 = 0x100000000000000000000000000000000;\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.4.0;\r\n\r\n/// @title FixedPoint96\r\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\r\n/// @dev Used in SqrtPriceMath.sol\r\nlibrary FixedPoint96 {\r\n  uint8 internal constant RESOLUTION = 96;\r\n  uint256 internal constant Q96 = 0x1000000000000000000000000;\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n  function mulDiv(\r\n    uint256 a,\r\n    uint256 b,\r\n    uint256 denominator\r\n  ) internal pure returns (uint256 result) {\r\n  unchecked {\r\n    // 512-bit multiply [prod1 prod0] = a * b\r\n    // Compute the product mod 2**256 and mod 2**256 - 1\r\n    // then use the Chinese Remainder Theorem to reconstruct\r\n    // the 512 bit result. The result is stored in two 256\r\n    // variables such that product = prod1 * 2**256 + prod0\r\n    uint256 prod0;\r\n    // Least significant 256 bits of the product\r\n    uint256 prod1;\r\n    // Most significant 256 bits of the product\r\n    assembly {\r\n      let mm := mulmod(a, b, not(0))\r\n      prod0 := mul(a, b)\r\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n    }\r\n\r\n    // Handle non-overflow cases, 256 by 256 division\r\n    if (prod1 == 0) {\r\n      require(denominator > 0);\r\n      assembly {\r\n        result := div(prod0, denominator)\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // Make sure the result is less than 2**256.\r\n    // Also prevents denominator == 0\r\n    require(denominator > prod1);\r\n\r\n    ///////////////////////////////////////////////\r\n    // 512 by 256 division.\r\n    ///////////////////////////////////////////////\r\n\r\n    // Make division exact by subtracting the remainder from [prod1 prod0]\r\n    // Compute remainder using mulmod\r\n    uint256 remainder;\r\n    assembly {\r\n      remainder := mulmod(a, b, denominator)\r\n    }\r\n    // Subtract 256 bit number from 512 bit number\r\n    assembly {\r\n      prod1 := sub(prod1, gt(remainder, prod0))\r\n      prod0 := sub(prod0, remainder)\r\n    }\r\n\r\n    // Factor powers of two out of denominator\r\n    // Compute largest power of two divisor of denominator.\r\n    // Always >= 1.\r\n    uint256 twos = (0 - denominator) & denominator;\r\n    // Divide denominator by power of two\r\n    assembly {\r\n      denominator := div(denominator, twos)\r\n    }\r\n\r\n    // Divide [prod1 prod0] by the factors of two\r\n    assembly {\r\n      prod0 := div(prod0, twos)\r\n    }\r\n    // Shift in bits from prod1 into prod0. For this we need\r\n    // to flip `twos` such that it is 2**256 / twos.\r\n    // If twos is zero, then it becomes one\r\n    assembly {\r\n      twos := add(div(sub(0, twos), twos), 1)\r\n    }\r\n    prod0 |= prod1 * twos;\r\n\r\n    // Invert denominator mod 2**256\r\n    // Now that denominator is an odd number, it has an inverse\r\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n    // Compute the inverse by starting with a seed that is correct\r\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n    uint256 inv = (3 * denominator) ^ 2;\r\n    // Now use Newton-Raphson iteration to improve the precision.\r\n    // Thanks to Hensel's lifting lemma, this also works in modular\r\n    // arithmetic, doubling the correct bits in each step.\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**8\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**16\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**32\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**64\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**128\r\n    inv *= 2 - denominator * inv;\r\n    // inverse mod 2**256\r\n\r\n    // Because the division is now exact we can divide by multiplying\r\n    // with the modular inverse of denominator. This will give us the\r\n    // correct result modulo 2**256. Since the precoditions guarantee\r\n    // that the outcome is less than 2**256, this is the final result.\r\n    // We don't need to compute the high bits of the result and prod1\r\n    // is no longer required.\r\n    result = prod0 * inv;\r\n    return result;\r\n  }\r\n  }\r\n\r\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n  /// @param a The multiplicand\r\n  /// @param b The multiplier\r\n  /// @param denominator The divisor\r\n  /// @return result The 256-bit result\r\n  function mulDivRoundingUp(\r\n    uint256 a,\r\n    uint256 b,\r\n    uint256 denominator\r\n  ) internal pure returns (uint256 result) {\r\n  unchecked {\r\n    result = mulDiv(a, b, denominator);\r\n    if (mulmod(a, b, denominator) > 0) {\r\n      require(result < type(uint256).max);\r\n      result++;\r\n    }\r\n  }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/Oracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Oracle\r\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\r\n/// @dev Instances of stored oracle data, \"observations\", are collected in the oracle array\r\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\r\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\r\n/// Observations are overwritten when the full length of the oracle array is populated.\r\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\r\nlibrary Oracle {\r\n  error I();\r\n  error OLD();\r\n\r\n  struct Observation {\r\n    // the block timestamp of the observation\r\n    uint32 blockTimestamp;\r\n    // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\r\n    int56 tickCumulative;\r\n    // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\r\n    uint160 secondsPerLiquidityCumulativeX128;\r\n    // whether or not the observation is initialized\r\n    bool initialized;\r\n  }\r\n\r\n  /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\r\n  /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\r\n  /// @param last The specified observation to be transformed\r\n  /// @param blockTimestamp The timestamp of the new observation\r\n  /// @param tick The active tick at the time of the new observation\r\n  /// @param liquidity The total in-range liquidity at the time of the new observation\r\n  /// @return Observation The newly populated observation\r\n  function transform(\r\n    Observation memory last,\r\n    uint32 blockTimestamp,\r\n    int24 tick,\r\n    uint128 liquidity\r\n  ) private pure returns (Observation memory) {\r\n  unchecked {\r\n    uint32 delta = blockTimestamp - last.blockTimestamp;\r\n    return\r\n    Observation({\r\n    blockTimestamp : blockTimestamp,\r\n    tickCumulative : last.tickCumulative + int56(tick) * int56(uint56(delta)),\r\n    secondsPerLiquidityCumulativeX128 : last.secondsPerLiquidityCumulativeX128 +\r\n      ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\r\n    initialized : true\r\n    });\r\n  }\r\n  }\r\n\r\n  /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\r\n  /// @param self The stored oracle array\r\n  /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\r\n  /// @return cardinality The number of populated elements in the oracle array\r\n  /// @return cardinalityNext The new length of the oracle array, independent of population\r\n  function initialize(Observation[65535] storage self, uint32 time)\r\n  internal\r\n  returns (uint16 cardinality, uint16 cardinalityNext)\r\n  {\r\n    self[0] = Observation({\r\n    blockTimestamp : time,\r\n    tickCumulative : 0,\r\n    secondsPerLiquidityCumulativeX128 : 0,\r\n    initialized : true\r\n    });\r\n    return (1, 1);\r\n  }\r\n\r\n  /// @notice Writes an oracle observation to the array\r\n  /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\r\n  /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\r\n  /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\r\n  /// @param self The stored oracle array\r\n  /// @param index The index of the observation that was most recently written to the observations array\r\n  /// @param blockTimestamp The timestamp of the new observation\r\n  /// @param tick The active tick at the time of the new observation\r\n  /// @param liquidity The total in-range liquidity at the time of the new observation\r\n  /// @param cardinality The number of populated elements in the oracle array\r\n  /// @param cardinalityNext The new length of the oracle array, independent of population\r\n  /// @return indexUpdated The new index of the most recently written element in the oracle array\r\n  /// @return cardinalityUpdated The new cardinality of the oracle array\r\n  function write(\r\n    Observation[65535] storage self,\r\n    uint16 index,\r\n    uint32 blockTimestamp,\r\n    int24 tick,\r\n    uint128 liquidity,\r\n    uint16 cardinality,\r\n    uint16 cardinalityNext\r\n  ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\r\n  unchecked {\r\n    Observation memory last = self[index];\r\n\r\n    // early return if we've already written an observation this block\r\n    if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\r\n\r\n    // if the conditions are right, we can bump the cardinality\r\n    if (cardinalityNext > cardinality && index == (cardinality - 1)) {\r\n      cardinalityUpdated = cardinalityNext;\r\n    } else {\r\n      cardinalityUpdated = cardinality;\r\n    }\r\n\r\n    indexUpdated = (index + 1) % cardinalityUpdated;\r\n    self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\r\n  }\r\n  }\r\n\r\n  /// @notice Prepares the oracle array to store up to `next` observations\r\n  /// @param self The stored oracle array\r\n  /// @param current The current next cardinality of the oracle array\r\n  /// @param next The proposed next cardinality which will be populated in the oracle array\r\n  /// @return next The next cardinality which will be populated in the oracle array\r\n  function grow(\r\n    Observation[65535] storage self,\r\n    uint16 current,\r\n    uint16 next\r\n  ) internal returns (uint16) {\r\n  unchecked {\r\n    if (current <= 0) revert I();\r\n    // no-op if the passed next value isn't greater than the current next value\r\n    if (next <= current) return current;\r\n    // store in each slot to prevent fresh SSTOREs in swaps\r\n    // this data will not be used because the initialized boolean is still false\r\n    for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\r\n    return next;\r\n  }\r\n  }\r\n\r\n  /// @notice comparator for 32-bit timestamps\r\n  /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\r\n  /// @param time A timestamp truncated to 32 bits\r\n  /// @param a A comparison timestamp from which to determine the relative position of `time`\r\n  /// @param b From which to determine the relative position of `time`\r\n  /// @return Whether `a` is chronologically <= `b`\r\n  function lte(\r\n    uint32 time,\r\n    uint32 a,\r\n    uint32 b\r\n  ) private pure returns (bool) {\r\n  unchecked {\r\n    // if there hasn't been overflow, no need to adjust\r\n    if (a <= time && b <= time) return a <= b;\r\n\r\n    uint256 aAdjusted = a > time ? a : a + 2 ** 32;\r\n    uint256 bAdjusted = b > time ? b : b + 2 ** 32;\r\n\r\n    return aAdjusted <= bAdjusted;\r\n  }\r\n  }\r\n\r\n  /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\r\n  /// The result may be the same observation, or adjacent observations.\r\n  /// @dev The answer must be contained in the array, used when the target is located within the stored observation\r\n  /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\r\n  /// @param self The stored oracle array\r\n  /// @param time The current block.timestamp\r\n  /// @param target The timestamp at which the reserved observation should be for\r\n  /// @param index The index of the observation that was most recently written to the observations array\r\n  /// @param cardinality The number of populated elements in the oracle array\r\n  /// @return beforeOrAt The observation recorded before, or at, the target\r\n  /// @return atOrAfter The observation recorded at, or after, the target\r\n  function binarySearch(\r\n    Observation[65535] storage self,\r\n    uint32 time,\r\n    uint32 target,\r\n    uint16 index,\r\n    uint16 cardinality\r\n  ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\r\n  unchecked {\r\n    uint256 l = (index + 1) % cardinality;\r\n    // oldest observation\r\n    uint256 r = l + cardinality - 1;\r\n    // newest observation\r\n    uint256 i;\r\n    while (true) {\r\n      i = (l + r) / 2;\r\n\r\n      beforeOrAt = self[i % cardinality];\r\n\r\n      // we've landed on an uninitialized tick, keep searching higher (more recently)\r\n      if (!beforeOrAt.initialized) {\r\n        l = i + 1;\r\n        continue;\r\n      }\r\n\r\n      atOrAfter = self[(i + 1) % cardinality];\r\n\r\n      bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\r\n\r\n      // check if we've found the answer!\r\n      if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\r\n\r\n      if (!targetAtOrAfter) r = i - 1;\r\n      else l = i + 1;\r\n    }\r\n  }\r\n  }\r\n\r\n  /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\r\n  /// @dev Assumes there is at least 1 initialized observation.\r\n  /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\r\n  /// @param self The stored oracle array\r\n  /// @param time The current block.timestamp\r\n  /// @param target The timestamp at which the reserved observation should be for\r\n  /// @param tick The active tick at the time of the returned or simulated observation\r\n  /// @param index The index of the observation that was most recently written to the observations array\r\n  /// @param liquidity The total pool liquidity at the time of the call\r\n  /// @param cardinality The number of populated elements in the oracle array\r\n  /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\r\n  /// @return atOrAfter The observation which occurred at, or after, the given timestamp\r\n  function getSurroundingObservations(\r\n    Observation[65535] storage self,\r\n    uint32 time,\r\n    uint32 target,\r\n    int24 tick,\r\n    uint16 index,\r\n    uint128 liquidity,\r\n    uint16 cardinality\r\n  ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\r\n  unchecked {\r\n    // optimistically set before to the newest observation\r\n    beforeOrAt = self[index];\r\n\r\n    // if the target is chronologically at or after the newest observation, we can early return\r\n    if (lte(time, beforeOrAt.blockTimestamp, target)) {\r\n      if (beforeOrAt.blockTimestamp == target) {\r\n        // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\r\n        return (beforeOrAt, atOrAfter);\r\n      } else {\r\n        // otherwise, we need to transform\r\n        return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\r\n      }\r\n    }\r\n\r\n    // now, set before to the oldest observation\r\n    beforeOrAt = self[(index + 1) % cardinality];\r\n    if (!beforeOrAt.initialized) beforeOrAt = self[0];\r\n\r\n    // ensure that the target is chronologically at or after the oldest observation\r\n    if (!lte(time, beforeOrAt.blockTimestamp, target)) revert OLD();\r\n\r\n    // if we've reached this point, we have to binary search\r\n    return binarySearch(self, time, target, index, cardinality);\r\n  }\r\n  }\r\n\r\n  /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\r\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\r\n  /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\r\n  /// at exactly the timestamp between the two observations.\r\n  /// @param self The stored oracle array\r\n  /// @param time The current block timestamp\r\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\r\n  /// @param tick The current tick\r\n  /// @param index The index of the observation that was most recently written to the observations array\r\n  /// @param liquidity The current in-range pool liquidity\r\n  /// @param cardinality The number of populated elements in the oracle array\r\n  /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\r\n  /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\r\n  function observeSingle(\r\n    Observation[65535] storage self,\r\n    uint32 time,\r\n    uint32 secondsAgo,\r\n    int24 tick,\r\n    uint16 index,\r\n    uint128 liquidity,\r\n    uint16 cardinality\r\n  ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\r\n  unchecked {\r\n    if (secondsAgo == 0) {\r\n      Observation memory last = self[index];\r\n      if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\r\n      return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\r\n    }\r\n\r\n    uint32 target = time - secondsAgo;\r\n\r\n    (Observation memory beforeOrAt, Observation memory atOrAfter) = getSurroundingObservations(\r\n      self,\r\n      time,\r\n      target,\r\n      tick,\r\n      index,\r\n      liquidity,\r\n      cardinality\r\n    );\r\n\r\n    if (target == beforeOrAt.blockTimestamp) {\r\n      // we're at the left boundary\r\n      return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\r\n    } else if (target == atOrAfter.blockTimestamp) {\r\n      // we're at the right boundary\r\n      return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\r\n    } else {\r\n      // we're in the middle\r\n      uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\r\n      uint32 targetDelta = target - beforeOrAt.blockTimestamp;\r\n      return (\r\n      beforeOrAt.tickCumulative +\r\n      ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / int56(uint56(observationTimeDelta))) *\r\n      int56(uint56(targetDelta)),\r\n      beforeOrAt.secondsPerLiquidityCumulativeX128 +\r\n      uint160(\r\n        (uint256(\r\n          atOrAfter.secondsPerLiquidityCumulativeX128 -\r\n          beforeOrAt.secondsPerLiquidityCumulativeX128\r\n        ) * targetDelta) / observationTimeDelta\r\n      )\r\n      );\r\n    }\r\n  }\r\n  }\r\n\r\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\r\n  /// @dev Reverts if `secondsAgos` > oldest observation\r\n  /// @param self The stored oracle array\r\n  /// @param time The current block.timestamp\r\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\r\n  /// @param tick The current tick\r\n  /// @param index The index of the observation that was most recently written to the observations array\r\n  /// @param liquidity The current in-range pool liquidity\r\n  /// @param cardinality The number of populated elements in the oracle array\r\n  /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\r\n  /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\r\n  function observe(\r\n    Observation[65535] storage self,\r\n    uint32 time,\r\n    uint32[] memory secondsAgos,\r\n    int24 tick,\r\n    uint16 index,\r\n    uint128 liquidity,\r\n    uint16 cardinality\r\n  ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\r\n  unchecked {\r\n    if (cardinality <= 0) revert I();\r\n\r\n    tickCumulatives = new int56[](secondsAgos.length);\r\n    secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\r\n    for (uint256 i = 0; i < secondsAgos.length; i++) {\r\n      (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\r\n        self,\r\n        time,\r\n        secondsAgos[i],\r\n        tick,\r\n        index,\r\n        liquidity,\r\n        cardinality\r\n      );\r\n    }\r\n  }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/Position.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\nimport {FullMath} from './FullMath.sol';\r\nimport {FixedPoint128} from './FixedPoint128.sol';\r\n\r\n/// @title Position\r\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\r\n/// @dev Positions store additional state for tracking fees owed to the position\r\nlibrary Position {\r\n  error NP();\r\n\r\n  // info stored for each user's position\r\n  struct Info {\r\n    // the amount of liquidity owned by this position\r\n    uint128 liquidity;\r\n    // fee growth per unit of liquidity as of the last update to liquidity or fees owed\r\n    uint256 feeGrowthInside0LastX128;\r\n    uint256 feeGrowthInside1LastX128;\r\n    // the fees owed to the position owner in token0/token1\r\n    uint128 tokensOwed0;\r\n    uint128 tokensOwed1;\r\n  }\r\n\r\n  /// @notice Returns the Info struct of a position, given an owner and position boundaries\r\n  /// @param self The mapping containing all user positions\r\n  /// @param owner The address of the position owner\r\n  /// @param tickLower The lower tick boundary of the position\r\n  /// @param tickUpper The upper tick boundary of the position\r\n  /// @return position The position info struct of the given owners' position\r\n  function get(\r\n    mapping(bytes32 => Info) storage self,\r\n    address owner,\r\n    int24 tickLower,\r\n    int24 tickUpper\r\n  ) internal view returns (Position.Info storage position) {\r\n    position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\r\n  }\r\n\r\n  /// @notice Credits accumulated fees to a user's position\r\n  /// @param self The individual position to update\r\n  /// @param liquidityDelta The change in pool liquidity as a result of the position update\r\n  /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\r\n  /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\r\n  function update(\r\n    Info storage self,\r\n    int128 liquidityDelta,\r\n    uint256 feeGrowthInside0X128,\r\n    uint256 feeGrowthInside1X128\r\n  ) internal {\r\n    Info memory _self = self;\r\n\r\n    uint128 liquidityNext;\r\n    if (liquidityDelta == 0) {\r\n      if (_self.liquidity <= 0) revert NP();\r\n      // disallow pokes for 0 liquidity positions\r\n      liquidityNext = _self.liquidity;\r\n    } else {\r\n      liquidityNext = liquidityDelta < 0\r\n      ? _self.liquidity - uint128(- liquidityDelta)\r\n      : _self.liquidity + uint128(liquidityDelta);\r\n    }\r\n\r\n    // calculate accumulated fees. overflow in the subtraction of fee growth is expected\r\n    uint128 tokensOwed0;\r\n    uint128 tokensOwed1;\r\n  unchecked {\r\n    tokensOwed0 = uint128(\r\n      FullMath.mulDiv(\r\n        feeGrowthInside0X128 - _self.feeGrowthInside0LastX128,\r\n        _self.liquidity,\r\n        FixedPoint128.Q128\r\n      )\r\n    );\r\n    tokensOwed1 = uint128(\r\n      FullMath.mulDiv(\r\n        feeGrowthInside1X128 - _self.feeGrowthInside1LastX128,\r\n        _self.liquidity,\r\n        FixedPoint128.Q128\r\n      )\r\n    );\r\n\r\n    // update the position\r\n    if (liquidityDelta != 0) self.liquidity = liquidityNext;\r\n    self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\r\n    self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\r\n    if (tokensOwed0 > 0 || tokensOwed1 > 0) {\r\n      // overflow is acceptable, user must withdraw before they hit type(uint128).max fees\r\n      self.tokensOwed0 += tokensOwed0;\r\n      self.tokensOwed1 += tokensOwed1;\r\n    }\r\n  }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Safe casting methods\r\n/// @notice Contains methods for safely casting between types\r\nlibrary SafeCast {\r\n  /// @notice Cast a uint256 to a uint160, revert on overflow\r\n  /// @param y The uint256 to be downcasted\r\n  /// @return z The downcasted integer, now type uint160\r\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\r\n    require((z = uint160(y)) == y);\r\n  }\r\n\r\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\r\n  /// @param y The int256 to be downcasted\r\n  /// @return z The downcasted integer, now type int128\r\n  function toInt128(int256 y) internal pure returns (int128 z) {\r\n    require((z = int128(y)) == y);\r\n  }\r\n\r\n  /// @notice Cast a uint256 to a int256, revert on overflow\r\n  /// @param y The uint256 to be casted\r\n  /// @return z The casted integer, now type int256\r\n  function toInt256(uint256 y) internal pure returns (int256 z) {\r\n    require(y < 2 ** 255);\r\n    z = int256(y);\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/SqrtPriceMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\nimport {SafeCast} from './SafeCast.sol';\r\n\r\nimport {FullMath} from './FullMath.sol';\r\nimport {UnsafeMath} from './UnsafeMath.sol';\r\nimport {FixedPoint96} from './FixedPoint96.sol';\r\n\r\n/// @title Functions based on Q64.96 sqrt price and liquidity\r\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\r\nlibrary SqrtPriceMath {\r\n  using SafeCast for uint256;\r\n\r\n  /// @notice Gets the next sqrt price given a delta of token0\r\n  /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\r\n  /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\r\n  /// price less in order to not send too much output.\r\n  /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\r\n  /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\r\n  /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param amount How much of token0 to add or remove from virtual reserves\r\n  /// @param add Whether to add or remove the amount of token0\r\n  /// @return The price after adding or removing amount, depending on add\r\n  function getNextSqrtPriceFromAmount0RoundingUp(\r\n    uint160 sqrtPX96,\r\n    uint128 liquidity,\r\n    uint256 amount,\r\n    bool add\r\n  ) internal pure returns (uint160) {\r\n    // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\r\n    if (amount == 0) return sqrtPX96;\r\n    uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\r\n\r\n    if (add) {\r\n    unchecked {\r\n      uint256 product;\r\n      if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\r\n        uint256 denominator = numerator1 + product;\r\n        if (denominator >= numerator1)\r\n        // always fits in 160 bits\r\n          return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\r\n      }\r\n    }\r\n      // denominator is checked for overflow\r\n      return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96) + amount));\r\n    } else {\r\n    unchecked {\r\n      uint256 product;\r\n      // if the product overflows, we know the denominator underflows\r\n      // in addition, we must check that the denominator does not underflow\r\n      require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\r\n      uint256 denominator = numerator1 - product;\r\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\r\n    }\r\n    }\r\n  }\r\n\r\n  /// @notice Gets the next sqrt price given a delta of token1\r\n  /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\r\n  /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\r\n  /// price less in order to not send too much output.\r\n  /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\r\n  /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param amount How much of token1 to add, or remove, from virtual reserves\r\n  /// @param add Whether to add, or remove, the amount of token1\r\n  /// @return The price after adding or removing `amount`\r\n  function getNextSqrtPriceFromAmount1RoundingDown(\r\n    uint160 sqrtPX96,\r\n    uint128 liquidity,\r\n    uint256 amount,\r\n    bool add\r\n  ) internal pure returns (uint160) {\r\n    // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\r\n    // in both cases, avoid a mulDiv for most inputs\r\n    if (add) {\r\n      uint256 quotient = (\r\n      amount <= type(uint160).max\r\n      ? (amount << FixedPoint96.RESOLUTION) / liquidity\r\n      : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\r\n      );\r\n\r\n      return (uint256(sqrtPX96) + quotient).toUint160();\r\n    } else {\r\n      uint256 quotient = (\r\n      amount <= type(uint160).max\r\n      ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\r\n      : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\r\n      );\r\n\r\n      require(sqrtPX96 > quotient);\r\n      // always fits 160 bits\r\n    unchecked {\r\n      return uint160(sqrtPX96 - quotient);\r\n    }\r\n    }\r\n  }\r\n\r\n  /// @notice Gets the next sqrt price given an input amount of token0 or token1\r\n  /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\r\n  /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param amountIn How much of token0, or token1, is being swapped in\r\n  /// @param zeroForOne Whether the amount in is token0 or token1\r\n  /// @return sqrtQX96 The price after adding the input amount to token0 or token1\r\n  function getNextSqrtPriceFromInput(\r\n    uint160 sqrtPX96,\r\n    uint128 liquidity,\r\n    uint256 amountIn,\r\n    bool zeroForOne\r\n  ) internal pure returns (uint160 sqrtQX96) {\r\n    require(sqrtPX96 > 0);\r\n    require(liquidity > 0);\r\n\r\n    // round to make sure that we don't pass the target price\r\n    return\r\n    zeroForOne\r\n    ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\r\n    : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\r\n  }\r\n\r\n  /// @notice Gets the next sqrt price given an output amount of token0 or token1\r\n  /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\r\n  /// @param sqrtPX96 The starting price before accounting for the output amount\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param amountOut How much of token0, or token1, is being swapped out\r\n  /// @param zeroForOne Whether the amount out is token0 or token1\r\n  /// @return sqrtQX96 The price after removing the output amount of token0 or token1\r\n  function getNextSqrtPriceFromOutput(\r\n    uint160 sqrtPX96,\r\n    uint128 liquidity,\r\n    uint256 amountOut,\r\n    bool zeroForOne\r\n  ) internal pure returns (uint160 sqrtQX96) {\r\n    require(sqrtPX96 > 0);\r\n    require(liquidity > 0);\r\n\r\n    // round to make sure that we pass the target price\r\n    return\r\n    zeroForOne\r\n    ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\r\n    : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\r\n  }\r\n\r\n  /// @notice Gets the amount0 delta between two prices\r\n  /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\r\n  /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param roundUp Whether to round the amount up or down\r\n  /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\r\n  function getAmount0Delta(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint128 liquidity,\r\n    bool roundUp\r\n  ) internal pure returns (uint256 amount0) {\r\n  unchecked {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\r\n    uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\r\n\r\n    require(sqrtRatioAX96 > 0);\r\n\r\n    return\r\n    roundUp\r\n    ? UnsafeMath.divRoundingUp(\r\n      FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\r\n      sqrtRatioAX96\r\n    )\r\n    : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\r\n  }\r\n  }\r\n\r\n  /// @notice Gets the amount1 delta between two prices\r\n  /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The amount of usable liquidity\r\n  /// @param roundUp Whether to round the amount up, or down\r\n  /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\r\n  function getAmount1Delta(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    uint128 liquidity,\r\n    bool roundUp\r\n  ) internal pure returns (uint256 amount1) {\r\n  unchecked {\r\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\r\n\r\n    return\r\n    roundUp\r\n    ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\r\n    : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\r\n  }\r\n  }\r\n\r\n  /// @notice Helper that gets signed token0 delta\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The change in liquidity for which to compute the amount0 delta\r\n  /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\r\n  function getAmount0Delta(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    int128 liquidity\r\n  ) internal pure returns (int256 amount0) {\r\n  unchecked {\r\n    return\r\n    liquidity < 0\r\n    ? - getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(- liquidity), false).toInt256()\r\n    : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\r\n  }\r\n  }\r\n\r\n  /// @notice Helper that gets signed token1 delta\r\n  /// @param sqrtRatioAX96 A sqrt price\r\n  /// @param sqrtRatioBX96 Another sqrt price\r\n  /// @param liquidity The change in liquidity for which to compute the amount1 delta\r\n  /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\r\n  function getAmount1Delta(\r\n    uint160 sqrtRatioAX96,\r\n    uint160 sqrtRatioBX96,\r\n    int128 liquidity\r\n  ) internal pure returns (int256 amount1) {\r\n  unchecked {\r\n    return\r\n    liquidity < 0\r\n    ? - getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(- liquidity), false).toInt256()\r\n    : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\r\n  }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/SwapMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\nimport {FullMath} from './FullMath.sol';\r\nimport {SqrtPriceMath} from './SqrtPriceMath.sol';\r\n\r\n/// @title Computes the result of a swap within ticks\r\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\r\nlibrary SwapMath {\r\n  /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\r\n  /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\r\n  /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\r\n  /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\r\n  /// @param liquidity The usable liquidity\r\n  /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\r\n  /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\r\n  /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\r\n  /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\r\n  /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\r\n  /// @return feeAmount The amount of input that will be taken as a fee\r\n  function computeSwapStep(\r\n    uint160 sqrtRatioCurrentX96,\r\n    uint160 sqrtRatioTargetX96,\r\n    uint128 liquidity,\r\n    int256 amountRemaining,\r\n    uint24 feePips\r\n  )\r\n  internal\r\n  pure\r\n  returns (\r\n    uint160 sqrtRatioNextX96,\r\n    uint256 amountIn,\r\n    uint256 amountOut,\r\n    uint256 feeAmount\r\n  )\r\n  {\r\n  unchecked {\r\n    bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\r\n    bool exactIn = amountRemaining >= 0;\r\n\r\n    if (exactIn) {\r\n      uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\r\n      amountIn = zeroForOne\r\n      ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\r\n      : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\r\n      if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n      else\r\n        sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\r\n          sqrtRatioCurrentX96,\r\n          liquidity,\r\n          amountRemainingLessFee,\r\n          zeroForOne\r\n        );\r\n    } else {\r\n      amountOut = zeroForOne\r\n      ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\r\n      : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\r\n      if (uint256(- amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\r\n      else\r\n        sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\r\n          sqrtRatioCurrentX96,\r\n          liquidity,\r\n          uint256(- amountRemaining),\r\n          zeroForOne\r\n        );\r\n    }\r\n\r\n    bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\r\n\r\n    // get the input/output amounts\r\n    if (zeroForOne) {\r\n      amountIn = max && exactIn\r\n      ? amountIn\r\n      : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\r\n      amountOut = max && !exactIn\r\n      ? amountOut\r\n      : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\r\n    } else {\r\n      amountIn = max && exactIn\r\n      ? amountIn\r\n      : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\r\n      amountOut = max && !exactIn\r\n      ? amountOut\r\n      : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\r\n    }\r\n\r\n    // cap the output amount to not exceed the remaining output amount\r\n    if (!exactIn && amountOut > uint256(- amountRemaining)) {\r\n      amountOut = uint256(- amountRemaining);\r\n    }\r\n\r\n    if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\r\n      // we didn't reach the target, so take the remainder of the maximum input as fee\r\n      feeAmount = uint256(amountRemaining) - amountIn;\r\n    } else {\r\n      feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\r\n    }\r\n  }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/Tick.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\nimport {SafeCast} from './SafeCast.sol';\r\n\r\nimport {TickMath} from './TickMath.sol';\r\n\r\n/// @title Tick\r\n/// @notice Contains functions for managing tick processes and relevant calculations\r\nlibrary Tick {\r\n  error LO();\r\n\r\n  using SafeCast for int256;\r\n\r\n  // info stored for each initialized individual tick\r\n  struct Info {\r\n    // the total position liquidity that references this tick\r\n    uint128 liquidityGross;\r\n    // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\r\n    int128 liquidityNet;\r\n    // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\r\n    // only has relative meaning, not absolute — the value depends on when the tick is initialized\r\n    uint256 feeGrowthOutside0X128;\r\n    uint256 feeGrowthOutside1X128;\r\n    // the cumulative tick value on the other side of the tick\r\n    int56 tickCumulativeOutside;\r\n    // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\r\n    // only has relative meaning, not absolute — the value depends on when the tick is initialized\r\n    uint160 secondsPerLiquidityOutsideX128;\r\n    // the seconds spent on the other side of the tick (relative to the current tick)\r\n    // only has relative meaning, not absolute — the value depends on when the tick is initialized\r\n    uint32 secondsOutside;\r\n    // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\r\n    // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\r\n    bool initialized;\r\n  }\r\n\r\n  /// @notice Derives max liquidity per tick from given tick spacing\r\n  /// @dev Executed within the pool constructor\r\n  /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\r\n  ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\r\n  /// @return The max liquidity per tick\r\n  function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\r\n  unchecked {\r\n    int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\r\n    int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\r\n    uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\r\n    return type(uint128).max / numTicks;\r\n  }\r\n  }\r\n\r\n  /// @notice Retrieves fee growth data\r\n  /// @param self The mapping containing all tick information for initialized ticks\r\n  /// @param tickLower The lower tick boundary of the position\r\n  /// @param tickUpper The upper tick boundary of the position\r\n  /// @param tickCurrent The current tick\r\n  /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\r\n  /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\r\n  /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\r\n  /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\r\n  function getFeeGrowthInside(\r\n    mapping(int24 => Tick.Info) storage self,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    int24 tickCurrent,\r\n    uint256 feeGrowthGlobal0X128,\r\n    uint256 feeGrowthGlobal1X128\r\n  ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\r\n  unchecked {\r\n    Info storage lower = self[tickLower];\r\n    Info storage upper = self[tickUpper];\r\n\r\n    // calculate fee growth below\r\n    uint256 feeGrowthBelow0X128;\r\n    uint256 feeGrowthBelow1X128;\r\n    if (tickCurrent >= tickLower) {\r\n      feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\r\n      feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\r\n    } else {\r\n      feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\r\n      feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\r\n    }\r\n\r\n    // calculate fee growth above\r\n    uint256 feeGrowthAbove0X128;\r\n    uint256 feeGrowthAbove1X128;\r\n    if (tickCurrent < tickUpper) {\r\n      feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\r\n      feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\r\n    } else {\r\n      feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\r\n      feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\r\n    }\r\n\r\n    feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\r\n    feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\r\n  }\r\n  }\r\n\r\n  /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\r\n  /// @param self The mapping containing all tick information for initialized ticks\r\n  /// @param tick The tick that will be updated\r\n  /// @param tickCurrent The current tick\r\n  /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\r\n  /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\r\n  /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\r\n  /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\r\n  /// @param tickCumulative The tick * time elapsed since the pool was first initialized\r\n  /// @param time The current block timestamp cast to a uint32\r\n  /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\r\n  /// @param maxLiquidity The maximum liquidity allocation for a single tick\r\n  /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\r\n  function update(\r\n    mapping(int24 => Tick.Info) storage self,\r\n    int24 tick,\r\n    int24 tickCurrent,\r\n    int128 liquidityDelta,\r\n    uint256 feeGrowthGlobal0X128,\r\n    uint256 feeGrowthGlobal1X128,\r\n    uint160 secondsPerLiquidityCumulativeX128,\r\n    int56 tickCumulative,\r\n    uint32 time,\r\n    bool upper,\r\n    uint128 maxLiquidity\r\n  ) internal returns (bool flipped) {\r\n    Tick.Info storage info = self[tick];\r\n\r\n    uint128 liquidityGrossBefore = info.liquidityGross;\r\n    uint128 liquidityGrossAfter = liquidityDelta < 0\r\n    ? liquidityGrossBefore - uint128(- liquidityDelta)\r\n    : liquidityGrossBefore + uint128(liquidityDelta);\r\n\r\n    if (liquidityGrossAfter > maxLiquidity) revert LO();\r\n\r\n    flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\r\n\r\n    if (liquidityGrossBefore == 0) {\r\n      // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\r\n      if (tick <= tickCurrent) {\r\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\r\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\r\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\r\n        info.tickCumulativeOutside = tickCumulative;\r\n        info.secondsOutside = time;\r\n      }\r\n      info.initialized = true;\r\n    }\r\n\r\n    info.liquidityGross = liquidityGrossAfter;\r\n\r\n    // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\r\n    info.liquidityNet = upper ? info.liquidityNet - liquidityDelta : info.liquidityNet + liquidityDelta;\r\n  }\r\n\r\n  /// @notice Clears tick data\r\n  /// @param self The mapping containing all initialized tick information for initialized ticks\r\n  /// @param tick The tick that will be cleared\r\n  function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\r\n    delete self[tick];\r\n  }\r\n\r\n  /// @notice Transitions to next tick as needed by price movement\r\n  /// @param self The mapping containing all tick information for initialized ticks\r\n  /// @param tick The destination tick of the transition\r\n  /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\r\n  /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\r\n  /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\r\n  /// @param tickCumulative The tick * time elapsed since the pool was first initialized\r\n  /// @param time The current block.timestamp\r\n  /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\r\n  function cross(\r\n    mapping(int24 => Tick.Info) storage self,\r\n    int24 tick,\r\n    uint256 feeGrowthGlobal0X128,\r\n    uint256 feeGrowthGlobal1X128,\r\n    uint160 secondsPerLiquidityCumulativeX128,\r\n    int56 tickCumulative,\r\n    uint32 time\r\n  ) internal returns (int128 liquidityNet) {\r\n  unchecked {\r\n    Tick.Info storage info = self[tick];\r\n    info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\r\n    info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\r\n    info.secondsPerLiquidityOutsideX128 =\r\n    secondsPerLiquidityCumulativeX128 -\r\n    info.secondsPerLiquidityOutsideX128;\r\n    info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\r\n    info.secondsOutside = time - info.secondsOutside;\r\n    liquidityNet = info.liquidityNet;\r\n  }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/TickBitmap.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\nimport {BitMath} from './BitMath.sol';\r\n\r\n/// @title Packed tick initialized state library\r\n/// @notice Stores a packed mapping of tick index to its initialized state\r\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\r\nlibrary TickBitmap {\r\n  /// @notice Computes the position in the mapping where the initialized bit for a tick lives\r\n  /// @param tick The tick for which to compute the position\r\n  /// @return wordPos The key in the mapping containing the word in which the bit is stored\r\n  /// @return bitPos The bit position in the word where the flag is stored\r\n  function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\r\n  unchecked {\r\n    wordPos = int16(tick >> 8);\r\n    bitPos = uint8(int8(tick % 256));\r\n  }\r\n  }\r\n\r\n  /// @notice Flips the initialized state for a given tick from false to true, or vice versa\r\n  /// @param self The mapping in which to flip the tick\r\n  /// @param tick The tick to flip\r\n  /// @param tickSpacing The spacing between usable ticks\r\n  function flipTick(\r\n    mapping(int16 => uint256) storage self,\r\n    int24 tick,\r\n    int24 tickSpacing\r\n  ) internal {\r\n  unchecked {\r\n    require(tick % tickSpacing == 0);\r\n    // ensure that the tick is spaced\r\n    (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\r\n    uint256 mask = 1 << bitPos;\r\n    self[wordPos] ^= mask;\r\n  }\r\n  }\r\n\r\n  /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\r\n  /// to the left (less than or equal to) or right (greater than) of the given tick\r\n  /// @param self The mapping in which to compute the next initialized tick\r\n  /// @param tick The starting tick\r\n  /// @param tickSpacing The spacing between usable ticks\r\n  /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\r\n  /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\r\n  /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\r\n  function nextInitializedTickWithinOneWord(\r\n    mapping(int16 => uint256) storage self,\r\n    int24 tick,\r\n    int24 tickSpacing,\r\n    bool lte\r\n  ) internal view returns (int24 next, bool initialized) {\r\n  unchecked {\r\n    int24 compressed = tick / tickSpacing;\r\n    if (tick < 0 && tick % tickSpacing != 0) compressed--;\r\n    // round towards negative infinity\r\n\r\n    if (lte) {\r\n      (int16 wordPos, uint8 bitPos) = position(compressed);\r\n      // all the 1s at or to the right of the current bitPos\r\n      uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\r\n      uint256 masked = self[wordPos] & mask;\r\n\r\n      // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\r\n      initialized = masked != 0;\r\n      // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\r\n      next = initialized\r\n      ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\r\n      : (compressed - int24(uint24(bitPos))) * tickSpacing;\r\n    } else {\r\n      // start from the word of the next tick, since the current tick state doesn't matter\r\n      (int16 wordPos, uint8 bitPos) = position(compressed + 1);\r\n      // all the 1s at or to the left of the bitPos\r\n      uint256 mask = ~((1 << bitPos) - 1);\r\n      uint256 masked = self[wordPos] & mask;\r\n\r\n      // if there are no initialized ticks to the left of the current tick, return leftmost in the word\r\n      initialized = masked != 0;\r\n      // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\r\n      next = initialized\r\n      ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\r\n      : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\r\n    }\r\n  }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\nlibrary TickMath {\r\n  error T();\r\n  error R();\r\n\r\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n  int24 internal constant MIN_TICK = - 887272;\r\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n  int24 internal constant MAX_TICK = - MIN_TICK;\r\n\r\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n  /// @dev Throws if |tick| > max tick\r\n  /// @param tick The input tick for the above formula\r\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n  /// at the given tick\r\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\r\n  unchecked {\r\n    uint256 absTick = tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\r\n    if (absTick > uint256(int256(MAX_TICK))) revert T();\r\n\r\n    uint256 ratio = absTick & 0x1 != 0\r\n    ? 0xfffcb933bd6fad37aa2d162d1a594001\r\n    : 0x100000000000000000000000000000000;\r\n    if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n    if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n    if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n    if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n    if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n    if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n    if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n    if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n    if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n    if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n    if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n    if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n    if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n    if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n    if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n    if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n    if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n    if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n    if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n    if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n    sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\r\n  }\r\n  }\r\n\r\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n  /// ever return.\r\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n  function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n  unchecked {\r\n    // second inequality must be < because the price can never reach the price at the max tick\r\n    if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\r\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n    uint256 r = ratio;\r\n    uint256 msb = 0;\r\n\r\n    assembly {\r\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(5, gt(r, 0xFFFFFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(4, gt(r, 0xFFFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(3, gt(r, 0xFF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(2, gt(r, 0xF))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := shl(1, gt(r, 0x3))\r\n      msb := or(msb, f)\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      let f := gt(r, 0x1)\r\n      msb := or(msb, f)\r\n    }\r\n\r\n    if (msb >= 128) r = ratio >> (msb - 127);\r\n    else r = ratio << (127 - msb);\r\n\r\n    int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(63, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(62, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(61, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(60, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(59, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(58, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(57, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(56, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(55, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(54, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(53, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(52, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(51, f))\r\n      r := shr(f, r)\r\n    }\r\n    assembly {\r\n      r := shr(127, mul(r, r))\r\n      let f := shr(128, r)\r\n      log_2 := or(log_2, shl(50, f))\r\n    }\r\n\r\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141;\r\n    // 128.128 number\r\n\r\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n    tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\r\n  }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.6.0;\r\n\r\nimport {IERC20Minimal} from '../interfaces/IERC20Minimal.sol';\r\n\r\n/// @title TransferHelper\r\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\nlibrary TransferHelper {\r\n  error TF();\r\n\r\n  /// @notice Transfers tokens from msg.sender to a recipient\r\n  /// @dev Calls transfer on token contract, errors with TF if transfer fails\r\n  /// @param token The contract address of the token which will be transferred\r\n  /// @param to The recipient of the transfer\r\n  /// @param value The value of the transfer\r\n  function safeTransfer(\r\n    address token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    (bool success, bytes memory data) = token.call(\r\n      abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value)\r\n    );\r\n    if (!(success && (data.length == 0 || abi.decode(data, (bool))))) revert TF();\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/libraries/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Math functions that do not check inputs or outputs\r\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\r\nlibrary UnsafeMath {\r\n  /// @notice Returns ceil(x / y)\r\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\r\n  /// @param x The dividend\r\n  /// @param y The divisor\r\n  /// @return z The quotient, ceil(x / y)\r\n  function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    assembly {\r\n      z := add(div(x, y), gt(mod(x, y), 0))\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/NoDelegateCall.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.12;\r\n\r\n/// @title Prevents delegatecall to a contract\r\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\r\nabstract contract NoDelegateCall {\r\n  /// @dev The original address of this contract\r\n  address private immutable original;\r\n\r\n  constructor() {\r\n    // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\r\n    // In other words, this variable won't change when it's checked at runtime.\r\n    original = address(this);\r\n  }\r\n\r\n  /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\r\n  ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\r\n  function checkNotDelegateCall() private view {\r\n    require(address(this) == original);\r\n  }\r\n\r\n  /// @notice Prevents delegatecall into the modified method\r\n  modifier noDelegateCall() {\r\n    checkNotDelegateCall();\r\n    _;\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/UniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.12;\r\n\r\nimport {IUniswapV3Factory} from './interfaces/IUniswapV3Factory.sol';\r\n\r\nimport {UniswapV3PoolDeployer} from './UniswapV3PoolDeployer.sol';\r\nimport {NoDelegateCall} from './NoDelegateCall.sol';\r\n\r\nimport {UniswapV3Pool} from './UniswapV3Pool.sol';\r\n\r\n/// @title Canonical Uniswap V3 factory\r\n/// @notice Deploys Uniswap V3 pools and manages ownership and control over pool protocol fees\r\ncontract UniswapV3Factory is IUniswapV3Factory, UniswapV3PoolDeployer, NoDelegateCall {\r\n  /// @inheritdoc IUniswapV3Factory\r\n  address public override owner;\r\n\r\n  /// @inheritdoc IUniswapV3Factory\r\n  mapping(uint24 => int24) public override feeAmountTickSpacing;\r\n  /// @inheritdoc IUniswapV3Factory\r\n  mapping(address => mapping(address => mapping(uint24 => address))) public override getPool;\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n    emit OwnerChanged(address(0), msg.sender);\r\n\r\n    feeAmountTickSpacing[100] = 1;\r\n    emit FeeAmountEnabled(100, 1);\r\n    feeAmountTickSpacing[500] = 10;\r\n    emit FeeAmountEnabled(500, 10);\r\n    feeAmountTickSpacing[3000] = 60;\r\n    emit FeeAmountEnabled(3000, 60);\r\n    feeAmountTickSpacing[10000] = 200;\r\n    emit FeeAmountEnabled(10000, 200);\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3Factory\r\n  function createPool(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint24 fee\r\n  ) external override noDelegateCall returns (address pool) {\r\n    require(tokenA != tokenB);\r\n    // not need to sort tokens in this env, need put exact order on pool creation\r\n    (address token0, address token1) = /*tokenA < tokenB ? */(tokenA, tokenB)/* : (tokenB, tokenA)*/;\r\n    require(token0 != address(0));\r\n    int24 tickSpacing = feeAmountTickSpacing[fee];\r\n    require(tickSpacing != 0);\r\n    require(getPool[token0][token1][fee] == address(0));\r\n    pool = deploy(address(this), token0, token1, fee, tickSpacing);\r\n    getPool[token0][token1][fee] = pool;\r\n    // populate mapping in the reverse direction, deliberate choice to avoid the cost of comparing addresses\r\n    getPool[token1][token0][fee] = pool;\r\n    emit PoolCreated(token0, token1, fee, tickSpacing, pool);\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3Factory\r\n  function setOwner(address _owner) external override {\r\n    require(msg.sender == owner);\r\n    emit OwnerChanged(owner, _owner);\r\n    owner = _owner;\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3Factory\r\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) public override {\r\n    require(msg.sender == owner);\r\n    require(fee < 1000000);\r\n    // tick spacing is capped at 16384 to prevent the situation where tickSpacing is so large that\r\n    // TickBitmap#nextInitializedTickWithinOneWord overflows int24 container from a valid tick\r\n    // 16384 ticks represents a >5x price change with ticks of 1 bips\r\n    require(tickSpacing > 0 && tickSpacing < 16384);\r\n    require(feeAmountTickSpacing[fee] == 0);\r\n\r\n    feeAmountTickSpacing[fee] = tickSpacing;\r\n    emit FeeAmountEnabled(fee, tickSpacing);\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/UniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.12;\r\n\r\nimport {IUniswapV3PoolImmutables, IUniswapV3PoolState, IUniswapV3PoolActions, IUniswapV3PoolDerivedState, IUniswapV3PoolOwnerActions, IUniswapV3Pool} from './interfaces/IUniswapV3Pool.sol';\r\n\r\nimport {NoDelegateCall} from './NoDelegateCall.sol';\r\n\r\nimport {SafeCast} from './libraries/SafeCast.sol';\r\nimport {Tick} from './libraries/Tick.sol';\r\nimport {TickBitmap} from './libraries/TickBitmap.sol';\r\nimport {Position} from './libraries/Position.sol';\r\nimport {Oracle} from './libraries/Oracle.sol';\r\n\r\nimport {FullMath} from './libraries/FullMath.sol';\r\nimport {FixedPoint128} from './libraries/FixedPoint128.sol';\r\nimport {TransferHelper} from './libraries/TransferHelper.sol';\r\nimport {TickMath} from './libraries/TickMath.sol';\r\nimport {SqrtPriceMath} from './libraries/SqrtPriceMath.sol';\r\nimport {SwapMath} from './libraries/SwapMath.sol';\r\n\r\nimport {IUniswapV3PoolDeployer} from './interfaces/IUniswapV3PoolDeployer.sol';\r\nimport {IUniswapV3Factory} from './interfaces/IUniswapV3Factory.sol';\r\nimport {IERC20Minimal} from './interfaces/IERC20Minimal.sol';\r\nimport {IUniswapV3MintCallback} from './interfaces/callback/IUniswapV3MintCallback.sol';\r\nimport {IUniswapV3SwapCallback} from './interfaces/callback/IUniswapV3SwapCallback.sol';\r\nimport {IUniswapV3FlashCallback} from './interfaces/callback/IUniswapV3FlashCallback.sol';\r\n\r\ncontract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {\r\n  using SafeCast for uint256;\r\n  using SafeCast for int256;\r\n  using Tick for mapping(int24 => Tick.Info);\r\n  using TickBitmap for mapping(int16 => uint256);\r\n  using Position for mapping(bytes32 => Position.Info);\r\n  using Position for Position.Info;\r\n  using Oracle for Oracle.Observation[65535];\r\n\r\n  /// @inheritdoc IUniswapV3PoolImmutables\r\n  address public immutable override factory;\r\n  /// @inheritdoc IUniswapV3PoolImmutables\r\n  address public immutable override token0;\r\n  /// @inheritdoc IUniswapV3PoolImmutables\r\n  address public immutable override token1;\r\n  /// @inheritdoc IUniswapV3PoolImmutables\r\n  uint24 public immutable override fee;\r\n\r\n  /// @inheritdoc IUniswapV3PoolImmutables\r\n  int24 public immutable override tickSpacing;\r\n\r\n  /// @inheritdoc IUniswapV3PoolImmutables\r\n  uint128 public immutable override maxLiquidityPerTick;\r\n\r\n  struct Slot0 {\r\n    // the current price\r\n    uint160 sqrtPriceX96;\r\n    // the current tick\r\n    int24 tick;\r\n    // the most-recently updated index of the observations array\r\n    uint16 observationIndex;\r\n    // the current maximum number of observations that are being stored\r\n    uint16 observationCardinality;\r\n    // the next maximum number of observations to store, triggered in observations.write\r\n    uint16 observationCardinalityNext;\r\n    // the current protocol fee as a percentage of the swap fee taken on withdrawal\r\n    // represented as an integer denominator (1/x)%\r\n    uint8 feeProtocol;\r\n    // whether the pool is locked\r\n    bool unlocked;\r\n  }\r\n  /// @inheritdoc IUniswapV3PoolState\r\n  Slot0 public override slot0;\r\n\r\n  /// @inheritdoc IUniswapV3PoolState\r\n  uint256 public override feeGrowthGlobal0X128;\r\n  /// @inheritdoc IUniswapV3PoolState\r\n  uint256 public override feeGrowthGlobal1X128;\r\n\r\n  // accumulated protocol fees in token0/token1 units\r\n  struct ProtocolFees {\r\n    uint128 token0;\r\n    uint128 token1;\r\n  }\r\n  /// @inheritdoc IUniswapV3PoolState\r\n  ProtocolFees public override protocolFees;\r\n\r\n  /// @inheritdoc IUniswapV3PoolState\r\n  uint128 public override liquidity;\r\n\r\n  /// @inheritdoc IUniswapV3PoolState\r\n  mapping(int24 => Tick.Info) public override ticks;\r\n  /// @inheritdoc IUniswapV3PoolState\r\n  mapping(int16 => uint256) public override tickBitmap;\r\n  /// @inheritdoc IUniswapV3PoolState\r\n  mapping(bytes32 => Position.Info) public override positions;\r\n  /// @inheritdoc IUniswapV3PoolState\r\n  Oracle.Observation[65535] public override observations;\r\n\r\n  /// @dev Mutually exclusive reentrancy protection into the pool to/from a method. This method also prevents entrance\r\n  /// to a function before the pool is initialized. The reentrancy guard is required throughout the contract because\r\n  /// we use balance checks to determine the payment status of interactions such as mint, swap and flash.\r\n  modifier lock() {\r\n    if (!slot0.unlocked) revert LOK();\r\n    slot0.unlocked = false;\r\n    _;\r\n    slot0.unlocked = true;\r\n  }\r\n\r\n  /// @dev Prevents calling a function from anyone except the address returned by IUniswapV3Factory#owner()\r\n  modifier onlyFactoryOwner() {\r\n    require(msg.sender == IUniswapV3Factory(factory).owner());\r\n    _;\r\n  }\r\n\r\n  constructor() {\r\n    int24 _tickSpacing;\r\n    (factory, token0, token1, fee, _tickSpacing) = IUniswapV3PoolDeployer(msg.sender).parameters();\r\n    tickSpacing = _tickSpacing;\r\n\r\n    maxLiquidityPerTick = Tick.tickSpacingToMaxLiquidityPerTick(_tickSpacing);\r\n  }\r\n\r\n  /// @dev Common checks for valid tick inputs.\r\n  function checkTicks(int24 tickLower, int24 tickUpper) private pure {\r\n    if (tickLower >= tickUpper) revert TLU();\r\n    if (tickLower < TickMath.MIN_TICK) revert TLM();\r\n    if (tickUpper > TickMath.MAX_TICK) revert TUM();\r\n  }\r\n\r\n  /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\r\n  function _blockTimestamp() internal view virtual returns (uint32) {\r\n    return uint32(block.timestamp);\r\n    // truncation is desired\r\n  }\r\n\r\n  /// @dev Get the pool's balance of token0\r\n  /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\r\n  /// check\r\n  function balance0() private view returns (uint256) {\r\n    (bool success, bytes memory data) = token0.staticcall(\r\n      abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this))\r\n    );\r\n    require(success && data.length >= 32);\r\n    return abi.decode(data, (uint256));\r\n  }\r\n\r\n  /// @dev Get the pool's balance of token1\r\n  /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\r\n  /// check\r\n  function balance1() private view returns (uint256) {\r\n    (bool success, bytes memory data) = token1.staticcall(\r\n      abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this))\r\n    );\r\n    require(success && data.length >= 32);\r\n    return abi.decode(data, (uint256));\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolDerivedState\r\n  function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\r\n  external\r\n  view\r\n  override\r\n  noDelegateCall\r\n  returns (\r\n    int56 tickCumulativeInside,\r\n    uint160 secondsPerLiquidityInsideX128,\r\n    uint32 secondsInside\r\n  )\r\n  {\r\n    checkTicks(tickLower, tickUpper);\r\n\r\n    int56 tickCumulativeLower;\r\n    int56 tickCumulativeUpper;\r\n    uint160 secondsPerLiquidityOutsideLowerX128;\r\n    uint160 secondsPerLiquidityOutsideUpperX128;\r\n    uint32 secondsOutsideLower;\r\n    uint32 secondsOutsideUpper;\r\n\r\n    {\r\n      Tick.Info storage lower = ticks[tickLower];\r\n      Tick.Info storage upper = ticks[tickUpper];\r\n      bool initializedLower;\r\n      (tickCumulativeLower, secondsPerLiquidityOutsideLowerX128, secondsOutsideLower, initializedLower) = (\r\n      lower.tickCumulativeOutside,\r\n      lower.secondsPerLiquidityOutsideX128,\r\n      lower.secondsOutside,\r\n      lower.initialized\r\n      );\r\n      require(initializedLower);\r\n\r\n      bool initializedUpper;\r\n      (tickCumulativeUpper, secondsPerLiquidityOutsideUpperX128, secondsOutsideUpper, initializedUpper) = (\r\n      upper.tickCumulativeOutside,\r\n      upper.secondsPerLiquidityOutsideX128,\r\n      upper.secondsOutside,\r\n      upper.initialized\r\n      );\r\n      require(initializedUpper);\r\n    }\r\n\r\n    Slot0 memory _slot0 = slot0;\r\n\r\n  unchecked {\r\n    if (_slot0.tick < tickLower) {\r\n      return (\r\n      tickCumulativeLower - tickCumulativeUpper,\r\n      secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,\r\n      secondsOutsideLower - secondsOutsideUpper\r\n      );\r\n    } else if (_slot0.tick < tickUpper) {\r\n      uint32 time = _blockTimestamp();\r\n      (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) = observations.observeSingle(\r\n        time,\r\n        0,\r\n        _slot0.tick,\r\n        _slot0.observationIndex,\r\n        liquidity,\r\n        _slot0.observationCardinality\r\n      );\r\n      return (\r\n      tickCumulative - tickCumulativeLower - tickCumulativeUpper,\r\n      secondsPerLiquidityCumulativeX128 -\r\n      secondsPerLiquidityOutsideLowerX128 -\r\n      secondsPerLiquidityOutsideUpperX128,\r\n      time - secondsOutsideLower - secondsOutsideUpper\r\n      );\r\n    } else {\r\n      return (\r\n      tickCumulativeUpper - tickCumulativeLower,\r\n      secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,\r\n      secondsOutsideUpper - secondsOutsideLower\r\n      );\r\n    }\r\n  }\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolDerivedState\r\n  function observe(uint32[] calldata secondsAgos)\r\n  external\r\n  view\r\n  override\r\n  noDelegateCall\r\n  returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\r\n  {\r\n    return\r\n    observations.observe(\r\n      _blockTimestamp(),\r\n      secondsAgos,\r\n      slot0.tick,\r\n      slot0.observationIndex,\r\n      liquidity,\r\n      slot0.observationCardinality\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolActions\r\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext)\r\n  external\r\n  override\r\n  lock\r\n  noDelegateCall\r\n  {\r\n    uint16 observationCardinalityNextOld = slot0.observationCardinalityNext;\r\n    // for the event\r\n    uint16 observationCardinalityNextNew = observations.grow(\r\n      observationCardinalityNextOld,\r\n      observationCardinalityNext\r\n    );\r\n    slot0.observationCardinalityNext = observationCardinalityNextNew;\r\n    if (observationCardinalityNextOld != observationCardinalityNextNew)\r\n      emit IncreaseObservationCardinalityNext(observationCardinalityNextOld, observationCardinalityNextNew);\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolActions\r\n  /// @dev not locked because it initializes unlocked\r\n  function initialize(uint160 sqrtPriceX96) external override {\r\n    if (slot0.sqrtPriceX96 != 0) revert AI();\r\n\r\n    int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\r\n\r\n    (uint16 cardinality, uint16 cardinalityNext) = observations.initialize(_blockTimestamp());\r\n\r\n    slot0 = Slot0({\r\n    sqrtPriceX96 : sqrtPriceX96,\r\n    tick : tick,\r\n    observationIndex : 0,\r\n    observationCardinality : cardinality,\r\n    observationCardinalityNext : cardinalityNext,\r\n    feeProtocol : 0,\r\n    unlocked : true\r\n    });\r\n\r\n    emit Initialize(sqrtPriceX96, tick);\r\n  }\r\n\r\n  struct ModifyPositionParams {\r\n    // the address that owns the position\r\n    address owner;\r\n    // the lower and upper tick of the position\r\n    int24 tickLower;\r\n    int24 tickUpper;\r\n    // any change in liquidity\r\n    int128 liquidityDelta;\r\n  }\r\n\r\n  /// @dev Effect some changes to a position\r\n  /// @param params the position details and the change to the position's liquidity to effect\r\n  /// @return position a storage pointer referencing the position with the given owner and tick range\r\n  /// @return amount0 the amount of token0 owed to the pool, negative if the pool should pay the recipient\r\n  /// @return amount1 the amount of token1 owed to the pool, negative if the pool should pay the recipient\r\n  function _modifyPosition(ModifyPositionParams memory params)\r\n  private\r\n  noDelegateCall\r\n  returns (\r\n    Position.Info storage position,\r\n    int256 amount0,\r\n    int256 amount1\r\n  )\r\n  {\r\n    checkTicks(params.tickLower, params.tickUpper);\r\n\r\n    Slot0 memory _slot0 = slot0;\r\n    // SLOAD for gas optimization\r\n\r\n    position = _updatePosition(\r\n      params.owner,\r\n      params.tickLower,\r\n      params.tickUpper,\r\n      params.liquidityDelta,\r\n      _slot0.tick\r\n    );\r\n\r\n    if (params.liquidityDelta != 0) {\r\n      if (_slot0.tick < params.tickLower) {\r\n        // current tick is below the passed range; liquidity can only become in range by crossing from left to\r\n        // right, when we'll need _more_ token0 (it's becoming more valuable) so user must provide it\r\n        amount0 = SqrtPriceMath.getAmount0Delta(\r\n          TickMath.getSqrtRatioAtTick(params.tickLower),\r\n          TickMath.getSqrtRatioAtTick(params.tickUpper),\r\n          params.liquidityDelta\r\n        );\r\n      } else if (_slot0.tick < params.tickUpper) {\r\n        // current tick is inside the passed range\r\n        uint128 liquidityBefore = liquidity;\r\n        // SLOAD for gas optimization\r\n\r\n        // write an oracle entry\r\n        (slot0.observationIndex, slot0.observationCardinality) = observations.write(\r\n          _slot0.observationIndex,\r\n          _blockTimestamp(),\r\n          _slot0.tick,\r\n          liquidityBefore,\r\n          _slot0.observationCardinality,\r\n          _slot0.observationCardinalityNext\r\n        );\r\n\r\n        amount0 = SqrtPriceMath.getAmount0Delta(\r\n          _slot0.sqrtPriceX96,\r\n          TickMath.getSqrtRatioAtTick(params.tickUpper),\r\n          params.liquidityDelta\r\n        );\r\n        amount1 = SqrtPriceMath.getAmount1Delta(\r\n          TickMath.getSqrtRatioAtTick(params.tickLower),\r\n          _slot0.sqrtPriceX96,\r\n          params.liquidityDelta\r\n        );\r\n\r\n        liquidity = params.liquidityDelta < 0\r\n        ? liquidityBefore - uint128(- params.liquidityDelta)\r\n        : liquidityBefore + uint128(params.liquidityDelta);\r\n      } else {\r\n        // current tick is above the passed range; liquidity can only become in range by crossing from right to\r\n        // left, when we'll need _more_ token1 (it's becoming more valuable) so user must provide it\r\n        amount1 = SqrtPriceMath.getAmount1Delta(\r\n          TickMath.getSqrtRatioAtTick(params.tickLower),\r\n          TickMath.getSqrtRatioAtTick(params.tickUpper),\r\n          params.liquidityDelta\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Gets and updates a position with the given liquidity delta\r\n  /// @param owner the owner of the position\r\n  /// @param tickLower the lower tick of the position's tick range\r\n  /// @param tickUpper the upper tick of the position's tick range\r\n  /// @param tick the current tick, passed to avoid sloads\r\n  function _updatePosition(\r\n    address owner,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    int128 liquidityDelta,\r\n    int24 tick\r\n  ) private returns (Position.Info storage position) {\r\n    position = positions.get(owner, tickLower, tickUpper);\r\n\r\n    uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128;\r\n    // SLOAD for gas optimization\r\n    uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128;\r\n    // SLOAD for gas optimization\r\n\r\n    // if we need to update the ticks, do it\r\n    bool flippedLower;\r\n    bool flippedUpper;\r\n    if (liquidityDelta != 0) {\r\n      uint32 time = _blockTimestamp();\r\n      (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) = observations.observeSingle(\r\n        time,\r\n        0,\r\n        slot0.tick,\r\n        slot0.observationIndex,\r\n        liquidity,\r\n        slot0.observationCardinality\r\n      );\r\n\r\n      flippedLower = ticks.update(\r\n        tickLower,\r\n        tick,\r\n        liquidityDelta,\r\n        _feeGrowthGlobal0X128,\r\n        _feeGrowthGlobal1X128,\r\n        secondsPerLiquidityCumulativeX128,\r\n        tickCumulative,\r\n        time,\r\n        false,\r\n        maxLiquidityPerTick\r\n      );\r\n      flippedUpper = ticks.update(\r\n        tickUpper,\r\n        tick,\r\n        liquidityDelta,\r\n        _feeGrowthGlobal0X128,\r\n        _feeGrowthGlobal1X128,\r\n        secondsPerLiquidityCumulativeX128,\r\n        tickCumulative,\r\n        time,\r\n        true,\r\n        maxLiquidityPerTick\r\n      );\r\n\r\n      if (flippedLower) {\r\n        tickBitmap.flipTick(tickLower, tickSpacing);\r\n      }\r\n      if (flippedUpper) {\r\n        tickBitmap.flipTick(tickUpper, tickSpacing);\r\n      }\r\n    }\r\n\r\n    (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = ticks.getFeeGrowthInside(\r\n      tickLower,\r\n      tickUpper,\r\n      tick,\r\n      _feeGrowthGlobal0X128,\r\n      _feeGrowthGlobal1X128\r\n    );\r\n\r\n    position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);\r\n\r\n    // clear any tick data that is no longer needed\r\n    if (liquidityDelta < 0) {\r\n      if (flippedLower) {\r\n        ticks.clear(tickLower);\r\n      }\r\n      if (flippedUpper) {\r\n        ticks.clear(tickUpper);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolActions\r\n  /// @dev noDelegateCall is applied indirectly via _modifyPosition\r\n  function mint(\r\n    address recipient,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount,\r\n    bytes calldata data\r\n  ) external override lock returns (uint256 amount0, uint256 amount1) {\r\n    require(amount > 0);\r\n    (, int256 amount0Int, int256 amount1Int) = _modifyPosition(\r\n      ModifyPositionParams({\r\n    owner : recipient,\r\n    tickLower : tickLower,\r\n    tickUpper : tickUpper,\r\n    liquidityDelta : int256(uint256(amount)).toInt128()\r\n    })\r\n    );\r\n\r\n    amount0 = uint256(amount0Int);\r\n    amount1 = uint256(amount1Int);\r\n\r\n    uint256 balance0Before;\r\n    uint256 balance1Before;\r\n    if (amount0 > 0) balance0Before = balance0();\r\n    if (amount1 > 0) balance1Before = balance1();\r\n    IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\r\n    if (amount0 > 0 && balance0Before + amount0 > balance0()) revert M0();\r\n    if (amount1 > 0 && balance1Before + amount1 > balance1()) revert M1();\r\n\r\n    emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolActions\r\n  function collect(\r\n    address recipient,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount0Requested,\r\n    uint128 amount1Requested\r\n  ) external override lock returns (uint128 amount0, uint128 amount1) {\r\n    // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}\r\n    Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);\r\n\r\n    amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;\r\n    amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;\r\n\r\n  unchecked {\r\n    if (amount0 > 0) {\r\n      position.tokensOwed0 -= amount0;\r\n      TransferHelper.safeTransfer(token0, recipient, amount0);\r\n    }\r\n    if (amount1 > 0) {\r\n      position.tokensOwed1 -= amount1;\r\n      TransferHelper.safeTransfer(token1, recipient, amount1);\r\n    }\r\n  }\r\n\r\n    emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolActions\r\n  /// @dev noDelegateCall is applied indirectly via _modifyPosition\r\n  function burn(\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount\r\n  ) external override lock returns (uint256 amount0, uint256 amount1) {\r\n  unchecked {\r\n    (Position.Info storage position, int256 amount0Int, int256 amount1Int) = _modifyPosition(\r\n      ModifyPositionParams({\r\n    owner : msg.sender,\r\n    tickLower : tickLower,\r\n    tickUpper : tickUpper,\r\n    liquidityDelta : - int256(uint256(amount)).toInt128()\r\n    })\r\n    );\r\n\r\n    amount0 = uint256(- amount0Int);\r\n    amount1 = uint256(- amount1Int);\r\n\r\n    if (amount0 > 0 || amount1 > 0) {\r\n      (position.tokensOwed0, position.tokensOwed1) = (\r\n      position.tokensOwed0 + uint128(amount0),\r\n      position.tokensOwed1 + uint128(amount1)\r\n      );\r\n    }\r\n\r\n    emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);\r\n  }\r\n  }\r\n\r\n  struct SwapCache {\r\n    // the protocol fee for the input token\r\n    uint8 feeProtocol;\r\n    // liquidity at the beginning of the swap\r\n    uint128 liquidityStart;\r\n    // the timestamp of the current block\r\n    uint32 blockTimestamp;\r\n    // the current value of the tick accumulator, computed only if we cross an initialized tick\r\n    int56 tickCumulative;\r\n    // the current value of seconds per liquidity accumulator, computed only if we cross an initialized tick\r\n    uint160 secondsPerLiquidityCumulativeX128;\r\n    // whether we've computed and cached the above two accumulators\r\n    bool computedLatestObservation;\r\n  }\r\n\r\n  // the top level state of the swap, the results of which are recorded in storage at the end\r\n  struct SwapState {\r\n    // the amount remaining to be swapped in/out of the input/output asset\r\n    int256 amountSpecifiedRemaining;\r\n    // the amount already swapped out/in of the output/input asset\r\n    int256 amountCalculated;\r\n    // current sqrt(price)\r\n    uint160 sqrtPriceX96;\r\n    // the tick associated with the current price\r\n    int24 tick;\r\n    // the global fee growth of the input token\r\n    uint256 feeGrowthGlobalX128;\r\n    // amount of input token paid as protocol fee\r\n    uint128 protocolFee;\r\n    // the current liquidity in range\r\n    uint128 liquidity;\r\n  }\r\n\r\n  struct StepComputations {\r\n    // the price at the beginning of the step\r\n    uint160 sqrtPriceStartX96;\r\n    // the next tick to swap to from the current tick in the swap direction\r\n    int24 tickNext;\r\n    // whether tickNext is initialized or not\r\n    bool initialized;\r\n    // sqrt(price) for the next tick (1/0)\r\n    uint160 sqrtPriceNextX96;\r\n    // how much is being swapped in in this step\r\n    uint256 amountIn;\r\n    // how much is being swapped out\r\n    uint256 amountOut;\r\n    // how much fee is being paid in\r\n    uint256 feeAmount;\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolActions\r\n  function swap(\r\n    address recipient,\r\n    bool zeroForOne,\r\n    int256 amountSpecified,\r\n    uint160 sqrtPriceLimitX96,\r\n    bytes calldata data\r\n  ) external override noDelegateCall returns (int256 amount0, int256 amount1) {\r\n    if (amountSpecified == 0) revert AS();\r\n\r\n    Slot0 memory slot0Start = slot0;\r\n\r\n    if (!slot0Start.unlocked) revert LOK();\r\n    require(\r\n      zeroForOne\r\n      ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\r\n      : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\r\n      'SPL'\r\n    );\r\n\r\n    slot0.unlocked = false;\r\n\r\n    SwapCache memory cache = SwapCache({\r\n    liquidityStart : liquidity,\r\n    blockTimestamp : _blockTimestamp(),\r\n    feeProtocol : zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),\r\n    secondsPerLiquidityCumulativeX128 : 0,\r\n    tickCumulative : 0,\r\n    computedLatestObservation : false\r\n    });\r\n\r\n    bool exactInput = amountSpecified > 0;\r\n\r\n    SwapState memory state = SwapState({\r\n    amountSpecifiedRemaining : amountSpecified,\r\n    amountCalculated : 0,\r\n    sqrtPriceX96 : slot0Start.sqrtPriceX96,\r\n    tick : slot0Start.tick,\r\n    feeGrowthGlobalX128 : zeroForOne ? feeGrowthGlobal0X128 : feeGrowthGlobal1X128,\r\n    protocolFee : 0,\r\n    liquidity : cache.liquidityStart\r\n    });\r\n\r\n    // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\r\n    while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\r\n      StepComputations memory step;\r\n\r\n      step.sqrtPriceStartX96 = state.sqrtPriceX96;\r\n\r\n      (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(\r\n        state.tick,\r\n        tickSpacing,\r\n        zeroForOne\r\n      );\r\n\r\n      // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\r\n      if (step.tickNext < TickMath.MIN_TICK) {\r\n        step.tickNext = TickMath.MIN_TICK;\r\n      } else if (step.tickNext > TickMath.MAX_TICK) {\r\n        step.tickNext = TickMath.MAX_TICK;\r\n      }\r\n\r\n      // get the price for the next tick\r\n      step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\r\n\r\n      // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\r\n      (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\r\n        state.sqrtPriceX96,\r\n        (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\r\n        ? sqrtPriceLimitX96\r\n        : step.sqrtPriceNextX96,\r\n        state.liquidity,\r\n        state.amountSpecifiedRemaining,\r\n        fee\r\n      );\r\n\r\n      if (exactInput) {\r\n        // safe because we test that amountSpecified > amountIn + feeAmount in SwapMath\r\n      unchecked {\r\n        state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\r\n      }\r\n        state.amountCalculated -= step.amountOut.toInt256();\r\n      } else {\r\n      unchecked {\r\n        state.amountSpecifiedRemaining += step.amountOut.toInt256();\r\n      }\r\n        state.amountCalculated += (step.amountIn + step.feeAmount).toInt256();\r\n      }\r\n\r\n      // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\r\n      if (cache.feeProtocol > 0) {\r\n      unchecked {\r\n        uint256 delta = step.feeAmount / cache.feeProtocol;\r\n        step.feeAmount -= delta;\r\n        state.protocolFee += uint128(delta);\r\n      }\r\n      }\r\n\r\n      // update global fee tracker\r\n      if (state.liquidity > 0) {\r\n      unchecked {\r\n        state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);\r\n      }\r\n      }\r\n\r\n      // shift tick if we reached the next price\r\n      if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\r\n        // if the tick is initialized, run the tick transition\r\n        if (step.initialized) {\r\n          // check for the placeholder value, which we replace with the actual value the first time the swap\r\n          // crosses an initialized tick\r\n          if (!cache.computedLatestObservation) {\r\n            (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(\r\n              cache.blockTimestamp,\r\n              0,\r\n              slot0Start.tick,\r\n              slot0Start.observationIndex,\r\n              cache.liquidityStart,\r\n              slot0Start.observationCardinality\r\n            );\r\n            cache.computedLatestObservation = true;\r\n          }\r\n          int128 liquidityNet = ticks.cross(\r\n            step.tickNext,\r\n            (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),\r\n            (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),\r\n            cache.secondsPerLiquidityCumulativeX128,\r\n            cache.tickCumulative,\r\n            cache.blockTimestamp\r\n          );\r\n          // if we're moving leftward, we interpret liquidityNet as the opposite sign\r\n          // safe because liquidityNet cannot be type(int128).min\r\n        unchecked {\r\n          if (zeroForOne) liquidityNet = - liquidityNet;\r\n        }\r\n\r\n          state.liquidity = liquidityNet < 0\r\n          ? state.liquidity - uint128(- liquidityNet)\r\n          : state.liquidity + uint128(liquidityNet);\r\n        }\r\n\r\n      unchecked {\r\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\r\n      }\r\n      } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\r\n        // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\r\n        state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\r\n      }\r\n    }\r\n\r\n    // update tick and write an oracle entry if the tick change\r\n    if (state.tick != slot0Start.tick) {\r\n      (uint16 observationIndex, uint16 observationCardinality) = observations.write(\r\n        slot0Start.observationIndex,\r\n        cache.blockTimestamp,\r\n        slot0Start.tick,\r\n        cache.liquidityStart,\r\n        slot0Start.observationCardinality,\r\n        slot0Start.observationCardinalityNext\r\n      );\r\n      (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (\r\n      state.sqrtPriceX96,\r\n      state.tick,\r\n      observationIndex,\r\n      observationCardinality\r\n      );\r\n    } else {\r\n      // otherwise just update the price\r\n      slot0.sqrtPriceX96 = state.sqrtPriceX96;\r\n    }\r\n\r\n    // update liquidity if it changed\r\n    if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;\r\n\r\n    // update fee growth global and, if necessary, protocol fees\r\n    // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees\r\n    if (zeroForOne) {\r\n      feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\r\n    unchecked {\r\n      if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;\r\n    }\r\n    } else {\r\n      feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\r\n    unchecked {\r\n      if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;\r\n    }\r\n    }\r\n\r\n  unchecked {\r\n    (amount0, amount1) = zeroForOne == exactInput\r\n    ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\r\n    : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\r\n  }\r\n\r\n    // do the transfers and collect payment\r\n    if (zeroForOne) {\r\n    unchecked {\r\n      if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(- amount1));\r\n    }\r\n\r\n      uint256 balance0Before = balance0();\r\n      IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\r\n      if (balance0Before + uint256(amount0) > balance0()) revert IIA();\r\n    } else {\r\n    unchecked {\r\n      if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(- amount0));\r\n    }\r\n\r\n      uint256 balance1Before = balance1();\r\n      IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\r\n      if (balance1Before + uint256(amount1) > balance1()) revert IIA();\r\n    }\r\n\r\n    emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);\r\n    slot0.unlocked = true;\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolActions\r\n  function flash(\r\n    address recipient,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    bytes calldata data\r\n  ) external override lock noDelegateCall {\r\n    uint128 _liquidity = liquidity;\r\n    if (_liquidity <= 0) revert L();\r\n\r\n    uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\r\n    uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\r\n    uint256 balance0Before = balance0();\r\n    uint256 balance1Before = balance1();\r\n\r\n    if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\r\n    if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\r\n\r\n    IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);\r\n\r\n    uint256 balance0After = balance0();\r\n    uint256 balance1After = balance1();\r\n\r\n    if (balance0Before + fee0 > balance0After) revert F0();\r\n    if (balance1Before + fee1 > balance1After) revert F1();\r\n\r\n  unchecked {\r\n    // sub is safe because we know balanceAfter is gt balanceBefore by at least fee\r\n    uint256 paid0 = balance0After - balance0Before;\r\n    uint256 paid1 = balance1After - balance1Before;\r\n\r\n    if (paid0 > 0) {\r\n      uint8 feeProtocol0 = slot0.feeProtocol % 16;\r\n      uint256 pFees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;\r\n      if (uint128(pFees0) > 0) protocolFees.token0 += uint128(pFees0);\r\n      feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - pFees0, FixedPoint128.Q128, _liquidity);\r\n    }\r\n    if (paid1 > 0) {\r\n      uint8 feeProtocol1 = slot0.feeProtocol >> 4;\r\n      uint256 pFees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;\r\n      if (uint128(pFees1) > 0) protocolFees.token1 += uint128(pFees1);\r\n      feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - pFees1, FixedPoint128.Q128, _liquidity);\r\n    }\r\n\r\n    emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\r\n  }\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolOwnerActions\r\n  function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external override lock onlyFactoryOwner {\r\n  unchecked {\r\n    require(\r\n      (feeProtocol0 == 0 || (feeProtocol0 >= 4 && feeProtocol0 <= 10)) &&\r\n      (feeProtocol1 == 0 || (feeProtocol1 >= 4 && feeProtocol1 <= 10))\r\n    );\r\n    uint8 feeProtocolOld = slot0.feeProtocol;\r\n    slot0.feeProtocol = feeProtocol0 + (feeProtocol1 << 4);\r\n    emit SetFeeProtocol(feeProtocolOld % 16, feeProtocolOld >> 4, feeProtocol0, feeProtocol1);\r\n  }\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolOwnerActions\r\n  function collectProtocol(\r\n    address recipient,\r\n    uint128 amount0Requested,\r\n    uint128 amount1Requested\r\n  ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1) {\r\n    amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;\r\n    amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;\r\n\r\n  unchecked {\r\n    if (amount0 > 0) {\r\n      if (amount0 == protocolFees.token0) amount0--;\r\n      // ensure that the slot is not cleared, for gas savings\r\n      protocolFees.token0 -= amount0;\r\n      TransferHelper.safeTransfer(token0, recipient, amount0);\r\n    }\r\n    if (amount1 > 0) {\r\n      if (amount1 == protocolFees.token1) amount1--;\r\n      // ensure that the slot is not cleared, for gas savings\r\n      protocolFees.token1 -= amount1;\r\n      TransferHelper.safeTransfer(token1, recipient, amount1);\r\n    }\r\n  }\r\n\r\n    emit CollectProtocol(msg.sender, recipient, amount0, amount1);\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3-core/UniswapV3PoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.12;\r\n\r\nimport {IUniswapV3PoolDeployer} from './interfaces/IUniswapV3PoolDeployer.sol';\r\n\r\nimport {UniswapV3Pool} from './UniswapV3Pool.sol';\r\n\r\ncontract UniswapV3PoolDeployer is IUniswapV3PoolDeployer {\r\n  struct Parameters {\r\n    address factory;\r\n    address token0;\r\n    address token1;\r\n    uint24 fee;\r\n    int24 tickSpacing;\r\n  }\r\n\r\n  /// @inheritdoc IUniswapV3PoolDeployer\r\n  Parameters public override parameters;\r\n\r\n  /// @dev Deploys a pool with the given parameters by transiently setting the parameters storage slot and then\r\n  /// clearing it after deploying the pool.\r\n  /// @param factory The contract address of the Uniswap V3 factory\r\n  /// @param token0 The first token of the pool by address sort order\r\n  /// @param token1 The second token of the pool by address sort order\r\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n  /// @param tickSpacing The spacing between usable ticks\r\n  function deploy(\r\n    address factory,\r\n    address token0,\r\n    address token1,\r\n    uint24 fee,\r\n    int24 tickSpacing\r\n  ) internal returns (address pool) {\r\n    parameters = Parameters({factory : factory, token0 : token0, token1 : token1, fee : fee, tickSpacing : tickSpacing});\r\n    pool = address(new UniswapV3Pool{salt : keccak256(abi.encode(token0, token1, fee))}());\r\n    delete parameters;\r\n  }\r\n}\r\n"
    },
    "contracts/test/uniswapv3/UniswapV3Calee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.12;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\";\r\nimport \"../../integrations/uniswap/IUniswapV3Pool.sol\";\r\nimport \"../../integrations/uniswap/IUniswapV3MintCallback.sol\";\r\nimport \"../../integrations/uniswap/IUniswapV3SwapCallback.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract UniswapV3Callee is IUniswapV3MintCallback, IUniswapV3SwapCallback {\r\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739 + 1;\r\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\r\n\r\n  bool public noRevert;\r\n\r\n  function toggleNoRevert() external {\r\n    noRevert = !noRevert;\r\n  }\r\n\r\n  function swap(\r\n    address pool,\r\n    address recipient,\r\n    address tokenIn,\r\n    uint amount\r\n  ) external {\r\n    address token0 = IUniswapV3Pool(pool).token0();\r\n    if (noRevert) {\r\n      try IUniswapV3Pool(pool).swap(\r\n        recipient,\r\n        tokenIn == token0,\r\n        int(amount),\r\n        tokenIn == token0 ? MIN_SQRT_RATIO : MAX_SQRT_RATIO,\r\n        abi.encode(msg.sender)\r\n      ) {} catch {\r\n        console.log('Swap failed');\r\n      }\r\n    } else {\r\n      IUniswapV3Pool(pool).swap(\r\n        recipient,\r\n        tokenIn == token0,\r\n        int(amount),\r\n        tokenIn == token0 ? MIN_SQRT_RATIO : MAX_SQRT_RATIO,\r\n        abi.encode(msg.sender)\r\n      );\r\n    }\r\n  }\r\n\r\n  function mint(\r\n    address pool,\r\n    address recipient,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount\r\n  ) external {\r\n    IUniswapV3Pool(pool).mint(recipient, tickLower, tickUpper, amount, abi.encode(msg.sender));\r\n  }\r\n\r\n  function uniswapV3SwapCallback(\r\n    int256 amount0Delta,\r\n    int256 amount1Delta,\r\n    bytes calldata data\r\n  ) external override {\r\n    address sender = abi.decode(data, (address));\r\n\r\n    if (amount0Delta > 0) {\r\n      IERC20(IUniswapV3Pool(msg.sender).token0()).transferFrom(sender, msg.sender, uint(amount0Delta));\r\n    } else if (amount1Delta > 0) {\r\n      IERC20(IUniswapV3Pool(msg.sender).token1()).transferFrom(sender, msg.sender, uint(amount1Delta));\r\n    }\r\n  }\r\n\r\n  /// @notice Uniswap V3 callback fn, called back on pool.mint\r\n  function uniswapV3MintCallback(\r\n    uint amount0Owed,\r\n    uint amount1Owed,\r\n    bytes calldata data\r\n  ) external override {\r\n    address sender = abi.decode(data, (address));\r\n    if (amount0Owed > 0) {\r\n      IERC20(IUniswapV3Pool(msg.sender).token0()).transferFrom(sender, msg.sender, amount0Owed);\r\n    }\r\n    if (amount1Owed > 0) {\r\n      IERC20(IUniswapV3Pool(msg.sender).token1()).transferFrom(sender, msg.sender, amount1Owed);\r\n    }\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/tools/BoostedPoolsRebalanceResolver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n// todo remove OZ dependency\r\n//import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n//import \"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\";\r\n//import \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\";\r\n//import \"../integrations/balancer/ILinearPoolRebalancer.sol\";\r\n//import \"../integrations/balancer/ILinearPoolSimple.sol\";\r\n//import \"../integrations/balancer/IBVault.sol\";\r\n//import \"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\";\r\n//\r\n////import \"hardhat/console.sol\";\r\n//\r\n//contract BoostedPoolsRebalanceResolver is OwnableUpgradeable {\r\n//  using SafeERC20 for IERC20;\r\n//\r\n//  ///////////////////////////////////////////////////\r\n//  //             CONSTANTS\r\n//  ///////////////////////////////////////////////////\r\n//\r\n//  uint public constant TETU_DENOMINATOR = 1000;\r\n//  uint public constant DEFAULT_EXTRA_MAIN = 5;\r\n//\r\n//  ///////////////////////////////////////////////////\r\n//  //             VARIABLES\r\n//  ///////////////////////////////////////////////////\r\n//\r\n//  /// @dev 500 by default - 50% of the target\r\n//  uint public tetuNominator;\r\n//  address [] public rebalancers;\r\n//  uint public delay;\r\n//  uint public maxGas;\r\n//  uint public lastCall;\r\n//  mapping(address => bool) public operators;\r\n//  mapping(address => uint) public lastCallPerRebalancer;\r\n//\r\n//  ///////////////////////////////////////////////////\r\n//  //             INIT\r\n//  ///////////////////////////////////////////////////\r\n//\r\n//  function initialize(address[] calldata _rebalancers) public initializer {\r\n//    __Ownable_init();\r\n//    delay = 1 hours;\r\n//    maxGas = 35 gwei;\r\n//    tetuNominator = 500;\r\n//    rebalancers = _rebalancers;\r\n//  }\r\n//\r\n//  ///////////////////////////////////////////////////\r\n//  //             GOV\r\n//  ///////////////////////////////////////////////////\r\n//\r\n//  function setNominator(uint _tetuNominator) external onlyOwner {\r\n//    tetuNominator = _tetuNominator;\r\n//  }\r\n//\r\n//  function updateRebalancers(address[] calldata _rebalancers) external onlyOwner {\r\n//    rebalancers = _rebalancers;\r\n//  }\r\n//\r\n//  function withdraw(address token, uint256 amount) external onlyOwner {\r\n//    IERC20(token).safeTransfer(msg.sender, amount);\r\n//  }\r\n//\r\n//  function setDelay(uint value) external onlyOwner {\r\n//    delay = value;\r\n//  }\r\n//\r\n//  function setMaxGas(uint value) external onlyOwner {\r\n//    maxGas = value;\r\n//  }\r\n//\r\n//  function changeOperatorStatus(address operator, bool status) external onlyOwner {\r\n//    operators[operator] = status;\r\n//  }\r\n//\r\n//  ///////////////////////////////////////////////////\r\n//  //             MAIN\r\n//  ///////////////////////////////////////////////////\r\n//\r\n//  function rebalance(address balancerRebalancer, uint256 amount, bool extra) external {\r\n//    require(operators[msg.sender], \"Not an operator\");\r\n//\r\n//    ILinearPoolRebalancer rebalancer = ILinearPoolRebalancer(balancerRebalancer);\r\n//\r\n//    if (extra) {\r\n//      address pool = rebalancer.getPool();\r\n//      address token = ILinearPoolSimple(pool).getMainToken();\r\n//      require(IERC20(token).balanceOf(address(this)) >= amount, \"Not enough tokens\");\r\n//      IERC20(token).safeApprove(balancerRebalancer, amount);\r\n//      ILinearPoolRebalancer(balancerRebalancer).rebalanceWithExtraMain(address(this), amount);\r\n//    } else {\r\n//      rebalancer.rebalance(address(this));\r\n//    }\r\n//\r\n//    lastCall = block.timestamp;\r\n//    lastCallPerRebalancer[balancerRebalancer] = block.timestamp;\r\n//  }\r\n//\r\n//  function maxGasAdjusted() public view returns (uint) {\r\n//    uint _maxGas = maxGas;\r\n//\r\n//    uint diff = block.timestamp - lastCall;\r\n//    uint multiplier = diff * 100 / 1 days;\r\n//    return _maxGas + _maxGas * multiplier / 100;\r\n//  }\r\n//\r\n//  function checker() external view returns (bool canExec, bytes memory execPayload) {\r\n//    if (tx.gasprice > maxGasAdjusted()) {\r\n//      return (false, abi.encodePacked(\"Too high gas: \", StringLib._toString(tx.gasprice / 1e9)));\r\n//    }\r\n//\r\n//    uint _delay = delay;\r\n//\r\n//\r\n//    for (uint256 i = 0; i < rebalancers.length; i++) {\r\n//\r\n//      if (lastCallPerRebalancer[rebalancers[i]] + _delay > block.timestamp) {\r\n//        continue;\r\n//      }\r\n//\r\n//      ILinearPoolSimple pool = ILinearPoolSimple(ILinearPoolRebalancer(rebalancers[i]).getPool());\r\n//\r\n//      uint mainDecimals = IERC20Metadata(pool.getMainToken()).decimals();\r\n//      uint wrappedDecimals = IERC20Metadata(pool.getWrappedToken()).decimals();\r\n//\r\n//      (,uint[] memory balances,) = IBVault(pool.getVault()).getPoolTokens(pool.getPoolId());\r\n//\r\n//      uint mainBalanceAdjusted = balances[pool.getMainIndex()] * 10 ** (18 - mainDecimals);\r\n//      uint wrappedBalanceAdjusted = balances[pool.getWrappedIndex()] * 10 ** (18 - wrappedDecimals);\r\n//\r\n//      (uint lowerTarget, uint upperTarget) = pool.getTargets();\r\n//      uint middleTarget = (lowerTarget + upperTarget) / 2;\r\n//      uint tetuLowerTarget = middleTarget - (upperTarget - middleTarget) * tetuNominator / TETU_DENOMINATOR;\r\n////      uint tetuUpperTarget = middleTarget + (upperTarget - middleTarget) * tetuNominator / TETU_DENOMINATOR;\r\n//\r\n////      console.log('mainBalanceAdjusted', mainBalanceAdjusted / 1e18);\r\n////      console.log('wrappedBalanceAdjusted', wrappedBalanceAdjusted / 1e18);\r\n////      console.log('lowerTarget', lowerTarget / 1e18);\r\n////      console.log('upperTarget', upperTarget / 1e18);\r\n////      console.log('middleTarget', middleTarget / 1e18);\r\n////      console.log('tetuLowerTarget', tetuLowerTarget / 1e18);\r\n////      console.log('tetuUpperTarget', tetuUpperTarget / 1e18);\r\n//\r\n//      if (mainBalanceAdjusted + wrappedBalanceAdjusted < middleTarget) {\r\n//        // not enough liquidity, skipping the pool\r\n//        continue;\r\n//      } else {\r\n//\r\n//        if (mainBalanceAdjusted > upperTarget || mainBalanceAdjusted < lowerTarget) {\r\n//          return (true, abi.encodeCall(BoostedPoolsRebalanceResolver.rebalance, (rebalancers[i], DEFAULT_EXTRA_MAIN * 10 ** mainDecimals, false)));\r\n//        }\r\n//\r\n//        if (\r\n//          /*mainBalanceAdjusted > tetuUpperTarget ||*/\r\n//          mainBalanceAdjusted < (tetuLowerTarget / 2)\r\n//        ) {\r\n//          return (true, abi.encodeCall(BoostedPoolsRebalanceResolver.rebalance, (rebalancers[i], DEFAULT_EXTRA_MAIN * 10 ** mainDecimals, true)));\r\n//        }\r\n//      }\r\n//    }\r\n//    return (false, \"all pools in range\");\r\n//  }\r\n//}\r\n"
    },
    "contracts/tools/RebalanceDebtConfig.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\";\r\n\r\ncontract RebalanceDebtConfig {\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    struct Config {\r\n        uint lockedPercentForDelayedRebalance;\r\n        uint lockedPercentForForcedRebalance;\r\n        uint rebalanceDebtDelay;\r\n    }\r\n\r\n    IController public controller;\r\n    mapping(address => Config) public strategyConfig;\r\n    mapping(address => bool) public operators;\r\n\r\n    constructor(address controller_) {\r\n        controller = IController(controller_);\r\n    }\r\n\r\n    function setConfig(\r\n        address strategy,\r\n        uint lockedPercentForDelayedRebalance,\r\n        uint lockedPercentForForcedRebalance,\r\n        uint rebalanceDebtDelay\r\n    ) external {\r\n        require(controller.isOperator(msg.sender), \"RDC: denied\");\r\n\r\n        strategyConfig[strategy] = Config(\r\n            lockedPercentForDelayedRebalance,\r\n            lockedPercentForForcedRebalance,\r\n            rebalanceDebtDelay\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/tools/RebalanceResolver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.17;\r\n\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\";\r\nimport \"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\";\r\nimport \"../interfaces/IRebalancingV2Strategy.sol\";\r\n\r\n/// @title Gelato resolver for rebalancing v2 strategies\r\n/// @author a17\r\ncontract RebalanceResolver {\r\n  // --- CONSTANTS ---\r\n\r\n  string public constant VERSION = \"3.0.0\";\r\n\r\n  // --- VARIABLES ---\r\n\r\n  address public immutable strategy;\r\n  address public owner;\r\n  address public pendingOwner;\r\n  uint public delay;\r\n  uint public lastRebalance;\r\n  mapping(address => bool) public operators;\r\n\r\n  // --- INIT ---\r\n\r\n  constructor(address strategy_) {\r\n    owner = msg.sender;\r\n    delay = 1 minutes;\r\n    strategy = strategy_;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"!owner\");\r\n    _;\r\n  }\r\n\r\n  // --- OWNER FUNCTIONS ---\r\n\r\n  function offerOwnership(address value) external onlyOwner {\r\n    pendingOwner = value;\r\n  }\r\n\r\n  function acceptOwnership() external {\r\n    require(msg.sender == pendingOwner, \"!pendingOwner\");\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n  function setDelay(uint value) external onlyOwner {\r\n    delay = value;\r\n  }\r\n\r\n  function changeOperatorStatus(address operator, bool status) external onlyOwner {\r\n    operators[operator] = status;\r\n  }\r\n\r\n  // --- MAIN LOGIC ---\r\n\r\n  function call() external {\r\n    require(operators[msg.sender], \"!operator\");\r\n\r\n    try IRebalancingV2Strategy(strategy).rebalanceNoSwaps(true) {} catch Error(string memory _err) {\r\n      revert(string(abi.encodePacked(\"Strategy error: 0x\", _toAsciiString(strategy), \" \", _err)));\r\n    } catch (bytes memory _err) {\r\n      revert(string(abi.encodePacked(\"Strategy low-level error: 0x\", _toAsciiString(strategy), \" \", string(_err))));\r\n    }\r\n    lastRebalance = block.timestamp;\r\n  }\r\n\r\n  function checker() external view returns (bool canExec, bytes memory execPayload) {\r\n    address strategy_ = strategy;\r\n    ISplitter splitter = ISplitter(IStrategyV2(strategy_).splitter());\r\n    if (\r\n      !splitter.pausedStrategies(strategy_)\r\n      && lastRebalance + delay < block.timestamp\r\n      && IRebalancingV2Strategy(strategy_).needRebalance()\r\n    ) {\r\n      return (true, abi.encodeWithSelector(RebalanceResolver.call.selector));\r\n    }\r\n\r\n    return (false, bytes(\"Not ready to rebalance\"));\r\n  }\r\n\r\n  function _toAsciiString(address x) internal pure returns (string memory) {\r\n    bytes memory s = new bytes(40);\r\n    for (uint i = 0; i < 20; i++) {\r\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\r\n      bytes1 hi = bytes1(uint8(b) / 16);\r\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\r\n      s[2 * i] = _char(hi);\r\n      s[2 * i + 1] = _char(lo);\r\n    }\r\n    return string(s);\r\n  }\r\n\r\n  function _char(bytes1 b) internal pure returns (bytes1 c) {\r\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\r\n    else return bytes1(uint8(b) + 0x57);\r\n  }\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 150
    },
    "outputSelection": {
      "*": {
        "*": [
          "*",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "*",
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}