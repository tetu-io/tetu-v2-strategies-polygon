{
  "address": "0xb17ba411Fa350Aa24495cBfE948182f2054FddeC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "changeOperatorStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "offerOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1037842ae95704be3a8bff8b098d7d02bd2e3ca1dad47aa7668e662aba55ae6a",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0xb17ba411Fa350Aa24495cBfE948182f2054FddeC",
    "transactionIndex": 48,
    "gasUsed": "866570",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000008000000000000000000000000000000000400000000000000000000000800000000000c00000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000008000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x3ea3b5be119fb78478f2b74bfe1328c77ecbcfd226471cad7a11566933f1c63f",
    "transactionHash": "0x1037842ae95704be3a8bff8b098d7d02bd2e3ca1dad47aa7668e662aba55ae6a",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 43896219,
        "transactionHash": "0x1037842ae95704be3a8bff8b098d7d02bd2e3ca1dad47aa7668e662aba55ae6a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bbbbb8c4364ec2ce52c59d2ed3e56f307e529a94",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000005f705d93b69c00000000000000000000000000000000000000000000000003141e80c828c7bcb9000000000000000000000000000000000000000000022383927e7255e590f95a00000000000000000000000000000000000000000000000313bf106a951120b900000000000000000000000000000000000000000002238392dde2b37947955a",
        "logIndex": 158,
        "blockHash": "0x3ea3b5be119fb78478f2b74bfe1328c77ecbcfd226471cad7a11566933f1c63f"
      }
    ],
    "blockNumber": 43896219,
    "cumulativeGasUsed": "7500152",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3019e52aCb4717cDF79323592f1F897d243278F4"
  ],
  "numDeployments": 1,
  "solcInputHash": "574b45bd4588bcafa47b84395c5d31a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeOperatorStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"offerOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"a17\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Gelato resolver for rebalancing strategies\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tools/RebalanceResolver.sol\":\"RebalanceResolver\"},\"evmVersion\":\"london\",\"libraries\":{\"contracts/strategies/algebra/AlgebraDebtLib.sol:AlgebraDebtLib\":\"0x875791200a1c8c405b7187f16b6136c9102e541b\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISplitter {\\n\\n  function init(address controller_, address _asset, address _vault) external;\\n\\n  // *************** ACTIONS **************\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint256 amount) external;\\n\\n  function coverPossibleStrategyLoss(uint earned, uint lost) external;\\n\\n  function doHardWork() external;\\n\\n  function investAll() external;\\n\\n  // **************** VIEWS ***************\\n\\n  function asset() external view returns (address);\\n\\n  function vault() external view returns (address);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function isHardWorking() external view returns (bool);\\n\\n  function strategies(uint i) external view returns (address);\\n\\n  function strategiesLength() external view returns (uint);\\n\\n  function HARDWORK_DELAY() external view returns (uint);\\n\\n  function lastHardWorks(address strategy) external view returns (uint);\\n\\n  function pausedStrategies(address strategy) external view returns (bool);\\n\\n  function pauseInvesting(address strategy) external;\\n\\n  function continueInvesting(address strategy, uint apr) external;\\n\\n}\\n\",\"keccak256\":\"0x68f37a5089c98097159e7f18ef04c42d15e10e6c11602e47bc6092708c11e5fc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStrategyV2 {\\n\\n  function NAME() external view returns (string memory);\\n\\n  function strategySpecificName() external view returns (string memory);\\n\\n  function PLATFORM() external view returns (string memory);\\n\\n  function STRATEGY_VERSION() external view returns (string memory);\\n\\n  function asset() external view returns (address);\\n\\n  function splitter() external view returns (address);\\n\\n  function compoundRatio() external view returns (uint);\\n\\n  function totalAssets() external view returns (uint);\\n\\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\\n  function isReadyToHardWork() external view returns (bool);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawAllToSplitter() external returns (uint strategyLoss);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawToSplitter(uint amount) external returns (uint strategyLoss);\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// @param amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function investAll(\\n    uint amount_,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external returns (\\n    uint strategyLoss\\n  );\\n\\n  function doHardWork() external returns (uint earned, uint lost);\\n\\n  function setCompoundRatio(uint value) external;\\n\\n  /// @notice Max amount that can be deposited to the strategy (its internal capacity), see SCB-593.\\n  ///         0 means no deposit is allowed at this moment\\n  function capacity() external view returns (uint);\\n\\n  /// @notice {performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\\n  function performanceReceiver() external view returns (address);\\n\\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n  /// @dev use FEE_DENOMINATOR\\n  function performanceFee() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc7dac6097df7310b510f1027ef9c1bd3ccd6a202ca69582f68233ee798f7c312\",\"license\":\"MIT\"},\"contracts/interfaces/IRebalancingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRebalancingStrategy {\\n    function needRebalance() external view returns (bool);\\n    function rebalance() external;\\n}\\n\",\"keccak256\":\"0x3c655f8e6af631d1f5eb05d4fbb7333b6cf95a3a254a8a44b22abee53f2652dc\",\"license\":\"MIT\"},\"contracts/tools/RebalanceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\\\";\\nimport \\\"../interfaces/IRebalancingStrategy.sol\\\";\\n\\n/// @title Gelato resolver for rebalancing strategies\\n/// @author a17\\ncontract RebalanceResolver {\\n  // --- CONSTANTS ---\\n\\n  string public constant VERSION = \\\"2.0.0\\\";\\n\\n  // --- VARIABLES ---\\n\\n  address public immutable strategy;\\n  address public owner;\\n  address public pendingOwner;\\n  uint public delay;\\n  uint public lastRebalance;\\n  mapping(address => bool) public operators;\\n\\n  // --- INIT ---\\n\\n  constructor(address strategy_) {\\n    owner = msg.sender;\\n    delay = 1 minutes;\\n    strategy = strategy_;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"!owner\\\");\\n    _;\\n  }\\n\\n  // --- OWNER FUNCTIONS ---\\n\\n  function offerOwnership(address value) external onlyOwner {\\n    pendingOwner = value;\\n  }\\n\\n  function acceptOwnership() external {\\n    require(msg.sender == pendingOwner, \\\"!pendingOwner\\\");\\n    owner = pendingOwner;\\n    pendingOwner = address(0);\\n  }\\n\\n  function setDelay(uint value) external onlyOwner {\\n    delay = value;\\n  }\\n\\n  function changeOperatorStatus(address operator, bool status) external onlyOwner {\\n    operators[operator] = status;\\n  }\\n\\n  // --- MAIN LOGIC ---\\n\\n  function call() external {\\n    require(operators[msg.sender], \\\"!operator\\\");\\n\\n    try IRebalancingStrategy(strategy).rebalance() {} catch Error(string memory _err) {\\n      revert(string(abi.encodePacked(\\\"Strategy error: 0x\\\", _toAsciiString(strategy), \\\" \\\", _err)));\\n    } catch (bytes memory _err) {\\n      revert(string(abi.encodePacked(\\\"Strategy low-level error: 0x\\\", _toAsciiString(strategy), \\\" \\\", string(_err))));\\n    }\\n    lastRebalance = block.timestamp;\\n  }\\n\\n  function checker() external view returns (bool canExec, bytes memory execPayload) {\\n    address strategy_ = strategy;\\n    ISplitter splitter = ISplitter(IStrategyV2(strategy_).splitter());\\n    if (\\n      !splitter.pausedStrategies(strategy_)\\n      && lastRebalance + delay < block.timestamp\\n      && IRebalancingStrategy(strategy_).needRebalance()\\n    ) {\\n      return (true, abi.encodeWithSelector(RebalanceResolver.call.selector));\\n    }\\n\\n    return (false, bytes(\\\"Not ready to rebalance\\\"));\\n  }\\n\\n  function _toAsciiString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = _char(hi);\\n      s[2 * i + 1] = _char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function _char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n}\\n\",\"keccak256\":\"0xde12128305d8786b1b1a8d4a790bd0bfa1d16d71d040cadd728e2bb32e034c1b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ea2380380610ea283398101604081905261002f91610057565b600080546001600160a01b03191633179055603c6002556001600160a01b0316608052610087565b60006020828403121561006957600080fd5b81516001600160a01b038116811461008057600080fd5b9392505050565b608051610de46100be6000396000818161018401528181610265015281816102ff0152818161039201526104e80152610de46000f3fe608060405234801561001057600080fd5b50600436106100bf5760003560e01c80638da5cb5b1161007c5780638da5cb5b146101415780638e3e92f21461016c578063a8c62e761461017f578063cf5303cf146101a6578063e177246e146101bc578063e30c3978146101cf578063ffa1ad74146101e257600080fd5b8063106b9ca1146100c457806313e7c9d8146100e057806328b5e32b146101135780636575c4581461011d5780636a42b8f81461013057806379ba509714610139575b600080fd5b6100cd60035481565b6040519081526020015b60405180910390f35b6101036100ee366004610898565b60046020526000908152604090205460ff1681565b60405190151581526020016100d7565b61011b610213565b005b61011b61012b3660046108ca565b6103ce565b6100cd60025481565b61011b610423565b600054610154906001600160a01b031681565b6040516001600160a01b0390911681526020016100d7565b61011b61017a366004610898565b610494565b6101547f000000000000000000000000000000000000000000000000000000000000000081565b6101ae6104e0565b6040516100d7929190610953565b61011b6101ca366004610976565b6106d4565b600154610154906001600160a01b031681565b610206604051806040016040528060058152602001640322e302e360dc1b81525081565b6040516100d7919061098f565b3360009081526004602052604090205460ff166102635760405162461bcd60e51b815260206004820152600960248201526810b7b832b930ba37b960b91b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637d7c2a1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102be57600080fd5b505af19250505080156102cf575060015b6103c8576102db6109a2565b806308c379a00361035b57506102ef6109f9565b806102fa575061035d565b6103237f0000000000000000000000000000000000000000000000000000000000000000610703565b81604051602001610335929190610a83565b60408051601f198184030181529082905262461bcd60e51b825261025a9160040161098f565b505b3d808015610387576040519150601f19603f3d011682016040523d82523d6000602084013e61038c565b606091505b506103b67f0000000000000000000000000000000000000000000000000000000000000000610703565b81604051602001610335929190610add565b42600355565b6000546001600160a01b031633146103f85760405162461bcd60e51b815260040161025a90610b42565b6001600160a01b03919091166000908152600460205260409020805460ff1916911515919091179055565b6001546001600160a01b0316331461046d5760405162461bcd60e51b815260206004820152600d60248201526c10b832b73234b733a7bbb732b960991b604482015260640161025a565b60018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b031633146104be5760405162461bcd60e51b815260040161025a90610b42565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000606060007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b0316633cd8045e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d9190610b62565b604051630150908f60e31b81526001600160a01b03848116600483015291925090821690630a84847890602401602060405180830381865afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190610b7f565b1580156105f65750426002546003546105f49190610bb2565b105b801561065f5750816001600160a01b031663ffb86c6a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190610b7f565b156106995750506040805160048152602481019091526020810180516001600160e01b03166328b5e32b60e01b1790526001939092509050565b6000604051806040016040528060168152602001754e6f7420726561647920746f20726562616c616e636560501b8152509350935050509091565b6000546001600160a01b031633146106fe5760405162461bcd60e51b815260040161025a90610b42565b600255565b60408051602880825260608281019093526000919060208201818036833701905050905060005b6014811015610843576000610740826013610bcb565b61074b906008610bde565b610756906002610cd9565b610769906001600160a01b038716610cfb565b60f81b9050600060108260f81c6107809190610d0f565b60f81b905060008160f81c60106107979190610d31565b8360f81c6107a59190610d4d565b60f81b90506107b38261084a565b856107bf866002610bde565b815181106107cf576107cf610d66565b60200101906001600160f81b031916908160001a9053506107ef8161084a565b856107fb866002610bde565b610806906001610bb2565b8151811061081657610816610d66565b60200101906001600160f81b031916908160001a905350505050808061083b90610d7c565b91505061072a565b5092915050565b6000600a60f883901c10156108715761086860f883901c6030610d95565b60f81b92915050565b61086860f883901c6057610d95565b6001600160a01b038116811461089557600080fd5b50565b6000602082840312156108aa57600080fd5b81356108b581610880565b9392505050565b801515811461089557600080fd5b600080604083850312156108dd57600080fd5b82356108e881610880565b915060208301356108f8816108bc565b809150509250929050565b60005b8381101561091e578181015183820152602001610906565b50506000910152565b6000815180845261093f816020860160208601610903565b601f01601f19169290920160200192915050565b821515815260406020820152600061096e6040830184610927565b949350505050565b60006020828403121561098857600080fd5b5035919050565b6020815260006108b56020830184610927565b600060033d11156109bb5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff811182821017156109f257634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d1015610a075790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715610a3757505050505090565b8285019150815181811115610a4f5750505050505090565b843d8701016020828501011115610a695750505050505090565b610a78602082860101876109be565b509095945050505050565b710a6e8e4c2e8cacef240cae4e4dee4744060f60731b815260008351610ab0816012850160208801610903565b600160fd1b6012918401918201528351610ad1816013840160208801610903565b01601301949350505050565b7f5374726174656779206c6f772d6c6576656c206572726f723a20307800000000815260008351610b1581601c850160208801610903565b600160fd1b601c918401918201528351610b3681601d840160208801610903565b01601d01949350505050565b60208082526006908201526510b7bbb732b960d11b604082015260600190565b600060208284031215610b7457600080fd5b81516108b581610880565b600060208284031215610b9157600080fd5b81516108b5816108bc565b634e487b7160e01b600052601160045260246000fd5b80820180821115610bc557610bc5610b9c565b92915050565b81810381811115610bc557610bc5610b9c565b8082028115828204841417610bc557610bc5610b9c565b600181815b80851115610c30578160001904821115610c1657610c16610b9c565b80851615610c2357918102915b93841c9390800290610bfa565b509250929050565b600082610c4757506001610bc5565b81610c5457506000610bc5565b8160018114610c6a5760028114610c7457610c90565b6001915050610bc5565b60ff841115610c8557610c85610b9c565b50506001821b610bc5565b5060208310610133831016604e8410600b8410161715610cb3575081810a610bc5565b610cbd8383610bf5565b8060001904821115610cd157610cd1610b9c565b029392505050565b60006108b58383610c38565b634e487b7160e01b600052601260045260246000fd5b600082610d0a57610d0a610ce5565b500490565b600060ff831680610d2257610d22610ce5565b8060ff84160491505092915050565b60ff818116838216029081169081811461084357610843610b9c565b60ff8281168282160390811115610bc557610bc5610b9c565b634e487b7160e01b600052603260045260246000fd5b600060018201610d8e57610d8e610b9c565b5060010190565b60ff8181168382160190811115610bc557610bc5610b9c56fea2646970667358221220ed904407eacc9d3fdb04ca1b6f4789fe33ccc2ff0d1f28be8957a1893c2a3cba64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100bf5760003560e01c80638da5cb5b1161007c5780638da5cb5b146101415780638e3e92f21461016c578063a8c62e761461017f578063cf5303cf146101a6578063e177246e146101bc578063e30c3978146101cf578063ffa1ad74146101e257600080fd5b8063106b9ca1146100c457806313e7c9d8146100e057806328b5e32b146101135780636575c4581461011d5780636a42b8f81461013057806379ba509714610139575b600080fd5b6100cd60035481565b6040519081526020015b60405180910390f35b6101036100ee366004610898565b60046020526000908152604090205460ff1681565b60405190151581526020016100d7565b61011b610213565b005b61011b61012b3660046108ca565b6103ce565b6100cd60025481565b61011b610423565b600054610154906001600160a01b031681565b6040516001600160a01b0390911681526020016100d7565b61011b61017a366004610898565b610494565b6101547f000000000000000000000000000000000000000000000000000000000000000081565b6101ae6104e0565b6040516100d7929190610953565b61011b6101ca366004610976565b6106d4565b600154610154906001600160a01b031681565b610206604051806040016040528060058152602001640322e302e360dc1b81525081565b6040516100d7919061098f565b3360009081526004602052604090205460ff166102635760405162461bcd60e51b815260206004820152600960248201526810b7b832b930ba37b960b91b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637d7c2a1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102be57600080fd5b505af19250505080156102cf575060015b6103c8576102db6109a2565b806308c379a00361035b57506102ef6109f9565b806102fa575061035d565b6103237f0000000000000000000000000000000000000000000000000000000000000000610703565b81604051602001610335929190610a83565b60408051601f198184030181529082905262461bcd60e51b825261025a9160040161098f565b505b3d808015610387576040519150601f19603f3d011682016040523d82523d6000602084013e61038c565b606091505b506103b67f0000000000000000000000000000000000000000000000000000000000000000610703565b81604051602001610335929190610add565b42600355565b6000546001600160a01b031633146103f85760405162461bcd60e51b815260040161025a90610b42565b6001600160a01b03919091166000908152600460205260409020805460ff1916911515919091179055565b6001546001600160a01b0316331461046d5760405162461bcd60e51b815260206004820152600d60248201526c10b832b73234b733a7bbb732b960991b604482015260640161025a565b60018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b031633146104be5760405162461bcd60e51b815260040161025a90610b42565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000606060007f000000000000000000000000000000000000000000000000000000000000000090506000816001600160a01b0316633cd8045e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d9190610b62565b604051630150908f60e31b81526001600160a01b03848116600483015291925090821690630a84847890602401602060405180830381865afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190610b7f565b1580156105f65750426002546003546105f49190610bb2565b105b801561065f5750816001600160a01b031663ffb86c6a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190610b7f565b156106995750506040805160048152602481019091526020810180516001600160e01b03166328b5e32b60e01b1790526001939092509050565b6000604051806040016040528060168152602001754e6f7420726561647920746f20726562616c616e636560501b8152509350935050509091565b6000546001600160a01b031633146106fe5760405162461bcd60e51b815260040161025a90610b42565b600255565b60408051602880825260608281019093526000919060208201818036833701905050905060005b6014811015610843576000610740826013610bcb565b61074b906008610bde565b610756906002610cd9565b610769906001600160a01b038716610cfb565b60f81b9050600060108260f81c6107809190610d0f565b60f81b905060008160f81c60106107979190610d31565b8360f81c6107a59190610d4d565b60f81b90506107b38261084a565b856107bf866002610bde565b815181106107cf576107cf610d66565b60200101906001600160f81b031916908160001a9053506107ef8161084a565b856107fb866002610bde565b610806906001610bb2565b8151811061081657610816610d66565b60200101906001600160f81b031916908160001a905350505050808061083b90610d7c565b91505061072a565b5092915050565b6000600a60f883901c10156108715761086860f883901c6030610d95565b60f81b92915050565b61086860f883901c6057610d95565b6001600160a01b038116811461089557600080fd5b50565b6000602082840312156108aa57600080fd5b81356108b581610880565b9392505050565b801515811461089557600080fd5b600080604083850312156108dd57600080fd5b82356108e881610880565b915060208301356108f8816108bc565b809150509250929050565b60005b8381101561091e578181015183820152602001610906565b50506000910152565b6000815180845261093f816020860160208601610903565b601f01601f19169290920160200192915050565b821515815260406020820152600061096e6040830184610927565b949350505050565b60006020828403121561098857600080fd5b5035919050565b6020815260006108b56020830184610927565b600060033d11156109bb5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff811182821017156109f257634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d1015610a075790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715610a3757505050505090565b8285019150815181811115610a4f5750505050505090565b843d8701016020828501011115610a695750505050505090565b610a78602082860101876109be565b509095945050505050565b710a6e8e4c2e8cacef240cae4e4dee4744060f60731b815260008351610ab0816012850160208801610903565b600160fd1b6012918401918201528351610ad1816013840160208801610903565b01601301949350505050565b7f5374726174656779206c6f772d6c6576656c206572726f723a20307800000000815260008351610b1581601c850160208801610903565b600160fd1b601c918401918201528351610b3681601d840160208801610903565b01601d01949350505050565b60208082526006908201526510b7bbb732b960d11b604082015260600190565b600060208284031215610b7457600080fd5b81516108b581610880565b600060208284031215610b9157600080fd5b81516108b5816108bc565b634e487b7160e01b600052601160045260246000fd5b80820180821115610bc557610bc5610b9c565b92915050565b81810381811115610bc557610bc5610b9c565b8082028115828204841417610bc557610bc5610b9c565b600181815b80851115610c30578160001904821115610c1657610c16610b9c565b80851615610c2357918102915b93841c9390800290610bfa565b509250929050565b600082610c4757506001610bc5565b81610c5457506000610bc5565b8160018114610c6a5760028114610c7457610c90565b6001915050610bc5565b60ff841115610c8557610c85610b9c565b50506001821b610bc5565b5060208310610133831016604e8410600b8410161715610cb3575081810a610bc5565b610cbd8383610bf5565b8060001904821115610cd157610cd1610b9c565b029392505050565b60006108b58383610c38565b634e487b7160e01b600052601260045260246000fd5b600082610d0a57610d0a610ce5565b500490565b600060ff831680610d2257610d22610ce5565b8060ff84160491505092915050565b60ff818116838216029081169081811461084357610843610b9c565b60ff8281168282160390811115610bc557610bc5610b9c565b634e487b7160e01b600052603260045260246000fd5b600060018201610d8e57610d8e610b9c565b5060010190565b60ff8181168382160190811115610bc557610bc5610b9c56fea2646970667358221220ed904407eacc9d3fdb04ca1b6f4789fe33ccc2ff0d1f28be8957a1893c2a3cba64736f6c63430008110033",
  "devdoc": {
    "author": "a17",
    "kind": "dev",
    "methods": {},
    "title": "Gelato resolver for rebalancing strategies",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 122488,
        "contract": "contracts/tools/RebalanceResolver.sol:RebalanceResolver",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 122490,
        "contract": "contracts/tools/RebalanceResolver.sol:RebalanceResolver",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 122492,
        "contract": "contracts/tools/RebalanceResolver.sol:RebalanceResolver",
        "label": "delay",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 122494,
        "contract": "contracts/tools/RebalanceResolver.sol:RebalanceResolver",
        "label": "lastRebalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 122498,
        "contract": "contracts/tools/RebalanceResolver.sol:RebalanceResolver",
        "label": "operators",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}