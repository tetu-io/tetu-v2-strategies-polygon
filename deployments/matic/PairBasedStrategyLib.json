{
  "address": "0xd23C0DA34c5de74b4B9cC95F2cE8bE03aa6661cf",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fuseStatus",
          "type": "uint256"
        }
      ],
      "name": "FuseStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[4]",
          "name": "newFuseThresholds",
          "type": "uint256[4]"
        }
      ],
      "name": "NewFuseThresholds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToSwap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expectedAmountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetOut",
          "type": "address"
        }
      ],
      "name": "SwapByAgg",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ENTRY_TO_POOL_IS_ALLOWED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUSE_IDX_LOWER_LIMIT_OFF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUSE_IDX_LOWER_LIMIT_ON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUSE_IDX_UPPER_LIMIT_OFF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUSE_IDX_UPPER_LIMIT_ON",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAP_AMOUNT_TO_SWAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_ADDR_DEFAULT_STATE_POOL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_ADDR_DEFAULT_STATE_TOKEN_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_ADDR_DEFAULT_STATE_TOKEN_B",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_FUSE_STATUS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_RESERVED_0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_RESERVED_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_RESERVED_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_RESERVED_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_RESERVED_4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_THRESHOLD_0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_THRESHOLD_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_THRESHOLD_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_THRESHOLD_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_TICK_DEFAULT_STATE_LOWER_TICK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_TICK_DEFAULT_STATE_TICK_SPACING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IDX_TICK_DEFAULT_STATE_UPPER_TICK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCORRECT_ASSET",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCORRECT_REBALANCE_TICK_RANGE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCORRECT_TICK_RANGE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNKNOWN_SWAP_ROUTER",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolPriceDecimals",
          "type": "uint256"
        }
      ],
      "name": "getPoolPriceAdjustment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "adjustment",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c0a27819bb414819e2220460f1978d92a805312eb105d7058e296b51b217465",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0xd23C0DA34c5de74b4B9cC95F2cE8bE03aa6661cf",
    "transactionIndex": 133,
    "gasUsed": "4082269",
    "logsBloom": "0x
    "blockHash": "0xcfb1f210f910203a41d923a16b92183be313b5080690520a95ca06ee4d8e0afa",
    "transactionHash": "0x5c0a27819bb414819e2220460f1978d92a805312eb105d7058e296b51b217465",
    "logs": [
      {
        "transactionIndex": 133,
        "blockNumber": 50549042,
        "transactionHash": "0x5c0a27819bb414819e2220460f1978d92a805312eb105d7058e296b51b217465",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bbbbb8c4364ec2ce52c59d2ed3e56f307e529a94",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002d52819f121240000000000000000000000000000000000000000000000000e783df05f155e0d4f0000000000000000000000000000000000000000000002f1a9dd427ee07484c000000000000000000000000000000000000000000000000e7568c845243ce94f0000000000000000000000000000000000000000000002f1acb26a98d195a8c0",
        "logIndex": 166,
        "blockHash": "0xcfb1f210f910203a41d923a16b92183be313b5080690520a95ca06ee4d8e0afa"
      }
    ],
    "blockNumber": 50549042,
    "cumulativeGasUsed": "8559623",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "187072fadd69754f715ed0962b3f40f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fuseStatus\",\"type\":\"uint256\"}],\"name\":\"FuseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"newFuseThresholds\",\"type\":\"uint256[4]\"}],\"name\":\"NewFuseThresholds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"}],\"name\":\"SwapByAgg\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENTRY_TO_POOL_IS_ALLOWED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUSE_IDX_LOWER_LIMIT_OFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUSE_IDX_LOWER_LIMIT_ON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUSE_IDX_UPPER_LIMIT_OFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUSE_IDX_UPPER_LIMIT_ON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAP_AMOUNT_TO_SWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_ADDR_DEFAULT_STATE_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_ADDR_DEFAULT_STATE_TOKEN_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_ADDR_DEFAULT_STATE_TOKEN_B\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_FUSE_STATUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_RESERVED_0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_RESERVED_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_RESERVED_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_RESERVED_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_RESERVED_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_THRESHOLD_0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_THRESHOLD_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_THRESHOLD_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_THRESHOLD_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_TICK_DEFAULT_STATE_LOWER_TICK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_TICK_DEFAULT_STATE_TICK_SPACING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDX_TICK_DEFAULT_STATE_UPPER_TICK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCORRECT_ASSET\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCORRECT_REBALANCE_TICK_RANGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCORRECT_TICK_RANGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNKNOWN_SWAP_ROUTER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolPriceDecimals\",\"type\":\"uint256\"}],\"name\":\"getPoolPriceAdjustment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The library contains quoteWithdrawStep/withdrawStep-related logic\",\"kind\":\"dev\",\"methods\":{\"quoteWithdrawStep(address[2],address[],uint256[],uint256[],uint256,uint256[2])\":{\"params\":{\"amountsFromPool\":\"Amounts of {tokens} that will be received from the pool before calling withdraw\",\"converterLiquidator_\":\"[TetuConverter, TetuLiquidator]\",\"entryDataValues\":\"[propNotUnderlying18, entryDataParam]     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                           The leftovers should be swapped to get following result proportions of the assets:                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18                            Value type(uint).max means that the proportions should be read from the pool.     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\",\"liquidationThresholds\":\"Liquidation thresholds for the {tokens}\",\"tokens\":\"Tokens used by depositor (length == 2: underlying and not-underlying)\"},\"returns\":{\"amountToSwap\":\"Amount that will be swapped on the next swap. 0 - no swap                      This amount is NOT reduced on {GAP_AMOUNT_TO_SWAP}, it should be reduced after the call if necessary.\",\"tokenToSwap\":\"Address of the token that will be swapped on the next swap. 0 - no swap\"}},\"withdrawStep(address[2],address[],uint256[],address,uint256,address,bytes,bool,uint256,uint256[2])\":{\"params\":{\"aggregator_\":\"Aggregator that should be used for the next swap. 0 - no swap\",\"amountToSwap_\":\"Amount that will be swapped on the next swap. 0 - no swap\",\"converterLiquidator_\":\"[TetuConverter, TetuLiquidator]\",\"entryDataValues\":\"[propNotUnderlying18, entryDataParam]     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                           The leftovers should be swapped to get following result proportions of the assets:                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\",\"liquidationThresholds\":\"Liquidation thresholds for the {tokens}\",\"planKind\":\"One of IterationPlanLib.PLAN_XXX\",\"swapData_\":\"Swap data to be passed to the aggregator on the next swap.                  Swap data contains swap-route, amount and all other required info for the swap.                  Swap data should be prepared on-chain on the base of data received by {quoteWithdrawStep}\",\"tokenToSwap_\":\"Address of the token that will be swapped on the next swap. 0 - no swap\",\"tokens\":\"Tokens used by depositor (length == 2: underlying and not-underlying)\",\"useLiquidator_\":\"Use liquidator instead of aggregator.                       Aggregator swaps amount reduced on {GAP_AMOUNT_TO_SWAP}.                       Liquidator doesn't use {GAP_AMOUNT_TO_SWAP}.                       It's allowed to pass liquidator address in {aggregator_} and set {useLiquidator_} to false -                       the liquidator will be used in same way as aggregator in this case.\"},\"returns\":{\"completed\":\"All debts were closed, leftovers were swapped to the required proportions\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ENTRY_TO_POOL_IS_ALLOWED()\":{\"notice\":\"Enter to the pool at the end of withdrawByAggStep\"},\"ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED()\":{\"notice\":\"Enter to the pool at the end of withdrawByAggStep only if full withdrawing has been completed\"},\"FUSE_IDX_LOWER_LIMIT_ON()\":{\"notice\":\"Fuse thresholds are set as array: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]         If the price falls below LOWER_LIMIT_ON the fuse is turned ON         When the prices raises back and reaches LOWER_LIMIT_OFF, the fuse is turned OFF         In the same way, if the price raises above UPPER_LIMIT_ON the fuse is turned ON         When the prices falls back and reaches UPPER_LIMIT_OFF, the fuse is turned OFF         Example: [0.9, 0.92, 1.08, 1.1]         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\"},\"GAP_AMOUNT_TO_SWAP()\":{\"notice\":\"A gap to reduce AmountToSwap calculated inside quoteWithdrawByAgg, [0...100_000]\"},\"quoteWithdrawStep(address[2],address[],uint256[],uint256[],uint256,uint256[2])\":{\"notice\":\"Get info for the swap that will be made on the next call of {withdrawStep}\"},\"withdrawStep(address[2],address[],uint256[],address,uint256,address,bytes,bool,uint256,uint256[2])\":{\"notice\":\"Make withdraw step with 0 or 1 swap only. The step can make one of the following actions:         1) repay direct debt 2) repay reverse debt 3) final swap leftovers of not-underlying asset\"}},\"notice\":\"Library for the UniV3-like strategies with two tokens in the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/pair/PairBasedStrategyLib.sol\":\"PairBasedStrategyLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0xc2ef11f0141e7e1a5df255be2e1552044deed377349cb886908f3f10ded57fa8\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n\\n  // --- DEPENDENCY ADDRESSES\\n  function governance() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function liquidator() external view returns (address);\\n\\n  function forwarder() external view returns (address);\\n\\n  function investFund() external view returns (address);\\n\\n  function veDistributor() external view returns (address);\\n\\n  function platformVoter() external view returns (address);\\n\\n  // --- VAULTS\\n\\n  function vaults(uint id) external view returns (address);\\n\\n  function vaultsList() external view returns (address[] memory);\\n\\n  function vaultsListLength() external view returns (uint);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  // --- restrictions\\n\\n  function isOperator(address _adr) external view returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0x86716b8a4775605c31b8bb9f90f8f4a18b709ff4435182f3a148803368060a8c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IForwarder {\\n\\n  function tetu() external view returns (address);\\n  function tetuThreshold() external view returns (uint);\\n\\n  function tokenPerDestinationLength(address destination) external view returns (uint);\\n\\n  function tokenPerDestinationAt(address destination, uint i) external view returns (address);\\n\\n  function amountPerDestination(address token, address destination) external view returns (uint amount);\\n\\n  function registerIncome(\\n    address[] memory tokens,\\n    uint[] memory amounts,\\n    address vault,\\n    bool isDistribute\\n  ) external;\\n\\n  function distributeAll(address destination) external;\\n\\n  function distribute(address token) external;\\n\\n  function setInvestFundRatio(uint value) external;\\n\\n  function setGaugesRatio(uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x687c497fc034e8d64bca403bac1bf4cd7bd1f107df414c2657325c1b3ab92822\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISplitter {\\n\\n  function init(address controller_, address _asset, address _vault) external;\\n\\n  // *************** ACTIONS **************\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint256 amount) external;\\n\\n  function coverPossibleStrategyLoss(uint earned, uint lost) external;\\n\\n  function doHardWork() external;\\n\\n  function investAll() external;\\n\\n  // **************** VIEWS ***************\\n\\n  function asset() external view returns (address);\\n\\n  function vault() external view returns (address);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function isHardWorking() external view returns (bool);\\n\\n  function strategies(uint i) external view returns (address);\\n\\n  function strategiesLength() external view returns (uint);\\n\\n  function HARDWORK_DELAY() external view returns (uint);\\n\\n  function lastHardWorks(address strategy) external view returns (uint);\\n\\n  function pausedStrategies(address strategy) external view returns (bool);\\n\\n  function pauseInvesting(address strategy) external;\\n\\n  function continueInvesting(address strategy, uint apr) external;\\n\\n  function rebalance(uint percent, uint lossTolerance) external;\\n\\n  function getStrategyCapacity(address strategy) external view returns (uint capacity);\\n\\n}\\n\",\"keccak256\":\"0x266c43734e3da96d9e5dcdd0f19c6dbd58fdc377c9cd361cb12da3e309fbb4ec\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStrategyV2 {\\n\\n  function NAME() external view returns (string memory);\\n\\n  function strategySpecificName() external view returns (string memory);\\n\\n  function PLATFORM() external view returns (string memory);\\n\\n  function STRATEGY_VERSION() external view returns (string memory);\\n\\n  function asset() external view returns (address);\\n\\n  function splitter() external view returns (address);\\n\\n  function compoundRatio() external view returns (uint);\\n\\n  function totalAssets() external view returns (uint);\\n\\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\\n  function isReadyToHardWork() external view returns (bool);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawAllToSplitter() external returns (uint strategyLoss);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawToSplitter(uint amount) external returns (uint strategyLoss);\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// @param amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function investAll(\\n    uint amount_,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external returns (\\n    uint strategyLoss\\n  );\\n\\n  function doHardWork() external returns (uint earned, uint lost);\\n\\n  function setCompoundRatio(uint value) external;\\n\\n  /// @notice Max amount that can be deposited to the strategy (its internal capacity), see SCB-593.\\n  ///         0 means no deposit is allowed at this moment\\n  function capacity() external view returns (uint);\\n\\n  /// @notice {performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\\n  function performanceReceiver() external view returns (address);\\n\\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n  /// @dev use FEE_DENOMINATOR\\n  function performanceFee() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc7dac6097df7310b510f1027ef9c1bd3ccd6a202ca69582f68233ee798f7c312\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IStrategyV2.sol\\\";\\n\\ninterface IStrategyV3 is IStrategyV2 {\\n  struct BaseState {\\n    /// @dev Underlying asset\\n    address asset;\\n\\n    /// @dev Linked splitter\\n    address splitter;\\n\\n    /// @notice {performanceFee}% of total profit is sent to {performanceReceiver} before compounding\\n    /// @dev governance by default\\n    address performanceReceiver;\\n\\n    /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n    /// @dev {DEFAULT_PERFORMANCE_FEE} by default, FEE_DENOMINATOR is used\\n    uint performanceFee;\\n\\n    /// @notice Ratio to split performance fee on toPerf + toInsurance, [0..100_000]\\n    ///         100_000 - send full amount toPerf, 0 - send full amount toInsurance.\\n    uint performanceFeeRatio;\\n\\n    /// @dev Percent of profit for autocompound inside this strategy.\\n    uint compoundRatio;\\n\\n    /// @dev Represent specific name for this strategy. Should include short strategy name and used assets. Uniq across the vault.\\n    string strategySpecificName;\\n  }\\n}\\n\",\"keccak256\":\"0xe8a0179a82c40ba0c372486c5ebcc7df6431216c8c0d91cc408fb8f881e72f70\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0xd5fe6f3ab750cc2d23f573597db5607c701e74c39e13c20c07a921a26c6d5012\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVaultInsurance.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ISplitter.sol\\\";\\n\\ninterface ITetuVaultV2 {\\n\\n  function splitter() external view returns (ISplitter);\\n\\n  function insurance() external view returns (IVaultInsurance);\\n\\n  function depositFee() external view returns (uint);\\n\\n  function withdrawFee() external view returns (uint);\\n\\n  function init(\\n    address controller_,\\n    IERC20 _asset,\\n    string memory _name,\\n    string memory _symbol,\\n    address _gauge,\\n    uint _buffer\\n  ) external;\\n\\n  function setSplitter(address _splitter) external;\\n\\n  function coverLoss(uint amount) external;\\n\\n  function initInsurance(IVaultInsurance _insurance) external;\\n\\n}\\n\",\"keccak256\":\"0x9e77a10b32a52f826d28d17c420f776fd289e5e4f925ec87f7177a1ce224a412\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IVaultInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVaultInsurance {\\n\\n  function init(address _vault, address _asset) external;\\n\\n  function vault() external view returns (address);\\n\\n  function asset() external view returns (address);\\n\\n  function transferToVault(uint amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6461572763b1f6decec1dee9d2ffe8ca152369bdc68255ec083cb3da3ce507a1\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\",\"keccak256\":\"0x2c5be0f4a60126b08e20f40586958ec1b76a27b69406c4b0db19e9dc6f771cfc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\nimport \\\"../interfaces/IStrategyV3.sol\\\";\\n\\nlibrary StrategyLib2 {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Denominator for fee calculation.\\n  uint internal constant FEE_DENOMINATOR = 100_000;\\n  /// @notice 10% of total profit is sent to {performanceReceiver} before compounding\\n  uint internal constant DEFAULT_PERFORMANCE_FEE = 10_000;\\n  address internal constant DEFAULT_PERF_FEE_RECEIVER = 0x9Cc199D4353b5FB3e6C8EEBC99f5139e0d8eA06b;\\n  /// @dev Denominator for compound ratio\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant WRONG_VALUE = \\\"SB: Wrong value\\\";\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CompoundRatioChanged(uint oldValue, uint newValue);\\n  event StrategySpecificNameChanged(string name);\\n  event EmergencyExit(address sender, uint amount);\\n  event ManualClaim(address sender);\\n  event InvestAll(uint balance);\\n  event WithdrawAllToSplitter(uint amount);\\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\\n  event PerformanceFeeChanged(uint fee, address receiver, uint ratio);\\n\\n  // *************************************************************\\n  //                        CHECKS AND EMITS\\n  // *************************************************************\\n\\n  function _checkManualClaim(address controller) external {\\n    onlyOperators(controller);\\n    emit ManualClaim(msg.sender);\\n  }\\n\\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\\n    onlySplitter(splitter);\\n    assetBalance = IERC20(asset).balanceOf(address(this));\\n    emit InvestAll(assetBalance);\\n  }\\n\\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_, uint ratio_) internal {\\n    onlyGovernance(controller);\\n    require(fee_ <= FEE_DENOMINATOR, TOO_HIGH);\\n    require(receiver_ != address(0), WRONG_VALUE);\\n    require(ratio_ <= FEE_DENOMINATOR, TOO_HIGH);\\n    emit PerformanceFeeChanged(fee_, receiver_, ratio_);\\n  }\\n\\n  // *************************************************************\\n  //                        SETTERS\\n  // *************************************************************\\n\\n  function _changeCompoundRatio(IStrategyV3.BaseState storage baseState, address controller, uint newValue) external {\\n    onlyPlatformVoter(controller);\\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\\n\\n    uint oldValue = baseState.compoundRatio;\\n    baseState.compoundRatio = newValue;\\n\\n    emit CompoundRatioChanged(oldValue, newValue);\\n  }\\n\\n  function _changeStrategySpecificName(IStrategyV3.BaseState storage baseState, string calldata newName) external {\\n    baseState.strategySpecificName = newName;\\n    emit StrategySpecificNameChanged(newName);\\n  }\\n\\n  // *************************************************************\\n  //                     RESTRICTIONS\\n  // *************************************************************\\n\\n  /// @dev Restrict access only for operators\\n  function onlyOperators(address controller) public view {\\n    require(IController(controller).isOperator(msg.sender), DENIED);\\n  }\\n\\n  /// @dev Restrict access only for governance\\n  function onlyGovernance(address controller) public view {\\n    require(IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for platform voter\\n  function onlyPlatformVoter(address controller) public view {\\n    require(IController(controller).platformVoter() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for splitter\\n  function onlySplitter(address splitter) public view {\\n    require(splitter == msg.sender, DENIED);\\n  }\\n\\n  // *************************************************************\\n  //                       HELPERS\\n  // *************************************************************\\n\\n  function init(\\n    IStrategyV3.BaseState storage baseState,\\n    address controller_,\\n    address splitter_\\n  ) external {\\n    baseState.asset = ISplitter(splitter_).asset();\\n    baseState.splitter = splitter_;\\n    baseState.performanceReceiver = DEFAULT_PERF_FEE_RECEIVER;\\n    baseState.performanceFee = DEFAULT_PERFORMANCE_FEE;\\n\\n    require(IControllable(splitter_).isController(controller_), WRONG_VALUE);\\n  }\\n\\n  function setupPerformanceFee(IStrategyV3.BaseState storage baseState, uint fee_, address receiver_, uint ratio_, address controller_) external {\\n    _checkSetupPerformanceFee(controller_, fee_, receiver_, ratio_);\\n    baseState.performanceFee = fee_;\\n    baseState.performanceReceiver = receiver_;\\n    baseState.performanceFeeRatio = ratio_;\\n  }\\n\\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\\n  ///         Revert if the amount is different from expected too much (high price impact)\\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\\n  /// @param assetPrice Price of the asset, decimals 18\\n  /// @return balance Current asset balance of the strategy\\n  function checkWithdrawImpact(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) public view returns (uint balance) {\\n    balance = IERC20(_asset).balanceOf(address(this));\\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\\n\\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\\n    }\\n  }\\n\\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\\n    onlyOperators(controller);\\n\\n    uint balance = IERC20(asset).balanceOf(address(this));\\n    IERC20(asset).safeTransfer(splitter, balance);\\n    emit EmergencyExit(msg.sender, balance);\\n  }\\n\\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\\n    onlySplitter(splitter);\\n    return IERC20(asset).balanceOf(address(this));\\n  }\\n\\n  function _withdrawAllToSplitterPostActions(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) external {\\n    uint balance = checkWithdrawImpact(\\n      _asset,\\n      balanceBefore,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n\\n    if (balance != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, balance);\\n    }\\n    emit WithdrawAllToSplitter(balance);\\n  }\\n\\n  function _withdrawToSplitterPostActions(\\n    uint amount,\\n    uint balance,\\n    address _asset,\\n    address _splitter\\n  ) external {\\n    uint amountAdjusted = Math.min(amount, balance);\\n    if (amountAdjusted != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\\n    }\\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\\n  }\\n}\\n\",\"keccak256\":\"0x02ca53b015408479ff049ce8a321a85f238e6b0a2d57f899f21dc9d879fb05cf\",\"license\":\"BUSL-1.1\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Keep and provide addresses of all application contracts\\ninterface IConverterController {\\n  function governance() external view returns (address);\\n\\n  // ********************* Health factor explanation  ****************\\n  // For example, a landing platform has: liquidity threshold = 0.85, LTV=0.8, LTV / LT = 1.0625\\n  // For collateral $100 we can borrow $80. A liquidation happens if the cost of collateral will reduce below $85.\\n  // We set min-health-factor = 1.1, target-health-factor = 1.3\\n  // For collateral 100 we will borrow 100/1.3 = 76.92\\n  //\\n  // Collateral value   100        77            assume that collateral value is decreased at 100/77=1.3 times\\n  // Collateral * LT    85         65.45\\n  // Borrow value       65.38      65.38         but borrow value is the same as before\\n  // Health factor      1.3        1.001         liquidation almost happens here (!)\\n  //\\n  /// So, if we have target factor 1.3, it means, that if collateral amount will decreases at 1.3 times\\n  // and the borrow value won't change at the same time, the liquidation happens at that point.\\n  // Min health factor marks the point at which a rebalancing must be made asap.\\n  // *****************************************************************\\n\\n  //#region ----------------------------------------------------- Configuration\\n\\n  /// @notice min allowed health factor with decimals 2, must be >= 1e2\\n  function minHealthFactor2() external view returns (uint16);\\n  function setMinHealthFactor2(uint16 value_) external;\\n\\n  /// @notice target health factor with decimals 2\\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\\n  ///      or additional borrow and restore the health factor to the given target value\\n  function targetHealthFactor2() external view returns (uint16);\\n  function setTargetHealthFactor2(uint16 value_) external;\\n\\n  /// @notice max allowed health factor with decimals 2\\n  /// @dev For future versions, currently max health factor is not used\\n  function maxHealthFactor2() external view returns (uint16);\\n  /// @dev For future versions, currently max health factor is not used\\n  function setMaxHealthFactor2(uint16 value_) external;\\n\\n  /// @notice get current value of blocks per day. The value is set manually at first and can be auto-updated later\\n  function blocksPerDay() external view returns (uint);\\n  /// @notice set value of blocks per day manually and enable/disable auto update of this value\\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external;\\n  /// @notice Check if it's time to call updateBlocksPerDay()\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view returns (bool);\\n  /// @notice Recalculate blocksPerDay value\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function updateBlocksPerDay(uint periodInSeconds_) external;\\n\\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\\n  function paused() external view returns (bool);\\n\\n  /// @notice the given user is whitelisted and is allowed to make borrow/swap using TetuConverter\\n  function isWhitelisted(address user_) external view returns (bool);\\n\\n  /// @notice The size of the gap by which the debt should be increased upon repayment\\n  ///         Such gaps are required by AAVE pool adapters to workaround dust tokens problem\\n  ///         and be able to make full repayment.\\n  /// @dev Debt gap is applied as following: toPay = debt * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR\\n  function debtGap() external view returns (uint);\\n\\n  /// @notice Allow to rebalance exist debts during burrow, see SCB-708\\n  ///         If the user already has a debt(s) for the given pair of collateral-borrow assets,\\n  ///         new borrow is made using exist pool adapter(s). Exist debt is rebalanced during the borrowing\\n  ///         in both directions, but the rebalancing is asymmetrically limited by thresholds\\n  ///         THRESHOLD_REBALANCE_XXX, see BorrowManager.\\n  function rebalanceOnBorrowEnabled() external view returns (bool);\\n\\n  //#endregion ----------------------------------------------------- Configuration\\n  //#region ----------------------------------------------------- Core application contracts\\n\\n  function tetuConverter() external view returns (address);\\n  function borrowManager() external view returns (address);\\n  function debtMonitor() external view returns (address);\\n  function tetuLiquidator() external view returns (address);\\n  function swapManager() external view returns (address);\\n  function priceOracle() external view returns (address);\\n  function bookkeeper() external view returns (address);\\n  //#endregion ----------------------------------------------------- Core application contracts\\n\\n  //#region ----------------------------------------------------- External contracts\\n  /// @notice A keeper to control health and efficiency of the borrows\\n  function keeper() external view returns (address);\\n  /// @notice Controller of tetu-contracts-v2, that is allowed to update proxy contracts\\n  function proxyUpdater() external view returns (address);\\n  //#endregion ----------------------------------------------------- External contracts\\n}\\n\",\"keccak256\":\"0xff68dab4badf9543c9a0ae5a1314106f0a5b804e8b6669fbea6e2655eb3c741f\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IConverterControllerProvider {\\n  function controller() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71dce61809acb75f9078290e90033ffe816a51f18b7cb296d161e278c36eec86\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPriceOracle {\\n  /// @notice Return asset price in USD, decimals 18\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb11e653eb4d6d7c41f29ee1e3e498253cfa8df1aec3ff31ab527009b79bdb705\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IConverterControllerProvider.sol\\\";\\n\\n/// @notice Main contract of the TetuConverter application\\n/// @dev Borrower (strategy) makes all operations via this contract only.\\ninterface ITetuConverter is IConverterControllerProvider {\\n\\n  /// @notice Find possible borrow strategies and provide \\\"cost of money\\\" as interest for the period for each strategy\\n  ///         Result arrays of the strategy are ordered in ascending order of APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converters Array of available converters ordered in ascending order of APR.\\n  ///                    Each item contains a result contract that should be used for conversion; it supports IConverter\\n  ///                    This address should be passed to borrow-function during conversion.\\n  ///                    The length of array is always equal to the count of available lending platforms.\\n  ///                    Last items in array can contain zero addresses (it means they are not used)\\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\\n  /// @return amountToBorrowsOut Amounts that should be borrowed\\n  ///                            This amount is not zero if corresponded converter is not zero.\\n  /// @return aprs18 Interests on the use of {amountIn_} during the given period, decimals 18\\n  function findBorrowStrategies(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external view returns (\\n    address[] memory converters,\\n    uint[] memory collateralAmountsOut,\\n    uint[] memory amountToBorrowsOut,\\n    int[] memory aprs18\\n  );\\n\\n  /// @notice Find best swap strategy and provide \\\"cost of money\\\" as interest for the period\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow()\\n  /// @return sourceAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                         It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return targetAmountOut Result amount of {targetToken_} after swap\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findSwapStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_\\n  ) external returns (\\n    address converter,\\n    uint sourceAmountOut,\\n    uint targetAmountOut,\\n    int apr18\\n  );\\n\\n  /// @notice Find best conversion strategy (swap or borrow) and provide \\\"cost of money\\\" as interest for the period.\\n  ///         It calls both findBorrowStrategy and findSwapStrategy and selects a best strategy.\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR for swapping.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow().\\n  /// @return collateralAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                             It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return amountToBorrowOut Result amount of {targetToken_} after conversion\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findConversionStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external returns (\\n    address converter,\\n    uint collateralAmountOut,\\n    uint amountToBorrowOut,\\n    int apr18\\n  );\\n\\n  /// @notice Convert {collateralAmount_} to {amountToBorrow_} using {converter_}\\n  ///         Target amount will be transferred to {receiver_}.\\n  ///         Exist debts can be rebalanced fully or partially if {rebalanceOnBorrowEnabled} is ON\\n  /// @dev Transferring of {collateralAmount_} by TetuConverter-contract must be approved by the caller before the call\\n  ///      Only whitelisted users are allowed to make borrows\\n  /// @param converter_ A converter received from findBestConversionStrategy.\\n  /// @param collateralAmount_ Amount of {collateralAsset_} to be converted.\\n  ///                          This amount must be approved to TetuConverter before the call.\\n  /// @param amountToBorrow_ Amount of {borrowAsset_} to be borrowed and sent to {receiver_}\\n  /// @param receiver_ A receiver of borrowed amount\\n  /// @return borrowedAmountOut Exact borrowed amount transferred to {receiver_}\\n  function borrow(\\n    address converter_,\\n    address collateralAsset_,\\n    uint collateralAmount_,\\n    address borrowAsset_,\\n    uint amountToBorrow_,\\n    address receiver_\\n  ) external returns (\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Full or partial repay of the borrow\\n  /// @dev A user should transfer {amountToRepay_} to TetuConverter before calling repay()\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        A user should transfer {amountToRepay_} to TetuConverter before calling repay().\\n  ///        You can know exact total amount of debt using {getStatusCurrent}.\\n  ///        if the amount exceed total amount of the debt:\\n  ///           - the debt will be fully repaid\\n  ///           - remain amount will be swapped from {borrowAsset_} to {collateralAsset_}\\n  ///        This amount should be calculated with taking into account possible debt gap,\\n  ///        You should call getDebtAmountCurrent(debtGap = true) to get this amount.\\n  /// @param receiver_ A receiver of the collateral that will be withdrawn after the repay\\n  ///                  The remained amount of borrow asset will be returned to the {receiver_} too\\n  /// @return collateralAmountOut Exact collateral amount transferred to {collateralReceiver_}\\n  ///         If TetuConverter is not able to make the swap, it reverts\\n  /// @return returnedBorrowAmountOut A part of amount-to-repay that wasn't converted to collateral asset\\n  ///                                 because of any reasons (i.e. there is no available conversion strategy)\\n  ///                                 This amount is returned back to the collateralReceiver_\\n  /// @return swappedLeftoverCollateralOut A part of collateral received through the swapping\\n  /// @return swappedLeftoverBorrowOut A part of amountToRepay_ that was swapped\\n  function repay(\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_,\\n    address receiver_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint returnedBorrowAmountOut,\\n    uint swappedLeftoverCollateralOut,\\n    uint swappedLeftoverBorrowOut\\n  );\\n\\n  /// @notice Estimate result amount after making full or partial repay\\n  /// @dev It works in exactly same way as repay() but don't make actual repay\\n  ///      Anyway, the function is write, not read-only, because it makes updateStatus()\\n  /// @param user_ user whose amount-to-repay will be calculated\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        This amount should be calculated without possible debt gap.\\n  ///        In this way it's differ from {repay}\\n  /// @return collateralAmountOut Total collateral amount to be returned after repay in exchange of {amountToRepay_}\\n  /// @return swappedAmountOut A part of {collateralAmountOut} that were received by direct swap\\n  function quoteRepay(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint swappedAmountOut\\n  );\\n\\n  /// @notice Update status in all opened positions\\n  ///         After this call getDebtAmount will be able to return exact amount to repay\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountCurrent(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice Total amount of borrow tokens that should be repaid to close the borrow completely.\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountStored(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external view returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice User needs to redeem some collateral amount. Calculate an amount of borrow token that should be repaid\\n  /// @param user_ user whose debts will be returned\\n  /// @param collateralAmountRequired_ Amount of collateral required by the user\\n  /// @return borrowAssetAmount Borrowed amount that should be repaid to receive back following amount of collateral:\\n  ///                           amountToReceive = collateralAmountRequired_ - unobtainableCollateralAssetAmount\\n  /// @return unobtainableCollateralAssetAmount A part of collateral that cannot be obtained in any case\\n  ///                                           even if all borrowed amount will be returned.\\n  ///                                           If this amount is not 0, you ask to get too much collateral.\\n  function estimateRepay(\\n    address user_,\\n    address collateralAsset_,\\n    uint collateralAmountRequired_,\\n    address borrowAsset_\\n  ) external view returns (\\n    uint borrowAssetAmount,\\n    uint unobtainableCollateralAssetAmount\\n  );\\n\\n  /// @notice Transfer all reward tokens to {receiver_}\\n  /// @return rewardTokensOut What tokens were transferred. Same reward token can appear in the array several times\\n  /// @return amountsOut Amounts of transferred rewards, the array is synced with {rewardTokens}\\n  function claimRewards(address receiver_) external returns (\\n    address[] memory rewardTokensOut,\\n    uint[] memory amountsOut\\n  );\\n\\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\\n  ///                      It should be transferred on balance of the TetuConverter before the function call\\n  /// @param receiver_ Result amount will be sent to this address\\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\\n  function safeLiquidate(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    address receiver_,\\n    uint priceImpactToleranceSource_,\\n    uint priceImpactToleranceTarget_\\n  ) external returns (\\n    uint amountOut\\n  );\\n\\n  /// @notice Check if {amountOut_} is too different from the value calculated directly using price oracle prices\\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\\n  function isConversionValid(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    uint amountOut_,\\n    uint priceImpactTolerance_\\n  ) external view returns (bool);\\n\\n  /// @notice Close given borrow and return collateral back to the user, governance only\\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\\n  /// @param poolAdapter_ The pool adapter that represents the borrow\\n  /// @param closePosition Close position after repay\\n  ///        Usually it should be true, because the function always tries to repay all debt\\n  ///        false can be used if user doesn't have enough amount to pay full debt\\n  ///              and we are trying to pay \\\"as much as possible\\\"\\n  /// @return collateralAmountOut Amount of collateral returned to the user\\n  /// @return repaidAmountOut Amount of borrow asset paid to the lending platform\\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external returns (\\n    uint collateralAmountOut,\\n    uint repaidAmountOut\\n  );\\n\\n  /// @notice Get active borrows of the user with given collateral/borrowToken\\n  /// @dev Simple access to IDebtMonitor.getPositions\\n  /// @return poolAdaptersOut The instances of IPoolAdapter\\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\\n    address[] memory poolAdaptersOut\\n  );\\n\\n  /// @notice Save token from TC-balance to {receiver}\\n  /// @dev Normally TetuConverter doesn't have any tokens on balance, they can appear there accidentally only\\n  function salvage(address receiver, address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0x87ac3099e1254509929511509c207ecee9a665a3b43d7ee5b98e2ab0d639416d\",\"license\":\"MIT\"},\"contracts/interfaces/IConverterStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\n\\n/// @notice Allow to share declaration of ConverterStrategyBaseState with libraries\\ninterface IConverterStrategyBase {\\n  struct ConverterStrategyBaseState {\\n    /// @dev Amount of underlying assets invested to the pool.\\n    uint investedAssets;\\n\\n    /// @dev Linked Tetu Converter\\n    ITetuConverter converter;\\n\\n    /// @notice Percent of asset amount that can be not invested, it's allowed to just keep it on balance\\n    ///         decimals = {DENOMINATOR}\\n    /// @dev We need this threshold to avoid numerous conversions of small amounts\\n    uint reinvestThresholdPercent;\\n\\n    /// @notice Current debt to the insurance.\\n    ///         It's increased when insurance covers any losses related to swapping and borrow-debts-paying.\\n    ///         It's not changed when insurance covers losses/receives profit that appeared after price changing.\\n    ///         The strategy covers this debt on each hardwork using the profit (rewards, fees)\\n    int debtToInsurance;\\n\\n    /// @notice reserve space for future needs\\n    uint[50-1] __gap;\\n  }\\n}\",\"keccak256\":\"0x01589d89694f60bb33589a5c396d894adf75a388ef71482905d5a4c9920e5086\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolProportionsProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPoolProportionsProvider {\\n  /// @notice Calculate proportions of [underlying, not-underlying] required by the internal pool of the strategy\\n  /// @return Proportion of the not-underlying [0...1e18]\\n  function getPropNotUnderlying18() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xb923a1c932c1cb5bba91d43b92de2fb5271e0ee770cfd31f9ccb133d247e8390\",\"license\":\"MIT\"},\"contracts/libs/AppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/// @notice List of all errors generated by the application\\n///         Each error should have unique code TS-XXX and descriptive comment\\nlibrary AppErrors {\\n  /// @notice Provided address should be not zero\\n  string public constant ZERO_ADDRESS = \\\"TS-1 zero address\\\";\\n\\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\\n  string public constant UNISWAP_PAIR_NOT_FOUND = \\\"TS-2 pair not found\\\";\\n\\n  /// @notice Lengths not matched\\n  string public constant WRONG_LENGTHS = \\\"TS-4 wrong lengths\\\";\\n\\n  /// @notice Unexpected zero balance\\n  string public constant ZERO_BALANCE = \\\"TS-5 zero balance\\\";\\n\\n  string public constant ITEM_NOT_FOUND = \\\"TS-6 not found\\\";\\n\\n  string public constant NOT_ENOUGH_BALANCE = \\\"TS-7 not enough balance\\\";\\n\\n  /// @notice Price oracle returns zero price\\n  string public constant ZERO_PRICE = \\\"TS-8 zero price\\\";\\n\\n  string public constant WRONG_VALUE = \\\"TS-9 wrong value\\\";\\n\\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\\n  string public constant ZERO_AMOUNT_BORROWED = \\\"TS-10 zero borrowed amount\\\";\\n\\n  string public constant WITHDRAW_TOO_MUCH = \\\"TS-11 try to withdraw too much\\\";\\n\\n  string public constant UNKNOWN_ENTRY_KIND = \\\"TS-12 unknown entry kind\\\";\\n\\n  string public constant ONLY_TETU_CONVERTER = \\\"TS-13 only TetuConverter\\\";\\n\\n  string public constant WRONG_ASSET = \\\"TS-14 wrong asset\\\";\\n\\n  string public constant NO_LIQUIDATION_ROUTE = \\\"TS-15 No liquidation route\\\";\\n\\n  string public constant PRICE_IMPACT = \\\"TS-16 price impact\\\";\\n\\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\\n  string public constant REPAY_MAKES_SWAP = \\\"TS-17 can not convert back\\\";\\n\\n  string public constant NO_INVESTMENTS = \\\"TS-18 no investments\\\";\\n\\n  string public constant INCORRECT_LENGTHS = \\\"TS-19 lengths\\\";\\n\\n  /// @notice We expect increasing of the balance, but it was decreased\\n  string public constant BALANCE_DECREASE = \\\"TS-20 balance decrease\\\";\\n\\n  /// @notice Prices changed and invested assets amount was increased on S, value of S is too high\\n  string public constant EARNED_AMOUNT_TOO_HIGH = \\\"TS-21 earned too high\\\";\\n\\n  string public constant GOVERNANCE_ONLY = \\\"TS-22 governance only\\\";\\n\\n  string public constant ZERO_VALUE = \\\"TS-24 zero value\\\";\\n\\n  string public constant INCORRECT_SWAP_BY_AGG_PARAM = \\\"TS-25 swap by agg\\\";\\n\\n  string public constant OVER_COLLATERAL_DETECTED = \\\"TS-27 over-collateral\\\";\\n\\n  string public constant NOT_IMPLEMENTED = \\\"TS-28 not implemented\\\";\\n\\n  /// @notice You are not allowed to make direct debt if a NOT-DUST reverse debt exists and visa verse.\\n  string public constant OPPOSITE_DEBT_EXISTS = \\\"TS-29 opposite debt exists\\\";\\n\\n  string public constant INVALID_VALUE = \\\"TS-30 invalid value\\\";\\n\\n  string public constant TOO_HIGH = \\\"TS-32 too high value\\\";\\n\\n  /// @notice BorrowLib has recursive call, sub-calls are not allowed\\n  ///         This error can happen if allowed proportion is too small, i.e. 0.0004 : (1-0.0004)\\n  ///         Such situation can happen if amount to swap is almost equal to the amount of the token in the current tick,\\n  ///         so swap will move us close to the border between ticks.\\n  ///         It was decided, that it's ok to have revert in that case\\n  ///         We can change this behavior by changing BorrowLib.rebalanceRepayBorrow implementation:\\n  ///             if amount-to-repay passed to _repayDebt is too small to be used,\\n  ///             we should increase it min amount required to make repay successfully (amount must be > threshold)\\n  ///         Previously it was error NOT_ALLOWED = \\\"TS23: not allowed\\\", see issues SCB-777, SCB-818\\n  string public constant TOO_DEEP_RECURSION_BORROW_LIB = \\\"TS-33 too deep recursion\\\";\\n}\\n\",\"keccak256\":\"0x7dbc4c86075e52fadf33db909d0954ae13266aa35bce356412783d2770cc6129\",\"license\":\"BUSL-1.1\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\\\";\\n\\n/// @notice Common internal utils\\nlibrary AppLib {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice 1% gap to cover possible liquidation inefficiency\\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\\n  uint internal constant GAP_CONVERSION = 1_000;\\n  /// @dev Absolute value for any token\\n  uint internal constant DEFAULT_LIQUIDATION_THRESHOLD = 100_000;\\n  uint internal constant DENOMINATOR = 100_000;\\n\\n  /// @notice Any amount less than the following is dust\\n  uint public constant DUST_AMOUNT_TOKENS = 100;\\n\\n  /// @notice Unchecked increment for for-cycles\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n    unchecked {\\n      return i + 1;\\n    }\\n  }\\n\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\n  /// @dev Should NOT be used for third-party pools\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\n      IERC20(token).safeApprove(spender, 0);\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\n      IERC20(token).safeApprove(spender, 2 ** 255);\\n    }\\n  }\\n\\n  function balance(address token) internal view returns (uint) {\\n    return IERC20(token).balanceOf(address(this));\\n  }\\n\\n  /// @return prices Asset prices in USD, decimals 18\\n  /// @return decs 10**decimals\\n  function _getPricesAndDecs(IPriceOracle priceOracle, address[] memory tokens_, uint len) internal view returns (\\n    uint[] memory prices,\\n    uint[] memory decs\\n  ) {\\n    prices = new uint[](len);\\n    decs = new uint[](len);\\n    {\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\\n        prices[i] = priceOracle.getAssetPrice(tokens_[i]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\\n  function getAssetIndex(address[] memory tokens_, address asset_) internal pure returns (uint) {\\n    uint len = tokens_.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (tokens_[i] == asset_) {\\n        return i;\\n      }\\n    }\\n    return type(uint).max;\\n  }\\n\\n  function _getLiquidator(address controller_) internal view returns (ITetuLiquidator) {\\n    return ITetuLiquidator(IController(controller_).liquidator());\\n  }\\n\\n  function _getPriceOracle(ITetuConverter converter_) internal view returns (IPriceOracle) {\\n    return IPriceOracle(IConverterController(converter_.controller()).priceOracle());\\n  }\\n\\n  /// @notice Calculate liquidation threshold, use default value if the threshold is not set\\n  ///         It's allowed to set any not-zero threshold, it this case default value is not used\\n  /// @dev This function should be applied to the threshold at the moment of the reading its value from the storage.\\n  ///      So, if we pass {mapping(address => uint) storage liquidationThresholds}, the threshold can be zero\\n  ///      bug if we pass {uint liquidationThreshold} to a function, the threshold should be not zero\\n  function _getLiquidationThreshold(uint threshold) internal pure returns (uint) {\\n    return threshold == 0\\n      ? AppLib.DEFAULT_LIQUIDATION_THRESHOLD\\n      : threshold;\\n  }\\n\\n  /// @notice Return a-b OR zero if a < b\\n  function sub0(uint a, uint b) internal pure returns (uint) {\\n    return a > b ? a - b : 0;\\n  }\\n}\\n\",\"keccak256\":\"0x381e0ccdce8a3fc61875780314db3ffc93b0d30389d8d65f755d17086ea963a7\",\"license\":\"BUSL-1.1\"},\"contracts/libs/BorrowLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"../strategies/ConverterStrategyBaseLib.sol\\\";\\n\\n/// @notice Library to make new borrow, extend/reduce exist borrows and repay to keep proper assets proportions\\n/// @dev Swap through liquidator is still allowed to be able to get required profitToCover, but this amount is small\\nlibrary BorrowLib {\\n  /// @notice prop0 + prop1\\n  uint constant public SUM_PROPORTIONS = 1e18;\\n\\n  /// @notice Function {_rebalanceAssets} cannot be called recursively more than twice.\\n  /// Normally one call is enough.\\n  /// Firstly repay(requiredAmount0) is called below. There are two possible results:\\n  /// 1) requiredCost0 <= cost0\\n  /// 2) v.directDebt == 0\\n  /// There is SCB-818: there are two debts (big and small), on the first cycle we get amount less than expected\\n  /// because of debt gap. So, we need second cycle.\\n  uint constant public MAX_DEEP_RECURSION = 2;\\n\\n  //region -------------------------------------------------- Data types\\n  struct PricesDecs {\\n    /// @notice Asset prices in USD, decimals 18\\n    uint[] prices;\\n    /// @notice decs 10**decimals\\n    uint[] decs;\\n  }\\n\\n  struct ConverterLiquidator {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n  }\\n\\n  struct RebalanceAssetsLocal {\\n    // ------- constant values\\n    address asset0;\\n    address asset1;\\n    /// @notice Proportion of {asset0}, > 0; proportion of {asset1} is SUM_PROPORTIONS - prop0\\n    uint prop0;\\n    /// @notice Min allowed amount of {asset0}-collateral, 0 - use default min value\\n    uint threshold0;\\n    /// @ntoice Min allowed amount of {asset1}-collateral, 0 - use default min value\\n    uint threshold1;\\n\\n    PricesDecs pd;\\n    // ------- refreshable values\\n\\n    // @notice Current balance of {asset0}\\n    uint amount0;\\n    // @notice Current balance of {asset1}\\n    uint amount1;\\n\\n    /// @notice Borrowed amount of not-underlying\\n    uint directDebt;\\n    /// @notice Borrowed amount of underlying\\n    uint reverseDebt;\\n\\n    uint addition0;\\n  }\\n\\n  /// @notice Params required to borrow {assetB} under {assetA}\\n  struct RebalanceAssetsCore {\\n    ConverterLiquidator converterLiquidator;\\n    address assetA;\\n    address assetB;\\n    uint propA;\\n    uint propB;\\n    /// @notice {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\\n    uint alpha18;\\n    /// @notice Min allowed amount of {assetA}-collateral, 0 - use default min value\\n    uint thresholdA;\\n\\n    uint addonA;\\n    uint addonB;\\n\\n    /// @notice Index of {assetA} in {prices} and {decs}\\n    uint indexA;\\n    /// @notice Index of {assetB} in {prices} and {decs}\\n    uint indexB;\\n  }\\n\\n  struct OpenPosition2Local {\\n    uint collateral;\\n    uint toBorrow;\\n    uint cc;\\n    uint cb;\\n    uint c0;\\n    uint cb2;\\n    uint ca0;\\n    uint gamma18;\\n    uint pa2;\\n    uint pb2;\\n    bytes entryData;\\n    uint alpha18;\\n  }\\n\\n  struct MakeBorrowToDepositLocal {\\n    uint[] prices;\\n    uint[] decs;\\n    uint cost0;\\n    uint cost1;\\n    uint prop1;\\n    bytes entryData;\\n  }\\n  //endregion -------------------------------------------------- Data types\\n\\n  //region -------------------------------------------------- External functions\\n  /// @notice Set balances of {asset0} and {asset1} in proportions {prop0}:{prop1} using borrow/repay (no swaps)\\n  /// @param prop0 Proportion of {asset0}, > 0. Proportion of {asset1} is calculates as 1e18 - prop0\\n  /// @param threshold0 Min allowed amount of {asset0}-collateral, 0 - use default min value\\n  /// @param threshold1 Min allowed amount of {asset1}-collateral, 0 - use default min value\\n  /// @param addition0 Additional amount A0 of {asset0}.\\n  ///                  Balance0 = A0 + B0\\n  ///                  We need following balances in results: B0 : Balance1 === {proportion}:{100_000-proportion}\\n  function rebalanceAssets(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    address asset0,\\n    address asset1,\\n    uint prop0,\\n    uint threshold0,\\n    uint threshold1,\\n    uint addition0\\n  ) external {\\n    // pool always have TWO assets, it's not allowed ot have only one asset\\n    // so, we assume that the proportions are in the range (0...1e18)\\n    require(prop0 != 0, AppErrors.ZERO_VALUE);\\n    require(prop0 < SUM_PROPORTIONS, AppErrors.TOO_HIGH);\\n\\n    RebalanceAssetsLocal memory v;\\n    v.asset0 = asset0;\\n    v.asset1 = asset1;\\n    v.prop0 = prop0;\\n    v.threshold0 = threshold0;\\n    v.threshold1 = threshold1;\\n    v.addition0 = addition0;\\n\\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\n    address[] memory tokens = new address[](2);\\n    tokens[0] = asset0;\\n    tokens[1] = asset1;\\n    (v.pd.prices, v.pd.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\\n\\n    _refreshRebalance(v, ConverterLiquidator(converter_, liquidator_), MAX_DEEP_RECURSION);\\n  }\\n\\n  /// @notice Convert {amount_} of underlying to two amounts: A0 (underlying) and A1 (not-underlying)\\n  ///         Result proportions of A0 and A1 should match to {prop0} : 1e18-{prop0}\\n  ///         The function is able to make new borrowing and/or close exist debts.\\n  /// @param amount_ Amount of underlying that is going to be deposited\\n  ///                We assume here, that current balance >= the {amount_}\\n  /// @param tokens_ [Underlying, not underlying]\\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\n  /// @return tokenAmounts Result amounts [A0 (underlying), A1 (not-underlying)]\\n  function prepareToDeposit(\\n    ITetuConverter converter_,\\n    uint amount_,\\n    address[2] memory tokens_,\\n    uint[2] memory thresholds_,\\n    uint prop0\\n  ) external returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    uint[2] memory amountsToDeposit;\\n    uint[2] memory balances = [\\n      AppLib.sub0(AppLib.balance(tokens_[0]), amount_), // We assume here, that current balance >= the {amount_}\\n      AppLib.balance(tokens_[1])\\n    ];\\n\\n    // we assume here, that either direct OR reverse debts (amount > threshold) are possible but not both at the same time\\n    (uint debtReverse, ) = converter_.getDebtAmountCurrent(address(this), tokens_[1], tokens_[0], true);\\n    if (debtReverse > thresholds_[0]) {\\n      // case 1: reverse debt exists\\n      // case 1.1: amount to deposit exceeds exist debt.\\n      //    Close the debt completely and than make either new direct OR reverse debt\\n      // case 1.2: amount to deposit is less than the exist debt.\\n      //    Close the debt partially and make new reverse debt\\n      uint amountToRepay = amount_ > debtReverse ? debtReverse : amount_;\\n      ConverterStrategyBaseLib.closePosition(converter_, tokens_[1], tokens_[0], amountToRepay);\\n      amountsToDeposit = [\\n        AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]),\\n        AppLib.sub0(AppLib.balance(tokens_[1]), balances[1])\\n      ];\\n    } else {\\n      // case 2: no debts OR direct debt exists\\n      amountsToDeposit = [amount_, 0];\\n    }\\n\\n    _makeBorrowToDeposit(converter_, amountsToDeposit, tokens_, thresholds_, prop0);\\n\\n    tokenAmounts = new uint[](2);\\n    tokenAmounts[0] = AppLib.sub0(AppLib.balance(tokens_[0]), balances[0]);\\n    tokenAmounts[1] = AppLib.sub0(AppLib.balance(tokens_[1]), balances[1]);\\n  }\\n  //endregion -------------------------------------------------- External functions\\n\\n  //region -------------------------------------------------- Implementation of prepareToDeposit\\n  /// @notice Make a direct or reverse borrow to make amounts_ fit to the given proportions.\\n  /// If one of available amounts is zero, we just need to make a borrow using second amount as amountIn.\\n  /// Otherwise, we need to calculate amountIn at first.\\n  /// @dev The purpose is to get the amounts in proper proportions: A:B = prop0:prop1.\\n  /// Suppose, amounts_[1] is not enough:\\n  ///   [A1, B1] => [A2 + A3, B1], A2:B1 = prop0:prop1, A3 is amountIn for new borrow.\\n  /// Suppose, amounts_[0] is not enough:\\n  ///   [A1, B1] => [A1, B2 + B3], A1:B2 = prop0:prop1, B3 is amountIn for new borrow.\\n  /// @param amounts_ Available amounts\\n  /// @param tokens_ [Underlying, not underlying]\\n  /// @param thresholds_ Thresholds for the given {tokens_}. Debts with amount-to-repay < threshold are ignored.\\n  /// @param prop0 Required proportion of underlying, > 0. Proportion of not-underlying is calculates as 1e18 - {prop0}\\n  function _makeBorrowToDeposit(\\n    ITetuConverter converter_,\\n    uint[2] memory amounts_,\\n    address[2] memory tokens_,\\n    uint[2] memory thresholds_,\\n    uint prop0\\n  ) internal {\\n    MakeBorrowToDepositLocal memory v;\\n\\n    {\\n      IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\n      address[] memory tokens = new address[](2);\\n      tokens[0] = tokens_[0];\\n      tokens[1] = tokens_[1];\\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(priceOracle, tokens, 2);\\n    }\\n\\n    v.cost0 = amounts_[0] * v.prices[0] / v.decs[0];\\n    v.cost1 = amounts_[1] * v.prices[1] / v.decs[1];\\n    // we need: cost0/cost1 = prop0/prop1, and so cost0 * prop1 = cost1 * prop0\\n    v.prop1 = SUM_PROPORTIONS - prop0;\\n\\n    if (v.cost0 * v.prop1 > v.cost1 * prop0) {\\n      // we need to make direct borrow\\n      uint cost0for1 = v.cost1 * prop0 / v.prop1; // a part of cost0 that is matched to cost1\\n      uint amountIn = (v.cost0 - cost0for1) * v.decs[0] / v.prices[0];\\n\\n      AppLib.approveIfNeeded(tokens_[0], amountIn, address(converter_));\\n      v.entryData = abi.encode(1, prop0, v.prop1); // ENTRY_KIND_EXACT_PROPORTION_1\\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[0], tokens_[1], amountIn, thresholds_[0]);\\n    } else if (v.cost0 * v.prop1 < v.cost1 * prop0) {\\n      // we need to make reverse borrow\\n      uint cost1for0 = v.cost0 * v.prop1 / prop0; // a part of cost1 that is matched to cost0\\n      uint amountIn = (v.cost1 - cost1for0) * v.decs[1] / v.prices[1];\\n\\n      AppLib.approveIfNeeded(tokens_[1], amountIn, address(converter_));\\n      v.entryData = abi.encode(1, v.prop1, prop0); // ENTRY_KIND_EXACT_PROPORTION_1\\n      ConverterStrategyBaseLib.openPosition(converter_, v.entryData, tokens_[1], tokens_[0], amountIn, thresholds_[1]);\\n    }\\n  }\\n\\n  //endregion -------------------------------------------------- Implementation of prepareToDeposit\\n\\n  //region -------------------------------------------------- Internal helper functions\\n\\n  /// @notice refresh state in {v} and call _rebalanceAssets()\\n  function _refreshRebalance(\\n    RebalanceAssetsLocal memory v,\\n    ConverterLiquidator memory converterLiquidator,\\n    uint repayAllowed\\n  ) internal {\\n    v.amount0 = IERC20(v.asset0).balanceOf(address(this));\\n    v.amount1 = IERC20(v.asset1).balanceOf(address(this));\\n\\n    (v.directDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset0, v.asset1, true);\\n    (v.reverseDebt, ) = converterLiquidator.converter.getDebtAmountCurrent(address(this), v.asset1, v.asset0, true);\\n\\n    _rebalanceAssets(v, converterLiquidator, repayAllowed);\\n  }\\n\\n  /// @param repayAllowed Protection against recursion\\n  ///                     Assets can be rebalanced in two ways:\\n  ///                     1) openPosition\\n  ///                     2) repay + openPosition\\n  ///                     Only one repay is allowed.\\n  function _rebalanceAssets(\\n    RebalanceAssetsLocal memory v,\\n    ConverterLiquidator memory converterLiquidator,\\n    uint repayAllowed\\n  ) internal {\\n    uint cost0 = v.amount0 * v.pd.prices[0] / v.pd.decs[0];\\n    uint cost1 = v.amount1 * v.pd.prices[1] / v.pd.decs[1];\\n    uint costAddition0 = v.addition0 * v.pd.prices[0] / v.pd.decs[0];\\n\\n    if (cost0 + cost1 > costAddition0) {\\n      uint totalCost = cost0 + cost1 - costAddition0;\\n\\n      uint requiredCost0 = totalCost * v.prop0 / SUM_PROPORTIONS + costAddition0;\\n      uint requiredCost1 = totalCost * (SUM_PROPORTIONS - v.prop0) / SUM_PROPORTIONS;\\n\\n      if (requiredCost0 > cost0) {\\n        // we need to increase amount of asset 0 and decrease amount of asset 1, so we need to borrow asset 0 (reverse)\\n        RebalanceAssetsCore memory c10 = RebalanceAssetsCore({\\n          converterLiquidator: converterLiquidator,\\n          assetA: v.asset1,\\n          assetB: v.asset0,\\n          propA: SUM_PROPORTIONS - v.prop0,\\n          propB: v.prop0,\\n          alpha18: 1e18 * v.pd.prices[0] * v.pd.decs[1] / v.pd.prices[1] / v.pd.decs[0],\\n          thresholdA: v.threshold1,\\n          addonA: 0,\\n          addonB: v.addition0,\\n          indexA: 1,\\n          indexB: 0\\n        });\\n\\n        if (v.directDebt >= AppLib.DUST_AMOUNT_TOKENS) {\\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\n\\n          // repay of v.asset1 is required\\n          uint requiredAmount0 = (requiredCost0 - cost0) * v.pd.decs[0] / v.pd.prices[0];\\n          rebalanceRepayBorrow(v, c10, requiredAmount0, v.directDebt, repayAllowed);\\n        } else {\\n          // new (or additional) borrow of asset 0 under asset 1 is required\\n          openPosition(c10, v.pd, v.amount1, v.amount0);\\n        }\\n      } else if (requiredCost0 < cost0) {\\n        RebalanceAssetsCore memory c01 = RebalanceAssetsCore({\\n          converterLiquidator: converterLiquidator,\\n          assetA: v.asset0,\\n          assetB: v.asset1,\\n          propA: v.prop0,\\n          propB: SUM_PROPORTIONS - v.prop0,\\n          alpha18: 1e18 * v.pd.prices[1] * v.pd.decs[0] / v.pd.prices[0] / v.pd.decs[1],\\n          thresholdA: v.threshold0,\\n          addonA: v.addition0,\\n          addonB: 0,\\n          indexA: 0,\\n          indexB: 1\\n        });\\n        // we need to decrease amount of asset 0 and increase amount of asset 1, so we need to borrow asset 1 (direct)\\n        if (v.reverseDebt >= AppLib.DUST_AMOUNT_TOKENS) {\\n          require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\n\\n          // repay of v.asset0 is required\\n          // requiredCost0 < cost0 => requiredCost1 > cost1\\n          uint requiredAmount1 = (requiredCost1 - cost1) * v.pd.decs[1] / v.pd.prices[1];\\n          rebalanceRepayBorrow(v, c01, requiredAmount1, v.reverseDebt, repayAllowed);\\n        } else {\\n          // new or additional borrow of asset 1 under asset 0 is required\\n          openPosition(c01, v.pd, v.amount0, v.amount1);\\n        }\\n      }\\n    } else {\\n      // if costAddition0 exceeds cost0 + cost1, all amounts should be converted to asset 0\\n      // for simplicity, we don't make any swaps or borrows (amount addition0 is assumed to be small)\\n      // and just leave balances as is\\n      // as result, profit-to-cover will be reduced from costAddition0 to v.amount0\\n    }\\n  }\\n\\n  /// @notice Repay {amountDebtA} fully or partially to get at least {requiredAmountB} of collateral\\n  ///         then try to rebalance once more\\n  /// @param requiredAmountB Amount of collateral that we need to receive after repay\\n  /// @param amountDebtA Total amount that is required to pay to close the debt\\n  function rebalanceRepayBorrow(\\n    RebalanceAssetsLocal memory v,\\n    RebalanceAssetsCore memory c,\\n    uint requiredAmountB,\\n    uint amountDebtA,\\n    uint repayAllowed\\n  ) internal {\\n    // repayAllowed cannot be zero here because of requires in _rebalanceAssets, but it's safer to check it once more\\n    require(repayAllowed != 0, AppErrors.TOO_DEEP_RECURSION_BORROW_LIB);\\n\\n    // we need to get {requiredAmountB}\\n    // we don't know exact amount to repay\\n    // but we are sure that amount {requiredAmountB ===> requiredAmountA} would be more than required\\n    uint capRequiredAmountA = requiredAmountB * c.alpha18 / 1e18;\\n    uint amountToRepay = Math.min(capRequiredAmountA, amountDebtA);\\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\n      ConverterStrategyBaseLib._repayDebt(c.converterLiquidator.converter, c.assetB, c.assetA, amountToRepay);\\n      _refreshRebalance(v, c.converterLiquidator, repayAllowed - 1);\\n    } // else the assets are already in proper proportions\\n  }\\n\\n  //endregion -------------------------------------------------- Internal helper functions\\n\\n  //region -------------------------------------------------- Open position\\n  /// @notice borrow asset B under asset A. Result balances should be A0 + A1, B0 + B1\\n  ///         Where (A1 : B1) == (propA : propB), A0 and B0 are equal to {c.addonA} and {c.addonB}\\n  /// @param balanceA_ Current balance of the collateral\\n  /// @param balanceB_ Current balance of the borrow asset\\n  function openPosition(\\n    RebalanceAssetsCore memory c,\\n    PricesDecs memory pd,\\n    uint balanceA_,\\n    uint balanceB_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    // if there are two not-zero addons, the caller should reduce balances before the call\\n    require(c.addonA == 0 || c.addonB == 0, AppErrors.INVALID_VALUE);\\n\\n    // we are going to borrow B under A\\n    if (c.addonB != 0) {\\n      // B is underlying, so we are going to borrow underlying\\n      if (balanceB_ >= c.addonB) {\\n        // simple case - we already have required addon on the balance. Just keep it unused\\n        return _openPosition(c, balanceA_, balanceB_ - c.addonB);\\n      } else {\\n        // we need to get 1) (c.addonB + balanceB_) amount, so we will have required c.addonB\\n        //                2) leftovers of A and B should be allocated in required proportions\\n        // it's too hard to calculate correctly required to borrow amount in this case without changing TetuConverter\\n        // but we can assume here, that amount (c.addonB - balanceB_) is pretty small (it's profitToCover)\\n        // so, we can swap this required amount through liquidator at first\\n        // then use _openPosition to re-allocated rest amounts to proper proportions\\n        (uint decA,) = _makeLittleSwap(c, pd, balanceA_, c.addonB - balanceB_);\\n        return _openPosition(c, balanceA_ - decA, balanceB_);\\n      }\\n    } else if (c.addonA != 0) {\\n      // A is underlying, we need to put aside c.addonA and allocate leftovers in right proportions.\\n      // we are going to borrow B under asset A, so the case (balanceA_ < c.addonA) is not valid here\\n      require(balanceA_ >= c.addonA, AppErrors.NOT_ENOUGH_BALANCE);\\n      return _openPosition(c, balanceA_ - c.addonA, balanceB_);\\n    } else {\\n      // simple logic, no addons\\n      return _openPosition(c, balanceA_, balanceB_);\\n    }\\n  }\\n\\n  /// @notice borrow asset B under asset A, result balances should have proportions: (propA : propB)\\n  function _openPosition(RebalanceAssetsCore memory c, uint balanceA_, uint balanceB_) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    uint untouchedAmountA;\\n    bytes memory entryData = abi.encode(1, c.propA, c.propB);\\n\\n    if (balanceB_ != 0) {\\n      // we are going to use {balanceA_} as collateral\\n      // but there is some amount on {balanceB_}, so we need to keep corresponded part of {balanceA_} untouched\\n      untouchedAmountA = balanceB_ * c.alpha18 * c.propA / c.propB / 1e18;\\n\\n      // we are going to borrow B under A, so balance A must be greater then balance B\\n      // otherwise the function is called incorrectly - probably we need to borrow A under B\\n      require(untouchedAmountA <= balanceA_, AppErrors.WRONG_VALUE);\\n    }\\n\\n    AppLib.approveIfNeeded(c.assetA, balanceA_ - untouchedAmountA, address(c.converterLiquidator.converter));\\n\\n    return ConverterStrategyBaseLib.openPosition(\\n      c.converterLiquidator.converter,\\n      entryData,\\n      c.assetA,\\n      c.assetB,\\n      balanceA_ - untouchedAmountA,\\n      c.thresholdA\\n    );\\n  }\\n\\n  //endregion -------------------------------------------------- Open position\\n\\n  //region -------------------------------------------------- Little swap\\n  /// @notice Swap min amount of A to get {requiredAmountB}\\n  /// @return spentAmountIn how much the balance A has decreased\\n  /// @return receivedAmountOut how much the balance B has increased\\n  function _makeLittleSwap(\\n    RebalanceAssetsCore memory c,\\n    PricesDecs memory pd,\\n    uint balanceA_,\\n    uint requiredAmountB\\n  ) internal returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    uint amountInA = requiredAmountB * pd.prices[c.indexB] * pd.decs[c.indexA] / pd.prices[c.indexA] / pd.decs[c.indexB];\\n    // we can have some loss because of slippage\\n    // so, let's increase input amount a bit\\n    amountInA = amountInA * (100_000 + ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE) / 100_000;\\n\\n    // in practice the addition is required to pay ProfitToCover\\n    // we assume, that total addition amount is small enough, much smaller then the total balance\\n    // otherwise something is wrong: we are going to pay ProfitToCover, but we don't have enough amount on the balances.\\n    require(balanceA_ > amountInA, AppErrors.NOT_ENOUGH_BALANCE);\\n\\n    (spentAmountIn, receivedAmountOut) = ConverterStrategyBaseLib.liquidate(\\n      c.converterLiquidator.converter,\\n      c.converterLiquidator.liquidator,\\n      c.assetA,\\n      c.assetB,\\n      amountInA,\\n      ConverterStrategyBaseLib._ASSET_LIQUIDATION_SLIPPAGE,\\n      c.thresholdA,\\n      false\\n    );\\n  }\\n\\n  //endregion -------------------------------------------------- Little swap\\n\\n}\\n\",\"keccak256\":\"0x6cafb845dad647c8d8ae8b7e15ab57e9918ee5731a5d2caef7349acde2dda3e7\",\"license\":\"BUSL-1.1\"},\"contracts/libs/ConverterEntryKinds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/// @notice Utils and constants related to entryKind param of ITetuConverter.findBorrowStrategy\\nlibrary ConverterEntryKinds {\\n  /// @notice Amount of collateral is fixed. Amount of borrow should be max possible.\\n  uint constant public ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0 = 0;\\n\\n  /// @notice Split provided source amount S on two parts: C1 and C2 (C1 + C2 = S)\\n  ///         C2 should be used as collateral to make a borrow B.\\n  ///         Results amounts of C1 and B (both in terms of USD) must be in the given proportion\\n  uint constant public ENTRY_KIND_EXACT_PROPORTION_1 = 1;\\n\\n  /// @notice Borrow given amount using min possible collateral\\n  uint constant public ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2 = 2;\\n\\n  /// @notice Decode entryData, extract first uint - entry kind\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\n    if (entryData_.length == 0) {\\n      return ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0;\\n    }\\n    return abi.decode(entryData_, (uint));\\n  }\\n}\\n\",\"keccak256\":\"0xdab780e4c6b58e604dc56232bd16132a951944a543b0baa639233fdb26cdbe75\",\"license\":\"BUSL-1.1\"},\"contracts/libs/IterationPlanLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"./AppErrors.sol\\\";\\nimport \\\"./AppLib.sol\\\";\\n\\n/// @notice Support of withdraw iteration plans\\nlibrary IterationPlanLib {\\n\\n//region ------------------------------------------------ Constants\\n  /// @notice Swap collateral asset to get required amount-to-repay, then repay and get more collateral back.\\n  ///         It tries to minimizes count of repay-operations.\\n  ///         If there are no debts, swap leftovers to get required proportions of the asset.\\n  ///         This mode is intended i.e. for \\\"withdraw all\\\"\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                     The assets should be swapped to get following result proportions:\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\n  ///                     Pass type(uint).max to read proportions from the pool.\\n  uint constant public PLAN_SWAP_REPAY = 0;\\n\\n  /// @notice Repay available amount-to-repay, swap all or part of collateral to borrowed-asset, make one repay if needed.\\n  ///         Swap + second repay tries to make asset balances to proportions required by the pool.\\n  ///         Proportions are read from pool through IPoolProportionsProvider(this) and re-read after swapping.\\n  ///         This mode is intended i.e. for rebalancing debts using single iteration.\\n  ///         (uint256, uint256, uint256) - (entry kind, propNotUnderlying18, required-amount-to-reduce-the-debt)\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                     The assets should be swapped to get following result proportions:\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\n  ///                     Pass type(uint).max to read proportions from the pool.\\n  uint constant public PLAN_REPAY_SWAP_REPAY = 1;\\n\\n  /// @notice Swap leftovers to required proportions, don't repay any debts\\n  ///         (uint256, uint256) - (entry kind, propNotUnderlying18)\\n  /// propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                     The assets should be swapped to get following result proportions:\\n  ///                     not-underlying : underlying === propNotUnderlying18 : (1e18 - propNotUnderlying18)\\n  ///                     Pass type(uint).max to read proportions from the pool.\\n  uint constant public PLAN_SWAP_ONLY = 2;\\n//endregion ------------------------------------------------ Constants\\n\\n//region ------------------------------------------------ Data types\\n  /// @notice Set of parameters required to liquidation through aggregators\\n  struct SwapRepayPlanParams {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n\\n    /// @notice Assets used by depositor stored as following way: [underlying, not-underlying]\\n    address[] tokens;\\n\\n    /// @notice Liquidation thresholds for the {tokens}\\n    uint[] liquidationThresholds;\\n\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\n    uint[] prices;\\n    /// @notice 10**decimal for the assets\\n    uint[] decs;\\n\\n    /// @notice Amounts that will be received on balance before execution of the plan.\\n    uint[] balanceAdditions;\\n\\n    /// @notice Plan kind extracted from entry data, see {IterationPlanKinds}\\n    uint planKind;\\n\\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n    ///         The leftovers should be swapped to get following result proportions of the assets:\\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\n    uint propNotUnderlying18;\\n\\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\\n    bool usePoolProportions;\\n\\n    /// @notice \\\"required-amount-to-reduce-debt\\\" in the case of REPAY-SWAP-REPAY, zero in other cases\\n    uint entryDataParam;\\n  }\\n\\n  struct GetIterationPlanLocal {\\n    /// @notice Underlying balance\\n    uint assetBalance;\\n    /// @notice Not-underlying balance\\n    uint tokenBalance;\\n\\n    uint totalDebt;\\n    uint totalCollateral;\\n\\n    uint debtReverse;\\n    uint collateralReverse;\\n\\n    address asset;\\n    address token;\\n\\n    bool swapLeftoversNeeded;\\n  }\\n\\n  struct EstimateSwapAmountForRepaySwapRepayLocal {\\n    uint x;\\n    uint y;\\n    uint bA1;\\n    uint bB1;\\n    uint alpha;\\n    uint swapRatio;\\n    uint aB3;\\n    uint cA1;\\n    uint cB1;\\n    uint aA2;\\n  }\\n//endregion ------------------------------------------------ Data types\\n\\n  /// @notice Decode entryData, extract first uint - entry kind\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\n    if (entryData_.length == 0) {\\n      return PLAN_SWAP_REPAY;\\n    }\\n    return abi.decode(entryData_, (uint));\\n  }\\n\\n//region ------------------------------------------------ Build plan\\n  /// @notice Build plan to make single iteration of withdraw according to the selected plan\\n  ///         The goal is to withdraw {requestedAmount} and receive {asset}:{token} in proper proportions on the balance\\n  /// @param converterLiquidator [TetuConverter, TetuLiquidator]\\n  /// @param tokens List of the pool tokens. One of them is underlying and one of then is not-underlying\\n  ///               that we are going to withdraw\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}. If amount is less then the threshold,\\n  ///                              we cannot swap it.\\n  /// @param prices Prices of the {tokens}, decimals 18, [$/token]\\n  /// @param decs 10**decimal for each token of the {tokens}\\n  /// @param balanceAdditions Amounts that will be added to the current balances of the {tokens}\\n  ///                         to the moment of the plan execution\\n  /// @param packedData Several values packed to fixed-size array (to reduce number of params)\\n  ///    0: usePoolProportions: 1 - read proportions from the pool through IPoolProportionsProvider(this)\\n  ///    1: planKind: selected plan, one of PLAN_XXX\\n  ///    2: propNotUnderlying18: value of not-underlying proportion [0..1e18] if usePoolProportions == 0\\n  ///    3: requestedBalance: total amount that should be withdrawn, it can be type(uint).max\\n  ///    4: indexAsset: index of the underlying in {tokens} array\\n  ///    5: indexToken: index of the token in {tokens} array. We are going to withdraw the token and convert it to the asset\\n  ///    6: entryDataParam: required-amount-to-reduce-debt in REPAY-SWAP-REPAY case; zero in other cases\\n  function buildIterationPlan(\\n    address[2] memory converterLiquidator,\\n    address[] memory tokens,\\n    uint[] memory liquidationThresholds,\\n    uint[] memory prices,\\n    uint[] memory decs,\\n    uint[] memory balanceAdditions,\\n    uint[7] memory packedData\\n  ) external returns (\\n    uint indexToSwapPlus1,\\n    uint amountToSwap,\\n    uint indexToRepayPlus1\\n  ) {\\n    return _buildIterationPlan(\\n      SwapRepayPlanParams({\\n        converter: ITetuConverter(converterLiquidator[0]),\\n        liquidator: ITetuLiquidator(converterLiquidator[1]),\\n        tokens: tokens,\\n        liquidationThresholds: liquidationThresholds,\\n        prices: prices,\\n        decs: decs,\\n        balanceAdditions: balanceAdditions,\\n        planKind: packedData[1],\\n        propNotUnderlying18: packedData[2],\\n        usePoolProportions: packedData[0] != 0,\\n        entryDataParam: packedData[6]\\n      }),\\n      packedData[3],\\n      packedData[4],\\n      packedData[5]\\n    );\\n  }\\n\\n  /// @notice Generate plan for next withdraw iteration. We can do only one swap per iteration.\\n  ///         In general, we cam make 1) single swap (direct or reverse) and 2) repay\\n  ///         Swap is required to get required repay-amount OR to swap leftovers on final iteration.\\n  /// @param requestedBalance Amount of underlying that we need to have on balance after executing the plan.\\n  /// @param indexAsset Index of the underlying in {p.tokens} array\\n  /// @param indexToken Index of the not-underlying in {p.tokens} array\\n  /// @return indexToSwapPlus1 1-based index of the token to be swapped; 0 means swap is not required.\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap\\n  /// @return indexToRepayPlus1 1-based index of the token that should be used to repay borrow in converter.\\n  ///                            0 - no repay is required - it means that this is a last step with swapping leftovers.\\n  function _buildIterationPlan(\\n    SwapRepayPlanParams memory p,\\n    uint requestedBalance,\\n    uint indexAsset,\\n    uint indexToken\\n  ) internal returns (\\n    uint indexToSwapPlus1,\\n    uint amountToSwap,\\n    uint indexToRepayPlus1\\n  ) {\\n    GetIterationPlanLocal memory v;\\n    v.asset = p.tokens[indexAsset];\\n    v.token = p.tokens[indexToken];\\n\\n    v.assetBalance = IERC20(v.asset).balanceOf(address(this)) + p.balanceAdditions[indexAsset];\\n    v.tokenBalance = IERC20(p.tokens[indexToken]).balanceOf(address(this)) + p.balanceAdditions[indexToken];\\n\\n    if (p.planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\\n      v.swapLeftoversNeeded = true;\\n    } else {\\n      uint requestedAmount = requestedBalance == type(uint).max\\n        ? type(uint).max\\n        : AppLib.sub0(requestedBalance, v.assetBalance);\\n\\n      if (requestedAmount < p.liquidationThresholds[indexAsset]) {\\n        // we don't need to repay any debts anymore, but we should swap leftovers\\n        v.swapLeftoversNeeded = true;\\n      } else {\\n        // we need to increase balance on the following amount: requestedAmount - v.balance;\\n        // we can have two possible borrows:\\n        // 1) direct (p.tokens[INDEX_ASSET] => tokens[i]) and 2) reverse (tokens[i] => p.tokens[INDEX_ASSET])\\n        // normally we can have only one of them, not both..\\n        // but better to take into account possibility to have two debts simultaneously\\n\\n        // reverse debt\\n        (v.debtReverse, v.collateralReverse) = p.converter.getDebtAmountCurrent(address(this), v.token, v.asset, true);\\n        if (v.debtReverse < AppLib.DUST_AMOUNT_TOKENS) { // there is reverse debt or the reverse debt is dust debt\\n          // direct debt\\n          (v.totalDebt, v.totalCollateral) = p.converter.getDebtAmountCurrent(address(this), v.asset, v.token, true);\\n\\n          if (v.totalDebt < AppLib.DUST_AMOUNT_TOKENS) { // there is direct debt or the direct debt is dust debt\\n            // This is final iteration - we need to swap leftovers and get amounts on balance in proper proportions.\\n            // The leftovers should be swapped to get following result proportions of the assets:\\n            //      underlying : not-underlying === 1e18 - propNotUnderlying18 : propNotUnderlying18\\n            v.swapLeftoversNeeded = true;\\n          } else {\\n            // repay direct debt\\n            if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\n                p,\\n                [v.assetBalance, v.tokenBalance],\\n                [indexAsset, indexToken],\\n                p.propNotUnderlying18,\\n                [v.totalCollateral, v.totalDebt],\\n                p.entryDataParam\\n              );\\n            } else {\\n              (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\n                requestedAmount,\\n                p,\\n                v.totalCollateral,\\n                v.totalDebt,\\n                indexAsset,\\n                indexToken,\\n                v.assetBalance,\\n                v.tokenBalance\\n              );\\n            }\\n          }\\n        } else {\\n          // repay reverse debt\\n          if (p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY) {\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanRepaySwapRepay(\\n              p,\\n              [v.tokenBalance, v.assetBalance],\\n              [indexToken, indexAsset],\\n              1e18 - p.propNotUnderlying18,\\n              [v.collateralReverse, v.debtReverse],\\n              p.entryDataParam\\n            );\\n          } else {\\n            (indexToSwapPlus1, amountToSwap, indexToRepayPlus1) = _buildPlanForSellAndRepay(\\n              requestedAmount == type(uint).max\\n                ? type(uint).max\\n                : requestedAmount * p.prices[indexAsset] * p.decs[indexToken] / p.prices[indexToken] / p.decs[indexAsset],\\n              p,\\n              v.collateralReverse,\\n              v.debtReverse,\\n              indexToken,\\n              indexAsset,\\n              v.tokenBalance,\\n              v.assetBalance\\n            );\\n          }\\n        }\\n      }\\n    }\\n\\n    if (v.swapLeftoversNeeded) {\\n      (indexToSwapPlus1, amountToSwap) = _buildPlanForLeftovers(p, v.assetBalance, v.tokenBalance, indexAsset, indexToken, p.propNotUnderlying18);\\n    }\\n\\n    return (indexToSwapPlus1, amountToSwap, indexToRepayPlus1);\\n  }\\n\\n  /// @notice Repay B, get collateral A, then swap A => B, [make one more repay B] => get A:B in required proportions\\n  /// @param balancesAB [balanceA, balanceB]\\n  /// @param idxAB [indexA, indexB]\\n  /// @param totalAB [totalCollateralA, totalBorrowB]\\n  /// @param requiredAmountToReduceDebt If not zero: we are going to make repay-swap-repay to reduce total\\n  ///        debt on the given amount. So, if possible it worth to make swap in such a way as to reduce\\n  ///        the amount of debt by the given amount.\\n  function _buildPlanRepaySwapRepay(\\n    SwapRepayPlanParams memory p,\\n    uint[2] memory balancesAB,\\n    uint[2] memory idxAB,\\n    uint propB,\\n    uint[2] memory totalAB,\\n    uint requiredAmountToReduceDebt\\n  ) internal returns (\\n    uint indexToSwapPlus1,\\n    uint amountToSwap,\\n    uint indexToRepayPlus1\\n  ) {\\n    // use all available tokenB to repay debt and receive as much as possible tokenA\\n    uint amountToRepay = Math.min(balancesAB[1], totalAB[1]);\\n\\n    uint collateralAmount;\\n    if (amountToRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\n      uint swappedAmountOut;\\n      //\\n      (collateralAmount, swappedAmountOut) = p.converter.quoteRepay(address(this), p.tokens[idxAB[0]], p.tokens[idxAB[1]], amountToRepay);\\n      if (collateralAmount > swappedAmountOut) { // SCB-789\\n        collateralAmount -= swappedAmountOut;\\n      }\\n    } else {\\n      amountToRepay = 0;\\n    }\\n\\n    // swap A to B: full or partial\\n    amountToSwap = estimateSwapAmountForRepaySwapRepay(\\n      p,\\n      balancesAB[0],\\n      balancesAB[1],\\n      idxAB[0],\\n      idxAB[1],\\n      propB,\\n      totalAB[0],\\n      totalAB[1],\\n      collateralAmount,\\n      amountToRepay\\n    );\\n\\n    if (requiredAmountToReduceDebt != 0) {\\n      // probably it worth to increase amount to swap?\\n      uint requiredAmountToSwap = requiredAmountToReduceDebt * p.prices[idxAB[1]] * p.decs[idxAB[0]] / p.prices[idxAB[0]] / p.decs[idxAB[1]];\\n      amountToSwap = Math.max(amountToSwap, requiredAmountToSwap);\\n      amountToSwap = Math.min(amountToSwap, balancesAB[0] + collateralAmount);\\n    }\\n\\n    return (idxAB[0] + 1, amountToSwap, idxAB[1] + 1);\\n  }\\n\\n  /// @notice Estimate swap amount for iteration \\\"repay-swap-repay\\\"\\n  ///         The iteration should give us amounts of assets in required proportions.\\n  ///         There are two cases here: full swap and partial swap. Second repay is not required if the swap is partial.\\n  /// @param collateralA Estimated value of collateral A received after repay balanceB\\n  /// @return amount of token A to be swapped\\n  function estimateSwapAmountForRepaySwapRepay(\\n    SwapRepayPlanParams memory p,\\n    uint balanceA,\\n    uint balanceB,\\n    uint indexA,\\n    uint indexB,\\n    uint propB,\\n    uint totalCollateralA,\\n    uint totalBorrowB,\\n    uint collateralA,\\n    uint amountToRepayB\\n  ) internal pure returns(uint) {\\n    // N - number of the state\\n    // bAN, bBN - balances of A and B; aAN, aBN - amounts of A and B; cAN, cBN - collateral/borrow amounts of A/B\\n    // alpha ~ cAN/cBN - estimated ratio of collateral/borrow\\n    // s = swap ratio, aA is swapped to aB, so aA = s * aB\\n    // g = split ratio, bA1 is divided on two parts: bA1 * gamma, bA1 * (1 - gamma). First part is swapped.\\n    // X = proportion of A, Y = proportion of B\\n\\n    // Formulas\\n    // aB3 = (x * bB2 - y * bA2) / (alpha * y + x)\\n    // gamma = (y * bA1 - x * bB1) / (bA1 * (x * s + y))\\n\\n    // There are following stages:\\n    // 0. init (we have at least not zero amount of B and not zero debt of B)\\n    // 1. repay 1 (repay all available amount of B OR all available debt)\\n    // 2. swap (swap A fully or partially to B)\\n    // 3. repay 2 (optional: we need this stage if full swap produces amount of B that is <= available debt)\\n    // 4. final (we have assets in right proportion on the balance)\\n    EstimateSwapAmountForRepaySwapRepayLocal memory v;\\n    v.x = 1e18 - propB;\\n    v.y = propB;\\n\\n// 1. repay 1\\n    // convert amounts A, amounts B to cost A, cost B in USD\\n    v.bA1 = (balanceA + collateralA) * p.prices[indexA] / p.decs[indexA];\\n    v.bB1 = (balanceB - amountToRepayB) * p.prices[indexB] / p.decs[indexB];\\n    v.cB1 = (totalBorrowB - amountToRepayB) * p.prices[indexB] / p.decs[indexB];\\n    v.alpha = 1e18 * totalCollateralA * p.prices[indexA] * p.decs[indexB]\\n      / p.decs[indexA] / p.prices[indexB] / totalBorrowB; // (!) approx estimation\\n\\n// 2. full swap\\n    v.aA2 = v.bA1;\\n    v.swapRatio = 1e18; // we assume swap ratio 1:1\\n\\n// 3. repay 2\\n    // aB3 = (x * bB2 - Y * bA2) / (alpha * y + x)\\n    v.aB3 = (\\n      v.x * (v.bB1 + v.aA2 * v.swapRatio / 1e18)    // bB2 = v.bB1 + v.aA2 * v.s / 1e18\\n      - v.y * (v.bA1 - v.aA2)                       // bA2 = v.bA1 - v.aA2;\\n    ) / (v.y * v.alpha / 1e18 + v.x);\\n\\n    if (v.aB3 > v.cB1) {\\n      // there is not enough debt to make second repay\\n      // we need to make partial swap and receive assets in right proportions in result\\n      // v.gamma = 1e18 * (v.y * v.bA1 - v.x * v.bB1) / (v.bA1 * (v.x * v.s / 1e18 + v.y));\\n      v.aA2 = v.bA1 * (v.y * v.bA1 - v.x * v.bB1) / (v.bA1 * (v.x * v.swapRatio / 1e18 + v.y));\\n    }\\n\\n    return v.aA2 * p.decs[indexA] / p.prices[indexA];\\n  }\\n\\n  /// @notice Prepare a plan to swap leftovers to required proportion\\n  /// @param balanceA Balance of token A, i.e. underlying\\n  /// @param balanceB Balance of token B, i.e. not-underlying\\n  /// @param indexA Index of the token A, i.e. underlying, in {p.prices} and {p.decs}\\n  /// @param indexB Index of the token B, i.e. not-underlying, in {p.prices} and {p.decs}\\n  /// @param propB Required proportion of TokenB [0..1e18]. Proportion of token A is (1e18-propB)\\n  /// @return indexTokenToSwapPlus1 Index of the token to be swapped. 0 - no swap is required\\n  /// @return amountToSwap Amount to be swapped. 0 - no swap is required\\n  function _buildPlanForLeftovers(\\n    SwapRepayPlanParams memory p,\\n    uint balanceA,\\n    uint balanceB,\\n    uint indexA,\\n    uint indexB,\\n    uint propB\\n  ) internal pure returns (\\n    uint indexTokenToSwapPlus1,\\n    uint amountToSwap\\n  ) {\\n    (uint targetA, uint targetB) = _getTargetAmounts(p.prices, p.decs, balanceA, balanceB, propB, indexA, indexB);\\n    if (balanceA < targetA) {\\n      // we need to swap not-underlying to underlying\\n      if (balanceB - targetB > p.liquidationThresholds[indexB]) {\\n        amountToSwap = balanceB - targetB;\\n        indexTokenToSwapPlus1 = indexB + 1;\\n      }\\n    } else {\\n      // we need to swap underlying to not-underlying\\n      if (balanceA - targetA > p.liquidationThresholds[indexA]) {\\n        amountToSwap = balanceA - targetA;\\n        indexTokenToSwapPlus1 = indexA + 1;\\n      }\\n    }\\n    return (indexTokenToSwapPlus1, amountToSwap);\\n  }\\n\\n  /// @notice Prepare a plan to swap some amount of collateral to get required repay-amount and make repaying\\n  ///         1) Sell collateral-asset to get missed amount-to-repay 2) make repay and get more collateral back\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount.\\n  /// @param totalCollateral Total amount of collateral used in the borrow\\n  /// @param totalDebt Total amount of debt that should be repaid to receive {totalCollateral}\\n  /// @param indexCollateral Index of collateral asset in {p.prices}, {p.decs}\\n  /// @param indexBorrow Index of borrow asset in {p.prices}, {p.decs}\\n  /// @param balanceCollateral Current balance of the collateral asset\\n  /// @param balanceBorrow Current balance of the borrowed asset\\n  /// @param indexTokenToSwapPlus1 1-based index of the token to be swapped. Swap of amount of collateral asset can be required\\n  ///                              to receive missed amount-to-repay. 0 - no swap is required\\n  /// @param amountToSwap Amount to be swapped. 0 - no swap is required\\n  /// @param indexRepayTokenPlus1 1-based index of the token to be repaied. 0 - no repaying is required\\n  function _buildPlanForSellAndRepay(\\n    uint requestedAmount,\\n    SwapRepayPlanParams memory p,\\n    uint totalCollateral,\\n    uint totalDebt,\\n    uint indexCollateral,\\n    uint indexBorrow,\\n    uint balanceCollateral,\\n    uint balanceBorrow\\n  ) internal pure returns (\\n    uint indexTokenToSwapPlus1,\\n    uint amountToSwap,\\n    uint indexRepayTokenPlus1\\n  ) {\\n    // what amount of collateral we should sell to get required amount-to-pay to pay the debt\\n    uint toSell = _getAmountToSell(\\n      requestedAmount,\\n      totalDebt,\\n      totalCollateral,\\n      p.prices,\\n      p.decs,\\n      indexCollateral,\\n      indexBorrow,\\n      balanceBorrow\\n    );\\n\\n    // convert {toSell} amount of underlying to token\\n    if (toSell != 0 && balanceCollateral != 0) {\\n      toSell = Math.min(toSell, balanceCollateral);\\n      uint threshold = p.liquidationThresholds[indexCollateral];\\n      if (toSell > threshold) {\\n        amountToSwap = toSell;\\n        indexTokenToSwapPlus1 = indexCollateral + 1;\\n      } else {\\n        // we need to sell amount less than the threshold, it's not allowed\\n        // but it's dangerous to just ignore the selling because there is a chance to have error 35\\n        // (There is a debt $3.29, we make repay $3.27 => error 35)\\n        // it would be safer to sell a bit more amount if it's possible\\n        if (balanceCollateral >= threshold + 1) {\\n          amountToSwap = threshold + 1;\\n          indexTokenToSwapPlus1 = indexCollateral + 1;\\n        }\\n      }\\n    }\\n\\n    return (indexTokenToSwapPlus1, amountToSwap, indexBorrow + 1);\\n  }\\n\\n  /// @notice Calculate what balances of underlying and not-underlying we need to fit {propNotUnderlying18}\\n  /// @param prices Prices of underlying and not underlying\\n  /// @param decs 10**decimals for underlying and not underlying\\n  /// @param assetBalance Current balance of underlying\\n  /// @param tokenBalance Current balance of not-underlying\\n  /// @param propNotUnderlying18 Required proportion of not-underlying [0..1e18]\\n  ///                            Proportion of underlying would be (1e18 - propNotUnderlying18)\\n  /// @param targetAssets What result balance of underlying is required to fit to required proportions\\n  /// @param targetTokens What result balance of not-underlying is required to fit to required proportions\\n  function _getTargetAmounts(\\n    uint[] memory prices,\\n    uint[] memory decs,\\n    uint assetBalance,\\n    uint tokenBalance,\\n    uint propNotUnderlying18,\\n    uint indexAsset,\\n    uint indexToken\\n  ) internal pure returns (\\n    uint targetAssets,\\n    uint targetTokens\\n  ) {\\n    uint costAssets = assetBalance * prices[indexAsset] / decs[indexAsset];\\n    uint costTokens = tokenBalance * prices[indexToken] / decs[indexToken];\\n    targetTokens = propNotUnderlying18 == 0\\n      ? 0\\n      : ((costAssets + costTokens) * propNotUnderlying18 / 1e18);\\n    targetAssets = ((costAssets + costTokens) - targetTokens) * decs[indexAsset] / prices[indexAsset];\\n    targetTokens = targetTokens * decs[indexToken] / prices[indexToken];\\n  }\\n\\n  /// @notice What amount of collateral should be sold to pay the debt and receive {requestedAmount}\\n  /// @dev It doesn't allow to sell more than the amount of total debt in the borrow\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount\\n  /// @param totalDebt Total debt of the borrow in terms of borrow asset\\n  /// @param totalCollateral Total collateral of the borrow in terms of collateral asset\\n  /// @param prices Cost of $1 in terms of the asset, decimals 18\\n  /// @param decs 10**decimals for each asset\\n  /// @param indexCollateral Index of the collateral asset in {prices} and {decs}\\n  /// @param indexBorrowAsset Index of the borrow asset in {prices} and {decs}\\n  /// @param balanceBorrowAsset Available balance of the borrow asset, it will be used to cover the debt\\n  /// @return amountOut Amount of collateral-asset that should be sold\\n  function _getAmountToSell(\\n    uint requestedAmount,\\n    uint totalDebt,\\n    uint totalCollateral,\\n    uint[] memory prices,\\n    uint[] memory decs,\\n    uint indexCollateral,\\n    uint indexBorrowAsset,\\n    uint balanceBorrowAsset\\n  ) internal pure returns (\\n    uint amountOut\\n  ) {\\n    if (totalDebt != 0) {\\n      if (balanceBorrowAsset != 0) {\\n        // there is some borrow asset on balance\\n        // it will be used to cover the debt\\n        // let's reduce the size of totalDebt/Collateral to exclude balanceBorrowAsset\\n        uint sub = Math.min(balanceBorrowAsset, totalDebt);\\n        totalCollateral -= totalCollateral * sub / totalDebt;\\n        totalDebt -= sub;\\n      }\\n\\n      // for definiteness: usdc - collateral asset, dai - borrow asset\\n      // Pc = price of the USDC, Pb = price of the DAI, alpha = Pc / Pb [DAI / USDC]\\n      // S [USDC] - amount to sell, R [DAI] = alpha * S - amount to repay\\n      // After repaying R we get: alpha * S * C / R\\n      // Balance should be increased on: requestedAmount = alpha * S * C / R - S\\n      // So, we should sell: S = requestedAmount / (alpha * C / R - 1))\\n      // We can lost some amount on liquidation of S => R, so we need to use some gap = {GAP_AMOUNT_TO_SELL}\\n      // Same formula: S * h = S + requestedAmount, where h = health factor => s = requestedAmount / (h - 1)\\n      // h = alpha * C / R\\n      uint alpha18 = prices[indexCollateral] * decs[indexBorrowAsset] * 1e18\\n        / prices[indexBorrowAsset] / decs[indexCollateral];\\n\\n      // if totalCollateral is zero (liquidation happens) we will have zero amount (the debt shouldn't be paid)\\n      amountOut = totalDebt != 0 && alpha18 * totalCollateral / totalDebt > 1e18\\n        ? Math.min(requestedAmount, totalCollateral) * 1e18 / (alpha18 * totalCollateral / totalDebt - 1e18)\\n        : 0;\\n\\n      if (amountOut != 0) {\\n        // we shouldn't try to sell amount greater than amount of totalDebt in terms of collateral asset\\n        // but we always asks +1% because liquidation results can be different a bit from expected\\n        amountOut = (AppLib.GAP_CONVERSION + AppLib.DENOMINATOR) * Math.min(amountOut, totalDebt * 1e18 / alpha18) / AppLib.DENOMINATOR;\\n      }\\n    }\\n\\n    return amountOut;\\n  }\\n//endregion ------------------------------------------------ Build plan\\n}\\n\",\"keccak256\":\"0xc6864acaa89f4fa3d63898f018836ef04b11e4a972344a62a3dfa51f13ee08f2\",\"license\":\"BUSL-1.1\"},\"contracts/libs/TokenAmountsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./AppErrors.sol\\\";\\n\\n/// @title Library for clearing / joining token addresses & amounts arrays\\n/// @author bogdoslav\\nlibrary TokenAmountsLib {\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string internal constant TOKEN_AMOUNTS_LIB_VERSION = \\\"1.0.1\\\";\\n\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n    unchecked {\\n      return i + 1;\\n    }\\n  }\\n\\n  function filterZeroAmounts(\\n    address[] memory tokens,\\n    uint[] memory amounts\\n  ) internal pure returns (\\n    address[] memory t,\\n    uint[] memory a\\n  ) {\\n    require(tokens.length == amounts.length, AppErrors.INCORRECT_LENGTHS);\\n    uint len2 = 0;\\n    uint len = tokens.length;\\n    for (uint i = 0; i < len; i++) {\\n      if (amounts[i] != 0) len2++;\\n    }\\n\\n    t = new address[](len2);\\n    a = new uint[](len2);\\n\\n    uint j = 0;\\n    for (uint i = 0; i < len; i++) {\\n      uint amount = amounts[i];\\n      if (amount != 0) {\\n        t[j] = tokens[i];\\n        a[j] = amount;\\n        j++;\\n      }\\n    }\\n  }\\n\\n  /// @notice unites three arrays to single array without duplicates, amounts are sum, zero amounts are allowed\\n  function combineArrays(\\n    address[] memory tokens0,\\n    uint[] memory amounts0,\\n    address[] memory tokens1,\\n    uint[] memory amounts1,\\n    address[] memory tokens2,\\n    uint[] memory amounts2\\n  ) internal pure returns (\\n    address[] memory allTokens,\\n    uint[] memory allAmounts\\n  ) {\\n    uint[] memory lens = new uint[](3);\\n    lens[0] = tokens0.length;\\n    lens[1] = tokens1.length;\\n    lens[2] = tokens2.length;\\n\\n    require(\\n      lens[0] == amounts0.length && lens[1] == amounts1.length && lens[2] == amounts2.length,\\n      AppErrors.INCORRECT_LENGTHS\\n    );\\n\\n    uint maxLength = lens[0] + lens[1] + lens[2];\\n    address[] memory tokensOut = new address[](maxLength);\\n    uint[] memory amountsOut = new uint[](maxLength);\\n    uint unitedLength;\\n\\n    for (uint step; step < 3; ++step) {\\n      uint[] memory amounts = step == 0\\n        ? amounts0\\n        : (step == 1\\n          ? amounts1\\n          : amounts2);\\n      address[] memory tokens = step == 0\\n        ? tokens0\\n        : (step == 1\\n          ? tokens1\\n          : tokens2);\\n      for (uint i1 = 0; i1 < lens[step]; i1++) {\\n        uint amount1 = amounts[i1];\\n        address token1 = tokens[i1];\\n        bool united = false;\\n\\n        for (uint i = 0; i < unitedLength; i++) {\\n          if (token1 == tokensOut[i]) {\\n            amountsOut[i] += amount1;\\n            united = true;\\n            break;\\n          }\\n        }\\n\\n        if (!united) {\\n          tokensOut[unitedLength] = token1;\\n          amountsOut[unitedLength] = amount1;\\n          unitedLength++;\\n        }\\n      }\\n    }\\n\\n    // copy united tokens to result array\\n    allTokens = new address[](unitedLength);\\n    allAmounts = new uint[](unitedLength);\\n    for (uint i; i < unitedLength; i++) {\\n      allTokens[i] = tokensOut[i];\\n      allAmounts[i] = amountsOut[i];\\n    }\\n\\n  }\\n}\\n\",\"keccak256\":\"0xaf9a3fd1b25e58d6b854d64061ab8508bd9a6d00241f6399ffb6748e9c992ac8\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/ConverterStrategyBaseLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib2.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"../libs/AppErrors.sol\\\";\\nimport \\\"../libs/AppLib.sol\\\";\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\nimport \\\"../libs/IterationPlanLib.sol\\\";\\nimport \\\"../interfaces/IConverterStrategyBase.sol\\\";\\n\\nlibrary ConverterStrategyBaseLib {\\n  using SafeERC20 for IERC20;\\n\\n//region--------------------------------------------------- Data types\\n\\n  /// @notice Local vars for {_recycle}, workaround for stack too deep\\n  struct RecycleLocalParams {\\n    /// @notice Compound amount + Performance amount\\n    uint amountCP;\\n    /// @notice Amount to compound\\n    uint amountC;\\n    /// @notice Amount to send to performance and insurance\\n    uint amountP;\\n    /// @notice Amount to forwarder + amount to compound\\n    uint amountFC;\\n    address rewardToken;\\n    uint len;\\n    uint receivedAmountOut;\\n  }\\n\\n  struct OpenPositionLocal {\\n    uint entryKind;\\n    address[] converters;\\n    uint[] collateralsRequired;\\n    uint[] amountsToBorrow;\\n    uint collateral;\\n    uint amountToBorrow;\\n  }\\n\\n  struct OpenPositionEntryKind1Local {\\n    address[] converters;\\n    uint[] collateralsRequired;\\n    uint[] amountsToBorrow;\\n    uint collateral;\\n    uint amountToBorrow;\\n    uint c1;\\n    uint c3;\\n    uint alpha;\\n  }\\n\\n  struct SwapToGetAmountLocal {\\n    uint len;\\n    uint[] prices;\\n    uint[] decs;\\n  }\\n\\n  struct ConvertAfterWithdrawLocal {\\n    address asset;\\n    uint spent;\\n    uint received;\\n    uint balance;\\n    uint balanceBefore;\\n    uint len;\\n  }\\n\\n  struct SwapToGivenAmountInputParams {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n    uint targetAmount;\\n    address[] tokens;\\n    uint[] amounts;\\n    /// @notice liquidationThresholds for the {tokens}\\n    uint[] liquidationThresholds;\\n    uint indexTargetAsset;\\n    address underlying;\\n    /// @notice Allow to swap more then required (i.e. 1_000 => +1%)\\n    ///         to avoid additional swap if the swap return amount a bit less than we expected\\n    uint overswap;\\n  }\\n\\n  struct SwapToGivenAmountLocal {\\n    uint len;\\n    uint[] availableAmounts;\\n    uint i;\\n  }\\n\\n  struct CloseDebtsForRequiredAmountLocal {\\n    address asset;\\n    uint balanceAsset;\\n    uint balanceToken;\\n\\n    uint newBalanceAsset;\\n    uint newBalanceToken;\\n\\n    uint idxToSwap1;\\n    uint amountToSwap;\\n    uint idxToRepay1;\\n\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\n    uint[] prices;\\n    /// @notice 10**decimal for the assets\\n    uint[] decs;\\n\\n    /// @notice Amounts that will be received on balance before execution of the plan.\\n    uint[] balanceAdditions;\\n\\n    /// @notice Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n    ///         The leftovers should be swapped to get following result proportions of the assets:\\n    ///         not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\n    uint propNotUnderlying18;\\n\\n    /// @notice proportions should be taken from the pool and re-read from the pool after each swap\\n    bool usePoolProportions;\\n\\n    bool exitLoop;\\n  }\\n\\n  struct DataSetLocal {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n    /// @notice Tokens received from {_depositorPoolAssets}\\n    address[] tokens;\\n    /// @notice Index of the main asset in {tokens}\\n    uint indexAsset;\\n    /// @notice Length of {tokens}\\n    uint len;\\n  }\\n\\n  struct RecycleLocal {\\n    address asset;\\n    uint compoundRatio;\\n    uint performanceFee;\\n    /// @notice // total amount for the performance receiver and insurance\\n    uint amountPerf;\\n    uint toPerf;\\n    uint toInsurance;\\n    uint[] amountsToForward;\\n    uint[] thresholds;\\n    int debtToInsuranceCurrent;\\n    int debtToInsuranceUpdated;\\n    address splitter;\\n  }\\n\\n  /// @notice Input params for _recycle\\n  struct RecycleParams {\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n    address splitter;\\n\\n    /// @notice Underlying asset\\n    address asset;\\n    /// @notice Compound ration in the range [0...COMPOUND_DENOMINATOR]\\n    uint compoundRatio;\\n    /// @notice tokens received from {_depositorPoolAssets}\\n    address[] tokens;\\n    /// @notice Liquidation thresholds for rewards tokens\\n    uint[] thresholds;\\n    /// @notice Full list of reward tokens received from tetuConverter and depositor\\n    address[] rewardTokens;\\n    /// @notice Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\n    uint[] rewardAmounts;\\n    /// @notice Performance fee in the range [0...FEE_DENOMINATOR]\\n    uint performanceFee;\\n    /// @notice Current debt to the insurance [in underlying]\\n    int debtToInsurance;\\n    /// @notice Liquidation threshold for the {asset}\\n    uint assetThreshold;\\n  }\\n//endregion--------------------------------------------------- Data types\\n\\n//region--------------------------------------------------- Constants\\n\\n  /// @notice approx one month for average block time 2 sec\\n  uint internal constant _LOAN_PERIOD_IN_BLOCKS = 30 days / 2;\\n  uint internal constant _REWARD_LIQUIDATION_SLIPPAGE = 5_000; // 5%\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\n  uint internal constant PRICE_IMPACT_TOLERANCE = 300;\\n  /// @notice borrow/collateral amount cannot be less than given number of tokens\\n  uint internal constant DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD = 10;\\n  /// @notice Allow to swap more then required (i.e. 1_000 => +1%) inside {swapToGivenAmount}\\n  ///         to avoid additional swap if the swap will return amount a bit less than we expected\\n  uint internal constant OVERSWAP = PRICE_IMPACT_TOLERANCE + _ASSET_LIQUIDATION_SLIPPAGE;\\n  /// @notice During SWAP-REPAY cycle we can receive requested amount after SWAP, so, following REPAY will be skipped.\\n  ///         But we should prevent situation \\\"zero balance, not zero debts\\\".\\n  ///         So, it worth to request amount higher (on the given gap) than it's really requested.\\n  uint internal constant REQUESTED_BALANCE_GAP = 5_000; // 5%\\n//endregion--------------------------------------------------- Constants\\n\\n//region--------------------------------------------------- Events\\n  /// @notice A borrow was made\\n  event OpenPosition(\\n    address converter,\\n    address collateralAsset,\\n    uint collateralAmount,\\n    address borrowAsset,\\n    uint borrowedAmount,\\n    address recepient\\n  );\\n\\n  /// @notice Some borrow(s) was/were repaid\\n  event ClosePosition(\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountRepay,\\n    address recepient,\\n    uint returnedAssetAmountOut,\\n    uint returnedBorrowAmountOut\\n  );\\n\\n  /// @notice A liquidation was made\\n  event Liquidation(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amountIn,\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  );\\n\\n  event ReturnAssetToConverter(address asset, uint amount);\\n\\n  /// @notice Recycle was made\\n  /// @param rewardTokens Full list of reward tokens received from tetuConverter and depositor\\n  /// @param amountsToForward Amounts to be sent to forwarder\\n  event Recycle(\\n    address[] rewardTokens,\\n    uint[] amountsToForward,\\n    uint toPerf,\\n    uint toInsurance\\n  );\\n\\n  /// @notice Debt to insurance was paid by rewards\\n  /// @param debtToInsuranceBefore Initial amount of debts to the insurance, in underlying\\n  /// @param debtToInsuranceBefore Final amount of debts to the insurance, in underlying\\n  event OnPayDebtToInsurance(\\n    int debtToInsuranceBefore,\\n    int debtToInsuraneAfter\\n  );\\n\\n  /// @notice Debt to insurance was paid by a reward token\\n  /// @param debtToCover Initial amount of debt that should be covered, in underlying\\n  /// @param debtLeftovers Final amount of debt that should be covered, in underlying\\n  /// It can be negative if we paid more than required\\n  event OnCoverDebtToInsurance(\\n    address rewardToken,\\n    uint rewardAmount,\\n    uint debtToCover,\\n    int debtLeftovers\\n  );\\n//endregion---------------------------------------------------  Events\\n\\n//region--------------------------------------------------- Borrow and close positions\\n\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\n  ///         Max possible collateral should be approved before calling of this function.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\n  function openPosition(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint thresholdAmountIn_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    return _openPosition(tetuConverter_, entryData_, collateralAsset_, borrowAsset_, amountIn_, thresholdAmountIn_);\\n  }\\n\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\n  ///         Max possible collateral should be approved before calling of this function.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\n  /// @param thresholdAmountIn_ Min value of amountIn allowed for the second and subsequent conversions.\\n  ///        0 - use default min value\\n  ///        If amountIn becomes too low, no additional borrows are possible, so\\n  ///        the rest amountIn is just added to collateral/borrow amount of previous conversion.\\n  function _openPosition(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint thresholdAmountIn_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    if (thresholdAmountIn_ == 0) {\\n      // zero threshold is not allowed because round-issues are possible, see openPosition.dust test\\n      // we assume here, that it's useless to borrow amount using collateral/borrow amount\\n      // less than given number of tokens (event for BTC)\\n      thresholdAmountIn_ = DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD;\\n    }\\n    if (amountIn_ <= thresholdAmountIn_) {\\n      return (0, 0);\\n    }\\n\\n    OpenPositionLocal memory vars;\\n    // we assume here, that max possible collateral amount is already approved (as it's required by TetuConverter)\\n    vars.entryKind = ConverterEntryKinds.getEntryKind(entryData_);\\n    if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\\n      return openPositionEntryKind1(\\n        tetuConverter_,\\n        entryData_,\\n        collateralAsset_,\\n        borrowAsset_,\\n        amountIn_,\\n        thresholdAmountIn_\\n      );\\n    } else {\\n      (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\n        entryData_,\\n        collateralAsset_,\\n        amountIn_,\\n        borrowAsset_,\\n        _LOAN_PERIOD_IN_BLOCKS\\n      );\\n\\n      uint len = vars.converters.length;\\n      if (len > 0) {\\n        for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n          // we need to approve collateralAmount before the borrow-call but it's already approved, see above comments\\n          vars.collateral;\\n          vars.amountToBorrow;\\n          if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\\n            // we have exact amount of total collateral amount\\n            // Case ENTRY_KIND_EXACT_PROPORTION_1 is here too because we consider first platform only\\n            vars.collateral = amountIn_ < vars.collateralsRequired[i]\\n              ? amountIn_\\n              : vars.collateralsRequired[i];\\n            vars.amountToBorrow = amountIn_ < vars.collateralsRequired[i]\\n              ? vars.amountsToBorrow[i] * amountIn_ / vars.collateralsRequired[i]\\n              : vars.amountsToBorrow[i];\\n            amountIn_ -= vars.collateral;\\n          } else {\\n            // assume here that entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2\\n            // we have exact amount of total amount-to-borrow\\n            vars.amountToBorrow = amountIn_ < vars.amountsToBorrow[i]\\n              ? amountIn_\\n              : vars.amountsToBorrow[i];\\n            vars.collateral = amountIn_ < vars.amountsToBorrow[i]\\n              ? vars.collateralsRequired[i] * amountIn_ / vars.amountsToBorrow[i]\\n              : vars.collateralsRequired[i];\\n            amountIn_ -= vars.amountToBorrow;\\n          }\\n\\n          if (amountIn_ < thresholdAmountIn_ && amountIn_ != 0) {\\n            // dust amount is left, just leave it unused\\n            // we cannot add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\n            amountIn_ = 0;\\n          }\\n\\n          if (vars.amountToBorrow != 0) {\\n            borrowedAmountOut += tetuConverter_.borrow(\\n              vars.converters[i],\\n              collateralAsset_,\\n              vars.collateral,\\n              borrowAsset_,\\n              vars.amountToBorrow,\\n              address(this)\\n            );\\n            collateralAmountOut += vars.collateral;\\n            emit OpenPosition(\\n              vars.converters[i],\\n              collateralAsset_,\\n              vars.collateral,\\n              borrowAsset_,\\n              vars.amountToBorrow,\\n              address(this)\\n            );\\n          }\\n\\n          if (amountIn_ == 0) break;\\n        }\\n      }\\n\\n      return (collateralAmountOut, borrowedAmountOut);\\n    }\\n  }\\n\\n  /// @notice Open position using entry kind 1 - split provided amount on two parts according provided proportions\\n  /// @param amountIn_ Amount of collateral to be divided on parts. We assume {amountIn_} > 0\\n  /// @param collateralThreshold_ Min allowed collateral amount to be used for new borrow, > 0\\n  /// @return collateralAmountOut Total collateral used to borrow {borrowedAmountOut}\\n  /// @return borrowedAmountOut Total borrowed amount\\n  function openPositionEntryKind1(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint collateralThreshold_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    OpenPositionEntryKind1Local memory vars;\\n    (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\n      entryData_,\\n      collateralAsset_,\\n      amountIn_,\\n      borrowAsset_,\\n      _LOAN_PERIOD_IN_BLOCKS\\n    );\\n\\n    uint len = vars.converters.length;\\n    if (len > 0) {\\n      // we should split amountIn on two amounts with proportions x:y\\n      (, uint x, uint y) = abi.decode(entryData_, (uint, uint, uint));\\n      // calculate prices conversion ratio using price oracle, decimals 18\\n      // i.e. alpha = 1e18 * 75e6 usdc / 25e18 matic = 3e6 usdc/matic\\n      vars.alpha = _getCollateralToBorrowRatio(tetuConverter_, collateralAsset_, borrowAsset_);\\n\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        // the lending platform allows to convert {collateralsRequired[i]} to {amountsToBorrow[i]}\\n        // and give us required proportions in result\\n        // C = C1 + C2, C2 => B2, B2 * alpha = C3, C1/C3 must be equal to x/y\\n        // C1 is collateral amount left untouched (x)\\n        // C2 is collateral amount converted to B2 (y)\\n        // but if lending platform doesn't have enough liquidity\\n        // it reduces {collateralsRequired[i]} and {amountsToBorrow[i]} proportionally to fit the limits\\n        // as result, remaining C1 will be too big after conversion and we need to make another borrow\\n        vars.c3 = vars.alpha * vars.amountsToBorrow[i] / 1e18;\\n        vars.c1 = x * vars.c3 / y;\\n\\n        // we doesn't calculate an intermediate ratio cR/(cR+c1) to avoid lost of precision\\n        if ((vars.collateralsRequired[i] + vars.c1) > amountIn_) {\\n          vars.collateral = vars.collateralsRequired[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\\n          vars.amountToBorrow = vars.amountsToBorrow[i] * amountIn_ / (vars.collateralsRequired[i] + vars.c1);\\n        } else {\\n          vars.collateral = vars.collateralsRequired[i];\\n          vars.amountToBorrow = vars.amountsToBorrow[i];\\n        }\\n\\n        // skip any attempts to borrow zero amount or use too little collateral\\n        if (vars.collateral < collateralThreshold_ || vars.amountToBorrow == 0) {\\n          if (vars.collateralsRequired[i] + vars.c1 + collateralThreshold_ > amountIn_) {\\n            // The lending platform has enough resources to make the borrow but amount of the borrow is too low\\n            // Skip the borrow, leave leftover of collateral untouched\\n            break;\\n          } else {\\n            // The lending platform doesn't have enough resources to make the borrow.\\n            // We should try to make borrow on the next platform (if any)\\n            continue;\\n          }\\n        }\\n\\n        require(\\n          tetuConverter_.borrow(\\n            vars.converters[i],\\n            collateralAsset_,\\n            vars.collateral,\\n            borrowAsset_,\\n            vars.amountToBorrow,\\n            address(this)\\n          ) == vars.amountToBorrow,\\n          StrategyLib2.WRONG_VALUE\\n        );\\n        emit OpenPosition(\\n          vars.converters[i],\\n          collateralAsset_,\\n          vars.collateral,\\n          borrowAsset_,\\n          vars.amountToBorrow,\\n          address(this)\\n        );\\n\\n        borrowedAmountOut += vars.amountToBorrow;\\n        collateralAmountOut += vars.collateral;\\n\\n        // calculate amount to be borrowed in the next converter\\n        vars.c3 = vars.alpha * vars.amountToBorrow / 1e18;\\n        vars.c1 = x * vars.c3 / y;\\n        amountIn_ = (amountIn_ > vars.c1 + vars.collateral)\\n          ? amountIn_ - (vars.c1 + vars.collateral)\\n          : 0;\\n\\n        // protection against dust amounts, see \\\"openPosition.dust\\\", just leave dust amount unused\\n        // we CAN NOT add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\n        // we assume here, that collateralThreshold_ != 0, so check amountIn_ != 0 is not required\\n        if (amountIn_ < collateralThreshold_) break;\\n      }\\n    }\\n\\n    return (collateralAmountOut, borrowedAmountOut);\\n  }\\n\\n  /// @notice Get ratio18 = collateral / borrow\\n  function _getCollateralToBorrowRatio(\\n    ITetuConverter converter_,\\n    address collateralAsset_,\\n    address borrowAsset_\\n  ) internal view returns (uint){\\n    IPriceOracle priceOracle = AppLib._getPriceOracle(converter_);\\n    uint priceCollateral = priceOracle.getAssetPrice(collateralAsset_);\\n    uint priceBorrow = priceOracle.getAssetPrice(borrowAsset_);\\n    return 1e18 * priceBorrow * 10 ** IERC20Metadata(collateralAsset_).decimals()\\n    / priceCollateral / 10 ** IERC20Metadata(borrowAsset_).decimals();\\n  }\\n\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\n  ///         It doesn't repay more than the actual amount of the debt, so it can use less amount than {amountToRepay}\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function _closePosition(\\n    ITetuConverter converter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) internal returns (\\n    uint returnedAssetAmountOut,\\n    uint repaidAmountOut\\n  ) {\\n\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // We shouldn't try to pay more than we actually need to repay\\n    // The leftover will be swapped inside TetuConverter, it's inefficient.\\n    // Let's limit amountToRepay by needToRepay-amount\\n    (uint needToRepay,) = converter_.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\n    uint amountRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\n\\n    return _closePositionExact(converter_, collateralAsset, borrowAsset, amountRepay, balanceBefore);\\n  }\\n\\n  /// @notice Close the given position, pay {amountRepay} exactly and ensure that all amount was accepted,\\n  /// @param amountRepay Amount to repay in terms of {borrowAsset}\\n  /// @param balanceBorrowAsset Current balance of the borrow asset\\n  /// @return collateralOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function _closePositionExact(\\n    ITetuConverter converter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountRepay,\\n    uint balanceBorrowAsset\\n  ) internal returns (\\n    uint collateralOut,\\n    uint repaidAmountOut\\n  ) {\\n    if (amountRepay >= AppLib.DUST_AMOUNT_TOKENS) {\\n      // Make full/partial repayment\\n      IERC20(borrowAsset).safeTransfer(address(converter_), amountRepay);\\n\\n      uint notUsedAmount;\\n      (collateralOut, notUsedAmount,,) = converter_.repay(collateralAsset, borrowAsset, amountRepay, address(this));\\n\\n      emit ClosePosition(collateralAsset, borrowAsset, amountRepay, address(this), collateralOut, notUsedAmount);\\n      uint balanceAfter = IERC20(borrowAsset).balanceOf(address(this));\\n\\n      // we cannot use amountRepay here because AAVE pool adapter is able to send tiny amount back (debt-gap)\\n      repaidAmountOut = balanceBorrowAsset > balanceAfter\\n        ? balanceBorrowAsset - balanceAfter\\n        : 0;\\n      require(notUsedAmount == 0, StrategyLib2.WRONG_VALUE);\\n    }\\n\\n    return (collateralOut, repaidAmountOut);\\n  }\\n\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function closePosition(\\n    ITetuConverter tetuConverter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) external returns (\\n    uint returnedAssetAmountOut,\\n    uint repaidAmountOut\\n  ) {\\n    return _closePosition(tetuConverter_, collateralAsset, borrowAsset, amountToRepay);\\n  }\\n//endregion--------------------------------------------------- Borrow and close positions\\n\\n//region--------------------------------------------------- Liquidation\\n\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator\\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\n  function liquidate(\\n    ITetuConverter converter,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    uint liquidationThresholdForTokenIn_,\\n    bool skipValidation\\n  ) external returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    return _liquidate(converter, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, liquidationThresholdForTokenIn_, skipValidation);\\n  }\\n\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\n  /// @param liquidationThresholdForTokenIn_ Liquidation threshold for {amountIn_}\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\n  /// @return spentAmountIn Amount of {tokenIn} has been consumed by the liquidator (== 0 | amountIn_)\\n  /// @return receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\n  function _liquidate(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    uint liquidationThresholdForTokenIn_,\\n    bool skipValidation\\n  ) internal returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    // we check amountIn by threshold, not amountOut\\n    // because {_closePositionsToGetAmount} is implemented in {get plan, make action}-way\\n    // {_closePositionsToGetAmount} can be used with swap by aggregators, where amountOut cannot be calculate\\n    // at the moment of plan building. So, for uniformity, only amountIn is checked everywhere\\n\\n    if (amountIn_ <= liquidationThresholdForTokenIn_) {\\n      return (0, 0);\\n    }\\n\\n    (ITetuLiquidator.PoolData[] memory route,) = liquidator_.buildRoute(tokenIn_, tokenOut_);\\n\\n    require(route.length != 0, AppErrors.NO_LIQUIDATION_ROUTE);\\n\\n    // if the expected value is higher than threshold distribute to destinations\\n    return (amountIn_, _liquidateWithRoute(converter_, route, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, skipValidation));\\n  }\\n\\n  /// @notice Make liquidation using given route and check correctness using TetuConverter's price oracle\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\n  function _liquidateWithRoute(\\n    ITetuConverter converter_,\\n    ITetuLiquidator.PoolData[] memory route,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    bool skipValidation\\n  ) internal returns (\\n    uint receivedAmountOut\\n  ) {\\n    // we need to approve each time, liquidator address can be changed in controller\\n    AppLib.approveIfNeeded(tokenIn_, amountIn_, address(liquidator_));\\n\\n    uint balanceBefore = IERC20(tokenOut_).balanceOf(address(this));\\n    liquidator_.liquidateWithRoute(route, amountIn_, slippage_);\\n    uint balanceAfter = IERC20(tokenOut_).balanceOf(address(this));\\n\\n    require(balanceAfter > balanceBefore, AppErrors.BALANCE_DECREASE);\\n    receivedAmountOut = balanceAfter - balanceBefore;\\n\\n    // Oracle in TetuConverter \\\"knows\\\" only limited number of the assets\\n    // It may not know prices for reward assets, so for rewards this validation should be skipped to avoid TC-4 error\\n    require(skipValidation || converter_.isConversionValid(tokenIn_, amountIn_, tokenOut_, receivedAmountOut, slippage_), AppErrors.PRICE_IMPACT);\\n    emit Liquidation(tokenIn_, tokenOut_, amountIn_, amountIn_, receivedAmountOut);\\n  }\\n//endregion--------------------------------------------------- Liquidation\\n\\n//region--------------------------------------------------- Recycle rewards\\n\\n  /// @notice Recycle the amounts: liquidate a part of each amount, send the other part to the forwarder.\\n  /// We have two kinds of rewards:\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\n  /// 2) any other rewards\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\n  ///   Compound-part of Rewards-2 can be liquidated\\n  ///   Compound part of Rewards-1 should be just left on the balance\\n  ///   Performance amounts should be liquidate, result underlying should be sent to performance receiver and insurance.\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\n  /// @dev {_recycle} is implemented as separate (inline) function to simplify unit testing\\n  /// @param rewardTokens_ Full list of reward tokens received from tetuConverter and depositor\\n  /// @param rewardAmounts_ Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\n  function recycle(\\n    IStrategyV3.BaseState storage baseState,\\n    IConverterStrategyBase.ConverterStrategyBaseState storage csbs,\\n    address[] memory tokens,\\n    address controller,\\n    mapping(address => uint) storage liquidationThresholds,\\n    address[] memory rewardTokens_,\\n    uint[] memory rewardAmounts_\\n  ) external {\\n    RecycleLocal memory v;\\n    v.asset = baseState.asset;\\n    v.compoundRatio = baseState.compoundRatio;\\n    v.performanceFee = baseState.performanceFee;\\n    v.thresholds = _getLiquidationThresholds(liquidationThresholds, rewardTokens_, rewardTokens_.length);\\n    v.debtToInsuranceCurrent = csbs.debtToInsurance;\\n    v.splitter = baseState.splitter;\\n\\n    (v.amountsToForward, v.amountPerf, v.debtToInsuranceUpdated) = _recycle(RecycleParams({\\n      converter: csbs.converter,\\n      liquidator: AppLib._getLiquidator(controller),\\n      asset: v.asset,\\n      compoundRatio: v.compoundRatio,\\n      tokens: tokens,\\n      thresholds: v.thresholds,\\n      rewardTokens: rewardTokens_,\\n      rewardAmounts: rewardAmounts_,\\n      performanceFee: v.performanceFee,\\n      debtToInsurance: v.debtToInsuranceCurrent,\\n      splitter: v.splitter,\\n      assetThreshold: AppLib._getLiquidationThreshold(liquidationThresholds[v.asset])\\n    }));\\n\\n    if (v.debtToInsuranceCurrent != v.debtToInsuranceUpdated) {\\n      csbs.debtToInsurance = v.debtToInsuranceUpdated;\\n      emit OnPayDebtToInsurance(v.debtToInsuranceCurrent, v.debtToInsuranceUpdated);\\n    }\\n\\n    // send performance-part of the underlying to the performance receiver and insurance\\n    (v.toPerf, v.toInsurance) = _sendPerformanceFee(\\n      v.asset,\\n      v.amountPerf,\\n      v.splitter,\\n      baseState.performanceReceiver,\\n      baseState.performanceFeeRatio\\n    );\\n\\n    // override rewardTokens_, v.amountsToForward by the values actually sent to the forwarder\\n    (rewardTokens_, v.amountsToForward) = _sendTokensToForwarder(controller, v.splitter, rewardTokens_, v.amountsToForward, v.thresholds);\\n\\n    emit Recycle(rewardTokens_, v.amountsToForward, v.toPerf, v.toInsurance);\\n  }\\n\\n  /// @notice Send {amount_} of {asset_} to {receiver_} and insurance\\n  /// @param asset_ Underlying asset\\n  /// @param amount_ Amount of underlying asset to be sent to\\n  /// @param receiver_ Performance receiver\\n  /// @param ratio [0..100_000], 100_000 - send full amount to perf, 0 - send full amount to the insurance.\\n  function _sendPerformanceFee(address asset_, uint amount_, address splitter, address receiver_, uint ratio) internal returns (\\n    uint toPerf,\\n    uint toInsurance\\n  ) {\\n    // read inside lib for reduce contract space in the main contract\\n    address insurance = address(ITetuVaultV2(ISplitter(splitter).vault()).insurance());\\n\\n    toPerf = amount_ * ratio / AppLib.DENOMINATOR;\\n    toInsurance = amount_ - toPerf;\\n\\n    if (toPerf != 0) {\\n      IERC20(asset_).safeTransfer(receiver_, toPerf);\\n    }\\n    if (toInsurance != 0) {\\n      IERC20(asset_).safeTransfer(insurance, toInsurance);\\n    }\\n  }\\n\\n  /// @notice Send {amounts_} to forwarder, skip amounts < thresholds (see SCB-812)\\n  /// @return tokensOut Tokens sent to the forwarder\\n  /// @return amountsOut Amounts sent to the forwarder\\n  function _sendTokensToForwarder(\\n    address controller_,\\n    address splitter_,\\n    address[] memory tokens_,\\n    uint[] memory amounts_,\\n    uint[] memory thresholds_\\n  ) internal returns (\\n    address[] memory tokensOut,\\n    uint[] memory amountsOut\\n  ) {\\n    uint len = tokens_.length;\\n    IForwarder forwarder = IForwarder(IController(controller_).forwarder());\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (thresholds_[i] > amounts_[i]) {\\n        amounts_[i] = 0; // it will be excluded in filterZeroAmounts() below\\n      } else {\\n        AppLib.approveIfNeeded(tokens_[i], amounts_[i], address(forwarder));\\n      }\\n    }\\n\\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokens_, amounts_);\\n    if (tokensOut.length != 0) {\\n      forwarder.registerIncome(tokensOut, amountsOut, ISplitter(splitter_).vault(), true);\\n    }\\n  }\\n\\n  /// @notice Recycle the amounts: split each amount on tree parts: performance+insurance (P), forwarder (F), compound (C)\\n  ///         Liquidate P+C, send F to the forwarder.\\n  /// We have two kinds of rewards:\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\n  /// 2) any other rewards\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\n  ///   Compound-part of Rewards-2 can be liquidated\\n  ///   Compound part of Rewards-1 should be just left on the balance\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\n  ///   Performance amounts are liquidated, result amount of underlying is returned in {amountToPerformanceAndInsurance}\\n  /// @return amountsToForward Amounts of {rewardTokens} to be sent to forwarder, zero amounts are allowed here\\n  /// @return amountToPerformanceAndInsurance Amount of underlying to be sent to performance receiver and insurance\\n  /// @return debtToInsuranceOut Remain debt to the insurance [in underlying]\\n  function _recycle(RecycleParams memory p) internal returns (\\n    uint[] memory amountsToForward,\\n    uint amountToPerformanceAndInsurance,\\n    int debtToInsuranceOut\\n  ) {\\n    RecycleLocalParams memory v;\\n\\n    v.len = p.rewardTokens.length;\\n    require(v.len == p.rewardAmounts.length, AppErrors.WRONG_LENGTHS);\\n\\n    amountsToForward = new uint[](v.len);\\n\\n    // rewardAmounts => P + F + C, where P - performance + insurance, F - forwarder, C - compound\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      // if we have a debt-to-insurance we should firstly cover the debt using all available rewards\\n      // and only then we can use leftovers of the rewards for other needs\\n      if (p.debtToInsurance > int(p.assetThreshold)) {\\n        (p.rewardAmounts[i], p.debtToInsurance) = _coverDebtToInsuranceFromRewards(p, i, uint(p.debtToInsurance));\\n        if (p.rewardAmounts[i] < p.thresholds[i]) continue;\\n      }\\n\\n      v.amountFC = p.rewardAmounts[i] * (COMPOUND_DENOMINATOR - p.performanceFee) / COMPOUND_DENOMINATOR;\\n      v.amountC = v.amountFC * p.compoundRatio / COMPOUND_DENOMINATOR;\\n      v.amountP = p.rewardAmounts[i] - v.amountFC;\\n      v.rewardToken = p.rewardTokens[i];\\n      v.amountCP = v.amountC + v.amountP;\\n\\n      if (v.amountCP > 0) {\\n        if (AppLib.getAssetIndex(p.tokens, v.rewardToken) != type(uint).max) {\\n          if (v.rewardToken == p.asset) {\\n            // This is underlying, liquidation of compound part is not allowed; just keep on the balance, should be handled later\\n            amountToPerformanceAndInsurance += v.amountP;\\n          } else {\\n            // This is secondary asset, Liquidation of compound part is not allowed, we should liquidate performance part only\\n            // If the performance amount is too small, liquidation will not happen and we will just keep that dust tokens on balance forever\\n            (, v.receivedAmountOut) = _liquidate(\\n              p.converter,\\n              p.liquidator,\\n              v.rewardToken,\\n              p.asset,\\n              v.amountP,\\n              _REWARD_LIQUIDATION_SLIPPAGE,\\n              p.thresholds[i],\\n              false // use conversion validation for these rewards\\n            );\\n            amountToPerformanceAndInsurance += v.receivedAmountOut;\\n          }\\n        } else {\\n          // If amount is too small, the liquidation won't be allowed and we will just keep that dust tokens on balance forever\\n          // The asset is not in the list of depositor's assets, its amount is big enough and should be liquidated\\n          // We assume here, that {token} cannot be equal to {_asset}\\n          // because the {_asset} is always included to the list of depositor's assets\\n          (, v.receivedAmountOut) = _liquidate(\\n            p.converter,\\n            p.liquidator,\\n            v.rewardToken,\\n            p.asset,\\n            v.amountCP,\\n            _REWARD_LIQUIDATION_SLIPPAGE,\\n            p.thresholds[i],\\n            true // skip conversion validation for rewards because we can have arbitrary assets here\\n          );\\n          amountToPerformanceAndInsurance += v.receivedAmountOut * (p.rewardAmounts[i] - v.amountFC) / v.amountCP;\\n        }\\n      }\\n      amountsToForward[i] = v.amountFC - v.amountC;\\n    }\\n    return (amountsToForward, amountToPerformanceAndInsurance, p.debtToInsurance);\\n  }\\n\\n  /// @notice Try to cover {p.debtToInsurance} using available rewards of {p.rewardTokens[index]}\\n  /// @param index Index of the reward token in {p.rewardTokens}\\n  /// @param debtAmount Debt to insurance that should be covered by the reward tokens\\n  /// @return rewardsLeftovers Amount of unused reward tokens (it can be used for other needs)\\n  /// @return debtToInsuranceOut New value of the debt to the insurance\\n  function _coverDebtToInsuranceFromRewards(RecycleParams memory p, uint index, uint debtAmount) internal returns (\\n    uint rewardsLeftovers,\\n    int debtToInsuranceOut\\n  ) {\\n    uint spentAmount;\\n    uint amountToSend;\\n\\n    if (p.asset == p.rewardTokens[index]) {\\n      // assume p.debtToInsurance > 0 here\\n      spentAmount = Math.min(debtAmount, p.rewardAmounts[index]);\\n      amountToSend = spentAmount;\\n    } else {\\n      // estimate amount of underlying that we can receive for the available amount of the reward tokens\\n      uint amountAsset = p.rewardAmounts[index] > p.assetThreshold\\n        ? p.liquidator.getPrice(p.rewardTokens[index], p.asset, p.rewardAmounts[index])\\n        : 0;\\n      uint amountIn;\\n\\n      if (amountAsset > debtAmount + p.assetThreshold) {\\n        // pay a part of the rewards to cover the debt completely\\n        amountIn = p.rewardAmounts[index] * debtAmount / amountAsset;\\n      } else {\\n        // pay all available rewards to cover a part of the debt\\n        amountIn = p.rewardAmounts[index];\\n      }\\n\\n      (spentAmount, amountToSend) = _liquidate(\\n        p.converter,\\n        p.liquidator,\\n        p.rewardTokens[index],\\n        p.asset,\\n        amountIn,\\n        _REWARD_LIQUIDATION_SLIPPAGE,\\n        p.thresholds[index],\\n        true // skip conversion validation for rewards because we can have arbitrary assets here\\n      );\\n    }\\n\\n    IERC20(p.asset).safeTransfer(address(ITetuVaultV2(ISplitter(p.splitter).vault()).insurance()), amountToSend);\\n\\n    rewardsLeftovers = AppLib.sub0(p.rewardAmounts[index], spentAmount);\\n    debtToInsuranceOut = int(debtAmount) - int(amountToSend);\\n\\n    emit OnCoverDebtToInsurance(p.rewardTokens[index], spentAmount, debtAmount, debtToInsuranceOut);\\n  }\\n//endregion----------------------------------------------- Recycle rewards\\n\\n//region--------------------------------------------------- Before deposit\\n  /// @notice Default implementation of ConverterStrategyBase.beforeDeposit\\n  /// @param amount_ Amount of underlying to be deposited\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\n  /// @param weights_ Depositor pool weights\\n  /// @param totalWeight_ Sum of {weights_}\\n  function beforeDeposit(\\n    ITetuConverter converter_,\\n    uint amount_,\\n    address[] memory tokens_,\\n    uint indexAsset_,\\n    uint[] memory weights_,\\n    uint totalWeight_,\\n    mapping(address => uint) storage liquidationThresholds\\n  ) external returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    // temporary save collateral to tokensAmounts\\n    tokenAmounts = _getCollaterals(amount_, tokens_, weights_, totalWeight_, indexAsset_, AppLib._getPriceOracle(converter_));\\n\\n    // make borrow and save amounts of tokens available for deposit to tokenAmounts, zero result amounts are possible\\n    tokenAmounts = _getTokenAmounts(\\n      converter_,\\n      tokens_,\\n      indexAsset_,\\n      tokenAmounts,\\n      AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[indexAsset_]])\\n    );\\n  }\\n\\n  /// @notice For each {token_} calculate a part of {amount_} to be used as collateral according to the weights.\\n  ///         I.e. we have 300 USDC, we need to split it on 100 USDC, 100 USDT, 100 DAI\\n  ///         USDC is main asset, USDT and DAI should be borrowed. We check amounts of USDT and DAI on the balance\\n  ///         and return collaterals reduced on that amounts. For main asset, we return full amount always (100 USDC).\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\n  /// @return tokenAmountsOut Length of the array is equal to the length of {tokens_}\\n  function _getCollaterals(\\n    uint amount_,\\n    address[] memory tokens_,\\n    uint[] memory weights_,\\n    uint totalWeight_,\\n    uint indexAsset_,\\n    IPriceOracle priceOracle\\n  ) internal view returns (\\n    uint[] memory tokenAmountsOut\\n  ) {\\n    uint len = tokens_.length;\\n    tokenAmountsOut = new uint[](len);\\n\\n    // get token prices and decimals\\n    (uint[] memory prices, uint[] memory decs) = AppLib._getPricesAndDecs(priceOracle, tokens_, len);\\n\\n    // split the amount on tokens proportionally to the weights\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      uint amountAssetForToken = amount_ * weights_[i] / totalWeight_;\\n\\n      if (i == indexAsset_) {\\n        tokenAmountsOut[i] = amountAssetForToken;\\n      } else {\\n        // if we have some tokens on balance then we need to use only a part of the collateral\\n        uint tokenAmountToBeBorrowed = amountAssetForToken\\n          * prices[indexAsset_]\\n          * decs[i]\\n          / prices[i]\\n          / decs[indexAsset_];\\n\\n        uint tokenBalance = IERC20(tokens_[i]).balanceOf(address(this));\\n        if (tokenBalance < tokenAmountToBeBorrowed) {\\n          tokenAmountsOut[i] = amountAssetForToken * (tokenAmountToBeBorrowed - tokenBalance) / tokenAmountToBeBorrowed;\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Make borrow and return amounts of {tokens} available to deposit\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\n  /// @param collaterals_ Amounts of main asset that can be used as collateral to borrow {tokens_}\\n  /// @param thresholdAsset_ Value of liquidation threshold for the main (collateral) asset\\n  /// @return tokenAmountsOut Amounts of {tokens}  available to deposit\\n  function _getTokenAmounts(\\n    ITetuConverter converter_,\\n    address[] memory tokens_,\\n    uint indexAsset_,\\n    uint[] memory collaterals_,\\n    uint thresholdAsset_\\n  ) internal returns (\\n    uint[] memory tokenAmountsOut\\n  ) {\\n    // content of tokenAmounts will be modified in place\\n    uint len = tokens_.length;\\n    tokenAmountsOut = new uint[](len);\\n    address asset = tokens_[indexAsset_];\\n\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i != indexAsset_) {\\n        address token = tokens_[i];\\n        if (collaterals_[i] != 0) {\\n          AppLib.approveIfNeeded(asset, collaterals_[i], address(converter_));\\n          _openPosition(\\n            converter_,\\n            \\\"\\\", // entry kind = 0: fixed collateral amount, max possible borrow amount\\n            asset,\\n            token,\\n            collaterals_[i],\\n            thresholdAsset_\\n          );\\n\\n          // zero borrowed amount is possible here (conversion is not available)\\n          // if it's not suitable for depositor, the depositor should check zero amount in other places\\n        }\\n        tokenAmountsOut[i] = IERC20(token).balanceOf(address(this));\\n      }\\n    }\\n\\n    tokenAmountsOut[indexAsset_] = Math.min(\\n      collaterals_[indexAsset_],\\n      IERC20(asset).balanceOf(address(this))\\n    );\\n  }\\n//endregion--------------------------------------------------- Before deposit\\n\\n//region--------------------------------------------------- Make requested amount\\n\\n  /// @notice Convert {amountsToConvert_} to the given {asset}\\n  ///         Swap leftovers (if any) to the given asset.\\n  ///         If result amount is less than expected, try to close any other available debts (1 repay per block only)\\n  /// @param tokens_ Results of _depositorPoolAssets() call (list of depositor's asset in proper order)\\n  /// @param indexAsset_ Index of the given {asset} in {tokens}\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\n  ///                         Max uint means attempt to withdraw all possible amount.\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\n  function makeRequestedAmount(\\n    address[] memory tokens_,\\n    uint indexAsset_,\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    uint requestedBalance,\\n    mapping(address => uint) storage liquidationThresholds_\\n  ) external returns (uint expectedBalance) {\\n    DataSetLocal memory v = DataSetLocal({\\n      len: tokens_.length,\\n      converter: converter_,\\n      tokens: tokens_,\\n      indexAsset: indexAsset_,\\n      liquidator: liquidator_\\n    });\\n    uint[] memory _liquidationThresholds = _getLiquidationThresholds(liquidationThresholds_, v.tokens, v.len);\\n    expectedBalance = _closePositionsToGetAmount(v, _liquidationThresholds, requestedBalance);\\n  }\\n  //endregion-------------------------------------------- Make requested amount\\n\\n//region ------------------------------------------------ Close position\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\n  /// @dev We assume here that this function is called before closing any positions in the current block\\n  /// @param liquidationThresholds Min allowed amounts-out for liquidations\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\n  ///                         Max uint means attempt to withdraw all possible amount.\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\n  function closePositionsToGetAmount(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator,\\n    uint indexAsset,\\n    mapping(address => uint) storage liquidationThresholds,\\n    uint requestedBalance,\\n    address[] memory tokens\\n  ) external returns (\\n    uint expectedBalance\\n  ) {\\n    uint len = tokens.length;\\n    return _closePositionsToGetAmount(\\n      DataSetLocal({\\n        len: len,\\n        converter: converter_,\\n        tokens: tokens,\\n        indexAsset: indexAsset,\\n        liquidator: liquidator\\n      }),\\n      _getLiquidationThresholds(liquidationThresholds, tokens, len),\\n      requestedBalance\\n    );\\n  }\\n\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\n  /// @dev Implements {IterationPlanLib.PLAN_SWAP_REPAY} only\\n  ///      Note: AAVE3 allows to make two repays in a single block, see Aave3SingleBlockTest in TetuConverter\\n  ///      but it doesn't allow to make borrow and repay in a single block.\\n  /// @param liquidationThresholds_ Min allowed amounts-out for liquidations\\n  /// @param requestedBalance Total amount of the given asset that we need to have on balance at the end.\\n  ///                         Max uint means attempt to withdraw all possible amount.\\n  /// @return expectedBalance Expected asset balance after all swaps and repays\\n  function _closePositionsToGetAmount(\\n    DataSetLocal memory d_,\\n    uint[] memory liquidationThresholds_,\\n    uint requestedBalance\\n  ) internal returns (\\n    uint expectedBalance\\n  ) {\\n    if (requestedBalance != 0) {\\n      //let's get a bit more amount on balance to prevent situation \\\"zero balance, not-zero debts\\\"\\n      requestedBalance = applyRequestedBalanceGap(requestedBalance);\\n      CloseDebtsForRequiredAmountLocal memory v;\\n      v.asset = d_.tokens[d_.indexAsset];\\n\\n      // v.planKind = IterationPlanLib.PLAN_SWAP_REPAY; // PLAN_SWAP_REPAY == 0, so we don't need this line\\n      v.balanceAdditions = new uint[](d_.len);\\n      expectedBalance = IERC20(v.asset).balanceOf(address(this));\\n\\n      (v.prices, v.decs) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(d_.converter), d_.tokens, d_.len);\\n\\n      for (uint i; i < d_.len; i = AppLib.uncheckedInc(i)) {\\n        if (i == d_.indexAsset) continue;\\n\\n        v.balanceAsset = IERC20(v.asset).balanceOf(address(this));\\n        v.balanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\\n\\n        // Make one or several iterations. Do single swap and single repaying (both are optional) on each iteration.\\n        // Calculate expectedAmount of received underlying. Swap leftovers at the end even if requestedAmount is 0 at that moment.\\n        do {\\n          // generate iteration plan: [swap], [repay]\\n          (v.idxToSwap1, v.amountToSwap, v.idxToRepay1) = IterationPlanLib.buildIterationPlan(\\n            [address(d_.converter), address(d_.liquidator)],\\n            d_.tokens,\\n            liquidationThresholds_,\\n            v.prices,\\n            v.decs,\\n            v.balanceAdditions,\\n            [0, IterationPlanLib.PLAN_SWAP_REPAY, 0, requestedBalance, d_.indexAsset, i, 0]\\n          );\\n          if (v.idxToSwap1 == 0 && v.idxToRepay1 == 0) break;\\n\\n          // make swap if necessary\\n          uint spentAmountIn;\\n          if (v.idxToSwap1 != 0) {\\n            uint indexIn = v.idxToSwap1 - 1;\\n            uint indexOut = indexIn == d_.indexAsset ? i : d_.indexAsset;\\n            (spentAmountIn,) = _liquidate(\\n              d_.converter,\\n              d_.liquidator,\\n              d_.tokens[indexIn],\\n              d_.tokens[indexOut],\\n              v.amountToSwap,\\n              _ASSET_LIQUIDATION_SLIPPAGE,\\n              liquidationThresholds_[indexIn],\\n              false\\n            );\\n\\n            if (indexIn == d_.indexAsset) {\\n              expectedBalance = AppLib.sub0(expectedBalance, spentAmountIn);\\n            } else if (indexOut == d_.indexAsset) {\\n              expectedBalance += spentAmountIn * v.prices[i] * v.decs[d_.indexAsset] / v.prices[d_.indexAsset] / v.decs[i];\\n\\n              // if we already received enough amount on balance, we can avoid additional actions\\n              // to avoid high gas consumption in the cases like SCB-787\\n              uint balanceAsset = IERC20(v.asset).balanceOf(address(this));\\n              if (balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) {\\n                v.balanceAsset = balanceAsset;\\n                break;\\n              }\\n            }\\n          }\\n\\n          // repay a debt if necessary\\n          if (v.idxToRepay1 != 0) {\\n            uint indexBorrow = v.idxToRepay1 - 1;\\n            uint indexCollateral = indexBorrow == d_.indexAsset ? i : d_.indexAsset;\\n            uint amountToRepay = IERC20(d_.tokens[indexBorrow]).balanceOf(address(this));\\n\\n            (uint expectedAmountOut, uint repaidAmountOut, uint amountSendToRepay) = _repayDebt(\\n              d_.converter,\\n              d_.tokens[indexCollateral],\\n              d_.tokens[indexBorrow],\\n              amountToRepay\\n            );\\n\\n            if (indexBorrow == d_.indexAsset) {\\n              expectedBalance = expectedBalance > amountSendToRepay\\n                ? expectedBalance - amountSendToRepay\\n                : 0;\\n            } else if (indexCollateral == d_.indexAsset) {\\n              require(expectedAmountOut >= spentAmountIn, AppErrors.BALANCE_DECREASE);\\n              if (repaidAmountOut < amountSendToRepay) {\\n                // SCB-779: expectedAmountOut was estimated for amountToRepay, but we have paid repaidAmountOut only\\n                expectedBalance += expectedAmountOut * repaidAmountOut / amountSendToRepay;\\n              } else {\\n                expectedBalance += expectedAmountOut;\\n              }\\n            }\\n          }\\n\\n          // update balances\\n          v.newBalanceAsset = IERC20(v.asset).balanceOf(address(this));\\n          v.newBalanceToken = IERC20(d_.tokens[i]).balanceOf(address(this));\\n\\n          v.exitLoop = (v.balanceAsset == v.newBalanceAsset && v.balanceToken == v.newBalanceToken);\\n          v.balanceAsset = v.newBalanceAsset;\\n          v.balanceToken = v.newBalanceToken;\\n        } while (!v.exitLoop);\\n\\n        if (v.balanceAsset + liquidationThresholds_[d_.indexAsset] > requestedBalance) break;\\n      }\\n    }\\n\\n    return expectedBalance;\\n  }\\n//endregion ------------------------------------------------ Close position\\n\\n//region ------------------------------------------------ Repay debts\\n  /// @notice Repay {amountIn} and get collateral in return, calculate expected amount\\n  ///         Take into account possible debt-gap and the fact that the amount of debt may be less than {amountIn}\\n  /// @param amountToRepay Max available amount of borrow asset that we can repay\\n  /// @return expectedAmountOut Estimated amount of main asset that should be added to balance = collateral - {toSell}\\n  /// @return repaidAmountOut Actually paid amount\\n  /// @return amountSendToRepay Amount send to repay\\n  function _repayDebt(\\n    ITetuConverter converter,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) internal returns (\\n    uint expectedAmountOut,\\n    uint repaidAmountOut,\\n    uint amountSendToRepay\\n  ) {\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // get amount of debt with debt-gap\\n    (uint needToRepay,) = converter.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\n    amountSendToRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\n\\n    // get expected amount without debt-gap\\n    uint swappedAmountOut;\\n    (expectedAmountOut, swappedAmountOut) = converter.quoteRepay(address(this), collateralAsset, borrowAsset, amountSendToRepay);\\n\\n    if (expectedAmountOut > swappedAmountOut) {\\n      // SCB-789 Following situation is possible\\n      //    needToRepay = 100, needToRepayExact = 90 (debt gap is 10)\\n      //    1) amountRepay = 80\\n      //       expectedAmountOut is calculated for 80, no problems\\n      //    2) amountRepay = 99,\\n      //       expectedAmountOut is calculated for 90 + 9 (90 - repay, 9 - direct swap)\\n      //       expectedAmountOut must be reduced on 9 here (!)\\n      expectedAmountOut -= swappedAmountOut;\\n    }\\n\\n    // close the debt\\n    (, repaidAmountOut) = _closePositionExact(converter, collateralAsset, borrowAsset, amountSendToRepay, balanceBefore);\\n\\n    return (expectedAmountOut, repaidAmountOut, amountSendToRepay);\\n  }\\n  //endregion ------------------------------------------------ Repay debts\\n\\n//region------------------------------------------------ Other helpers\\n\\n  /// @return liquidationThresholdsOut Liquidation thresholds of the {tokens_}, result values > 0\\n  function _getLiquidationThresholds(\\n    mapping(address => uint) storage liquidationThresholds,\\n    address[] memory tokens_,\\n    uint len\\n  ) internal view returns (\\n    uint[] memory liquidationThresholdsOut\\n  ) {\\n    liquidationThresholdsOut = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      liquidationThresholdsOut[i] = AppLib._getLiquidationThreshold(liquidationThresholds[tokens_[i]]);\\n    }\\n  }\\n\\n  function applyRequestedBalanceGap(uint amount_) internal pure returns (uint) {\\n    return amount_ == type(uint).max\\n      ? amount_\\n      : amount_ * (COMPOUND_DENOMINATOR + REQUESTED_BALANCE_GAP) / COMPOUND_DENOMINATOR;\\n  }\\n//endregion--------------------------------------------- Other helpers\\n}\\n\\n\",\"keccak256\":\"0x82a06dccc9f9ff2931ab75efd8b8eb6a2aa8a183b0e239a6638fe3a0247f7770\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/pair/PairBasedStrategyLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\nimport \\\"../../interfaces/IPoolProportionsProvider.sol\\\";\\nimport \\\"../../libs/BorrowLib.sol\\\";\\n\\n/// @notice Library for the UniV3-like strategies with two tokens in the pool\\n/// @dev The library contains quoteWithdrawStep/withdrawStep-related logic\\nlibrary PairBasedStrategyLib {\\n  //region ------------------------------------------------ Constants\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\n  /// @notice In all functions below array {token} contains underlying at the first position\\n  uint internal constant IDX_ASSET = 0;\\n  /// @notice In all functions below array {token} contains not-underlying at the second position\\n  uint internal constant IDX_TOKEN = 1;\\n\\n  uint internal constant IDX_SWAP_1 = 0;\\n  uint internal constant IDX_REPAY_1 = 1;\\n  uint internal constant IDX_SWAP_2 = 2;\\n  uint internal constant IDX_REPAY_2 = 3;\\n\\n  /// @notice A gap to reduce AmountToSwap calculated inside quoteWithdrawByAgg, [0...100_000]\\n  uint public constant GAP_AMOUNT_TO_SWAP = 100;\\n\\n  /// @notice Enter to the pool at the end of withdrawByAggStep\\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED = 1;\\n  /// @notice Enter to the pool at the end of withdrawByAggStep only if full withdrawing has been completed\\n  uint public constant ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED = 2;\\n\\n  /// @notice Fuse thresholds are set as array: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\n  ///         If the price falls below LOWER_LIMIT_ON the fuse is turned ON\\n  ///         When the prices raises back and reaches LOWER_LIMIT_OFF, the fuse is turned OFF\\n  ///         In the same way, if the price raises above UPPER_LIMIT_ON the fuse is turned ON\\n  ///         When the prices falls back and reaches UPPER_LIMIT_OFF, the fuse is turned OFF\\n  ///\\n  ///         Example: [0.9, 0.92, 1.08, 1.1]\\n  ///         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.\\n  ///         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again.\\n  uint public constant FUSE_IDX_LOWER_LIMIT_ON = 0;\\n  uint public constant FUSE_IDX_LOWER_LIMIT_OFF = 1;\\n  uint public constant FUSE_IDX_UPPER_LIMIT_ON = 2;\\n  uint public constant FUSE_IDX_UPPER_LIMIT_OFF = 3;\\n\\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_A = 0;\\n  uint public constant IDX_ADDR_DEFAULT_STATE_TOKEN_B = 1;\\n  uint public constant IDX_ADDR_DEFAULT_STATE_POOL = 2;\\n  uint public constant IDX_ADDR_DEFAULT_STATE_PROFIT_HOLDER = 3;\\n\\n  uint public constant IDX_TICK_DEFAULT_STATE_TICK_SPACING = 0;\\n  uint public constant IDX_TICK_DEFAULT_STATE_LOWER_TICK = 1;\\n  uint public constant IDX_TICK_DEFAULT_STATE_UPPER_TICK = 2;\\n  uint public constant IDX_TICK_DEFAULT_STATE_REBALANCE_TICK_RANGE = 3;\\n\\n  uint public constant IDX_NUMS_DEFAULT_STATE_TOTAL_LIQUIDITY = 0;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_FUSE_STATUS = 1;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_0 = 2;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_WITHDRAW_DONE = 3;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_0 = 4;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_1 = 5;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_2 = 6;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_THRESHOLD_3 = 7;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_1 = 8;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_2 = 9;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_3 = 10;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_RESERVED_4 = 11;\\n  uint public constant IDX_NUMS_DEFAULT_STATE_LAST_REBALANCE_NO_SWAP = 12;\\n\\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_IS_STABLE_POOL = 0;\\n  uint public constant IDX_BOOL_VALUES_DEFAULT_STATE_DEPOSITOR_SWAP_TOKENS = 1;\\n\\n  /// @notice 1inch router V5\\n  address internal constant ONEINCH = 0x1111111254EEB25477B68fb85Ed929f73A960582;\\n  /// @notice OpenOceanExchangeProxy\\n  address internal constant OPENOCEAN = 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64;\\n\\n  string public constant UNKNOWN_SWAP_ROUTER = \\\"PBS-1 Unknown router\\\";\\n  string public constant INCORRECT_TICK_RANGE = \\\"PBS-3 Incorrect tickRange\\\";\\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \\\"PBS-4 Incorrect rebalanceTickRange\\\";\\n  string public constant INCORRECT_ASSET = \\\"PBS-5 Incorrect asset\\\";\\n\\n  //endregion ------------------------------------------------ Constants\\n\\n  //region ------------------------------------------------ Data types\\n  /// @notice The fuse is triggered when the price rises above or falls below the limit 1.\\n  ///         If the fuse was triggered, all assets are withdrawn from the pool on the strategy balance.\\n  ///         Then all debts should be closed and all assets should be converted to underlying.\\n  ///         The fuse is turned off automatically when the price falls below or rises above the limit 2\\n  ///         and all assets are deposited back to the pool.\\n  enum FuseStatus {\\n    /// @notice Fuse is not used at all\\n    FUSE_DISABLED_0,\\n    /// @notice Fuse is not triggered, assets are deposited to the pool\\n    FUSE_OFF_1,\\n    /// @notice Fuse was triggered by lower limit, assets was withdrawn from the pool, but active debts can exist\\n    FUSE_ON_LOWER_LIMIT_2,\\n    /// @notice Fuse was triggered by upper limit, assets was withdrawn from the pool, but active debts can exist\\n    FUSE_ON_UPPER_LIMIT_3\\n  }\\n\\n  struct SwapByAggParams {\\n    bool useLiquidator;\\n    address tokenToSwap;\\n    /// @notice Aggregator to make swap\\n    ///         It is 0 if useLiquidator is true\\n    ///         It can be equal to address of liquidator if we use liquidator as aggregator (in tests)\\n    address aggregator;\\n    uint amountToSwap;\\n    /// @notice Swap-data prepared off-chain (route, amounts, etc). 0 - use liquidator to make swap\\n    bytes swapData;\\n  }\\n\\n  struct GetAmountToRepay2Local {\\n    uint x;\\n    uint y;\\n    uint c0;\\n    uint b0;\\n    uint alpha;\\n    int b;\\n  }\\n\\n  struct FuseStateParams {\\n    FuseStatus status;\\n    /// @notice Price thresholds [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]\\n    /// @dev see PairBasedStrategyLib.FUSE_IDX_XXX\\n    uint[4] thresholds;\\n\\n    /// @notice reserve space for future needs\\n    uint[4] __gap;\\n  }\\n  //endregion ------------------------------------------------ Data types\\n\\n  //region ------------------------------------------------ Events\\n  event FuseStatusChanged(uint fuseStatus);\\n  event NewFuseThresholds(uint[4] newFuseThresholds);\\n  event SwapByAgg(\\n    uint amountToSwap,\\n    uint amountIn,\\n    uint amountOut,\\n    uint expectedAmountOut,\\n    address aggregator,\\n    address assetIn,\\n    address assetOut\\n  );\\n  //endregion ------------------------------------------------ Events\\n\\n  //region ------------------------------------------------ External withdraw functions\\n\\n  /// @notice Get info for the swap that will be made on the next call of {withdrawStep}\\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\n  ///                            Value type(uint).max means that the proportions should be read from the pool.\\n  ///     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\\n  /// @param amountsFromPool Amounts of {tokens} that will be received from the pool before calling withdraw\\n  /// @return tokenToSwap Address of the token that will be swapped on the next swap. 0 - no swap\\n  /// @return amountToSwap Amount that will be swapped on the next swap. 0 - no swap\\n  ///                      This amount is NOT reduced on {GAP_AMOUNT_TO_SWAP}, it should be reduced after the call if necessary.\\n  function quoteWithdrawStep(\\n    address[2] memory converterLiquidator_,\\n    address[] memory tokens,\\n    uint[] memory liquidationThresholds,\\n    uint[] memory amountsFromPool,\\n    uint planKind,\\n    uint[2] memory entryDataValues\\n  ) external returns (\\n    address tokenToSwap,\\n    uint amountToSwap\\n  ){\\n    (uint[] memory prices,\\n      uint[] memory decs\\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\\n      converter: ITetuConverter(converterLiquidator_[0]),\\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\\n      tokens: tokens,\\n      liquidationThresholds: liquidationThresholds,\\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\n        : entryDataValues[0],\\n      prices: prices,\\n      decs: decs,\\n      balanceAdditions: amountsFromPool,\\n      planKind: planKind,\\n      usePoolProportions: entryDataValues[0] == type(uint).max,\\n      entryDataParam: entryDataValues[1]\\n    });\\n    return _quoteWithdrawStep(p);\\n  }\\n\\n  /// @notice Make withdraw step with 0 or 1 swap only. The step can make one of the following actions:\\n  ///         1) repay direct debt 2) repay reverse debt 3) final swap leftovers of not-underlying asset\\n  /// @param converterLiquidator_ [TetuConverter, TetuLiquidator]\\n  /// @param tokens Tokens used by depositor (length == 2: underlying and not-underlying)\\n  /// @param liquidationThresholds Liquidation thresholds for the {tokens}\\n  /// @param tokenToSwap_ Address of the token that will be swapped on the next swap. 0 - no swap\\n  /// @param amountToSwap_ Amount that will be swapped on the next swap. 0 - no swap\\n  /// @param aggregator_ Aggregator that should be used for the next swap. 0 - no swap\\n  /// @param swapData_ Swap data to be passed to the aggregator on the next swap.\\n  ///                  Swap data contains swap-route, amount and all other required info for the swap.\\n  ///                  Swap data should be prepared on-chain on the base of data received by {quoteWithdrawStep}\\n  /// @param useLiquidator_ Use liquidator instead of aggregator.\\n  ///                       Aggregator swaps amount reduced on {GAP_AMOUNT_TO_SWAP}.\\n  ///                       Liquidator doesn't use {GAP_AMOUNT_TO_SWAP}.\\n  ///                       It's allowed to pass liquidator address in {aggregator_} and set {useLiquidator_} to false -\\n  ///                       the liquidator will be used in same way as aggregator in this case.\\n  /// @param planKind One of IterationPlanLib.PLAN_XXX\\n  /// @param entryDataValues [propNotUnderlying18, entryDataParam]\\n  ///     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].\\n  ///                           The leftovers should be swapped to get following result proportions of the assets:\\n  ///                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18\\n  ///     entryDataParam It contains \\\"required-amount-to-reduce-debt\\\" in REPAY-SWAP-REPAY case\\n  /// @return completed All debts were closed, leftovers were swapped to the required proportions\\n  function withdrawStep(\\n    address[2] memory converterLiquidator_,\\n    address[] memory tokens,\\n    uint[] memory liquidationThresholds,\\n    address tokenToSwap_,\\n    uint amountToSwap_,\\n    address aggregator_,\\n    bytes memory swapData_,\\n    bool useLiquidator_,\\n    uint planKind,\\n    uint[2] memory entryDataValues\\n  ) external returns (\\n    bool completed\\n  ){\\n    (uint[] memory prices,\\n      uint[] memory decs\\n    ) = AppLib._getPricesAndDecs(AppLib._getPriceOracle(ITetuConverter(converterLiquidator_[0])), tokens, 2);\\n\\n    IterationPlanLib.SwapRepayPlanParams memory p = IterationPlanLib.SwapRepayPlanParams({\\n      converter: ITetuConverter(converterLiquidator_[0]),\\n      liquidator: ITetuLiquidator(converterLiquidator_[1]),\\n      tokens: tokens,\\n      liquidationThresholds: liquidationThresholds,\\n      propNotUnderlying18: entryDataValues[0] == type(uint).max\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\n        : entryDataValues[0],\\n      prices: prices,\\n      decs: decs,\\n      balanceAdditions: new uint[](2), // 2 = tokens.length\\n      planKind: planKind,\\n      usePoolProportions: entryDataValues[0] == type(uint).max,\\n      entryDataParam: entryDataValues[1]\\n    });\\n    SwapByAggParams memory aggParams = SwapByAggParams({\\n      tokenToSwap: tokenToSwap_,\\n      amountToSwap: amountToSwap_,\\n      useLiquidator: useLiquidator_,\\n      aggregator: aggregator_,\\n      swapData: swapData_\\n    });\\n    return _withdrawStep(p, aggParams);\\n  }\\n  //endregion ------------------------------------------------ External withdraw functions\\n\\n  //region ------------------------------------------------ Fuse functions\\n  function setFuseStatus(FuseStateParams storage fuse, FuseStatus status) external {\\n    fuse.status = status;\\n    emit FuseStatusChanged(uint(status));\\n  }\\n\\n  function setFuseThresholds(FuseStateParams storage state, uint[4] memory values) external {\\n    require(\\n      (values[FUSE_IDX_LOWER_LIMIT_ON] == 0 && values[FUSE_IDX_LOWER_LIMIT_OFF] == 0)\\n      || (values[FUSE_IDX_LOWER_LIMIT_ON] <= values[FUSE_IDX_LOWER_LIMIT_OFF]),\\n      AppErrors.INVALID_VALUE\\n    );\\n    require(\\n      (values[FUSE_IDX_UPPER_LIMIT_ON] == 0 && values[FUSE_IDX_UPPER_LIMIT_OFF] == 0)\\n      || (values[FUSE_IDX_UPPER_LIMIT_ON] >= values[FUSE_IDX_UPPER_LIMIT_OFF]),\\n      AppErrors.INVALID_VALUE\\n    );\\n    if (values[FUSE_IDX_LOWER_LIMIT_ON] != 0 && values[FUSE_IDX_UPPER_LIMIT_ON] != 0) {\\n      require(\\n        values[FUSE_IDX_UPPER_LIMIT_ON] > values[FUSE_IDX_LOWER_LIMIT_ON],\\n        AppErrors.INVALID_VALUE\\n      );\\n    }\\n    state.thresholds = values;\\n    emit NewFuseThresholds(values);\\n  }\\n\\n  function isFuseTriggeredOn(PairBasedStrategyLib.FuseStatus fuseStatus) internal pure returns (bool) {\\n    return uint(fuseStatus) > uint(PairBasedStrategyLib.FuseStatus.FUSE_OFF_1);\\n  }\\n\\n  /// @notice Check if the fuse should be turned ON/OFF\\n  /// @param price Current price in the oracle\\n  /// @param poolPrice Current price in the pool\\n  /// @return needToChange A boolean indicating if the fuse status should be changed\\n  /// @return status Exist fuse status or new fuse status (if needToChange is true)\\n  function needChangeFuseStatus(FuseStateParams memory fuse, uint price, uint poolPrice) internal pure returns (\\n    bool needToChange,\\n    FuseStatus status\\n  ) {\\n    if (fuse.status != FuseStatus.FUSE_DISABLED_0) {\\n      if (fuse.status == FuseStatus.FUSE_OFF_1) {\\n        // currently fuse is OFF\\n        if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_ON]) {\\n          needToChange = true;\\n          status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\\n        } else if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\\n          needToChange = true;\\n          status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\\n        }\\n      } else {\\n        if (fuse.status == FuseStatus.FUSE_ON_LOWER_LIMIT_2) {\\n          // currently fuse is triggered ON by lower limit\\n          if (price >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] && poolPrice >= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\\n            needToChange = true;\\n            if (price >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON] || poolPrice >= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_ON]) {\\n              status = FuseStatus.FUSE_ON_UPPER_LIMIT_3;\\n            } else {\\n              status = FuseStatus.FUSE_OFF_1;\\n            }\\n          }\\n        } else {\\n          // currently fuse is triggered ON by upper limit\\n          if (price <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF] && poolPrice <= fuse.thresholds[FUSE_IDX_UPPER_LIMIT_OFF]) {\\n            needToChange = true;\\n            if (price <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF] || poolPrice <= fuse.thresholds[FUSE_IDX_LOWER_LIMIT_OFF]) {\\n              status = FuseStatus.FUSE_ON_LOWER_LIMIT_2;\\n            } else {\\n              status = FuseStatus.FUSE_OFF_1;\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n    return (needToChange, needToChange ? status : fuse.status);\\n  }\\n  //endregion ------------------------------------------------ Fuse functions\\n\\n  //region ------------------------------------------------ Internal helper functions\\n  /// @notice Quote amount of the next swap if any.\\n  ///         Swaps are required if direct-borrow exists OR reverse-borrow exists or not underlying leftovers exist\\n  ///         Function returns info for first swap only.\\n  /// @return tokenToSwap What token should be swapped. Zero address if no swap is required\\n  /// @return amountToSwap Amount to swap. Zero if no swap is required.\\n  function _quoteWithdrawStep(IterationPlanLib.SwapRepayPlanParams memory p) internal returns (\\n    address tokenToSwap,\\n    uint amountToSwap\\n  ) {\\n    uint indexTokenToSwapPlus1;\\n    (indexTokenToSwapPlus1, amountToSwap,) = IterationPlanLib.buildIterationPlan(\\n      [address(p.converter), address(p.liquidator)],\\n      p.tokens,\\n      p.liquidationThresholds,\\n      p.prices,\\n      p.decs,\\n      p.balanceAdditions,\\n      [\\n        p.usePoolProportions ? 1 : 0,\\n        p.planKind,\\n        p.propNotUnderlying18,\\n        type(uint).max,\\n        IDX_ASSET,\\n        IDX_TOKEN,\\n        p.entryDataParam\\n      ]\\n    );\\n    if (indexTokenToSwapPlus1 != 0) {\\n      tokenToSwap = p.tokens[indexTokenToSwapPlus1 - 1];\\n    }\\n    return (tokenToSwap, amountToSwap);\\n  }\\n\\n  /// @notice Make one iteration of withdraw. Each iteration can make 0 or 1 swap only\\n  ///         We can make only 1 of the following 3 operations per single call:\\n  ///         1) repay direct debt 2) repay reverse debt 3) swap leftovers to underlying\\n  function _withdrawStep(IterationPlanLib.SwapRepayPlanParams memory p, SwapByAggParams memory aggParams) internal returns (\\n    bool completed\\n  ) {\\n    (uint idxToSwap1, uint amountToSwap, uint idxToRepay1) = IterationPlanLib.buildIterationPlan(\\n      [address(p.converter), address(p.liquidator)],\\n      p.tokens,\\n      p.liquidationThresholds,\\n      p.prices,\\n      p.decs,\\n      p.balanceAdditions,\\n      [\\n        p.usePoolProportions ? 1 : 0,\\n        p.planKind,\\n        p.propNotUnderlying18,\\n        type(uint).max,\\n        IDX_ASSET,\\n        IDX_TOKEN,\\n        p.entryDataParam\\n      ]\\n    );\\n\\n    bool[4] memory actions = [\\n      p.planKind == IterationPlanLib.PLAN_SWAP_ONLY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // swap 1\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY || p.planKind == IterationPlanLib.PLAN_SWAP_REPAY, // repay 1\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, // swap 2\\n      p.planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY // repay 2\\n      ];\\n\\n    if (idxToSwap1 != 0 && actions[IDX_SWAP_1]) {\\n      (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\\n    }\\n\\n    if (idxToRepay1 != 0 && actions[IDX_REPAY_1]) {\\n      ConverterStrategyBaseLib._repayDebt(\\n        p.converter,\\n        p.tokens[idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET],\\n        p.tokens[idxToRepay1 - 1],\\n        IERC20(p.tokens[idxToRepay1 - 1]).balanceOf(address(this))\\n      );\\n    }\\n\\n    if (idxToSwap1 != 0) {\\n      if (actions[IDX_SWAP_2]) {\\n        (, p.propNotUnderlying18) = _swap(p, aggParams, idxToSwap1 - 1, idxToSwap1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, amountToSwap);\\n\\n        if (actions[IDX_REPAY_2] && idxToRepay1 != 0) {\\n          // see calculations inside estimateSwapAmountForRepaySwapRepay\\n          // There are two possibilities here:\\n          // 1) All collateral asset available on balance was swapped. We need additional repay to get assets in right proportions\\n          // 2) Only part of collateral asset was swapped, so assets are already in right proportions. Repay 2 is not needed\\n          (uint amountToRepay2, bool borrowInsteadRepay) = _getAmountToRepay2(\\n            p,\\n            idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET,\\n            idxToRepay1 - 1\\n          );\\n\\n          if (borrowInsteadRepay) {\\n            _borrowToProportions(p, idxToRepay1 - 1, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, true);\\n\\n          } else if (amountToRepay2 > p.liquidationThresholds[idxToRepay1 - 1]) {\\n            _secondRepay(p, idxToRepay1 - 1 == IDX_ASSET ? IDX_TOKEN : IDX_ASSET, idxToRepay1 - 1, amountToRepay2, type(uint).max);\\n          }\\n        }\\n      } else {\\n        // leftovers were swapped, there are no debts anymore\\n        // the swap can change pool proportions, so probably it's necessary to make additional borrow here\\n        if (\\n          idxToRepay1 == 0 // there are no debts anymore\\n          && p.usePoolProportions  // we use proportions from the pool\\n          && p.propNotUnderlying18 != 0 && p.propNotUnderlying18 != 1e18 // BorrowLib doesn't allow prop=0\\n        ) {\\n          _fixLeftoversProportions(p);\\n        }\\n      }\\n    }\\n\\n    // Withdraw is completed on last iteration (no debts, swapping leftovers)\\n    return idxToRepay1 == 0;\\n  }\\n\\n  /// @notice Make final repay in the scheme REPAY-SWAP-REPAY\\n  ///         Depending on condition the final repay can be made several times or additional borrow can be made\\n  /// @param amountToRepay Amount of {indexBorrow} asset that should be repaid\\n  /// @param needToRepayPrev Amount-to-repay on previous call of the {_secondRepay}\\n  ///                        This amount should decrease on each step of recursion.\\n  ///                        if it doesn't decrease repay is not successfull and it's useless to continue to call repays\\n  ///                        It can happen if liquidationThreshold has incorrect value (i.t. it's too low or zero)\\n  function _secondRepay(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    uint indexCollateral,\\n    uint indexBorrow,\\n    uint amountToRepay,\\n    uint needToRepayPrev\\n  ) internal {\\n    // we need to know repaidAmount\\n    // we cannot relay on the value returned by _repayDebt because of SCB-710, we need to check balances\\n    uint balanceBefore = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\\n    ConverterStrategyBaseLib._repayDebt(p.converter, p.tokens[indexCollateral], p.tokens[indexBorrow], amountToRepay);\\n    uint balanceAfter = IERC20(p.tokens[indexBorrow]).balanceOf(address(this));\\n\\n    uint repaidAmount = balanceBefore > balanceAfter\\n      ? balanceBefore - balanceAfter\\n      : 0;\\n\\n    if (repaidAmount < amountToRepay && amountToRepay - repaidAmount > p.liquidationThresholds[indexBorrow]) {\\n      // repaidAmount is less than expected\\n      // we need to make additional borrow OR probably make one more repay\\n      // repaidAmount can be less amountToRepay2 even if there is still opened debt, see SCB-777\\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexCollateral], p.tokens[indexBorrow], true);\\n      if (\\n        needToRepay > p.liquidationThresholds[indexBorrow]\\n        && needToRepay < needToRepayPrev // amount of debt was reduced on prev iteration of recursion\\n      ) {\\n        // more repays are required\\n        _secondRepay(p, indexCollateral, indexBorrow, amountToRepay - repaidAmount, needToRepay);\\n      } else {\\n        _borrowToProportions(p, indexBorrow, indexCollateral, false);\\n      }\\n    }\\n  }\\n\\n  /// @notice Set balances to right proportions using borrow\\n  ///         (it can be necessary if propNotUnderlying18 was changed after swap)\\n  function _fixLeftoversProportions(IterationPlanLib.SwapRepayPlanParams memory p) internal {\\n    uint balanceAsset = IERC20(p.tokens[IDX_ASSET]).balanceOf(address(this));\\n    uint balanceToken = IERC20(p.tokens[IDX_TOKEN]).balanceOf(address(this));\\n    (uint targetAssets,\\n      uint targetTokens\\n    ) = IterationPlanLib._getTargetAmounts(p.prices, p.decs, balanceAsset, balanceToken, p.propNotUnderlying18, IDX_ASSET, IDX_TOKEN);\\n\\n    if (balanceAsset > targetAssets) {\\n      if (balanceAsset - targetAssets > p.liquidationThresholds[IDX_ASSET]) {\\n        _borrowToProportions(p, IDX_ASSET, IDX_TOKEN, balanceAsset, balanceToken, true);\\n      }\\n    } else if (balanceToken > targetTokens) {\\n      if (balanceToken - targetTokens > p.liquidationThresholds[IDX_ASSET]) {\\n        _borrowToProportions(p, IDX_TOKEN, IDX_ASSET, balanceToken, balanceAsset, true);\\n      }\\n    }\\n  }\\n\\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\\n  function _borrowToProportions(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    uint indexCollateral,\\n    uint indexBorrow,\\n    bool checkOppositDebtDoesntExist\\n  ) internal {\\n    _borrowToProportions(\\n      p,\\n      indexCollateral,\\n      indexBorrow,\\n      IERC20(p.tokens[indexCollateral]).balanceOf(address(this)),\\n      IERC20(p.tokens[indexBorrow]).balanceOf(address(this)),\\n      checkOppositDebtDoesntExist\\n    );\\n  }\\n\\n  /// @notice borrow borrow-asset under collateral-asset, result balances should match to propNotUnderlying18\\n  function _borrowToProportions(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    uint indexCollateral,\\n    uint indexBorrow,\\n    uint balanceCollateral,\\n    uint balanceBorrow,\\n    bool checkOppositDebtDoesntExist\\n  ) internal {\\n    // we are going to change direction of the borrow\\n    // let's ensure that there is no debt in opposite direction\\n    if (checkOppositDebtDoesntExist) {\\n      (uint needToRepay,) = p.converter.getDebtAmountStored(address(this), p.tokens[indexBorrow], p.tokens[indexCollateral], false);\\n      require(needToRepay < AppLib.DUST_AMOUNT_TOKENS, AppErrors.OPPOSITE_DEBT_EXISTS);\\n    }\\n\\n    BorrowLib.RebalanceAssetsCore memory cac = BorrowLib.RebalanceAssetsCore({\\n      converterLiquidator: BorrowLib.ConverterLiquidator(p.converter, p.liquidator),\\n      assetA: p.tokens[indexCollateral],\\n      assetB: p.tokens[indexBorrow],\\n      propA: indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18,\\n      propB: indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18,\\n    // {assetA} to {assetB} ratio; {amountB} * {alpha} => {amountA}, decimals 18\\n      alpha18: 1e18 * p.prices[indexBorrow] * p.decs[indexCollateral] / p.prices[indexCollateral] / p.decs[indexBorrow],\\n      thresholdA: p.liquidationThresholds[indexCollateral],\\n      addonA: 0,\\n      addonB: 0,\\n      indexA: indexCollateral,\\n      indexB: indexBorrow\\n    });\\n\\n    BorrowLib.openPosition(\\n      cac,\\n      BorrowLib.PricesDecs({\\n        prices: p.prices,\\n        decs: p.decs\\n      }),\\n      balanceCollateral,\\n      balanceBorrow\\n    );\\n  }\\n\\n  /// @notice Calculate amount that should be repaid to get right proportions of assets on balance\\n  ///         Analyse only single borrow-direction: indexCollateral => indexBorrow\\n  /// @return amountToRepay Amount that should be repaid\\n  /// @return borrowInsteadRepay true if repay is not necessary at all and borrow is required instead\\n  ///                            if we need both repay and borrow then false is returned\\n  function _getAmountToRepay2(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    uint indexCollateral,\\n    uint indexBorrow\\n  ) internal view returns (\\n    uint amountToRepay,\\n    bool borrowInsteadRepay\\n  ) {\\n    GetAmountToRepay2Local memory v;\\n    v.c0 = IERC20(p.tokens[indexCollateral]).balanceOf(address(this)) * p.prices[indexCollateral] / p.decs[indexCollateral];\\n    v.b0 = IERC20(p.tokens[indexBorrow]).balanceOf(address(this)) * p.prices[indexBorrow] / p.decs[indexBorrow];\\n\\n    v.x = indexCollateral == IDX_ASSET ? 1e18 - p.propNotUnderlying18 : p.propNotUnderlying18;\\n    v.y = indexCollateral == IDX_ASSET ? p.propNotUnderlying18 : 1e18 - p.propNotUnderlying18;\\n    v.alpha = p.prices[indexCollateral] * p.decs[indexBorrow] * 1e18 / p.prices[indexBorrow] / p.decs[indexCollateral];\\n\\n    (uint needToRepay, uint collateralAmountOut) = p.converter.getDebtAmountStored(\\n      address(this),\\n      p.tokens[indexCollateral],\\n      p.tokens[indexBorrow],\\n      true\\n    );\\n\\n    if (needToRepay == 0) {\\n      // check if we need to make reverse borrow to fit to proportions: borrow collateral-asset under borrow-asset\\n      uint targetCollateral = (v.c0 + v.b0) * v.x / (v.x + v.y);\\n      borrowInsteadRepay = targetCollateral > v.c0\\n        && targetCollateral - v.c0\\n        > (p.liquidationThresholds[indexCollateral] * p.prices[indexCollateral] / p.decs[indexCollateral]);\\n    } else {\\n      // initial balances: c0, b0\\n      // we are going to repay amount b and receive (betta * b, b), where betta ~ alpha * totalCollateral / totalBorrow\\n      // we should have x/y = (c0 + betta * b) / (b0 - b)\\n      // so b = (x * b0 - y * c0) / (betta * y + x)\\n      v.b = (int(v.x * v.b0) - int(v.y * v.c0)) / (int(v.y * v.alpha * collateralAmountOut / needToRepay / 1e18) + int(v.x));\\n      if (v.b > 0) {\\n        amountToRepay = uint(v.b);\\n      }\\n    }\\n\\n    return (amountToRepay * p.decs[indexBorrow] / p.prices[indexBorrow], borrowInsteadRepay);\\n  }\\n\\n  /// @notice Swap {aggParams.amountToSwap} using either liquidator or aggregator\\n  /// @dev You can use liquidator as aggregator, so aggregator's logic will be used for the liquidator\\n  /// @param amountIn Calculated amount to be swapped. It can be different from {aggParams.amountToSwap} a bit,\\n  ///                 but aggregators require exact value {aggParams.amountToSwap}, so amountIn is not used with agg.\\n  function _swap(\\n    IterationPlanLib.SwapRepayPlanParams memory p,\\n    SwapByAggParams memory aggParams,\\n    uint indexIn,\\n    uint indexOut,\\n    uint amountIn\\n  ) internal returns (\\n    uint spentAmountIn,\\n    uint updatedPropNotUnderlying18\\n  ) {\\n    // liquidator and aggregator have different logic here:\\n    // - liquidator uses amountIn to swap\\n    // - Aggregator uses amountToSwap for which a route was built off-chain before the call of the swap()\\n    // It's allowed to use aggregator == liquidator, so in this way liquidator will use aggregator's logic (for tests)\\n\\n    if (!aggParams.useLiquidator) {\\n      // aggregator requires exact input amount - aggParams.amountToSwap\\n      // actual amount can be a bit different because the quote function was called in different block\\n      amountIn = aggParams.amountToSwap;\\n    }\\n    address aggregator = aggParams.useLiquidator\\n      ? address(p.liquidator)\\n      : aggParams.aggregator;\\n\\n    require(amountIn <= IERC20(p.tokens[indexIn]).balanceOf(address(this)), AppErrors.NOT_ENOUGH_BALANCE);\\n    // let's ensure that \\\"next swap\\\" is made using correct token\\n    require(aggParams.tokenToSwap == p.tokens[indexIn], AppErrors.INCORRECT_SWAP_BY_AGG_PARAM);\\n\\n    if (amountIn > p.liquidationThresholds[indexIn]) {\\n      AppLib.approveIfNeeded(p.tokens[indexIn], amountIn, aggregator);\\n\\n      uint balanceTokenOutBefore = AppLib.balance(p.tokens[indexOut]);\\n\\n      if (aggParams.useLiquidator) {\\n\\n        (spentAmountIn,) = ConverterStrategyBaseLib._liquidate(\\n          p.converter,\\n          ITetuLiquidator(aggregator),\\n          p.tokens[indexIn],\\n          p.tokens[indexOut],\\n          amountIn,\\n          _ASSET_LIQUIDATION_SLIPPAGE,\\n          p.liquidationThresholds[indexIn],\\n          true\\n        );\\n      } else {\\n        if (aggregator != address(p.liquidator)) {\\n          _checkSwapRouter(aggregator);\\n        }\\n\\n        (bool success, bytes memory result) = aggregator.call(aggParams.swapData);\\n        require(success, string(result));\\n\\n        spentAmountIn = amountIn;\\n      }\\n\\n      require(\\n        p.converter.isConversionValid(\\n          p.tokens[indexIn],\\n          amountIn,\\n          p.tokens[indexOut],\\n          AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\\n          _ASSET_LIQUIDATION_SLIPPAGE\\n        ), AppErrors.PRICE_IMPACT);\\n\\n      emit SwapByAgg(\\n        aggParams.amountToSwap,\\n        amountIn,\\n        AppLib.balance(p.tokens[indexOut]) - balanceTokenOutBefore,\\n        amountIn * p.prices[indexIn] * p.decs[indexOut] / p.prices[indexOut] / p.decs[indexIn],\\n        aggregator,\\n        p.tokens[indexIn],\\n        p.tokens[indexOut]\\n      );\\n    }\\n\\n    return (\\n      spentAmountIn,\\n    // p.propNotUnderlying18 contains original proportions that were valid before the swap\\n    // after swap() we need to re-read new values from the pool\\n      p.usePoolProportions\\n        ? IPoolProportionsProvider(address(this)).getPropNotUnderlying18()\\n        : p.propNotUnderlying18\\n    );\\n  }\\n  //endregion ------------------------------------------------ Internal helper functions\\n\\n  //region ----------------------------------------- Utils\\n  function getPoolPriceAdjustment(uint poolPriceDecimals) external pure returns (uint adjustment) {\\n    // we assume that decimals never higher than 18\\n    adjustment = poolPriceDecimals < 18 ? 10 ** (18 - poolPriceDecimals) : 1;\\n  }\\n\\n  function _checkSwapRouter(address router) internal pure {\\n    require(router == ONEINCH || router == OPENOCEAN, UNKNOWN_SWAP_ROUTER);\\n  }\\n\\n  /// @notice Extract propNotUnderlying18 from {planEntryData} of the given {planKind}\\n  function _extractProp(uint planKind, bytes memory planEntryData) internal pure returns (\\n    uint propNotUnderlying18,\\n    uint entryDataParamValue\\n  ) {\\n    if (planKind == IterationPlanLib.PLAN_SWAP_REPAY || planKind == IterationPlanLib.PLAN_SWAP_ONLY) {\\n      (, propNotUnderlying18) = abi.decode(planEntryData, (uint, uint));\\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\\n    } else {\\n      require(planKind == IterationPlanLib.PLAN_REPAY_SWAP_REPAY, AppErrors.WRONG_VALUE);\\n      // save \\\"required-amount-to-reduce-debt\\\" to entryDataParamValue\\n      (, propNotUnderlying18, entryDataParamValue) = abi.decode(planEntryData, (uint, uint, uint));\\n      require(propNotUnderlying18 <= 1e18 || propNotUnderlying18 == type(uint).max, AppErrors.INVALID_VALUE); // 0 is allowed\\n    }\\n    return (propNotUnderlying18, entryDataParamValue);\\n  }\\n  //endregion ------------------------------------------ Utils\\n}\\n\",\"keccak256\":\"0x4f83352fff906b68d581d11b43a506408511778712a20a0958ea36a21e413cff\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106102475760003560e01c8063767e17e811610145578063c143e087116100c2578063d7a1d53511610086578063d7a1d535146102f9578063e0c24b3a1461043f578063e642319514610447578063ec88f9ff146102a2578063f7ebc365146102a257600080fd5b8063c143e08714610324578063c63891c7146102a2578063c8ce726c146102f1578063cdb549351461042f578063d3a9335c1461043757600080fd5b8063a200f62b11610109578063a200f62b146102f1578063a7231ef6146103eb578063aea02d91146103f3578063c00d3e0b146102f9578063c06ab65f146103fb57600080fd5b8063767e17e8146102f1578063831fd9ea146103245780638f875cc814610324578063927154f0146103b85780639c2d8d63146102f957600080fd5b806337d11dc1116101d357806360339c591161019757806360339c59146102f9578063603938b814610324578063673d63db1461032c5780636bffb346146103685780637545be261461038857600080fd5b806337d11dc1146102f957806343fc304a1461030157806346326a2914610309578063556ce728146103115780635be05524146102f157600080fd5b8063137c52b21161021a578063137c52b2146102a25780631429888b146102aa57806314ad109e146102b2578063217052d1146102a257806335f33bc2146102f157600080fd5b8063058ba3db1461024c5780630593c4c91461026a5780631033193e1461028c5780631200fb3c146102a2575b600080fd5b61025461044f565b6040516102619190613bc5565b60405180910390f35b81801561027657600080fd5b5061028a610285366004613c68565b61046b565b005b610294600981565b604051908152602001610261565b610294600181565b610294600781565b8180156102be57600080fd5b506102d26102cd366004613ea9565b610607565b604080516001600160a01b039093168352602083019190915201610261565b610294600281565b610294600081565b610294600c81565b610294600a81565b61029461031f366004613f5d565b610769565b610294600381565b6102546040518060400160405280601981526020017f5042532d3320496e636f7272656374207469636b52616e67650000000000000081525081565b81801561037457600080fd5b5061028a610383366004613f76565b610796565b81801561039457600080fd5b506103a86103a336600461403b565b6107fa565b6040519015158152602001610261565b610254604051806040016040528060148152602001732821299698902ab735b737bbb7103937baba32b960611b81525081565b610294600b81565b610294600581565b61025460405180604001604052806015815260200174141094cb4d48125b98dbdc9c9958dd08185cdcd95d605a1b81525081565b610294606481565b610294600481565b610294600681565b610294600881565b6040518060600160405280602281526020016148826022913981565b805115801561047c57506020810151155b8061048c57506020810151815111155b6040518060400160405280601381526020017254532d333020696e76616c69642076616c756560681b815250906104df5760405162461bcd60e51b81526004016104d69190613bc5565b60405180910390fd5b5060408101511580156104f457506060810151155b8061050757506060810151604082015110155b6040518060400160405280601381526020017254532d333020696e76616c69642076616c756560681b815250906105515760405162461bcd60e51b81526004016104d69190613bc5565b508051158015906105655750604081015115155b156105bc5780516040808301518151808301909252601382527254532d333020696e76616c69642076616c756560681b60208301529091106105ba5760405162461bcd60e51b81526004016104d69190613bc5565b505b6105cb60018301826004613b22565b507fef6880b7ef7308e1a0fdc54890042b9fc1d2355795cd67a12c76d38438e643b5816040516105fb9190614144565b60405180910390a15050565b600080808061062761061f8b835b60200201516109c7565b8a6002610a8c565b9150915060006040518061016001604052808c60006002811061064c5761064c61412e565b60200201516001600160a01b031681526020018c6001600281106106725761067261412e565b60200201516001600160a01b031681526020018b81526020018a8152602001848152602001838152602001898152602001888152602001600019886000600281106106bf576106bf61412e565b6020020151146106d0578751610732565b306001600160a01b0316634ba31b016040518163ffffffff1660e01b8152600401602060405180830381865afa15801561070e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107329190614175565b8152875160001914602082015260400187600160200201519052905061075781610c7a565b94509450505050965096945050505050565b60006012821061077a576001610790565b6107858260126141a4565b61079090600a61429b565b92915050565b81548190839060ff191660018360038111156107b4576107b46142a7565b02179055507f5a7ee3c5ef7f4e3625ee638c3a95481dc4cbfaceda022d1e8fba8ed7fa2208e18160038111156107ec576107ec6142a7565b6040519081526020016105fb565b6000808061081361080b8e83610615565b8d6002610a8c565b9150915060006040518061016001604052808f6000600281106108385761083861412e565b60200201516001600160a01b031681526020018f60016002811061085e5761085e61412e565b60200201516001600160a01b031681526020018e81526020018d815260200184815260200183815260200160026001600160401b038111156108a2576108a2613bd8565b6040519080825280602002602001820160405280156108cb578160200160208202803683370190505b508152602081018890528651604090910190600019146108ec57865161094e565b306001600160a01b0316634ba31b016040518163ffffffff1660e01b8152600401602060405180830381865afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190614175565b815286516000191460208201526040018660016020020151815250905060006040518060a0016040528089151581526020018d6001600160a01b031681526020018b6001600160a01b031681526020018c81526020018a81525090506109b48282610ded565b9f9e505050505050505050505050505050565b6000816001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b91906142bd565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079091906142bd565b606080826001600160401b03811115610aa757610aa7613bd8565b604051908082528060200260200182016040528015610ad0578160200160208202803683370190505b509150826001600160401b03811115610aeb57610aeb613bd8565b604051908082528060200260200182016040528015610b14578160200160208202803683370190505b50905060005b83811015610c7157848181518110610b3457610b3461412e565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9d91906142da565b610ba890600a6142fd565b828281518110610bba57610bba61412e565b602002602001018181525050856001600160a01b031663b3596f07868381518110610be757610be761412e565b60200260200101516040518263ffffffff1660e01b8152600401610c0b919061430c565b602060405180830381865afa158015610c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c9190614175565b838281518110610c5e57610c5e61412e565b6020908102919091010152600101610b1a565b50935093915050565b600080600073__$c47fce1b4718dfd79949bdda1ff0df9edc$__632be98102604051806040016040528087600001516001600160a01b03166001600160a01b0316815260200187602001516001600160a01b03166001600160a01b03168152508660400151876060015188608001518960a001518a60c001516040518060e001604052808d6101200151610d0f576000610d12565b60015b60ff1681526020018d60e0015181526020018d61010001518152602001600019815260200160008152602001600181526020018d61014001518152506040518863ffffffff1660e01b8152600401610d7097969594939291906143b7565b606060405180830381865af4158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db19190614469565b50925090508015610de7576040840151610dcc6001836141a4565b81518110610ddc57610ddc61412e565b602002602001015192505b50915091565b60008060008073__$c47fce1b4718dfd79949bdda1ff0df9edc$__632be98102604051806040016040528089600001516001600160a01b03166001600160a01b0316815260200189602001516001600160a01b03166001600160a01b0316815250886040015189606001518a608001518b60a001518c60c001516040518060e001604052808f6101200151610e83576000610e86565b60015b60ff1681526020018f60e0015181526020018f61010001518152602001600019815260200160008152602001600181526020018f61014001518152506040518863ffffffff1660e01b8152600401610ee497969594939291906143b7565b606060405180830381865af4158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f259190614469565b9250925092506000604051806080016040528060028960e001511480610f4d575060e0890151155b15151515815260200160018960e001511480610f6b575060e0890151155b1515815260e0890180516001908114602084015290511460409091015290508315801590610f97575080515b15610fd657610fce8787610fac6001886141a4565b6000610fb960018a6141a4565b14610fc5576000610fc8565b60015b87611260565b610100890152505b8115801590610fe6575060208101515b156110f457865160408801516110f0919060006110046001876141a4565b14611010576000611013565b60015b815181106110235761102361412e565b6020026020010151896040015160018661103d91906141a4565b8151811061104d5761104d61412e565b60200260200101518a6040015160018761106791906141a4565b815181106110775761107761412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016110aa919061430c565b602060405180830381865afa1580156110c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110eb9190614175565b6118b0565b5050505b83156112555760408101511561120e576111148787610fac6001886141a4565b610100890152506060810151801561112b57508115155b156112095760008061116289826111436001886141a4565b1461114f576000611152565b60015b61115d6001886141a4565b611a74565b9150915080156111a35761119e8961117b6001876141a4565b60006111886001896141a4565b14611194576000611197565b60015b6001612009565b611206565b60608901516111b36001866141a4565b815181106111c3576111c361412e565b6020026020010151821115611206576112068960006111e36001886141a4565b146111ef5760006111f2565b60015b6111fd6001886141a4565b8560001961212f565b50505b611255565b8115801561121e57508661012001515b801561122e575061010087015115155b80156112475750866101000151670de0b6b3a764000014155b156112555761125587612409565b501595945050505050565b600080856000015161127457856060015192505b855160009061128757866040015161128d565b87602001515b9050876040015186815181106112a5576112a561412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016112d8919061430c565b602060405180830381865afa1580156112f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113199190614175565b8411156040518060400160405280601781526020017654532d37206e6f7420656e6f7567682062616c616e636560481b8152509061136a5760405162461bcd60e51b81526004016104d69190613bc5565b50876040015186815181106113815761138161412e565b60200260200101516001600160a01b031687602001516001600160a01b0316146040518060400160405280601181526020017054532d323520737761702062792061676760781b815250906113e95760405162461bcd60e51b81526004016104d69190613bc5565b50876060015186815181106114005761140061412e565b602002602001015184111561182857611437886040015187815181106114285761142861412e565b602002602001015185836125ec565b600061145f896040015187815181106114525761145261412e565b6020026020010151612697565b8851909150156114df576114d78960000151838b604001518a815181106114885761148861412e565b60200260200101518c604001518a815181106114a6576114a661412e565b60200260200101518961012c8f606001518e815181106114c8576114c861412e565b60200260200101516001612707565b509350611592565b88602001516001600160a01b0316826001600160a01b0316146115055761150582612812565b600080836001600160a01b03168a608001516040516115249190614497565b6000604051808303816000865af19150503d8060008114611561576040519150601f19603f3d011682016040523d82523d6000602084013e611566565b606091505b509150915081819061158b5760405162461bcd60e51b81526004016104d69190613bc5565b5086955050505b88600001516001600160a01b031663291f89c48a6040015189815181106115bb576115bb61412e565b6020026020010151878c604001518a815181106115da576115da61412e565b6020026020010151856115fc8f604001518d815181106114525761145261412e565b61160691906141a4565b61012c6040518663ffffffff1660e01b81526004016116299594939291906144b3565b602060405180830381865afa158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a91906144e7565b604051806040016040528060128152602001711514cb4c4d881c1c9a58d9481a5b5c1858dd60721b815250906116b35760405162461bcd60e51b81526004016104d69190613bc5565b507f650da787b25801954b4e03c78b9c6b07fddcbda246347411c49d282c7225f592886060015186836116f58d604001518b815181106114525761145261412e565b6116ff91906141a4565b8c60a001518b815181106117155761171561412e565b60200260200101518d608001518b815181106117335761173361412e565b60200260200101518e60a001518c815181106117515761175161412e565b60200260200101518f608001518e8151811061176f5761176f61412e565b60200260200101518c6117829190614504565b61178c9190614504565b6117969190614531565b6117a09190614531565b868e604001518d815181106117b7576117b761412e565b60200260200101518f604001518d815181106117d5576117d561412e565b602090810291909101810151604080519889529188019690965286019390935260608501919091526001600160a01b03908116608085015290811660a08401521660c082015260e00160405180910390a1505b8288610120015161183e578861010001516118a0565b306001600160a01b0316634ba31b016040518163ffffffff1660e01b8152600401602060405180830381865afa15801561187c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a09190614175565b92509250505b9550959350505050565b600080600080856001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016118e2919061430c565b602060405180830381865afa1580156118ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119239190614175565b90506000886001600160a01b031663dd27ede7308a8a60016040518563ffffffff1660e01b815260040161195a9493929190614545565b60408051808303816000875af1158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c919061456f565b5090506119b78187106119af57816119b1565b865b836128a8565b60405163667df24960e01b81523060048201526001600160a01b038a811660248301528981166044830152606482018390529194506000918b169063667df2499060840160408051808303816000875af1158015611a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3d919061456f565b909650905080861115611a5757611a5481876141a4565b95505b611a648a8a8a87876128c0565b9550505050509450945094915050565b600080611ab06040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8560a001518581518110611ac657611ac661412e565b602002602001015186608001518681518110611ae457611ae461412e565b602002602001015187604001518781518110611b0257611b0261412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611b35919061430c565b602060405180830381865afa158015611b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b769190614175565b611b809190614504565b611b8a9190614531565b604082015260a0860151805185908110611ba657611ba661412e565b602002602001015186608001518581518110611bc457611bc461412e565b602002602001015187604001518681518110611be257611be261412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611c15919061430c565b602060405180830381865afa158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190614175565b611c609190614504565b611c6a9190614531565b60608201528415611c8057856101000151611c98565b610100860151611c9890670de0b6b3a76400006141a4565b81528415611cbd57610100860151611cb890670de0b6b3a76400006141a4565b611cc4565b8561010001515b602082015260a0860151805186908110611ce057611ce061412e565b602002602001015186608001518581518110611cfe57611cfe61412e565b60200260200101518760a001518681518110611d1c57611d1c61412e565b602002602001015188608001518881518110611d3a57611d3a61412e565b6020026020010151611d4c9190614504565b611d5e90670de0b6b3a7640000614504565b611d689190614531565b611d729190614531565b81608001818152505060008087600001516001600160a01b031663e4c2be70308a604001518a81518110611da857611da861412e565b60200260200101518b604001518a81518110611dc657611dc661412e565b602002602001015160016040518563ffffffff1660e01b8152600401611def9493929190614545565b6040805180830381865afa158015611e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2f919061456f565b9150915081600003611f0f5760208301518351600091611e4e91614593565b845160608601516040870151611e649190614593565b611e6e9190614504565b611e789190614531565b9050836040015181118015611f0757508860a001518881518110611e9e57611e9e61412e565b602002602001015189608001518981518110611ebc57611ebc61412e565b60200260200101518a606001518a81518110611eda57611eda61412e565b6020026020010151611eec9190614504565b611ef69190614531565b6040850151611f0590836141a4565b115b945050611fab565b8260000151670de0b6b3a7640000838386608001518760200151611f339190614504565b611f3d9190614504565b611f479190614531565b611f519190614531565b611f5b91906145a6565b83604001518460200151611f6f9190614504565b60608501518551611f809190614504565b611f8a91906145ce565b611f9491906145f5565b60a0840181905260001215611fab578260a0015194505b87608001518681518110611fc157611fc161412e565b60200260200101518860a001518781518110611fdf57611fdf61412e565b602002602001015186611ff29190614504565b611ffc9190614531565b9450505050935093915050565b612129848484876040015187815181106120255761202561412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612058919061430c565b602060405180830381865afa158015612075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120999190614175565b886040015187815181106120af576120af61412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016120e2919061430c565b602060405180830381865afa1580156120ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121239190614175565b86612aa9565b50505050565b6000856040015184815181106121475761214761412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161217a919061430c565b602060405180830381865afa158015612197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bb9190614175565b90506122078660000151876040015187815181106121db576121db61412e565b6020026020010151886040015187815181106121f9576121f961412e565b6020026020010151866118b0565b5050506000866040015185815181106122225761222261412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612255919061430c565b602060405180830381865afa158015612272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122969190614175565b905060008183116122a85760006122b2565b6122b282846141a4565b905084811080156122ea5750876060015186815181106122d4576122d461412e565b602002602001015181866122e891906141a4565b115b156123ff57600088600001516001600160a01b031663e4c2be70308b604001518b8151811061231b5761231b61412e565b60200260200101518c604001518b815181106123395761233961412e565b602002602001015160016040518563ffffffff1660e01b81526004016123629493929190614545565b6040805180830381865afa15801561237e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a2919061456f565b509050886060015187815181106123bb576123bb61412e565b6020026020010151811180156123d057508481105b156123f0576123eb8989896123e5868b6141a4565b8561212f565b6123fd565b6123fd89888a6000612009565b505b5050505050505050565b600081604001516000815181106124225761242261412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612455919061430c565b602060405180830381865afa158015612472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124969190614175565b9050600082604001516001815181106124b1576124b161412e565b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016124e4919061430c565b602060405180830381865afa158015612501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125259190614175565b905060008061254885608001518660a00151868689610100015160006001612dcc565b915091508184111561259b57846060015160008151811061256b5761256b61412e565b6020026020010151828561257f91906141a4565b111561259657612596856000600187876001612aa9565b6125e5565b808311156125e55784606001516000815181106125ba576125ba61412e565b602002602001015181846125ce91906141a4565b11156125e5576125e5856001600086886001612aa9565b5050505050565b604051636eb1769f60e11b81523060048201526001600160a01b03828116602483015283919085169063dd62ed3e90604401602060405180830381865afa15801561263b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265f9190614175565b10156126925761267a6001600160a01b038416826000612f5b565b6126926001600160a01b03841682600160ff1b612f5b565b505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906126c690309060040161430c565b602060405180830381865afa1580156126e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190614175565b60008083861161271c57506000905080612805565b604051633744088160e11b81526001600160a01b0389811660048301528881166024830152600091908b1690636e88110290604401600060405180830381865afa15801561276e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127969190810190614668565b50805160408051808201909152601a81527f54532d3135204e6f206c69717569646174696f6e20726f75746500000000000060208201529192506127ed5760405162461bcd60e51b81526004016104d69190613bc5565b50866127ff8c838d8d8d8d8d8c6130a3565b92509250505b9850989650505050505050565b6001600160a01b038116731111111254eeb25477b68fb85ed929f73a960582148061285957506001600160a01b038116736352a56caadc4f1e25cd6c75970fa768a3304e64145b604051806040016040528060148152602001732821299698902ab735b737bbb7103937baba32b960611b815250906128a45760405162461bcd60e51b81526004016104d69190613bc5565b5050565b60008183106128b757816128b9565b825b9392505050565b600080606484106118a6576128df6001600160a01b0386168886613381565b6040516314b685e960e21b81526001600160a01b038781166004830152868116602483015260448201869052306064830152600091908916906352da17a4906084016080604051808303816000875af1158015612940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129649190614781565b5050604080516001600160a01b03808c1682528a1660208201529081018890523060608201526080810183905260a0810182905291945091507f1d1ba11e7ca20f5dc77d8cfd75b68d11520677808f89f6ba0f0e50dc52c450129060c00160405180910390a16040516370a0823160e01b81526000906001600160a01b038816906370a08231906129f990309060040161430c565b602060405180830381865afa158015612a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3a9190614175565b9050808511612a4a576000612a54565b612a5481866141a4565b60408051808201909152600f81526e53423a2057726f6e672076616c756560881b60208201529093508215612a9c5760405162461bcd60e51b81526004016104d69190613bc5565b5050509550959350505050565b8015612bc057600086600001516001600160a01b031663e4c2be703089604001518881518110612adb57612adb61412e565b60200260200101518a604001518a81518110612af957612af961412e565b602002602001015160006040518563ffffffff1660e01b8152600401612b229493929190614545565b6040805180830381865afa158015612b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b62919061456f565b509050606481106040518060400160405280601a81526020017f54532d3239206f70706f7369746520646562742065786973747300000000000081525090612bbd5760405162461bcd60e51b81526004016104d69190613bc5565b50505b600060405180610160016040528060405180604001604052808a600001516001600160a01b031681526020018a602001516001600160a01b0316815250815260200188604001518881518110612c1857612c1861412e565b60200260200101516001600160a01b0316815260200188604001518781518110612c4457612c4461412e565b60200260200101516001600160a01b0316815260200160008814612c6d57886101000151612c85565b610100890151612c8590670de0b6b3a76400006141a4565b81526020018715612cad57610100890151612ca890670de0b6b3a76400006141a4565b612cb4565b8861010001515b81526020018860a001518781518110612ccf57612ccf61412e565b602002602001015189608001518981518110612ced57612ced61412e565b60200260200101518a60a001518a81518110612d0b57612d0b61412e565b60200260200101518b608001518a81518110612d2957612d2961412e565b6020026020010151670de0b6b3a7640000612d449190614504565b612d4e9190614504565b612d589190614531565b612d629190614531565b815260200188606001518881518110612d7d57612d7d61412e565b6020026020010151815260200160008152602001600081526020018781526020018681525090506123fd8160405180604001604052808a6080015181526020018a60a0015181525086866133b1565b6000806000888581518110612de357612de361412e565b60200260200101518a8681518110612dfd57612dfd61412e565b602002602001015189612e109190614504565b612e1a9190614531565b90506000898581518110612e3057612e3061412e565b60200260200101518b8681518110612e4a57612e4a61412e565b602002602001015189612e5d9190614504565b612e679190614531565b90508615612e9c57670de0b6b3a764000087612e838385614593565b612e8d9190614504565b612e979190614531565b612e9f565b60005b92508a8681518110612eb357612eb361412e565b60200260200101518a8781518110612ecd57612ecd61412e565b6020026020010151848385612ee29190614593565b612eec91906141a4565b612ef69190614504565b612f009190614531565b93508a8581518110612f1457612f1461412e565b60200260200101518a8681518110612f2e57612f2e61412e565b602002602001015184612f419190614504565b612f4b9190614531565b9250505097509795505050505050565b801580612fd55750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd39190614175565b155b6130405760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104d6565b6040516001600160a01b03831660248201526044810182905261269290849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261351e565b60006130b08685896125ec565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906130df90309060040161430c565b602060405180830381865afa1580156130fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131209190614175565b6040516310fe133960e31b81529091506001600160a01b038916906387f099c890613153908c90899089906004016147b7565b600060405180830381600087803b15801561316d57600080fd5b505af1158015613181573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03891691506370a08231906131b490309060040161430c565b602060405180830381865afa1580156131d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f59190614175565b90508181116040518060400160405280601681526020017554532d32302062616c616e636520646563726561736560501b815250906132475760405162461bcd60e51b81526004016104d69190613bc5565b5061325282826141a4565b925083806132d05750604051630a47e27160e21b81526001600160a01b038c169063291f89c49061328f908b908a908c9089908c906004016144b3565b602060405180830381865afa1580156132ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d091906144e7565b604051806040016040528060128152602001711514cb4c4d881c1c9a58d9481a5b5c1858dd60721b815250906133195760405162461bcd60e51b81526004016104d69190613bc5565b50604080516001600160a01b03808b1682528916602082015290810187905260608101879052608081018490527f5a821a618ddb1a1fd304234a69c9d7f20c129d122fcf35593d13a071926643079060a00160405180910390a1505098975050505050505050565b6040516001600160a01b03831660248201526044810182905261269290849063a9059cbb60e01b9060640161306c565b6000808560e00151600014806133ca5750610100860151155b6040518060400160405280601381526020017254532d333020696e76616c69642076616c756560681b815250906134145760405162461bcd60e51b81526004016104d69190613bc5565b506101008601511561348f5785610100015183106134505761344786858861010001518661344291906141a4565b6135f0565b91509150613515565b600061346e878787878b610100015161346991906141a4565b613789565b5090506134858761347f83886141a4565b866135f0565b9250925050613515565b60e08601511561350a578560e001518410156040518060400160405280601781526020017654532d37206e6f7420656e6f7567682062616c616e636560481b815250906134ef5760405162461bcd60e51b81526004016104d69190613bc5565b50613447868760e001518661350491906141a4565b856135f0565b6134478685856135f0565b94509492505050565b6000613573826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139929092919063ffffffff16565b805190915015612692578080602001905181019061359191906144e7565b6126925760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104d6565b6060838101516080808601516040805160016020820152808201949094528385019190915280518084039094018452910190526000908190819084156136c057670de0b6b3a7640000876080015188606001518960a00151886136539190614504565b61365d9190614504565b6136679190614531565b6136719190614531565b9150858211156040518060400160405280601081526020016f54532d392077726f6e672076616c756560801b815250906136be5760405162461bcd60e51b81526004016104d69190613bc5565b505b60208701516136db906136d384896141a4565b8951516125ec565b73__$e930d50fb5f4f1298547dbcb2bb0591990$__63ca27d10d886000015160000151838a602001518b60400151878c61371591906141a4565b8d60c001516040518763ffffffff1660e01b815260040161373b96959493929190614839565b6040805180830381865af4158015613757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377b919061456f565b935093505050935093915050565b60008060008560200151876101400151815181106137a9576137a961412e565b60200260200101518660000151886101200151815181106137cc576137cc61412e565b60200260200101518760200151896101200151815181106137ef576137ef61412e565b602002602001015188600001518a6101400151815181106138125761381261412e565b6020026020010151876138259190614504565b61382f9190614504565b6138399190614531565b6138439190614531565b9050620186a061385561012c82614593565b61385f9083614504565b6138699190614531565b90508085116040518060400160405280601781526020017654532d37206e6f7420656e6f7567682062616c616e636560481b815250906138bc5760405162461bcd60e51b81526004016104d69190613bc5565b5086518051602091820151918901516040808b015160c08c01519151637de8f56960e01b81526001600160a01b03948516600482015294841660248601529183166044850152911660648301526084820183905261012c60a483015260c4820152600060e482015273__$e930d50fb5f4f1298547dbcb2bb0591990$__90637de8f56990610104016040805180830381865af4158015613960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613984919061456f565b909890975095505050505050565b60606139a184846000856139a9565b949350505050565b606082471015613a0a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104d6565b600080866001600160a01b03168587604051613a269190614497565b60006040518083038185875af1925050503d8060008114613a63576040519150601f19603f3d011682016040523d82523d6000602084013e613a68565b606091505b5091509150613a7987838387613a84565b979650505050505050565b60608315613af3578251600003613aec576001600160a01b0385163b613aec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104d6565b50816139a1565b6139a18383815115613b085781518083602001fd5b8060405162461bcd60e51b81526004016104d69190613bc5565b8260048101928215613b50579160200282015b82811115613b50578251825591602001919060010190613b35565b50613b5c929150613b60565b5090565b5b80821115613b5c5760008155600101613b61565b60005b83811015613b90578181015183820152602001613b78565b50506000910152565b60008151808452613bb1816020860160208601613b75565b601f01601f19169290920160200192915050565b6020815260006128b96020830184613b99565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715613c1057613c10613bd8565b60405290565b604080519081016001600160401b0381118282101715613c1057613c10613bd8565b604051601f8201601f191681016001600160401b0381118282101715613c6057613c60613bd8565b604052919050565b60008060a08385031215613c7b57600080fd5b82359150602084603f850112613c9057600080fd5b604051608081018181106001600160401b0382111715613cb257613cb2613bd8565b6040528060a0860187811115613cc757600080fd5b8387015b81811015613ce25780358352918401918401613ccb565b50505080925050509250929050565b6001600160a01b0381168114613d0657600080fd5b50565b8035613d1481613cf1565b919050565b600082601f830112613d2a57600080fd5b613d32613c16565b806040840185811115613d4457600080fd5b845b81811015613d67578035613d5981613cf1565b845260209384019301613d46565b509095945050505050565b60006001600160401b03821115613d8b57613d8b613bd8565b5060051b60200190565b600082601f830112613da657600080fd5b81356020613dbb613db683613d72565b613c38565b82815260059290921b84018101918181019086841115613dda57600080fd5b8286015b84811015613dfe578035613df181613cf1565b8352918301918301613dde565b509695505050505050565b600082601f830112613e1a57600080fd5b81356020613e2a613db683613d72565b82815260059290921b84018101918181019086841115613e4957600080fd5b8286015b84811015613dfe5780358352918301918301613e4d565b600082601f830112613e7557600080fd5b613e7d613c16565b806040840185811115613e8f57600080fd5b845b81811015613d67578035845260209384019301613e91565b6000806000806000806101008789031215613ec357600080fd5b613ecd8888613d19565b955060408701356001600160401b0380821115613ee957600080fd5b613ef58a838b01613d95565b96506060890135915080821115613f0b57600080fd5b613f178a838b01613e09565b95506080890135915080821115613f2d57600080fd5b50613f3a89828a01613e09565b93505060a08701359150613f518860c08901613e64565b90509295509295509295565b600060208284031215613f6f57600080fd5b5035919050565b60008060408385031215613f8957600080fd5b82359150602083013560048110613f9f57600080fd5b809150509250929050565b60006001600160401b03821115613fc357613fc3613bd8565b50601f01601f191660200190565b600082601f830112613fe257600080fd5b8135613ff0613db682613faa565b81815284602083860101111561400557600080fd5b816020850160208301376000918101602001919091529392505050565b8015158114613d0657600080fd5b8035613d1481614022565b6000806000806000806000806000806101808b8d03121561405b57600080fd5b6140658c8c613d19565b995060408b01356001600160401b038082111561408157600080fd5b61408d8e838f01613d95565b9a5060608d01359150808211156140a357600080fd5b6140af8e838f01613e09565b99506140bd60808e01613d09565b985060a08d013597506140d260c08e01613d09565b965060e08d01359150808211156140e857600080fd5b506140f58d828e01613fd1565b9450506141056101008c01614030565b92506101208b0135915061411d8c6101408d01613e64565b90509295989b9194979a5092959850565b634e487b7160e01b600052603260045260246000fd5b60808101818360005b600481101561416c57815183526020928301929091019060010161414d565b50505092915050565b60006020828403121561418757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107905761079061418e565b600181815b808511156141f25781600019048211156141d8576141d861418e565b808516156141e557918102915b93841c93908002906141bc565b509250929050565b60008261420957506001610790565b8161421657506000610790565b816001811461422c576002811461423657614252565b6001915050610790565b60ff8411156142475761424761418e565b50506001821b610790565b5060208310610133831016604e8410600b8410161715614275575081810a610790565b61427f83836141b7565b80600019048211156142935761429361418e565b029392505050565b60006128b983836141fa565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156142cf57600080fd5b81516128b981613cf1565b6000602082840312156142ec57600080fd5b815160ff811681146128b957600080fd5b60006128b960ff8416836141fa565b6001600160a01b0391909116815260200190565b600081518084526020808501945080840160005b838110156143595781516001600160a01b031687529582019590820190600101614334565b509495945050505050565b600081518084526020808501945080840160005b8381101561435957815187529582019590820190600101614378565b8060005b6007811015612129578151845260209384019390910190600101614398565b60006101c0828a835b60028110156143e85781516001600160a01b03168352602092830192909101906001016143c0565b5050508060408401526143fd8184018a614320565b905082810360608401526144118189614364565b905082810360808401526144258188614364565b905082810360a08401526144398187614364565b905082810360c084015261444d8186614364565b91505061445d60e0830184614394565b98975050505050505050565b60008060006060848603121561447e57600080fd5b8351925060208401519150604084015190509250925092565b600082516144a9818460208701613b75565b9190910192915050565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b6000602082840312156144f957600080fd5b81516128b981614022565b80820281158282048414176107905761079061418e565b634e487b7160e01b600052601260045260246000fd5b6000826145405761454061451b565b500490565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b6000806040838503121561458257600080fd5b505080516020909101519092909150565b808201808211156107905761079061418e565b80820182811260008312801582168215821617156145c6576145c661418e565b505092915050565b81810360008312801583831316838312821617156145ee576145ee61418e565b5092915050565b6000826146045761460461451b565b600160ff1b82146000198414161561461e5761461e61418e565b500590565b600082601f83011261463457600080fd5b8151614642613db682613faa565b81815284602083860101111561465757600080fd5b6139a1826020830160208701613b75565b600080604080848603121561467c57600080fd5b83516001600160401b038082111561469357600080fd5b818601915086601f8301126146a757600080fd5b815160206146b7613db683613d72565b82815260079290921b8401810191818101908a8411156146d657600080fd5b948201945b83861015614750576080868c0312156146f45760008081fd5b6146fc613bee565b865161470781613cf1565b81528684015161471681613cf1565b818501528688015161472781613cf1565b8189015260608781015161473a81613cf1565b90820152825260809590950194908201906146db565b9189015191975090945050508083111561476957600080fd5b505061477785828601614623565b9150509250929050565b6000806000806080858703121561479757600080fd5b505082516020840151604085015160609095015191969095509092509050565b6060808252845182820181905260009190608090818501906020808a01865b8381101561481e57815180516001600160a01b0390811687528482015181168588015260408083015182169088015290880151168786015293850193908201906001016147d6565b50508601979097526040909401949094525090949350505050565b600060018060a01b03808916835260c0602084015261485b60c0840189613b99565b9681166040840152949094166060820152608081019290925260a090910152509291505056fe5042532d3420496e636f727265637420726562616c616e63655469636b52616e6765a2646970667358221220d64f3f3701be8c537a3ef86c61e655c9e4a482a5c68c5b0c342bd73c763d2e3064736f6c63430008110033",
  "libraries": {
    "ConverterStrategyBaseLib": "0x4353e0c2E893ab8285bb35e5f791752720409A5a",
    "IterationPlanLib": "0xF29809078F4994b4AB9d754e458A00a6380ce1D6"
  },
  "devdoc": {
    "details": "The library contains quoteWithdrawStep/withdrawStep-related logic",
    "kind": "dev",
    "methods": {
      "quoteWithdrawStep(address[2],address[],uint256[],uint256[],uint256,uint256[2])": {
        "params": {
          "amountsFromPool": "Amounts of {tokens} that will be received from the pool before calling withdraw",
          "converterLiquidator_": "[TetuConverter, TetuLiquidator]",
          "entryDataValues": "[propNotUnderlying18, entryDataParam]     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                           The leftovers should be swapped to get following result proportions of the assets:                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18                            Value type(uint).max means that the proportions should be read from the pool.     entryDataParam It contains \"required-amount-to-reduce-debt\" in REPAY-SWAP-REPAY case",
          "liquidationThresholds": "Liquidation thresholds for the {tokens}",
          "tokens": "Tokens used by depositor (length == 2: underlying and not-underlying)"
        },
        "returns": {
          "amountToSwap": "Amount that will be swapped on the next swap. 0 - no swap                      This amount is NOT reduced on {GAP_AMOUNT_TO_SWAP}, it should be reduced after the call if necessary.",
          "tokenToSwap": "Address of the token that will be swapped on the next swap. 0 - no swap"
        }
      },
      "withdrawStep(address[2],address[],uint256[],address,uint256,address,bytes,bool,uint256,uint256[2])": {
        "params": {
          "aggregator_": "Aggregator that should be used for the next swap. 0 - no swap",
          "amountToSwap_": "Amount that will be swapped on the next swap. 0 - no swap",
          "converterLiquidator_": "[TetuConverter, TetuLiquidator]",
          "entryDataValues": "[propNotUnderlying18, entryDataParam]     propNotUnderlying18 Required proportion of not-underlying for the final swap of leftovers, [0...1e18].                           The leftovers should be swapped to get following result proportions of the assets:                           not-underlying : underlying === propNotUnderlying18 : 1e18 - propNotUnderlying18     entryDataParam It contains \"required-amount-to-reduce-debt\" in REPAY-SWAP-REPAY case",
          "liquidationThresholds": "Liquidation thresholds for the {tokens}",
          "planKind": "One of IterationPlanLib.PLAN_XXX",
          "swapData_": "Swap data to be passed to the aggregator on the next swap.                  Swap data contains swap-route, amount and all other required info for the swap.                  Swap data should be prepared on-chain on the base of data received by {quoteWithdrawStep}",
          "tokenToSwap_": "Address of the token that will be swapped on the next swap. 0 - no swap",
          "tokens": "Tokens used by depositor (length == 2: underlying and not-underlying)",
          "useLiquidator_": "Use liquidator instead of aggregator.                       Aggregator swaps amount reduced on {GAP_AMOUNT_TO_SWAP}.                       Liquidator doesn't use {GAP_AMOUNT_TO_SWAP}.                       It's allowed to pass liquidator address in {aggregator_} and set {useLiquidator_} to false -                       the liquidator will be used in same way as aggregator in this case."
        },
        "returns": {
          "completed": "All debts were closed, leftovers were swapped to the required proportions"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ENTRY_TO_POOL_IS_ALLOWED()": {
        "notice": "Enter to the pool at the end of withdrawByAggStep"
      },
      "ENTRY_TO_POOL_IS_ALLOWED_IF_COMPLETED()": {
        "notice": "Enter to the pool at the end of withdrawByAggStep only if full withdrawing has been completed"
      },
      "FUSE_IDX_LOWER_LIMIT_ON()": {
        "notice": "Fuse thresholds are set as array: [LOWER_LIMIT_ON, LOWER_LIMIT_OFF, UPPER_LIMIT_ON, UPPER_LIMIT_OFF]         If the price falls below LOWER_LIMIT_ON the fuse is turned ON         When the prices raises back and reaches LOWER_LIMIT_OFF, the fuse is turned OFF         In the same way, if the price raises above UPPER_LIMIT_ON the fuse is turned ON         When the prices falls back and reaches UPPER_LIMIT_OFF, the fuse is turned OFF         Example: [0.9, 0.92, 1.08, 1.1]         Price falls below 0.9 - fuse is ON. Price rises back up to 0.92 - fuse is OFF.         Price raises more and reaches 1.1 - fuse is ON again. Price falls back and reaches 1.08 - fuse OFF again."
      },
      "GAP_AMOUNT_TO_SWAP()": {
        "notice": "A gap to reduce AmountToSwap calculated inside quoteWithdrawByAgg, [0...100_000]"
      },
      "quoteWithdrawStep(address[2],address[],uint256[],uint256[],uint256,uint256[2])": {
        "notice": "Get info for the swap that will be made on the next call of {withdrawStep}"
      },
      "withdrawStep(address[2],address[],uint256[],address,uint256,address,bytes,bool,uint256,uint256[2])": {
        "notice": "Make withdraw step with 0 or 1 swap only. The step can make one of the following actions:         1) repay direct debt 2) repay reverse debt 3) final swap leftovers of not-underlying asset"
      }
    },
    "notice": "Library for the UniV3-like strategies with two tokens in the pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}