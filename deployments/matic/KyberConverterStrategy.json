{
  "address": "0xe8a6f1eb3Dd4946883F4348432055c36B3441F6D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "ContractInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "withdrawnAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "OnDepositorEmergencyExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "consumedAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "OnDepositorEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "withdrawnAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "OnDepositorExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investedAssetsNewPrices",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnedByPrices",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnedHandleRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lostHandleRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnedDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lostDeposit",
          "type": "uint256"
        }
      ],
      "name": "OnHardWorkEarnedLost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "rewardTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amountsToForward",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toPerf",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toInsurance",
          "type": "uint256"
        }
      ],
      "name": "Recycle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "RevisionIncreased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLABLE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONVERTER_STRATEGY_BASE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KYBER_DEPOSITOR_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLATFORM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_BASE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcInvestedAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canFarm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pId",
          "type": "uint256"
        }
      ],
      "name": "changePId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "converter",
      "outputs": [
        {
          "internalType": "contract ITetuConverter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "created",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableFuse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "doHardWork",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "profitHolder",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "totalLiquidity",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "fuseThreshold",
          "type": "uint256"
        },
        {
          "internalType": "int24[]",
          "name": "ticks",
          "type": "int24[]"
        },
        {
          "internalType": "uint256[]",
          "name": "profitHolderBalances",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "flags",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldLogic",
          "type": "address"
        }
      ],
      "name": "increaseRevision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "splitter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "converter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickRange_",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "rebalanceTickRange_",
          "type": "int24"
        },
        {
          "internalType": "bool",
          "name": "isStablePool",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "pId",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "updateTotalAssetsBeforeInvest_",
          "type": "bool"
        }
      ],
      "name": "investAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strategyLoss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "isGovernance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isReadyToHardWork",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidationThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "needRebalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        }
      ],
      "name": "onTransferAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFeeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteRebalanceSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "direction",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "agg",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "rebalanceSwapByAgg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvestThresholdPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "theAsset_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "requirePayAmountBack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setCompoundRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFuseThreshold",
          "type": "uint256"
        }
      ],
      "name": "setFuseThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ratio_",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percent_",
          "type": "uint256"
        }
      ],
      "name": "setReinvestThresholdPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategyProfitHolder",
          "type": "address"
        }
      ],
      "name": "setStrategyProfitHolder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setStrategySpecificName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver_",
          "type": "address"
        }
      ],
      "name": "setupPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategySpecificName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllToSplitter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strategyLoss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToSplitter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strategyLoss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe60d4b1e6e5d834d2f0d5533cfa63ba768ec76551a246560093e2bc04d13d228",
  "receipt": {
    "to": null,
    "from": "0xbbbbb8C4364eC2ce52c59D2Ed3E56F307E529a94",
    "contractAddress": "0xe8a6f1eb3Dd4946883F4348432055c36B3441F6D",
    "transactionIndex": 35,
    "gasUsed": "5357164",
    "logsBloom": "0x
    "blockHash": "0xff0449d814858b6fb127515d888daf0c2282e68bc4bd9078584ef3dbcfb7478f",
    "transactionHash": "0xe60d4b1e6e5d834d2f0d5533cfa63ba768ec76551a246560093e2bc04d13d228",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 44702566,
        "transactionHash": "0xe60d4b1e6e5d834d2f0d5533cfa63ba768ec76551a246560093e2bc04d13d228",
        "address": "0xe8a6f1eb3Dd4946883F4348432055c36B3441F6D",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 169,
        "blockHash": "0xff0449d814858b6fb127515d888daf0c2282e68bc4bd9078584ef3dbcfb7478f"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 44702566,
        "transactionHash": "0xe60d4b1e6e5d834d2f0d5533cfa63ba768ec76551a246560093e2bc04d13d228",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bbbbb8c4364ec2ce52c59d2ed3e56f307e529a94",
          "0x000000000000000000000000ef46d5fe753c988606e6f703260d816af53b03eb"
        ],
        "data": "0x000000000000000000000000000000000000000000000000024e01ae35edc80000000000000000000000000000000000000000000000000159136abefc29d09e0000000000000000000000000000000000000000000012d0d9e852b691c12fdd00000000000000000000000000000000000000000000000156c56910c63c089e0000000000000000000000000000000000000000000012d0dc365464c7aef7dd",
        "logIndex": 170,
        "blockHash": "0xff0449d814858b6fb127515d888daf0c2282e68bc4bd9078584ef3dbcfb7478f"
      }
    ],
    "blockNumber": 44702566,
    "cumulativeGasUsed": "12997440",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e3392ebe03c0207abfeb5aef7c0ac055",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"withdrawnAmounts\",\"type\":\"uint256[]\"}],\"name\":\"OnDepositorEmergencyExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"consumedAmounts\",\"type\":\"uint256[]\"}],\"name\":\"OnDepositorEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"withdrawnAmounts\",\"type\":\"uint256[]\"}],\"name\":\"OnDepositorExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedAssetsNewPrices\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedByPrices\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedHandleRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lostHandleRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lostDeposit\",\"type\":\"uint256\"}],\"name\":\"OnHardWorkEarnedLost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsToForward\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toPerf\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toInsurance\",\"type\":\"uint256\"}],\"name\":\"Recycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"RevisionIncreased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLABLE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONVERTER_STRATEGY_BASE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_DEPOSITOR_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_BASE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcInvestedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canFarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"changePId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"contract ITetuConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFuse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"profitHolder\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"totalLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"fuseThreshold\",\"type\":\"uint256\"},{\"internalType\":\"int24[]\",\"name\":\"ticks\",\"type\":\"int24[]\"},{\"internalType\":\"uint256[]\",\"name\":\"profitHolderBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"flags\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldLogic\",\"type\":\"address\"}],\"name\":\"increaseRevision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"splitter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"converter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickRange_\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rebalanceTickRange_\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"isStablePool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"updateTotalAssetsBeforeInvest_\",\"type\":\"bool\"}],\"name\":\"investAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyLoss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyToHardWork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"onTransferAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteRebalanceSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"agg\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"rebalanceSwapByAgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"requirePayAmountBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCompoundRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFuseThreshold\",\"type\":\"uint256\"}],\"name\":\"setFuseThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio_\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent_\",\"type\":\"uint256\"}],\"name\":\"setReinvestThresholdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyProfitHolder\",\"type\":\"address\"}],\"name\":\"setStrategyProfitHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setStrategySpecificName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"setupPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategySpecificName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToSplitter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyLoss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToSplitter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyLoss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim()\":{\"details\":\"Manual claim rewards.\"},\"created()\":{\"returns\":{\"_0\":\"Creation timestamp\"}},\"createdBlock()\":{\"returns\":{\"_0\":\"Creation block number\"}},\"doHardWork()\":{\"returns\":{\"earned\":\"Earned amount in terms of {asset}\",\"lost\":\"Lost amount in terms of {asset}\"}},\"emergencyExit()\":{\"details\":\"In case of any issue operator can withdraw all from pool.\"},\"increaseRevision(address)\":{\"details\":\"Revision should be increased on each contract upgrade\"},\"init(address,address,address,address,int24,int24,bool,uint256)\":{\"params\":{\"controller_\":\"The address of the controller.\",\"converter_\":\"The address of the converter.\",\"pool_\":\"The address of the pool.\",\"rebalanceTickRange_\":\"The tick range for rebalancing.\",\"splitter_\":\"The address of the splitter.\",\"tickRange_\":\"The tick range for the liquidity position.\"}},\"investAll(uint256,bool)\":{\"params\":{\"updateTotalAssetsBeforeInvest_\":\"Recalculate total assets amount before depositing.                                       It can be false if we know exactly, that the amount is already actual.\"},\"returns\":{\"strategyLoss\":\"Loss should be covered from Insurance\"}},\"isController(address)\":{\"details\":\"Return true if given address is controller\"},\"needRebalance()\":{\"returns\":{\"_0\":\"A boolean indicating if the strategy needs rebalancing.\"}},\"onTransferAmounts(address[],uint256[])\":{\"params\":{\"amounts_\":\"Amount of {asset_} that has been sent to the user's balance\",\"assets_\":\"Any asset sent to the balance, i.e. inside repayTheBorrow\"}},\"previousImplementation()\":{\"details\":\"Previous logic implementation\"},\"quoteRebalanceSwap()\":{\"returns\":{\"_0\":\"swapAtoB, swapAmount\"}},\"rebalance()\":{\"details\":\"The rebalancing functionality is the core of this strategy.      Swap method is used.\"},\"requirePayAmountBack(address,uint256)\":{\"params\":{\"amount_\":\"Required amount of the {theAsset_}\",\"theAsset_\":\"Required asset (either collateral or borrow)\"},\"returns\":{\"amountOut\":\"Amount sent to balance of TetuConverter, amountOut <= amount_\"}},\"revision()\":{\"details\":\"Contract upgrade counter\"},\"setCompoundRatio(uint256)\":{\"details\":\"PlatformVoter can change compound ratio for some strategies.      A strategy can implement another logic for some uniq cases.\"},\"setFuseThreshold(uint256)\":{\"params\":{\"newFuseThreshold\":\"The new fuse threshold value.\"}},\"setReinvestThresholdPercent(uint256)\":{\"params\":{\"percent_\":\"New value of the percent, decimals = {REINVEST_THRESHOLD_PERCENT_DENOMINATOR}\"}},\"setStrategySpecificName(string)\":{\"details\":\"The name will be used for UI.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalAssets()\":{\"details\":\"Total amount of underlying assets under control of this strategy.\"},\"withdrawAllToSplitter()\":{\"details\":\"Withdraws all underlying assets to the vault\",\"returns\":{\"strategyLoss\":\"Loss should be covered from Insurance\"}},\"withdrawToSplitter(uint256)\":{\"details\":\"Withdraws some assets to the splitter\",\"returns\":{\"strategyLoss\":\"Loss should be covered from Insurance\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Recycle(address[],uint256[],uint256,uint256)\":{\"notice\":\"Recycle was made\"}},\"kind\":\"user\",\"methods\":{\"CONTROLLABLE_VERSION()\":{\"notice\":\"Version of the contract\"},\"NAME()\":{\"notice\":\"CONSTANTS\"},\"capacity()\":{\"notice\":\"Unlimited capacity by default\"},\"controller()\":{\"notice\":\"Return controller address saved in the contract slot\"},\"created()\":{\"notice\":\"Return creation timestamp\"},\"createdBlock()\":{\"notice\":\"Return creation block number\"},\"disableFuse()\":{\"notice\":\"Disable fuse for the strategy.\"},\"doHardWork()\":{\"notice\":\"Do hard work with reinvesting\"},\"getState()\":{\"notice\":\"Returns the current state of the contract.\"},\"init(address,address,address,address,int24,int24,bool,uint256)\":{\"notice\":\"Initialize the strategy with the given parameters.\"},\"investAll(uint256,bool)\":{\"notice\":\"Stakes everything the strategy holds into the reward pool. amount_ Amount transferred to the strategy balance just before calling this function\"},\"investedAssets()\":{\"notice\":\"Amount of underlying assets converted to pool assets and invested to the pool.\"},\"isGovernance(address)\":{\"notice\":\"Return true if given address is setup as governance in Controller\"},\"isReadyToHardWork()\":{\"notice\":\"Is strategy ready to hard work\"},\"liquidationThresholds(address)\":{\"notice\":\"Minimum token amounts that can be liquidated\"},\"needRebalance()\":{\"notice\":\"Check if the strategy needs rebalancing.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"CALLBACKS\"},\"onTransferAmounts(address[],uint256[])\":{\"notice\":\"TetuConverter calls this function when it sends any amount to user's balance\"},\"performanceFee()\":{\"notice\":\"A percent of total profit that is sent to the {performanceReceiver} before compounding\"},\"performanceFeeRatio()\":{\"notice\":\"Ratio to split performance fee on toPerf + toInsurance, [0..100_000]         100_000 - send full amount toPerf, 0 - send full amount toInsurance.\"},\"performanceReceiver()\":{\"notice\":\"{performanceFee}% of total profit is sent to {performanceReceiver} before compounding\"},\"reinvestThresholdPercent()\":{\"notice\":\"Percent of asset amount that can be not invested, it's allowed to just keep it on balance         decimals = {DENOMINATOR}\"},\"requirePayAmountBack(address,uint256)\":{\"notice\":\"Converters asks to send some amount back.\"},\"setFuseThreshold(uint256)\":{\"notice\":\"Set the fuse threshold for the strategy.\"},\"setPerformanceFeeRatio(uint256)\":{\"notice\":\"[0..100_000], 100_000 - send full amount toPerf, 0 - send full amount toInsurance.\"},\"setupPerformanceFee(uint256,address)\":{\"notice\":\"Set performance fee and receiver\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/kyber/KyberConverterStrategy.sol\":\"KyberConverterStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n  function created() external view returns (uint256);\\n\\n  function createdBlock() external view returns (uint256);\\n\\n  function controller() external view returns (address);\\n\\n  function increaseRevision(address oldLogic) external;\\n\\n}\\n\",\"keccak256\":\"0xc2ef11f0141e7e1a5df255be2e1552044deed377349cb886908f3f10ded57fa8\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IController {\\n\\n  // --- DEPENDENCY ADDRESSES\\n  function governance() external view returns (address);\\n\\n  function voter() external view returns (address);\\n\\n  function liquidator() external view returns (address);\\n\\n  function forwarder() external view returns (address);\\n\\n  function investFund() external view returns (address);\\n\\n  function veDistributor() external view returns (address);\\n\\n  function platformVoter() external view returns (address);\\n\\n  // --- VAULTS\\n\\n  function vaults(uint id) external view returns (address);\\n\\n  function vaultsList() external view returns (address[] memory);\\n\\n  function vaultsListLength() external view returns (uint);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  // --- restrictions\\n\\n  function isOperator(address _adr) external view returns (bool);\\n\\n\\n}\\n\",\"keccak256\":\"0x86716b8a4775605c31b8bb9f90f8f4a18b709ff4435182f3a148803368060a8c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaeca7db2074d7c66a20c609539e1f1656e67f6981bf01f83ad6aa8aa140c8d2e\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9f69f84d864c2a84de9321871aa52f6f70d14afe46badbcd37c0d4f22af75e7b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IForwarder {\\n\\n  function tetu() external view returns (address);\\n  function tetuThreshold() external view returns (uint);\\n\\n  function tokenPerDestinationLength(address destination) external view returns (uint);\\n\\n  function tokenPerDestinationAt(address destination, uint i) external view returns (address);\\n\\n  function amountPerDestination(address token, address destination) external view returns (uint amount);\\n\\n  function registerIncome(\\n    address[] memory tokens,\\n    uint[] memory amounts,\\n    address vault,\\n    bool isDistribute\\n  ) external;\\n\\n  function distributeAll(address destination) external;\\n\\n  function distribute(address token) external;\\n\\n  function setInvestFundRatio(uint value) external;\\n\\n  function setGaugesRatio(uint value) external;\\n\\n}\\n\",\"keccak256\":\"0x687c497fc034e8d64bca403bac1bf4cd7bd1f107df414c2657325c1b3ab92822\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ISplitter {\\n\\n  function init(address controller_, address _asset, address _vault) external;\\n\\n  // *************** ACTIONS **************\\n\\n  function withdrawAllToVault() external;\\n\\n  function withdrawToVault(uint256 amount) external;\\n\\n  function coverPossibleStrategyLoss(uint earned, uint lost) external;\\n\\n  function doHardWork() external;\\n\\n  function investAll() external;\\n\\n  // **************** VIEWS ***************\\n\\n  function asset() external view returns (address);\\n\\n  function vault() external view returns (address);\\n\\n  function totalAssets() external view returns (uint256);\\n\\n  function isHardWorking() external view returns (bool);\\n\\n  function strategies(uint i) external view returns (address);\\n\\n  function strategiesLength() external view returns (uint);\\n\\n  function HARDWORK_DELAY() external view returns (uint);\\n\\n  function lastHardWorks(address strategy) external view returns (uint);\\n\\n  function pausedStrategies(address strategy) external view returns (bool);\\n\\n  function pauseInvesting(address strategy) external;\\n\\n  function continueInvesting(address strategy, uint apr) external;\\n\\n}\\n\",\"keccak256\":\"0x68f37a5089c98097159e7f18ef04c42d15e10e6c11602e47bc6092708c11e5fc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStrategyV2 {\\n\\n  function NAME() external view returns (string memory);\\n\\n  function strategySpecificName() external view returns (string memory);\\n\\n  function PLATFORM() external view returns (string memory);\\n\\n  function STRATEGY_VERSION() external view returns (string memory);\\n\\n  function asset() external view returns (address);\\n\\n  function splitter() external view returns (address);\\n\\n  function compoundRatio() external view returns (uint);\\n\\n  function totalAssets() external view returns (uint);\\n\\n  /// @dev Usually, indicate that claimable rewards have reasonable amount.\\n  function isReadyToHardWork() external view returns (bool);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawAllToSplitter() external returns (uint strategyLoss);\\n\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawToSplitter(uint amount) external returns (uint strategyLoss);\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// @param amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function investAll(\\n    uint amount_,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external returns (\\n    uint strategyLoss\\n  );\\n\\n  function doHardWork() external returns (uint earned, uint lost);\\n\\n  function setCompoundRatio(uint value) external;\\n\\n  /// @notice Max amount that can be deposited to the strategy (its internal capacity), see SCB-593.\\n  ///         0 means no deposit is allowed at this moment\\n  function capacity() external view returns (uint);\\n\\n  /// @notice {performanceFee}% of total profit is sent to the {performanceReceiver} before compounding\\n  function performanceReceiver() external view returns (address);\\n\\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n  /// @dev use FEE_DENOMINATOR\\n  function performanceFee() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc7dac6097df7310b510f1027ef9c1bd3ccd6a202ca69582f68233ee798f7c312\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITetuLiquidator {\\n\\n  struct PoolData {\\n    address pool;\\n    address swapper;\\n    address tokenIn;\\n    address tokenOut;\\n  }\\n\\n  function addLargestPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function addBlueChipsPools(PoolData[] memory _pools, bool rewrite) external;\\n\\n  function getPrice(address tokenIn, address tokenOut, uint amount) external view returns (uint);\\n\\n  function getPriceForRoute(PoolData[] memory route, uint amount) external view returns (uint);\\n\\n  function isRouteExist(address tokenIn, address tokenOut) external view returns (bool);\\n\\n  function buildRoute(\\n    address tokenIn,\\n    address tokenOut\\n  ) external view returns (PoolData[] memory route, string memory errorMessage);\\n\\n  function liquidate(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n  function liquidateWithRoute(\\n    PoolData[] memory route,\\n    uint amount,\\n    uint slippage\\n  ) external;\\n\\n\\n}\\n\",\"keccak256\":\"0xd5fe6f3ab750cc2d23f573597db5607c701e74c39e13c20c07a921a26c6d5012\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVaultInsurance.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ISplitter.sol\\\";\\n\\ninterface ITetuVaultV2 {\\n\\n  function splitter() external view returns (ISplitter);\\n\\n  function insurance() external view returns (IVaultInsurance);\\n\\n  function depositFee() external view returns (uint);\\n\\n  function withdrawFee() external view returns (uint);\\n\\n  function init(\\n    address controller_,\\n    IERC20 _asset,\\n    string memory _name,\\n    string memory _symbol,\\n    address _gauge,\\n    uint _buffer\\n  ) external;\\n\\n  function setSplitter(address _splitter) external;\\n\\n  function coverLoss(uint amount) external;\\n\\n  function initInsurance(IVaultInsurance _insurance) external;\\n\\n}\\n\",\"keccak256\":\"0x9e77a10b32a52f826d28d17c420f776fd289e5e4f925ec87f7177a1ce224a412\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IVaultInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVaultInsurance {\\n\\n  function init(address _vault, address _asset) external;\\n\\n  function vault() external view returns (address);\\n\\n  function asset() external view returns (address);\\n\\n  function transferToVault(uint amount) external;\\n\\n}\\n\",\"keccak256\":\"0x6461572763b1f6decec1dee9d2ffe8ca152369bdc68255ec083cb3da3ce507a1\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/lib/InterfaceIds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Library for interface IDs\\n/// @author bogdoslav\\nlibrary InterfaceIds {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant INTERFACE_IDS_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  /// default notation:\\n  /// bytes4 public constant I_VOTER = type(IVoter).interfaceId;\\n\\n  /// As type({Interface}).interfaceId can be changed,\\n  /// when some functions changed at the interface,\\n  /// so used hardcoded interface identifiers\\n\\n  bytes4 public constant I_VOTER = bytes4(keccak256(\\\"IVoter\\\"));\\n  bytes4 public constant I_BRIBE = bytes4(keccak256(\\\"IBribe\\\"));\\n  bytes4 public constant I_GAUGE = bytes4(keccak256(\\\"IGauge\\\"));\\n  bytes4 public constant I_VE_TETU = bytes4(keccak256(\\\"IVeTetu\\\"));\\n  bytes4 public constant I_SPLITTER = bytes4(keccak256(\\\"ISplitter\\\"));\\n  bytes4 public constant I_FORWARDER = bytes4(keccak256(\\\"IForwarder\\\"));\\n  bytes4 public constant I_MULTI_POOL = bytes4(keccak256(\\\"IMultiPool\\\"));\\n  bytes4 public constant I_CONTROLLER = bytes4(keccak256(\\\"IController\\\"));\\n  bytes4 public constant I_TETU_ERC165 = bytes4(keccak256(\\\"ITetuERC165\\\"));\\n  bytes4 public constant I_STRATEGY_V2 = bytes4(keccak256(\\\"IStrategyV2\\\"));\\n  bytes4 public constant I_CONTROLLABLE = bytes4(keccak256(\\\"IControllable\\\"));\\n  bytes4 public constant I_TETU_VAULT_V2 = bytes4(keccak256(\\\"ITetuVaultV2\\\"));\\n  bytes4 public constant I_PLATFORM_VOTER = bytes4(keccak256(\\\"IPlatformVoter\\\"));\\n  bytes4 public constant I_VE_DISTRIBUTOR = bytes4(keccak256(\\\"IVeDistributor\\\"));\\n  bytes4 public constant I_TETU_CONVERTER = bytes4(keccak256(\\\"ITetuConverter\\\"));\\n  bytes4 public constant I_VAULT_INSURANCE = bytes4(keccak256(\\\"IVaultInsurance\\\"));\\n  bytes4 public constant I_STRATEGY_STRICT = bytes4(keccak256(\\\"IStrategyStrict\\\"));\\n  bytes4 public constant I_ERC4626 = bytes4(keccak256(\\\"IERC4626\\\"));\\n\\n}\\n\",\"keccak256\":\"0x7b04986058295c9dbb143dccdb2fc3e9ad38da9d03ef976163b695c394166d9b\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/lib/SlotsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Library for setting / getting slot variables (used in upgradable proxy contracts)\\n/// @author bogdoslav\\nlibrary SlotsLib {\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant SLOT_LIB_VERSION = \\\"1.0.0\\\";\\n\\n  // ************* GETTERS *******************\\n\\n  /// @dev Gets a slot as bytes32\\n  function getBytes32(bytes32 slot) internal view returns (bytes32 result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as an address\\n  function getAddress(bytes32 slot) internal view returns (address result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot as uint256\\n  function getUint(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  // ************* ARRAY GETTERS *******************\\n\\n  /// @dev Gets an array length\\n  function arrayLength(bytes32 slot) internal view returns (uint result) {\\n    assembly {\\n      result := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function addressAt(bytes32 slot, uint index) internal view returns (address result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  /// @dev Gets a slot array by index as uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function uintAt(bytes32 slot, uint index) internal view returns (uint result) {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      result := sload(pointer)\\n    }\\n  }\\n\\n  // ************* SETTERS *******************\\n\\n  /// @dev Sets a slot with bytes32\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, bytes32 value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with address\\n  /// @notice Check address for 0 at the setter\\n  function set(bytes32 slot, address value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot with uint\\n  function set(bytes32 slot, uint value) internal {\\n    assembly {\\n      sstore(slot, value)\\n    }\\n  }\\n\\n  // ************* ARRAY SETTERS *******************\\n\\n  /// @dev Sets a slot array at index with address\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, address value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets a slot array at index with uint\\n  /// @notice First slot is array length, elements ordered backward in memory\\n  /// @notice This is unsafe, without checking array length.\\n  function setAt(bytes32 slot, uint index, uint value) internal {\\n    bytes32 pointer = bytes32(uint(slot) - 1 - index);\\n    assembly {\\n      sstore(pointer, value)\\n    }\\n  }\\n\\n  /// @dev Sets an array length\\n  function setLength(bytes32 slot, uint length) internal {\\n    assembly {\\n      sstore(slot, length)\\n    }\\n  }\\n\\n  /// @dev Pushes an address to the array\\n  function push(bytes32 slot, address value) internal {\\n    uint length = arrayLength(slot);\\n    setAt(slot, length, value);\\n    setLength(slot, length + 1);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xeb47d071d7ab39d233646b44319ecb2d4d69cd064af8618452822652ce60f23d\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n\\nlibrary StringLib {\\n\\n  /// @dev Inspired by OraclizeAPI's implementation - MIT license\\n  ///      https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n  function toString(uint value) external pure returns (string memory) {\\n    return _toString(value);\\n  }\\n\\n  function _toString(uint value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint temp = value;\\n    uint digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toAsciiString(address x) external pure returns (string memory) {\\n    return _toAsciiString(x);\\n  }\\n\\n  function _toAsciiString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i] = _char(hi);\\n      s[2 * i + 1] = _char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) external pure returns (bytes1 c) {\\n    return _char(b);\\n  }\\n\\n  function _char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xce525513ab06cdcbb2c4b6e5aa4396202b2f719e24d701f3739b1f89e64b7dd6\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcc7eeaafd4384e04ff39e0c01f0a6794736c34cad529751b8abd7b088ecc2e83\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n     */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xcaaf196e5c26fdcd072a9f0833b54cf9fbd12d08be59898f04611f685d31707a\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n  uint8 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n  event Initialized(uint8 version);\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n      \\\"Initializable: contract is already initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n      emit Initialized(1);\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n  modifier reinitializer(uint8 version) {\\n    require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n    emit Initialized(version);\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n    if (_initialized != type(uint8).max) {\\n      _initialized = type(uint8).max;\\n      emit Initialized(type(uint8).max);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n  function _getInitializedVersion() internal view returns (uint8) {\\n    return _initialized;\\n  }\\n\\n  /**\\n   * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0x3c7a20b7e9d134311f43e27990f32c75ff6cb461a6136c4f83fc20734f1d82e0\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  enum Rounding {\\n    Down, // Toward negative infinity\\n    Up, // Toward infinity\\n    Zero // Toward zero\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n     */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n     */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n  unchecked {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(x, y, not(0))\\n      prod0 := mul(x, y)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n      return prod0 / denominator;\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly {\\n    // Compute remainder using mulmod.\\n      remainder := mulmod(x, y, denominator)\\n\\n    // Subtract 256 bit number from 512 bit number.\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n    // See https://cs.stackexchange.com/q/138556/92363.\\n\\n    // Does not overflow because the denominator cannot be zero at this stage in the function.\\n    uint256 twos = denominator & (~denominator + 1);\\n    assembly {\\n    // Divide denominator by twos.\\n      denominator := div(denominator, twos)\\n\\n    // Divide [prod1 prod0] by twos.\\n      prod0 := div(prod0, twos)\\n\\n    // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n\\n    // Shift in bits from prod1 into prod0.\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n    // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n    // four bits. That is, denominator * inv = 1 mod 2^4.\\n    uint256 inverse = (3 * denominator) ^ 2;\\n\\n    // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n    // in modular arithmetic, doubling the correct bits in each step.\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n    inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n    // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n    // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n    // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inverse;\\n    return result;\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n  function mulDiv(\\n    uint256 x,\\n    uint256 y,\\n    uint256 denominator,\\n    Rounding rounding\\n  ) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n  unchecked {\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    result = (result + a / result) >> 1;\\n    return min(result, a / result);\\n  }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = sqrt(a);\\n    return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 128;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 64;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 32;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 16;\\n    }\\n    if (value >> 8 > 0) {\\n      value >>= 8;\\n      result += 8;\\n    }\\n    if (value >> 4 > 0) {\\n      value >>= 4;\\n      result += 4;\\n    }\\n    if (value >> 2 > 0) {\\n      value >>= 2;\\n      result += 2;\\n    }\\n    if (value >> 1 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log2(value);\\n    return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >= 10**64) {\\n      value /= 10**64;\\n      result += 64;\\n    }\\n    if (value >= 10**32) {\\n      value /= 10**32;\\n      result += 32;\\n    }\\n    if (value >= 10**16) {\\n      value /= 10**16;\\n      result += 16;\\n    }\\n    if (value >= 10**8) {\\n      value /= 10**8;\\n      result += 8;\\n    }\\n    if (value >= 10**4) {\\n      value /= 10**4;\\n      result += 4;\\n    }\\n    if (value >= 10**2) {\\n      value /= 10**2;\\n      result += 2;\\n    }\\n    if (value >= 10**1) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log10(value);\\n    return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n  }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n  unchecked {\\n    if (value >> 128 > 0) {\\n      value >>= 128;\\n      result += 16;\\n    }\\n    if (value >> 64 > 0) {\\n      value >>= 64;\\n      result += 8;\\n    }\\n    if (value >> 32 > 0) {\\n      value >>= 32;\\n      result += 4;\\n    }\\n    if (value >> 16 > 0) {\\n      value >>= 16;\\n      result += 2;\\n    }\\n    if (value >> 8 > 0) {\\n      result += 1;\\n    }\\n  }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n  unchecked {\\n    uint256 result = log256(value);\\n    return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n  }\\n  }\\n}\\n\",\"keccak256\":\"0x2c5be0f4a60126b08e20f40586958ec1b76a27b69406c4b0db19e9dc6f771cfc\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2378ee07b24e40c75781b27b2aa0812769c0000964e2d2501e3d234d3285dd18\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/proxy/ControllableV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/Initializable.sol\\\";\\nimport \\\"../tools/TetuERC165.sol\\\";\\nimport \\\"../interfaces/IControllable.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../lib/SlotsLib.sol\\\";\\nimport \\\"../lib/InterfaceIds.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call __Controllable_init() in any case.\\n/// @author belbix\\nabstract contract ControllableV3 is Initializable, TetuERC165, IControllable {\\n  using SlotsLib for bytes32;\\n\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string public constant CONTROLLABLE_VERSION = \\\"3.0.0\\\";\\n\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\n  bytes32 internal constant _REVISION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.revision\\\")) - 1);\\n  bytes32 internal constant _PREVIOUS_LOGIC_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.prev_logic\\\")) - 1);\\n\\n  event ContractInitialized(address controller, uint ts, uint block);\\n  event RevisionIncreased(uint value, address oldLogic);\\n\\n  /// @dev Prevent implementation init\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param controller_ Controller address\\n  function __Controllable_init(address controller_) internal onlyInitializing {\\n    require(controller_ != address(0), \\\"Zero controller\\\");\\n    _requireInterface(controller_, InterfaceIds.I_CONTROLLER);\\n    require(IController(controller_).governance() != address(0), \\\"Zero governance\\\");\\n    _CONTROLLER_SLOT.set(controller_);\\n    _CREATED_SLOT.set(block.timestamp);\\n    _CREATED_BLOCK_SLOT.set(block.number);\\n    emit ContractInitialized(controller_, block.timestamp, block.number);\\n  }\\n\\n  /// @dev Return true if given address is controller\\n  function isController(address _value) public override view returns (bool) {\\n    return _value == controller();\\n  }\\n\\n  /// @notice Return true if given address is setup as governance in Controller\\n  function isGovernance(address _value) public override view returns (bool) {\\n    return IController(controller()).governance() == _value;\\n  }\\n\\n  /// @dev Contract upgrade counter\\n  function revision() external view returns (uint){\\n    return _REVISION_SLOT.getUint();\\n  }\\n\\n  /// @dev Previous logic implementation\\n  function previousImplementation() external view returns (address){\\n    return _PREVIOUS_LOGIC_SLOT.getAddress();\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_CONTROLLABLE || super.supportsInterface(interfaceId);\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  function controller() public view override returns (address) {\\n    return _CONTROLLER_SLOT.getAddress();\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return Creation timestamp\\n  function created() external view override returns (uint256) {\\n    return _CREATED_SLOT.getUint();\\n  }\\n\\n  /// @notice Return creation block number\\n  /// @return Creation block number\\n  function createdBlock() external override view returns (uint256) {\\n    return _CREATED_BLOCK_SLOT.getUint();\\n  }\\n\\n  /// @dev Revision should be increased on each contract upgrade\\n  function increaseRevision(address oldLogic) external override {\\n    require(msg.sender == address(this), \\\"Increase revision forbidden\\\");\\n    uint r = _REVISION_SLOT.getUint() + 1;\\n    _REVISION_SLOT.set(r);\\n    _PREVIOUS_LOGIC_SLOT.set(oldLogic);\\n    emit RevisionIncreased(r, oldLogic);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xb29542898f4d28ccc5c9d01bf1a45a9a15331ec7f9accad4a0c673025896ec44\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IStrategyV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\nimport \\\"../interfaces/IForwarder.sol\\\";\\nimport \\\"../proxy/ControllableV3.sol\\\";\\nimport \\\"./StrategyLib.sol\\\";\\n\\n/// @title Abstract contract for base strategy functionality\\n/// @author belbix\\nabstract contract StrategyBaseV2 is IStrategyV2, ControllableV3 {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant STRATEGY_BASE_VERSION = \\\"2.3.0\\\";\\n  /// @notice 10% of total profit is sent to {performanceReceiver} before compounding\\n  uint internal constant DEFAULT_PERFORMANCE_FEE = 10_000;\\n  address internal constant DEFAULT_PERF_FEE_RECEIVER = 0x9Cc199D4353b5FB3e6C8EEBC99f5139e0d8eA06b;\\n\\n  // *************************************************************\\n  //                        VARIABLES\\n  //                Keep names and ordering!\\n  //                 Add only in the bottom.\\n  // *************************************************************\\n\\n  /// @dev Underlying asset\\n  address public override asset;\\n  /// @dev Linked splitter\\n  address public override splitter;\\n  /// @dev Percent of profit for autocompound inside this strategy.\\n  uint public override compoundRatio;\\n  uint private __deprecatedSlot1;\\n\\n  /// @notice {performanceFee}% of total profit is sent to {performanceReceiver} before compounding\\n  /// @dev governance by default\\n  address public override performanceReceiver;\\n\\n  /// @notice A percent of total profit that is sent to the {performanceReceiver} before compounding\\n  /// @dev {DEFAULT_PERFORMANCE_FEE} by default, FEE_DENOMINATOR is used\\n  uint public override performanceFee;\\n  /// @dev Represent specific name for this strategy. Should include short strategy name and used assets. Uniq across the vault.\\n  string public override strategySpecificName;\\n\\n  // *************************************************************\\n  //                        INIT\\n  // *************************************************************\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  function __StrategyBase_init(\\n    address controller_,\\n    address _splitter\\n  ) internal onlyInitializing {\\n    _requireInterface(_splitter, InterfaceIds.I_SPLITTER);\\n    __Controllable_init(controller_);\\n\\n    require(IControllable(_splitter).isController(controller_), StrategyLib.WRONG_VALUE);\\n\\n    asset = ISplitter(_splitter).asset();\\n    splitter = _splitter;\\n\\n    performanceReceiver = DEFAULT_PERF_FEE_RECEIVER;\\n    performanceFee = DEFAULT_PERFORMANCE_FEE;\\n  }\\n\\n  // *************************************************************\\n  //                     PERFORMANCE FEE\\n  // *************************************************************\\n  /// @notice Set performance fee and receiver\\n  function setupPerformanceFee(uint fee_, address receiver_) external {\\n    StrategyLib._checkSetupPerformanceFee(controller(), fee_, receiver_);\\n    performanceFee = fee_;\\n    performanceReceiver = receiver_;\\n  }\\n\\n  // *************************************************************\\n  //                        VIEWS\\n  // *************************************************************\\n\\n  /// @dev Total amount of underlying assets under control of this strategy.\\n  function totalAssets() public view override returns (uint) {\\n    return IERC20(asset).balanceOf(address(this)) + investedAssets();\\n  }\\n\\n  /// @dev See {IERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_STRATEGY_V2 || super.supportsInterface(interfaceId);\\n  }\\n\\n  // *************************************************************\\n  //                   VOTER ACTIONS\\n  // *************************************************************\\n\\n  /// @dev PlatformVoter can change compound ratio for some strategies.\\n  ///      A strategy can implement another logic for some uniq cases.\\n  function setCompoundRatio(uint value) external virtual override {\\n    StrategyLib._checkCompoundRatioChanged(controller(), compoundRatio, value);\\n    compoundRatio = value;\\n  }\\n\\n  // *************************************************************\\n  //                   OPERATOR ACTIONS\\n  // *************************************************************\\n\\n  /// @dev The name will be used for UI.\\n  function setStrategySpecificName(string calldata name) external {\\n    StrategyLib._checkStrategySpecificNameChanged(controller(), name);\\n    strategySpecificName = name;\\n  }\\n\\n  /// @dev In case of any issue operator can withdraw all from pool.\\n  function emergencyExit() external {\\n    // check inside lib call\\n\\n    _emergencyExitFromPool();\\n    StrategyLib.sendOnEmergencyExit(controller(), asset, splitter);\\n  }\\n\\n  /// @dev Manual claim rewards.\\n  function claim() external {\\n    StrategyLib._checkManualClaim(controller());\\n    _claim();\\n  }\\n\\n  // *************************************************************\\n  //                    DEPOSIT/WITHDRAW\\n  // *************************************************************\\n\\n  /// @notice Stakes everything the strategy holds into the reward pool.\\n  /// amount_ Amount transferred to the strategy balance just before calling this function\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function investAll(\\n    uint /*amount_*/,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) external override returns (\\n    uint strategyLoss\\n  ) {\\n    uint balance = StrategyLib._checkInvestAll(splitter, asset);\\n\\n    if (balance > 0) {\\n      strategyLoss = _depositToPool(balance, updateTotalAssetsBeforeInvest_);\\n    }\\n\\n    return strategyLoss;\\n  }\\n\\n  /// @dev Withdraws all underlying assets to the vault\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawAllToSplitter() external override returns (uint strategyLoss) {\\n    address _splitter = splitter;\\n    address _asset = asset;\\n\\n    uint balance = StrategyLib._checkSplitterSenderAndGetBalance(_splitter, _asset);\\n\\n    (uint expectedWithdrewUSD, uint assetPrice, uint _strategyLoss) = _withdrawAllFromPool();\\n\\n    StrategyLib._withdrawAllToSplitterPostActions(\\n      _asset,\\n      balance,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n    return _strategyLoss;\\n  }\\n\\n  /// @dev Withdraws some assets to the splitter\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function withdrawToSplitter(uint amount) external override returns (uint strategyLoss) {\\n    address _splitter = splitter;\\n    address _asset = asset;\\n\\n    uint balance = StrategyLib._checkSplitterSenderAndGetBalance(_splitter, _asset);\\n\\n    if (amount > balance) {\\n      uint expectedWithdrewUSD;\\n      uint assetPrice;\\n\\n      (expectedWithdrewUSD, assetPrice, strategyLoss) = _withdrawFromPool(amount - balance);\\n      balance = StrategyLib.checkWithdrawImpact(\\n        _asset,\\n        balance,\\n        expectedWithdrewUSD,\\n        assetPrice,\\n        _splitter\\n      );\\n    }\\n\\n    StrategyLib._withdrawToSplitterPostActions(\\n      amount,\\n      balance,\\n      _asset,\\n      _splitter\\n    );\\n    return strategyLoss;\\n  }\\n\\n  // *************************************************************\\n  //                       VIRTUAL\\n  // These functions must be implemented in the strategy contract\\n  // *************************************************************\\n\\n  /// @dev Amount of underlying assets invested to the pool.\\n  function investedAssets() public view virtual returns (uint);\\n\\n  /// @notice Deposit given amount to the pool.\\n  /// @param updateTotalAssetsBeforeInvest_ Recalculate total assets amount before depositing.\\n  ///                                       It can be false if we know exactly, that the amount is already actual.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _depositToPool(\\n    uint amount,\\n    bool updateTotalAssetsBeforeInvest_\\n  ) internal virtual returns (\\n    uint strategyLoss\\n  );\\n\\n  /// @dev Withdraw given amount from the pool.\\n  /// @return expectedWithdrewUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\\n  /// @return assetPrice Price of the strategy {asset}.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _withdrawFromPool(uint amount) internal virtual returns (\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    uint strategyLoss\\n  );\\n\\n  /// @dev Withdraw all from the pool.\\n  /// @return expectedWithdrewUSD Sum of USD value of each asset in the pool that was withdrawn, decimals of {asset}.\\n  /// @return assetPrice Price of the strategy {asset}.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _withdrawAllFromPool() internal virtual returns (\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    uint strategyLoss\\n  );\\n\\n  /// @dev If pool support emergency withdraw need to call it for emergencyExit()\\n  ///      Withdraw assets without impact checking.\\n  function _emergencyExitFromPool() internal virtual;\\n\\n  /// @dev Claim all possible rewards.\\n  function _claim() internal virtual returns (address[] memory rewardTokens, uint[] memory amounts);\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to add new\\n  ///      variables without shifting down storage in the inheritance chain.\\n  ///      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint[43] private __gap;\\n}\\n\",\"keccak256\":\"0x6763c4b6a10419acdce87d871759ae4a06c283839fe5cb6143ff80bcac318b1f\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/Math.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"../interfaces/ISplitter.sol\\\";\\n\\nlibrary StrategyLib {\\n  using SafeERC20 for IERC20;\\n\\n  // *************************************************************\\n  //                        CONSTANTS\\n  // *************************************************************\\n\\n  /// @dev Denominator for fee calculation.\\n  uint internal constant FEE_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        EVENTS\\n  // *************************************************************\\n\\n  event CompoundRatioChanged(uint oldValue, uint newValue);\\n  event StrategySpecificNameChanged(string name);\\n  event EmergencyExit(address sender, uint amount);\\n  event ManualClaim(address sender);\\n  event InvestAll(uint balance);\\n  event WithdrawAllToSplitter(uint amount);\\n  event WithdrawToSplitter(uint amount, uint sent, uint balance);\\n\\n  // *************************************************************\\n  //                        ERRORS\\n  // *************************************************************\\n\\n  string internal constant DENIED = \\\"SB: Denied\\\";\\n  string internal constant TOO_HIGH = \\\"SB: Too high\\\";\\n  string internal constant WRONG_VALUE = \\\"SB: Wrong value\\\";\\n  /// @dev Denominator for compound ratio\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n\\n  // *************************************************************\\n  //                        CHECKS AND EMITS\\n  // *************************************************************\\n\\n  function _checkCompoundRatioChanged(address controller, uint oldValue, uint newValue) external {\\n    onlyPlatformVoter(controller);\\n    require(newValue <= COMPOUND_DENOMINATOR, TOO_HIGH);\\n    emit CompoundRatioChanged(oldValue, newValue);\\n  }\\n\\n  function _checkStrategySpecificNameChanged(address controller, string calldata newName) external {\\n    onlyOperators(controller);\\n    emit StrategySpecificNameChanged(newName);\\n  }\\n\\n  function _checkManualClaim(address controller) external {\\n    onlyOperators(controller);\\n    emit ManualClaim(msg.sender);\\n  }\\n\\n  function _checkInvestAll(address splitter, address asset) external returns (uint assetBalance) {\\n    onlySplitter(splitter);\\n    assetBalance = IERC20(asset).balanceOf(address(this));\\n    emit InvestAll(assetBalance);\\n  }\\n\\n  // *************************************************************\\n  //                     RESTRICTIONS\\n  // *************************************************************\\n\\n  /// @dev Restrict access only for operators\\n  function onlyOperators(address controller) public view {\\n    require(IController(controller).isOperator(msg.sender), DENIED);\\n  }\\n\\n  /// @dev Restrict access only for governance\\n  function onlyGovernance(address controller) public view {\\n    require(IController(controller).governance() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for platform voter\\n  function onlyPlatformVoter(address controller) public view {\\n    require(IController(controller).platformVoter() == msg.sender, DENIED);\\n  }\\n\\n  /// @dev Restrict access only for splitter\\n  function onlySplitter(address splitter) public view {\\n    require(splitter == msg.sender, DENIED);\\n  }\\n\\n  function _checkSetupPerformanceFee(address controller, uint fee_, address receiver_) external view {\\n    onlyGovernance(controller);\\n    require(fee_ <= 100_000, TOO_HIGH);\\n    require(receiver_ != address(0), WRONG_VALUE);\\n  }\\n\\n  // *************************************************************\\n  //                       HELPERS\\n  // *************************************************************\\n\\n  /// @notice Calculate withdrawn amount in USD using the {assetPrice}.\\n  ///         Revert if the amount is different from expected too much (high price impact)\\n  /// @param balanceBefore Asset balance of the strategy before withdrawing\\n  /// @param expectedWithdrewUSD Expected amount in USD, decimals are same to {_asset}\\n  /// @param assetPrice Price of the asset, decimals 18\\n  /// @return balance Current asset balance of the strategy\\n  function checkWithdrawImpact(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) public view returns (uint balance) {\\n    balance = IERC20(_asset).balanceOf(address(this));\\n    if (assetPrice != 0 && expectedWithdrewUSD != 0) {\\n\\n      uint withdrew = balance > balanceBefore ? balance - balanceBefore : 0;\\n      uint withdrewUSD = withdrew * assetPrice / 1e18;\\n      uint priceChangeTolerance = ITetuVaultV2(ISplitter(_splitter).vault()).withdrawFee();\\n      uint difference = expectedWithdrewUSD > withdrewUSD ? expectedWithdrewUSD - withdrewUSD : 0;\\n      require(difference * FEE_DENOMINATOR / expectedWithdrewUSD <= priceChangeTolerance, TOO_HIGH);\\n    }\\n  }\\n\\n  function sendOnEmergencyExit(address controller, address asset, address splitter) external {\\n    onlyOperators(controller);\\n\\n    uint balance = IERC20(asset).balanceOf(address(this));\\n    IERC20(asset).safeTransfer(splitter, balance);\\n    emit EmergencyExit(msg.sender, balance);\\n  }\\n\\n  function _checkSplitterSenderAndGetBalance(address splitter, address asset) external view returns (uint balance) {\\n    onlySplitter(splitter);\\n    return IERC20(asset).balanceOf(address(this));\\n  }\\n\\n  function _withdrawAllToSplitterPostActions(\\n    address _asset,\\n    uint balanceBefore,\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    address _splitter\\n  ) external {\\n    uint balance = checkWithdrawImpact(\\n      _asset,\\n      balanceBefore,\\n      expectedWithdrewUSD,\\n      assetPrice,\\n      _splitter\\n    );\\n\\n    if (balance != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, balance);\\n    }\\n    emit WithdrawAllToSplitter(balance);\\n  }\\n\\n  function _withdrawToSplitterPostActions(\\n    uint amount,\\n    uint balance,\\n    address _asset,\\n    address _splitter\\n  ) external {\\n    uint amountAdjusted = Math.min(amount, balance);\\n    if (amountAdjusted != 0) {\\n      IERC20(_asset).safeTransfer(_splitter, amountAdjusted);\\n    }\\n    emit WithdrawToSplitter(amount, amountAdjusted, balance);\\n  }\\n}\\n\",\"keccak256\":\"0x81940f83bfee07d985fc82504e764db61673f99ae82e1d323f64f51843b7ef9f\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/tools/TetuERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../openzeppelin/ERC165.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../lib/InterfaceIds.sol\\\";\\n\\n/// @dev Tetu Implementation of the {IERC165} interface extended with helper functions.\\n/// @author bogdoslav\\nabstract contract TetuERC165 is ERC165 {\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == InterfaceIds.I_TETU_ERC165 || super.supportsInterface(interfaceId);\\n  }\\n\\n  // *************************************************************\\n  //                        HELPER FUNCTIONS\\n  // *************************************************************\\n  /// @author bogdoslav\\n\\n  /// @dev Checks what interface with id is supported by contract.\\n  /// @return bool. Do not throws\\n  function _isInterfaceSupported(address contractAddress, bytes4 interfaceId) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    try IERC165(contractAddress).supportsInterface(interfaceId) returns (bool isSupported) {\\n      return isSupported;\\n    } catch {\\n    }\\n    return false;\\n  }\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireInterface(address contractAddress, bytes4 interfaceId) internal view {\\n    require(_isInterfaceSupported(contractAddress, interfaceId), \\\"Interface is not supported\\\");\\n  }\\n\\n  /// @dev Checks what address is ERC20.\\n  /// @return bool. Do not throws\\n  function _isERC20(address contractAddress) internal view returns (bool) {\\n    require(contractAddress != address(0), \\\"Zero address\\\");\\n    // check what address is contract\\n    uint codeSize;\\n    assembly {\\n      codeSize := extcodesize(contractAddress)\\n    }\\n    if (codeSize == 0) return false;\\n\\n    bool totalSupplySupported;\\n    try IERC20(contractAddress).totalSupply() returns (uint) {\\n      totalSupplySupported = true;\\n    } catch {\\n    }\\n\\n    bool balanceSupported;\\n    try IERC20(contractAddress).balanceOf(address(this)) returns (uint) {\\n      balanceSupported = true;\\n    } catch {\\n    }\\n\\n    return totalSupplySupported && balanceSupported;\\n  }\\n\\n\\n  /// @dev Checks what interface with id is supported by contract and reverts otherwise\\n  function _requireERC20(address contractAddress) internal view {\\n    require(_isERC20(contractAddress), \\\"Not ERC20\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xeb61b3112015589667319274e5284107728bd4846cc357d158a51397cedacaba\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Keep and provide addresses of all application contracts\\ninterface IConverterController {\\n  function governance() external view returns (address);\\n\\n  // ********************* Health factor explanation  ****************\\n  // For example, a landing platform has: liquidity threshold = 0.85, LTV=0.8, LTV / LT = 1.0625\\n  // For collateral $100 we can borrow $80. A liquidation happens if the cost of collateral will reduce below $85.\\n  // We set min-health-factor = 1.1, target-health-factor = 1.3\\n  // For collateral 100 we will borrow 100/1.3 = 76.92\\n  //\\n  // Collateral value   100        77            assume that collateral value is decreased at 100/77=1.3 times\\n  // Collateral * LT    85         65.45\\n  // Borrow value       65.38      65.38         but borrow value is the same as before\\n  // Health factor      1.3        1.001         liquidation almost happens here (!)\\n  //\\n  /// So, if we have target factor 1.3, it means, that if collateral amount will decreases at 1.3 times\\n  // and the borrow value won't change at the same time, the liquidation happens at that point.\\n  // Min health factor marks the point at which a rebalancing must be made asap.\\n  // *****************************************************************\\n\\n  /// @notice min allowed health factor with decimals 2, must be >= 1e2\\n  function minHealthFactor2() external view returns (uint16);\\n  function setMinHealthFactor2(uint16 value_) external;\\n\\n  /// @notice target health factor with decimals 2\\n  /// @dev If the health factor is below/above min/max threshold, we need to make repay\\n  ///      or additional borrow and restore the health factor to the given target value\\n  function targetHealthFactor2() external view returns (uint16);\\n  function setTargetHealthFactor2(uint16 value_) external;\\n\\n  /// @notice max allowed health factor with decimals 2\\n  /// @dev For future versions, currently max health factor is not used\\n  function maxHealthFactor2() external view returns (uint16);\\n  /// @dev For future versions, currently max health factor is not used\\n  function setMaxHealthFactor2(uint16 value_) external;\\n\\n  /// @notice get current value of blocks per day. The value is set manually at first and can be auto-updated later\\n  function blocksPerDay() external view returns (uint);\\n  /// @notice set value of blocks per day manually and enable/disable auto update of this value\\n  function setBlocksPerDay(uint blocksPerDay_, bool enableAutoUpdate_) external;\\n  /// @notice Check if it's time to call updateBlocksPerDay()\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function isBlocksPerDayAutoUpdateRequired(uint periodInSeconds_) external view returns (bool);\\n  /// @notice Recalculate blocksPerDay value\\n  /// @param periodInSeconds_ Period of auto-update in seconds\\n  function updateBlocksPerDay(uint periodInSeconds_) external;\\n\\n  /// @notice 0 - new borrows are allowed, 1 - any new borrows are forbidden\\n  function paused() external view returns (bool);\\n\\n  /// @notice the given user is whitelisted and is allowed to make borrow/swap using TetuConverter\\n  function isWhitelisted(address user_) external view returns (bool);\\n\\n  /// @notice The size of the gap by which the debt should be increased upon repayment\\n  ///         Such gaps are required by AAVE pool adapters to workaround dust tokens problem\\n  ///         and be able to make full repayment.\\n  /// @dev Debt gap is applied as following: toPay = debt * (DEBT_GAP_DENOMINATOR + debtGap) / DEBT_GAP_DENOMINATOR\\n  function debtGap() external view returns (uint);\\n\\n  //-----------------------------------------------------\\n  //        Core application contracts\\n  //-----------------------------------------------------\\n\\n  function tetuConverter() external view returns (address);\\n  function borrowManager() external view returns (address);\\n  function debtMonitor() external view returns (address);\\n  function tetuLiquidator() external view returns (address);\\n  function swapManager() external view returns (address);\\n  function priceOracle() external view returns (address);\\n\\n  //-----------------------------------------------------\\n  //        External contracts\\n  //-----------------------------------------------------\\n  /// @notice A keeper to control health and efficiency of the borrows\\n  function keeper() external view returns (address);\\n  /// @notice Controller of tetu-contracts-v2, that is allowed to update proxy contracts\\n  function proxyUpdater() external view returns (address);\\n}\\n\",\"keccak256\":\"0xefb20480cab050b2e178982481efc65babd931bdb6aeb4f0e10c58684cee43f1\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IConverterControllerProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IConverterControllerProvider {\\n  function controller() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71dce61809acb75f9078290e90033ffe816a51f18b7cb296d161e278c36eec86\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPriceOracle {\\n  /// @notice Return asset price in USD, decimals 18\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb11e653eb4d6d7c41f29ee1e3e498253cfa8df1aec3ff31ab527009b79bdb705\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IConverterControllerProvider.sol\\\";\\n\\n/// @notice Main contract of the TetuConverter application\\n/// @dev Borrower (strategy) makes all operations via this contract only.\\ninterface ITetuConverter is IConverterControllerProvider {\\n\\n  /// @notice Find possible borrow strategies and provide \\\"cost of money\\\" as interest for the period for each strategy\\n  ///         Result arrays of the strategy are ordered in ascending order of APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converters Array of available converters ordered in ascending order of APR.\\n  ///                    Each item contains a result contract that should be used for conversion; it supports IConverter\\n  ///                    This address should be passed to borrow-function during conversion.\\n  ///                    The length of array is always equal to the count of available lending platforms.\\n  ///                    Last items in array can contain zero addresses (it means they are not used)\\n  /// @return collateralAmountsOut Amounts that should be provided as a collateral\\n  /// @return amountToBorrowsOut Amounts that should be borrowed\\n  ///                            This amount is not zero if corresponded converter is not zero.\\n  /// @return aprs18 Interests on the use of {amountIn_} during the given period, decimals 18\\n  function findBorrowStrategies(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external view returns (\\n    address[] memory converters,\\n    uint[] memory collateralAmountsOut,\\n    uint[] memory amountToBorrowsOut,\\n    int[] memory aprs18\\n  );\\n\\n  /// @notice Find best swap strategy and provide \\\"cost of money\\\" as interest for the period\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow()\\n  /// @return sourceAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                         It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return targetAmountOut Result amount of {targetToken_} after swap\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findSwapStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_\\n  ) external returns (\\n    address converter,\\n    uint sourceAmountOut,\\n    uint targetAmountOut,\\n    int apr18\\n  );\\n\\n  /// @notice Find best conversion strategy (swap or borrow) and provide \\\"cost of money\\\" as interest for the period.\\n  ///         It calls both findBorrowStrategy and findSwapStrategy and selects a best strategy.\\n  /// @dev This is writable function with read-only behavior.\\n  ///      It should be writable to be able to simulate real swap and get a real APR for swapping.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 is used by default\\n  /// @param amountIn_  The meaning depends on entryData\\n  ///                   For entryKind=0 it's max available amount of collateral\\n  ///                   This amount must be approved to TetuConverter before the call.\\n  ///                   For entryKind=2 we don't know amount of collateral before the call,\\n  ///                   so it's necessary to approve large enough amount (or make infinity approve)\\n  /// @param periodInBlocks_ Estimated period to keep target amount. It's required to compute APR\\n  /// @return converter Result contract that should be used for conversion to be passed to borrow().\\n  /// @return collateralAmountOut Amount of {sourceToken_} that should be swapped to get {targetToken_}\\n  ///                             It can be different from the {sourceAmount_} for some entry kinds.\\n  /// @return amountToBorrowOut Result amount of {targetToken_} after conversion\\n  /// @return apr18 Interest on the use of {outMaxTargetAmount} during the given period, decimals 18\\n  function findConversionStrategy(\\n    bytes memory entryData_,\\n    address sourceToken_,\\n    uint amountIn_,\\n    address targetToken_,\\n    uint periodInBlocks_\\n  ) external returns (\\n    address converter,\\n    uint collateralAmountOut,\\n    uint amountToBorrowOut,\\n    int apr18\\n  );\\n\\n  /// @notice Convert {collateralAmount_} to {amountToBorrow_} using {converter_}\\n  ///         Target amount will be transferred to {receiver_}. No re-balancing here.\\n  /// @dev Transferring of {collateralAmount_} by TetuConverter-contract must be approved by the caller before the call\\n  ///      Only whitelisted users are allowed to make borrows\\n  /// @param converter_ A converter received from findBestConversionStrategy.\\n  /// @param collateralAmount_ Amount of {collateralAsset_} to be converted.\\n  ///                          This amount must be approved to TetuConverter before the call.\\n  /// @param amountToBorrow_ Amount of {borrowAsset_} to be borrowed and sent to {receiver_}\\n  /// @param receiver_ A receiver of borrowed amount\\n  /// @return borrowedAmountOut Exact borrowed amount transferred to {receiver_}\\n  function borrow(\\n    address converter_,\\n    address collateralAsset_,\\n    uint collateralAmount_,\\n    address borrowAsset_,\\n    uint amountToBorrow_,\\n    address receiver_\\n  ) external returns (\\n    uint borrowedAmountOut\\n  );\\n\\n  /// @notice Full or partial repay of the borrow\\n  /// @dev A user should transfer {amountToRepay_} to TetuConverter before calling repay()\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        You can know exact total amount of debt using {getStatusCurrent}.\\n  ///        if the amount exceed total amount of the debt:\\n  ///           - the debt will be fully repaid\\n  ///           - remain amount will be swapped from {borrowAsset_} to {collateralAsset_}\\n  ///        This amount should be calculated with taking into account possible debt gap,\\n  ///        You should call getDebtAmountCurrent(debtGap = true) to get this amount.\\n  /// @param receiver_ A receiver of the collateral that will be withdrawn after the repay\\n  ///                  The remained amount of borrow asset will be returned to the {receiver_} too\\n  /// @return collateralAmountOut Exact collateral amount transferred to {collateralReceiver_}\\n  ///         If TetuConverter is not able to make the swap, it reverts\\n  /// @return returnedBorrowAmountOut A part of amount-to-repay that wasn't converted to collateral asset\\n  ///                                 because of any reasons (i.e. there is no available conversion strategy)\\n  ///                                 This amount is returned back to the collateralReceiver_\\n  /// @return swappedLeftoverCollateralOut A part of collateral received through the swapping\\n  /// @return swappedLeftoverBorrowOut A part of amountToRepay_ that was swapped\\n  function repay(\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_,\\n    address receiver_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint returnedBorrowAmountOut,\\n    uint swappedLeftoverCollateralOut,\\n    uint swappedLeftoverBorrowOut\\n  );\\n\\n  /// @notice Estimate result amount after making full or partial repay\\n  /// @dev It works in exactly same way as repay() but don't make actual repay\\n  ///      Anyway, the function is write, not read-only, because it makes updateStatus()\\n  /// @param user_ user whose amount-to-repay will be calculated\\n  /// @param amountToRepay_ Amount of borrowed asset to repay.\\n  ///        This amount should be calculated without possible debt gap.\\n  ///        In this way it's differ from {repay}\\n  /// @return collateralAmountOut Total collateral amount to be returned after repay in exchange of {amountToRepay_}\\n  /// @return swappedAmountOut A part of {collateralAmountOut} that were received by direct swap\\n  function quoteRepay(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountToRepay_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint swappedAmountOut\\n  );\\n\\n  /// @notice Update status in all opened positions\\n  ///         After this call getDebtAmount will be able to return exact amount to repay\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountCurrent(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice Total amount of borrow tokens that should be repaid to close the borrow completely.\\n  /// @param user_ user whose debts will be returned\\n  /// @param useDebtGap_ Calculate exact value of the debt (false) or amount to pay (true)\\n  ///        Exact value of the debt can be a bit different from amount to pay, i.e. AAVE has dust tokens problem.\\n  ///        Exact amount of debt should be used to calculate shared price, amount to pay - for repayment\\n  /// @return totalDebtAmountOut Borrowed amount that should be repaid to pay off the loan in full\\n  /// @return totalCollateralAmountOut Amount of collateral that should be received after paying off the loan\\n  function getDebtAmountStored(\\n    address user_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    bool useDebtGap_\\n  ) external view returns (\\n    uint totalDebtAmountOut,\\n    uint totalCollateralAmountOut\\n  );\\n\\n  /// @notice User needs to redeem some collateral amount. Calculate an amount of borrow token that should be repaid\\n  /// @param user_ user whose debts will be returned\\n  /// @param collateralAmountRequired_ Amount of collateral required by the user\\n  /// @return borrowAssetAmount Borrowed amount that should be repaid to receive back following amount of collateral:\\n  ///                           amountToReceive = collateralAmountRequired_ - unobtainableCollateralAssetAmount\\n  /// @return unobtainableCollateralAssetAmount A part of collateral that cannot be obtained in any case\\n  ///                                           even if all borrowed amount will be returned.\\n  ///                                           If this amount is not 0, you ask to get too much collateral.\\n  function estimateRepay(\\n    address user_,\\n    address collateralAsset_,\\n    uint collateralAmountRequired_,\\n    address borrowAsset_\\n  ) external view returns (\\n    uint borrowAssetAmount,\\n    uint unobtainableCollateralAssetAmount\\n  );\\n\\n  /// @notice Transfer all reward tokens to {receiver_}\\n  /// @return rewardTokensOut What tokens were transferred. Same reward token can appear in the array several times\\n  /// @return amountsOut Amounts of transferred rewards, the array is synced with {rewardTokens}\\n  function claimRewards(address receiver_) external returns (\\n    address[] memory rewardTokensOut,\\n    uint[] memory amountsOut\\n  );\\n\\n  /// @notice Swap {amountIn_} of {assetIn_} to {assetOut_} and send result amount to {receiver_}\\n  ///         The swapping is made using TetuLiquidator with checking price impact using embedded price oracle.\\n  /// @param amountIn_ Amount of {assetIn_} to be swapped.\\n  ///                      It should be transferred on balance of the TetuConverter before the function call\\n  /// @param receiver_ Result amount will be sent to this address\\n  /// @param priceImpactToleranceSource_ Price impact tolerance for liquidate-call, decimals = 100_000\\n  /// @param priceImpactToleranceTarget_ Price impact tolerance for price-oracle-check, decimals = 100_000\\n  /// @return amountOut The amount of {assetOut_} that has been sent to the receiver\\n  function safeLiquidate(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    address receiver_,\\n    uint priceImpactToleranceSource_,\\n    uint priceImpactToleranceTarget_\\n  ) external returns (\\n    uint amountOut\\n  );\\n\\n  /// @notice Check if {amountOut_} is too different from the value calculated directly using price oracle prices\\n  /// @return Price difference is ok for the given {priceImpactTolerance_}\\n  function isConversionValid(\\n    address assetIn_,\\n    uint amountIn_,\\n    address assetOut_,\\n    uint amountOut_,\\n    uint priceImpactTolerance_\\n  ) external view returns (bool);\\n\\n  /// @notice Close given borrow and return collateral back to the user, governance only\\n  /// @dev The pool adapter asks required amount-to-repay from the user internally\\n  /// @param poolAdapter_ The pool adapter that represents the borrow\\n  /// @param closePosition Close position after repay\\n  ///        Usually it should be true, because the function always tries to repay all debt\\n  ///        false can be used if user doesn't have enough amount to pay full debt\\n  ///              and we are trying to pay \\\"as much as possible\\\"\\n  /// @return collateralAmountOut Amount of collateral returned to the user\\n  /// @return repaidAmountOut Amount of borrow asset paid to the lending platform\\n  function repayTheBorrow(address poolAdapter_, bool closePosition) external returns (\\n    uint collateralAmountOut,\\n    uint repaidAmountOut\\n  );\\n\\n  /// @notice Get active borrows of the user with given collateral/borrowToken\\n  /// @dev Simple access to IDebtMonitor.getPositions\\n  /// @return poolAdaptersOut The instances of IPoolAdapter\\n  function getPositions(address user_, address collateralToken_, address borrowedToken_) external view returns (\\n    address[] memory poolAdaptersOut\\n  );\\n\\n  /// @notice Save token from TC-balance to {receiver}\\n  /// @dev Normally TetuConverter doesn't have any tokens on balance, they can appear there accidentally only\\n  function salvage(address receiver, address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0xd30f740004b39189b18ab99299e9d673ff48b754e053415130a6eda95558fa7d\",\"license\":\"MIT\"},\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverterCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice TetuConverter sends callback notifications to its user via this interface\\ninterface ITetuConverterCallback {\\n  /// @notice Converters calls this function if user should return some amount back.\\n  ///         f.e. when the health factor is unhealthy and the converter needs more tokens to fix it.\\n  ///         or when the full repay is required and converter needs to get full amount-to-repay.\\n  /// @param asset_ Required asset (either collateral or borrow)\\n  /// @param amount_ Required amount of the {asset_}\\n  /// @return amountOut Exact amount that borrower has sent to balance of TetuConverter\\n  function requirePayAmountBack(address asset_, uint amount_) external returns (uint amountOut);\\n\\n  /// @notice TetuConverter calls this function when it sends any amount to user's balance\\n  /// @param assets_ Any asset sent to the balance, i.e. inside repayTheBorrow\\n  /// @param amounts_ Amount of {asset_} that has been sent to the user's balance\\n  function onTransferAmounts(address[] memory assets_, uint[] memory amounts_) external;\\n}\\n\",\"keccak256\":\"0x1ab7657c44e7725e32ef1a25293f1895911943bb25a8d0afb22a218ee4fa9d5b\",\"license\":\"MIT\"},\"contracts/integrations/kyber/IBasePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport {IRouterTokenHelper} from './IRouterTokenHelper.sol';\\nimport {IBasePositionManagerEvents} from './base_position_manager/IBasePositionManagerEvents.sol';\\n\\ninterface IBasePositionManager is IRouterTokenHelper, IBasePositionManagerEvents {\\n  struct Position {\\n    // the nonce for permits\\n    uint96 nonce;\\n    // the address that is approved for spending this token\\n    address operator;\\n    // the ID of the pool with which this token is connected\\n    uint80 poolId;\\n    // the tick range of the position\\n    int24 tickLower;\\n    int24 tickUpper;\\n    // the liquidity of the position\\n    uint128 liquidity;\\n    // the current rToken that the position owed\\n    uint256 rTokenOwed;\\n    // fee growth per unit of liquidity as of the last update to liquidity\\n    uint256 feeGrowthInsideLast;\\n  }\\n\\n  struct PoolInfo {\\n    address token0;\\n    uint24 fee;\\n    address token1;\\n  }\\n\\n  /// @notice Params for the first time adding liquidity, mint new nft to sender\\n  /// @param token0 the token0 of the pool\\n  /// @param token1 the token1 of the pool\\n  ///   - must make sure that token0 < token1\\n  /// @param fee the pool's fee in fee units\\n  /// @param tickLower the position's lower tick\\n  /// @param tickUpper the position's upper tick\\n  ///   - must make sure tickLower < tickUpper, and both are in tick distance\\n  /// @param ticksPrevious the nearest tick that has been initialized and lower than or equal to\\n  ///   the tickLower and tickUpper, use to help insert the tickLower and tickUpper if haven't initialized\\n  /// @param amount0Desired the desired amount for token0\\n  /// @param amount1Desired the desired amount for token1\\n  /// @param amount0Min min amount of token 0 to add\\n  /// @param amount1Min min amount of token 1 to add\\n  /// @param recipient the owner of the position\\n  /// @param deadline time that the transaction will be expired\\n  struct MintParams {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    int24[2] ticksPrevious;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    address recipient;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Params for adding liquidity to the existing position\\n  /// @param tokenId id of the position to increase its liquidity\\n  /// @param ticksPrevious the nearest tick that has been initialized and lower than or equal to\\n  ///   the tickLower and tickUpper, use to help insert the tickLower and tickUpper if haven't initialized\\n  ///   only needed if the position has been closed and the owner wants to add more liquidity\\n  /// @param amount0Desired the desired amount for token0\\n  /// @param amount1Desired the desired amount for token1\\n  /// @param amount0Min min amount of token 0 to add\\n  /// @param amount1Min min amount of token 1 to add\\n  /// @param deadline time that the transaction will be expired\\n  struct IncreaseLiquidityParams {\\n    uint256 tokenId;\\n    int24[2] ticksPrevious;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Params for remove liquidity from the existing position\\n  /// @param tokenId id of the position to remove its liquidity\\n  /// @param amount0Min min amount of token 0 to receive\\n  /// @param amount1Min min amount of token 1 to receive\\n  /// @param deadline time that the transaction will be expired\\n  struct RemoveLiquidityParams {\\n    uint256 tokenId;\\n    uint128 liquidity;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Burn the rTokens to get back token0 + token1 as fees\\n  /// @param tokenId id of the position to burn r token\\n  /// @param amount0Min min amount of token 0 to receive\\n  /// @param amount1Min min amount of token 1 to receive\\n  /// @param deadline time that the transaction will be expired\\n  struct BurnRTokenParams {\\n    uint256 tokenId;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Creates a new pool if it does not exist, then unlocks if it has not been unlocked\\n  /// @param token0 the token0 of the pool\\n  /// @param token1 the token1 of the pool\\n  /// @param fee the fee for the pool\\n  /// @param currentSqrtP the initial price of the pool\\n  /// @return pool returns the pool address\\n  function createAndUnlockPoolIfNecessary(\\n    address token0,\\n    address token1,\\n    uint24 fee,\\n    uint160 currentSqrtP\\n  ) external payable returns (address pool);\\n\\n  function mint(MintParams calldata params)\\n    external\\n    payable\\n    returns (\\n      uint256 tokenId,\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1\\n    );\\n\\n  function addLiquidity(IncreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint256 additionalRTokenOwed\\n    );\\n\\n  function removeLiquidity(RemoveLiquidityParams calldata params)\\n    external\\n    returns (\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint256 additionalRTokenOwed\\n    );\\n\\n  function burnRTokens(BurnRTokenParams calldata params)\\n    external\\n    returns (\\n      uint256 rTokenQty,\\n      uint256 amount0,\\n      uint256 amount1\\n    );\\n\\n  /**\\n   * @dev Burn the token by its owner\\n   * @notice All liquidity should be removed before burning\\n   */\\n  function burn(uint256 tokenId) external payable;\\n\\n  function syncFeeGrowth(uint256 tokenId) external returns (uint256 additionalRTokenOwed);\\n\\n  function positions(uint256 tokenId)\\n    external\\n    view\\n    returns (Position memory pos, PoolInfo memory info);\\n\\n  function addressToPoolId(address pool) external view returns (uint80);\\n\\n  function isRToken(address token) external view returns (bool);\\n\\n  function nextPoolId() external view returns (uint80);\\n\\n  function nextTokenId() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x908d29eb1ddac1165bc21ec4e18f1996ae3fc45ae43f5241b320c70b04431e9e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/kyber/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title KyberSwap v2 factory\\n/// @notice Deploys KyberSwap v2 pools and manages control over government fees\\ninterface IFactory {\\n  /// @notice Emitted when a pool is created\\n  /// @param token0 First pool token by address sort order\\n  /// @param token1 Second pool token by address sort order\\n  /// @param swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\\n  /// @param tickDistance Minimum number of ticks between initialized ticks\\n  /// @param pool The address of the created pool\\n  event PoolCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    uint24 indexed swapFeeUnits,\\n    int24 tickDistance,\\n    address pool\\n  );\\n\\n  /// @notice Emitted when a new fee is enabled for pool creation via the factory\\n  /// @param swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\\n  /// @param tickDistance Minimum number of ticks between initialized ticks for pools created with the given fee\\n  event SwapFeeEnabled(uint24 indexed swapFeeUnits, int24 indexed tickDistance);\\n\\n  /// @notice Emitted when vesting period changes\\n  /// @param vestingPeriod The maximum time duration for which LP fees\\n  /// are proportionally burnt upon LP removals\\n  event VestingPeriodUpdated(uint32 vestingPeriod);\\n\\n  /// @notice Emitted when configMaster changes\\n  /// @param oldConfigMaster configMaster before the update\\n  /// @param newConfigMaster configMaster after the update\\n  event ConfigMasterUpdated(address oldConfigMaster, address newConfigMaster);\\n\\n  /// @notice Emitted when fee configuration changes\\n  /// @param feeTo Recipient of government fees\\n  /// @param governmentFeeUnits Fee amount, in fee units,\\n  /// to be collected out of the fee charged for a pool swap\\n  event FeeConfigurationUpdated(address feeTo, uint24 governmentFeeUnits);\\n\\n  /// @notice Emitted when whitelist feature is enabled\\n  event WhitelistEnabled();\\n\\n  /// @notice Emitted when whitelist feature is disabled\\n  event WhitelistDisabled();\\n\\n  /// @notice Returns the maximum time duration for which LP fees\\n  /// are proportionally burnt upon LP removals\\n  function vestingPeriod() external view returns (uint32);\\n\\n  /// @notice Returns the tick distance for a specified fee.\\n  /// @dev Once added, cannot be updated or removed.\\n  /// @param swapFeeUnits Swap fee, in fee units.\\n  /// @return The tick distance. Returns 0 if fee has not been added.\\n  function feeAmountTickDistance(uint24 swapFeeUnits) external view returns (int24);\\n\\n  /// @notice Returns the address which can update the fee configuration\\n  function configMaster() external view returns (address);\\n\\n  /// @notice Returns the keccak256 hash of the Pool creation code\\n  /// This is used for pre-computation of pool addresses\\n  function poolInitHash() external view returns (bytes32);\\n\\n  /// @notice Returns the pool oracle contract for twap\\n  function poolOracle() external view returns (address);\\n\\n  /// @notice Fetches the recipient of government fees\\n  /// and current government fee charged in fee units\\n  function feeConfiguration() external view returns (address _feeTo, uint24 _governmentFeeUnits);\\n\\n  /// @notice Returns the status of whitelisting feature of NFT managers\\n  /// If true, anyone can mint liquidity tokens\\n  /// Otherwise, only whitelisted NFT manager(s) are allowed to mint liquidity tokens\\n  function whitelistDisabled() external view returns (bool);\\n\\n  //// @notice Returns all whitelisted NFT managers\\n  /// If the whitelisting feature is turned on,\\n  /// only whitelisted NFT manager(s) are allowed to mint liquidity tokens\\n  function getWhitelistedNFTManagers() external view returns (address[] memory);\\n\\n  /// @notice Checks if sender is a whitelisted NFT manager\\n  /// If the whitelisting feature is turned on,\\n  /// only whitelisted NFT manager(s) are allowed to mint liquidity tokens\\n  /// @param sender address to be checked\\n  /// @return true if sender is a whistelisted NFT manager, false otherwise\\n  function isWhitelistedNFTManager(address sender) external view returns (bool);\\n\\n  /// @notice Returns the pool address for a given pair of tokens and a swap fee\\n  /// @dev Token order does not matter\\n  /// @param tokenA Contract address of either token0 or token1\\n  /// @param tokenB Contract address of the other token\\n  /// @param swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\\n  /// @return pool The pool address. Returns null address if it does not exist\\n  function getPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 swapFeeUnits\\n  ) external view returns (address pool);\\n\\n  /// @notice Fetch parameters to be used for pool creation\\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\\n  /// @return factory The factory address\\n  /// @return poolOracle The pool oracle for twap\\n  /// @return token0 First pool token by address sort order\\n  /// @return token1 Second pool token by address sort order\\n  /// @return swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\\n  /// @return tickDistance Minimum number of ticks between initialized ticks\\n  function parameters()\\n    external\\n    view\\n    returns (\\n      address factory,\\n      address poolOracle,\\n      address token0,\\n      address token1,\\n      uint24 swapFeeUnits,\\n      int24 tickDistance\\n    );\\n\\n  /// @notice Creates a pool for the given two tokens and fee\\n  /// @param tokenA One of the two tokens in the desired pool\\n  /// @param tokenB The other of the two tokens in the desired pool\\n  /// @param swapFeeUnits Desired swap fee for the pool, in fee units\\n  /// @dev Token order does not matter. tickDistance is determined from the fee.\\n  /// Call will revert under any of these conditions:\\n  ///     1) pool already exists\\n  ///     2) invalid swap fee\\n  ///     3) invalid token arguments\\n  /// @return pool The address of the newly created pool\\n  function createPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 swapFeeUnits\\n  ) external returns (address pool);\\n\\n  /// @notice Enables a fee amount with the given tickDistance\\n  /// @dev Fee amounts may never be removed once enabled\\n  /// @param swapFeeUnits The fee amount to enable, in fee units\\n  /// @param tickDistance The distance between ticks to be enforced for all pools created with the given fee amount\\n  function enableSwapFee(uint24 swapFeeUnits, int24 tickDistance) external;\\n\\n  /// @notice Updates the address which can update the fee configuration\\n  /// @dev Must be called by the current configMaster\\n  function updateConfigMaster(address) external;\\n\\n  /// @notice Updates the vesting period\\n  /// @dev Must be called by the current configMaster\\n  function updateVestingPeriod(uint32) external;\\n\\n  /// @notice Updates the address receiving government fees and fee quantity\\n  /// @dev Only configMaster is able to perform the update\\n  /// @param feeTo Address to receive government fees collected from pools\\n  /// @param governmentFeeUnits Fee amount, in fee units,\\n  /// to be collected out of the fee charged for a pool swap\\n  function updateFeeConfiguration(address feeTo, uint24 governmentFeeUnits) external;\\n\\n  /// @notice Enables the whitelisting feature\\n  /// @dev Only configMaster is able to perform the update\\n  function enableWhitelist() external;\\n\\n  /// @notice Disables the whitelisting feature\\n  /// @dev Only configMaster is able to perform the update\\n  function disableWhitelist() external;\\n}\\n\",\"keccak256\":\"0x945e5dff3a3b83393b74eea9376d431d344600ef3767b6b30c03df51b0b59a65\",\"license\":\"MIT\"},\"contracts/integrations/kyber/IKyberSwapElasticLM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IKyberSwapElasticLM {\\n  struct RewardData {\\n    address rewardToken;\\n    uint256 rewardUnclaimed;\\n  }\\n\\n  struct LMPoolInfo {\\n    address poolAddress;\\n    uint32 startTime;\\n    uint32 endTime;\\n    uint256 totalSecondsClaimed; // scaled by (1 << 96)\\n    RewardData[] rewards;\\n    uint256 feeTarget;\\n    uint256 numStakes;\\n  }\\n\\n  struct PositionInfo {\\n    address owner;\\n    uint256 liquidity;\\n  }\\n\\n  struct StakeInfo {\\n    uint128 secondsPerLiquidityLast;\\n    uint256[] rewardLast;\\n    uint256[] rewardPending;\\n    uint256[] rewardHarvested;\\n    int256 feeFirst;\\n    uint256 liquidity;\\n  }\\n\\n  // input data in harvestMultiplePools function\\n  struct HarvestData {\\n    uint256[] pIds;\\n  }\\n\\n  // avoid stack too deep error\\n  struct RewardCalculationData {\\n    uint128 secondsPerLiquidityNow;\\n    int256 feeNow;\\n    uint256 vestingVolume;\\n    uint256 totalSecondsUnclaimed;\\n    uint256 secondsPerLiquidity;\\n    uint256 secondsClaim; // scaled by (1 << 96)\\n  }\\n\\n  // nftId => Position info\\n  function positions(uint nftId) external view returns (PositionInfo memory);\\n\\n  function admin() external view returns(address);\\n\\n  /**\\n   * @dev Add new pool to LM\\n   * @param poolAddr pool address\\n   * @param startTime start time of liquidity mining\\n   * @param endTime end time of liquidity mining\\n   * @param rewardTokens reward token list for pool\\n   * @param rewardAmounts reward amount of list token\\n   * @param feeTarget fee target for pool\\n   *\\n   */\\n  function addPool(\\n    address poolAddr,\\n    uint32 startTime,\\n    uint32 endTime,\\n    address[] calldata rewardTokens,\\n    uint256[] calldata rewardAmounts,\\n    uint256 feeTarget\\n  ) external;\\n\\n  /**\\n   * @dev Renew a pool to start another LM program\\n   * @param pId pool id to update\\n   * @param startTime start time of liquidity mining\\n   * @param endTime end time of liquidity mining\\n   * @param rewardAmounts reward amount of list token\\n   * @param feeTarget fee target for pool\\n   *\\n   */\\n  function renewPool(\\n    uint256 pId,\\n    uint32 startTime,\\n    uint32 endTime,\\n    uint256[] calldata rewardAmounts,\\n    uint256 feeTarget\\n  ) external;\\n\\n  /**\\n   * @dev Deposit NFT\\n   * @param nftIds list nft id\\n   *\\n   */\\n  function deposit(uint256[] calldata nftIds) external;\\n\\n  /**\\n   * @dev Deposit NFTs into the pool and join farms if applicable\\n   * @param pId pool id to join farm\\n   * @param nftIds List of NFT ids from BasePositionManager, should match with the pId\\n   *\\n   */\\n  function depositAndJoin(uint256 pId, uint256[] calldata nftIds) external;\\n\\n  /**\\n   * @dev Withdraw NFT, must exit all pool before call.\\n   * @param nftIds list nft id\\n   *\\n   */\\n  function withdraw(uint256[] calldata nftIds) external;\\n\\n  /**\\n   * @dev Join pools\\n   * @param pId pool id to join\\n   * @param nftIds nfts to join\\n   * @param liqs list liquidity value to join each nft\\n   *\\n   */\\n  function join(uint256 pId, uint256[] calldata nftIds, uint256[] calldata liqs) external;\\n\\n  /**\\n   * @dev Exit from pools\\n   * @param pId pool ids to exit\\n   * @param nftIds list nfts id\\n   * @param liqs list liquidity value to exit from each nft\\n   *\\n   */\\n  function exit(uint256 pId, uint256[] calldata nftIds, uint256[] calldata liqs) external;\\n\\n  /**\\n   * @dev Claim rewards for a list of pools for a list of nft positions\\n   * @param nftIds List of NFT ids to harvest\\n   * @param datas List of pool ids to harvest for each nftId, encoded into bytes\\n   */\\n  function harvestMultiplePools(uint256[] calldata nftIds, bytes[] calldata datas) external;\\n\\n  /**\\n   * @dev remove liquidity from elastic for a list of nft position, also update on farm\\n   * @param nftId to remove\\n   * @param liquidity liquidity amount to remove from nft\\n   * @param amount0Min expected min amount of token0 should receive\\n   * @param amount1Min expected min amount of token1 should receive\\n   * @param deadline deadline of this tx\\n   * @param isReceiveNative should unwrap native or not\\n   * @param claimFeeAndRewards also claim LP Fee and farm rewards\\n   */\\n  function removeLiquidity(\\n    uint256 nftId,\\n    uint128 liquidity,\\n    uint256 amount0Min,\\n    uint256 amount1Min,\\n    uint256 deadline,\\n    bool isReceiveNative,\\n    bool[2] calldata claimFeeAndRewards\\n  ) external;\\n\\n  /**\\n   * @dev Claim fee from elastic for a list of nft positions\\n   * @param nftIds List of NFT ids to claim\\n   * @param amount0Min expected min amount of token0 should receive\\n   * @param amount1Min expected min amount of token1 should receive\\n   * @param poolAddress address of Elastic pool of those nfts\\n   * @param isReceiveNative should unwrap native or not\\n   * @param deadline deadline of this tx\\n   */\\n  function claimFee(\\n    uint256[] calldata nftIds,\\n    uint256 amount0Min,\\n    uint256 amount1Min,\\n    address poolAddress,\\n    bool isReceiveNative,\\n    uint256 deadline\\n  ) external;\\n\\n  /**\\n   * @dev Operator only. Call to withdraw all reward from list pools.\\n   * @param rewards list reward address erc20 token\\n   * @param amounts amount to withdraw\\n   *\\n   */\\n  function emergencyWithdrawForOwner(\\n    address[] calldata rewards,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @dev Withdraw NFT, can call any time, reward will be reset. Must enable this func by operator\\n   * @param pIds list pool to withdraw\\n   *\\n   */\\n  function emergencyWithdraw(uint256[] calldata pIds) external;\\n\\n  /**\\n   * @dev get list of pool that this nft joined\\n   * @param nftId to get\\n   */\\n  function getJoinedPools(uint256 nftId) external view returns (uint256[] memory poolIds);\\n\\n  /**\\n   * @dev get list of pool that this nft joined, only in a specific range\\n   * @param nftId to get\\n   * @param fromIndex index from\\n   * @param toIndex index to\\n   */\\n  function getJoinedPoolsInRange(\\n    uint256 nftId,\\n    uint256 fromIndex,\\n    uint256 toIndex\\n  ) external view returns (uint256[] memory poolIds);\\n\\n  /**\\n   * @dev get user's info (staked info) of a nft in a pool\\n   * @param nftId to get\\n   * @param pId to get\\n   */\\n  function getUserInfo(\\n    uint256 nftId,\\n    uint256 pId\\n  )\\n  external\\n  view\\n  returns (uint256 liquidity, uint256[] memory rewardPending, uint256[] memory rewardLast);\\n\\n  /**\\n   * @dev get pool info\\n   * @param pId to get\\n   */\\n  function getPoolInfo(\\n    uint256 pId\\n  )\\n  external\\n  view\\n  returns (\\n    address poolAddress,\\n    uint32 startTime,\\n    uint32 endTime,\\n    uint256 totalSecondsClaimed,\\n    uint256 feeTarget,\\n    uint256 numStakes,\\n  //index reward => reward data\\n    address[] memory rewardTokens,\\n    uint256[] memory rewardUnclaimeds\\n  );\\n\\n  /**\\n   * @dev get list of deposited nfts of an address\\n   * @param user address of user to get\\n   */\\n  function getDepositedNFTs(address user) external view returns (uint256[] memory listNFTs);\\n\\n  function nft() external view returns (IERC721);\\n\\n  function poolLength() external view returns (uint256);\\n\\n  function getRewardCalculationData(\\n    uint256 nftId,\\n    uint256 pId\\n  ) external view returns (RewardCalculationData memory data);\\n}\\n\",\"keccak256\":\"0x48684dc0fac6fae0fd0df56eff39329abece6c4b9305d938e55ab563b349631c\",\"license\":\"MIT\"},\"contracts/integrations/kyber/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IPoolActions} from './pool/IPoolActions.sol';\\nimport {IPoolEvents} from './pool/IPoolEvents.sol';\\nimport {IPoolStorage} from './pool/IPoolStorage.sol';\\n\\ninterface IPool is IPoolActions, IPoolEvents, IPoolStorage {}\\n\",\"keccak256\":\"0x851e6030f2f0f7c5a9866538cf9638255ee2f3977ca3ce07f3e66cdf1e2f4a7e\",\"license\":\"MIT\"},\"contracts/integrations/kyber/IRouterTokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\ninterface IRouterTokenHelper {\\n  /// @notice Unwraps the contract's WETH balance and sends it to recipient as ETH.\\n  /// @dev The minAmount parameter prevents malicious contracts from stealing WETH from users.\\n  /// @param minAmount The minimum amount of WETH to unwrap\\n  /// @param recipient The address receiving ETH\\n  function unwrapWeth(uint256 minAmount, address recipient) external payable;\\n\\n  /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n  /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n  /// that use ether for the input amount\\n  function refundEth() external payable;\\n\\n  /// @notice Transfers the full amount of a token held by this contract to recipient\\n  /// @dev The minAmount parameter prevents malicious contracts from stealing the token from users\\n  /// @param token The contract address of the token which will be transferred to `recipient`\\n  /// @param minAmount The minimum amount of token required for a transfer\\n  /// @param recipient The destination address of the token\\n  function transferAllTokens(\\n    address token,\\n    uint256 minAmount,\\n    address recipient\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xe6681753d37f3a8c4f37d93f1041f58700bd52c833fb41cedd1418300e5db4a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/kyber/ITicksFeesReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITicksFeesReader {\\n  function getTotalFeesOwedToPosition(\\n    address posManager,\\n    address pool,\\n    uint256 tokenId\\n  ) external view returns (uint256 token0Owed, uint256 token1Owed);\\n}\\n\",\"keccak256\":\"0xe19d42f420cfdad8cfa947f004ce23af93c33ae947c02a947906156c7d046fa1\",\"license\":\"MIT\"},\"contracts/integrations/kyber/base_position_manager/IBasePositionManagerEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IBasePositionManagerEvents {\\n  /// @notice Emitted when a token is minted for a given position\\n  /// @param tokenId the newly minted tokenId\\n  /// @param poolId poolId of the token\\n  /// @param liquidity liquidity minted to the position range\\n  /// @param amount0 token0 quantity needed to mint the liquidity\\n  /// @param amount1 token1 quantity needed to mint the liquidity\\n  event MintPosition(\\n    uint256 indexed tokenId,\\n    uint80 indexed poolId,\\n    uint128 liquidity,\\n    uint256 amount0,\\n    uint256 amount1\\n  );\\n\\n  /// @notice Emitted when a token is burned\\n  /// @param tokenId id of the token\\n  event BurnPosition(uint256 indexed tokenId);\\n\\n  /// @notice Emitted when add liquidity\\n  /// @param tokenId id of the token\\n  /// @param liquidity the increase amount of liquidity\\n  /// @param amount0 token0 quantity needed to increase liquidity\\n  /// @param amount1 token1 quantity needed to increase liquidity\\n  /// @param additionalRTokenOwed additional rToken earned\\n  event AddLiquidity(\\n    uint256 indexed tokenId,\\n    uint128 liquidity,\\n    uint256 amount0,\\n    uint256 amount1,\\n    uint256 additionalRTokenOwed\\n  );\\n\\n  /// @notice Emitted when remove liquidity\\n  /// @param tokenId id of the token\\n  /// @param liquidity the decease amount of liquidity\\n  /// @param amount0 token0 quantity returned when remove liquidity\\n  /// @param amount1 token1 quantity returned when remove liquidity\\n  /// @param additionalRTokenOwed additional rToken earned\\n  event RemoveLiquidity(\\n    uint256 indexed tokenId,\\n    uint128 liquidity,\\n    uint256 amount0,\\n    uint256 amount1,\\n    uint256 additionalRTokenOwed\\n  );\\n\\n  /// @notice Emitted when burn position's RToken\\n  /// @param tokenId id of the token\\n  /// @param rTokenBurn amount of position's RToken burnt\\n  event BurnRToken(uint256 indexed tokenId, uint256 rTokenBurn);\\n\\n  /// @notice Emitted when sync fee growth\\n  /// @param tokenId id of the token\\n  /// @param additionalRTokenOwed additional rToken earned\\n  event SyncFeeGrowth(uint256 indexed tokenId, uint256 additionalRTokenOwed);\\n}\\n\",\"keccak256\":\"0x25c7472ffc6a568f9aea2365cc72c41ef6aeed75e9f5d3aed9a63c73a9a799f2\",\"license\":\"MIT\"},\"contracts/integrations/kyber/oracle/IPoolOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IPoolOracle {\\n  /// @notice Owner withdrew funds in the pool oracle in case some funds are stuck there\\n  event OwnerWithdrew(\\n    address indexed owner,\\n    address indexed token,\\n    uint256 indexed amount\\n  );\\n\\n  /// @notice Emitted by the Pool Oracle for increases to the number of observations that can be stored\\n  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n  /// just before a mint/swap/burn.\\n  /// @param pool The pool address to update\\n  /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n  /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n  event IncreaseObservationCardinalityNext(\\n    address pool,\\n    uint16 observationCardinalityNextOld,\\n    uint16 observationCardinalityNextNew\\n  );\\n\\n  /// @notice Initalize observation data for the caller.\\n  function initializeOracle(uint32 time)\\n    external\\n    returns (uint16 cardinality, uint16 cardinalityNext);\\n\\n  /// @notice Write a new oracle entry into the array\\n  ///   and update the observation index and cardinality\\n  /// Read the Oralce.write function for more details\\n  function writeNewEntry(\\n    uint16 index,\\n    uint32 blockTimestamp,\\n    int24 tick,\\n    uint128 liquidity,\\n    uint16 cardinality,\\n    uint16 cardinalityNext\\n  )\\n    external\\n    returns (uint16 indexUpdated, uint16 cardinalityUpdated);\\n\\n  /// @notice Write a new oracle entry into the array, take the latest observaion data as inputs\\n  ///   and update the observation index and cardinality\\n  /// Read the Oralce.write function for more details\\n  function write(\\n    uint32 blockTimestamp,\\n    int24 tick,\\n    uint128 liquidity\\n  )\\n    external\\n    returns (uint16 indexUpdated, uint16 cardinalityUpdated);\\n\\n  /// @notice Increase the maximum number of price observations that this pool will store\\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n  /// the input observationCardinalityNext.\\n  /// @param pool The pool address to be updated\\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n  function increaseObservationCardinalityNext(\\n    address pool,\\n    uint16 observationCardinalityNext\\n  )\\n    external;\\n\\n  /// @notice Returns the accumulator values as of each time seconds ago from the latest block time in the array of `secondsAgos`\\n  /// @dev Reverts if `secondsAgos` > oldest observation\\n  /// @dev It fetches the latest current tick data from the pool\\n  /// Read the Oracle.observe function for more details\\n  function observeFromPool(\\n    address pool,\\n    uint32[] memory secondsAgos\\n  )\\n    external view\\n    returns (int56[] memory tickCumulatives);\\n\\n  /// @notice Returns the accumulator values as the time seconds ago from the latest block time of secondsAgo\\n  /// @dev Reverts if `secondsAgo` > oldest observation\\n  /// @dev It fetches the latest current tick data from the pool\\n  /// Read the Oracle.observeSingle function for more details\\n  function observeSingleFromPool(\\n    address pool,\\n    uint32 secondsAgo\\n  )\\n    external view\\n    returns (int56 tickCumulative);\\n\\n  /// @notice Return the latest pool observation data given the pool address\\n  function getPoolObservation(address pool)\\n    external view\\n    returns (bool initialized, uint16 index, uint16 cardinality, uint16 cardinalityNext);\\n\\n  /// @notice Returns data about a specific observation index\\n  /// @param pool The pool address of the observations array to fetch\\n  /// @param index The element of the observations array to fetch\\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n  /// ago, rather than at a specific index in the array.\\n  /// @return blockTimestamp The timestamp of the observation,\\n  /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n  /// Returns initialized whether the observation has been initialized and the values are safe to use\\n  function getObservationAt(address pool, uint256 index)\\n    external view\\n    returns (\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      bool initialized\\n    );\\n}\\n\",\"keccak256\":\"0xe7702297e8564882e632c9bc842ef2db94412d78d52e8ebcc69f41e608ad5df8\",\"license\":\"MIT\"},\"contracts/integrations/kyber/pool/IPoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IPoolActions {\\n  /// @notice Sets the initial price for the pool and seeds reinvestment liquidity\\n  /// @dev Assumes the caller has sent the necessary token amounts\\n  /// required for initializing reinvestment liquidity prior to calling this function\\n  /// @param initialSqrtP the initial sqrt price of the pool\\n  /// @param qty0 token0 quantity sent to and locked permanently in the pool\\n  /// @param qty1 token1 quantity sent to and locked permanently in the pool\\n  function unlockPool(uint160 initialSqrtP) external returns (uint256 qty0, uint256 qty1);\\n\\n  /// @notice Adds liquidity for the specified recipient/tickLower/tickUpper position\\n  /// @dev Any token0 or token1 owed for the liquidity provision have to be paid for when\\n  /// the IMintCallback#mintCallback is called to this method's caller\\n  /// The quantity of token0/token1 to be sent depends on\\n  /// tickLower, tickUpper, the amount of liquidity, and the current price of the pool.\\n  /// Also sends reinvestment tokens (fees) to the recipient for any fees collected\\n  /// while the position is in range\\n  /// Reinvestment tokens have to be burnt via #burnRTokens in exchange for token0 and token1\\n  /// @param recipient Address for which the added liquidity is credited to\\n  /// @param tickLower Recipient position's lower tick\\n  /// @param tickUpper Recipient position's upper tick\\n  /// @param ticksPrevious The nearest tick that is initialized and <= the lower & upper ticks\\n  /// @param qty Liquidity quantity to mint\\n  /// @param data Data (if any) to be passed through to the callback\\n  /// @return qty0 token0 quantity sent to the pool in exchange for the minted liquidity\\n  /// @return qty1 token1 quantity sent to the pool in exchange for the minted liquidity\\n  /// @return feeGrowthInside position's updated feeGrowthInside value\\n  function mint(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    int24[2] calldata ticksPrevious,\\n    uint128 qty,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      uint256 qty0,\\n      uint256 qty1,\\n      uint256 feeGrowthInside\\n    );\\n\\n  /// @notice Remove liquidity from the caller\\n  /// Also sends reinvestment tokens (fees) to the caller for any fees collected\\n  /// while the position is in range\\n  /// Reinvestment tokens have to be burnt via #burnRTokens in exchange for token0 and token1\\n  /// @param tickLower Position's lower tick for which to burn liquidity\\n  /// @param tickUpper Position's upper tick for which to burn liquidity\\n  /// @param qty Liquidity quantity to burn\\n  /// @return qty0 token0 quantity sent to the caller\\n  /// @return qty1 token1 quantity sent to the caller\\n  /// @return feeGrowthInside position's updated feeGrowthInside value\\n  function burn(\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 qty\\n  )\\n    external\\n    returns (\\n      uint256 qty0,\\n      uint256 qty1,\\n      uint256 feeGrowthInside\\n    );\\n\\n  /// @notice Burns reinvestment tokens in exchange to receive the fees collected in token0 and token1\\n  /// @param qty Reinvestment token quantity to burn\\n  /// @param isLogicalBurn true if burning rTokens without returning any token0/token1\\n  ///         otherwise should transfer token0/token1 to sender\\n  /// @return qty0 token0 quantity sent to the caller for burnt reinvestment tokens\\n  /// @return qty1 token1 quantity sent to the caller for burnt reinvestment tokens\\n  function burnRTokens(uint256 qty, bool isLogicalBurn)\\n    external\\n    returns (uint256 qty0, uint256 qty1);\\n\\n  /// @notice Swap token0 -> token1, or vice versa\\n  /// @dev This method's caller receives a callback in the form of ISwapCallback#swapCallback\\n  /// @dev swaps will execute up to limitSqrtP or swapQty is fully used\\n  /// @param recipient The address to receive the swap output\\n  /// @param swapQty The swap quantity, which implicitly configures the swap as exact input (>0), or exact output (<0)\\n  /// @param isToken0 Whether the swapQty is specified in token0 (true) or token1 (false)\\n  /// @param limitSqrtP the limit of sqrt price after swapping\\n  /// could be MAX_SQRT_RATIO-1 when swapping 1 -> 0 and MIN_SQRT_RATIO+1 when swapping 0 -> 1 for no limit swap\\n  /// @param data Any data to be passed through to the callback\\n  /// @return qty0 Exact token0 qty sent to recipient if < 0. Minimally received quantity if > 0.\\n  /// @return qty1 Exact token1 qty sent to recipient if < 0. Minimally received quantity if > 0.\\n  function swap(\\n    address recipient,\\n    int256 swapQty,\\n    bool isToken0,\\n    uint160 limitSqrtP,\\n    bytes calldata data\\n  ) external returns (int256 qty0, int256 qty1);\\n\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n  /// @dev The caller of this method receives a callback in the form of IFlashCallback#flashCallback\\n  /// @dev Fees collected are sent to the feeTo address if it is set in Factory\\n  /// @param recipient The address which will receive the token0 and token1 quantities\\n  /// @param qty0 token0 quantity to be loaned to the recipient\\n  /// @param qty1 token1 quantity to be loaned to the recipient\\n  /// @param data Any data to be passed through to the callback\\n  function flash(\\n    address recipient,\\n    uint256 qty0,\\n    uint256 qty1,\\n    bytes calldata data\\n  ) external;\\n\\n\\n  /// @notice sync fee of position\\n  /// @param tickLower Position's lower tick\\n  /// @param tickUpper Position's upper tick\\n  function tweakPosZeroLiq(int24 tickLower, int24 tickUpper)\\n    external returns(uint256 feeGrowthInsideLast);\\n}\\n\",\"keccak256\":\"0x41c16c12a16311057081adeea96408098f81cc76763a9aae8b99f8af56bf5f03\",\"license\":\"MIT\"},\"contracts/integrations/kyber/pool/IPoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IPoolEvents {\\n  /// @notice Emitted only once per pool when #initialize is first called\\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n  /// @param sqrtP The initial price of the pool\\n  /// @param tick The initial tick of the pool\\n  event Initialize(uint160 sqrtP, int24 tick);\\n\\n  /// @notice Emitted when liquidity is minted for a given position\\n  /// @dev transfers reinvestment tokens for any collected fees earned by the position\\n  /// @param sender address that minted the liquidity\\n  /// @param owner address of owner of the position\\n  /// @param tickLower position's lower tick\\n  /// @param tickUpper position's upper tick\\n  /// @param qty liquidity minted to the position range\\n  /// @param qty0 token0 quantity needed to mint the liquidity\\n  /// @param qty1 token1 quantity needed to mint the liquidity\\n  event Mint(\\n    address sender,\\n    address indexed owner,\\n    int24 indexed tickLower,\\n    int24 indexed tickUpper,\\n    uint128 qty,\\n    uint256 qty0,\\n    uint256 qty1\\n  );\\n\\n  /// @notice Emitted when a position's liquidity is removed\\n  /// @dev transfers reinvestment tokens for any collected fees earned by the position\\n  /// @param owner address of owner of the position\\n  /// @param tickLower position's lower tick\\n  /// @param tickUpper position's upper tick\\n  /// @param qty liquidity removed\\n  /// @param qty0 token0 quantity withdrawn from removal of liquidity\\n  /// @param qty1 token1 quantity withdrawn from removal of liquidity\\n  event Burn(\\n    address indexed owner,\\n    int24 indexed tickLower,\\n    int24 indexed tickUpper,\\n    uint128 qty,\\n    uint256 qty0,\\n    uint256 qty1\\n  );\\n\\n  /// @notice Emitted when reinvestment tokens are burnt\\n  /// @param owner address which burnt the reinvestment tokens\\n  /// @param qty reinvestment token quantity burnt\\n  /// @param qty0 token0 quantity sent to owner for burning reinvestment tokens\\n  /// @param qty1 token1 quantity sent to owner for burning reinvestment tokens\\n  event BurnRTokens(address indexed owner, uint256 qty, uint256 qty0, uint256 qty1);\\n\\n  /// @notice Emitted for swaps by the pool between token0 and token1\\n  /// @param sender Address that initiated the swap call, and that received the callback\\n  /// @param recipient Address that received the swap output\\n  /// @param deltaQty0 Change in pool's token0 balance\\n  /// @param deltaQty1 Change in pool's token1 balance\\n  /// @param sqrtP Pool's sqrt price after the swap\\n  /// @param liquidity Pool's liquidity after the swap\\n  /// @param currentTick Log base 1.0001 of pool's price after the swap\\n  event Swap(\\n    address indexed sender,\\n    address indexed recipient,\\n    int256 deltaQty0,\\n    int256 deltaQty1,\\n    uint160 sqrtP,\\n    uint128 liquidity,\\n    int24 currentTick\\n  );\\n\\n  /// @notice Emitted by the pool for any flash loans of token0/token1\\n  /// @param sender The address that initiated the flash loan, and that received the callback\\n  /// @param recipient The address that received the flash loan quantities\\n  /// @param qty0 token0 quantity loaned to the recipient\\n  /// @param qty1 token1 quantity loaned to the recipient\\n  /// @param paid0 token0 quantity paid for the flash, which can exceed qty0 + fee\\n  /// @param paid1 token1 quantity paid for the flash, which can exceed qty0 + fee\\n  event Flash(\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 qty0,\\n    uint256 qty1,\\n    uint256 paid0,\\n    uint256 paid1\\n  );\\n}\\n\",\"keccak256\":\"0x5eec1a4dba5d72851449e539e12a5e6ee25d6baf26a863410de38f80f4a43465\",\"license\":\"MIT\"},\"contracts/integrations/kyber/pool/IPoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {IFactory} from '../IFactory.sol';\\nimport {IPoolOracle} from '../oracle/IPoolOracle.sol';\\n\\ninterface IPoolStorage {\\n  /// @notice The contract that deployed the pool, which must adhere to the IFactory interface\\n  /// @return The contract address\\n  function factory() external view returns (IFactory);\\n\\n  /// @notice The oracle contract that stores necessary data for price oracle\\n  /// @return The contract address\\n  function poolOracle() external view returns (IPoolOracle);\\n\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (IERC20);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (IERC20);\\n\\n  /// @notice The fee to be charged for a swap in basis points\\n  /// @return The swap fee in basis points\\n  function swapFeeUnits() external view returns (uint24);\\n\\n  /// @notice The pool tick distance\\n  /// @dev Ticks can only be initialized and used at multiples of this value\\n  /// It remains an int24 to avoid casting even though it is >= 1.\\n  /// e.g: a tickDistance of 5 means ticks can be initialized every 5th tick, i.e., ..., -10, -5, 0, 5, 10, ...\\n  /// @return The tick distance\\n  function tickDistance() external view returns (int24);\\n\\n  /// @notice Maximum gross liquidity that an initialized tick can have\\n  /// @dev This is to prevent overflow the pool's active base liquidity (uint128)\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n  /// @return The max amount of liquidity per tick\\n  function maxTickLiquidity() external view returns (uint128);\\n\\n  /// @notice Look up information about a specific tick in the pool\\n  /// @param tick The tick to look up\\n  /// @return liquidityGross total liquidity amount from positions that uses this tick as a lower or upper tick\\n  /// liquidityNet how much liquidity changes when the pool tick crosses above the tick\\n  /// feeGrowthOutside the fee growth on the other side of the tick relative to the current tick\\n  /// secondsPerLiquidityOutside the seconds per unit of liquidity  spent on the other side of the tick relative to the current tick\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityGross,\\n      int128 liquidityNet,\\n      uint256 feeGrowthOutside,\\n      uint128 secondsPerLiquidityOutside\\n    );\\n\\n  /// @notice Returns the previous and next initialized ticks of a specific tick\\n  /// @dev If specified tick is uninitialized, the returned values are zero.\\n  /// @param tick The tick to look up\\n  function initializedTicks(int24 tick) external view returns (int24 previous, int24 next);\\n\\n  /// @notice Returns the information about a position by the position's key\\n  /// @return liquidity the liquidity quantity of the position\\n  /// @return feeGrowthInsideLast fee growth inside the tick range as of the last mint / burn action performed\\n  function getPositions(\\n    address owner,\\n    int24 tickLower,\\n    int24 tickUpper\\n  ) external view returns (uint128 liquidity, uint256 feeGrowthInsideLast);\\n\\n  /// @notice Fetches the pool's prices, ticks and lock status\\n  /// @return sqrtP sqrt of current price: sqrt(token1/token0)\\n  /// @return currentTick pool's current tick\\n  /// @return nearestCurrentTick pool's nearest initialized tick that is <= currentTick\\n  /// @return locked true if pool is locked, false otherwise\\n  function getPoolState()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtP,\\n      int24 currentTick,\\n      int24 nearestCurrentTick,\\n      bool locked\\n    );\\n\\n  /// @notice Fetches the pool's liquidity values\\n  /// @return baseL pool's base liquidity without reinvest liqudity\\n  /// @return reinvestL the liquidity is reinvested into the pool\\n  /// @return reinvestLLast last cached value of reinvestL, used for calculating reinvestment token qty\\n  function getLiquidityState()\\n    external\\n    view\\n    returns (\\n      uint128 baseL,\\n      uint128 reinvestL,\\n      uint128 reinvestLLast\\n    );\\n\\n  /// @return feeGrowthGlobal All-time fee growth per unit of liquidity of the pool\\n  function getFeeGrowthGlobal() external view returns (uint256);\\n\\n  /// @return secondsPerLiquidityGlobal All-time seconds per unit of liquidity of the pool\\n  /// @return lastUpdateTime The timestamp in which secondsPerLiquidityGlobal was last updated\\n  function getSecondsPerLiquidityData()\\n    external\\n    view\\n    returns (uint128 secondsPerLiquidityGlobal, uint32 lastUpdateTime);\\n\\n  /// @notice Calculates and returns the active time per unit of liquidity until current block.timestamp\\n  /// @param tickLower The lower tick (of a position)\\n  /// @param tickUpper The upper tick (of a position)\\n  /// @return secondsPerLiquidityInside active time (multiplied by 2^96)\\n  /// between the 2 ticks, per unit of liquidity.\\n  function getSecondsPerLiquidityInside(int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (uint128 secondsPerLiquidityInside);\\n}\\n\",\"keccak256\":\"0xabbcd213733e3fb06cd2d4adb32462c454d4267cdb9563dde1ac08547c1ffbec\",\"license\":\"MIT\"},\"contracts/interfaces/IFarmingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IFarmingStrategy {\\n  function canFarm() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb260284b135708e135e142499de928255b16313ec7e02c5bb49f2055b6d2c6c3\",\"license\":\"MIT\"},\"contracts/interfaces/IRebalancingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRebalancingStrategy {\\n    function needRebalance() external view returns (bool);\\n    function rebalance() external;\\n}\\n\",\"keccak256\":\"0x3c655f8e6af631d1f5eb05d4fbb7333b6cf95a3a254a8a44b22abee53f2652dc\",\"license\":\"MIT\"},\"contracts/libs/AppErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice List of all errors generated by the application\\n///         Each error should have unique code TS-XXX and descriptive comment\\nlibrary AppErrors {\\n  /// @notice Provided address should be not zero\\n  string public constant ZERO_ADDRESS = \\\"TS-1 zero address\\\";\\n\\n  /// @notice A pair of the tokens cannot be found in the factory of uniswap pairs\\n  string public constant UNISWAP_PAIR_NOT_FOUND = \\\"TS-2 pair not found\\\";\\n\\n  /// @notice Lengths not matched\\n  string public constant WRONG_LENGTHS = \\\"TS-4 wrong lengths\\\";\\n\\n  /// @notice Unexpected zero balance\\n  string public constant ZERO_BALANCE = \\\"TS-5 zero balance\\\";\\n\\n  string public constant ITEM_NOT_FOUND = \\\"TS-6 not found\\\";\\n\\n  string public constant NOT_ENOUGH_BALANCE = \\\"TS-7 not enough balance\\\";\\n\\n  /// @notice Price oracle returns zero price\\n  string public constant ZERO_PRICE = \\\"TS-8 zero price\\\";\\n\\n  string public constant WRONG_VALUE = \\\"TS-9 wrong value\\\";\\n\\n  /// @notice TetuConvertor wasn't able to make borrow, i.e. borrow-strategy wasn't found\\n  string public constant ZERO_AMOUNT_BORROWED = \\\"TS-10 zero borrowed amount\\\";\\n\\n  string public constant WITHDRAW_TOO_MUCH = \\\"TS-11 try to withdraw too much\\\";\\n\\n  string public constant UNKNOWN_ENTRY_KIND = \\\"TS-12 unknown entry kind\\\";\\n\\n  string public constant ONLY_TETU_CONVERTER = \\\"TS-13 only TetuConverter\\\";\\n\\n  string public constant WRONG_ASSET = \\\"TS-14 wrong asset\\\";\\n\\n  string public constant NO_LIQUIDATION_ROUTE = \\\"TS-15 No liquidation route\\\";\\n\\n  string public constant PRICE_IMPACT = \\\"TS-16 price impact\\\";\\n\\n  /// @notice tetuConverter_.repay makes swap internally. It's not efficient and not allowed\\n  string public constant REPAY_MAKES_SWAP = \\\"TS-17 can not convert back\\\";\\n\\n  string public constant NO_INVESTMENTS = \\\"TS-18 no investments\\\";\\n\\n  string public constant INCORRECT_LENGTHS = \\\"TS-19 lengths\\\";\\n\\n  /// @notice We expect increasing of the balance, but it was decreased\\n  string public constant BALANCE_DECREASE = \\\"TS-20 balance decrease\\\";\\n\\n  /// @notice Prices changed and invested assets amount was increased on S, value of S is too high\\n  string public constant EARNED_AMOUNT_TOO_HIGH = \\\"TS-21 earned too high\\\";\\n\\n  string public constant GOVERNANCE_ONLY = \\\"TS-22 governance only\\\";\\n}\\n\",\"keccak256\":\"0xc723cb16fc5a3e054ebd5f1597da4b092efec3041a87a6d3a816246721437042\",\"license\":\"MIT\"},\"contracts/libs/AppLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\n/// @notice Common internal utils\\nlibrary AppLib {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Unchecked increment for for-cycles\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n    unchecked {\\n      return i + 1;\\n    }\\n  }\\n\\n  /// @notice Make infinite approve of {token} to {spender} if the approved amount is less than {amount}\\n  /// @dev Should NOT be used for third-party pools\\n  function approveIfNeeded(address token, uint amount, address spender) internal {\\n    if (IERC20(token).allowance(address(this), spender) < amount) {\\n      IERC20(token).safeApprove(spender, 0);\\n      // infinite approve, 2*255 is more gas efficient then type(uint).max\\n      IERC20(token).safeApprove(spender, 2 ** 255);\\n    }\\n  }\\n\\n  function balance(address token) internal view returns (uint) {\\n    return IERC20(token).balanceOf(address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xfab865a9b68066722b1ffea0123683a3a0515bc4cfa03c067c93d191a625e63d\",\"license\":\"MIT\"},\"contracts/libs/AppPlatforms.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary AppPlatforms {\\n  string public constant UNIV3 = \\\"UniswapV3\\\";\\n  string public constant BALANCER = \\\"Balancer\\\";\\n  string public constant ALGEBRA = \\\"Algebra\\\";\\n  string public constant KYBER = \\\"Kyber\\\";\\n}\\n\",\"keccak256\":\"0x8017136efd19dba683ece73de2242421c02f9fc58499710541fa96c9ec19410e\",\"license\":\"MIT\"},\"contracts/libs/ConverterEntryKinds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @notice Utils and constants related to entryKind param of ITetuConverter.findBorrowStrategy\\nlibrary ConverterEntryKinds {\\n  /// @notice Amount of collateral is fixed. Amount of borrow should be max possible.\\n  uint constant public ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0 = 0;\\n\\n  /// @notice Split provided source amount S on two parts: C1 and C2 (C1 + C2 = S)\\n  ///         C2 should be used as collateral to make a borrow B.\\n  ///         Results amounts of C1 and B (both in terms of USD) must be in the given proportion\\n  uint constant public ENTRY_KIND_EXACT_PROPORTION_1 = 1;\\n\\n  /// @notice Borrow given amount using min possible collateral\\n  uint constant public ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2 = 2;\\n\\n  /// @notice Decode entryData, extract first uint - entry kind\\n  ///         Valid values of entry kinds are given by ENTRY_KIND_XXX constants above\\n  function getEntryKind(bytes memory entryData_) internal pure returns (uint) {\\n    if (entryData_.length == 0) {\\n      return ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0;\\n    }\\n    return abi.decode(entryData_, (uint));\\n  }\\n}\\n\",\"keccak256\":\"0x42e53e67f20fe11a5f5209e21f2d9b2ebeacdb197ae506ac796920907ea679a2\",\"license\":\"MIT\"},\"contracts/libs/TokenAmountsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./AppErrors.sol\\\";\\n\\n/// @title Library for clearing / joining token addresses & amounts arrays\\n/// @author bogdoslav\\nlibrary TokenAmountsLib {\\n  /// @notice Version of the contract\\n  /// @dev Should be incremented when contract changed\\n  string internal constant TOKEN_AMOUNTS_LIB_VERSION = \\\"1.0.1\\\";\\n\\n  function uncheckedInc(uint i) internal pure returns (uint) {\\n    unchecked {\\n      return i + 1;\\n    }\\n  }\\n\\n  function filterZeroAmounts(\\n    address[] memory tokens,\\n    uint[] memory amounts\\n  ) internal pure returns (\\n    address[] memory t,\\n    uint[] memory a\\n  ) {\\n    require(tokens.length == amounts.length, AppErrors.INCORRECT_LENGTHS);\\n    uint len2 = 0;\\n    uint len = tokens.length;\\n    for (uint i = 0; i < len; i++) {\\n      if (amounts[i] != 0) len2++;\\n    }\\n\\n    t = new address[](len2);\\n    a = new uint[](len2);\\n\\n    uint j = 0;\\n    for (uint i = 0; i < len; i++) {\\n      uint amount = amounts[i];\\n      if (amount != 0) {\\n        t[j] = tokens[i];\\n        a[j] = amount;\\n        j++;\\n      }\\n    }\\n  }\\n\\n  /// @notice unites three arrays to single array without duplicates, amounts are sum, zero amounts are allowed\\n  function combineArrays(\\n    address[] memory tokens0,\\n    uint[] memory amounts0,\\n    address[] memory tokens1,\\n    uint[] memory amounts1,\\n    address[] memory tokens2,\\n    uint[] memory amounts2\\n  ) internal pure returns (\\n    address[] memory allTokens,\\n    uint[] memory allAmounts\\n  ) {\\n    uint[] memory lens = new uint[](3);\\n    lens[0] = tokens0.length;\\n    lens[1] = tokens1.length;\\n    lens[2] = tokens2.length;\\n\\n    require(\\n      lens[0] == amounts0.length && lens[1] == amounts1.length && lens[2] == amounts2.length,\\n      AppErrors.INCORRECT_LENGTHS\\n    );\\n\\n    uint maxLength = lens[0] + lens[1] + lens[2];\\n    address[] memory tokensOut = new address[](maxLength);\\n    uint[] memory amountsOut = new uint[](maxLength);\\n    uint unitedLength;\\n\\n    for (uint step; step < 3; ++step) {\\n      uint[] memory amounts = step == 0\\n        ? amounts0\\n        : (step == 1\\n          ? amounts1\\n          : amounts2);\\n      address[] memory tokens = step == 0\\n        ? tokens0\\n        : (step == 1\\n          ? tokens1\\n          : tokens2);\\n      for (uint i1 = 0; i1 < lens[step]; i1++) {\\n        uint amount1 = amounts[i1];\\n        address token1 = tokens[i1];\\n        bool united = false;\\n\\n        for (uint i = 0; i < unitedLength; i++) {\\n          if (token1 == tokensOut[i]) {\\n            amountsOut[i] += amount1;\\n            united = true;\\n            break;\\n          }\\n        }\\n\\n        if (!united) {\\n          tokensOut[unitedLength] = token1;\\n          amountsOut[unitedLength] = amount1;\\n          unitedLength++;\\n        }\\n      }\\n    }\\n\\n    // copy united tokens to result array\\n    allTokens = new address[](unitedLength);\\n    allAmounts = new uint[](unitedLength);\\n    for (uint i; i < unitedLength; i++) {\\n      allTokens[i] = tokensOut[i];\\n      allAmounts[i] = amountsOut[i];\\n    }\\n\\n  }\\n}\\n\",\"keccak256\":\"0x6be459b8106584d7f9d3ad9f7a9fe6afa86bc41c5915c2d708715dba75c6174a\",\"license\":\"MIT\"},\"contracts/strategies/ConverterStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyBaseV2.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverterCallback.sol\\\";\\nimport \\\"./ConverterStrategyBaseLib.sol\\\";\\nimport \\\"./ConverterStrategyBaseLib2.sol\\\";\\nimport \\\"./DepositorBase.sol\\\";\\n\\n/////////////////////////////////////////////////////////////////////\\n///                        TERMS\\n///  Main asset == underlying: the asset deposited to the vault by users\\n///  Secondary assets: all assets deposited to the internal pool except the main asset\\n/////////////////////////////////////////////////////////////////////\\n\\n/// @title Abstract contract for base Converter strategy functionality\\n/// @notice All depositor assets must be correlated (ie USDC/USDT/DAI)\\n/// @author bogdoslav, dvpublic\\nabstract contract ConverterStrategyBase is ITetuConverterCallback, DepositorBase, StrategyBaseV2 {\\n  using SafeERC20 for IERC20;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region DATA TYPES\\n  /////////////////////////////////////////////////////////////////////\\n\\n  struct WithdrawUniversalLocal {\\n    bool all;\\n    uint[] reservesBeforeWithdraw;\\n    uint totalSupplyBeforeWithdraw;\\n    uint depositorLiquidity;\\n    uint liquidityAmountToWithdraw;\\n    uint assetPrice;\\n    uint[] amountsToConvert;\\n    uint expectedTotalMainAssetAmount;\\n    uint[] expectedMainAssetAmounts;\\n    uint investedAssetsAfterWithdraw;\\n    uint balanceAfterWithdraw;\\n    address[] tokens;\\n    address asset;\\n    uint indexAsset;\\n    uint balanceBefore;\\n    uint[] withdrawnAmounts;\\n    ITetuConverter converter;\\n  }\\n  //endregion DATA TYPES\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region CONSTANTS\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant CONVERTER_STRATEGY_BASE_VERSION = \\\"1.2.0\\\";\\n\\n  /// @notice 1% gap to cover possible liquidation inefficiency\\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\\n  uint internal constant GAP_CONVERSION = 1_000;\\n  uint internal constant DENOMINATOR = 100_000;\\n  //endregion CONSTANTS\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region VARIABLES\\n  //                Keep names and ordering!\\n  // Add only in the bottom and don't forget to decrease gap variable\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @dev Amount of underlying assets invested to the pool.\\n  uint internal _investedAssets;\\n\\n  /// @dev Linked Tetu Converter\\n  ITetuConverter public converter;\\n\\n  /// @notice Minimum token amounts that can be liquidated\\n  mapping(address => uint) public liquidationThresholds;\\n\\n  /// @notice Percent of asset amount that can be not invested, it's allowed to just keep it on balance\\n  ///         decimals = {DENOMINATOR}\\n  /// @dev We need this threshold to avoid numerous conversions of small amounts\\n  uint public reinvestThresholdPercent;\\n\\n  /// @notice Ratio to split performance fee on toPerf + toInsurance, [0..100_000]\\n  ///         100_000 - send full amount toPerf, 0 - send full amount toInsurance.\\n  uint public performanceFeeRatio;\\n  //endregion VARIABLES\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Events\\n  /////////////////////////////////////////////////////////////////////\\n  event OnDepositorEnter(uint[] amounts, uint[] consumedAmounts);\\n  event OnDepositorExit(uint liquidityAmount, uint[] withdrawnAmounts);\\n  event OnDepositorEmergencyExit(uint[] withdrawnAmounts);\\n  event OnHardWorkEarnedLost(\\n    uint investedAssetsNewPrices,\\n    uint earnedByPrices,\\n    uint earnedHandleRewards,\\n    uint lostHandleRewards,\\n    uint earnedDeposit,\\n    uint lostDeposit\\n  );\\n\\n  /// @notice Recycle was made\\n  /// @param rewardTokens Full list of reward tokens received from tetuConverter and depositor\\n  /// @param amountsToForward Amounts to be sent to forwarder\\n  event Recycle(\\n    address[] rewardTokens,\\n    uint[] amountsToForward,\\n    uint toPerf,\\n    uint toInsurance\\n  );\\n  //endregion Events\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Initialization and configuration\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  function __ConverterStrategyBase_init(\\n    address controller_,\\n    address splitter_,\\n    address converter_\\n  ) internal onlyInitializing {\\n    __StrategyBase_init(controller_, splitter_);\\n    converter = ITetuConverter(converter_);\\n\\n    // 1% by default\\n    reinvestThresholdPercent = DENOMINATOR / 100;\\n    emit ConverterStrategyBaseLib2.ReinvestThresholdPercentChanged(DENOMINATOR / 100);\\n  }\\n\\n  function setLiquidationThreshold(address token, uint amount) external {\\n    ConverterStrategyBaseLib2.checkLiquidationThresholdChanged(controller(), token, amount);\\n    liquidationThresholds[token] = amount;\\n  }\\n\\n  /// @param percent_ New value of the percent, decimals = {REINVEST_THRESHOLD_PERCENT_DENOMINATOR}\\n  function setReinvestThresholdPercent(uint percent_) external {\\n    ConverterStrategyBaseLib2.checkReinvestThresholdPercentChanged(controller(), percent_);\\n    reinvestThresholdPercent = percent_;\\n  }\\n\\n  /// @notice [0..100_000], 100_000 - send full amount toPerf, 0 - send full amount toInsurance.\\n  function setPerformanceFeeRatio(uint ratio_) external {\\n    ConverterStrategyBaseLib2.checkPerformanceFeeRatioChanged(controller(), ratio_);\\n    performanceFeeRatio = ratio_;\\n  }\\n  //endregion Initialization and configuration\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Deposit to the pool\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Amount of underlying assets converted to pool assets and invested to the pool.\\n  function investedAssets() override public view virtual returns (uint) {\\n    return _investedAssets;\\n  }\\n\\n  /// @notice Deposit given amount to the pool.\\n  function _depositToPool(uint amount_, bool updateTotalAssetsBeforeInvest_) override internal virtual returns (\\n    uint strategyLoss\\n  ){\\n    (uint updatedInvestedAssets, uint earnedByPrices) = _fixPriceChanges(updateTotalAssetsBeforeInvest_);\\n    (strategyLoss,) = _depositToPoolUniversal(amount_, earnedByPrices, updatedInvestedAssets);\\n  }\\n\\n  /// @notice Deposit {amount_} to the pool, send {earnedByPrices_} to insurance.\\n  ///         totalAsset will decrease on earnedByPrices_ and sharePrice won't change after all recalculations.\\n  /// @dev We need to deposit {amount_} and withdraw {earnedByPrices_} here\\n  /// @param amount_ Amount of underlying to be deposited\\n  /// @param earnedByPrices_ Profit received because of price changing\\n  /// @param investedAssets_ Invested assets value calculated with updated prices\\n  /// @return strategyLoss Loss happened on the depositing. It doesn't include any price-changing losses\\n  /// @return amountSentToInsurance Price-changing-profit that was sent to the insurance\\n  function _depositToPoolUniversal(uint amount_, uint earnedByPrices_, uint investedAssets_) internal virtual returns (\\n    uint strategyLoss,\\n    uint amountSentToInsurance\\n  ){\\n    address _asset = asset;\\n\\n    uint amountToDeposit = amount_ > earnedByPrices_\\n      ? amount_ - earnedByPrices_\\n      : 0;\\n\\n    // skip deposit for small amounts\\n    if (amountToDeposit > reinvestThresholdPercent * investedAssets_ / DENOMINATOR) {\\n      if (earnedByPrices_ != 0) {\\n        amountSentToInsurance = ConverterStrategyBaseLib2.sendToInsurance(\\n          _asset,\\n          earnedByPrices_,\\n          splitter,\\n          investedAssets_ + AppLib.balance(_asset)\\n        );\\n      }\\n      uint balanceBefore = AppLib.balance(_asset);\\n\\n      (address[] memory tokens, uint indexAsset) = _getTokens(asset);\\n\\n      // prepare array of amounts ready to deposit, borrow missed amounts\\n      uint[] memory amounts = _beforeDeposit(converter, amountToDeposit, tokens, indexAsset);\\n\\n      // make deposit, actually consumed amounts can be different from the desired amounts\\n      (uint[] memory consumedAmounts,) = _depositorEnter(amounts);\\n      emit OnDepositorEnter(amounts, consumedAmounts);\\n\\n      // update _investedAssets with new deposited amount\\n      uint updatedInvestedAssetsAfterDeposit = _updateInvestedAssets();\\n      // after deposit some asset can exist\\n      uint balanceAfter = AppLib.balance(_asset);\\n      // we need to compensate difference if during deposit we lost some assets\\n      if ((updatedInvestedAssetsAfterDeposit + balanceAfter) < (investedAssets_ + balanceBefore)) {\\n        strategyLoss = (investedAssets_ + balanceBefore) - (updatedInvestedAssetsAfterDeposit + balanceAfter);\\n      }\\n    } else if (earnedByPrices_ != 0) {\\n      // we just skip check of expectedWithdrewUSD here\\n      uint balance = AppLib.balance(_asset);\\n      if (balance < earnedByPrices_) {\\n        (/* expectedWithdrewUSD */,, strategyLoss, amountSentToInsurance) = _withdrawUniversal(0, earnedByPrices_, investedAssets_);\\n      } else {\\n        amountSentToInsurance = ConverterStrategyBaseLib2.sendToInsurance(\\n          _asset,\\n          earnedByPrices_,\\n          splitter,\\n          investedAssets_ + balance\\n        );\\n      }\\n    }\\n\\n    return (strategyLoss, amountSentToInsurance);\\n  }\\n  //endregion Deposit to the pool\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Convert amounts before deposit\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Prepare {tokenAmounts} to be passed to depositorEnter\\n  /// @dev Override this function to customize entry kind\\n  /// @param amount_ The amount of main asset that should be invested\\n  /// @param tokens_ Results of _depositorPoolAssets() call (list of depositor's asset in proper order)\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\n  /// @return tokenAmounts Amounts of depositor's assets ready to invest (this array can be passed to depositorEnter)\\n  function _beforeDeposit(\\n    ITetuConverter tetuConverter_,\\n    uint amount_,\\n    address[] memory tokens_,\\n    uint indexAsset_\\n  ) internal virtual returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    // calculate required collaterals for each token and temporary save them to tokenAmounts\\n    (uint[] memory weights, uint totalWeight) = _depositorPoolWeights();\\n\\n    // temporary save collateral to tokensAmounts\\n    tokenAmounts = ConverterStrategyBaseLib2.getCollaterals(\\n      amount_,\\n      tokens_,\\n      weights,\\n      totalWeight,\\n      indexAsset_,\\n      IPriceOracle(IConverterController(tetuConverter_.controller()).priceOracle())\\n    );\\n\\n    // make borrow and save amounts of tokens available for deposit to tokenAmounts, zero result amounts are possible\\n    tokenAmounts = ConverterStrategyBaseLib.getTokenAmounts(\\n      tetuConverter_,\\n      tokens_,\\n      indexAsset_,\\n      tokenAmounts,\\n      liquidationThresholds[tokens_[indexAsset_]]\\n    );\\n  }\\n  //endregion Convert amounts before deposit\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Withdraw from the pool\\n  /////////////////////////////////////////////////////////////////////\\n\\n  function _beforeWithdraw(uint /*amount*/) internal virtual {\\n    // do nothing\\n  }\\n\\n  /// @notice Withdraw given amount from the pool.\\n  /// @param amount Amount to be withdrawn in terms of the asset in addition to the exist balance.\\n  /// @return expectedWithdrewUSD The value that we should receive after withdrawing (in USD, decimals of the {asset})\\n  /// @return assetPrice Price of the {asset} from the price oracle\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _withdrawFromPool(uint amount) override internal virtual returns (\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    uint strategyLoss\\n  ) {\\n    // calculate profit/loss because of price changes, try to compensate the loss from the insurance\\n    (uint investedAssetsNewPrices, uint earnedByPrices) = _fixPriceChanges(true);\\n    (expectedWithdrewUSD, assetPrice, strategyLoss,) = _withdrawUniversal(amount, earnedByPrices, investedAssetsNewPrices);\\n  }\\n\\n  /// @notice Withdraw all from the pool.\\n  /// @return expectedWithdrewUSD The value that we should receive after withdrawing\\n  /// @return assetPrice Price of the {asset} taken from the price oracle\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _withdrawAllFromPool() override internal virtual returns (\\n    uint expectedWithdrewUSD,\\n    uint assetPrice,\\n    uint strategyLoss\\n  ) {\\n    return _withdrawFromPool(type(uint).max);\\n  }\\n\\n  /// @param amount Amount to be trying to withdrawn. Max uint means attempt to withdraw all possible invested assets.\\n  /// @param earnedByPrices_ Additional amount that should be withdrawn and send to the insurance\\n  /// @param investedAssets_ Value of invested assets recalculated using current prices\\n  /// @return expectedWithdrewUSD The value that we should receive after withdrawing in terms of USD value of each asset in the pool\\n  /// @return __assetPrice Price of the {asset} taken from the price oracle\\n  /// @return strategyLoss Loss before withdrawing: [new-investedAssets - old-investedAssets]\\n  /// @return amountSentToInsurance Actual amount of underlying sent to the insurance\\n  function _withdrawUniversal(uint amount, uint earnedByPrices_, uint investedAssets_) internal returns (\\n    uint expectedWithdrewUSD,\\n    uint __assetPrice,\\n    uint strategyLoss,\\n    uint amountSentToInsurance\\n  ) {\\n    _beforeWithdraw(amount);\\n\\n    WithdrawUniversalLocal memory v;\\n    v.all = amount == type(uint).max;\\n    strategyLoss = 0;\\n\\n    if ((v.all || amount + earnedByPrices_ != 0) && investedAssets_ != 0) {\\n\\n      // --- init variables ---\\n      v.tokens = _depositorPoolAssets();\\n      v.asset = asset;\\n      v.converter = converter;\\n      v.indexAsset = ConverterStrategyBaseLib.getAssetIndex(v.tokens, v.asset);\\n      v.balanceBefore = AppLib.balance(v.asset);\\n\\n      v.reservesBeforeWithdraw = _depositorPoolReserves();\\n      v.totalSupplyBeforeWithdraw = _depositorTotalSupply();\\n      v.depositorLiquidity = _depositorLiquidity();\\n      v.assetPrice = ConverterStrategyBaseLib.getAssetPriceFromConverter(v.converter, v.asset);\\n      // -----------------------\\n\\n      // calculate how much liquidity we need to withdraw for getting the requested amount\\n      (v.liquidityAmountToWithdraw, v.amountsToConvert) = ConverterStrategyBaseLib2.getLiquidityAmount(\\n        v.all ? 0 : amount + earnedByPrices_,\\n        address(this),\\n        v.tokens,\\n        v.indexAsset,\\n        v.converter,\\n        investedAssets_,\\n        v.depositorLiquidity\\n      );\\n\\n      if (v.liquidityAmountToWithdraw != 0) {\\n\\n        // =============== WITHDRAW =====================\\n        // make withdraw\\n        v.withdrawnAmounts = _depositorExit(v.liquidityAmountToWithdraw);\\n        // the depositor is able to use less liquidity than it was asked, i.e. Balancer-depositor leaves some BPT unused\\n        // use what exactly was withdrew instead of the expectation\\n        // assume that liquidity cannot increase in _depositorExit\\n        v.liquidityAmountToWithdraw = v.depositorLiquidity - _depositorLiquidity();\\n        emit OnDepositorExit(v.liquidityAmountToWithdraw, v.withdrawnAmounts);\\n        // ==============================================\\n\\n        // we need to call expectation after withdraw for calculate it based on the real liquidity amount that was withdrew\\n        // it should be called BEFORE the converter will touch our positions coz we need to call quote the estimations\\n        // amountsToConvert should contains amounts was withdrawn from the pool and amounts received from the converter\\n        (v.expectedMainAssetAmounts, v.amountsToConvert) = ConverterStrategyBaseLib.postWithdrawActions(\\n          v.converter,\\n          v.tokens,\\n          v.indexAsset,\\n          v.reservesBeforeWithdraw,\\n          v.liquidityAmountToWithdraw,\\n          v.totalSupplyBeforeWithdraw,\\n          v.amountsToConvert,\\n          v.withdrawnAmounts\\n        );\\n      } else {\\n        // we don't need to withdraw any amounts from the pool, available converted amounts are enough for us\\n        v.expectedMainAssetAmounts = ConverterStrategyBaseLib.postWithdrawActionsEmpty(\\n          v.converter,\\n          v.tokens,\\n          v.indexAsset,\\n          v.amountsToConvert\\n        );\\n      }\\n\\n      // convert amounts to main asset\\n      // it is safe to use amountsToConvert from expectation - we will try to repay only necessary amounts\\n      v.expectedTotalMainAssetAmount += ConverterStrategyBaseLib.makeRequestedAmount(\\n        v.tokens,\\n        v.indexAsset,\\n        v.amountsToConvert,\\n        v.converter,\\n        _getLiquidator(controller()),\\n        v.all ? amount : amount + earnedByPrices_,\\n        v.expectedMainAssetAmounts,\\n        liquidationThresholds\\n      );\\n\\n      if (earnedByPrices_ != 0) {\\n        amountSentToInsurance = ConverterStrategyBaseLib2.sendToInsurance(\\n          v.asset,\\n          earnedByPrices_,\\n          splitter,\\n          investedAssets_ + v.balanceBefore\\n        );\\n      }\\n\\n      v.investedAssetsAfterWithdraw = _updateInvestedAssets();\\n      v.balanceAfterWithdraw = AppLib.balance(v.asset);\\n\\n      // we need to compensate difference if during withdraw we lost some assets\\n      if ((v.investedAssetsAfterWithdraw + v.balanceAfterWithdraw + earnedByPrices_) < (investedAssets_ + v.balanceBefore)) {\\n        strategyLoss += (investedAssets_ + v.balanceBefore) - (v.investedAssetsAfterWithdraw + v.balanceAfterWithdraw + earnedByPrices_);\\n      }\\n\\n      return (\\n        v.expectedTotalMainAssetAmount * v.assetPrice / 1e18,\\n        v.assetPrice,\\n        strategyLoss,\\n        amountSentToInsurance\\n      );\\n    }\\n    return (0, 0, 0, 0);\\n  }\\n\\n  /// @notice If pool supports emergency withdraw need to call it for emergencyExit()\\n  function _emergencyExitFromPool() override internal virtual {\\n    uint[] memory withdrawnAmounts = _depositorEmergencyExit();\\n    emit OnDepositorEmergencyExit(withdrawnAmounts);\\n\\n    // convert amounts to main asset\\n    (address[] memory tokens, uint indexAsset) = _getTokens(asset);\\n    ConverterStrategyBaseLib.closePositionsToGetAmount(\\n      converter,\\n      _getLiquidator(controller()),\\n      indexAsset,\\n      liquidationThresholds,\\n      type(uint).max,\\n      tokens\\n    );\\n\\n    // adjust _investedAssets\\n    _updateInvestedAssets();\\n  }\\n  //endregion Withdraw from the pool\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Claim rewards\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Claim all possible rewards.\\n  function _claim() override internal virtual returns (address[] memory rewardTokensOut, uint[] memory amountsOut) {\\n    // get rewards from the Depositor\\n    (address[] memory rewardTokens, uint[] memory rewardAmounts, uint[] memory balancesBefore) = _depositorClaimRewards();\\n\\n    (rewardTokensOut, amountsOut) = ConverterStrategyBaseLib2.claimConverterRewards(\\n      converter,\\n      _depositorPoolAssets(),\\n      rewardTokens,\\n      rewardAmounts,\\n      balancesBefore\\n    );\\n  }\\n\\n  /// @dev Call recycle process and send tokens to forwarder.\\n  ///      Need to be separated from the claim process - the claim can be called by operator for other purposes.\\n  function _rewardsLiquidation(address[] memory rewardTokens, uint[] memory amounts) internal {\\n    uint len = rewardTokens.length;\\n    if (len > 0) {\\n      uint[] memory amountsToForward = _recycle(rewardTokens, amounts);\\n\\n      // send forwarder-part of the rewards to the forwarder\\n      ConverterStrategyBaseLib2.sendTokensToForwarder(controller(), splitter, rewardTokens, amountsToForward);\\n    }\\n  }\\n\\n  /// @notice Recycle the amounts: liquidate a part of each amount, send the other part to the forwarder.\\n  /// We have two kinds of rewards:\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\n  /// 2) any other rewards\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\n  ///   Compound-part of Rewards-2 can be liquidated\\n  ///   Compound part of Rewards-1 should be just left on the balance\\n  ///   Performance amounts should be liquidate, result underlying should be sent to performance receiver and insurance.\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\n  /// @dev {_recycle} is implemented as separate (inline) function to simplify unit testing\\n  /// @param rewardTokens_ Full list of reward tokens received from tetuConverter and depositor\\n  /// @param rewardAmounts_ Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\n  /// @return amountsToForward Amounts to be sent to forwarder\\n  function _recycle(address[] memory rewardTokens_, uint[] memory rewardAmounts_) internal returns (\\n    uint[] memory amountsToForward\\n  ) {\\n    address _asset = asset; // save gas\\n\\n    uint amountPerf; // total amount for the performance receiver and insurance\\n    (amountsToForward, amountPerf) = ConverterStrategyBaseLib.recycle(\\n      converter,\\n      _asset,\\n      compoundRatio,\\n      _depositorPoolAssets(),\\n      _getLiquidator(controller()),\\n      liquidationThresholds,\\n      rewardTokens_,\\n      rewardAmounts_,\\n      performanceFee\\n    );\\n\\n    // send performance-part of the underlying to the performance receiver and insurance\\n    (uint toPerf, uint toInsurance) = ConverterStrategyBaseLib2.sendPerformanceFee(\\n      _asset,\\n      amountPerf,\\n      splitter,\\n      performanceReceiver,\\n      performanceFeeRatio\\n    );\\n\\n    emit Recycle(rewardTokens_, amountsToForward, toPerf, toInsurance);\\n  }\\n  //endregion Claim rewards\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Hardwork\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice A virtual handler to make any action before hardwork\\n  function _preHardWork(bool reInvest) internal virtual {}\\n\\n  /// @notice A virtual handler to make any action after hardwork\\n  function _postHardWork() internal virtual {}\\n\\n  /// @notice Is strategy ready to hard work\\n  function isReadyToHardWork() override external virtual view returns (bool) {\\n    // check claimable amounts and compare with thresholds\\n    return true;\\n  }\\n\\n  /// @notice Do hard work with reinvesting\\n  /// @return earned Earned amount in terms of {asset}\\n  /// @return lost Lost amount in terms of {asset}\\n  function doHardWork() override public returns (uint earned, uint lost) {\\n    require(msg.sender == splitter, StrategyLib.DENIED);\\n    return _doHardWork(true);\\n  }\\n\\n  /// @notice Claim rewards, do _processClaims() after claiming, calculate earned and lost amounts\\n  function _handleRewards() internal virtual returns (uint earned, uint lost, uint assetBalanceAfterClaim);\\n\\n  /// @param reInvest Deposit to pool all available amount if it's greater than the threshold\\n  /// @return earned Earned amount in terms of {asset}\\n  /// @return lost Lost amount in terms of {asset}\\n  function _doHardWork(bool reInvest) internal returns (uint earned, uint lost) {\\n    // ATTENTION! splitter will not cover the loss if it is lower than profit\\n    (uint investedAssetsNewPrices, uint earnedByPrices) = _fixPriceChanges(true);\\n\\n    _preHardWork(reInvest);\\n\\n    // claim rewards and get current asset balance\\n    uint assetBalance;\\n    (earned, lost, assetBalance) = _handleRewards();\\n\\n    // re-invest income\\n    (, uint amountSentToInsurance) = _depositToPoolUniversal(\\n      reInvest\\n      && investedAssetsNewPrices != 0\\n      && assetBalance > reinvestThresholdPercent * investedAssetsNewPrices / DENOMINATOR\\n        ? assetBalance\\n        : 0,\\n      earnedByPrices,\\n      investedAssetsNewPrices\\n    );\\n    (uint earned2, uint lost2) = ConverterStrategyBaseLib.registerIncome(\\n      investedAssetsNewPrices + assetBalance, // assets in use before deposit\\n      _investedAssets + AppLib.balance(asset) + amountSentToInsurance // assets in use after deposit\\n    );\\n\\n    _postHardWork();\\n\\n    emit OnHardWorkEarnedLost(investedAssetsNewPrices, earnedByPrices, earned, lost, earned2, lost2);\\n    return (earned + earned2, lost + lost2);\\n  }\\n  //endregion Hardwork\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region InvestedAssets Calculations\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Updates cached _investedAssets to actual value\\n  /// @dev Should be called after deposit / withdraw / claim; virtual - for ut\\n  function _updateInvestedAssets() internal returns (uint investedAssetsOut) {\\n    investedAssetsOut = _calcInvestedAssets();\\n    _investedAssets = investedAssetsOut;\\n  }\\n\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\n  /// @return Invested asset amount under control (in terms of {asset})\\n  function _calcInvestedAssets() internal returns (uint) {\\n    (address[] memory tokens, uint indexAsset) = _getTokens(asset);\\n    return ConverterStrategyBaseLib.calcInvestedAssets(\\n      tokens,\\n      // quote exit should check zero liquidity\\n      _depositorQuoteExit(_depositorLiquidity()),\\n      indexAsset,\\n      converter\\n    );\\n  }\\n\\n  function calcInvestedAssets() external returns (uint) {\\n    StrategyLib.onlyOperators(controller());\\n    return _calcInvestedAssets();\\n  }\\n\\n  /// @notice Calculate profit/loss happened because of price changing. Try to cover the loss, send the profit to the insurance\\n  /// @param updateInvestedAssetsAmount_ If false - just return current value of invested assets\\n  /// @return investedAssetsOut Updated value of {_investedAssets}\\n  /// @return earnedOut Profit that was received because of price changes. It should be sent back to insurance.\\n  ///                   It's to dangerous to get this to try to get this amount here because of the problem \\\"borrow-repay is not allowed in a single block\\\"\\n  ///                   So, we need to handle it in the caller code.\\n  function _fixPriceChanges(bool updateInvestedAssetsAmount_) internal returns (uint investedAssetsOut, uint earnedOut) {\\n    if (updateInvestedAssetsAmount_) {\\n      uint investedAssetsBefore = _investedAssets;\\n      investedAssetsOut = _updateInvestedAssets();\\n      earnedOut = ConverterStrategyBaseLib.coverPossibleStrategyLoss(investedAssetsBefore, investedAssetsOut, splitter);\\n    } else {\\n      investedAssetsOut = _investedAssets;\\n      earnedOut = 0;\\n    }\\n  }\\n  //endregion InvestedAssets Calculations\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region ITetuConverterCallback\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Converters asks to send some amount back.\\n  /// @param theAsset_ Required asset (either collateral or borrow)\\n  /// @param amount_ Required amount of the {theAsset_}\\n  /// @return amountOut Amount sent to balance of TetuConverter, amountOut <= amount_\\n  function requirePayAmountBack(address theAsset_, uint amount_) external override returns (uint amountOut) {\\n    address __converter = address(converter);\\n    require(msg.sender == __converter, StrategyLib.DENIED);\\n\\n    // detect index of the target asset\\n    (address[] memory tokens, uint indexTheAsset) = _getTokens(theAsset_);\\n    // get amount of target asset available to be sent\\n    uint balance = AppLib.balance(theAsset_);\\n\\n    // withdraw from the pool if not enough\\n    if (balance < amount_) {\\n      // the strategy doesn't have enough target asset on balance\\n      // withdraw all from the pool but don't convert assets to underlying\\n      uint liquidity = _depositorLiquidity();\\n      if (liquidity != 0) {\\n        uint[] memory withdrawnAmounts = _depositorExit(liquidity);\\n        emit OnDepositorExit(liquidity, withdrawnAmounts);\\n      }\\n    }\\n\\n    amountOut = ConverterStrategyBaseLib.swapToGivenAmountAndSendToConverter(\\n      amount_,\\n      indexTheAsset,\\n      tokens,\\n      __converter,\\n      controller(),\\n      asset,\\n      liquidationThresholds\\n    );\\n\\n    // update invested assets anyway, even if we suppose it will be called in other places\\n    _updateInvestedAssets();\\n  }\\n\\n  /// @notice TetuConverter calls this function when it sends any amount to user's balance\\n  /// @param assets_ Any asset sent to the balance, i.e. inside repayTheBorrow\\n  /// @param amounts_ Amount of {asset_} that has been sent to the user's balance\\n  function onTransferAmounts(address[] memory assets_, uint[] memory amounts_) external override {\\n    require(msg.sender == address(converter), StrategyLib.DENIED);\\n\\n    uint len = assets_.length;\\n    require(len == amounts_.length, AppErrors.INCORRECT_LENGTHS);\\n\\n    // TetuConverter is able two call this function in two cases:\\n    // 1) rebalancing (the health factor of some borrow is too low)\\n    // 2) forcible closing of the borrow\\n    // In both cases we update invested assets value here\\n    // and avoid fixing any related losses in hardwork\\n    _updateInvestedAssets();\\n  }\\n  //endregion ITetuConverterCallback\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Others\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Unlimited capacity by default\\n  function capacity() external virtual view returns (uint) {\\n    return 2 ** 255;\\n    // almost same as type(uint).max but more gas efficient\\n  }\\n\\n  function _getTokens(address asset_) internal view returns (address[] memory tokens, uint indexAsset) {\\n    tokens = _depositorPoolAssets();\\n    indexAsset = ConverterStrategyBaseLib.getAssetIndex(tokens, asset_);\\n    require(indexAsset != type(uint).max, StrategyLib.WRONG_VALUE);\\n  }\\n\\n  function _getLiquidator(address controller_) internal view returns (ITetuLiquidator) {\\n    return ITetuLiquidator(IController(controller_).liquidator());\\n  }\\n  //endregion Others\\n\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to add new\\n  /// variables without shifting down storage in the inheritance chain.\\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint[50 - 5] private __gap; // 50 - count of variables\\n\\n}\\n\",\"keccak256\":\"0x6e4e75ca8eeac76fb6730418e423797d2c6e59a93f31e311002a8f352cdb13d3\",\"license\":\"MIT\"},\"contracts/strategies/ConverterStrategyBaseLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IConverterController.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"../libs/AppErrors.sol\\\";\\nimport \\\"../libs/AppLib.sol\\\";\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\n\\nlibrary ConverterStrategyBaseLib {\\n  using SafeERC20 for IERC20;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Data types\\n  /////////////////////////////////////////////////////////////////////\\n  /// @notice Local vars for {_recycle}, workaround for stack too deep\\n  struct RecycleLocalParams {\\n    /// @notice Compound amount + Performance amount\\n    uint amountCP;\\n    /// @notice Amount to compound\\n    uint amountC;\\n    /// @notice Amount to send to performance and insurance\\n    uint amountP;\\n    /// @notice Amount to forwarder + amount to compound\\n    uint amountFC;\\n    address rewardToken;\\n    uint liquidationThresholdAsset;\\n    uint len;\\n    uint receivedAmountOut;\\n  }\\n\\n  struct OpenPositionLocal {\\n    uint entryKind;\\n    address[] converters;\\n    uint[] collateralsRequired;\\n    uint[] amountsToBorrow;\\n    uint collateral;\\n    uint amountToBorrow;\\n  }\\n\\n  struct OpenPositionEntryKind1Local {\\n    address[] converters;\\n    uint[] collateralsRequired;\\n    uint[] amountsToBorrow;\\n    uint collateral;\\n    uint amountToBorrow;\\n    uint c1;\\n    uint c3;\\n    uint ratio;\\n    uint alpha;\\n  }\\n\\n  struct CalcInvestedAssetsLocal {\\n    uint len;\\n    uint[] prices;\\n    uint[] decs;\\n    uint[] debts;\\n  }\\n\\n  struct ConvertAfterWithdrawLocal {\\n    address asset;\\n    uint collateral;\\n    uint spent;\\n    uint received;\\n    uint balance;\\n    uint balanceBefore;\\n    uint len;\\n  }\\n\\n  struct SwapToGivenAmountInputParams {\\n    uint targetAmount;\\n    address[] tokens;\\n    uint indexTargetAsset;\\n    address underlying;\\n    uint[] amounts;\\n    ITetuConverter converter;\\n    ITetuLiquidator liquidator;\\n    uint liquidationThresholdForTargetAsset;\\n    /// @notice Allow to swap more then required (i.e. 1_000 => +1%)\\n    ///         to avoid additional swap if the swap return amount a bit less than we expected\\n    uint overswap;\\n  }\\n\\n  struct SwapToGivenAmountLocal {\\n    uint len;\\n    uint[] availableAmounts;\\n    uint i;\\n  }\\n\\n  struct CloseDebtsForRequiredAmountLocal {\\n    uint len;\\n    address asset;\\n    uint collateral;\\n    uint spentAmountIn;\\n    uint receivedAmount;\\n    uint balance;\\n    uint[] tokensBalancesBefore;\\n\\n    uint totalDebt;\\n    uint totalCollateral;\\n\\n    /// @notice Cost of $1 in terms of the assets, decimals 18\\n    uint[] prices;\\n    /// @notice 10**decimal for the assets\\n    uint[] decs;\\n\\n    uint newBalance;\\n  }\\n  //endregion Data types\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Constants\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice approx one month for average block time 2 sec\\n  uint internal constant _LOAN_PERIOD_IN_BLOCKS = 30 days / 2;\\n  uint internal constant _REWARD_LIQUIDATION_SLIPPAGE = 5_000; // 5%\\n  uint internal constant COMPOUND_DENOMINATOR = 100_000;\\n  uint internal constant DENOMINATOR = 100_000;\\n  uint internal constant _ASSET_LIQUIDATION_SLIPPAGE = 300;\\n  uint internal constant PRICE_IMPACT_TOLERANCE = 300;\\n  /// @notice borrow/collateral amount cannot be less than given number of tokens\\n  uint internal constant DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD = 10;\\n  /// @notice Allow to swap more then required (i.e. 1_000 => +1%) inside {swapToGivenAmount}\\n  ///         to avoid additional swap if the swap will return amount a bit less than we expected\\n  uint internal constant OVERSWAP = PRICE_IMPACT_TOLERANCE + _ASSET_LIQUIDATION_SLIPPAGE;\\n  /// @dev Absolute value for any token\\n  uint internal constant DEFAULT_LIQUIDATION_THRESHOLD = 100_000;\\n  /// @notice 1% gap to cover possible liquidation inefficiency\\n  /// @dev We assume that: conversion-result-calculated-by-prices - liquidation-result <= the-gap\\n  uint internal constant GAP_CONVERSION = 1_000;\\n  //endregion Constants\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Events\\n  /////////////////////////////////////////////////////////////////////\\n  /// @notice A borrow was made\\n  event OpenPosition(\\n    address converter,\\n    address collateralAsset,\\n    uint collateralAmount,\\n    address borrowAsset,\\n    uint borrowedAmount,\\n    address recepient\\n  );\\n\\n  /// @notice Some borrow(s) was/were repaid\\n  event ClosePosition(\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountRepay,\\n    address recepient,\\n    uint returnedAssetAmountOut,\\n    uint returnedBorrowAmountOut\\n  );\\n\\n  /// @notice A liquidation was made\\n  event Liquidation(\\n    address tokenIn,\\n    address tokenOut,\\n    uint amountIn,\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  );\\n\\n  event ReturnAssetToConverter(address asset, uint amount);\\n\\n  event FixPriceChanges(uint investedAssetsBefore, uint investedAssetsOut);\\n  //endregion Events\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region View functions\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Get amount of assets that we expect to receive after withdrawing\\n  ///         ratio = amount-LP-tokens-to-withdraw / total-amount-LP-tokens-in-pool\\n  /// @param reserves_ Reserves of the {poolAssets_}, same order, same length (we don't check it)\\n  ///                  The order of tokens should be same as in {_depositorPoolAssets()},\\n  ///                  one of assets must be {asset_}\\n  /// @param liquidityAmount_ Amount of LP tokens that we are going to withdraw\\n  /// @param totalSupply_ Total amount of LP tokens in the depositor\\n  /// @return withdrawnAmountsOut Expected withdrawn amounts (decimals == decimals of the tokens)\\n  function getExpectedWithdrawnAmounts(\\n    uint[] memory reserves_,\\n    uint liquidityAmount_,\\n    uint totalSupply_\\n  ) internal pure returns (\\n    uint[] memory withdrawnAmountsOut\\n  ) {\\n    uint ratio = totalSupply_ == 0\\n      ? 0\\n      : (liquidityAmount_ >= totalSupply_\\n        ? 1e18\\n        : 1e18 * liquidityAmount_ / totalSupply_\\n      );\\n\\n    uint len = reserves_.length;\\n    withdrawnAmountsOut = new uint[](len);\\n\\n    if (ratio != 0) {\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        withdrawnAmountsOut[i] = reserves_[i] * ratio / 1e18;\\n      }\\n    }\\n  }\\n\\n  /// @return prices Asset prices in USD, decimals 18\\n  /// @return decs 10**decimals\\n  function _getPricesAndDecs(IPriceOracle priceOracle, address[] memory tokens_, uint len) internal view returns (\\n    uint[] memory prices,\\n    uint[] memory decs\\n  ) {\\n    prices = new uint[](len);\\n    decs = new uint[](len);\\n    {\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\\n        prices[i] = priceOracle.getAssetPrice(tokens_[i]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Find index of the given {asset_} in array {tokens_}, return type(uint).max if not found\\n  function getAssetIndex(address[] memory tokens_, address asset_) internal pure returns (uint) {\\n    uint len = tokens_.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (tokens_[i] == asset_) {\\n        return i;\\n      }\\n    }\\n    return type(uint).max;\\n  }\\n\\n  /// @notice Get the price ratio of the two given tokens from the oracle.\\n  /// @param converter The Tetu converter.\\n  /// @param tokenA The first token address.\\n  /// @param tokenB The second token address.\\n  /// @return The price ratio of the two tokens.\\n  function getOracleAssetsPrice(ITetuConverter converter, address tokenA, address tokenB) external view returns (uint) {\\n    IPriceOracle oracle = IPriceOracle(IConverterController(converter.controller()).priceOracle());\\n    uint priceA = oracle.getAssetPrice(tokenA);\\n    uint priceB = oracle.getAssetPrice(tokenB);\\n    return priceB * 1e18 / priceA;\\n  }\\n  //endregion View functions\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Borrow and close positions\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\n  ///         Max possible collateral should be approved before calling of this function.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\n  function openPosition(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint thresholdAmountIn_\\n  ) external returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    return _openPosition(tetuConverter_, entryData_, collateralAsset_, borrowAsset_, amountIn_, thresholdAmountIn_);\\n  }\\n\\n  /// @notice Make one or several borrow necessary to supply/borrow required {amountIn_} according to {entryData_}\\n  ///         Max possible collateral should be approved before calling of this function.\\n  /// @param entryData_ Encoded entry kind and additional params if necessary (set of params depends on the kind)\\n  ///                   See TetuConverter\\\\EntryKinds.sol\\\\ENTRY_KIND_XXX constants for possible entry kinds\\n  ///                   0 or empty: Amount of collateral {amountIn_} is fixed, amount of borrow should be max possible.\\n  /// @param amountIn_ Meaning depends on {entryData_}.\\n  /// @param thresholdAmountIn_ Min value of amountIn allowed for the second and subsequent conversions.\\n  ///        0 - use default min value\\n  ///        If amountIn becomes too low, no additional borrows are possible, so\\n  ///        the rest amountIn is just added to collateral/borrow amount of previous conversion.\\n  function _openPosition(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint thresholdAmountIn_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    if (thresholdAmountIn_ == 0) {\\n      // zero threshold is not allowed because round-issues are possible, see openPosition.dust test\\n      // we assume here, that it's useless to borrow amount using collateral/borrow amount\\n      // less than given number of tokens (event for BTC)\\n      thresholdAmountIn_ = DEFAULT_OPEN_POSITION_AMOUNT_IN_THRESHOLD;\\n    }\\n    if (amountIn_ <= thresholdAmountIn_) {\\n      return (0, 0);\\n    }\\n\\n    OpenPositionLocal memory vars;\\n    // we assume here, that max possible collateral amount is already approved (as it's required by TetuConverter)\\n    vars.entryKind = ConverterEntryKinds.getEntryKind(entryData_);\\n    if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_PROPORTION_1) {\\n      return openPositionEntryKind1(\\n        tetuConverter_,\\n        entryData_,\\n        collateralAsset_,\\n        borrowAsset_,\\n        amountIn_,\\n        thresholdAmountIn_\\n      );\\n    } else {\\n      (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\n        entryData_,\\n        collateralAsset_,\\n        amountIn_,\\n        borrowAsset_,\\n        _LOAN_PERIOD_IN_BLOCKS\\n      );\\n\\n      uint len = vars.converters.length;\\n      if (len > 0) {\\n        for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n          // we need to approve collateralAmount before the borrow-call but it's already approved, see above comments\\n          vars.collateral;\\n          vars.amountToBorrow;\\n          if (vars.entryKind == ConverterEntryKinds.ENTRY_KIND_EXACT_COLLATERAL_IN_FOR_MAX_BORROW_OUT_0) {\\n            // we have exact amount of total collateral amount\\n            // Case ENTRY_KIND_EXACT_PROPORTION_1 is here too because we consider first platform only\\n            vars.collateral = amountIn_ < vars.collateralsRequired[i]\\n              ? amountIn_\\n              : vars.collateralsRequired[i];\\n            vars.amountToBorrow = amountIn_ < vars.collateralsRequired[i]\\n              ? vars.amountsToBorrow[i] * amountIn_ / vars.collateralsRequired[i]\\n              : vars.amountsToBorrow[i];\\n            amountIn_ -= vars.collateral;\\n          } else {\\n            // assume here that entryKind == EntryKinds.ENTRY_KIND_EXACT_BORROW_OUT_FOR_MIN_COLLATERAL_IN_2\\n            // we have exact amount of total amount-to-borrow\\n            vars.amountToBorrow = amountIn_ < vars.amountsToBorrow[i]\\n              ? amountIn_\\n              : vars.amountsToBorrow[i];\\n            vars.collateral = amountIn_ < vars.amountsToBorrow[i]\\n              ? vars.collateralsRequired[i] * amountIn_ / vars.amountsToBorrow[i]\\n              : vars.collateralsRequired[i];\\n            amountIn_ -= vars.amountToBorrow;\\n          }\\n\\n          if (amountIn_ < thresholdAmountIn_ && amountIn_ != 0) {\\n            // dust amount is left, just leave it unused\\n            // we cannot add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\n            amountIn_ = 0;\\n          }\\n\\n          if (vars.amountToBorrow != 0) {\\n            borrowedAmountOut += tetuConverter_.borrow(\\n              vars.converters[i],\\n              collateralAsset_,\\n              vars.collateral,\\n              borrowAsset_,\\n              vars.amountToBorrow,\\n              address(this)\\n            );\\n            collateralAmountOut += vars.collateral;\\n            emit OpenPosition(\\n              vars.converters[i],\\n              collateralAsset_,\\n              vars.collateral,\\n              borrowAsset_,\\n              vars.amountToBorrow,\\n              address(this)\\n            );\\n          }\\n\\n          if (amountIn_ == 0) break;\\n        }\\n      }\\n\\n      return (collateralAmountOut, borrowedAmountOut);\\n    }\\n  }\\n\\n  /// @notice Open position using entry kind 1 - split provided amount on two parts according provided proportions\\n  /// @param amountIn_ Amount of collateral to be divided on parts. We assume {amountIn_} > 0\\n  /// @param collateralThreshold_ Min allowed collateral amount to be used for new borrow, > 0\\n  /// @return collateralAmountOut Total collateral used to borrow {borrowedAmountOut}\\n  /// @return borrowedAmountOut Total borrowed amount\\n  function openPositionEntryKind1(\\n    ITetuConverter tetuConverter_,\\n    bytes memory entryData_,\\n    address collateralAsset_,\\n    address borrowAsset_,\\n    uint amountIn_,\\n    uint collateralThreshold_\\n  ) internal returns (\\n    uint collateralAmountOut,\\n    uint borrowedAmountOut\\n  ) {\\n    OpenPositionEntryKind1Local memory vars;\\n    (vars.converters, vars.collateralsRequired, vars.amountsToBorrow,) = tetuConverter_.findBorrowStrategies(\\n      entryData_,\\n      collateralAsset_,\\n      amountIn_,\\n      borrowAsset_,\\n      _LOAN_PERIOD_IN_BLOCKS\\n    );\\n\\n    uint len = vars.converters.length;\\n    if (len > 0) {\\n      // we should split amountIn on two amounts with proportions x:y\\n      (, uint x, uint y) = abi.decode(entryData_, (uint, uint, uint));\\n      // calculate prices conversion ratio using price oracle, decimals 18\\n      // i.e. alpha = 1e18 * 75e6 usdc / 25e18 matic = 3e6 usdc/matic\\n      vars.alpha = _getCollateralToBorrowRatio(tetuConverter_, collateralAsset_, borrowAsset_);\\n\\n      for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n        // the lending platform allows to convert {collateralsRequired[i]} to {amountsToBorrow[i]}\\n        // and give us required proportions in result\\n        // C = C1 + C2, C2 => B2, B2 * alpha = C3, C1/C3 must be equal to x/y\\n        // C1 is collateral amount left untouched (x)\\n        // C2 is collateral amount converted to B2 (y)\\n        // but if lending platform doesn't have enough liquidity\\n        // it reduces {collateralsRequired[i]} and {amountsToBorrow[i]} proportionally to fit the limits\\n        // as result, remaining C1 will be too big after conversion and we need to make another borrow\\n        vars.c3 = vars.alpha * vars.amountsToBorrow[i] / 1e18;\\n        vars.c1 = x * vars.c3 / y;\\n        vars.ratio = (vars.collateralsRequired[i] + vars.c1) > amountIn_\\n          ? 1e18 * amountIn_ / (vars.collateralsRequired[i] + vars.c1)\\n          : 1e18;\\n\\n        vars.collateral = vars.collateralsRequired[i] * vars.ratio / 1e18;\\n        vars.amountToBorrow = vars.amountsToBorrow[i] * vars.ratio / 1e18;\\n\\n        // skip any attempts to borrow zero amount or use too little collateral\\n        if (vars.collateral < collateralThreshold_ || vars.amountToBorrow == 0) {\\n          if (vars.collateralsRequired[i] + vars.c1 + collateralThreshold_ > amountIn_) {\\n            // The lending platform has enough resources to make the borrow but amount of the borrow is too low\\n            // Skip the borrow, leave leftover of collateral untouched\\n            break;\\n          } else {\\n            // The lending platform doesn't have enough resources to make the borrow.\\n            // We should try to make borrow on the next platform (if any)\\n            continue;\\n          }\\n        }\\n\\n        require(\\n          tetuConverter_.borrow(\\n            vars.converters[i],\\n            collateralAsset_,\\n            vars.collateral,\\n            borrowAsset_,\\n            vars.amountToBorrow,\\n            address(this)\\n          ) == vars.amountToBorrow,\\n          StrategyLib.WRONG_VALUE\\n        );\\n        emit OpenPosition(\\n          vars.converters[i],\\n          collateralAsset_,\\n          vars.collateral,\\n          borrowAsset_,\\n          vars.amountToBorrow,\\n          address(this)\\n        );\\n\\n        borrowedAmountOut += vars.amountToBorrow;\\n        collateralAmountOut += vars.collateral;\\n\\n        // calculate amount to be borrowed in the next converter\\n        vars.c3 = vars.alpha * vars.amountToBorrow / 1e18;\\n        vars.c1 = x * vars.c3 / y;\\n        amountIn_ = (amountIn_ > vars.c1 + vars.collateral)\\n          ? amountIn_ - (vars.c1 + vars.collateral)\\n          : 0;\\n\\n        // protection against dust amounts, see \\\"openPosition.dust\\\", just leave dust amount unused\\n        // we CAN NOT add it to collateral/borrow amounts - there is a risk to exceed max allowed amounts\\n        // we assume here, that collateralThreshold_ != 0, so check amountIn_ != 0 is not required\\n        if (amountIn_ < collateralThreshold_) break;\\n      }\\n    }\\n\\n    return (collateralAmountOut, borrowedAmountOut);\\n  }\\n\\n  /// @notice Get ratio18 = collateral / borrow\\n  function _getCollateralToBorrowRatio(\\n    ITetuConverter tetuConverter_,\\n    address collateralAsset_,\\n    address borrowAsset_\\n  ) internal view returns (uint){\\n    IPriceOracle priceOracle = IPriceOracle(IConverterController(tetuConverter_.controller()).priceOracle());\\n    uint priceCollateral = priceOracle.getAssetPrice(collateralAsset_);\\n    uint priceBorrow = priceOracle.getAssetPrice(borrowAsset_);\\n    return 1e18 * priceBorrow * 10 ** IERC20Metadata(collateralAsset_).decimals()\\n    / priceCollateral / 10 ** IERC20Metadata(borrowAsset_).decimals();\\n  }\\n\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\n  ///         It doesn't repay more than the actual amount of the debt, so it can use less amount than {amountToRepay}\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function _closePosition(\\n    ITetuConverter converter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) internal returns (\\n    uint returnedAssetAmountOut,\\n    uint repaidAmountOut\\n  ) {\\n\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // We shouldn't try to pay more than we actually need to repay\\n    // The leftover will be swapped inside TetuConverter, it's inefficient.\\n    // Let's limit amountToRepay by needToRepay-amount\\n    (uint needToRepay,) = converter_.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\n    uint amountRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\n\\n    return _closePositionExact(converter_, collateralAsset, borrowAsset, amountRepay, balanceBefore);\\n  }\\n\\n  /// @notice Close the given position, pay {amountRepay} exactly and ensure that all amount was accepted,\\n  /// @param amountRepay Amount to repay in terms of {borrowAsset}\\n  /// @param balanceBorrowAsset Current balance of the borrow asset\\n  /// @return collateralOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function _closePositionExact(\\n    ITetuConverter converter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountRepay,\\n    uint balanceBorrowAsset\\n  ) internal returns (\\n    uint collateralOut,\\n    uint repaidAmountOut\\n  ) {\\n    // Make full/partial repayment\\n    IERC20(borrowAsset).safeTransfer(address(converter_), amountRepay);\\n\\n    uint notUsedAmount;\\n    (collateralOut, notUsedAmount,,) = converter_.repay(collateralAsset, borrowAsset, amountRepay, address(this));\\n\\n    emit ClosePosition(collateralAsset, borrowAsset, amountRepay, address(this), collateralOut, notUsedAmount);\\n    uint balanceAfter = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // we cannot use amountRepay here because AAVE pool adapter is able to send tiny amount back (debt-gap)\\n    repaidAmountOut = balanceBorrowAsset > balanceAfter\\n      ? balanceBorrowAsset - balanceAfter\\n      : 0;\\n\\n    require(notUsedAmount == 0, StrategyLib.WRONG_VALUE);\\n  }\\n\\n  /// @notice Close the given position, pay {amountToRepay}, return collateral amount in result\\n  /// @param amountToRepay Amount to repay in terms of {borrowAsset}\\n  /// @return returnedAssetAmountOut Amount of collateral received back after repaying\\n  /// @return repaidAmountOut Amount that was actually repaid\\n  function closePosition(\\n    ITetuConverter tetuConverter_,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) external returns (\\n    uint returnedAssetAmountOut,\\n    uint repaidAmountOut\\n  ) {\\n    return _closePosition(tetuConverter_, collateralAsset, borrowAsset, amountToRepay);\\n  }\\n  //endregion Borrow and close positions\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Liquidation\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\n  /// @param spentAmountIn Amount of {tokenIn} has been consumed by the liquidator\\n  /// @param receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\n  function liquidate(\\n    ITetuConverter converter,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    uint liquidationThresholdTokenOut_,\\n    bool skipValidation\\n  ) external returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    return _liquidate(converter, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, liquidationThresholdTokenOut_, skipValidation);\\n  }\\n\\n  /// @notice Make liquidation if estimated amountOut exceeds the given threshold\\n  /// @param spentAmountIn Amount of {tokenIn} has been consumed by the liquidator (== 0 | amountIn_)\\n  /// @param receivedAmountOut Amount of {tokenOut_} has been returned by the liquidator\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\n  function _liquidate(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    uint liquidationThresholdForTokenOut_,\\n    bool skipValidation\\n  ) internal returns (\\n    uint spentAmountIn,\\n    uint receivedAmountOut\\n  ) {\\n    if (amountIn_ == 0) {\\n      return (0, 0);\\n    }\\n\\n    (ITetuLiquidator.PoolData[] memory route,) = liquidator_.buildRoute(tokenIn_, tokenOut_);\\n\\n    require(route.length != 0, AppErrors.NO_LIQUIDATION_ROUTE);\\n\\n    // calculate balance in out value for check threshold\\n    uint amountOut = liquidator_.getPriceForRoute(route, amountIn_);\\n\\n    // if the expected value is higher than threshold distribute to destinations\\n    return amountOut > liquidationThresholdForTokenOut_\\n      ? (amountIn_, _liquidateWithRoute(converter_, route, liquidator_, tokenIn_, tokenOut_, amountIn_, slippage_, skipValidation))\\n      : (0, 0);\\n  }\\n\\n  /// @notice Make liquidation using given route and check correctness using TetuConverter's price oracle\\n  /// @param skipValidation Don't check correctness of conversion using TetuConverter's oracle (i.e. for reward tokens)\\n  function _liquidateWithRoute(\\n    ITetuConverter converter_,\\n    ITetuLiquidator.PoolData[] memory route,\\n    ITetuLiquidator liquidator_,\\n    address tokenIn_,\\n    address tokenOut_,\\n    uint amountIn_,\\n    uint slippage_,\\n    bool skipValidation\\n  ) internal returns (\\n    uint receivedAmountOut\\n  ) {\\n    // we need to approve each time, liquidator address can be changed in controller\\n    AppLib.approveIfNeeded(tokenIn_, amountIn_, address(liquidator_));\\n\\n    uint balanceBefore = IERC20(tokenOut_).balanceOf(address(this));\\n    liquidator_.liquidateWithRoute(route, amountIn_, slippage_);\\n    uint balanceAfter = IERC20(tokenOut_).balanceOf(address(this));\\n\\n    require(balanceAfter > balanceBefore, AppErrors.BALANCE_DECREASE);\\n    receivedAmountOut = balanceAfter - balanceBefore;\\n\\n    // Oracle in TetuConverter \\\"knows\\\" only limited number of the assets\\n    // It may not know prices for reward assets, so for rewards this validation should be skipped to avoid TC-4 error\\n    require(skipValidation || converter_.isConversionValid(tokenIn_, amountIn_, tokenOut_, receivedAmountOut, slippage_), AppErrors.PRICE_IMPACT);\\n    emit Liquidation(tokenIn_, tokenOut_, amountIn_, amountIn_, receivedAmountOut);\\n  }\\n  //endregion Liquidation\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region requirePayAmountBack\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @param amount_ Amount of the main asset requested by converter\\n  /// @param indexTheAsset Index of the asset required by converter in the {tokens}\\n  /// @param asset Main asset or underlying (it can be different from tokens[indexTheAsset])\\n  /// @return amountOut Amount of the main asset sent to converter\\n  function swapToGivenAmountAndSendToConverter(\\n    uint amount_,\\n    uint indexTheAsset,\\n    address[] memory tokens,\\n    address converter,\\n    address controller,\\n    address asset,\\n    mapping(address => uint) storage liquidationThresholds\\n  ) external returns (\\n    uint amountOut\\n  ) {\\n    // msg.sender == converter; we assume here that it was checked before the call of this function\\n    address theAsset = tokens[indexTheAsset];\\n\\n    amountOut = IERC20(theAsset).balanceOf(address(this));\\n\\n    // convert withdrawn assets to the target asset if not enough\\n    if (amountOut < amount_) {\\n      ConverterStrategyBaseLib.swapToGivenAmount(\\n        amount_ - amountOut,\\n        tokens,\\n        indexTheAsset,\\n        asset, // underlying === main asset\\n        ITetuConverter(converter),\\n        ITetuLiquidator(IController(controller).liquidator()),\\n        liquidationThresholds[theAsset],\\n        OVERSWAP\\n      );\\n      amountOut = IERC20(theAsset).balanceOf(address(this));\\n    }\\n\\n    // we should send the asset as is even if it is lower than requested\\n    // but shouldn't sent more amount than requested\\n    amountOut = Math.min(amount_, amountOut);\\n    if (amountOut != 0) {\\n      IERC20(theAsset).safeTransfer(converter, amountOut);\\n    }\\n\\n    // There are two cases of calling requirePayAmountBack by converter:\\n    // 1) close a borrow: we will receive collateral back and amount of investedAssets almost won't change\\n    // 2) rebalancing: we have real loss, it will be taken into account at next hard work\\n    emit ReturnAssetToConverter(theAsset, amountOut);\\n\\n    // let's leave any leftovers un-invested, they will be reinvested at next hardwork\\n  }\\n\\n  /// @notice Swap available amounts of {tokens_} to receive {targetAmount_} of {tokens[indexTheAsset_]}\\n  /// @param targetAmount_ Required amount of tokens[indexTheAsset_] that should be received by swap(s)\\n  /// @param tokens_ tokens received from {_depositorPoolAssets}\\n  /// @param indexTargetAsset_ Index of target asset in tokens_ array\\n  /// @param underlying_ Index of underlying\\n  /// @param liquidationThresholdForTargetAsset_ Liquidation thresholds for the target asset\\n  /// @param overswap_ Allow to swap more then required (i.e. 1_000 => +1%)\\n  ///                  to avoid additional swap if the swap return amount a bit less than we expected\\n  /// @return spentAmounts Any amounts spent during the swaps\\n  function swapToGivenAmount(\\n    uint targetAmount_,\\n    address[] memory tokens_,\\n    uint indexTargetAsset_,\\n    address underlying_,\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    uint liquidationThresholdForTargetAsset_,\\n    uint overswap_\\n  ) internal returns (\\n    uint[] memory spentAmounts,\\n    uint[] memory receivedAmounts\\n  ) {\\n    SwapToGivenAmountLocal memory v;\\n    v.len = tokens_.length;\\n\\n    v.availableAmounts = new uint[](v.len);\\n    for (; v.i < v.len; v.i = AppLib.uncheckedInc(v.i)) {\\n      v.availableAmounts[v.i] = IERC20(tokens_[v.i]).balanceOf(address(this));\\n    }\\n\\n    (spentAmounts, receivedAmounts) = _swapToGivenAmount(\\n      SwapToGivenAmountInputParams({\\n        targetAmount: targetAmount_,\\n        tokens: tokens_,\\n        indexTargetAsset: indexTargetAsset_,\\n        underlying: underlying_,\\n        amounts: v.availableAmounts,\\n        converter: converter_,\\n        liquidator: liquidator_,\\n        liquidationThresholdForTargetAsset: Math.max(liquidationThresholdForTargetAsset_, DEFAULT_LIQUIDATION_THRESHOLD),\\n        overswap: overswap_\\n      })\\n    );\\n  }\\n\\n  /// @notice Swap available {amounts_} of {tokens_} to receive {targetAmount_} of {tokens[indexTheAsset_]}\\n  /// @return spentAmounts Any amounts spent during the swaps\\n  /// @return receivedAmounts Any amounts received during the swaps\\n  function _swapToGivenAmount(SwapToGivenAmountInputParams memory p) internal returns (\\n    uint[] memory spentAmounts,\\n    uint[] memory receivedAmounts\\n  ) {\\n    CalcInvestedAssetsLocal memory v;\\n    v.len = p.tokens.length;\\n    receivedAmounts = new uint[](v.len);\\n    spentAmounts = new uint[](v.len);\\n\\n    // calculate prices, decimals\\n    (v.prices, v.decs) = _getPricesAndDecs(\\n      IPriceOracle(IConverterController(p.converter.controller()).priceOracle()),\\n      p.tokens,\\n      v.len\\n    );\\n\\n    // we need to swap other assets to the asset\\n    // at first we should swap NOT underlying.\\n    // if it would be not enough, we can swap underlying too.\\n\\n    // swap NOT underlying, initialize {indexUnderlying}\\n    uint indexUnderlying;\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      if (p.underlying == p.tokens[i]) {\\n        indexUnderlying = i;\\n        continue;\\n      }\\n      if (p.indexTargetAsset == i) continue;\\n\\n      (uint spent, uint received) = _swapToGetAmount(receivedAmounts[p.indexTargetAsset], p, v, i);\\n      spentAmounts[i] += spent;\\n      receivedAmounts[p.indexTargetAsset] += received;\\n\\n      if (receivedAmounts[p.indexTargetAsset] >= p.targetAmount) break;\\n    }\\n\\n    // swap underlying\\n    if (receivedAmounts[p.indexTargetAsset] < p.targetAmount && p.indexTargetAsset != indexUnderlying) {\\n      (uint spent, uint received) = _swapToGetAmount(receivedAmounts[p.indexTargetAsset], p, v, indexUnderlying);\\n      spentAmounts[indexUnderlying] += spent;\\n      receivedAmounts[p.indexTargetAsset] += received;\\n    }\\n  }\\n\\n  /// @notice Swap a part of amount of asset {tokens[indexTokenIn]} to {targetAsset} to get {targetAmount} in result\\n  /// @param receivedTargetAmount Already received amount of {targetAsset} in previous swaps\\n  /// @param indexTokenIn Index of the tokenIn in p.tokens\\n  function _swapToGetAmount(\\n    uint receivedTargetAmount,\\n    SwapToGivenAmountInputParams memory p,\\n    CalcInvestedAssetsLocal memory v,\\n    uint indexTokenIn\\n  ) internal returns (\\n    uint amountSpent,\\n    uint amountReceived\\n  ) {\\n    if (p.amounts[indexTokenIn] != 0) {\\n      // we assume here, that p.targetAmount > receivedTargetAmount, see _swapToGivenAmount implementation\\n\\n      // calculate amount that should be swapped\\n      // {overswap} allows to swap a bit more\\n      // to avoid additional swaps if the swap will give us a bit less amount than expected\\n      uint amountIn = (\\n        (p.targetAmount - receivedTargetAmount)\\n        * v.prices[p.indexTargetAsset] * v.decs[indexTokenIn]\\n        / v.prices[indexTokenIn] / v.decs[p.indexTargetAsset]\\n      ) * (p.overswap + DENOMINATOR) / DENOMINATOR;\\n\\n      (amountSpent, amountReceived) = _liquidate(\\n        p.converter,\\n        p.liquidator,\\n        p.tokens[indexTokenIn],\\n        p.tokens[p.indexTargetAsset],\\n        Math.min(amountIn, p.amounts[indexTokenIn]),\\n        _ASSET_LIQUIDATION_SLIPPAGE,\\n        p.liquidationThresholdForTargetAsset,\\n        false\\n      );\\n    }\\n\\n    return (amountSpent, amountReceived);\\n  }\\n  //endregion requirePayAmountBack\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Recycle rewards\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Recycle the amounts: split each amount on tree parts: performance+insurance (P), forwarder (F), compound (C)\\n  ///         Liquidate P+C, send F to the forwarder.\\n  /// We have two kinds of rewards:\\n  /// 1) rewards in depositor's assets (the assets returned by _depositorPoolAssets)\\n  /// 2) any other rewards\\n  /// All received rewards divided on three parts: to performance receiver+insurance, to forwarder, to compound\\n  ///   Compound-part of Rewards-2 can be liquidated\\n  ///   Compound part of Rewards-1 should be just left on the balance\\n  ///   All forwarder-parts are returned in amountsToForward and should be transferred to the forwarder outside.\\n  ///   Performance amounts are liquidated, result amount of underlying is returned in {amountToPerformanceAndInsurance}\\n  /// @param asset Underlying asset\\n  /// @param compoundRatio Compound ration in the range [0...COMPOUND_DENOMINATOR]\\n  /// @param tokens tokens received from {_depositorPoolAssets}\\n  /// @param rewardTokens Full list of reward tokens received from tetuConverter and depositor\\n  /// @param rewardAmounts Amounts of {rewardTokens_}; we assume, there are no zero amounts here\\n  /// @param liquidationThresholds Liquidation thresholds for rewards tokens\\n  /// @param performanceFee Performance fee in the range [0...FEE_DENOMINATOR]\\n  /// @return amountsToForward Amounts of {rewardTokens} to be sent to forwarder, zero amounts are allowed here\\n  /// @return amountToPerformanceAndInsurance Amount of underlying to be sent to performance receiver and insurance\\n  function recycle(\\n    ITetuConverter converter_,\\n    address asset,\\n    uint compoundRatio,\\n    address[] memory tokens,\\n    ITetuLiquidator liquidator,\\n    mapping(address => uint) storage liquidationThresholds,\\n    address[] memory rewardTokens,\\n    uint[] memory rewardAmounts,\\n    uint performanceFee\\n  ) external returns (\\n    uint[] memory amountsToForward,\\n    uint amountToPerformanceAndInsurance\\n  ) {\\n    RecycleLocalParams memory p;\\n\\n    p.len = rewardTokens.length;\\n    require(p.len == rewardAmounts.length, AppErrors.WRONG_LENGTHS);\\n\\n    p.liquidationThresholdAsset = Math.max(liquidationThresholds[asset], DEFAULT_LIQUIDATION_THRESHOLD);\\n\\n    amountsToForward = new uint[](p.len);\\n\\n    // rewardAmounts => P + F + C, where P - performance + insurance, F - forwarder, C - compound\\n    for (uint i; i < p.len; i = AppLib.uncheckedInc(i)) {\\n      p.amountFC = rewardAmounts[i] * (COMPOUND_DENOMINATOR - performanceFee) / COMPOUND_DENOMINATOR;\\n      p.amountC = p.amountFC * compoundRatio / COMPOUND_DENOMINATOR;\\n      p.amountP = rewardAmounts[i] - p.amountFC;\\n      p.rewardToken = rewardTokens[i];\\n      p.amountCP = p.amountC + p.amountP;\\n\\n      if (p.amountCP > 0) {\\n        if (ConverterStrategyBaseLib.getAssetIndex(tokens, p.rewardToken) != type(uint).max) {\\n          if (p.rewardToken == asset) {\\n            // This is underlying, liquidation of compound part is not allowed; just keep on the balance, should be handled later\\n            amountToPerformanceAndInsurance += p.amountP;\\n          } else {\\n            // This is secondary asset, Liquidation of compound part is not allowed, we should liquidate performance part only\\n            if (p.amountP < Math.max(liquidationThresholds[p.rewardToken], DEFAULT_LIQUIDATION_THRESHOLD)) {\\n              // performance amount is too small, liquidation is not allowed, we just keep that dust tokens on balance forever\\n            } else {\\n              (, p.receivedAmountOut) = _liquidate(\\n                converter_,\\n                liquidator,\\n                p.rewardToken,\\n                asset,\\n                p.amountP,\\n                _REWARD_LIQUIDATION_SLIPPAGE,\\n                p.liquidationThresholdAsset,\\n                false // use conversion validation for these rewards\\n              );\\n              amountToPerformanceAndInsurance += p.receivedAmountOut;\\n            }\\n          }\\n        } else {\\n          if (p.amountCP < Math.max(liquidationThresholds[p.rewardToken], DEFAULT_LIQUIDATION_THRESHOLD)) {\\n            // amount is too small, liquidation is not allowed, we just keep that dust tokens on balance forever\\n          } else {\\n            // The asset is not in the list of depositor's assets, its amount is big enough and should be liquidated\\n            // We assume here, that {token} cannot be equal to {_asset}\\n            // because the {_asset} is always included to the list of depositor's assets\\n            (, p.receivedAmountOut) = _liquidate(\\n              converter_,\\n              liquidator,\\n              p.rewardToken,\\n              asset,\\n              p.amountCP,\\n              _REWARD_LIQUIDATION_SLIPPAGE,\\n              p.liquidationThresholdAsset,\\n              true // skip conversion validation for rewards becase we can have arbitrary assets here\\n            );\\n\\n            amountToPerformanceAndInsurance += p.receivedAmountOut * (rewardAmounts[i] - p.amountFC) / p.amountCP;\\n          }\\n        }\\n      }\\n      amountsToForward[i] = p.amountFC - p.amountC;\\n    }\\n    return (amountsToForward, amountToPerformanceAndInsurance);\\n  }\\n  //endregion Recycle rewards\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region calcInvestedAssets\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Calculate amount we will receive when we withdraw all from pool\\n  /// @dev This is writable function because we need to update current balances in the internal protocols.\\n  /// @return amountOut Invested asset amount under control (in terms of {asset})\\n  function calcInvestedAssets(\\n    address[] memory tokens,\\n    uint[] memory depositorQuoteExitAmountsOut,\\n    uint indexAsset,\\n    ITetuConverter converter_\\n  ) external returns (\\n    uint amountOut\\n  ) {\\n    CalcInvestedAssetsLocal memory v;\\n    v.len = tokens.length;\\n\\n    // calculate prices, decimals\\n    (v.prices, v.decs) = _getPricesAndDecs(\\n      IPriceOracle(IConverterController(converter_.controller()).priceOracle()),\\n      tokens,\\n      v.len\\n    );\\n    // A debt is registered below if we have X amount of asset, need to pay Y amount of the asset and X < Y\\n    // In this case: debt = Y - X, the order of tokens is the same as in {tokens} array\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) {\\n        // Current strategy balance of main asset is not taken into account here because it's add by splitter\\n        amountOut += depositorQuoteExitAmountsOut[i];\\n      } else {\\n        // available amount to repay\\n        uint toRepay = IERC20(tokens[i]).balanceOf(address(this)) + depositorQuoteExitAmountsOut[i];\\n\\n        (uint toPay, uint collateral) = converter_.getDebtAmountCurrent(\\n          address(this),\\n          tokens[indexAsset],\\n          tokens[i],\\n          // investedAssets is calculated using exact debts, debt-gaps are not taken into account\\n          false\\n        );\\n        amountOut += collateral;\\n\\n        if (toRepay >= toPay) {\\n          amountOut += (toRepay - toPay) * v.prices[i] * v.decs[indexAsset] / v.prices[indexAsset] / v.decs[i];\\n        } else {\\n          // there is not enough amount to pay the debt\\n          // let's register a debt and try to resolve it later below\\n          if (v.debts.length == 0) {\\n            // lazy initialization\\n            v.debts = new uint[](v.len);\\n          }\\n\\n          // to pay the following amount we need to swap some other asset at first\\n          v.debts[i] = toPay - toRepay;\\n        }\\n      }\\n    }\\n    if (v.debts.length == v.len) {\\n      // we assume here, that it would be always profitable to save collateral\\n      // f.e. if there is not enough amount of USDT on our balance and we have a debt in USDT,\\n      // it's profitable to change any available asset to USDT, pay the debt and return the collateral back\\n      for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n        if (v.debts[i] == 0) continue;\\n\\n        // estimatedAssets should be reduced on the debt-value\\n        // this estimation is approx and do not count price impact on the liquidation\\n        // we will able to count the real output only after withdraw process\\n        uint debtInAsset = v.debts[i] * v.prices[i] * v.decs[indexAsset] / v.prices[indexAsset] / v.decs[i];\\n        if (debtInAsset > amountOut) {\\n          // The debt is greater than we can pay. We shouldn't try to pay the debt in this case\\n          amountOut = 0;\\n        } else {\\n          amountOut -= debtInAsset;\\n        }\\n      }\\n    }\\n\\n    return amountOut;\\n  }\\n  //endregion calcInvestedAssets\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region getExpectedAmountMainAsset\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Calculate expected amount of the main asset after withdrawing\\n  /// @param withdrawnAmounts_ Expected amounts to be withdrawn from the pool\\n  /// @param amountsToConvert_ Amounts on balance initially available for the conversion\\n  /// @return amountsOut Expected amounts of the main asset received after conversion withdrawnAmounts+amountsToConvert\\n  function getExpectedAmountMainAsset(\\n    address[] memory tokens,\\n    uint indexAsset,\\n    ITetuConverter converter,\\n    uint[] memory withdrawnAmounts_,\\n    uint[] memory amountsToConvert_\\n  ) internal returns (\\n    uint[] memory amountsOut\\n  ) {\\n    uint len = tokens.length;\\n    amountsOut = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) {\\n        amountsOut[i] = withdrawnAmounts_[i];\\n      } else {\\n        uint amount = withdrawnAmounts_[i] + amountsToConvert_[i];\\n        if (amount != 0) {\\n          (amountsOut[i],) = converter.quoteRepay(address(this), tokens[indexAsset], tokens[i], amount);\\n        }\\n      }\\n    }\\n\\n    return amountsOut;\\n  }\\n  //endregion getExpectedAmountMainAsset\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Reduce size of ConverterStrategyBase\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Make borrow and save amounts of tokens available for deposit to tokenAmounts\\n  /// @param thresholdMainAsset_ Min allowed value of collateral in terms of main asset, 0 - use default min value\\n  /// @param tokens_ Tokens received from {_depositorPoolAssets}\\n  /// @param collaterals_ Amounts of main asset that can be used as collateral to borrow {tokens_}\\n  /// @param thresholdMainAsset_ Value of liquidation threshold for the main (collateral) asset\\n  /// @return tokenAmountsOut Amounts available for deposit\\n  function getTokenAmounts(\\n    ITetuConverter tetuConverter_,\\n    address[] memory tokens_,\\n    uint indexAsset_,\\n    uint[] memory collaterals_,\\n    uint thresholdMainAsset_\\n  ) external returns (\\n    uint[] memory tokenAmountsOut\\n  ) {\\n    // content of tokenAmounts will be modified in place\\n    uint len = tokens_.length;\\n    tokenAmountsOut = new uint[](len);\\n\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i != indexAsset_) {\\n        if (collaterals_[i] != 0) {\\n          AppLib.approveIfNeeded(tokens_[indexAsset_], collaterals_[i], address(tetuConverter_));\\n          _openPosition(\\n            tetuConverter_,\\n            \\\"\\\", // entry kind = 0: fixed collateral amount, max possible borrow amount\\n            tokens_[indexAsset_],\\n            tokens_[i],\\n            collaterals_[i],\\n            Math.max(thresholdMainAsset_, DEFAULT_LIQUIDATION_THRESHOLD)\\n          );\\n\\n          // zero borrowed amount is possible here (conversion is not available)\\n          // if it's not suitable for depositor, the depositor should check zero amount in other places\\n        }\\n        tokenAmountsOut[i] = IERC20(tokens_[i]).balanceOf(address(this));\\n      }\\n    }\\n\\n    tokenAmountsOut[indexAsset_] = Math.min(\\n      collaterals_[indexAsset_],\\n      IERC20(tokens_[indexAsset_]).balanceOf(address(this))\\n    );\\n  }\\n\\n  /// @notice Convert {amountsToConvert_} to the main {asset}\\n  ///         Swap leftovers (if any) to the main asset.\\n  ///         If result amount is less than expected, try to close any other available debts (1 repay per block only)\\n  /// @param tokens_ Results of _depositorPoolAssets() call (list of depositor's asset in proper order)\\n  /// @param indexAsset_ Index of main {asset} in {tokens}\\n  /// @param requestedAmount Amount to be withdrawn in terms of the asset in addition to the exist balance.\\n  ///        Max uint means attempt to withdraw all possible invested assets.\\n  /// @param amountsToConvert_ Amounts available for conversion after withdrawing from the pool\\n  /// @param expectedMainAssetAmounts Amounts of main asset that we expect to receive after conversion amountsToConvert_\\n  /// @return expectedAmount Expected total amount of main asset after all conversions, swaps and repays\\n  function makeRequestedAmount(\\n    address[] memory tokens_,\\n    uint indexAsset_,\\n    uint[] memory amountsToConvert_,\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator_,\\n    uint requestedAmount,\\n    uint[] memory expectedMainAssetAmounts,\\n    mapping(address => uint) storage liquidationThresholds\\n  ) external returns (uint expectedAmount) {\\n    // get the total expected amount\\n    for (uint i; i < tokens_.length; i = AppLib.uncheckedInc(i)) {\\n      expectedAmount += expectedMainAssetAmounts[i];\\n    }\\n\\n    // we cannot repay a debt twice\\n    // suppose, we have usdt = 1 and we need to convert it to usdc, then get additional usdt=10 and make second repay\\n    // But: we cannot make repay(1) and than repay(10). We MUST make single repay(11)\\n\\n    if (requestedAmount != type(uint).max\\n      && expectedAmount > requestedAmount * (GAP_CONVERSION + DENOMINATOR) / DENOMINATOR\\n    ) {\\n      // amountsToConvert_ are enough to get requestedAmount\\n      _convertAfterWithdraw(\\n        converter_,\\n        liquidator_,\\n        indexAsset_,\\n        liquidationThresholds[tokens_[indexAsset_]],\\n        tokens_,\\n        amountsToConvert_\\n      );\\n    } else {\\n      // amountsToConvert_ are NOT enough to get requestedAmount\\n      // We are allowed to make only one repay per block, so, we shouldn't try to convert amountsToConvert_\\n      // We should try to close the exist debts instead:\\n      //    convert a part of main assets to get amount of secondary assets required to repay the debts\\n      // and only then make conversion.\\n      expectedAmount = _closePositionsToGetAmount(\\n        converter_,\\n        liquidator_,\\n        indexAsset_,\\n        liquidationThresholds,\\n        requestedAmount,\\n        tokens_\\n      ) + expectedMainAssetAmounts[indexAsset_];\\n    }\\n\\n    return expectedAmount;\\n  }\\n  //endregion Reduce size of ConverterStrategyBase\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Withdraw helpers\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Add {withdrawnAmounts} to {amountsToConvert}, calculate {expectedAmountMainAsset}\\n  /// @param amountsToConvert Amounts of {tokens} to be converted, they are located on the balance before withdraw\\n  /// @param withdrawnAmounts Amounts of {tokens} that were withdrew from the pool\\n  function postWithdrawActions(\\n    ITetuConverter converter,\\n    address[] memory tokens,\\n    uint indexAsset,\\n\\n    uint[] memory reservesBeforeWithdraw,\\n    uint liquidityAmountWithdrew,\\n    uint totalSupplyBeforeWithdraw,\\n\\n    uint[] memory amountsToConvert,\\n    uint[] memory withdrawnAmounts\\n  ) external returns (\\n    uint[] memory expectedMainAssetAmounts,\\n    uint[] memory _amountsToConvert\\n  ) {\\n    // estimate expected amount of assets to be withdrawn\\n    uint[] memory expectedWithdrawAmounts = getExpectedWithdrawnAmounts(\\n      reservesBeforeWithdraw,\\n      liquidityAmountWithdrew,\\n      totalSupplyBeforeWithdraw\\n    );\\n\\n    // from received amounts after withdraw calculate how much we receive from converter for them in terms of the underlying asset\\n    expectedMainAssetAmounts = getExpectedAmountMainAsset(\\n      tokens,\\n      indexAsset,\\n      converter,\\n      expectedWithdrawAmounts,\\n      amountsToConvert\\n    );\\n\\n    uint len = tokens.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      amountsToConvert[i] += withdrawnAmounts[i];\\n    }\\n\\n    return (expectedMainAssetAmounts, amountsToConvert);\\n  }\\n\\n  /// @notice return {withdrawnAmounts} with zero values and expected amount calculated using {amountsToConvert_}\\n  function postWithdrawActionsEmpty(\\n    ITetuConverter converter,\\n    address[] memory tokens,\\n    uint indexAsset,\\n    uint[] memory amountsToConvert_\\n  ) external returns (\\n    uint[] memory expectedAmountsMainAsset\\n  ) {\\n    expectedAmountsMainAsset = getExpectedAmountMainAsset(\\n      tokens,\\n      indexAsset,\\n      converter,\\n      // there are no withdrawn amounts\\n      new uint[](tokens.length), // array with all zero values\\n      amountsToConvert_\\n    );\\n  }\\n\\n  //endregion Withdraw helpers\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region convertAfterWithdraw\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Convert {amountsToConvert_} (available on balance) to the main asset\\n  ///         Swap leftovers if any.\\n  ///         Result amount can be less than requested one, we don't try to close any other debts here\\n  /// @param indexAsset Index of the main asset in {tokens}\\n  /// @param liquidationThreshold Min allowed amount of main asset to be liquidated in {liquidator}\\n  /// @param tokens Tokens received from {_depositorPoolAssets}\\n  /// @param amountsToConvert Amounts to convert, the order of asset is same as in {tokens}\\n  /// @return collateralOut Total amount of main asset returned after closing positions\\n  /// @return repaidAmountsOut What amounts were spent in exchange of the {collateralOut}\\n  function _convertAfterWithdraw(\\n    ITetuConverter tetuConverter,\\n    ITetuLiquidator liquidator,\\n    uint indexAsset,\\n    uint liquidationThreshold,\\n    address[] memory tokens,\\n    uint[] memory amountsToConvert\\n  ) internal returns (\\n    uint collateralOut,\\n    uint[] memory repaidAmountsOut\\n  ) {\\n    ConvertAfterWithdrawLocal memory v;\\n    v.asset = tokens[indexAsset];\\n    v.balanceBefore = IERC20(v.asset).balanceOf(address(this));\\n    v.len = tokens.length;\\n\\n    // Close positions to convert all required amountsToConvert\\n    repaidAmountsOut = new uint[](tokens.length);\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset || amountsToConvert[i] == 0) continue;\\n      (, repaidAmountsOut[i]) = _closePosition(tetuConverter, v.asset, tokens[i], amountsToConvert[i]);\\n    }\\n\\n    // Manually swap remain leftovers\\n    for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset || amountsToConvert[i] == 0) continue;\\n      if (amountsToConvert[i] > repaidAmountsOut[i]) {\\n        (v.spent, v.received) = _liquidate(\\n          tetuConverter,\\n          liquidator,\\n          tokens[i],\\n          v.asset,\\n          amountsToConvert[i] - repaidAmountsOut[i],\\n          _ASSET_LIQUIDATION_SLIPPAGE,\\n          liquidationThreshold,\\n          false\\n        );\\n        collateralOut += v.received;\\n        repaidAmountsOut[i] += v.spent;\\n      }\\n    }\\n\\n    // Calculate amount of received collateral\\n    v.balance = IERC20(v.asset).balanceOf(address(this));\\n    collateralOut = v.balance > v.balanceBefore\\n      ? v.balance - v.balanceBefore\\n      : 0;\\n\\n    return (collateralOut, repaidAmountsOut);\\n  }\\n\\n  /// @notice Close debts (if it's allowed) in converter until we don't have {requestedAmount} on balance\\n  /// @dev We assume here that this function is called before closing any positions in the current block\\n  /// @param liquidationThresholds Min allowed amounts-out for liquidations\\n  /// @param requestedAmount Requested amount of main asset that should be added to the current balance\\n  /// @return expectedAmount Main asset amount expected to be received on balance after all conversions and swaps\\n  function closePositionsToGetAmount(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator,\\n    uint indexAsset,\\n    mapping(address => uint) storage liquidationThresholds,\\n    uint requestedAmount,\\n    address[] memory tokens\\n  ) external returns (\\n    uint expectedAmount\\n  ) {\\n    return _closePositionsToGetAmount(\\n      converter_,\\n      liquidator,\\n      indexAsset,\\n      liquidationThresholds,\\n      requestedAmount,\\n      tokens\\n    );\\n  }\\n\\n  function _closePositionsToGetAmount(\\n    ITetuConverter converter_,\\n    ITetuLiquidator liquidator,\\n    uint indexAsset,\\n    mapping(address => uint) storage liquidationThresholds,\\n    uint requestedAmount,\\n    address[] memory tokens\\n  ) internal returns (\\n    uint expectedAmount\\n  ) {\\n    if (requestedAmount != 0) {\\n      CloseDebtsForRequiredAmountLocal memory v;\\n      v.asset = tokens[indexAsset];\\n      v.len = tokens.length;\\n      v.balance = IERC20(v.asset).balanceOf(address(this));\\n\\n      for (uint i; i < v.len; i = AppLib.uncheckedInc(i)) {\\n        if (i == indexAsset) continue;\\n\\n        // we need to increase balance on the following amount: requestedAmount - v.balance;\\n        // we have following borrow: amount-to-pay and corresponded collateral\\n        (v.totalDebt, v.totalCollateral) = converter_.getDebtAmountCurrent(address(this), v.asset, tokens[i], true);\\n\\n        uint tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\n\\n        if (v.totalDebt != 0 || tokenBalance != 0) {\\n          //lazy initialization of the prices and decs\\n          if (v.prices.length == 0) {\\n            (v.prices, v.decs) = _getPricesAndDecs(\\n              IPriceOracle(IConverterController(converter_.controller()).priceOracle()),\\n              tokens,\\n              v.len\\n            );\\n          }\\n\\n          // repay the debt if any\\n          if (v.totalDebt != 0) {\\n            // what amount of main asset we should sell to pay the debt\\n            uint toSell = _getAmountToSell(\\n              requestedAmount,\\n              v.totalDebt,\\n              v.totalCollateral,\\n              v.prices,\\n              v.decs,\\n              indexAsset,\\n              i,\\n              tokenBalance\\n            );\\n\\n            // convert {toSell} amount of main asset to tokens[i]\\n            if (toSell != 0 && v.balance != 0) {\\n              toSell = Math.min(toSell, v.balance);\\n              (toSell,) = _liquidate(\\n                converter_,\\n                liquidator,\\n                v.asset,\\n                tokens[i],\\n                toSell,\\n                _ASSET_LIQUIDATION_SLIPPAGE,\\n                liquidationThresholds[tokens[i]],\\n                false\\n              );\\n              tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\n            }\\n\\n            // sell {toSell}, repay the debt, return collateral back; we should receive amount > toSell\\n            expectedAmount += _repayDebt(converter_, v.asset, tokens[i], tokenBalance) - toSell;\\n\\n            // we can have some leftovers after closing the debt\\n            tokenBalance = IERC20(tokens[i]).balanceOf(address(this));\\n          }\\n\\n          // directly swap leftovers\\n          if (tokenBalance != 0) {\\n            (uint spentAmountIn,) = _liquidate(\\n              converter_,\\n              liquidator,\\n              tokens[i],\\n              v.asset,\\n              tokenBalance,\\n              _ASSET_LIQUIDATION_SLIPPAGE,\\n              liquidationThresholds[v.asset],\\n              false\\n            );\\n            if (spentAmountIn != 0) {\\n              // spentAmountIn can be zero if token balance is less than liquidationThreshold\\n              expectedAmount += spentAmountIn * v.prices[i] * v.decs[indexAsset] / v.prices[indexAsset] / v.decs[i];\\n            }\\n          }\\n\\n          // reduce of requestedAmount on the balance increment\\n          v.newBalance = IERC20(v.asset).balanceOf(address(this));\\n          require(v.newBalance >= v.balance, AppErrors.BALANCE_DECREASE);\\n\\n          if (requestedAmount > v.newBalance - v.balance) {\\n            requestedAmount -= (v.newBalance - v.balance);\\n            v.balance = v.newBalance;\\n          } else {\\n            // we get requestedAmount on the balance and don't need to make any other conversions\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    return expectedAmount;\\n  }\\n\\n  /// @notice What amount of collateral should be sold to pay the debt and receive {requestedAmount}\\n  /// @dev It doesn't allow to sell more than the amount of total debt in the borrow\\n  /// @param requestedAmount We need to increase balance (of collateral asset) on this amount\\n  /// @param totalDebt Total debt of the borrow in terms of borrow asset\\n  /// @param totalCollateral Total collateral of the borrow in terms of collateral asset\\n  /// @param prices Cost of $1 in terms of the asset, decimals 18\\n  /// @param decs 10**decimals for each asset\\n  /// @param indexCollateral Index of the collateral asset in {prices} and {decs}\\n  /// @param indexBorrowAsset Index of the borrow asset in {prices} and {decs}\\n  /// @param balanceBorrowAsset Available balance of the borrow asset, it will be used to cover the debt\\n  function _getAmountToSell(\\n    uint requestedAmount,\\n    uint totalDebt,\\n    uint totalCollateral,\\n    uint[] memory prices,\\n    uint[] memory decs,\\n    uint indexCollateral,\\n    uint indexBorrowAsset,\\n    uint balanceBorrowAsset\\n  ) internal pure returns (\\n    uint amountOut\\n  ) {\\n    if (totalDebt != 0) {\\n      if (balanceBorrowAsset != 0) {\\n        // there is some borrow asset on balance\\n        // it will be used to cover the debt\\n        // let's reduce the size of totalDebt/Collateral to exclude balanceBorrowAsset\\n        uint sub = Math.min(balanceBorrowAsset, totalDebt);\\n        totalCollateral -= totalCollateral * sub / totalDebt;\\n        totalDebt -= sub;\\n      }\\n\\n      // for definiteness: usdc - collateral asset, dai - borrow asset\\n      // Pc = price of the USDC, Pb = price of the DAI, alpha = Pc / Pb [DAI / USDC]\\n      // S [USDC] - amount to sell, R [DAI] = alpha * S - amount to repay\\n      // After repaying R we get: alpha * S * C / R\\n      // Balance should be increased on: requestedAmount = alpha * S * C / R - S\\n      // So, we should sell: S = requestedAmount / (alpha * C / R - 1))\\n      // We can lost some amount on liquidation of S => R, so we need to use some gap = {GAP_AMOUNT_TO_SELL}\\n      // Same formula: S * h = S + requestedAmount, where h = health factor => s = requestedAmount / (h - 1)\\n      // h = alpha * C / R\\n      uint alpha18 = prices[indexCollateral] * decs[indexBorrowAsset] * 1e18\\n        / prices[indexBorrowAsset] / decs[indexCollateral];\\n\\n      // if totalCollateral is zero (liquidation happens) we will have zero amount (the debt shouldn't be paid)\\n      amountOut = totalDebt != 0 && alpha18 * totalCollateral / totalDebt > 1e18\\n        ? Math.min(requestedAmount, totalCollateral) * 1e18 / (alpha18 * totalCollateral / totalDebt - 1e18)\\n        : 0;\\n\\n      if (amountOut != 0) {\\n        // we shouldn't try to sell amount greater than amount of totalDebt in terms of collateral asset\\n        // but we always asks +1% because liquidation results can be different a bit from expected\\n        amountOut = (GAP_CONVERSION + DENOMINATOR) * Math.min(amountOut, totalDebt * 1e18 / alpha18) / DENOMINATOR;\\n      }\\n    }\\n\\n    return amountOut;\\n  }\\n\\n  /// @notice Repay {amountIn} and get collateral in return, calculate expected amount\\n  ///         Take into account possible debt-gap and the fact that the amount of debt may be less than {amountIn}\\n  /// @param amountToRepay Max available amount of borrow asset that we can repay\\n  /// @return expectedAmountOut Estimated amount of main asset that should be added to balance = collateral - {toSell}\\n  function _repayDebt(\\n    ITetuConverter converter,\\n    address collateralAsset,\\n    address borrowAsset,\\n    uint amountToRepay\\n  ) internal returns (\\n    uint expectedAmountOut\\n  ) {\\n    uint balanceBefore = IERC20(borrowAsset).balanceOf(address(this));\\n\\n    // get amount of debt with debt-gap\\n    (uint needToRepay,) = converter.getDebtAmountCurrent(address(this), collateralAsset, borrowAsset, true);\\n    uint amountRepay = Math.min(amountToRepay < needToRepay ? amountToRepay : needToRepay, balanceBefore);\\n\\n    // get expected amount without debt-gap\\n    uint swappedAmountOut;\\n    (expectedAmountOut, swappedAmountOut) = converter.quoteRepay(address(this), collateralAsset, borrowAsset, amountRepay);\\n\\n    if (expectedAmountOut > swappedAmountOut) {\\n      // Following situation is possible\\n      //    needToRepay = 100, needToRepayExact = 90 (debt gap is 10)\\n      //    1) amountRepay = 80\\n      //       expectedAmountOut is calculated for 80, no problems\\n      //    2) amountRepay = 99,\\n      //       expectedAmountOut is calculated for 90 + 9 (90 - repay, 9 - direct swap)\\n      //       expectedAmountOut must be reduced on 9 here (!)\\n      expectedAmountOut -= swappedAmountOut;\\n    }\\n\\n    // close the debt\\n    _closePositionExact(converter, collateralAsset, borrowAsset, amountRepay, balanceBefore);\\n\\n    return expectedAmountOut;\\n  }\\n  //endregion convertAfterWithdraw\\n\\n  /////////////////////////////////////////////////////////////////////\\n  //region Other helpers\\n  /////////////////////////////////////////////////////////////////////\\n\\n  function getAssetPriceFromConverter(ITetuConverter converter, address token) external view returns (uint) {\\n    return IPriceOracle(IConverterController(converter.controller()).priceOracle()).getAssetPrice(token);\\n  }\\n\\n  function registerIncome(uint assetBefore, uint assetAfter) internal pure returns (uint earned, uint lost) {\\n    if (assetAfter > assetBefore) {\\n      earned = assetAfter - assetBefore;\\n    } else {\\n      lost = assetBefore - assetAfter;\\n    }\\n    return (earned, lost);\\n  }\\n\\n  /// @notice Register income and cover possible loss\\n  function coverPossibleStrategyLoss(uint assetBefore, uint assetAfter, address splitter) external returns (uint earned) {\\n    uint lost;\\n    (earned, lost) = ConverterStrategyBaseLib.registerIncome(assetBefore, assetAfter);\\n    if (lost != 0) {\\n      ISplitter(splitter).coverPossibleStrategyLoss(earned, lost);\\n    }\\n    emit FixPriceChanges(assetBefore, assetAfter);\\n  }\\n\\n  //endregion Other helpers\\n}\\n\\n\",\"keccak256\":\"0xcc5a1509229cfc3e1b6303053820384a18f6f24869e78266acb19b6db167ab15\",\"license\":\"MIT\"},\"contracts/strategies/ConverterStrategyBaseLib2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IForwarder.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuVaultV2.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ISplitter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/strategy/StrategyLib.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/IPriceOracle.sol\\\";\\nimport \\\"@tetu_io/tetu-converter/contracts/interfaces/ITetuConverter.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Math.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/ITetuLiquidator.sol\\\";\\nimport \\\"../libs/AppErrors.sol\\\";\\nimport \\\"../libs/AppLib.sol\\\";\\nimport \\\"../libs/TokenAmountsLib.sol\\\";\\nimport \\\"../libs/ConverterEntryKinds.sol\\\";\\n\\n/// @notice Continuation of ConverterStrategyBaseLib (workaround for size limits)\\nlibrary ConverterStrategyBaseLib2 {\\n  using SafeERC20 for IERC20;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                        DATA TYPES\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                        CONSTANTS\\n  /////////////////////////////////////////////////////////////////////\\n\\n  uint internal constant DENOMINATOR = 100_000;\\n\\n  /// @dev 0.5% of max profit for strategy TVL\\n  /// @notice Limit max amount of profit that can be send to insurance after price changing\\n  uint public constant PRICE_CHANGE_PROFIT_TOLERANCE = 500;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                        EVENTS\\n  /////////////////////////////////////////////////////////////////////\\n\\n  event OnChangePerformanceFeeRatio(uint newRatio);\\n  event LiquidationThresholdChanged(address token, uint amount);\\n  event ReinvestThresholdPercentChanged(uint amount);\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                        MAIN LOGIC\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Get balances of the {tokens_} except balance of the token at {indexAsset} position\\n  function getAvailableBalances(\\n    address[] memory tokens_,\\n    uint indexAsset\\n  ) external view returns (uint[] memory) {\\n    uint len = tokens_.length;\\n    uint[] memory amountsToConvert = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) continue;\\n      amountsToConvert[i] = IERC20(tokens_[i]).balanceOf(address(this));\\n    }\\n    return amountsToConvert;\\n  }\\n\\n  /// @notice Send {amount_} of {asset_} to {receiver_} and insurance\\n  /// @param asset_ Underlying asset\\n  /// @param amount_ Amount of underlying asset to be sent to\\n  /// @param receiver_ Performance receiver\\n  /// @param ratio [0..100_000], 100_000 - send full amount to perf, 0 - send full amount to the insurance.\\n  function sendPerformanceFee(address asset_, uint amount_, address splitter, address receiver_, uint ratio) external returns (\\n    uint toPerf,\\n    uint toInsurance\\n  ) {\\n    // read inside lib for reduce contract space in the main contract\\n    address insurance = address(ITetuVaultV2(ISplitter(splitter).vault()).insurance());\\n\\n    toPerf = amount_ * ratio / DENOMINATOR;\\n    toInsurance = amount_ - toPerf;\\n\\n    if (toPerf != 0) {\\n      IERC20(asset_).safeTransfer(receiver_, toPerf);\\n    }\\n    if (toInsurance != 0) {\\n      IERC20(asset_).safeTransfer(insurance, toInsurance);\\n    }\\n  }\\n\\n  function sendTokensToForwarder(\\n    address controller_,\\n    address splitter_,\\n    address[] memory tokens_,\\n    uint[] memory amounts_\\n  ) external {\\n    uint len = tokens_.length;\\n    IForwarder forwarder = IForwarder(IController(controller_).forwarder());\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      AppLib.approveIfNeeded(tokens_[i], amounts_[i], address(forwarder));\\n    }\\n\\n    (tokens_, amounts_) = TokenAmountsLib.filterZeroAmounts(tokens_, amounts_);\\n    forwarder.registerIncome(tokens_, amounts_, ISplitter(splitter_).vault(), true);\\n  }\\n\\n  /// @notice For each {token_} calculate a part of {amount_} to be used as collateral according to the weights.\\n  ///         I.e. we have 300 USDC, we need to split it on 100 USDC, 100 USDT, 100 DAI\\n  ///         USDC is main asset, USDT and DAI should be borrowed. We check amounts of USDT and DAI on the balance\\n  ///         and return collaterals reduced on that amounts. For main asset, we return full amount always (100 USDC).\\n  /// @return tokenAmountsOut Length of the array is equal to the length of {tokens_}\\n  function getCollaterals(\\n    uint amount_,\\n    address[] memory tokens_,\\n    uint[] memory weights_,\\n    uint totalWeight_,\\n    uint indexAsset_,\\n    IPriceOracle priceOracle\\n  ) external view returns (\\n    uint[] memory tokenAmountsOut\\n  ) {\\n    uint len = tokens_.length;\\n    tokenAmountsOut = new uint[](len);\\n\\n    // get token prices and decimals\\n    uint[] memory prices = new uint[](len);\\n    uint[] memory decs = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      decs[i] = 10 ** IERC20Metadata(tokens_[i]).decimals();\\n      prices[i] = priceOracle.getAssetPrice(tokens_[i]);\\n    }\\n\\n    // split the amount on tokens proportionally to the weights\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      uint amountAssetForToken = amount_ * weights_[i] / totalWeight_;\\n\\n      if (i == indexAsset_) {\\n        tokenAmountsOut[i] = amountAssetForToken;\\n      } else {\\n        // if we have some tokens on balance then we need to use only a part of the collateral\\n        uint tokenAmountToBeBorrowed = amountAssetForToken\\n          * prices[indexAsset_]\\n          * decs[i]\\n          / prices[i]\\n          / decs[indexAsset_];\\n\\n        uint tokenBalance = IERC20(tokens_[i]).balanceOf(address(this));\\n        if (tokenBalance < tokenAmountToBeBorrowed) {\\n          tokenAmountsOut[i] = amountAssetForToken * (tokenAmountToBeBorrowed - tokenBalance) / tokenAmountToBeBorrowed;\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Calculate amount of liquidity that should be withdrawn from the pool to get {targetAmount_}\\n  ///               liquidityAmount = _depositorLiquidity() * {liquidityRatioOut} / 1e18\\n  ///         User needs to withdraw {targetAmount_} in main asset.\\n  ///         There are two kinds of available liquidity:\\n  ///         1) liquidity in the pool - {depositorLiquidity_}\\n  ///         2) Converted amounts on balance of the strategy - {baseAmounts_}\\n  ///         To withdraw {targetAmount_} we need\\n  ///         1) Reconvert converted amounts back to main asset\\n  ///         2) IF result amount is not necessary - withdraw some liquidity from the pool\\n  ///            and also convert it to the main asset.\\n  /// @dev This is a writable function with read-only behavior (because of the quote-call)\\n  /// @param targetAmount_ Required amount of main asset to be withdrawn from the strategy; 0 - withdraw all\\n  /// @param strategy_ Address of the strategy\\n  /// @return resultAmount Amount of liquidity that should be withdrawn from the pool, cannot exceed depositorLiquidity\\n  /// @return amountsToConvertOut Amounts of {tokens} that should be converted to the main asset\\n  function getLiquidityAmount(\\n    uint targetAmount_,\\n    address strategy_,\\n    address[] memory tokens,\\n    uint indexAsset,\\n    ITetuConverter converter,\\n    uint investedAssets,\\n    uint depositorLiquidity\\n  ) external returns (\\n    uint resultAmount,\\n    uint[] memory amountsToConvertOut\\n  ) {\\n    bool all = targetAmount_ == 0;\\n\\n    uint len = tokens.length;\\n    amountsToConvertOut = new uint[](len);\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      if (i == indexAsset) continue;\\n\\n      uint balance = IERC20(tokens[i]).balanceOf(address(this));\\n      if (balance != 0) {\\n        // let's estimate collateral that we received back after repaying balance-amount\\n        (uint expectedCollateral,) = converter.quoteRepay(strategy_, tokens[indexAsset], tokens[i], balance);\\n\\n        if (all || targetAmount_ != 0) {\\n          // We always repay WHOLE available balance-amount even if it gives us much more amount then we need.\\n          // We cannot repay a part of it because converter doesn't allow to know\\n          // what amount should be repaid to get given amount of collateral.\\n          // And it's too dangerous to assume that we can calculate this amount\\n          // by reducing balance-amount proportionally to expectedCollateral/targetAmount_\\n          amountsToConvertOut[i] = balance;\\n        }\\n\\n        targetAmount_ = targetAmount_ > expectedCollateral\\n          ? targetAmount_ - expectedCollateral\\n          : 0;\\n\\n        investedAssets = investedAssets > expectedCollateral\\n          ? investedAssets - expectedCollateral\\n          : 0;\\n      }\\n    }\\n\\n    uint liquidityRatioOut = all || investedAssets == 0\\n      ? 1e18\\n      : ((targetAmount_ == 0)\\n        ? 0\\n        : 1e18\\n        * 101 // add 1% on top...\\n        * targetAmount_ / investedAssets // a part of amount that we are going to withdraw\\n        / 100 // .. add 1% on top\\n      );\\n\\n    resultAmount = liquidityRatioOut != 0\\n      ? Math.min(liquidityRatioOut * depositorLiquidity / 1e18, depositorLiquidity)\\n      : 0;\\n  }\\n\\n  /// @notice Claim rewards from tetuConverter, generate result list of all available rewards and airdrops\\n  /// @dev The post-processing is rewards conversion to the main asset\\n  /// @param tokens_ tokens received from {_depositorPoolAssets}\\n  /// @param rewardTokens_ List of rewards claimed from the internal pool\\n  /// @param rewardTokens_ Amounts of rewards claimed from the internal pool\\n  /// @param tokensOut List of available rewards - not zero amounts, reward tokens don't repeat\\n  /// @param amountsOut Amounts of available rewards\\n  function claimConverterRewards(\\n    ITetuConverter converter_,\\n    address[] memory tokens_,\\n    address[] memory rewardTokens_,\\n    uint[] memory rewardAmounts_,\\n    uint[] memory balancesBefore\\n  ) external returns (\\n    address[] memory tokensOut,\\n    uint[] memory amountsOut\\n  ) {\\n    // Rewards from TetuConverter\\n    (address[] memory tokensTC, uint[] memory amountsTC) = converter_.claimRewards(address(this));\\n\\n    // Join arrays and recycle tokens\\n    (tokensOut, amountsOut) = TokenAmountsLib.combineArrays(\\n      rewardTokens_, rewardAmounts_,\\n      tokensTC, amountsTC,\\n      // by default, depositor assets have zero amounts here\\n      tokens_, new uint[](tokens_.length)\\n    );\\n\\n    // set fresh balances for depositor tokens\\n    uint len = tokensOut.length;\\n    for (uint i; i < len; i = AppLib.uncheckedInc(i)) {\\n      for (uint j; j < tokens_.length; j = AppLib.uncheckedInc(j)) {\\n        if (tokensOut[i] == tokens_[j]) {\\n          amountsOut[i] = IERC20(tokens_[j]).balanceOf(address(this)) - balancesBefore[j];\\n        }\\n      }\\n    }\\n\\n    // filter zero amounts out\\n    (tokensOut, amountsOut) = TokenAmountsLib.filterZeroAmounts(tokensOut, amountsOut);\\n  }\\n\\n  /// @notice Send given amount of underlying to the insurance\\n  /// @param strategyBalance Total strategy balance = balance of underlying + current invested assets amount\\n  /// @return Amount of underlying sent to the insurance\\n  function sendToInsurance(address asset, uint amount, address splitter, uint strategyBalance) external returns (uint) {\\n    uint amountToSend = Math.min(amount, IERC20(asset).balanceOf(address(this)));\\n    if (amountToSend != 0) {\\n      // max amount that can be send to insurance is limited by PRICE_CHANGE_PROFIT_TOLERANCE\\n\\n      // Amount limitation should be implemented in the same way as in StrategySplitterV2._coverLoss\\n      // Revert or cutting amount in both cases\\n\\n      // amountToSend = Math.min(amountToSend, PRICE_CHANGE_PROFIT_TOLERANCE * strategyBalance / 100_000);\\n      require(strategyBalance != 0, AppErrors.ZERO_BALANCE);\\n      require(amountToSend <= PRICE_CHANGE_PROFIT_TOLERANCE * strategyBalance / 100_000, AppErrors.EARNED_AMOUNT_TOO_HIGH);\\n      IERC20(asset).safeTransfer(address(ITetuVaultV2(ISplitter(splitter).vault()).insurance()), amountToSend);\\n    }\\n    return amountToSend;\\n  }\\n\\n  //region ---------------------------------------- Setters\\n  function checkPerformanceFeeRatioChanged(address controller, uint ratio_) external {\\n    StrategyLib.onlyOperators(controller);\\n    require(ratio_ <= DENOMINATOR, StrategyLib.WRONG_VALUE);\\n    emit OnChangePerformanceFeeRatio(ratio_);\\n  }\\n\\n  function checkReinvestThresholdPercentChanged(address controller, uint percent_) external {\\n    StrategyLib.onlyOperators(controller);\\n    require(percent_ <= DENOMINATOR, StrategyLib.WRONG_VALUE);\\n    emit ReinvestThresholdPercentChanged(percent_);\\n  }\\n\\n  function checkLiquidationThresholdChanged(address controller, address token, uint amount) external {\\n    StrategyLib.onlyOperators(controller);\\n    emit LiquidationThresholdChanged(token, amount);\\n  }\\n  //endregion ---------------------------------------- Setters\\n\\n}\\n\\n\",\"keccak256\":\"0x45ab396650a7756055c796ff95cbc4b7da0d981e55778a777964fd712e815bb9\",\"license\":\"MIT\"},\"contracts/strategies/DepositorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title Abstract base Depositor contract.\\n/// @notice Converter strategies should inherit xDepositor.\\n/// @notice All communication with external pools should be done at inherited contract\\n/// @author bogdoslav\\nabstract contract DepositorBase {\\n\\n  /// @notice Returns pool assets\\n  function _depositorPoolAssets() internal virtual view returns (address[] memory assets);\\n\\n  /// @notice Returns pool token proportions\\n  function _depositorPoolWeights() internal virtual view returns (uint[] memory weights, uint total);\\n\\n  /// @notice Returns pool token reserves\\n  function _depositorPoolReserves() internal virtual view returns (uint[] memory reserves);\\n\\n  /// @notice Returns depositor's pool shares / lp token amount\\n  function _depositorLiquidity() internal virtual view returns (uint);\\n\\n  //// @notice Total amount of LP tokens in the depositor\\n  function _depositorTotalSupply() internal view virtual returns (uint);\\n\\n  /// @notice Deposit given amount to the pool.\\n  /// @dev Depositor must care about tokens approval by itself.\\n  function _depositorEnter(uint[] memory amountsDesired_) internal virtual returns (\\n    uint[] memory amountsConsumed,\\n    uint liquidityOut\\n  );\\n\\n  /// @notice Withdraw given lp amount from the pool.\\n  /// @param liquidityAmount Amount of liquidity to be converted\\n  ///                        If requested liquidityAmount >= invested, then should make full exit.\\n  /// @return amountsOut The order of amounts is the same as in {_depositorPoolAssets}\\n  function _depositorExit(uint liquidityAmount) internal virtual returns (uint[] memory amountsOut);\\n\\n  /// @notice Quotes output for given lp amount from the pool.\\n  /// @dev Write function with read-only behavior. BalanceR's depositor requires not-view.\\n  /// @param liquidityAmount Amount of liquidity to be converted\\n  ///                        If requested liquidityAmount >= invested, then should make full exit.\\n  /// @return amountsOut The order of amounts is the same as in {_depositorPoolAssets}\\n  function _depositorQuoteExit(uint liquidityAmount) internal virtual returns (uint[] memory amountsOut);\\n\\n  /// @dev If pool supports emergency withdraw need to call it for emergencyExit()\\n  /// @return amountsOut The order of amounts is the same as in {_depositorPoolAssets}\\n  function _depositorEmergencyExit() internal virtual returns (uint[] memory amountsOut) {\\n    return _depositorExit(_depositorLiquidity());\\n  }\\n\\n  /// @notice Claim all possible rewards.\\n  /// @return rewardTokens Claimed token addresses\\n  /// @return rewardAmounts Claimed token amounts\\n  /// @return depositorBalancesBefore Must have the same length as _depositorPoolAssets and represent balances before claim in the same order\\n  function _depositorClaimRewards() internal virtual returns (\\n    address[] memory rewardTokens,\\n    uint[] memory rewardAmounts,\\n    uint[] memory depositorBalancesBefore\\n  );\\n}\\n\",\"keccak256\":\"0x70915b03d5b7fb42f7a930745974b9cf8f735d6a82b1b9054c2ccaf68c5c9436\",\"license\":\"MIT\"},\"contracts/strategies/kyber/KyberConverterStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../ConverterStrategyBase.sol\\\";\\nimport \\\"./KyberDepositor.sol\\\";\\nimport \\\"./KyberConverterStrategyLogicLib.sol\\\";\\nimport \\\"../../libs/AppPlatforms.sol\\\";\\nimport \\\"../../interfaces/IRebalancingStrategy.sol\\\";\\nimport \\\"../../interfaces/IFarmingStrategy.sol\\\";\\nimport \\\"./KyberStrategyErrors.sol\\\";\\n\\n\\ncontract KyberConverterStrategy is KyberDepositor, ConverterStrategyBase, IRebalancingStrategy, IFarmingStrategy {\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                CONSTANTS\\n  /////////////////////////////////////////////////////////////////////\\n\\n  string public constant override NAME = \\\"Kyber Converter Strategy\\\";\\n  string public constant override PLATFORM = AppPlatforms.KYBER;\\n  string public constant override STRATEGY_VERSION = \\\"1.0.1\\\";\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                INIT\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Initialize the strategy with the given parameters.\\n  /// @param controller_ The address of the controller.\\n  /// @param splitter_ The address of the splitter.\\n  /// @param converter_ The address of the converter.\\n  /// @param pool_ The address of the pool.\\n  /// @param tickRange_ The tick range for the liquidity position.\\n  /// @param rebalanceTickRange_ The tick range for rebalancing.\\n  function init(\\n    address controller_,\\n    address splitter_,\\n    address converter_,\\n    address pool_,\\n    int24 tickRange_,\\n    int24 rebalanceTickRange_,\\n    bool isStablePool,\\n    uint pId\\n  ) external initializer {\\n    __ConverterStrategyBase_init(controller_, splitter_, converter_);\\n    KyberConverterStrategyLogicLib.initStrategyState(\\n      state,\\n      controller_,\\n      converter_,\\n      pool_,\\n      tickRange_,\\n      rebalanceTickRange_,\\n      ISplitter(splitter_).asset(),\\n      isStablePool\\n    );\\n\\n    state.pId = pId;\\n\\n    // setup specific name for UI\\n    strategySpecificName = KyberConverterStrategyLogicLib.createSpecificName(state);\\n    emit StrategyLib.StrategySpecificNameChanged(strategySpecificName);\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                OPERATOR ACTIONS\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Disable fuse for the strategy.\\n  function disableFuse() external {\\n    StrategyLib.onlyOperators(controller());\\n    state.isFuseTriggered = false;\\n    state.lastPrice = ConverterStrategyBaseLib.getOracleAssetsPrice(converter, state.tokenA, state.tokenB);\\n\\n    KyberConverterStrategyLogicLib.emitDisableFuse();\\n  }\\n\\n  function changePId(uint pId) external {\\n    StrategyLib.onlyOperators(controller());\\n    require(!state.staked, KyberStrategyErrors.NOT_UNSTAKED);\\n    state.pId = pId;\\n  }\\n\\n  /// @notice Set the fuse threshold for the strategy.\\n  /// @param newFuseThreshold The new fuse threshold value.\\n  function setFuseThreshold(uint newFuseThreshold) external {\\n    StrategyLib.onlyOperators(controller());\\n    state.fuseThreshold = newFuseThreshold;\\n\\n    KyberConverterStrategyLogicLib.emitNewFuseThreshold(newFuseThreshold);\\n  }\\n\\n  function setStrategyProfitHolder(address strategyProfitHolder) external {\\n    StrategyLib.onlyOperators(controller());\\n    state.strategyProfitHolder = strategyProfitHolder;\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                   METRIC VIEWS\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Check if the strategy needs rebalancing.\\n  /// @return A boolean indicating if the strategy needs rebalancing.\\n  function needRebalance() public view returns (bool) {\\n    (bool needStake, bool needUnstake) = KyberConverterStrategyLogicLib.needRebalanceStaking(state);\\n    return KyberConverterStrategyLogicLib.needRebalance(state) || needStake || needUnstake;\\n  }\\n\\n  /// @return swapAtoB, swapAmount\\n  function quoteRebalanceSwap() external returns (bool, uint) {\\n    return KyberConverterStrategyLogicLib.quoteRebalanceSwap(state, converter);\\n  }\\n\\n  function canFarm() external view returns (bool) {\\n    return !KyberConverterStrategyLogicLib.isFarmEnded(state.pId);\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                   CALLBACKS\\n  /////////////////////////////////////////////////////////////////////\\n\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256,\\n    bytes memory\\n  ) external pure returns (bytes4) {\\n    return this.onERC721Received.selector;\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                   REBALANCE\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @dev The rebalancing functionality is the core of this strategy.\\n  ///      Swap method is used.\\n  function rebalance() external {\\n    (uint profitToCover, uint oldTotalAssets, address _controller) = _startRebalance();\\n\\n    // _depositorEnter(tokenAmounts) if length == 2\\n    uint[] memory tokenAmounts = KyberConverterStrategyLogicLib.rebalance(\\n      state,\\n      converter,\\n      _controller,\\n      oldTotalAssets,\\n      profitToCover,\\n      splitter\\n    );\\n\\n    if (tokenAmounts.length == 2) {\\n      _depositorEnter(tokenAmounts);\\n    }\\n\\n    //updating investedAssets based on new baseAmounts\\n    _updateInvestedAssets();\\n  }\\n\\n  function rebalanceSwapByAgg(bool direction, uint amount, address agg, bytes memory swapData) external {\\n    (uint profitToCover, uint oldTotalAssets,) = _startRebalance();\\n\\n    // _depositorEnter(tokenAmounts) if length == 2\\n    uint[] memory tokenAmounts = KyberConverterStrategyLogicLib.rebalanceSwapByAgg(\\n      state,\\n      converter,\\n      oldTotalAssets,\\n      KyberConverterStrategyLogicLib.RebalanceSwapByAggParams(\\n        direction,\\n        amount,\\n        agg,\\n        swapData\\n      ),\\n      profitToCover,\\n      splitter\\n    );\\n\\n    if (tokenAmounts.length == 2) {\\n      _depositorEnter(tokenAmounts);\\n    }\\n\\n    //updating investedAssets based on new baseAmounts\\n    _updateInvestedAssets();\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                   INTERNAL LOGIC\\n  /////////////////////////////////////////////////////////////////////\\n\\n  function _startRebalance() internal returns(uint profitToCover, uint oldTotalAssets,  address _controller) {\\n    _controller = controller();\\n    StrategyLib.onlyOperators(_controller);\\n\\n    require(needRebalance(), KyberStrategyErrors.NO_REBALANCE_NEEDED);\\n\\n    (, profitToCover) = _fixPriceChanges(true);\\n    oldTotalAssets = totalAssets() - profitToCover;\\n\\n    KyberConverterStrategyLogicLib.claimRewardsBeforeExitIfRequired(state);\\n\\n    /// withdraw all liquidity from pool with adding calculated fees to rebalanceEarned0, rebalanceEarned1\\n    /// after disableFuse() liquidity is zero\\n    if (state.totalLiquidity > 0) {\\n      _depositorEmergencyExit();\\n    }\\n  }\\n\\n  function _beforeDeposit(\\n    ITetuConverter tetuConverter_,\\n    uint amount_,\\n    address[] memory /*tokens_*/,\\n    uint /*indexAsset_*/\\n  ) override internal virtual returns (\\n    uint[] memory tokenAmounts\\n  ) {\\n    require(!needRebalance(), KyberStrategyErrors.NEED_REBALANCE);\\n\\n    tokenAmounts = new uint[](2);\\n    uint spentCollateral;\\n\\n    bytes memory entryData = KyberConverterStrategyLogicLib.getEntryData(\\n      state.pool,\\n      state.lowerTick,\\n      state.upperTick,\\n      state.depositorSwapTokens\\n    );\\n\\n    AppLib.approveIfNeeded(state.tokenA, amount_, address(tetuConverter_));\\n    (spentCollateral, tokenAmounts[1]) = ConverterStrategyBaseLib.openPosition(\\n      tetuConverter_,\\n      entryData,\\n      state.tokenA,\\n      state.tokenB,\\n      amount_,\\n      0\\n    );\\n\\n    tokenAmounts[0] = amount_ - spentCollateral;\\n  }\\n\\n  /// @notice Claim rewards, do _processClaims() after claiming, calculate earned and lost amounts\\n  /// @return earned The amount of earned rewards.\\n  /// @return lost The amount of lost rewards.\\n  /// @return assetBalanceAfterClaim The asset balance after claiming rewards.\\n  function _handleRewards() override internal virtual returns (uint earned, uint lost, uint assetBalanceAfterClaim) {\\n    (address[] memory rewardTokens, uint[] memory amounts) = _claim();\\n    earned = KyberConverterStrategyLogicLib.calcEarned(state.tokenA, controller(), rewardTokens, amounts);\\n    _rewardsLiquidation(rewardTokens, amounts);\\n    return (earned, lost, AppLib.balance(asset));\\n  }\\n\\n  /// @notice Deposit given amount to the pool.\\n  /// @param amount_ The amount to be deposited.\\n  /// @param updateTotalAssetsBeforeInvest_ A boolean indicating if the total assets should be updated before investing.\\n  /// @return strategyLoss Loss should be covered from Insurance\\n  function _depositToPool(uint amount_, bool updateTotalAssetsBeforeInvest_) override internal virtual returns (\\n    uint strategyLoss\\n  ) {\\n    if (state.isFuseTriggered) {\\n      uint[] memory tokenAmounts = new uint[](2);\\n      tokenAmounts[0] = amount_;\\n      emit OnDepositorEnter(tokenAmounts, tokenAmounts);\\n      return 0;\\n    } else {\\n      return super._depositToPool(amount_, updateTotalAssetsBeforeInvest_);\\n    }\\n  }\\n\\n  function _beforeWithdraw(uint /*amount*/) internal view override {\\n    require(!needRebalance(), KyberStrategyErrors.NEED_REBALANCE);\\n  }\\n}\\n\",\"keccak256\":\"0x2ee085a9252810bfd825c284ff7c44b2ff41a75977936c6464385ac6081212b6\",\"license\":\"MIT\"},\"contracts/strategies/kyber/KyberConverterStrategyLogicLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./KyberLib.sol\\\";\\nimport \\\"./KyberDebtLib.sol\\\";\\nimport \\\"./KyberStrategyErrors.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/lib/StringLib.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/SafeERC20.sol\\\";\\n\\nlibrary KyberConverterStrategyLogicLib {\\n  using SafeERC20 for IERC20;\\n\\n  //////////////////////////////////////////\\n  //            CONSTANTS\\n  //////////////////////////////////////////\\n\\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_STABLE = 300;\\n  uint internal constant LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE = 500;\\n  /// @dev 0.5% by default\\n  uint internal constant DEFAULT_FUSE_THRESHOLD = 5e15;\\n  IBasePositionManager internal constant KYBER_NFT = IBasePositionManager(0xe222fBE074A436145b255442D919E4E3A6c6a480);\\n  IKyberSwapElasticLM internal constant FARMING_CENTER = IKyberSwapElasticLM(0x7D5ba536ab244aAA1EA42aB88428847F25E3E676);\\n  ITicksFeesReader internal constant TICKS_FEES_READER = ITicksFeesReader(0x8Fd8Cb948965d9305999D767A02bf79833EADbB3);\\n  address public constant KNC = 0x1C954E8fe737F99f68Fa1CCda3e51ebDB291948C;\\n\\n  //////////////////////////////////////////\\n  //            EVENTS\\n  //////////////////////////////////////////\\n\\n  event FuseTriggered();\\n  event Rebalanced(uint loss, uint coveredByRewards);\\n  event DisableFuse();\\n  event NewFuseThreshold(uint newFuseThreshold);\\n  event KyberFeesClaimed(uint fee0, uint fee1);\\n  event KyberRewardsClaimed(uint reward);\\n\\n  //////////////////////////////////////////\\n  //            STRUCTURES\\n  //////////////////////////////////////////\\n\\n  struct State {\\n    address strategyProfitHolder;\\n    address tokenA;\\n    address tokenB;\\n    IPool pool;\\n    int24 tickSpacing;\\n    bool isStablePool;\\n    int24 lowerTick;\\n    int24 upperTick;\\n    int24 rebalanceTickRange;\\n    bool depositorSwapTokens;\\n    uint128 totalLiquidity;\\n    bool isFuseTriggered;\\n    uint fuseThreshold;\\n    uint lastPrice;\\n    uint tokenId;\\n    // farming\\n    uint pId;\\n    bool staked;\\n  }\\n\\n  struct RebalanceSwapByAggParams {\\n    bool direction;\\n    uint amount;\\n    address agg;\\n    bytes swapData;\\n  }\\n\\n  struct RebalanceLocalVariables {\\n    int24 upperTick;\\n    int24 lowerTick;\\n    int24 tickSpacing;\\n    IPool pool;\\n    address tokenA;\\n    address tokenB;\\n    uint lastPrice;\\n    uint fuseThreshold;\\n    bool depositorSwapTokens;\\n    uint notCoveredLoss;\\n    int24 newLowerTick;\\n    int24 newUpperTick;\\n    bool isStablePool;\\n    uint newPrice;\\n    uint newTotalAssets;\\n    bool needRebalance;\\n  }\\n\\n  struct EnterLocalVariables {\\n    IPool pool;\\n    int24 upperTick;\\n    int24 lowerTick;\\n    uint tokenId;\\n    uint pId;\\n  }\\n\\n  struct ExitLocalVariables {\\n    address strategyProfitHolder;\\n    uint pId;\\n    address tokenA;\\n    address tokenB;\\n  }\\n\\n  //////////////////////////////////////////\\n  //            HELPERS\\n  //////////////////////////////////////////\\n\\n  function emitDisableFuse() external {\\n    emit DisableFuse();\\n  }\\n\\n  function emitNewFuseThreshold(uint value) external {\\n    emit NewFuseThreshold(value);\\n  }\\n\\n  /// @notice Check if the fuse is enabled based on the price difference and fuse threshold.\\n  /// @param oldPrice The old price.\\n  /// @param newPrice The new price.\\n  /// @param fuseThreshold The fuse threshold.\\n  /// @return A boolean indicating if the fuse is enabled.\\n  function isEnableFuse(uint oldPrice, uint newPrice, uint fuseThreshold) internal pure returns (bool) {\\n    return oldPrice > newPrice ? (oldPrice - newPrice) > fuseThreshold : (newPrice - oldPrice) > fuseThreshold;\\n  }\\n\\n  function initStrategyState(\\n    State storage state,\\n    address controller_,\\n    address converter,\\n    address pool,\\n    int24 tickRange,\\n    int24 rebalanceTickRange,\\n    address asset_,\\n    bool isStablePool\\n  ) external {\\n    require(pool != address(0), AppErrors.ZERO_ADDRESS);\\n    state.pool = IPool(pool);\\n\\n    state.isStablePool = isStablePool;\\n\\n    state.rebalanceTickRange = rebalanceTickRange;\\n\\n    _setInitialDepositorValues(\\n      state,\\n      IPool(pool),\\n      tickRange,\\n      rebalanceTickRange,\\n      asset_\\n    );\\n\\n    address liquidator = IController(controller_).liquidator();\\n    address tokenA = state.tokenA;\\n    address tokenB = state.tokenB;\\n    IERC20(tokenA).approve(liquidator, type(uint).max);\\n    IERC20(tokenB).approve(liquidator, type(uint).max);\\n    IERC20(tokenA).approve(address(KYBER_NFT), type(uint).max);\\n    IERC20(tokenB).approve(address(KYBER_NFT), type(uint).max);\\n    IERC721(address(KYBER_NFT)).setApprovalForAll(address(FARMING_CENTER), true);\\n\\n    if (isStablePool) {\\n      /// for stable pools fuse can be enabled\\n      state.fuseThreshold = DEFAULT_FUSE_THRESHOLD;\\n      emit NewFuseThreshold(DEFAULT_FUSE_THRESHOLD);\\n      state.lastPrice = ConverterStrategyBaseLib.getOracleAssetsPrice(ITetuConverter(converter), tokenA, tokenB);\\n    }\\n  }\\n\\n  function createSpecificName(State storage state) external view returns (string memory) {\\n    return string(abi.encodePacked(\\\"Kyber \\\", IERC20Metadata(state.tokenA).symbol(), \\\"/\\\", IERC20Metadata(state.tokenB).symbol()));\\n  }\\n\\n  function getPoolReserves(State storage state) external view returns (uint[] memory reserves) {\\n    reserves = new uint[](2);\\n    (uint160 sqrtRatioX96, , ,) = state.pool.getPoolState();\\n\\n    (reserves[0], reserves[1]) = KyberLib.getAmountsForLiquidity(\\n      sqrtRatioX96,\\n      state.lowerTick,\\n      state.upperTick,\\n      state.totalLiquidity\\n    );\\n\\n    if (state.depositorSwapTokens) {\\n      (reserves[0], reserves[1]) = (reserves[1], reserves[0]);\\n    }\\n  }\\n\\n  /// @dev Gets the liquidator swap slippage based on the pool type (stable or volatile).\\n  /// @return The liquidator swap slippage percentage.\\n  function _getLiquidatorSwapSlippage(bool isStablePool) internal pure returns (uint) {\\n    return isStablePool ? LIQUIDATOR_SWAP_SLIPPAGE_STABLE : LIQUIDATOR_SWAP_SLIPPAGE_VOLATILE;\\n  }\\n\\n  //////////////////////////////////////////\\n  //            Pool info\\n  //////////////////////////////////////////\\n\\n  function getEntryData(\\n    IPool pool,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    bool depositorSwapTokens\\n  ) public view returns (bytes memory entryData) {\\n    return KyberDebtLib.getEntryData(pool, lowerTick, upperTick, depositorSwapTokens);\\n  }\\n\\n  //////////////////////////////////////////\\n  //            CALCULATIONS\\n  //////////////////////////////////////////\\n\\n  /// @notice Calculate and set the initial values for a QuickSwap V3 pool Depositor.\\n  /// @param state Depositor storage state struct\\n  /// @param pool The QuickSwap V3 pool to get the initial values from.\\n  /// @param tickRange_ The tick range for the pool.\\n  /// @param rebalanceTickRange_ The rebalance tick range for the pool.\\n  /// @param asset_ Underlying asset of the depositor.\\n  function _setInitialDepositorValues(\\n    State storage state,\\n    IPool pool,\\n    int24 tickRange_,\\n    int24 rebalanceTickRange_,\\n    address asset_\\n  ) internal {\\n    int24 tickSpacing = KyberLib.getTickSpacing(pool);\\n    if (tickRange_ != 0) {\\n      require(tickRange_ == tickRange_ / tickSpacing * tickSpacing, KyberStrategyErrors.INCORRECT_TICK_RANGE);\\n      require(rebalanceTickRange_ == rebalanceTickRange_ / tickSpacing * tickSpacing, KyberStrategyErrors.INCORRECT_REBALANCE_TICK_RANGE);\\n    }\\n    state.tickSpacing = tickSpacing;\\n    (state.lowerTick, state.upperTick) = KyberDebtLib.calcTickRange(pool, tickRange_, tickSpacing);\\n    address token0 = address(pool.token0());\\n    address token1 = address(pool.token1());\\n    require(asset_ == token0 || asset_ == token1, KyberStrategyErrors.INCORRECT_ASSET);\\n    if (asset_ == token0) {\\n      state.tokenA = token0;\\n      state.tokenB = token1;\\n      state.depositorSwapTokens = false;\\n    } else {\\n      state.tokenA = token1;\\n      state.tokenB = token0;\\n      state.depositorSwapTokens = true;\\n    }\\n  }\\n\\n  //////////////////////////////////////////\\n  //            Joins to the pool\\n  //////////////////////////////////////////\\n\\n  function enter(\\n    State storage state,\\n    uint[] memory amountsDesired_\\n  ) external returns (uint[] memory amountsConsumed, uint liquidityOut) {\\n    EnterLocalVariables memory vars = EnterLocalVariables({\\n      pool: state.pool,\\n      lowerTick : state.lowerTick,\\n      upperTick : state.upperTick,\\n      tokenId : state.tokenId,\\n      pId : state.pId\\n    });\\n    bool depositorSwapTokens = state.depositorSwapTokens;\\n    (address token0, address token1) = depositorSwapTokens ? (state.tokenB, state.tokenA) : (state.tokenA, state.tokenB);\\n    if (depositorSwapTokens) {\\n      (amountsDesired_[0], amountsDesired_[1]) = (amountsDesired_[1], amountsDesired_[0]);\\n    }\\n    amountsConsumed = new uint[](2);\\n    uint128 liquidity;\\n\\n    if (vars.tokenId > 0) {\\n      (IBasePositionManager.Position memory pos,) = KYBER_NFT.positions(vars.tokenId);\\n      if (pos.tickLower != vars.lowerTick || pos.tickUpper != vars.upperTick) {\\n        KYBER_NFT.burn(vars.tokenId);\\n        vars.tokenId = 0;\\n      }\\n    }\\n\\n    if (vars.tokenId == 0) {\\n      (vars.tokenId, liquidity, amountsConsumed[0], amountsConsumed[1]) = KYBER_NFT.mint(IBasePositionManager.MintParams(\\n        token0,\\n        token1,\\n        state.pool.swapFeeUnits(),\\n        vars.lowerTick,\\n        vars.upperTick,\\n        KyberLib.getPreviousTicks(vars.pool, vars.lowerTick, vars.upperTick),\\n        amountsDesired_[0],\\n        amountsDesired_[1],\\n        0,\\n        0,\\n        address(this),\\n        block.timestamp\\n      ));\\n\\n      state.tokenId = vars.tokenId;\\n\\n      {\\n        if (!isFarmEnded(vars.pId)) {\\n          uint[] memory nftIds = new uint[](1);\\n          nftIds[0] = vars.tokenId;\\n          uint[] memory liqs = new uint[](1);\\n          liqs[0] = uint(liquidity);\\n          FARMING_CENTER.deposit(nftIds);\\n          state.staked = true;\\n          FARMING_CENTER.join(vars.pId, nftIds, liqs);\\n        }\\n      }\\n    } else {\\n      (liquidity, amountsConsumed[0], amountsConsumed[1],) = KYBER_NFT.addLiquidity(IBasePositionManager.IncreaseLiquidityParams(\\n        vars.tokenId,\\n        KyberLib.getPreviousTicks(vars.pool, vars.lowerTick, vars.upperTick),\\n        amountsDesired_[0],\\n        amountsDesired_[1],\\n        0,\\n        0,\\n        block.timestamp\\n      ));\\n\\n      if (!isFarmEnded(vars.pId)) {\\n        uint[] memory nftIds = new uint[](1);\\n        nftIds[0] = vars.tokenId;\\n        if (state.totalLiquidity == 0) {\\n          FARMING_CENTER.deposit(nftIds);\\n          state.staked = true;\\n        }\\n\\n        uint[] memory liqs = new uint[](1);\\n        liqs[0] = uint(liquidity);\\n        FARMING_CENTER.join(vars.pId, nftIds, liqs);\\n      }\\n    }\\n\\n    state.totalLiquidity += liquidity;\\n    liquidityOut = uint(liquidity);\\n  }\\n\\n  //////////////////////////////////////////\\n  //            Exit from the pool\\n  //////////////////////////////////////////\\n\\n  function exit(\\n    State storage state,\\n    uint128 liquidityAmountToExit\\n  ) external returns (uint[] memory amountsOut) {\\n    amountsOut = new uint[](2);\\n\\n    ExitLocalVariables memory vars = ExitLocalVariables({\\n      strategyProfitHolder : state.strategyProfitHolder,\\n      pId : state.pId,\\n      tokenA : state.tokenA,\\n      tokenB : state.tokenB\\n    });\\n\\n    uint128 liquidity = state.totalLiquidity;\\n\\n    require(liquidity >= liquidityAmountToExit, KyberStrategyErrors.WRONG_LIQUIDITY);\\n\\n    bool staked = state.staked;\\n\\n    uint[] memory nftIds = new uint[](1);\\n    nftIds[0] = state.tokenId;\\n    uint[] memory liqs = new uint[](1);\\n    uint feeA;\\n    uint feeB;\\n\\n    // get rewards\\n    if (staked) {\\n      uint reward = _harvest(nftIds[0], vars.pId);\\n      // send to profit holder\\n      if (reward > 0) {\\n        IERC20(KNC).safeTransfer(vars.strategyProfitHolder, reward);\\n      }\\n\\n      // get fees\\n      // when exiting, fees are collected twice so as not to lose anything when rebalancing (the position goes out of range)\\n      (feeA, feeB) = _claimFees(state);\\n\\n      liqs[0] = uint(liquidity);\\n\\n      FARMING_CENTER.exit(vars.pId, nftIds, liqs);\\n\\n      // withdraw\\n      FARMING_CENTER.withdraw(nftIds);\\n      state.staked = false;\\n    }\\n\\n    // burn liquidity\\n    uint rTokensOwed;\\n    (amountsOut[0], amountsOut[1], rTokensOwed) = KYBER_NFT.removeLiquidity(IBasePositionManager.RemoveLiquidityParams(nftIds[0], liquidityAmountToExit, 0, 0, block.timestamp));\\n\\n    if (rTokensOwed > 0) {\\n      KYBER_NFT.syncFeeGrowth(nftIds[0]);\\n      (,uint amount0, uint amount1) = KYBER_NFT.burnRTokens(IBasePositionManager.BurnRTokenParams(nftIds[0], 0, 0, block.timestamp));\\n      if (state.depositorSwapTokens) {\\n        feeA += amount1;\\n        feeB += amount0;\\n        emit KyberFeesClaimed(amount1, amount0);\\n      } else {\\n        feeA += amount0;\\n        feeB += amount1;\\n        emit KyberFeesClaimed(amount0, amount1);\\n      }\\n    }\\n\\n    // transfer tokens\\n    KYBER_NFT.transferAllTokens(vars.tokenA, 0, address(this));\\n    KYBER_NFT.transferAllTokens(vars.tokenB, 0, address(this));\\n\\n    // send fees to profit holder\\n    if (feeA > 0) {\\n      IERC20(vars.tokenA).safeTransfer(vars.strategyProfitHolder, feeA);\\n    }\\n    if (feeB > 0) {\\n      IERC20(vars.tokenB).safeTransfer(vars.strategyProfitHolder, feeB);\\n    }\\n\\n    liquidity -= liquidityAmountToExit;\\n    state.totalLiquidity = liquidity;\\n\\n    if (liquidity > 0 && !isFarmEnded(vars.pId)) {\\n      liqs[0] = uint(liquidity);\\n      FARMING_CENTER.deposit(nftIds);\\n      state.staked = true;\\n      FARMING_CENTER.join(vars.pId, nftIds, liqs);\\n    }\\n  }\\n\\n  function quoteExit(\\n    State storage state,\\n    uint128 liquidityAmountToExit\\n  ) public view returns (uint[] memory amountsOut) {\\n    (uint160 sqrtRatioX96, , ,) = state.pool.getPoolState();\\n    amountsOut = new uint[](2);\\n    (amountsOut[0], amountsOut[1]) = KyberLib.getAmountsForLiquidity(\\n      sqrtRatioX96,\\n      state.lowerTick,\\n      state.upperTick,\\n      liquidityAmountToExit\\n    );\\n    if (state.depositorSwapTokens) {\\n      (amountsOut[0], amountsOut[1]) = (amountsOut[1], amountsOut[0]);\\n    }\\n  }\\n\\n  //////////////////////////////////////////\\n  //            Rewards\\n  //////////////////////////////////////////\\n\\n  function claimRewardsBeforeExitIfRequired(State storage state) external {\\n    (,bool needUnstake) = needRebalanceStaking(state);\\n    if (needUnstake) {\\n      claimRewards(state);\\n    }\\n  }\\n\\n  function claimRewards(State storage state) public returns (\\n    address[] memory tokensOut,\\n    uint[] memory amountsOut,\\n    uint[] memory balancesBefore\\n  ) {\\n    address strategyProfitHolder = state.strategyProfitHolder;\\n    uint tokenId = state.tokenId;\\n    tokensOut = new address[](3);\\n    tokensOut[0] = state.tokenA;\\n    tokensOut[1] = state.tokenB;\\n    tokensOut[2] = KNC;\\n\\n    balancesBefore = new uint[](3);\\n    for (uint i; i < tokensOut.length; i++) {\\n      balancesBefore[i] = AppLib.balance(tokensOut[i]);\\n    }\\n\\n    amountsOut = new uint[](3);\\n    if (tokenId > 0 && state.totalLiquidity > 0) {\\n      (amountsOut[0], amountsOut[1]) = _claimFees(state);\\n      amountsOut[2] = _harvest(tokenId, state.pId);\\n    }\\n\\n    for (uint i; i < tokensOut.length; ++i) {\\n      uint b = IERC20(tokensOut[i]).balanceOf(strategyProfitHolder);\\n      if (b > 0) {\\n        IERC20(tokensOut[i]).transferFrom(strategyProfitHolder, address(this), b);\\n        amountsOut[i] += b;\\n      }\\n    }\\n  }\\n\\n  function _claimFees(State storage state) internal returns (uint amountA, uint amountB) {\\n    uint[] memory nftIds = new uint[](1);\\n    nftIds[0] = state.tokenId;\\n    address tokenA = state.tokenA;\\n    address tokenB = state.tokenB;\\n    uint bABefore = AppLib.balance(tokenA);\\n    uint bBBefore = AppLib.balance(tokenB);\\n\\n    (uint token0Owed, uint token1Owed) = TICKS_FEES_READER.getTotalFeesOwedToPosition(address(KYBER_NFT), address(state.pool), nftIds[0]);\\n    if (token0Owed > 0 || token1Owed > 0) {\\n      FARMING_CENTER.claimFee(nftIds, 0, 0, address(state.pool), false, block.timestamp);\\n\\n      amountA = AppLib.balance(tokenA) - bABefore;\\n      amountB = AppLib.balance(tokenB) - bBBefore;\\n      emit KyberFeesClaimed(amountA, amountB);\\n    }\\n  }\\n\\n  function _harvest(uint tokenId, uint pId) internal returns (uint amount) {\\n    uint[] memory nftIds = new uint[](1);\\n    nftIds[0] = tokenId;\\n    uint[] memory pids = new uint[](1);\\n    pids[0] = pId;\\n    IKyberSwapElasticLM.HarvestData memory data = IKyberSwapElasticLM.HarvestData({\\n      pIds: pids\\n    });\\n    bytes[] memory datas = new bytes[](1);\\n    datas[0] = abi.encode(data);\\n    uint bBefore = AppLib.balance(KNC);\\n    FARMING_CENTER.harvestMultiplePools(nftIds, datas);\\n    amount = AppLib.balance(KNC) - bBefore;\\n    if (amount > 0) {\\n      emit KyberRewardsClaimed(amount);\\n    }\\n  }\\n\\n  function calcEarned(address asset, address controller, address[] memory rewardTokens, uint[] memory amounts) external view returns (uint) {\\n    ITetuLiquidator liquidator = ITetuLiquidator(IController(controller).liquidator());\\n    uint len = rewardTokens.length;\\n    uint earned;\\n    for (uint i; i < len; ++i) {\\n      address token = rewardTokens[i];\\n      if (token == asset) {\\n        earned += amounts[i];\\n      } else {\\n        earned += liquidator.getPrice(rewardTokens[i], asset, amounts[i]);\\n      }\\n    }\\n\\n    return earned;\\n  }\\n\\n  //////////////////////////////////////////\\n  //            Rebalance\\n  //////////////////////////////////////////\\n\\n  function needRebalance(State storage state) public view returns (bool) {\\n    if (state.isFuseTriggered) {\\n      return false;\\n    }\\n\\n    (, int24 tick, ,) = state.pool.getPoolState();\\n    int24 upperTick = state.upperTick;\\n    int24 lowerTick = state.lowerTick;\\n    if (upperTick - lowerTick == state.tickSpacing) {\\n      return tick < lowerTick || tick >= upperTick;\\n    } else {\\n      int24 halfRange = (upperTick - lowerTick) / 2;\\n      int24 oldMedianTick = lowerTick + halfRange;\\n      if (tick > oldMedianTick) {\\n        return tick - oldMedianTick >= state.rebalanceTickRange;\\n      }\\n      return oldMedianTick - tick > state.rebalanceTickRange;\\n    }\\n  }\\n\\n  function needRebalanceStaking(State storage state) public view returns (bool needStake, bool needUnstake) {\\n    bool farmEnded = isFarmEnded(state.pId);\\n    bool haveLiquidity = state.totalLiquidity > 0;\\n    bool staked = state.staked;\\n    needStake = haveLiquidity && !farmEnded && !staked;\\n    needUnstake = haveLiquidity && farmEnded && staked;\\n  }\\n\\n  function isFarmEnded(uint pId) public view returns(bool) {\\n    (,,uint endTime,,,,,) = FARMING_CENTER.getPoolInfo(pId);\\n    return endTime < block.timestamp;\\n  }\\n\\n  function quoteRebalanceSwap(State storage state, ITetuConverter converter) external returns (bool, uint) {\\n    address tokenA = state.tokenA;\\n    address tokenB = state.tokenB;\\n    uint debtAmount = KyberDebtLib.getDebtTotalDebtAmountOut(converter, tokenA, tokenB);\\n\\n    if (\\n      !needRebalance(state)\\n      || !KyberDebtLib.needCloseDebt(debtAmount, converter, tokenB)\\n    ) {\\n      return (false, 0);\\n    }\\n\\n    uint[] memory amountsOut = quoteExit(state, state.totalLiquidity);\\n    amountsOut[0] += AppLib.balance(tokenA);\\n    amountsOut[1] += AppLib.balance(tokenB);\\n\\n    if (amountsOut[1] < debtAmount) {\\n      uint tokenBprice = KyberLib.getPrice(address(state.pool), tokenB);\\n      uint needToSellTokenA = tokenBprice * (debtAmount - amountsOut[1]) / 10 ** IERC20Metadata(tokenB).decimals();\\n      // add 1% gap for price impact\\n      needToSellTokenA += needToSellTokenA / KyberDebtLib.SELL_GAP;\\n      if (amountsOut[0] > 0) {\\n        needToSellTokenA = Math.min(needToSellTokenA, amountsOut[0] - 1);\\n      } else {\\n        needToSellTokenA = 0;\\n      }\\n      return (true, needToSellTokenA);\\n    } else {\\n      return (false, amountsOut[1] - debtAmount);\\n    }\\n  }\\n\\n  function rebalance(\\n    State storage state,\\n    ITetuConverter converter,\\n    address controller,\\n    uint oldTotalAssets,\\n    uint profitToCover,\\n    address splitter\\n  ) external returns (\\n    uint[] memory tokenAmounts // _depositorEnter(tokenAmounts) if length == 2\\n  ) {\\n    uint loss;\\n    tokenAmounts = new uint[](0);\\n\\n    RebalanceLocalVariables memory vars = RebalanceLocalVariables({\\n      upperTick: state.upperTick,\\n      lowerTick: state.lowerTick,\\n      tickSpacing: state.tickSpacing,\\n      pool: state.pool,\\n      tokenA: state.tokenA,\\n      tokenB: state.tokenB,\\n      lastPrice: state.lastPrice,\\n      fuseThreshold: state.fuseThreshold,\\n      depositorSwapTokens: state.depositorSwapTokens,\\n    // setup initial values\\n      notCoveredLoss: 0,\\n      newLowerTick: 0,\\n      newUpperTick: 0,\\n      isStablePool: state.isStablePool,\\n      newPrice: 0,\\n      newTotalAssets: 0,\\n      needRebalance : needRebalance(state)\\n    });\\n\\n    if (vars.needRebalance) {\\n      vars.newPrice = ConverterStrategyBaseLib.getOracleAssetsPrice(converter, vars.tokenA, vars.tokenB);\\n\\n      if (vars.isStablePool && isEnableFuse(vars.lastPrice, vars.newPrice, vars.fuseThreshold)) {\\n        /// enabling fuse: close debt and stop providing liquidity\\n        state.isFuseTriggered = true;\\n        emit FuseTriggered();\\n\\n        KyberDebtLib.closeDebt(\\n          converter,\\n          controller,\\n          vars.pool,\\n          vars.tokenA,\\n          vars.tokenB,\\n          _getLiquidatorSwapSlippage(vars.isStablePool),\\n          profitToCover,\\n          oldTotalAssets,\\n          splitter\\n        );\\n      } else {\\n        /// rebalancing debt\\n        /// setting new tick range\\n        KyberDebtLib.rebalanceDebt(\\n          converter,\\n          controller,\\n          state,\\n          _getLiquidatorSwapSlippage(vars.isStablePool),\\n          profitToCover,\\n          oldTotalAssets,\\n          splitter\\n        );\\n\\n        tokenAmounts = new uint[](2);\\n        tokenAmounts[0] = AppLib.balance(vars.tokenA);\\n        tokenAmounts[1] = AppLib.balance(vars.tokenB);\\n\\n        address[] memory tokens = new address[](2);\\n        tokens[0] = vars.tokenA;\\n        tokens[1] = vars.tokenB;\\n        uint[] memory amounts = new uint[](2);\\n        amounts[0] = tokenAmounts[0];\\n        vars.newTotalAssets = ConverterStrategyBaseLib.calcInvestedAssets(tokens, amounts, 0, converter);\\n        if (vars.newTotalAssets < oldTotalAssets) {\\n          loss = oldTotalAssets - vars.newTotalAssets;\\n        }\\n      }\\n\\n      // need to update last price only for stables coz only stables have fuse mechanic\\n      if (vars.isStablePool) {\\n        state.lastPrice = vars.newPrice;\\n      }\\n\\n      uint covered;\\n      if (loss > 0) {\\n        covered = KyberDebtLib.coverLossFromRewards(loss, state.strategyProfitHolder, vars.tokenA, vars.tokenB, address(vars.pool));\\n        uint notCovered = loss - covered;\\n        if (notCovered > 0) {\\n          ISplitter(splitter).coverPossibleStrategyLoss(0, notCovered);\\n        }\\n      }\\n\\n      emit Rebalanced(loss, covered);\\n    } else {\\n      tokenAmounts = new uint[](2);\\n      tokenAmounts[0] = AppLib.balance(vars.tokenA);\\n      tokenAmounts[1] = AppLib.balance(vars.tokenB);\\n    }\\n  }\\n\\n  function rebalanceSwapByAgg(\\n    State storage state,\\n    ITetuConverter converter,\\n    uint oldTotalAssets,\\n    RebalanceSwapByAggParams memory aggParams,\\n    uint profitToCover,\\n    address splitter\\n  ) external returns (\\n    uint[] memory tokenAmounts // _depositorEnter(tokenAmounts) if length == 2\\n  ) {\\n    uint loss;\\n    tokenAmounts = new uint[](0);\\n\\n    RebalanceLocalVariables memory vars = RebalanceLocalVariables({\\n      upperTick: state.upperTick,\\n      lowerTick: state.lowerTick,\\n      tickSpacing: state.tickSpacing,\\n      pool: state.pool,\\n      tokenA: state.tokenA,\\n      tokenB: state.tokenB,\\n      lastPrice: state.lastPrice,\\n      fuseThreshold: state.fuseThreshold,\\n      depositorSwapTokens: state.depositorSwapTokens,\\n    // setup initial values\\n      notCoveredLoss: 0,\\n      newLowerTick: 0,\\n      newUpperTick: 0,\\n      isStablePool: state.isStablePool,\\n      newPrice: 0,\\n      newTotalAssets: 0,\\n      needRebalance : needRebalance(state)\\n    });\\n\\n    if (vars.needRebalance) {\\n      vars.newPrice = ConverterStrategyBaseLib.getOracleAssetsPrice(converter, vars.tokenA, vars.tokenB);\\n\\n      if (vars.isStablePool && isEnableFuse(vars.lastPrice, vars.newPrice, vars.fuseThreshold)) {\\n        /// enabling fuse: close debt and stop providing liquidity\\n        state.isFuseTriggered = true;\\n        emit FuseTriggered();\\n\\n        KyberDebtLib.closeDebtByAgg(\\n          converter,\\n          vars.tokenA,\\n          vars.tokenB,\\n          _getLiquidatorSwapSlippage(vars.isStablePool),\\n          aggParams,\\n          profitToCover,\\n          oldTotalAssets,\\n          splitter\\n        );\\n      } else {\\n        /// rebalancing debt\\n        /// setting new tick range\\n        KyberDebtLib.rebalanceDebtSwapByAgg(\\n          converter,\\n          state,\\n          _getLiquidatorSwapSlippage(vars.isStablePool),\\n          aggParams,\\n          profitToCover,\\n          oldTotalAssets,\\n          splitter\\n        );\\n\\n        if (oldTotalAssets > 0) {\\n          tokenAmounts = new uint[](2);\\n          tokenAmounts[0] = AppLib.balance(vars.tokenA);\\n          tokenAmounts[1] = AppLib.balance(vars.tokenB);\\n\\n          address[] memory tokens = new address[](2);\\n          tokens[0] = vars.tokenA;\\n          tokens[1] = vars.tokenB;\\n          uint[] memory amounts = new uint[](2);\\n          amounts[0] = tokenAmounts[0];\\n          vars.newTotalAssets = ConverterStrategyBaseLib.calcInvestedAssets(tokens, amounts, 0, converter);\\n          if (vars.newTotalAssets < oldTotalAssets) {\\n            loss = oldTotalAssets - vars.newTotalAssets;\\n          }\\n        }\\n      }\\n\\n      // need to update last price only for stables coz only stables have fuse mechanic\\n      if (vars.isStablePool) {\\n        state.lastPrice = vars.newPrice;\\n      }\\n\\n      uint covered;\\n      if (loss > 0) {\\n        covered = KyberDebtLib.coverLossFromRewards(loss, state.strategyProfitHolder, vars.tokenA, vars.tokenB, address(vars.pool));\\n        uint notCovered = loss - covered;\\n        if (notCovered > 0) {\\n          ISplitter(splitter).coverPossibleStrategyLoss(0, notCovered);\\n        }\\n      }\\n\\n      emit Rebalanced(loss, covered);\\n    } else {\\n      tokenAmounts = new uint[](2);\\n      tokenAmounts[0] = AppLib.balance(vars.tokenA);\\n      tokenAmounts[1] = AppLib.balance(vars.tokenB);\\n    }\\n  }\\n}\",\"keccak256\":\"0xd9c4f2a8bf0babd8afaaefe3eed735c4a0dc3137e019865f6cce6b20f1c905be\",\"license\":\"MIT\"},\"contracts/strategies/kyber/KyberDebtLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../ConverterStrategyBaseLib.sol\\\";\\nimport \\\"../ConverterStrategyBaseLib2.sol\\\";\\nimport \\\"./KyberLib.sol\\\";\\nimport \\\"./KyberStrategyErrors.sol\\\";\\nimport \\\"./KyberConverterStrategyLogicLib.sol\\\";\\n\\nlibrary KyberDebtLib {\\n  using SafeERC20 for IERC20;\\n\\n  uint public constant SELL_GAP = 100;\\n  address internal constant ONEINCH = 0x1111111254EEB25477B68fb85Ed929f73A960582; // 1inch router V5\\n  address internal constant OPENOCEAN = 0x6352a56caadC4F1E25CD6c75970Fa768A3304e64; // OpenOceanExchangeProxy\\n\\n  function calcTickRange(IPool pool, int24 tickRange, int24 tickSpacing) public view returns (int24 lowerTick, int24 upperTick) {\\n    (, int24 tick, ,) = pool.getPoolState();\\n    if (tick < 0 && tick / tickSpacing * tickSpacing != tick) {\\n      lowerTick = ((tick - tickRange) / tickSpacing - 1) * tickSpacing;\\n    } else {\\n      lowerTick = (tick - tickRange) / tickSpacing * tickSpacing;\\n    }\\n    upperTick = tickRange == 0 ? lowerTick + tickSpacing : lowerTick + tickRange * 2;\\n  }\\n\\n  function getEntryData(\\n    IPool pool,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    bool depositorSwapTokens\\n  ) public view returns (bytes memory entryData) {\\n    address token1 = address(pool.token1());\\n    uint token1Price = KyberLib.getPrice(address(pool), token1);\\n\\n    uint token1Decimals = IERC20Metadata(token1).decimals();\\n\\n    uint token0Desired = token1Price;\\n    uint token1Desired = 10 ** token1Decimals;\\n\\n    // calculate proportions\\n    (uint consumed0, uint consumed1,) = KyberLib.addLiquidityPreview(address(pool), lowerTick, upperTick, token0Desired, token1Desired);\\n\\n    if (depositorSwapTokens) {\\n      entryData = abi.encode(1, consumed1 * token1Price / token1Desired, consumed0);\\n    } else {\\n      entryData = abi.encode(1, consumed0, consumed1 * token1Price / token1Desired);\\n    }\\n  }\\n\\n  /// @dev Closes the debt positions for the given token pair.\\n  /// @param tetuConverter The ITetuConverter instance.\\n  /// @param controller The controller address.\\n  /// @param pool The IUniswapV3Pool instance.\\n  /// @param tokenA The address of tokenA.\\n  /// @param tokenB The address of tokenB.\\n  function closeDebt(\\n    ITetuConverter tetuConverter,\\n    address controller,\\n    IPool pool,\\n    address tokenA,\\n    address tokenB,\\n    uint liquidatorSwapSlippage,\\n    uint profitToCover,\\n    uint totalAssets,\\n    address splitter\\n  ) public {\\n    _closeDebt(tetuConverter, controller, pool, tokenA, tokenB, liquidatorSwapSlippage);\\n    if (profitToCover > 0) {\\n      ConverterStrategyBaseLib2.sendToInsurance(tokenA, profitToCover, splitter, totalAssets);\\n    }\\n  }\\n\\n  function closeDebtByAgg(\\n    ITetuConverter tetuConverter,\\n    address tokenA,\\n    address tokenB,\\n    uint liquidatorSwapSlippage,\\n    KyberConverterStrategyLogicLib.RebalanceSwapByAggParams memory aggParams,\\n    uint profitToCover,\\n    uint totalAssets,\\n    address splitter\\n  ) public {\\n    _closeDebtByAgg(tetuConverter, tokenA, tokenB, liquidatorSwapSlippage, aggParams);\\n    if (profitToCover > 0) {\\n      ConverterStrategyBaseLib2.sendToInsurance(tokenA, profitToCover, splitter, totalAssets);\\n    }\\n  }\\n\\n  /// @dev Rebalances the debt by either filling up or closing and reopening debt positions. Sets new tick range.\\n  function rebalanceDebt(\\n    ITetuConverter tetuConverter,\\n    address controller,\\n    KyberConverterStrategyLogicLib.State storage state,\\n    uint liquidatorSwapSlippage,\\n    uint profitToCover,\\n    uint totalAssets,\\n    address splitter\\n  ) external {\\n    IPool pool = state.pool;\\n    address tokenA = state.tokenA;\\n    address tokenB = state.tokenB;\\n    bool depositorSwapTokens = state.depositorSwapTokens;\\n    _closeDebt(tetuConverter, controller, pool, tokenA, tokenB, liquidatorSwapSlippage);\\n    if (profitToCover > 0) {\\n      ConverterStrategyBaseLib2.sendToInsurance(tokenA, profitToCover, splitter, totalAssets);\\n    }\\n    (int24 newLowerTick, int24 newUpperTick) = _calcNewTickRange(pool, state.lowerTick, state.upperTick, state.tickSpacing);\\n    bytes memory entryData = getEntryData(pool, newLowerTick, newUpperTick, depositorSwapTokens);\\n    _openDebt(tetuConverter, tokenA, tokenB, entryData);\\n    state.lowerTick = newLowerTick;\\n    state.upperTick = newUpperTick;\\n  }\\n\\n  function rebalanceDebtSwapByAgg(\\n    ITetuConverter tetuConverter,\\n    KyberConverterStrategyLogicLib.State storage state,\\n    uint liquidatorSwapSlippage,\\n    KyberConverterStrategyLogicLib.RebalanceSwapByAggParams memory aggParams,\\n    uint profitToCover,\\n    uint totalAssets,\\n    address splitter\\n  ) external {\\n    IPool pool = state.pool;\\n    address tokenA = state.tokenA;\\n    address tokenB = state.tokenB;\\n    bool depositorSwapTokens = state.depositorSwapTokens;\\n    _closeDebtByAgg(tetuConverter, tokenA, tokenB, liquidatorSwapSlippage, aggParams);\\n    if (profitToCover > 0) {\\n      ConverterStrategyBaseLib2.sendToInsurance(tokenA, profitToCover, splitter, totalAssets);\\n    }\\n    (int24 newLowerTick, int24 newUpperTick) = _calcNewTickRange(pool, state.lowerTick, state.upperTick, state.tickSpacing);\\n    bytes memory entryData = getEntryData(pool, newLowerTick, newUpperTick, depositorSwapTokens);\\n    _openDebt(tetuConverter, tokenA, tokenB, entryData);\\n    state.lowerTick = newLowerTick;\\n    state.upperTick = newUpperTick;\\n  }\\n\\n  /// @dev Returns the total debt amount out for the given token pair.\\n  /// @param tetuConverter The ITetuConverter instance.\\n  /// @param tokenA The address of tokenA.\\n  /// @param tokenB The address of tokenB.\\n  /// @return totalDebtAmountOut The total debt amount out for the token pair.\\n  function getDebtTotalDebtAmountOut(ITetuConverter tetuConverter, address tokenA, address tokenB) public returns (uint totalDebtAmountOut) {\\n    (totalDebtAmountOut,) = tetuConverter.getDebtAmountCurrent(address(this), tokenA, tokenB, true);\\n  }\\n\\n  /// @dev we close debt only if it is more than $0.1\\n  function needCloseDebt(uint debtAmount, ITetuConverter tetuConverter, address tokenB) public view returns (bool) {\\n    IPriceOracle priceOracle = IPriceOracle(IConverterController(tetuConverter.controller()).priceOracle());\\n    return debtAmount * priceOracle.getAssetPrice(tokenB) / 10 ** IERC20Metadata(tokenB).decimals() > 1e17;\\n  }\\n\\n  function coverLossFromRewards(uint loss, address strategyProfitHolder, address tokenA, address tokenB, address pool) external returns (uint covered) {\\n    uint bA = IERC20Metadata(tokenA).balanceOf(strategyProfitHolder);\\n    uint bB = IERC20Metadata(tokenB).balanceOf(strategyProfitHolder);\\n\\n    if (loss <= bA) {\\n      IERC20(tokenA).safeTransferFrom(strategyProfitHolder, address(this), loss);\\n      covered = loss;\\n    } else {\\n      uint needToCoverA = loss;\\n      if (bA > 0) {\\n        IERC20(tokenA).safeTransferFrom(strategyProfitHolder, address(this), bA);\\n        needToCoverA -= bA;\\n      }\\n      if (bB > 0) {\\n        uint needTransferB = KyberLib.getPrice(pool, tokenA) * needToCoverA / 10 ** IERC20Metadata(tokenA).decimals();\\n        uint canTransferB = Math.min(needTransferB, bB);\\n        IERC20(tokenB).safeTransferFrom(strategyProfitHolder, address(this), canTransferB);\\n        needToCoverA -= needToCoverA * canTransferB / needTransferB;\\n      }\\n      covered = loss - needToCoverA;\\n    }\\n  }\\n\\n  /// @notice Calculate the new tick range for a Kyber pool.\\n  /// @param pool The Kyber pool to calculate the new tick range for.\\n  /// @param lowerTick The current lower tick value for the pool.\\n  /// @param upperTick The current upper tick value for the pool.\\n  /// @param tickSpacing The tick spacing for the pool.\\n  /// @return lowerTickNew The new lower tick value for the pool.\\n  /// @return upperTickNew The new upper tick value for the pool.\\n  function _calcNewTickRange(\\n    IPool pool,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    int24 tickSpacing\\n  ) internal view returns (int24 lowerTickNew, int24 upperTickNew) {\\n    int24 fullTickRange = upperTick - lowerTick;\\n    (lowerTickNew, upperTickNew) = calcTickRange(pool, fullTickRange == tickSpacing ? int24(0) : fullTickRange / 2, tickSpacing);\\n  }\\n\\n  /// @dev Opens a new debt position using entry data.\\n  /// @param tetuConverter The TetuConverter contract.\\n  /// @param tokenA The address of token A.\\n  /// @param tokenB The address of token B.\\n  /// @param entryData The data required to open a position.\\n  function _openDebt(\\n    ITetuConverter tetuConverter,\\n    address tokenA,\\n    address tokenB,\\n    bytes memory entryData/*,\\n    uint feeA*/\\n  ) internal {\\n    ConverterStrategyBaseLib.openPosition(\\n      tetuConverter,\\n      entryData,\\n      tokenA,\\n      tokenB,\\n      AppLib.balance(tokenA)/* - feeA*/,\\n      0\\n    );\\n  }\\n\\n  /// @notice Closes debt by liquidating tokens as necessary.\\n  ///         This function helps ensure that the converter strategy maintains the appropriate balances\\n  ///         and debt positions for token A and token B, while accounting for potential price impacts.\\n  function _closeDebt(\\n    ITetuConverter tetuConverter,\\n    address controller,\\n    IPool pool,\\n    address tokenA,\\n    address tokenB,\\n    uint liquidatorSwapSlippage\\n  ) internal {\\n    uint debtAmount = getDebtTotalDebtAmountOut(tetuConverter, tokenA, tokenB);\\n\\n    if (needCloseDebt(debtAmount, tetuConverter, tokenB)) {\\n      uint availableBalanceTokenA = AppLib.balance(tokenA);\\n      uint availableBalanceTokenB = AppLib.balance(tokenB);\\n\\n      if (availableBalanceTokenB < debtAmount) {\\n        uint tokenBprice = KyberLib.getPrice(address(pool), tokenB);\\n        uint needToSellTokenA = tokenBprice * (debtAmount - availableBalanceTokenB) / 10 ** IERC20Metadata(tokenB).decimals();\\n        // add 1% gap for price impact\\n        needToSellTokenA += needToSellTokenA / SELL_GAP;\\n\\n        ConverterStrategyBaseLib.liquidate(tetuConverter, ITetuLiquidator(IController(controller).liquidator()), tokenA, tokenB, Math.min(needToSellTokenA, availableBalanceTokenA), liquidatorSwapSlippage, 0, false);\\n        availableBalanceTokenB = AppLib.balance(tokenB);\\n      }\\n\\n      ConverterStrategyBaseLib.closePosition(\\n        tetuConverter,\\n        tokenA,\\n        tokenB,\\n        Math.min(debtAmount, availableBalanceTokenB)\\n      );\\n\\n      availableBalanceTokenB = AppLib.balance(tokenB);\\n      ConverterStrategyBaseLib.liquidate(tetuConverter, ITetuLiquidator(IController(controller).liquidator()), tokenB, tokenA, availableBalanceTokenB, liquidatorSwapSlippage, 0, false);\\n    }\\n  }\\n\\n  function _closeDebtByAgg(\\n    ITetuConverter tetuConverter,\\n    address tokenA,\\n    address tokenB,\\n    uint liquidatorSwapSlippage,\\n    KyberConverterStrategyLogicLib.RebalanceSwapByAggParams memory aggParams\\n  ) internal {\\n    _checkSwapRouter(aggParams.agg);\\n\\n    uint debtAmount = getDebtTotalDebtAmountOut(tetuConverter, tokenA, tokenB);\\n\\n    if (needCloseDebt(debtAmount, tetuConverter, tokenB)) {\\n      uint balanceTokenABefore = AppLib.balance(tokenA);\\n      uint balanceTokenBBefore = AppLib.balance(tokenB);\\n\\n      address tokenIn = aggParams.direction ? tokenA : tokenB;\\n\\n      AppLib.approveIfNeeded(tokenIn, aggParams.amount, aggParams.agg);\\n\\n      {\\n        (bool success, bytes memory result) = aggParams.agg.call(aggParams.swapData);\\n        require(success, string(result));\\n      }\\n\\n      uint availableBalanceTokenA = AppLib.balance(tokenA);\\n      uint availableBalanceTokenB = AppLib.balance(tokenB);\\n\\n      require(\\n        tetuConverter.isConversionValid(\\n          tokenIn,\\n          aggParams.amount,\\n          aggParams.direction ? tokenB : tokenA,\\n          aggParams.direction ? availableBalanceTokenB - balanceTokenBBefore : availableBalanceTokenA - balanceTokenABefore,\\n          liquidatorSwapSlippage\\n        ), AppErrors.PRICE_IMPACT);\\n\\n      ConverterStrategyBaseLib.closePosition(\\n        tetuConverter,\\n        tokenA,\\n        tokenB,\\n        Math.min(debtAmount, availableBalanceTokenB)\\n      );\\n\\n      availableBalanceTokenB = AppLib.balance(tokenB);\\n    }\\n  }\\n\\n  function _checkSwapRouter(address router) internal pure {\\n    require(router == ONEINCH || router == OPENOCEAN, KyberStrategyErrors.UNKNOWN_SWAP_ROUTER);\\n  }\\n}\",\"keccak256\":\"0xe42b3ddfd1ccd90fc678bf7f6badb0ed1e357f1e99598bfafbee33d255ef72cf\",\"license\":\"MIT\"},\"contracts/strategies/kyber/KyberDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/openzeppelin/Initializable.sol\\\";\\nimport \\\"../DepositorBase.sol\\\";\\nimport \\\"./KyberStrategyErrors.sol\\\";\\nimport \\\"./KyberConverterStrategyLogicLib.sol\\\";\\n\\n\\nabstract contract KyberDepositor is DepositorBase, Initializable {\\n  using SafeERC20 for IERC20;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                CONSTANTS\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @dev Version of this contract. Adjust manually on each code modification.\\n  string public constant KYBER_DEPOSITOR_VERSION = \\\"1.0.0\\\";\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                VARIABLES\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @dev State variable to store the current state of the whole strategy\\n  KyberConverterStrategyLogicLib.State internal state;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///                       View\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Returns the current state of the contract.\\n  function getState() external view returns (\\n    address tokenA,\\n    address tokenB,\\n    address profitHolder,\\n    IPool pool,\\n    uint128 totalLiquidity,\\n    uint fuseThreshold,\\n    int24[] memory ticks,\\n    uint[] memory profitHolderBalances,\\n    bool[] memory flags\\n  ) {\\n    tokenA = state.tokenA;\\n    tokenB = state.tokenB;\\n    pool = state.pool;\\n    ticks = new int24[](4);\\n    ticks[0] = state.lowerTick;\\n    ticks[1] = state.upperTick;\\n    ticks[2] = state.tickSpacing;\\n    ticks[3] = state.rebalanceTickRange;\\n    totalLiquidity = state.totalLiquidity;\\n    fuseThreshold = state.fuseThreshold;\\n    profitHolder = state.strategyProfitHolder;\\n    profitHolderBalances = new uint[](3);\\n    profitHolderBalances[0] = IERC20(tokenA).balanceOf(profitHolder);\\n    profitHolderBalances[1] = IERC20(tokenB).balanceOf(profitHolder);\\n    profitHolderBalances[2] = IERC20(KyberConverterStrategyLogicLib.KNC).balanceOf(profitHolder);\\n    flags = new bool[](4);\\n    flags[0] = state.isFuseTriggered;\\n    flags[1] = state.staked;\\n    (flags[2], flags[3]) = KyberConverterStrategyLogicLib.needRebalanceStaking(state);\\n  }\\n\\n  /// @notice Returns the pool assets.\\n  /// @return poolAssets An array containing the addresses of the pool assets.\\n  function _depositorPoolAssets() override internal virtual view returns (address[] memory poolAssets) {\\n    poolAssets = new address[](2);\\n    poolAssets[0] = state.tokenA;\\n    poolAssets[1] = state.tokenB;\\n  }\\n\\n  /// @notice Returns the pool weights and the total weight.\\n  /// @return weights An array containing the weights of the pool assets, and totalWeight the sum of the weights.\\n  function _depositorPoolWeights() override internal virtual view returns (uint[] memory weights, uint totalWeight) {\\n    weights = new uint[](2);\\n    weights[0] = 1;\\n    weights[1] = 1;\\n    totalWeight = 2;\\n  }\\n\\n  /// @notice Returns the pool reserves.\\n  /// @return reserves An array containing the reserves of the pool assets.\\n  function _depositorPoolReserves() override internal virtual view returns (uint[] memory reserves) {\\n    return KyberConverterStrategyLogicLib.getPoolReserves(state);\\n  }\\n\\n  /// @notice Returns the current liquidity of the depositor.\\n  /// @return The current liquidity of the depositor.\\n  function _depositorLiquidity() override internal virtual view returns (uint) {\\n    return uint(state.totalLiquidity);\\n  }\\n\\n  /// @notice Returns the total supply of the depositor.\\n  /// @return In UniV3 we can not calculate the total supply of the wgole pool. Return only ourself value.\\n  function _depositorTotalSupply() override internal view virtual returns (uint) {\\n    return uint(state.totalLiquidity);\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Enter, exit\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Handles the deposit operation.\\n  function _depositorEnter(uint[] memory amountsDesired_) override internal virtual returns (uint[] memory amountsConsumed, uint liquidityOut) {\\n    (amountsConsumed, liquidityOut) = KyberConverterStrategyLogicLib.enter(state, amountsDesired_);\\n  }\\n\\n  /// @notice Handles the withdrawal operation.\\n  /// @param liquidityAmount The amount of liquidity to be withdrawn.\\n  /// @return amountsOut The amounts of the tokens withdrawn.\\n  function _depositorExit(uint liquidityAmount) override internal virtual returns (uint[] memory amountsOut) {\\n    amountsOut = KyberConverterStrategyLogicLib.exit(state, uint128(liquidityAmount));\\n  }\\n\\n  /// @notice Returns the amount of tokens that would be withdrawn based on the provided liquidity amount.\\n  /// @param liquidityAmount The amount of liquidity to quote the withdrawal for.\\n  /// @return amountsOut The amounts of the tokens that would be withdrawn.\\n  function _depositorQuoteExit(uint liquidityAmount) override internal virtual returns (uint[] memory amountsOut) {\\n    amountsOut = KyberConverterStrategyLogicLib.quoteExit(state, uint128(liquidityAmount));\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////\\n  ///             Claim rewards\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Claims all possible rewards.\\n  /// @return tokensOut An array containing the addresses of the reward tokens,\\n  /// @return amountsOut An array containing the amounts of the reward tokens.\\n  function _depositorClaimRewards() override internal virtual returns (\\n    address[] memory tokensOut,\\n    uint[] memory amountsOut,\\n    uint[] memory balancesBefore\\n  ) {\\n    return KyberConverterStrategyLogicLib.claimRewards(state);\\n  }\\n\\n  /// @dev This empty reserved space is put in place to allow future versions to add new\\n  /// variables without shifting down storage in the inheritance chain.\\n  /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n  uint[50 - 1] private __gap; // 50 - count of variables\\n\\n}\\n\",\"keccak256\":\"0x91c4ddf424e0f4d6d655803e67b3d7be1a6a8d31587fe1f00dfa801aaba56873\",\"license\":\"MIT\"},\"contracts/strategies/kyber/KyberLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../integrations/kyber/IPool.sol\\\";\\nimport \\\"../../integrations/kyber/IBasePositionManager.sol\\\";\\nimport \\\"../../integrations/kyber/IKyberSwapElasticLM.sol\\\";\\nimport \\\"../../integrations/kyber/ITicksFeesReader.sol\\\";\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\nlibrary KyberLib {\\n  uint8 internal constant RESOLUTION = 96;\\n  uint internal constant Q96 = 0x1000000000000000000000000;\\n  uint private constant TWO_96 = 2 ** 96;\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 private constant MIN_SQRT_RATIO = 4295128739 + 1;\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 private constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342 - 1;\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n  int24 internal constant MIN_TICK = - 887272;\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n  int24 internal constant MAX_TICK = - MIN_TICK;\\n\\n  function getPreviousTicks(IPool pool, int24 tickLower, int24 tickUpper) external view returns (int24[2] memory ticks) {\\n    (ticks[0],) = _getNearestInitializedTicks(pool, tickLower);\\n    (ticks[1],) = _getNearestInitializedTicks(pool, tickUpper);\\n  }\\n\\n  function _getNearestInitializedTicks(IPool pool, int24 tick) internal view returns (int24 previous, int24 next) {\\n    require(MIN_TICK <= tick && tick <= MAX_TICK, 'tick not in range');\\n    // if queried tick already initialized, fetch and return values\\n    (previous, next) = pool.initializedTicks(tick);\\n    if (previous != 0 || next != 0) return (previous, next);\\n\\n    // search downtick from MAX_TICK\\n    if (tick > 0) {\\n      previous = MAX_TICK;\\n      while (previous > tick) {\\n        (previous, ) = pool.initializedTicks(previous);\\n      }\\n      (, next) = pool.initializedTicks(previous);\\n    } else {\\n      // search uptick from MIN_TICK\\n      next = MIN_TICK;\\n      while (next < tick) {\\n        (, next) = pool.initializedTicks(next);\\n      }\\n      (previous, ) = pool.initializedTicks(next);\\n    }\\n  }\\n\\n  function getTickSpacing(IPool pool) external view returns (int24) {\\n    return pool.tickDistance();\\n  }\\n\\n  function addLiquidityPreview(address pool_, int24 lowerTick_, int24 upperTick_, uint amount0Desired_, uint amount1Desired_) external view returns (uint amount0Consumed, uint amount1Consumed, uint128 liquidityOut) {\\n    IPool pool = IPool(pool_);\\n    (uint160 sqrtRatioX96, , ,) = pool.getPoolState();\\n    liquidityOut = getLiquidityForAmounts(sqrtRatioX96, lowerTick_, upperTick_, amount0Desired_, amount1Desired_);\\n    (amount0Consumed, amount1Consumed) = getAmountsForLiquidity(sqrtRatioX96, lowerTick_, upperTick_, liquidityOut);\\n  }\\n\\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n  /// pool prices and the prices at the tick boundaries\\n  function getLiquidityForAmounts(\\n    uint160 sqrtRatioX96,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    uint amount0,\\n    uint amount1\\n  ) public pure returns (uint128 liquidity) {\\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n\\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\\n      liquidity = _getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n      uint128 liquidity0 = _getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n      uint128 liquidity1 = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n    } else {\\n      liquidity = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n    }\\n  }\\n\\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n  /// pool prices and the prices at the tick boundaries\\n  function getAmountsForLiquidity(\\n    uint160 sqrtRatioX96,\\n    int24 lowerTick,\\n    int24 upperTick,\\n    uint128 liquidity\\n  ) public pure returns (uint amount0, uint amount1) {\\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\\n\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n\\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\\n      amount0 = _getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n      amount0 = _getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n    } else {\\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n    }\\n  }\\n\\n  /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n  function mulDiv(\\n    uint a,\\n    uint b,\\n    uint denominator\\n  ) public pure returns (uint result) {\\n    unchecked {\\n      // 512-bit multiply [prod1 prod0] = a * b\\n      // Compute the product mod 2**256 and mod 2**256 - 1\\n      // then use the Chinese Remainder Theorem to reconstruct\\n      // the 512 bit result. The result is stored in two 256\\n      // variables such that product = prod1 * 2**256 + prod0\\n      uint prod0;\\n      // Least significant 256 bits of the product\\n      uint prod1;\\n      // Most significant 256 bits of the product\\n      assembly {\\n        let mm := mulmod(a, b, not(0))\\n        prod0 := mul(a, b)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n      }\\n\\n      // Handle non-overflow cases, 256 by 256 division\\n      if (prod1 == 0) {\\n        require(denominator > 0);\\n        assembly {\\n          result := div(prod0, denominator)\\n        }\\n        return result;\\n      }\\n\\n      // Make sure the result is less than 2**256.\\n      // Also prevents denominator == 0\\n      require(denominator > prod1);\\n\\n      ///////////////////////////////////////////////\\n      // 512 by 256 division.\\n      ///////////////////////////////////////////////\\n\\n      // Make division exact by subtracting the remainder from [prod1 prod0]\\n      // Compute remainder using mulmod\\n      uint remainder;\\n      assembly {\\n        remainder := mulmod(a, b, denominator)\\n      }\\n      // Subtract 256 bit number from 512 bit number\\n      assembly {\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n      }\\n\\n      // Factor powers of two out of denominator\\n      // Compute largest power of two divisor of denominator.\\n      // Always >= 1.\\n      // EDIT for 0.8 compatibility:\\n      // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint\\n      uint twos = denominator & (~denominator + 1);\\n\\n      // Divide denominator by power of two\\n      assembly {\\n        denominator := div(denominator, twos)\\n      }\\n\\n      // Divide [prod1 prod0] by the factors of two\\n      assembly {\\n        prod0 := div(prod0, twos)\\n      }\\n      // Shift in bits from prod1 into prod0. For this we need\\n      // to flip `twos` such that it is 2**256 / twos.\\n      // If twos is zero, then it becomes one\\n      assembly {\\n        twos := add(div(sub(0, twos), twos), 1)\\n      }\\n      prod0 |= prod1 * twos;\\n\\n      // Invert denominator mod 2**256\\n      // Now that denominator is an odd number, it has an inverse\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n      // Compute the inverse by starting with a seed that is correct\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n      uint inv = (3 * denominator) ^ 2;\\n      // Now use Newton-Raphson iteration to improve the precision.\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\n      // arithmetic, doubling the correct bits in each step.\\n      inv *= 2 - denominator * inv;\\n      // inverse mod 2**8\\n      inv *= 2 - denominator * inv;\\n      // inverse mod 2**16\\n      inv *= 2 - denominator * inv;\\n      // inverse mod 2**32\\n      inv *= 2 - denominator * inv;\\n      // inverse mod 2**64\\n      inv *= 2 - denominator * inv;\\n      // inverse mod 2**128\\n      inv *= 2 - denominator * inv;\\n      // inverse mod 2**256\\n\\n      // Because the division is now exact we can divide by multiplying\\n      // with the modular inverse of denominator. This will give us the\\n      // correct result modulo 2**256. Since the precoditions guarantee\\n      // that the outcome is less than 2**256, this is the final result.\\n      // We don't need to compute the high bits of the result and prod1\\n      // is no longer required.\\n      result = prod0 * inv;\\n      return result;\\n    }\\n  }\\n\\n  /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  function mulDivRoundingUp(\\n    uint a,\\n    uint b,\\n    uint denominator\\n  ) internal pure returns (uint result) {\\n    result = mulDiv(a, b, denominator);\\n    if (mulmod(a, b, denominator) > 0) {\\n      require(result < type(uint).max);\\n      result++;\\n    }\\n  }\\n\\n  /// @notice Calculates price in pool\\n  function getPrice(address pool_, address tokenIn) public view returns (uint) {\\n    IPool pool = IPool(pool_);\\n    address token0 = address(pool.token0());\\n    address token1 = address(pool.token1());\\n\\n    uint tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\\n    uint tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\\n    (uint160 sqrtPriceX96,,,) = pool.getPoolState();\\n\\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\\n\\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\\n    uint purePrice;\\n    uint precision;\\n    if (tokenIn == token0) {\\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\\n      purePrice = part * part;\\n    } else {\\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\\n      purePrice = part * part;\\n    }\\n    return purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\\n  }\\n\\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param amount0 The amount0 being sent in\\n  /// @return liquidity The amount of returned liquidity\\n  function _getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount0) internal pure returns (uint128 liquidity) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n    uint intermediate = mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\\n    return _toUint128(mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n  }\\n\\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param amount1 The amount1 being sent in\\n  /// @return liquidity The amount of returned liquidity\\n  function _getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount1) internal pure returns (uint128 liquidity) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n    return _toUint128(mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n  }\\n\\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param liquidity The liquidity being valued\\n  /// @return amount0 The amount0\\n  function _getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount0) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n    return mulDivRoundingUp(1, mulDivRoundingUp(uint(liquidity) << RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96), sqrtRatioAX96);\\n  }\\n\\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param liquidity The liquidity being valued\\n  /// @return amount1 The amount1\\n  function _getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount1) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n    }\\n    return mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\\n  }\\n\\n  function _countDigits(uint n) internal pure returns (uint) {\\n    if (n == 0) {\\n      return 0;\\n    }\\n    uint count = 0;\\n    while (n != 0) {\\n      n = n / 10;\\n      ++count;\\n    }\\n    return count;\\n  }\\n\\n  function _min(uint a, uint b) internal pure returns (uint) {\\n    return a < b ? a : b;\\n  }\\n\\n  function _max(uint a, uint b) internal pure returns (uint) {\\n    return a > b ? a : b;\\n  }\\n\\n  function _toUint128(uint x) private pure returns (uint128 y) {\\n    require((y = uint128(x)) == x);\\n  }\\n\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n  /// @dev Throws if |tick| > max tick\\n  /// @param tick The input tick for the above formula\\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n  /// at the given tick\\n  function _getSqrtRatioAtTick(int24 tick)\\n  internal\\n  pure\\n  returns (uint160 sqrtPriceX96)\\n  {\\n    uint256 absTick =\\n      tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\\n\\n    // EDIT: 0.8 compatibility\\n    require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n    uint256 ratio =\\n      absTick & 0x1 != 0\\n        ? 0xfffcb933bd6fad37aa2d162d1a594001\\n        : 0x100000000000000000000000000000000;\\n    if (absTick & 0x2 != 0)\\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n    if (absTick & 0x4 != 0)\\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n    if (absTick & 0x8 != 0)\\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n    if (absTick & 0x10 != 0)\\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n    if (absTick & 0x20 != 0)\\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n    if (absTick & 0x40 != 0)\\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n    if (absTick & 0x80 != 0)\\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n    if (absTick & 0x100 != 0)\\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n    if (absTick & 0x200 != 0)\\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n    if (absTick & 0x400 != 0)\\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n    if (absTick & 0x800 != 0)\\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n    if (absTick & 0x1000 != 0)\\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n    if (absTick & 0x2000 != 0)\\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n    if (absTick & 0x4000 != 0)\\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n    if (absTick & 0x8000 != 0)\\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n    if (absTick & 0x10000 != 0)\\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n    if (absTick & 0x20000 != 0)\\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n    if (absTick & 0x40000 != 0)\\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n    if (absTick & 0x80000 != 0)\\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n    if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n    sqrtPriceX96 = uint160(\\n      (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n    );\\n  }\\n\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n  /// ever return.\\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n  function _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n    // second inequality must be < because the price can never reach the price at the max tick\\n    require(\\n      sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n      \\\"R\\\"\\n    );\\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n    uint256 r = ratio;\\n    uint256 msb = 0;\\n\\n    assembly {\\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(5, gt(r, 0xFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(4, gt(r, 0xFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(3, gt(r, 0xFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(2, gt(r, 0xF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(1, gt(r, 0x3))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := gt(r, 0x1)\\n      msb := or(msb, f)\\n    }\\n\\n    if (msb >= 128) r = ratio >> (msb - 127);\\n    else r = ratio << (127 - msb);\\n\\n    int256 log_2 = (int256(msb) - 128) << 64;\\n\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(63, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(62, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(61, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(60, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(59, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(58, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(57, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(56, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(55, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(54, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(53, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(52, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(51, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(50, f))\\n    }\\n\\n    tick = _getFinalTick(log_2, sqrtPriceX96);\\n  }\\n\\n  function _getFinalTick(int256 log_2, uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n    // 128.128 number\\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141;\\n\\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n    tick = (tickLow == tickHi)\\n      ? tickLow\\n      : (_getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow);\\n  }\\n}\",\"keccak256\":\"0xa9594ec5379c3d676305e91385faaf4582aa6119221f89a61d4839fb05e89723\",\"license\":\"MIT\"},\"contracts/strategies/kyber/KyberStrategyErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary KyberStrategyErrors {\\n\\n  string public constant NEED_REBALANCE = \\\"KS-1 Need rebalance\\\";\\n  string public constant WRONG_BALANCE = \\\"KS-2 Wrong balance\\\";\\n  string public constant INCORRECT_TICK_RANGE = \\\"KS-3 Incorrect tickRange\\\";\\n  string public constant INCORRECT_REBALANCE_TICK_RANGE = \\\"KS-4 Incorrect rebalanceTickRange\\\";\\n  string public constant INCORRECT_ASSET = \\\"KS-5 Incorrect asset\\\";\\n  string public constant WRONG_FEE = \\\"KS-6 Wrong fee\\\";\\n  string public constant WRONG_LIQUIDITY = \\\"KS-7 Wrong liquidity\\\";\\n  string public constant NO_REBALANCE_NEEDED = \\\"KS-9 No rebalance needed\\\";\\n  string public constant BALANCE_LOWER_THAN_FEE = \\\"KS-10 Balance lower than fee\\\";\\n  string public constant NOT_CALLBACK_CALLER = \\\"KS-11 Not callback caller\\\";\\n  string public constant UNKNOWN_SWAP_ROUTER = \\\"KS-12 Unknown router\\\";\\n  string public constant ZERO_PROFIT_HOLDER = \\\"KS-13 Zero strategy profit holder\\\";\\n  string public constant NOT_UNSTAKED = \\\"KS-14 Liquidity must be unstaked\\\";\\n}\",\"keccak256\":\"0x7f43b63ec1e91024914b0dc8b5d35760058768ca056701658d14efb48a0e1e7d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b615f7380620000f36000396000f3fe608060405234801561001057600080fd5b50600436106103135760003560e01c806365f50a8d116101ae57806396b7b14e116100ff578063cd4c8156116100ad578063dee1f0e41161007c578063dee1f0e41461073f578063eb5620db14610752578063f77c479114610765578063ffb86c6a1461076d57600080fd5b8063cd4c8156146106ec578063ceee861d146106ff578063d295ea7014610723578063de3d047c1461072c57600080fd5b806396b7b14e1461065a5780639d0bcca01461066d578063a3f4df7e14610675578063ab9e3eee146106ac578063b2457556146106b3578063b429afeb146106c6578063bd38837b146106d957600080fd5b80637cc963801161015c5780637cc96380146105de5780637d7c2a1c146105e65780637efc77fa146105ee57806380e7ac7c14610612578063877887821461061a57806387c7f77014610623578063936725ec1461063657600080fd5b806365f50a8d146105455780636855f30e146105585780636b5fba5a1461056b5780636ffb4c8e1461057e57806371ee01751461059157806373a50ef51461059a57806378327438146105be57600080fd5b80633cd8045e1161026857806351e03fbe1161021657806351e03fbe146104b057806354679963146104c35780635641ec03146104d8578063569c39cb146104e05780635cfc1a51146105045780636207a0cf1461050e57806363e277341461053257600080fd5b80633cd8045e146104365780634593144c146104495780634ad0b684146104515780634e71d92d146104595780634fa5d854146104615780634fac6ccd1461047e57806351b9c8341461049157600080fd5b8063261efa12116102c5578063261efa12146103cf57806328abdef0146103d8578063321793a8146103e0578063325a19f1146103f357806333c5b58e146103fb578063388cff6b1461040357806338d52e0f1461041657600080fd5b806301e1d1141461031857806301ffc9a7146103335780630acd12c7146103565780630e30428d1461035e578063150b7a02146103735780631865c57d1461039f57806322b6f5e2146103bc575b600080fd5b610320610775565b6040519081526020015b60405180910390f35b610346610341366004614b5e565b610800565b604051901515815260200161032a565b61032061082b565b61037161036c366004614b9d565b61094d565b005b610386610381366004614c8c565b6109f1565b6040516001600160e01b0319909116815260200161032a565b6103a7610a02565b60405161032a99989796959493929190614d64565b6103716103ca366004614e1e565b610e5a565b61032060725481565b610371610f0a565b6103716103ee366004614e4e565b611083565b61032061115c565b610320611190565b610371610411366004614e8c565b611208565b603c54610429906001600160a01b031681565b60405161032a9190614f28565b603d54610429906001600160a01b031681565b6103206114fd565b606e54610320565b61037161152d565b6104696115a7565b6040805192835260208301919091520161032a565b61037161048c366004614f3c565b61160c565b61049961173e565b60408051921515835260208301919091520161032a565b6103206104be366004614e4e565b6117c9565b6104cb611991565b60405161032a9190614fa9565b610371611a1f565b6104cb604051806040016040528060058152602001640312e302e360dc1b81525081565b600160ff1b610320565b6104cb60405180604001604052806005815260200164312e302e3160d81b81525081565b610371610540366004614fbc565b611a9f565b610371610553366004614e4e565b611b26565b610371610566366004614e4e565b611bf4565b610371610579366004614f3c565b611c7c565b61037161058c366004614e4e565b611d0d565b61032060715481565b6104cb604051806040016040528060058152602001640322e332e360dc1b81525081565b6103206105cc366004614f3c565b60706020526000908152604090205481565b610320611d95565b610371611dc5565b6104cb6040518060400160405280600581526020016425bcb132b960d91b81525081565b610346611ea7565b61032060415481565b610320610631366004614b9d565b611f2d565b6104cb604051806040016040528060058152602001640332e302e360dc1b81525081565b6103716106683660046150b6565b6120b8565b610429612157565b6104cb604051806040016040528060188152602001774b7962657220436f6e76657274657220537472617465677960401b81525081565b6001610346565b6103206106c1366004615177565b612187565b6103466106d4366004614f3c565b612236565b606f54610429906001600160a01b031681565b604054610429906001600160a01b031681565b6104cb604051806040016040528060058152602001640312e322e360dc1b81525081565b610320603e5481565b61037161073a366004614e4e565b61225b565b61034661074d366004614f3c565b6122eb565b61037161076036600461519c565b612370565b610429612466565b610346612496565b6000610780606e5490565b603c546040516370a0823160e01b81526001600160a01b03909116906370a08231906107b0903090600401614f28565b602060405180830381865afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f191906151ef565b6107fb919061521e565b905090565b60006001600160e01b0319821663f73147b360e01b14806108255750610825826125a0565b92915050565b603d54603c54604051633e53813360e11b81526000926001600160a01b039081169216908390733BEB969c0cd273eA1d7a39137a757Cf1c474510a90637ca702669061087d9086908690600401615231565b602060405180830381865af415801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be91906151ef565b905060008060006108cd6125c5565b925092509250733BEB969c0cd273eA1d7a39137a757Cf1c474510a639ad00ec2868686868b6040518663ffffffff1660e01b815260040161091295949392919061524b565b60006040518083038186803b15801561092a57600080fd5b505af415801561093e573d6000803e3d6000fd5b50929998505050505050505050565b733C8b18162cBb11B9D0afe3828f4A6C6e247f30E063142395ef61096f612466565b6040516001600160e01b031960e084901b1681526001600160a01b03918216600482015290851660248201526044810184905260640160006040518083038186803b1580156109bd57600080fd5b505af41580156109d1573d6000803e3d6000fd5b5050506001600160a01b0390921660009081526070602052604090205550565b630a85bd0160e11b5b949350505050565b600254600354600480546040805183815260a081019091526001600160a01b0394851694938416936000939216918391829160609182918291906020820160808036833750506004548251929550600160c01b900460020b91859150600090610a6d57610a6d61527b565b600292830b60209182029290920101526004548451600160d81b90910490910b9084906001908110610aa157610aa161527b565b600292830b60209182029290920101526004548451600160a01b909104820b9185918110610ad157610ad161527b565b600292830b60209182029290920101526005548451910b9084906003908110610afc57610afc61527b565b60029290920b602092830291909101909101526005546006546001546001600160a01b03169850600160201b9091046001600160801b0316955093506003604051908082528060200260200182016040528015610b63578160200160208202803683370190505b506040516370a0823160e01b81529092506001600160a01b038a16906370a0823190610b93908a90600401614f28565b602060405180830381865afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd491906151ef565b82600081518110610be757610be761527b565b60209081029190910101526040516370a0823160e01b81526001600160a01b038916906370a0823190610c1e908a90600401614f28565b602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906151ef565b82600181518110610c7257610c7261527b565b60209081029190910101526040516370a0823160e01b8152731c954e8fe737f99f68fa1ccda3e51ebdb291948c906370a0823190610cb4908a90600401614f28565b602060405180830381865afa158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf591906151ef565b82600281518110610d0857610d0861527b565b602090810291909101015260408051600480825260a0820190925290816020016020820280368337019050506005548151919250600160a01b900460ff16908290600090610d5857610d5861527b565b91151560209283029190910190910152600a54815160ff9091169082906001908110610d8657610d8661527b565b911515602092830291909101909101526040516304de78eb60e11b81526001600482015273dF1B8F6250f82aD1F6E982cef422b31A4334FD6e906309bcf1d6906024016040805180830381865af4158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190615291565b82600281518110610e1c57610e1c61527b565b6020026020010183600381518110610e3657610e3661527b565b60200260200101821515151581525082151515158152505050909192939495969798565b733BEB969c0cd273eA1d7a39137a757Cf1c474510a63b4339948610e7c612466565b6040516001600160e01b031960e084901b1681526001600160a01b03918216600482015260248101869052908416604482015260640160006040518083038186803b158015610eca57600080fd5b505af4158015610ede573d6000803e3d6000fd5b505050604192909255604080546001600160a01b0319166001600160a01b039290921691909117905550565b733BEB969c0cd273eA1d7a39137a757Cf1c474510a63493f6edc610f2c612466565b6040518263ffffffff1660e01b8152600401610f489190614f28565b60006040518083038186803b158015610f6057600080fd5b505af4158015610f74573d6000803e3d6000fd5b50506005805460ff60a01b191690555050606f54600254600354604051637fd6c0a160e01b81526001600160a01b0393841660048201529183166024830152919091166044820152739971fDd707a2878Dc201294DcAbef5A0F890158990637fd6c0a190606401602060405180830381865af4158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c91906151ef565b60016006018190555073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e63f460770b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561106957600080fd5b505af415801561107d573d6000803e3d6000fd5b50505050565b733BEB969c0cd273eA1d7a39137a757Cf1c474510a63493f6edc6110a5612466565b6040518263ffffffff1660e01b81526004016110c19190614f28565b60006040518083038186803b1580156110d957600080fd5b505af41580156110ed573d6000803e3d6000fd5b505050600682905550604051631c77945b60e31b81526004810182905273dF1B8F6250f82aD1F6E982cef422b31A4334FD6e9063e3bca2d89060240160006040518083038186803b15801561114157600080fd5b505af4158015611155573d6000803e3d6000fd5b5050505050565b60006107fb61118c60017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b6152c0565b5490565b6000733BEB969c0cd273eA1d7a39137a757Cf1c474510a63493f6edc6111b4612466565b6040518263ffffffff1660e01b81526004016111d09190614f28565b60006040518083038186803b1580156111e857600080fd5b505af41580156111fc573d6000803e3d6000fd5b505050506107fb6125e0565b600054610100900460ff16158080156112285750600054600160ff909116105b806112425750303b158015611242575060005460ff166001145b6112aa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156112cd576000805461ff0019166101001790555b6112d88989896126b1565b73dF1B8F6250f82aD1F6E982cef422b31A4334FD6e634e23f86760018b8a8a8a8a8f6001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135b91906152d3565b6040516001600160e01b031960e08a901b16815260048101979097526001600160a01b03958616602488015293851660448701529184166064860152600290810b60848601520b60a48401521660c482015285151560e48201526101040160006040518083038186803b1580156113d157600080fd5b505af41580156113e5573d6000803e3d6000fd5b5050506009839055506040516318b3a88560e31b81526001600482015273dF1B8F6250f82aD1F6E982cef422b31A4334FD6e9063c59d442890602401600060405180830381865af415801561143e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114669190810190615320565b60429061147390826153f0565b507f13bdeb5b5bb760c04b92d93e56c576c6805359d41a13d3cca178aa7c8526b98460426040516114a491906154af565b60405180910390a180156114f2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b60006107fb61118c60017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f16152c0565b733BEB969c0cd273eA1d7a39137a757Cf1c474510a63d19cc38a61154f612466565b6040518263ffffffff1660e01b815260040161156b9190614f28565b60006040518083038186803b15801561158357600080fd5b505af4158015611597573d6000803e3d6000fd5b505050506115a3612753565b5050565b603d5460408051808201909152600a81526914d08e8811195b9a595960b21b60208201526000918291906001600160a01b031633146115f95760405162461bcd60e51b81526004016112a19190614fa9565b50611604600161280f565b915091509091565b33301461165b5760405162461bcd60e51b815260206004820152601b60248201527f496e637265617365207265766973696f6e20666f7262696464656e000000000060448201526064016112a1565b600061168b61118c60017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd6152c0565b61169690600161521e565b90506116ca816116c760017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd6152c0565b55565b6116f9826116c760017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e46152c0565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b606f546040516347efaccf60e01b8152600160048201526001600160a01b039091166024820152600090819073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e906347efaccf906044016040805180830381865af41580156117a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611604919061553a565b603d54603c54604051633e53813360e11b81526000926001600160a01b039081169216908390733BEB969c0cd273eA1d7a39137a757Cf1c474510a90637ca702669061181b9086908690600401615231565b602060405180830381865af4158015611838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185c91906151ef565b9050808511156119085760008061187b61187684896152c0565b612943565b604051631594b05b60e01b81529098509193509150733BEB969c0cd273eA1d7a39137a757Cf1c474510a90631594b05b906118c29087908790879087908c9060040161524b565b602060405180830381865af41580156118df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190391906151ef565b925050505b6040516333bbb20360e11b815260048101869052602481018290526001600160a01b03808416604483015284166064820152733BEB969c0cd273eA1d7a39137a757Cf1c474510a9063677764069060840160006040518083038186803b15801561197157600080fd5b505af4158015611985573d6000803e3d6000fd5b50505050505050919050565b6042805461199e90615368565b80601f01602080910402602001604051908101604052809291908181526020018280546119ca90615368565b8015611a175780601f106119ec57610100808354040283529160200191611a17565b820191906000526020600020905b8154815290600101906020018083116119fa57829003601f168201915b505050505081565b611a27612974565b733BEB969c0cd273eA1d7a39137a757Cf1c474510a63bd020682611a49612466565b603c54603d5460405160e085901b6001600160e01b03191681526001600160a01b039384166004820152918316602483015291909116604482015260640160006040518083038186803b15801561106957600080fd5b733BEB969c0cd273eA1d7a39137a757Cf1c474510a63eae13e76611ac1612466565b84846040518463ffffffff1660e01b8152600401611ae193929190615568565b60006040518083038186803b158015611af957600080fd5b505af4158015611b0d573d6000803e3d6000fd5b5060429250611b21915083905084836155a8565b505050565b733BEB969c0cd273eA1d7a39137a757Cf1c474510a63493f6edc611b48612466565b6040518263ffffffff1660e01b8152600401611b649190614f28565b60006040518083038186803b158015611b7c57600080fd5b505af4158015611b90573d6000803e3d6000fd5b5050600a546040805180820190915260208082527f4b532d3134204c6971756964697479206d75737420626520756e7374616b656490820152925060ff16159050611bee5760405162461bcd60e51b81526004016112a19190614fa9565b50600955565b733C8b18162cBb11B9D0afe3828f4A6C6e247f30E063a0113d48611c16612466565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810184905260440160006040518083038186803b158015611c5c57600080fd5b505af4158015611c70573d6000803e3d6000fd5b50505060729190915550565b733BEB969c0cd273eA1d7a39137a757Cf1c474510a63493f6edc611c9e612466565b6040518263ffffffff1660e01b8152600401611cba9190614f28565b60006040518083038186803b158015611cd257600080fd5b505af4158015611ce6573d6000803e3d6000fd5b5050600180546001600160a01b0319166001600160a01b0394909416939093179092555050565b733C8b18162cBb11B9D0afe3828f4A6C6e247f30E063d2c3cf25611d2f612466565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810184905260440160006040518083038186803b158015611d7557600080fd5b505af4158015611d89573d6000803e3d6000fd5b50505060719190915550565b60006107fb61118c60017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd6152c0565b6000806000611dd2612a77565b606f54603d546040516358d4b9ff60e01b8152600160048201526001600160a01b03928316602482015282841660448201526064810185905260848101869052911660a4820152929550909350915060009073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e906358d4b9ff9060c401600060405180830381865af4158015611e60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e8891908101906156c2565b90508051600203611e9f57611e9c81612bf6565b50505b611155612c83565b600954604051639ee0b2a960e01b815260009173dF1B8F6250f82aD1F6E982cef422b31A4334FD6e91639ee0b2a991611ee69160040190815260200190565b602060405180830381865af4158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2791906156f6565b15905090565b606f5460408051808201909152600a81526914d08e8811195b9a595960b21b60208201526000916001600160a01b031690338214611f7e5760405162461bcd60e51b81526004016112a19190614fa9565b50600080611f8b86612c97565b915091506000611f9a87612d03565b90508581101561200757600554600160201b90046001600160801b03168015612005576000611fc882612d73565b90507faebc771af58936b05e89b0be7d3f9761480181abcd4a649fbdd01753fda169708282604051611ffb929190615713565b60405180910390a1505b505b739971fDd707a2878Dc201294DcAbef5A0F89015896399c1fde48784868861202d612466565b603c546040516001600160e01b031960e089901b1681526120629695949392916001600160a01b031690607090600401615765565b602060405180830381865af415801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a391906151ef565b94506120ad612c83565b505050505092915050565b606f5460408051808201909152600a81526914d08e8811195b9a595960b21b6020820152906001600160a01b031633146121055760405162461bcd60e51b81526004016112a19190614fa9565b508151815160408051808201909152600d81526c54532d3139206c656e6774687360981b602082015290821461214e5760405162461bcd60e51b81526004016112a19190614fa9565b5061107d612c83565b60006107fb61118c60017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e46152c0565b603d54603c546040516001625acc3160e01b031981526000928392733BEB969c0cd273eA1d7a39137a757Cf1c474510a9263ffa533cf926121d9926001600160a01b0391821692911690600401615231565b602060405180830381865af41580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a91906151ef565b9050801561222f5761222c8184612dfe565b91505b5092915050565b6000612240612466565b6001600160a01b0316826001600160a01b0316149050919050565b733BEB969c0cd273eA1d7a39137a757Cf1c474510a630568a9d561227d612466565b603e546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044810184905260640160006040518083038186803b1580156122cb57600080fd5b505af41580156122df573d6000803e3d6000fd5b505050603e9190915550565b6000816001600160a01b03166122ff612466565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561233c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236091906152d3565b6001600160a01b03161492915050565b60008061237b612a77565b50606f54604080516080810182528a15158152602081018a90526001600160a01b038981168284015260608201899052603d549251633aa0b78160e11b815295975093955060009473dF1B8F6250f82aD1F6E982cef422b31A4334FD6e946375416f02946123f894600194918316938a938c9216906004016157b4565b600060405180830381865af4158015612415573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261243d91908101906156c2565b905080516002036124545761245181612bf6565b50505b61245c612c83565b5050505050505050565b60006107fb61118c60017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c36186152c0565b6040516304de78eb60e11b8152600160048201526000908190819073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e906309bcf1d6906024016040805180830381865af41580156124ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125109190615291565b604051636f1cd37160e01b815260016004820152919350915073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e90636f1cd37190602401602060405180830381865af4158015612565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258991906156f6565b806125915750815b806125995750805b9250505090565b60006001600160e01b0319821663c19fa56160e01b1480610825575061082582612ea8565b60008060006125d5600019612943565b925092509250909192565b603c54600090819081906125fc906001600160a01b0316612c97565b91509150739971fDd707a2878Dc201294DcAbef5A0F890158963c9bce6908361263d6126386005546001600160801b03600160201b9091041690565b612edd565b606f546040516001600160e01b031960e086901b16815261267093929187916001600160a01b039091169060040161582c565b602060405180830381865af415801561268d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259991906151ef565b600054610100900460ff166126d85760405162461bcd60e51b81526004016112a190615873565b6126e28383612f27565b606f80546001600160a01b0319166001600160a01b03831617905561270b6064620186a06158be565b6071557fe4166dfcf23bbd3e3f764a99dc8fa740554c03c82d6019b81cf265f396f6f2fe61273d6064620186a06158be565b60405190815260200160405180910390a1505050565b60608060008060006127636130ef565b606f549295509093509150733C8b18162cBb11B9D0afe3828f4A6C6e247f30E09063e99de4da906001600160a01b031661279b61316e565b8686866040518663ffffffff1660e01b81526004016127be9594939291906158e0565b600060405180830381865af41580156127db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261280391908101906159ae565b90969095509350505050565b60008060008061281f6001613202565b91509150600061282d6132be565b91965094509050600061287f87801561284557508415155b801561286b5750620186a08560715461285e9190615a07565b61286891906158be565b83115b612876576000612878565b825b8486613397565b915060009050806128c6612893858861521e565b603c5485906128aa906001600160a01b0316612d03565b606e546128b7919061521e565b6128c1919061521e565b613658565b915091506040805187815260208101879052908101899052606081018890526080810183905260a081018290527f3e9abbc366dbf9fe260e2640c06eefbedd7720cf986ae553374e46b804f4ff559060c00160405180910390a161292a828961521e565b612934828961521e565b97509750505050505050915091565b60008060008060006129556001613202565b91509150612964868284613688565b5091989097509095509350505050565b600061297e613d87565b90507f768a28cb3459382a3d2173feb2dad0235f8de680b109872da581a3aa269fe5f4816040516129af9190615a1e565b60405180910390a1603c5460009081906129d1906001600160a01b0316612c97565b606f549193509150739971fDd707a2878Dc201294DcAbef5A0F8901589906358b54f16906001600160a01b0316612a0e612a09612466565b613dab565b846070600019886040518763ffffffff1660e01b8152600401612a3696959493929190615a31565b602060405180830381865af4158015612a53573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214e91906151ef565b6000806000612a84612466565b60405163124fdbb760e21b8152909150733BEB969c0cd273eA1d7a39137a757Cf1c474510a9063493f6edc90612abe908490600401614f28565b60006040518083038186803b158015612ad657600080fd5b505af4158015612aea573d6000803e3d6000fd5b50505050612af6612496565b6040518060400160405280601881526020017712d4cb4e48139bc81c9958985b185b98d9481b995959195960421b81525090612b455760405162461bcd60e51b81526004016112a19190614fa9565b50612b506001613202565b9350839050612b5d610775565b612b6791906152c0565b604051637ed25b6f60e01b81526001600482015290925073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e90637ed25b6f9060240160006040518083038186803b158015612bb557600080fd5b505af4158015612bc9573d6000803e3d6000fd5b5050600554600160201b90046001600160801b0316159150612bf1905057612bef613d87565b505b909192565b6060600073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e6374287da16001856040518363ffffffff1660e01b8152600401612c34929190615713565b600060405180830381865af4158015612c51573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c799190810190615a6e565b9094909350915050565b6000612c8d6125e0565b606e819055919050565b60606000612ca361316e565b9150612caf8284613e0f565b90506000198114156040518060400160405280600f81526020016e53423a2057726f6e672076616c756560881b81525090612cfd5760405162461bcd60e51b81526004016112a19190614fa9565b50915091565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190612d32903090600401614f28565b602060405180830381865afa158015612d4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082591906151ef565b60405163131c667560e01b8152600160048201526001600160801b038216602482015260609073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e9063131c6675906044015b600060405180830381865af4158015612dd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082591908101906156c2565b600554600090600160a01b900460ff1615612e97576040805160028082526060820183526000926020830190803683370190505090508381600081518110612e4857612e4861527b565b6020026020010181815250507f59400c8c523464b521238ea8f50e923f2bc64663557e6afec92a97f7efe92d058182604051612e85929190615ab4565b60405180910390a16000915050610825565b612ea18383613e6d565b9050610825565b60006001600160e01b0319821663b7b79fa960e01b148061082557506301ffc9a760e01b6001600160e01b0319831614610825565b60405163df24faf760e01b8152600160048201526001600160801b038216602482015260609073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e9063df24faf790604401612db9565b600054610100900460ff16612f4e5760405162461bcd60e51b81526004016112a190615873565b612f78817fd2de0374d4479f33e63ae5ed6ca772a10463dd883a90c612050b51fab6196400613e94565b612f8182613eea565b60405163b429afeb60e01b81526001600160a01b0382169063b429afeb90612fad908590600401614f28565b602060405180830381865afa158015612fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fee91906156f6565b6040518060400160405280600f81526020016e53423a2057726f6e672076616c756560881b815250906130345760405162461bcd60e51b81526004016112a19190614fa9565b50806001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613073573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309791906152d3565b603c80546001600160a01b039283166001600160a01b031991821617909155603d80549390921692811692909217905560408054909116739cc199d4353b5fb3e6c8eebc99f5139e0d8ea06b17905550612710604155565b60405163fe94e4db60e01b8152600160048201526060908190819073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e9063fe94e4db90602401600060405180830381865af4158015613146573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125d59190810190615ae2565b6040805160028082526060808301845292602083019080368337505060025482519293506001600160a01b0316918391506000906131ae576131ae61527b565b6001600160a01b0392831660209182029290920101526003548251911690829060019081106131df576131df61527b565b60200260200101906001600160a01b031690816001600160a01b03168152505090565b60008082156132af57606e54613216612c83565b603d54604051636e5b9cc760e11b815260048101849052602481018390526001600160a01b039091166044820152909350739971fDd707a2878Dc201294DcAbef5A0F89015899063dcb7398e90606401602060405180830381865af4158015613283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a791906151ef565b915050915091565b5050606e546000915091565b50565b60008060008060006132ce612753565b600254919350915073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e906334d2ec3d906001600160a01b0316613303612466565b85856040518563ffffffff1660e01b81526004016133249493929190615b69565b602060405180830381865af4158015613341573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336591906151ef565b9450613371828261410f565b603c548590859061338a906001600160a01b0316612d03565b9450945094505050909192565b603c5460009081906001600160a01b0316818587116133b75760006133c1565b6133c186886152c0565b9050620186a0856071546133d59190615a07565b6133df91906158be565b81111561357f57851561348e57603d54733C8b18162cBb11B9D0afe3828f4A6C6e247f30E09063aac2718a90849089906001600160a01b031661342183612d03565b61342b908b61521e565b6040518563ffffffff1660e01b815260040161344a9493929190615ba7565b602060405180830381865af4158015613467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348b91906151ef565b92505b600061349983612d03565b603c5490915060009081906134b6906001600160a01b0316612c97565b606f5491935091506000906134d6906001600160a01b03168685856141a5565b905060006134e382612bf6565b5090507f59400c8c523464b521238ea8f50e923f2bc64663557e6afec92a97f7efe92d058282604051613517929190615ab4565b60405180910390a16000613529612c83565b9050600061353689612d03565b9050613542878d61521e565b61354c828461521e565b10156135735761355c818361521e565b613566888e61521e565b61357091906152c0565b9a505b5050505050505061364e565b851561364e57600061359083612d03565b9050868110156135b3576135a660008888613688565b909750955061364c915050565b603d54733C8b18162cBb11B9D0afe3828f4A6C6e247f30E09063aac2718a9085908a906001600160a01b03166135e9868c61521e565b6040518563ffffffff1660e01b81526004016136089493929190615ba7565b602060405180830381865af4158015613625573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364991906151ef565b93505b505b5050935093915050565b600080838311156136745761366d84846152c0565b9150613681565b61367e83856152c0565b90505b9250929050565b600080600080613697876143dc565b613732604051806102200160405280600015158152602001606081526020016000815260200160008152602001600081526020016000815260200160608152602001600081526020016060815260200160008152602001600081526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160006001600160a01b031681525090565b60001988148082526000935080613751575061374e878961521e565b15155b801561375c57508515155b15613d6e5761376961316e565b6101608201819052603c546001600160a01b039081166101808401819052606f5490911661020084015261379d9190613e0f565b6101a08201526101808101516137b290612d03565b6101c08201526137c061442f565b6020820152600554600160201b90046001600160801b03166040820152600554600160201b90046001600160801b03166060820152610200810151610180820151604051637a55caf360e01b8152739971fDd707a2878Dc201294DcAbef5A0F890158992637a55caf39261383692600401615231565b602060405180830381865af4158015613853573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387791906151ef565b60a08201528051733C8b18162cBb11B9D0afe3828f4A6C6e247f30E09063ec0cc4fd906138ad576138a8898b61521e565b6138b0565b60005b30846101600151856101a001518661020001518c88606001516040518863ffffffff1660e01b81526004016138eb9796959493929190615bd1565b600060405180830381865af4158015613908573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139309190810190615c20565b60c08301526080820181905215613a795761394e8160800151612d73565b6101e0820152600554600160201b90046001600160801b0316816060015161397691906152c0565b608082018190526101e08201516040517faebc771af58936b05e89b0be7d3f9761480181abcd4a649fbdd01753fda16970926139b3929091615713565b60405180910390a1739971fDd707a2878Dc201294DcAbef5A0F8901589637a9a23e5826102000151836101600151846101a001518560200151866080015187604001518860c00151896101e001516040518963ffffffff1660e01b8152600401613a24989796959493929190615c5c565b600060405180830381865af4158015613a41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a699190810190615cde565b60c0830152610100820152613b15565b6102008101516101608201516101a083015160c0840151604051636138ea8560e01b8152739971fDd707a2878Dc201294DcAbef5A0F890158994636138ea8594613ac99491939092600401615d14565b600060405180830381865af4158015613ae6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613b0e91908101906156c2565b6101008201525b739971fDd707a2878Dc201294DcAbef5A0F890158963f1f2b573826101600151836101a001518460c00151856102000151613b51612a09612466565b8751613b68578d8f613b63919061521e565b613b6a565b8e5b88610100015160706040518963ffffffff1660e01b8152600401613b95989796959493929190615d50565b602060405180830381865af4158015613bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd691906151ef565b8160e001818151613be7919061521e565b9052508615613c9657610180810151603d546101c0830151733C8b18162cBb11B9D0afe3828f4A6C6e247f30E09263aac2718a9290918b916001600160a01b031690613c33908c61521e565b6040518563ffffffff1660e01b8152600401613c529493929190615ba7565b602060405180830381865af4158015613c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9391906151ef565b91505b613c9e612c83565b610120820152610180810151613cb390612d03565b6101408201526101c0810151613cc9908761521e565b87826101400151836101200151613ce0919061521e565b613cea919061521e565b1015613d385786816101400151826101200151613d07919061521e565b613d11919061521e565b6101c0820151613d21908861521e565b613d2b91906152c0565b613d35908461521e565b92505b670de0b6b3a76400008160a001518260e00151613d559190615a07565b613d5f91906158be565b8160a001519450945050613d7e565b6000806000809450945094509450505b93509350935093565b60606107fb613da66005546001600160801b03600160201b9091041690565b612d73565b6000816001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613deb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082591906152d3565b8151600090815b81811015613e6157836001600160a01b0316858281518110613e3a57613e3a61527b565b60200260200101516001600160a01b031603613e595791506108259050565b600101613e16565b50600019949350505050565b6000806000613e7b84613202565b91509150613e8a858284613397565b5095945050505050565b613e9e82826144aa565b6115a35760405162461bcd60e51b815260206004820152601a60248201527f496e74657266616365206973206e6f7420737570706f7274656400000000000060448201526064016112a1565b600054610100900460ff16613f115760405162461bcd60e51b81526004016112a190615873565b6001600160a01b038116613f595760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b60448201526064016112a1565b613f83817f4c2403fdcb3cff9b705d96bf0705858e3390412670a62c8bcba611ca7e20ab86613e94565b60006001600160a01b0316816001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015613fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff091906152d3565b6001600160a01b0316036140385760405162461bcd60e51b815260206004820152600f60248201526e5a65726f20676f7665726e616e636560881b60448201526064016112a1565b614067816116c760017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c36186152c0565b614096426116c760017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b6152c0565b6140c5436116c760017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f16152c0565b604080516001600160a01b0383168152426020820152438183015290517f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe2367134269181900360600190a150565b81518015611b215760006141238484614588565b9050733C8b18162cBb11B9D0afe3828f4A6C6e247f30E063acf741a3614147612466565b603d546040516001600160e01b031960e085901b16815261417992916001600160a01b03169089908790600401615b69565b60006040518083038186803b15801561419157600080fd5b505af415801561245c573d6000803e3d6000fd5b60606141af612496565b15604051806040016040528060138152602001724b532d31204e65656420726562616c616e636560681b815250906141fa5760405162461bcd60e51b81526004016112a19190614fa9565b50604080516002808252606082018352909160208301908036833701905050600480546005546040516319c75b9360e31b81526001600160a01b03831693810193909352600160c01b8204600290810b6024850152600160d81b90920490910b60448301526301000000900460ff1615156064820152909150600090819073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e9063ce3adc9890608401600060405180830381865af41580156142b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142dc9190810190615320565b6002549091506142f6906001600160a01b0316878961473b565b60025460035460405163ca27d10d60e01b8152739971fDd707a2878Dc201294DcAbef5A0F89015899263ca27d10d92614349928c9287926001600160a01b03918216929116908d90600090600401615dc6565b6040805180830381865af4158015614365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143899190615e0e565b8460018151811061439c5761439c61527b565b602090810291909101015291506143b382876152c0565b836000815181106143c6576143c661527b565b6020026020010181815250505050949350505050565b6143e4612496565b15604051806040016040528060138152602001724b532d31204e65656420726562616c616e636560681b815250906115a35760405162461bcd60e51b81526004016112a19190614fa9565b6040516327ceccd560e11b81526001600482015260609073dF1B8F6250f82aD1F6E982cef422b31A4334FD6e90634f9d99aa90602401600060405180830381865af4158015614482573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107fb91908101906156c2565b60006001600160a01b0383166144f15760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b60448201526064016112a1565b823b6000819003614506576000915050610825565b6040516301ffc9a760e01b81526001600160e01b0319841660048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa925050508015614570575060408051601f3d908101601f1916820190925261456d918101906156f6565b60015b1561457e5791506108259050565b5060009392505050565b603c54606f54603e546060926001600160a01b0390811692600092739971fDd707a2878Dc201294DcAbef5A0F89015899263ef50284f92169085906145cb61316e565b6145d6612a09612466565b60708c8c6041546040518a63ffffffff1660e01b815260040161460199989796959493929190615e32565b600060405180830381865af415801561461e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526146469190810190615a6e565b603d54604080546072549151631248faf160e21b81526001600160a01b03808916600483015260248201869052938416604482015292166064830152608482015291945091506000908190733C8b18162cBb11B9D0afe3828f4A6C6e247f30E090634923ebc49060a4016040805180830381865af41580156146cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146f09190615e0e565b915091507f4c300a656bfa0935e36cd55e92634bc20b2b7e0a0ebf424a2a25bfaac3a01e76878684846040516147299493929190615eb6565b60405180910390a15050505092915050565b604051636eb1769f60e11b815282906001600160a01b0385169063dd62ed3e9061476b9030908690600401615231565b602060405180830381865afa158015614788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147ac91906151ef565b1015611b21576147c76001600160a01b0384168260006147db565b611b216001600160a01b03841682600160ff1b5b8015806148545750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906148119030908690600401615231565b602060405180830381865afa15801561482e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061485291906151ef565b155b6148bf5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016112a1565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663095ea7b360e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152611b219286929160009161494f9185169084906149cc565b805190915015611b21578080602001905181019061496d91906156f6565b611b215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016112a1565b60606149db84846000856149e5565b90505b9392505050565b606082471015614a465760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016112a1565b600080866001600160a01b03168587604051614a629190615f21565b60006040518083038185875af1925050503d8060008114614a9f576040519150601f19603f3d011682016040523d82523d6000602084013e614aa4565b606091505b5091509150614ab587838387614ac0565b979650505050505050565b60608315614b2f578251600003614b28576001600160a01b0385163b614b285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016112a1565b50816109fa565b6109fa8383815115614b445781518083602001fd5b8060405162461bcd60e51b81526004016112a19190614fa9565b600060208284031215614b7057600080fd5b81356001600160e01b0319811681146149de57600080fd5b6001600160a01b03811681146132bb57600080fd5b60008060408385031215614bb057600080fd5b8235614bbb81614b88565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614c0757614c07614bc9565b604052919050565b60006001600160401b03821115614c2857614c28614bc9565b50601f01601f191660200190565b600082601f830112614c4757600080fd5b8135614c5a614c5582614c0f565b614bdf565b818152846020838601011115614c6f57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215614ca257600080fd5b8435614cad81614b88565b93506020850135614cbd81614b88565b92506040850135915060608501356001600160401b03811115614cdf57600080fd5b614ceb87828801614c36565b91505092959194509250565b600081518084526020808501945080840160005b83811015614d2757815187529582019590820190600101614d0b565b509495945050505050565b600081518084526020808501945080840160005b83811015614d27578151151587529582019590820190600101614d46565b6001600160a01b038a81168252898116602080840191909152898216604084015290881660608301526001600160801b038716608083015260a0820186905261012060c08301819052855190830181905260009161014084019187820191845b82811015614de357835160020b85529381019392810192600101614dc4565b5050505082810360e0840152614df98186614cf7565b9050828103610100840152614e0e8185614d32565b9c9b505050505050505050505050565b60008060408385031215614e3157600080fd5b823591506020830135614e4381614b88565b809150509250929050565b600060208284031215614e6057600080fd5b5035919050565b8035600281900b8114614e7957600080fd5b919050565b80151581146132bb57600080fd5b600080600080600080600080610100898b031215614ea957600080fd5b8835614eb481614b88565b97506020890135614ec481614b88565b96506040890135614ed481614b88565b95506060890135614ee481614b88565b9450614ef260808a01614e67565b9350614f0060a08a01614e67565b925060c0890135614f1081614e7e565b8092505060e089013590509295985092959890939650565b6001600160a01b0391909116815260200190565b600060208284031215614f4e57600080fd5b81356149de81614b88565b60005b83811015614f74578181015183820152602001614f5c565b50506000910152565b60008151808452614f95816020860160208601614f59565b601f01601f19169290920160200192915050565b6020815260006149de6020830184614f7d565b60008060208385031215614fcf57600080fd5b82356001600160401b0380821115614fe657600080fd5b818501915085601f830112614ffa57600080fd5b81358181111561500957600080fd5b86602082850101111561501b57600080fd5b60209290920196919550909350505050565b60006001600160401b0382111561504657615046614bc9565b5060051b60200190565b600082601f83011261506157600080fd5b81356020615071614c558361502d565b82815260059290921b8401810191818101908684111561509057600080fd5b8286015b848110156150ab5780358352918301918301615094565b509695505050505050565b600080604083850312156150c957600080fd5b82356001600160401b03808211156150e057600080fd5b818501915085601f8301126150f457600080fd5b81356020615104614c558361502d565b82815260059290921b8401810191818101908984111561512357600080fd5b948201945b8386101561514a57853561513b81614b88565b82529482019490820190615128565b9650508601359250508082111561516057600080fd5b5061516d85828601615050565b9150509250929050565b6000806040838503121561518a57600080fd5b823591506020830135614e4381614e7e565b600080600080608085870312156151b257600080fd5b84356151bd81614e7e565b93506020850135925060408501356151d481614b88565b915060608501356001600160401b03811115614cdf57600080fd5b60006020828403121561520157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561082557610825615208565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039586168152602081019490945260408401929092526060830152909116608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b600080604083850312156152a457600080fd5b82516152af81614e7e565b6020840151909250614e4381614e7e565b8181038181111561082557610825615208565b6000602082840312156152e557600080fd5b81516149de81614b88565b60006152fe614c5584614c0f565b905082815283838301111561531257600080fd5b6149de836020830184614f59565b60006020828403121561533257600080fd5b81516001600160401b0381111561534857600080fd5b8201601f8101841361535957600080fd5b61222c848251602084016152f0565b600181811c9082168061537c57607f821691505b60208210810361539c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611b2157600081815260208120601f850160051c810160208610156153c95750805b601f850160051c820191505b818110156153e8578281556001016153d5565b505050505050565b81516001600160401b0381111561540957615409614bc9565b61541d816154178454615368565b846153a2565b602080601f831160018114615452576000841561543a5750858301515b600019600386901b1c1916600185901b1785556153e8565b600085815260208120601f198616915b8281101561548157888601518255948401946001909101908401615462565b508582101561549f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352600084546154c381615368565b808487015260406001808416600081146154e457600181146154fe5761552c565b60ff1985168984015283151560051b89018301955061552c565b896000528660002060005b858110156155245781548b8201860152908301908801615509565b8a0184019650505b509398975050505050505050565b6000806040838503121561554d57600080fd5b825161555881614e7e565b6020939093015192949293505050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b6001600160401b038311156155bf576155bf614bc9565b6155d3836155cd8354615368565b836153a2565b6000601f84116001811461560757600085156155ef5750838201355b600019600387901b1c1916600186901b178355611155565b600083815260209020601f19861690835b828110156156385786850135825560209485019460019092019101615618565b50868210156156555760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600082601f83011261567857600080fd5b81516020615688614c558361502d565b82815260059290921b840181019181810190868411156156a757600080fd5b8286015b848110156150ab57805183529183019183016156ab565b6000602082840312156156d457600080fd5b81516001600160401b038111156156ea57600080fd5b61222c84828501615667565b60006020828403121561570857600080fd5b81516149de81614e7e565b8281526040602082015260006149db6040830184614cf7565b600081518084526020808501945080840160005b83811015614d275781516001600160a01b031687529582019590820190600101615740565b87815286602082015260e06040820152600061578460e083018861572c565b6001600160a01b0396871660608401529486166080830152509190931660a082015260c001919091529392505050565b868152600060018060a01b03808816602084015286604084015260c060608401528551151560c0840152602086015160e08401528060408701511661010084015260608601516080610120850152615810610140850182614f7d565b6080850196909652509290921660a09091015250949350505050565b60808152600061583f608083018761572c565b82810360208401526158518187614cf7565b604084019590955250506001600160a01b039190911660609091015292915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000826158db57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038616815260a0602082018190526000906159049083018761572c565b8281036040840152615916818761572c565b9050828103606084015261592a8186614cf7565b9050828103608084015261593e8185614cf7565b98975050505050505050565b600082601f83011261595b57600080fd5b8151602061596b614c558361502d565b82815260059290921b8401810191818101908684111561598a57600080fd5b8286015b848110156150ab5780516159a181614b88565b835291830191830161598e565b600080604083850312156159c157600080fd5b82516001600160401b03808211156159d857600080fd5b6159e48683870161594a565b935060208501519150808211156159fa57600080fd5b5061516d85828601615667565b808202811582820484141761082557610825615208565b6020815260006149de6020830184614cf7565b600060018060a01b03808916835280881660208401525085604083015284606083015283608083015260c060a083015261593e60c083018461572c565b60008060408385031215615a8157600080fd5b82516001600160401b03811115615a9757600080fd5b615aa385828601615667565b925050602083015190509250929050565b604081526000615ac76040830185614cf7565b8281036020840152615ad98185614cf7565b95945050505050565b600080600060608486031215615af757600080fd5b83516001600160401b0380821115615b0e57600080fd5b615b1a8783880161594a565b94506020860151915080821115615b3057600080fd5b615b3c87838801615667565b93506040860151915080821115615b5257600080fd5b50615b5f86828701615667565b9150509250925092565b6001600160a01b03858116825284166020820152608060408201819052600090615b959083018561572c565b8281036060840152614ab58185614cf7565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b878152600060018060a01b03808916602084015260e06040840152615bf960e084018961572c565b606084019790975294909416608082015260a081019290925260c090910152509392505050565b60008060408385031215615c3357600080fd5b8251915060208301516001600160401b03811115615c5057600080fd5b61516d85828601615667565b6001600160a01b038916815261010060208201819052600090615c818382018b61572c565b90508860408401528281036060840152615c9b8189614cf7565b90508660808401528560a084015282810360c0840152615cbb8186614cf7565b905082810360e0840152615ccf8185614cf7565b9b9a5050505050505050505050565b60008060408385031215615cf157600080fd5b82516001600160401b0380821115615d0857600080fd5b6159e486838701615667565b6001600160a01b0385168152608060208201819052600090615d389083018661572c565b8460408401528281036060840152614ab58185614cf7565b6000610100808352615d648184018c61572c565b90508960208401528281036040840152615d7e818a614cf7565b6001600160a01b0389811660608601528816608085015260a0840187905283810360c08501529050615db08186614cf7565b9150508260e08301529998505050505050505050565b600060018060a01b03808916835260c06020840152615de860c0840189614f7d565b9681166040840152949094166060820152608081019290925260a0909101525092915050565b60008060408385031215615e2157600080fd5b505080516020909101519092909150565b6001600160a01b038a8116825289811660208301526040820189905261012060608301819052600091615e678483018b61572c565b91508089166080850152508660a084015282810360c0840152615e8a818761572c565b905082810360e0840152615e9e8186614cf7565b915050826101008301529a9950505050505050505050565b6080808252855190820181905260009060209060a0840190828901845b82811015615ef85781516001600160a01b031684529284019290840190600101615ed3565b50505083810382850152615f0c8188614cf7565b60408501969096525050506060015292915050565b60008251615f33818460208701614f59565b919091019291505056fea26469706673582212206d90b21467ef5c985cf3f838b4be60d9316a266ae2b6239c9dbc8dd33cea316a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103135760003560e01c806365f50a8d116101ae57806396b7b14e116100ff578063cd4c8156116100ad578063dee1f0e41161007c578063dee1f0e41461073f578063eb5620db14610752578063f77c479114610765578063ffb86c6a1461076d57600080fd5b8063cd4c8156146106ec578063ceee861d146106ff578063d295ea7014610723578063de3d047c1461072c57600080fd5b806396b7b14e1461065a5780639d0bcca01461066d578063a3f4df7e14610675578063ab9e3eee146106ac578063b2457556146106b3578063b429afeb146106c6578063bd38837b146106d957600080fd5b80637cc963801161015c5780637cc96380146105de5780637d7c2a1c146105e65780637efc77fa146105ee57806380e7ac7c14610612578063877887821461061a57806387c7f77014610623578063936725ec1461063657600080fd5b806365f50a8d146105455780636855f30e146105585780636b5fba5a1461056b5780636ffb4c8e1461057e57806371ee01751461059157806373a50ef51461059a57806378327438146105be57600080fd5b80633cd8045e1161026857806351e03fbe1161021657806351e03fbe146104b057806354679963146104c35780635641ec03146104d8578063569c39cb146104e05780635cfc1a51146105045780636207a0cf1461050e57806363e277341461053257600080fd5b80633cd8045e146104365780634593144c146104495780634ad0b684146104515780634e71d92d146104595780634fa5d854146104615780634fac6ccd1461047e57806351b9c8341461049157600080fd5b8063261efa12116102c5578063261efa12146103cf57806328abdef0146103d8578063321793a8146103e0578063325a19f1146103f357806333c5b58e146103fb578063388cff6b1461040357806338d52e0f1461041657600080fd5b806301e1d1141461031857806301ffc9a7146103335780630acd12c7146103565780630e30428d1461035e578063150b7a02146103735780631865c57d1461039f57806322b6f5e2146103bc575b600080fd5b610320610775565b6040519081526020015b60405180910390f35b610346610341366004614b5e565b610800565b604051901515815260200161032a565b61032061082b565b61037161036c366004614b9d565b61094d565b005b610386610381366004614c8c565b6109f1565b6040516001600160e01b0319909116815260200161032a565b6103a7610a02565b60405161032a99989796959493929190614d64565b6103716103ca366004614e1e565b610e5a565b61032060725481565b610371610f0a565b6103716103ee366004614e4e565b611083565b61032061115c565b610320611190565b610371610411366004614e8c565b611208565b603c54610429906001600160a01b031681565b60405161032a9190614f28565b603d54610429906001600160a01b031681565b6103206114fd565b606e54610320565b61037161152d565b6104696115a7565b6040805192835260208301919091520161032a565b61037161048c366004614f3c565b61160c565b61049961173e565b60408051921515835260208301919091520161032a565b6103206104be366004614e4e565b6117c9565b6104cb611991565b60405161032a9190614fa9565b610371611a1f565b6104cb604051806040016040528060058152602001640312e302e360dc1b81525081565b600160ff1b610320565b6104cb60405180604001604052806005815260200164312e302e3160d81b81525081565b610371610540366004614fbc565b611a9f565b610371610553366004614e4e565b611b26565b610371610566366004614e4e565b611bf4565b610371610579366004614f3c565b611c7c565b61037161058c366004614e4e565b611d0d565b61032060715481565b6104cb604051806040016040528060058152602001640322e332e360dc1b81525081565b6103206105cc366004614f3c565b60706020526000908152604090205481565b610320611d95565b610371611dc5565b6104cb6040518060400160405280600581526020016425bcb132b960d91b81525081565b610346611ea7565b61032060415481565b610320610631366004614b9d565b611f2d565b6104cb604051806040016040528060058152602001640332e302e360dc1b81525081565b6103716106683660046150b6565b6120b8565b610429612157565b6104cb604051806040016040528060188152602001774b7962657220436f6e76657274657220537472617465677960401b81525081565b6001610346565b6103206106c1366004615177565b612187565b6103466106d4366004614f3c565b612236565b606f54610429906001600160a01b031681565b604054610429906001600160a01b031681565b6104cb604051806040016040528060058152602001640312e322e360dc1b81525081565b610320603e5481565b61037161073a366004614e4e565b61225b565b61034661074d366004614f3c565b6122eb565b61037161076036600461519c565b612370565b610429612466565b610346612496565b6000610780606e5490565b603c546040516370a0823160e01b81526001600160a01b03909116906370a08231906107b0903090600401614f28565b602060405180830381865afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f191906151ef565b6107fb919061521e565b905090565b60006001600160e01b0319821663f73147b360e01b14806108255750610825826125a0565b92915050565b603d54603c54604051633e53813360e11b81526000926001600160a01b03908116921690839073__$ec217c54da363a68ad871e6868efec481c$__90637ca702669061087d9086908690600401615231565b602060405180830381865af415801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be91906151ef565b905060008060006108cd6125c5565b92509250925073__$ec217c54da363a68ad871e6868efec481c$__639ad00ec2868686868b6040518663ffffffff1660e01b815260040161091295949392919061524b565b60006040518083038186803b15801561092a57600080fd5b505af415801561093e573d6000803e3d6000fd5b50929998505050505050505050565b73__$8f1afe7577f9ab973017c74eca19b86f3c$__63142395ef61096f612466565b6040516001600160e01b031960e084901b1681526001600160a01b03918216600482015290851660248201526044810184905260640160006040518083038186803b1580156109bd57600080fd5b505af41580156109d1573d6000803e3d6000fd5b5050506001600160a01b0390921660009081526070602052604090205550565b630a85bd0160e11b5b949350505050565b600254600354600480546040805183815260a081019091526001600160a01b0394851694938416936000939216918391829160609182918291906020820160808036833750506004548251929550600160c01b900460020b91859150600090610a6d57610a6d61527b565b600292830b60209182029290920101526004548451600160d81b90910490910b9084906001908110610aa157610aa161527b565b600292830b60209182029290920101526004548451600160a01b909104820b9185918110610ad157610ad161527b565b600292830b60209182029290920101526005548451910b9084906003908110610afc57610afc61527b565b60029290920b602092830291909101909101526005546006546001546001600160a01b03169850600160201b9091046001600160801b0316955093506003604051908082528060200260200182016040528015610b63578160200160208202803683370190505b506040516370a0823160e01b81529092506001600160a01b038a16906370a0823190610b93908a90600401614f28565b602060405180830381865afa158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd491906151ef565b82600081518110610be757610be761527b565b60209081029190910101526040516370a0823160e01b81526001600160a01b038916906370a0823190610c1e908a90600401614f28565b602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906151ef565b82600181518110610c7257610c7261527b565b60209081029190910101526040516370a0823160e01b8152731c954e8fe737f99f68fa1ccda3e51ebdb291948c906370a0823190610cb4908a90600401614f28565b602060405180830381865afa158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf591906151ef565b82600281518110610d0857610d0861527b565b602090810291909101015260408051600480825260a0820190925290816020016020820280368337019050506005548151919250600160a01b900460ff16908290600090610d5857610d5861527b565b91151560209283029190910190910152600a54815160ff9091169082906001908110610d8657610d8661527b565b911515602092830291909101909101526040516304de78eb60e11b81526001600482015273__$0dcf4453b1418804c305d2bbf5bd62b729$__906309bcf1d6906024016040805180830381865af4158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190615291565b82600281518110610e1c57610e1c61527b565b6020026020010183600381518110610e3657610e3661527b565b60200260200101821515151581525082151515158152505050909192939495969798565b73__$ec217c54da363a68ad871e6868efec481c$__63b4339948610e7c612466565b6040516001600160e01b031960e084901b1681526001600160a01b03918216600482015260248101869052908416604482015260640160006040518083038186803b158015610eca57600080fd5b505af4158015610ede573d6000803e3d6000fd5b505050604192909255604080546001600160a01b0319166001600160a01b039290921691909117905550565b73__$ec217c54da363a68ad871e6868efec481c$__63493f6edc610f2c612466565b6040518263ffffffff1660e01b8152600401610f489190614f28565b60006040518083038186803b158015610f6057600080fd5b505af4158015610f74573d6000803e3d6000fd5b50506005805460ff60a01b191690555050606f54600254600354604051637fd6c0a160e01b81526001600160a01b039384166004820152918316602483015291909116604482015273__$e930d50fb5f4f1298547dbcb2bb0591990$__90637fd6c0a190606401602060405180830381865af4158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c91906151ef565b60016006018190555073__$0dcf4453b1418804c305d2bbf5bd62b729$__63f460770b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561106957600080fd5b505af415801561107d573d6000803e3d6000fd5b50505050565b73__$ec217c54da363a68ad871e6868efec481c$__63493f6edc6110a5612466565b6040518263ffffffff1660e01b81526004016110c19190614f28565b60006040518083038186803b1580156110d957600080fd5b505af41580156110ed573d6000803e3d6000fd5b505050600682905550604051631c77945b60e31b81526004810182905273__$0dcf4453b1418804c305d2bbf5bd62b729$__9063e3bca2d89060240160006040518083038186803b15801561114157600080fd5b505af4158015611155573d6000803e3d6000fd5b5050505050565b60006107fb61118c60017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b6152c0565b5490565b600073__$ec217c54da363a68ad871e6868efec481c$__63493f6edc6111b4612466565b6040518263ffffffff1660e01b81526004016111d09190614f28565b60006040518083038186803b1580156111e857600080fd5b505af41580156111fc573d6000803e3d6000fd5b505050506107fb6125e0565b600054610100900460ff16158080156112285750600054600160ff909116105b806112425750303b158015611242575060005460ff166001145b6112aa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156112cd576000805461ff0019166101001790555b6112d88989896126b1565b73__$0dcf4453b1418804c305d2bbf5bd62b729$__634e23f86760018b8a8a8a8a8f6001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135b91906152d3565b6040516001600160e01b031960e08a901b16815260048101979097526001600160a01b03958616602488015293851660448701529184166064860152600290810b60848601520b60a48401521660c482015285151560e48201526101040160006040518083038186803b1580156113d157600080fd5b505af41580156113e5573d6000803e3d6000fd5b5050506009839055506040516318b3a88560e31b81526001600482015273__$0dcf4453b1418804c305d2bbf5bd62b729$__9063c59d442890602401600060405180830381865af415801561143e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114669190810190615320565b60429061147390826153f0565b507f13bdeb5b5bb760c04b92d93e56c576c6805359d41a13d3cca178aa7c8526b98460426040516114a491906154af565b60405180910390a180156114f2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b60006107fb61118c60017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f16152c0565b73__$ec217c54da363a68ad871e6868efec481c$__63d19cc38a61154f612466565b6040518263ffffffff1660e01b815260040161156b9190614f28565b60006040518083038186803b15801561158357600080fd5b505af4158015611597573d6000803e3d6000fd5b505050506115a3612753565b5050565b603d5460408051808201909152600a81526914d08e8811195b9a595960b21b60208201526000918291906001600160a01b031633146115f95760405162461bcd60e51b81526004016112a19190614fa9565b50611604600161280f565b915091509091565b33301461165b5760405162461bcd60e51b815260206004820152601b60248201527f496e637265617365207265766973696f6e20666f7262696464656e000000000060448201526064016112a1565b600061168b61118c60017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd6152c0565b61169690600161521e565b90506116ca816116c760017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd6152c0565b55565b6116f9826116c760017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e46152c0565b604080518281526001600160a01b03841660208201527ff27e2ef832a4eb8ed8ec553b875eecd44764cda95b1c24170e281539e0a869c8910160405180910390a15050565b606f546040516347efaccf60e01b8152600160048201526001600160a01b039091166024820152600090819073__$0dcf4453b1418804c305d2bbf5bd62b729$__906347efaccf906044016040805180830381865af41580156117a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611604919061553a565b603d54603c54604051633e53813360e11b81526000926001600160a01b03908116921690839073__$ec217c54da363a68ad871e6868efec481c$__90637ca702669061181b9086908690600401615231565b602060405180830381865af4158015611838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185c91906151ef565b9050808511156119085760008061187b61187684896152c0565b612943565b604051631594b05b60e01b8152909850919350915073__$ec217c54da363a68ad871e6868efec481c$__90631594b05b906118c29087908790879087908c9060040161524b565b602060405180830381865af41580156118df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190391906151ef565b925050505b6040516333bbb20360e11b815260048101869052602481018290526001600160a01b0380841660448301528416606482015273__$ec217c54da363a68ad871e6868efec481c$__9063677764069060840160006040518083038186803b15801561197157600080fd5b505af4158015611985573d6000803e3d6000fd5b50505050505050919050565b6042805461199e90615368565b80601f01602080910402602001604051908101604052809291908181526020018280546119ca90615368565b8015611a175780601f106119ec57610100808354040283529160200191611a17565b820191906000526020600020905b8154815290600101906020018083116119fa57829003601f168201915b505050505081565b611a27612974565b73__$ec217c54da363a68ad871e6868efec481c$__63bd020682611a49612466565b603c54603d5460405160e085901b6001600160e01b03191681526001600160a01b039384166004820152918316602483015291909116604482015260640160006040518083038186803b15801561106957600080fd5b73__$ec217c54da363a68ad871e6868efec481c$__63eae13e76611ac1612466565b84846040518463ffffffff1660e01b8152600401611ae193929190615568565b60006040518083038186803b158015611af957600080fd5b505af4158015611b0d573d6000803e3d6000fd5b5060429250611b21915083905084836155a8565b505050565b73__$ec217c54da363a68ad871e6868efec481c$__63493f6edc611b48612466565b6040518263ffffffff1660e01b8152600401611b649190614f28565b60006040518083038186803b158015611b7c57600080fd5b505af4158015611b90573d6000803e3d6000fd5b5050600a546040805180820190915260208082527f4b532d3134204c6971756964697479206d75737420626520756e7374616b656490820152925060ff16159050611bee5760405162461bcd60e51b81526004016112a19190614fa9565b50600955565b73__$8f1afe7577f9ab973017c74eca19b86f3c$__63a0113d48611c16612466565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810184905260440160006040518083038186803b158015611c5c57600080fd5b505af4158015611c70573d6000803e3d6000fd5b50505060729190915550565b73__$ec217c54da363a68ad871e6868efec481c$__63493f6edc611c9e612466565b6040518263ffffffff1660e01b8152600401611cba9190614f28565b60006040518083038186803b158015611cd257600080fd5b505af4158015611ce6573d6000803e3d6000fd5b5050600180546001600160a01b0319166001600160a01b0394909416939093179092555050565b73__$8f1afe7577f9ab973017c74eca19b86f3c$__63d2c3cf25611d2f612466565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810184905260440160006040518083038186803b158015611d7557600080fd5b505af4158015611d89573d6000803e3d6000fd5b50505060719190915550565b60006107fb61118c60017f22573091f17911fb166032a3d9e0554aa73d31b7b7ddea4a4dd2995650af84bd6152c0565b6000806000611dd2612a77565b606f54603d546040516358d4b9ff60e01b8152600160048201526001600160a01b03928316602482015282841660448201526064810185905260848101869052911660a4820152929550909350915060009073__$0dcf4453b1418804c305d2bbf5bd62b729$__906358d4b9ff9060c401600060405180830381865af4158015611e60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e8891908101906156c2565b90508051600203611e9f57611e9c81612bf6565b50505b611155612c83565b600954604051639ee0b2a960e01b815260009173__$0dcf4453b1418804c305d2bbf5bd62b729$__91639ee0b2a991611ee69160040190815260200190565b602060405180830381865af4158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2791906156f6565b15905090565b606f5460408051808201909152600a81526914d08e8811195b9a595960b21b60208201526000916001600160a01b031690338214611f7e5760405162461bcd60e51b81526004016112a19190614fa9565b50600080611f8b86612c97565b915091506000611f9a87612d03565b90508581101561200757600554600160201b90046001600160801b03168015612005576000611fc882612d73565b90507faebc771af58936b05e89b0be7d3f9761480181abcd4a649fbdd01753fda169708282604051611ffb929190615713565b60405180910390a1505b505b73__$e930d50fb5f4f1298547dbcb2bb0591990$__6399c1fde48784868861202d612466565b603c546040516001600160e01b031960e089901b1681526120629695949392916001600160a01b031690607090600401615765565b602060405180830381865af415801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a391906151ef565b94506120ad612c83565b505050505092915050565b606f5460408051808201909152600a81526914d08e8811195b9a595960b21b6020820152906001600160a01b031633146121055760405162461bcd60e51b81526004016112a19190614fa9565b508151815160408051808201909152600d81526c54532d3139206c656e6774687360981b602082015290821461214e5760405162461bcd60e51b81526004016112a19190614fa9565b5061107d612c83565b60006107fb61118c60017fbfaaa2fb63266ff27c2da975f5894955056f50419af651a81f6c5060581857e46152c0565b603d54603c546040516001625acc3160e01b03198152600092839273__$ec217c54da363a68ad871e6868efec481c$__9263ffa533cf926121d9926001600160a01b0391821692911690600401615231565b602060405180830381865af41580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a91906151ef565b9050801561222f5761222c8184612dfe565b91505b5092915050565b6000612240612466565b6001600160a01b0316826001600160a01b0316149050919050565b73__$ec217c54da363a68ad871e6868efec481c$__630568a9d561227d612466565b603e546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044810184905260640160006040518083038186803b1580156122cb57600080fd5b505af41580156122df573d6000803e3d6000fd5b505050603e9190915550565b6000816001600160a01b03166122ff612466565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa15801561233c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236091906152d3565b6001600160a01b03161492915050565b60008061237b612a77565b50606f54604080516080810182528a15158152602081018a90526001600160a01b038981168284015260608201899052603d549251633aa0b78160e11b815295975093955060009473__$0dcf4453b1418804c305d2bbf5bd62b729$__946375416f02946123f894600194918316938a938c9216906004016157b4565b600060405180830381865af4158015612415573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261243d91908101906156c2565b905080516002036124545761245181612bf6565b50505b61245c612c83565b5050505050505050565b60006107fb61118c60017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c36186152c0565b6040516304de78eb60e11b8152600160048201526000908190819073__$0dcf4453b1418804c305d2bbf5bd62b729$__906309bcf1d6906024016040805180830381865af41580156124ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125109190615291565b604051636f1cd37160e01b815260016004820152919350915073__$0dcf4453b1418804c305d2bbf5bd62b729$__90636f1cd37190602401602060405180830381865af4158015612565573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258991906156f6565b806125915750815b806125995750805b9250505090565b60006001600160e01b0319821663c19fa56160e01b1480610825575061082582612ea8565b60008060006125d5600019612943565b925092509250909192565b603c54600090819081906125fc906001600160a01b0316612c97565b9150915073__$e930d50fb5f4f1298547dbcb2bb0591990$__63c9bce6908361263d6126386005546001600160801b03600160201b9091041690565b612edd565b606f546040516001600160e01b031960e086901b16815261267093929187916001600160a01b039091169060040161582c565b602060405180830381865af415801561268d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259991906151ef565b600054610100900460ff166126d85760405162461bcd60e51b81526004016112a190615873565b6126e28383612f27565b606f80546001600160a01b0319166001600160a01b03831617905561270b6064620186a06158be565b6071557fe4166dfcf23bbd3e3f764a99dc8fa740554c03c82d6019b81cf265f396f6f2fe61273d6064620186a06158be565b60405190815260200160405180910390a1505050565b60608060008060006127636130ef565b606f54929550909350915073__$8f1afe7577f9ab973017c74eca19b86f3c$__9063e99de4da906001600160a01b031661279b61316e565b8686866040518663ffffffff1660e01b81526004016127be9594939291906158e0565b600060405180830381865af41580156127db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261280391908101906159ae565b90969095509350505050565b60008060008061281f6001613202565b91509150600061282d6132be565b91965094509050600061287f87801561284557508415155b801561286b5750620186a08560715461285e9190615a07565b61286891906158be565b83115b612876576000612878565b825b8486613397565b915060009050806128c6612893858861521e565b603c5485906128aa906001600160a01b0316612d03565b606e546128b7919061521e565b6128c1919061521e565b613658565b915091506040805187815260208101879052908101899052606081018890526080810183905260a081018290527f3e9abbc366dbf9fe260e2640c06eefbedd7720cf986ae553374e46b804f4ff559060c00160405180910390a161292a828961521e565b612934828961521e565b97509750505050505050915091565b60008060008060006129556001613202565b91509150612964868284613688565b5091989097509095509350505050565b600061297e613d87565b90507f768a28cb3459382a3d2173feb2dad0235f8de680b109872da581a3aa269fe5f4816040516129af9190615a1e565b60405180910390a1603c5460009081906129d1906001600160a01b0316612c97565b606f54919350915073__$e930d50fb5f4f1298547dbcb2bb0591990$__906358b54f16906001600160a01b0316612a0e612a09612466565b613dab565b846070600019886040518763ffffffff1660e01b8152600401612a3696959493929190615a31565b602060405180830381865af4158015612a53573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214e91906151ef565b6000806000612a84612466565b60405163124fdbb760e21b815290915073__$ec217c54da363a68ad871e6868efec481c$__9063493f6edc90612abe908490600401614f28565b60006040518083038186803b158015612ad657600080fd5b505af4158015612aea573d6000803e3d6000fd5b50505050612af6612496565b6040518060400160405280601881526020017712d4cb4e48139bc81c9958985b185b98d9481b995959195960421b81525090612b455760405162461bcd60e51b81526004016112a19190614fa9565b50612b506001613202565b9350839050612b5d610775565b612b6791906152c0565b604051637ed25b6f60e01b81526001600482015290925073__$0dcf4453b1418804c305d2bbf5bd62b729$__90637ed25b6f9060240160006040518083038186803b158015612bb557600080fd5b505af4158015612bc9573d6000803e3d6000fd5b5050600554600160201b90046001600160801b0316159150612bf1905057612bef613d87565b505b909192565b6060600073__$0dcf4453b1418804c305d2bbf5bd62b729$__6374287da16001856040518363ffffffff1660e01b8152600401612c34929190615713565b600060405180830381865af4158015612c51573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c799190810190615a6e565b9094909350915050565b6000612c8d6125e0565b606e819055919050565b60606000612ca361316e565b9150612caf8284613e0f565b90506000198114156040518060400160405280600f81526020016e53423a2057726f6e672076616c756560881b81525090612cfd5760405162461bcd60e51b81526004016112a19190614fa9565b50915091565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190612d32903090600401614f28565b602060405180830381865afa158015612d4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082591906151ef565b60405163131c667560e01b8152600160048201526001600160801b038216602482015260609073__$0dcf4453b1418804c305d2bbf5bd62b729$__9063131c6675906044015b600060405180830381865af4158015612dd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082591908101906156c2565b600554600090600160a01b900460ff1615612e97576040805160028082526060820183526000926020830190803683370190505090508381600081518110612e4857612e4861527b565b6020026020010181815250507f59400c8c523464b521238ea8f50e923f2bc64663557e6afec92a97f7efe92d058182604051612e85929190615ab4565b60405180910390a16000915050610825565b612ea18383613e6d565b9050610825565b60006001600160e01b0319821663b7b79fa960e01b148061082557506301ffc9a760e01b6001600160e01b0319831614610825565b60405163df24faf760e01b8152600160048201526001600160801b038216602482015260609073__$0dcf4453b1418804c305d2bbf5bd62b729$__9063df24faf790604401612db9565b600054610100900460ff16612f4e5760405162461bcd60e51b81526004016112a190615873565b612f78817fd2de0374d4479f33e63ae5ed6ca772a10463dd883a90c612050b51fab6196400613e94565b612f8182613eea565b60405163b429afeb60e01b81526001600160a01b0382169063b429afeb90612fad908590600401614f28565b602060405180830381865afa158015612fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fee91906156f6565b6040518060400160405280600f81526020016e53423a2057726f6e672076616c756560881b815250906130345760405162461bcd60e51b81526004016112a19190614fa9565b50806001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613073573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309791906152d3565b603c80546001600160a01b039283166001600160a01b031991821617909155603d80549390921692811692909217905560408054909116739cc199d4353b5fb3e6c8eebc99f5139e0d8ea06b17905550612710604155565b60405163fe94e4db60e01b8152600160048201526060908190819073__$0dcf4453b1418804c305d2bbf5bd62b729$__9063fe94e4db90602401600060405180830381865af4158015613146573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125d59190810190615ae2565b6040805160028082526060808301845292602083019080368337505060025482519293506001600160a01b0316918391506000906131ae576131ae61527b565b6001600160a01b0392831660209182029290920101526003548251911690829060019081106131df576131df61527b565b60200260200101906001600160a01b031690816001600160a01b03168152505090565b60008082156132af57606e54613216612c83565b603d54604051636e5b9cc760e11b815260048101849052602481018390526001600160a01b03909116604482015290935073__$e930d50fb5f4f1298547dbcb2bb0591990$__9063dcb7398e90606401602060405180830381865af4158015613283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a791906151ef565b915050915091565b5050606e546000915091565b50565b60008060008060006132ce612753565b600254919350915073__$0dcf4453b1418804c305d2bbf5bd62b729$__906334d2ec3d906001600160a01b0316613303612466565b85856040518563ffffffff1660e01b81526004016133249493929190615b69565b602060405180830381865af4158015613341573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336591906151ef565b9450613371828261410f565b603c548590859061338a906001600160a01b0316612d03565b9450945094505050909192565b603c5460009081906001600160a01b0316818587116133b75760006133c1565b6133c186886152c0565b9050620186a0856071546133d59190615a07565b6133df91906158be565b81111561357f57851561348e57603d5473__$8f1afe7577f9ab973017c74eca19b86f3c$__9063aac2718a90849089906001600160a01b031661342183612d03565b61342b908b61521e565b6040518563ffffffff1660e01b815260040161344a9493929190615ba7565b602060405180830381865af4158015613467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348b91906151ef565b92505b600061349983612d03565b603c5490915060009081906134b6906001600160a01b0316612c97565b606f5491935091506000906134d6906001600160a01b03168685856141a5565b905060006134e382612bf6565b5090507f59400c8c523464b521238ea8f50e923f2bc64663557e6afec92a97f7efe92d058282604051613517929190615ab4565b60405180910390a16000613529612c83565b9050600061353689612d03565b9050613542878d61521e565b61354c828461521e565b10156135735761355c818361521e565b613566888e61521e565b61357091906152c0565b9a505b5050505050505061364e565b851561364e57600061359083612d03565b9050868110156135b3576135a660008888613688565b909750955061364c915050565b603d5473__$8f1afe7577f9ab973017c74eca19b86f3c$__9063aac2718a9085908a906001600160a01b03166135e9868c61521e565b6040518563ffffffff1660e01b81526004016136089493929190615ba7565b602060405180830381865af4158015613625573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364991906151ef565b93505b505b5050935093915050565b600080838311156136745761366d84846152c0565b9150613681565b61367e83856152c0565b90505b9250929050565b600080600080613697876143dc565b613732604051806102200160405280600015158152602001606081526020016000815260200160008152602001600081526020016000815260200160608152602001600081526020016060815260200160008152602001600081526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160006001600160a01b031681525090565b60001988148082526000935080613751575061374e878961521e565b15155b801561375c57508515155b15613d6e5761376961316e565b6101608201819052603c546001600160a01b039081166101808401819052606f5490911661020084015261379d9190613e0f565b6101a08201526101808101516137b290612d03565b6101c08201526137c061442f565b6020820152600554600160201b90046001600160801b03166040820152600554600160201b90046001600160801b03166060820152610200810151610180820151604051637a55caf360e01b815273__$e930d50fb5f4f1298547dbcb2bb0591990$__92637a55caf39261383692600401615231565b602060405180830381865af4158015613853573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387791906151ef565b60a0820152805173__$8f1afe7577f9ab973017c74eca19b86f3c$__9063ec0cc4fd906138ad576138a8898b61521e565b6138b0565b60005b30846101600151856101a001518661020001518c88606001516040518863ffffffff1660e01b81526004016138eb9796959493929190615bd1565b600060405180830381865af4158015613908573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139309190810190615c20565b60c08301526080820181905215613a795761394e8160800151612d73565b6101e0820152600554600160201b90046001600160801b0316816060015161397691906152c0565b608082018190526101e08201516040517faebc771af58936b05e89b0be7d3f9761480181abcd4a649fbdd01753fda16970926139b3929091615713565b60405180910390a173__$e930d50fb5f4f1298547dbcb2bb0591990$__637a9a23e5826102000151836101600151846101a001518560200151866080015187604001518860c00151896101e001516040518963ffffffff1660e01b8152600401613a24989796959493929190615c5c565b600060405180830381865af4158015613a41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a699190810190615cde565b60c0830152610100820152613b15565b6102008101516101608201516101a083015160c0840151604051636138ea8560e01b815273__$e930d50fb5f4f1298547dbcb2bb0591990$__94636138ea8594613ac99491939092600401615d14565b600060405180830381865af4158015613ae6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613b0e91908101906156c2565b6101008201525b73__$e930d50fb5f4f1298547dbcb2bb0591990$__63f1f2b573826101600151836101a001518460c00151856102000151613b51612a09612466565b8751613b68578d8f613b63919061521e565b613b6a565b8e5b88610100015160706040518963ffffffff1660e01b8152600401613b95989796959493929190615d50565b602060405180830381865af4158015613bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd691906151ef565b8160e001818151613be7919061521e565b9052508615613c9657610180810151603d546101c083015173__$8f1afe7577f9ab973017c74eca19b86f3c$__9263aac2718a9290918b916001600160a01b031690613c33908c61521e565b6040518563ffffffff1660e01b8152600401613c529493929190615ba7565b602060405180830381865af4158015613c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9391906151ef565b91505b613c9e612c83565b610120820152610180810151613cb390612d03565b6101408201526101c0810151613cc9908761521e565b87826101400151836101200151613ce0919061521e565b613cea919061521e565b1015613d385786816101400151826101200151613d07919061521e565b613d11919061521e565b6101c0820151613d21908861521e565b613d2b91906152c0565b613d35908461521e565b92505b670de0b6b3a76400008160a001518260e00151613d559190615a07565b613d5f91906158be565b8160a001519450945050613d7e565b6000806000809450945094509450505b93509350935093565b60606107fb613da66005546001600160801b03600160201b9091041690565b612d73565b6000816001600160a01b0316634046ebae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613deb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082591906152d3565b8151600090815b81811015613e6157836001600160a01b0316858281518110613e3a57613e3a61527b565b60200260200101516001600160a01b031603613e595791506108259050565b600101613e16565b50600019949350505050565b6000806000613e7b84613202565b91509150613e8a858284613397565b5095945050505050565b613e9e82826144aa565b6115a35760405162461bcd60e51b815260206004820152601a60248201527f496e74657266616365206973206e6f7420737570706f7274656400000000000060448201526064016112a1565b600054610100900460ff16613f115760405162461bcd60e51b81526004016112a190615873565b6001600160a01b038116613f595760405162461bcd60e51b815260206004820152600f60248201526e2d32b9379031b7b73a3937b63632b960891b60448201526064016112a1565b613f83817f4c2403fdcb3cff9b705d96bf0705858e3390412670a62c8bcba611ca7e20ab86613e94565b60006001600160a01b0316816001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015613fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff091906152d3565b6001600160a01b0316036140385760405162461bcd60e51b815260206004820152600f60248201526e5a65726f20676f7665726e616e636560881b60448201526064016112a1565b614067816116c760017f5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c36186152c0565b614096426116c760017f6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8b6152c0565b6140c5436116c760017f812a673dfca07956350df10f8a654925f561d7a0da09bdbe79e653939a14d9f16152c0565b604080516001600160a01b0383168152426020820152438183015290517f1a2dd071001ebf6e03174e3df5b305795a4ad5d41d8fdb9ba41dbbe2367134269181900360600190a150565b81518015611b215760006141238484614588565b905073__$8f1afe7577f9ab973017c74eca19b86f3c$__63acf741a3614147612466565b603d546040516001600160e01b031960e085901b16815261417992916001600160a01b03169089908790600401615b69565b60006040518083038186803b15801561419157600080fd5b505af415801561245c573d6000803e3d6000fd5b60606141af612496565b15604051806040016040528060138152602001724b532d31204e65656420726562616c616e636560681b815250906141fa5760405162461bcd60e51b81526004016112a19190614fa9565b50604080516002808252606082018352909160208301908036833701905050600480546005546040516319c75b9360e31b81526001600160a01b03831693810193909352600160c01b8204600290810b6024850152600160d81b90920490910b60448301526301000000900460ff1615156064820152909150600090819073__$0dcf4453b1418804c305d2bbf5bd62b729$__9063ce3adc9890608401600060405180830381865af41580156142b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142dc9190810190615320565b6002549091506142f6906001600160a01b0316878961473b565b60025460035460405163ca27d10d60e01b815273__$e930d50fb5f4f1298547dbcb2bb0591990$__9263ca27d10d92614349928c9287926001600160a01b03918216929116908d90600090600401615dc6565b6040805180830381865af4158015614365573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143899190615e0e565b8460018151811061439c5761439c61527b565b602090810291909101015291506143b382876152c0565b836000815181106143c6576143c661527b565b6020026020010181815250505050949350505050565b6143e4612496565b15604051806040016040528060138152602001724b532d31204e65656420726562616c616e636560681b815250906115a35760405162461bcd60e51b81526004016112a19190614fa9565b6040516327ceccd560e11b81526001600482015260609073__$0dcf4453b1418804c305d2bbf5bd62b729$__90634f9d99aa90602401600060405180830381865af4158015614482573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107fb91908101906156c2565b60006001600160a01b0383166144f15760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b60448201526064016112a1565b823b6000819003614506576000915050610825565b6040516301ffc9a760e01b81526001600160e01b0319841660048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa925050508015614570575060408051601f3d908101601f1916820190925261456d918101906156f6565b60015b1561457e5791506108259050565b5060009392505050565b603c54606f54603e546060926001600160a01b039081169260009273__$e930d50fb5f4f1298547dbcb2bb0591990$__9263ef50284f92169085906145cb61316e565b6145d6612a09612466565b60708c8c6041546040518a63ffffffff1660e01b815260040161460199989796959493929190615e32565b600060405180830381865af415801561461e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526146469190810190615a6e565b603d54604080546072549151631248faf160e21b81526001600160a01b0380891660048301526024820186905293841660448201529216606483015260848201529194509150600090819073__$8f1afe7577f9ab973017c74eca19b86f3c$",
  "libraries": {
    "StrategyLib": "0x3BEB969c0cd273eA1d7a39137a757Cf1c474510a",
    "ConverterStrategyBaseLib": "0x9971fDd707a2878Dc201294DcAbef5A0F8901589",
    "ConverterStrategyBaseLib2": "0x3C8b18162cBb11B9D0afe3828f4A6C6e247f30E0",
    "KyberConverterStrategyLogicLib": "0xdF1B8F6250f82aD1F6E982cef422b31A4334FD6e"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim()": {
        "details": "Manual claim rewards."
      },
      "created()": {
        "returns": {
          "_0": "Creation timestamp"
        }
      },
      "createdBlock()": {
        "returns": {
          "_0": "Creation block number"
        }
      },
      "doHardWork()": {
        "returns": {
          "earned": "Earned amount in terms of {asset}",
          "lost": "Lost amount in terms of {asset}"
        }
      },
      "emergencyExit()": {
        "details": "In case of any issue operator can withdraw all from pool."
      },
      "increaseRevision(address)": {
        "details": "Revision should be increased on each contract upgrade"
      },
      "init(address,address,address,address,int24,int24,bool,uint256)": {
        "params": {
          "controller_": "The address of the controller.",
          "converter_": "The address of the converter.",
          "pool_": "The address of the pool.",
          "rebalanceTickRange_": "The tick range for rebalancing.",
          "splitter_": "The address of the splitter.",
          "tickRange_": "The tick range for the liquidity position."
        }
      },
      "investAll(uint256,bool)": {
        "params": {
          "updateTotalAssetsBeforeInvest_": "Recalculate total assets amount before depositing.                                       It can be false if we know exactly, that the amount is already actual."
        },
        "returns": {
          "strategyLoss": "Loss should be covered from Insurance"
        }
      },
      "isController(address)": {
        "details": "Return true if given address is controller"
      },
      "needRebalance()": {
        "returns": {
          "_0": "A boolean indicating if the strategy needs rebalancing."
        }
      },
      "onTransferAmounts(address[],uint256[])": {
        "params": {
          "amounts_": "Amount of {asset_} that has been sent to the user's balance",
          "assets_": "Any asset sent to the balance, i.e. inside repayTheBorrow"
        }
      },
      "previousImplementation()": {
        "details": "Previous logic implementation"
      },
      "quoteRebalanceSwap()": {
        "returns": {
          "_0": "swapAtoB, swapAmount"
        }
      },
      "rebalance()": {
        "details": "The rebalancing functionality is the core of this strategy.      Swap method is used."
      },
      "requirePayAmountBack(address,uint256)": {
        "params": {
          "amount_": "Required amount of the {theAsset_}",
          "theAsset_": "Required asset (either collateral or borrow)"
        },
        "returns": {
          "amountOut": "Amount sent to balance of TetuConverter, amountOut <= amount_"
        }
      },
      "revision()": {
        "details": "Contract upgrade counter"
      },
      "setCompoundRatio(uint256)": {
        "details": "PlatformVoter can change compound ratio for some strategies.      A strategy can implement another logic for some uniq cases."
      },
      "setFuseThreshold(uint256)": {
        "params": {
          "newFuseThreshold": "The new fuse threshold value."
        }
      },
      "setReinvestThresholdPercent(uint256)": {
        "params": {
          "percent_": "New value of the percent, decimals = {REINVEST_THRESHOLD_PERCENT_DENOMINATOR}"
        }
      },
      "setStrategySpecificName(string)": {
        "details": "The name will be used for UI."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalAssets()": {
        "details": "Total amount of underlying assets under control of this strategy."
      },
      "withdrawAllToSplitter()": {
        "details": "Withdraws all underlying assets to the vault",
        "returns": {
          "strategyLoss": "Loss should be covered from Insurance"
        }
      },
      "withdrawToSplitter(uint256)": {
        "details": "Withdraws some assets to the splitter",
        "returns": {
          "strategyLoss": "Loss should be covered from Insurance"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Recycle(address[],uint256[],uint256,uint256)": {
        "notice": "Recycle was made"
      }
    },
    "kind": "user",
    "methods": {
      "CONTROLLABLE_VERSION()": {
        "notice": "Version of the contract"
      },
      "NAME()": {
        "notice": "CONSTANTS"
      },
      "capacity()": {
        "notice": "Unlimited capacity by default"
      },
      "controller()": {
        "notice": "Return controller address saved in the contract slot"
      },
      "created()": {
        "notice": "Return creation timestamp"
      },
      "createdBlock()": {
        "notice": "Return creation block number"
      },
      "disableFuse()": {
        "notice": "Disable fuse for the strategy."
      },
      "doHardWork()": {
        "notice": "Do hard work with reinvesting"
      },
      "getState()": {
        "notice": "Returns the current state of the contract."
      },
      "init(address,address,address,address,int24,int24,bool,uint256)": {
        "notice": "Initialize the strategy with the given parameters."
      },
      "investAll(uint256,bool)": {
        "notice": "Stakes everything the strategy holds into the reward pool. amount_ Amount transferred to the strategy balance just before calling this function"
      },
      "investedAssets()": {
        "notice": "Amount of underlying assets converted to pool assets and invested to the pool."
      },
      "isGovernance(address)": {
        "notice": "Return true if given address is setup as governance in Controller"
      },
      "isReadyToHardWork()": {
        "notice": "Is strategy ready to hard work"
      },
      "liquidationThresholds(address)": {
        "notice": "Minimum token amounts that can be liquidated"
      },
      "needRebalance()": {
        "notice": "Check if the strategy needs rebalancing."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "CALLBACKS"
      },
      "onTransferAmounts(address[],uint256[])": {
        "notice": "TetuConverter calls this function when it sends any amount to user's balance"
      },
      "performanceFee()": {
        "notice": "A percent of total profit that is sent to the {performanceReceiver} before compounding"
      },
      "performanceFeeRatio()": {
        "notice": "Ratio to split performance fee on toPerf + toInsurance, [0..100_000]         100_000 - send full amount toPerf, 0 - send full amount toInsurance."
      },
      "performanceReceiver()": {
        "notice": "{performanceFee}% of total profit is sent to {performanceReceiver} before compounding"
      },
      "reinvestThresholdPercent()": {
        "notice": "Percent of asset amount that can be not invested, it's allowed to just keep it on balance         decimals = {DENOMINATOR}"
      },
      "requirePayAmountBack(address,uint256)": {
        "notice": "Converters asks to send some amount back."
      },
      "setFuseThreshold(uint256)": {
        "notice": "Set the fuse threshold for the strategy."
      },
      "setPerformanceFeeRatio(uint256)": {
        "notice": "[0..100_000], 100_000 - send full amount toPerf, 0 - send full amount toInsurance."
      },
      "setupPerformanceFee(uint256,address)": {
        "notice": "Set performance fee and receiver"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11302,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 11305,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 87858,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "state",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(State)83906_storage"
      },
      {
        "astId": 88231,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16191,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "asset",
        "offset": 0,
        "slot": "60",
        "type": "t_address"
      },
      {
        "astId": 16195,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "splitter",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 16199,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "compoundRatio",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 16201,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "__deprecatedSlot1",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 16205,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "performanceReceiver",
        "offset": 0,
        "slot": "64",
        "type": "t_address"
      },
      {
        "astId": 16209,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "performanceFee",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 16213,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "strategySpecificName",
        "offset": 0,
        "slot": "66",
        "type": "t_string_storage"
      },
      {
        "astId": 16610,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "67",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 66474,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "_investedAssets",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 66478,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "converter",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(ITetuConverter)42955"
      },
      {
        "astId": 66483,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "liquidationThresholds",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 66486,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "reinvestThresholdPercent",
        "offset": 0,
        "slot": "113",
        "type": "t_uint256"
      },
      {
        "astId": 66489,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "performanceFeeRatio",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 67985,
        "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "115",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPool)62161": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(ITetuConverter)42955": {
        "encoding": "inplace",
        "label": "contract ITetuConverter",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(State)83906_storage": {
        "encoding": "inplace",
        "label": "struct KyberConverterStrategyLogicLib.State",
        "members": [
          {
            "astId": 83872,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "strategyProfitHolder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 83874,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "tokenA",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 83876,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "tokenB",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 83879,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "pool",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IPool)62161"
          },
          {
            "astId": 83881,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "tickSpacing",
            "offset": 20,
            "slot": "3",
            "type": "t_int24"
          },
          {
            "astId": 83883,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "isStablePool",
            "offset": 23,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 83885,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "lowerTick",
            "offset": 24,
            "slot": "3",
            "type": "t_int24"
          },
          {
            "astId": 83887,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "upperTick",
            "offset": 27,
            "slot": "3",
            "type": "t_int24"
          },
          {
            "astId": 83889,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "rebalanceTickRange",
            "offset": 0,
            "slot": "4",
            "type": "t_int24"
          },
          {
            "astId": 83891,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "depositorSwapTokens",
            "offset": 3,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 83893,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "totalLiquidity",
            "offset": 4,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 83895,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "isFuseTriggered",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 83897,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "fuseThreshold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 83899,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "lastPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 83901,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "tokenId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 83903,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "pId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 83905,
            "contract": "contracts/strategies/kyber/KyberConverterStrategy.sol:KyberConverterStrategy",
            "label": "staked",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}