{
  "address": "0x718c55da958581cF36cB2fF516cd85f4F60eabF2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "lowerTick_",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upperTick_",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "amount0Desired_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Desired_",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityPreview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0Consumed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1Consumed",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "liquidityOut",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sqrtRatioX96",
          "type": "uint160"
        },
        {
          "internalType": "int24",
          "name": "lowerTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upperTick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        }
      ],
      "name": "getAmountsForLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sqrtRatioX96",
          "type": "uint160"
        },
        {
          "internalType": "int24",
          "name": "lowerTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "upperTick",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityForAmounts",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPancakeV3Pool",
          "name": "pool",
          "type": "IPancakeV3Pool"
        }
      ],
      "name": "getTickSpacing",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "mulDiv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x69e6c7f4791b9f8c3dba266d7ea4d84e4c3242466a30943631e5c85295419fbf",
  "receipt": {
    "to": null,
    "from": "0xF1dCce3a6c321176C62b71c091E3165CC9C3816E",
    "contractAddress": "0x718c55da958581cF36cB2fF516cd85f4F60eabF2",
    "transactionIndex": 0,
    "gasUsed": "1166647",
    "logsBloom": "0x
    "blockHash": "0x7f46b87b10e42fe61d5c7c801902feaab473e3e4b1586f59d092e21a37a76fe8",
    "transactionHash": "0x69e6c7f4791b9f8c3dba266d7ea4d84e4c3242466a30943631e5c85295419fbf",
    "logs": [],
    "blockNumber": 8836306,
    "cumulativeGasUsed": "1166647",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "17e7f259002e1118df09fdf359b1b60f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lowerTick_\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick_\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired_\",\"type\":\"uint256\"}],\"name\":\"addLiquidityPreview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Consumed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Consumed\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityOut\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtRatioX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"getAmountsForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtRatioX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"getLiquidityForAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPancakeV3Pool\",\"name\":\"pool\",\"type\":\"IPancakeV3Pool\"}],\"name\":\"getTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"mulDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPrice(address,address)\":{\"returns\":{\"_0\":\"price with decimals of paired token\"}},\"mulDiv(uint256,uint256,uint256)\":{\"details\":\"Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\",\"params\":{\"a\":\"The multiplicand\",\"b\":\"The multiplier\",\"denominator\":\"The divisor\"},\"returns\":{\"result\":\"The 256-bit result\"}}},\"stateVariables\":{\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"PancakeSwap liquidity management helper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAmountsForLiquidity(uint160,int24,int24,uint128)\":{\"notice\":\"Computes the token0 and token1 value for a given amount of liquidity, the current pool prices and the prices at the tick boundaries\"},\"getLiquidityForAmounts(uint160,int24,int24,uint256,uint256)\":{\"notice\":\"Computes the maximum amount of liquidity received for a given amount of token0, token1, the current pool prices and the prices at the tick boundaries\"},\"getPrice(address,address)\":{\"notice\":\"Calculates price in pool\"},\"mulDiv(uint256,uint256,uint256)\":{\"notice\":\"Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint or denominator == 0\"}},\"notice\":\"Provides functions for computing liquidity amounts from token amounts and prices\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/pancake/PancakeLib.sol\":\"PancakeLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\",\"keccak256\":\"0x5f43ed533d0fc4dc2f8f081d2c4b77960f3e908d5f7359096b385e5673f1ba0c\",\"license\":\"MIT\"},\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/release-v4.6/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n     */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n     */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n     */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x953f20efa64081a325109a0e03602b889d2819c2b51c1e1fb21a062feeda74f3\",\"license\":\"MIT\"},\"contracts/integrations/pancake/IPancakeMasterChefV3.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice Restored from base-chain: 0xC6A2Db661D5a5690172d8eB0a7DEA2d3008665A3, events were removed\\r\\ninterface IPancakeMasterChefV3 {\\r\\n    function BOOST_PRECISION() external view returns (uint256);\\r\\n\\r\\n    function CAKE() external view returns (address);\\r\\n\\r\\n    function FARM_BOOSTER() external view returns (address);\\r\\n\\r\\n    function LMPoolDeployer() external view returns (address);\\r\\n\\r\\n    function MAX_BOOST_PRECISION() external view returns (uint256);\\r\\n\\r\\n    function MAX_DURATION() external view returns (uint256);\\r\\n\\r\\n    function MIN_DURATION() external view returns (uint256);\\r\\n\\r\\n    function PERIOD_DURATION() external view returns (uint256);\\r\\n\\r\\n    function PRECISION() external view returns (uint256);\\r\\n\\r\\n    function WETH() external view returns (address);\\r\\n\\r\\n    function add(uint256 _allocPoint, address _v3Pool, bool _withUpdate) external;\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function burn(uint256 _tokenId) external;\\r\\n\\r\\n    function cakeAmountBelongToMC() external view returns (uint256);\\r\\n\\r\\n    function collect(INonfungiblePositionManagerStruct.CollectParams memory params) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function collectTo(INonfungiblePositionManagerStruct.CollectParams memory params, address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function decreaseLiquidity(INonfungiblePositionManagerStruct.DecreaseLiquidityParams memory params) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function emergency() external view returns (bool);\\r\\n\\r\\n    function getLatestPeriodInfo(address _v3Pool) external view returns (uint256 cakePerSecond, uint256 endTime);\\r\\n\\r\\n    function getLatestPeriodInfoByPid(uint256 _pid) external view returns (uint256 cakePerSecond, uint256 endTime);\\r\\n\\r\\n    function harvest(uint256 _tokenId, address _to) external returns (uint256 reward);\\r\\n\\r\\n    function increaseLiquidity(INonfungiblePositionManagerStruct.IncreaseLiquidityParams memory params) external payable returns (\\r\\n        uint128 liquidity,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    );\\r\\n\\r\\n    function latestPeriodCakePerSecond() external view returns (uint256);\\r\\n\\r\\n    function latestPeriodEndTime() external view returns (uint256);\\r\\n\\r\\n    function latestPeriodNumber() external view returns (uint256);\\r\\n\\r\\n    function latestPeriodStartTime() external view returns (uint256);\\r\\n\\r\\n    function multicall(bytes[] memory data) external payable returns (bytes[] memory results);\\r\\n\\r\\n    function nonfungiblePositionManager() external view returns (address);\\r\\n\\r\\n    function onERC721Received(address, address _from, uint256 _tokenId, bytes memory) external returns (bytes4);\\r\\n\\r\\n    function operatorAddress() external view returns (address);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function pendingCake(uint256 _tokenId) external view returns (uint256 reward);\\r\\n\\r\\n    function poolInfo(uint256) external view returns (\\r\\n        uint256 allocPoint,\\r\\n        address v3Pool,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint24 fee,\\r\\n        uint256 totalLiquidity,\\r\\n        uint256 totalBoostLiquidity\\r\\n    );\\r\\n\\r\\n    function poolLength() external view returns (uint256);\\r\\n\\r\\n    function receiver() external view returns (address);\\r\\n\\r\\n    function renounceOwnership() external;\\r\\n\\r\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\r\\n\\r\\n    function setEmergency(bool _emergency) external;\\r\\n\\r\\n    function setLMPoolDeployer(address _LMPoolDeployer) external;\\r\\n\\r\\n    function setOperator(address _operatorAddress) external;\\r\\n\\r\\n    function setPeriodDuration(uint256 _periodDuration) external;\\r\\n\\r\\n    function setReceiver(address _receiver) external;\\r\\n\\r\\n    function sweepToken(address token, uint256 amountMinimum, address recipient) external;\\r\\n\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\r\\n\\r\\n    function totalAllocPoint() external view returns (uint256);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external;\\r\\n\\r\\n    function updateBoostMultiplier(uint256 _tokenId, uint256 _newMultiplier) external;\\r\\n\\r\\n    function updateFarmBoostContract(address _newFarmBoostContract) external;\\r\\n\\r\\n    function updateLiquidity(uint256 _tokenId) external;\\r\\n\\r\\n    function updatePools(uint256[] memory pids) external;\\r\\n\\r\\n    function upkeep(uint256 _amount, uint256 _duration, bool _withUpdate) external;\\r\\n\\r\\n    function userPositionInfos(uint256) external view returns (\\r\\n        uint128 liquidity,\\r\\n        uint128 boostLiquidity,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint256 rewardGrowthInside,\\r\\n        uint256 reward,\\r\\n        address user,\\r\\n        uint256 pid,\\r\\n        uint256 boostMultiplier\\r\\n    );\\r\\n\\r\\n    function v3PoolAddressPid(address) external view returns (uint256);\\r\\n\\r\\n    function withdraw(uint256 _tokenId, address _to) external returns (uint256 reward);\\r\\n\\r\\n    receive() external payable;\\r\\n}\\r\\n\\r\\ninterface INonfungiblePositionManagerStruct {\\r\\n    struct CollectParams {\\r\\n        uint256 tokenId;\\r\\n        address recipient;\\r\\n        uint128 amount0Max;\\r\\n        uint128 amount1Max;\\r\\n    }\\r\\n\\r\\n    struct DecreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint128 liquidity;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct IncreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x42ff99272b127f83b62264954cec0a392335a62e92eb174cd00ca2ea7de48211\",\"license\":\"BUSL-1.1\"},\"contracts/integrations/pancake/IPancakeV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/// @notice Restored from base-chain:0x29Ed55B18Af0Add137952CB3E29FB77B32fCE426, events were removed\\r\\ninterface IPancakeV3Pool {\\r\\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function collect(address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested)\\r\\n    external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n    function collectProtocol(address recipient, uint128 amount0Requested, uint128 amount1Requested) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\r\\n\\r\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\r\\n\\r\\n    function flash(address recipient, uint256 amount0, uint256 amount1, bytes memory data) external;\\r\\n\\r\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\r\\n\\r\\n    function initialize(uint160 sqrtPriceX96) external;\\r\\n\\r\\n    function liquidity() external view returns (uint128);\\r\\n\\r\\n    function lmPool() external view returns (address);\\r\\n\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n\\r\\n    function mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes memory data)\\r\\n    external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function observations(uint256) external view returns (\\r\\n        uint32 blockTimestamp,\\r\\n        int56 tickCumulative,\\r\\n        uint160 secondsPerLiquidityCumulativeX128,\\r\\n        bool initialized\\r\\n    );\\r\\n\\r\\n    function observe(uint32[] memory secondsAgos) external view returns (\\r\\n        int56[] memory tickCumulatives,\\r\\n        uint160[] memory secondsPerLiquidityCumulativeX128s\\r\\n    );\\r\\n\\r\\n    function positions(bytes32) external view returns (\\r\\n        uint128 liquidity,\\r\\n        uint256 feeGrowthInside0LastX128,\\r\\n        uint256 feeGrowthInside1LastX128,\\r\\n        uint128 tokensOwed0,\\r\\n        uint128 tokensOwed1\\r\\n    );\\r\\n\\r\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\r\\n\\r\\n    function setFeeProtocol(uint32 feeProtocol0, uint32 feeProtocol1) external;\\r\\n\\r\\n    function setLmPool(address _lmPool) external;\\r\\n\\r\\n    function slot0() external view returns (\\r\\n        uint160 sqrtPriceX96,\\r\\n        int24 tick,\\r\\n        uint16 observationIndex,\\r\\n        uint16 observationCardinality,\\r\\n        uint16 observationCardinalityNext,\\r\\n        uint32 feeProtocol,\\r\\n        bool unlocked\\r\\n    );\\r\\n\\r\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper) external view returns (\\r\\n        int56 tickCumulativeInside,\\r\\n        uint160 secondsPerLiquidityInsideX128,\\r\\n        uint32 secondsInside\\r\\n    );\\r\\n\\r\\n    function swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes memory data)\\r\\n    external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n    function tickBitmap(int16) external view returns (uint256);\\r\\n\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    function ticks(int24) external view returns (\\r\\n        uint128 liquidityGross,\\r\\n        int128 liquidityNet,\\r\\n        uint256 feeGrowthOutside0X128,\\r\\n        uint256 feeGrowthOutside1X128,\\r\\n        int56 tickCumulativeOutside,\\r\\n        uint160 secondsPerLiquidityOutsideX128,\\r\\n        uint32 secondsOutside,\\r\\n        bool initialized\\r\\n    );\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n}\",\"keccak256\":\"0x0303634fd7975035a9bd043c9e707454a3e7f045f2b5cbaec5ae37952b823de2\",\"license\":\"BUSL-1.1\"},\"contracts/strategies/pancake/PancakeLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@tetu_io/tetu-contracts-v2/contracts/interfaces/IERC20Metadata.sol\\\";\\r\\nimport \\\"../../integrations/pancake/IPancakeV3Pool.sol\\\";\\r\\nimport {IPancakeMasterChefV3} from \\\"../../integrations/pancake/IPancakeMasterChefV3.sol\\\";\\r\\n\\r\\n/// @title PancakeSwap liquidity management helper\\r\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\r\\nlibrary PancakeLib {\\r\\n  uint8 internal constant RESOLUTION = 96;\\r\\n  uint internal constant Q96 = 0x1000000000000000000000000;\\r\\n  uint private constant TWO_96 = 2 ** 96;\\r\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n  int24 internal constant MIN_TICK = - 887272;\\r\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n  int24 internal constant MAX_TICK = - MIN_TICK;\\r\\n\\r\\n  function getTickSpacing(IPancakeV3Pool pool) external view returns (int24) {\\r\\n    return pool.tickSpacing();\\r\\n  }\\r\\n\\r\\n  function addLiquidityPreview(address pool_, int24 lowerTick_, int24 upperTick_, uint amount0Desired_, uint amount1Desired_) external view returns (uint amount0Consumed, uint amount1Consumed, uint128 liquidityOut) {\\r\\n    IPancakeV3Pool pool = IPancakeV3Pool(pool_);\\r\\n    (uint160 sqrtRatioX96, , , , , ,) = pool.slot0();\\r\\n    liquidityOut = getLiquidityForAmounts(sqrtRatioX96, lowerTick_, upperTick_, amount0Desired_, amount1Desired_);\\r\\n    (amount0Consumed, amount1Consumed) = getAmountsForLiquidity(sqrtRatioX96, lowerTick_, upperTick_, liquidityOut);\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\r\\n  /// pool prices and the prices at the tick boundaries\\r\\n  function getLiquidityForAmounts(\\r\\n    uint160 sqrtRatioX96,\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick,\\r\\n    uint amount0,\\r\\n    uint amount1\\r\\n  ) public pure returns (uint128 liquidity) {\\r\\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\\r\\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n\\r\\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n      liquidity = _getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\r\\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n      uint128 liquidity0 = _getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\r\\n      uint128 liquidity1 = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\r\\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\r\\n    } else {\\r\\n      liquidity = _getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\r\\n  /// pool prices and the prices at the tick boundaries\\r\\n  function getAmountsForLiquidity(\\r\\n    uint160 sqrtRatioX96,\\r\\n    int24 lowerTick,\\r\\n    int24 upperTick,\\r\\n    uint128 liquidity\\r\\n  ) public pure returns (uint amount0, uint amount1) {\\r\\n    uint160 sqrtRatioAX96 = _getSqrtRatioAtTick(lowerTick);\\r\\n    uint160 sqrtRatioBX96 = _getSqrtRatioAtTick(upperTick);\\r\\n\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n\\r\\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\\r\\n      amount0 = _getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\\r\\n      amount0 = _getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\r\\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\r\\n    } else {\\r\\n      amount1 = _getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(\\r\\n    uint a,\\r\\n    uint b,\\r\\n    uint denominator\\r\\n  ) public pure returns (uint result) {\\r\\n  unchecked {\\r\\n    // 512-bit multiply [prod1 prod0] = a * b\\r\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n    // then use the Chinese Remainder Theorem to reconstruct\\r\\n    // the 512 bit result. The result is stored in two 256\\r\\n    // variables such that product = prod1 * 2**256 + prod0\\r\\n    uint prod0;\\r\\n    // Least significant 256 bits of the product\\r\\n    uint prod1;\\r\\n    // Most significant 256 bits of the product\\r\\n    assembly {\\r\\n      let mm := mulmod(a, b, not(0))\\r\\n      prod0 := mul(a, b)\\r\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n    }\\r\\n\\r\\n    // Handle non-overflow cases, 256 by 256 division\\r\\n    if (prod1 == 0) {\\r\\n      require(denominator > 0);\\r\\n      assembly {\\r\\n        result := div(prod0, denominator)\\r\\n      }\\r\\n      return result;\\r\\n    }\\r\\n\\r\\n    // Make sure the result is less than 2**256.\\r\\n    // Also prevents denominator == 0\\r\\n    require(denominator > prod1);\\r\\n\\r\\n    ///////////////////////////////////////////////\\r\\n    // 512 by 256 division.\\r\\n    ///////////////////////////////////////////////\\r\\n\\r\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n    // Compute remainder using mulmod\\r\\n    uint remainder;\\r\\n    assembly {\\r\\n      remainder := mulmod(a, b, denominator)\\r\\n    }\\r\\n    // Subtract 256 bit number from 512 bit number\\r\\n    assembly {\\r\\n      prod1 := sub(prod1, gt(remainder, prod0))\\r\\n      prod0 := sub(prod0, remainder)\\r\\n    }\\r\\n\\r\\n    // Factor powers of two out of denominator\\r\\n    // Compute largest power of two divisor of denominator.\\r\\n    // Always >= 1.\\r\\n    // EDIT for 0.8 compatibility:\\r\\n    // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint\\r\\n    uint twos = denominator & (~denominator + 1);\\r\\n\\r\\n    // Divide denominator by power of two\\r\\n    assembly {\\r\\n      denominator := div(denominator, twos)\\r\\n    }\\r\\n\\r\\n    // Divide [prod1 prod0] by the factors of two\\r\\n    assembly {\\r\\n      prod0 := div(prod0, twos)\\r\\n    }\\r\\n    // Shift in bits from prod1 into prod0. For this we need\\r\\n    // to flip `twos` such that it is 2**256 / twos.\\r\\n    // If twos is zero, then it becomes one\\r\\n    assembly {\\r\\n      twos := add(div(sub(0, twos), twos), 1)\\r\\n    }\\r\\n    prod0 |= prod1 * twos;\\r\\n\\r\\n    // Invert denominator mod 2**256\\r\\n    // Now that denominator is an odd number, it has an inverse\\r\\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n    // Compute the inverse by starting with a seed that is correct\\r\\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n    uint inv = (3 * denominator) ^ 2;\\r\\n    // Now use Newton-Raphson iteration to improve the precision.\\r\\n    // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n    // arithmetic, doubling the correct bits in each step.\\r\\n    inv *= 2 - denominator * inv;\\r\\n    // inverse mod 2**8\\r\\n    inv *= 2 - denominator * inv;\\r\\n    // inverse mod 2**16\\r\\n    inv *= 2 - denominator * inv;\\r\\n    // inverse mod 2**32\\r\\n    inv *= 2 - denominator * inv;\\r\\n    // inverse mod 2**64\\r\\n    inv *= 2 - denominator * inv;\\r\\n    // inverse mod 2**128\\r\\n    inv *= 2 - denominator * inv;\\r\\n    // inverse mod 2**256\\r\\n\\r\\n    // Because the division is now exact we can divide by multiplying\\r\\n    // with the modular inverse of denominator. This will give us the\\r\\n    // correct result modulo 2**256. Since the precoditions guarantee\\r\\n    // that the outcome is less than 2**256, this is the final result.\\r\\n    // We don't need to compute the high bits of the result and prod1\\r\\n    // is no longer required.\\r\\n    result = prod0 * inv;\\r\\n    return result;\\r\\n  }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(\\r\\n    uint a,\\r\\n    uint b,\\r\\n    uint denominator\\r\\n  ) internal pure returns (uint result) {\\r\\n    result = mulDiv(a, b, denominator);\\r\\n    if (mulmod(a, b, denominator) > 0) {\\r\\n      require(result < type(uint).max);\\r\\n      result++;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates price in pool\\r\\n  /// @return price with decimals of paired token\\r\\n  function getPrice(address pool_, address tokenIn) public view returns (uint) {\\r\\n    IPancakeV3Pool pool = IPancakeV3Pool(pool_);\\r\\n    address token0 = pool.token0();\\r\\n    address token1 = pool.token1();\\r\\n\\r\\n    uint tokenInDecimals = tokenIn == token0 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\\r\\n    uint tokenOutDecimals = tokenIn == token1 ? IERC20Metadata(token0).decimals() : IERC20Metadata(token1).decimals();\\r\\n    (uint160 sqrtPriceX96,,,,,,) = pool.slot0();\\r\\n\\r\\n    uint divider = tokenOutDecimals < 18 ? _max(10 ** tokenOutDecimals / 10 ** tokenInDecimals, 1) : 1;\\r\\n\\r\\n    uint priceDigits = _countDigits(uint(sqrtPriceX96));\\r\\n    uint purePrice;\\r\\n    uint precision;\\r\\n    if (tokenIn == token0) {\\r\\n      precision = 10 ** ((priceDigits < 29 ? 29 - priceDigits : 0) + tokenInDecimals);\\r\\n      uint part = uint(sqrtPriceX96) * precision / TWO_96;\\r\\n      purePrice = part * part;\\r\\n    } else {\\r\\n      precision = 10 ** ((priceDigits > 29 ? priceDigits - 29 : 0) + tokenInDecimals);\\r\\n      uint part = TWO_96 * precision / uint(sqrtPriceX96);\\r\\n      purePrice = part * part;\\r\\n    }\\r\\n    return purePrice / divider / precision / (precision > 1e18 ? (precision / 1e18) : 1);\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\r\\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\\r\\n  /// @param sqrtRatioAX96 A sqrt price\\r\\n  /// @param sqrtRatioBX96 Another sqrt price\\r\\n  /// @param amount0 The amount0 being sent in\\r\\n  /// @return liquidity The amount of returned liquidity\\r\\n  function _getLiquidityForAmount0(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount0) internal pure returns (uint128 liquidity) {\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n    uint intermediate = mulDiv(sqrtRatioAX96, sqrtRatioBX96, Q96);\\r\\n    return _toUint128(mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\r\\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\r\\n  /// @param sqrtRatioAX96 A sqrt price\\r\\n  /// @param sqrtRatioBX96 Another sqrt price\\r\\n  /// @param amount1 The amount1 being sent in\\r\\n  /// @return liquidity The amount of returned liquidity\\r\\n  function _getLiquidityForAmount1(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint amount1) internal pure returns (uint128 liquidity) {\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n    return _toUint128(mulDiv(amount1, Q96, sqrtRatioBX96 - sqrtRatioAX96));\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\r\\n  /// @param sqrtRatioAX96 A sqrt price\\r\\n  /// @param sqrtRatioBX96 Another sqrt price\\r\\n  /// @param liquidity The liquidity being valued\\r\\n  /// @return amount0 The amount0\\r\\n  function _getAmount0ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount0) {\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n    return mulDivRoundingUp(1, mulDivRoundingUp(uint(liquidity) << RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96), sqrtRatioAX96);\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\r\\n  /// @param sqrtRatioAX96 A sqrt price\\r\\n  /// @param sqrtRatioBX96 Another sqrt price\\r\\n  /// @param liquidity The liquidity being valued\\r\\n  /// @return amount1 The amount1\\r\\n  function _getAmount1ForLiquidity(uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity) internal pure returns (uint amount1) {\\r\\n    if (sqrtRatioAX96 > sqrtRatioBX96) {\\r\\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\r\\n    }\\r\\n    return mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Q96);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n  /// @dev Throws if |tick| > max tick\\r\\n  /// @param tick The input tick for the above formula\\r\\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n  /// at the given tick\\r\\n  function _getSqrtRatioAtTick(int24 tick)\\r\\n  internal\\r\\n  pure\\r\\n  returns (uint160 sqrtPriceX96)\\r\\n  {\\r\\n    uint256 absTick =\\r\\n    tick < 0 ? uint256(- int256(tick)) : uint256(int256(tick));\\r\\n\\r\\n    // EDIT: 0.8 compatibility\\r\\n    require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\r\\n\\r\\n    uint256 ratio =\\r\\n    absTick & 0x1 != 0\\r\\n    ? 0xfffcb933bd6fad37aa2d162d1a594001\\r\\n    : 0x100000000000000000000000000000000;\\r\\n    if (absTick & 0x2 != 0)\\r\\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n    if (absTick & 0x4 != 0)\\r\\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n    if (absTick & 0x8 != 0)\\r\\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n    if (absTick & 0x10 != 0)\\r\\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n    if (absTick & 0x20 != 0)\\r\\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n    if (absTick & 0x40 != 0)\\r\\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n    if (absTick & 0x80 != 0)\\r\\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n    if (absTick & 0x100 != 0)\\r\\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n    if (absTick & 0x200 != 0)\\r\\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n    if (absTick & 0x400 != 0)\\r\\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n    if (absTick & 0x800 != 0)\\r\\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n    if (absTick & 0x1000 != 0)\\r\\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n    if (absTick & 0x2000 != 0)\\r\\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n    if (absTick & 0x4000 != 0)\\r\\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n    if (absTick & 0x8000 != 0)\\r\\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n    if (absTick & 0x10000 != 0)\\r\\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n    if (absTick & 0x20000 != 0)\\r\\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n    if (absTick & 0x40000 != 0)\\r\\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n    if (absTick & 0x80000 != 0)\\r\\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n    if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n    sqrtPriceX96 = uint160(\\r\\n      (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _countDigits(uint n) internal pure returns (uint) {\\r\\n    if (n == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint count = 0;\\r\\n    while (n != 0) {\\r\\n      n = n / 10;\\r\\n      ++count;\\r\\n    }\\r\\n    return count;\\r\\n  }\\r\\n\\r\\n  function _min(uint a, uint b) internal pure returns (uint) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  function _max(uint a, uint b) internal pure returns (uint) {\\r\\n    return a > b ? a : b;\\r\\n  }\\r\\n\\r\\n  function _toUint128(uint x) private pure returns (uint128 y) {\\r\\n    require((y = uint128(x)) == x);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x3163bac8cadf9ca6f977755771fa6e1f6cd3cca0fa9cf54725aded319e827e8a\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61142561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80630337236a1461007157806317c22c3c146100a15780632a279b28146100d85780633cc90d3e14610100578063aa9a091214610126578063ac41865a14610147575b600080fd5b61008461007f366004610f9c565b61015a565b6040516001600160801b0390911681526020015b60405180910390f35b6100b46100af366004610f9c565b610237565b6040805193845260208401929092526001600160801b031690820152606001610098565b6100eb6100e6366004610ff7565b6102da565b60408051928352602083019190915201610098565b61011361010e36600461105f565b610390565b60405160029190910b8152602001610098565b61013961013436600461107c565b6103fa565b604051908152602001610098565b6101396101553660046110a8565b6104ae565b60008061016686610955565b9050600061017386610955565b9050806001600160a01b0316826001600160a01b0316111561019157905b816001600160a01b0316886001600160a01b0316116101bc576101b5828287610d6f565b925061022c565b806001600160a01b0316886001600160a01b0316101561021e5760006101e3898388610d6f565b905060006101f2848b88610de2565b9050806001600160801b0316826001600160801b0316106102135780610215565b815b9450505061022c565b610229828286610de2565b92505b505095945050505050565b6000806000808890506000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a491906110f3565b50505050505090506102b9818a8a8a8a61015a565b92506102c7818a8a866102da565b909b909a50929850919650505050505050565b60008060006102e886610955565b905060006102f586610955565b9050806001600160a01b0316826001600160a01b0316111561031357905b816001600160a01b0316886001600160a01b03161161033e57610337828287610e18565b9350610385565b806001600160a01b0316886001600160a01b0316101561037757610363888287610e18565b9350610370828987610e82565b9250610385565b610382828287610e82565b92505b505094509492505050565b6000816001600160a01b031663d0c93a7c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190611193565b92915050565b6000808060001985870985870292508281108382030391505080600003610433576000841161042857600080fd5b5082900490506104a7565b80841161043f57600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6000808390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051891906111b0565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e91906111b0565b90506000826001600160a01b0316866001600160a01b03161461060257816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd91906111cd565b610664565b826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066491906111cd565b60ff1690506000826001600160a01b0316876001600160a01b0316146106eb57826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e691906111cd565b61074d565b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074d91906111cd565b60ff1690506000856001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b691906110f3565b50505050505090506000601283106107cf5760016107f9565b6107f96107dd85600a6112ea565b6107e885600a6112ea565b6107f2919061130c565b6001610ecc565b9050600061080f836001600160a01b0316610ee2565b9050600080886001600160a01b03168c6001600160a01b0316036108975786601d841061083d576000610848565b61084884601d611320565b6108529190611333565b61085d90600a6112ea565b90506000600160601b610879836001600160a01b038916611346565b610883919061130c565b905061088f8180611346565b9250506108fd565b86601d84116108a75760006108b2565b6108b2601d85611320565b6108bc9190611333565b6108c790600a6112ea565b905060006001600160a01b0386166108e383600160601b611346565b6108ed919061130c565b90506108f98180611346565b9250505b670de0b6b3a76400008111610913576001610925565b610925670de0b6b3a76400008261130c565b81610930868561130c565b61093a919061130c565b610944919061130c565b9d9c50505050505050505050505050565b60008060008360020b1261096c578260020b610979565b8260020b6109799061135d565b9050610988620d89e719611379565b60020b8111156109c25760405162461bcd60e51b81526020600482015260016024820152601560fa1b604482015260640160405180910390fd5b6000816001166000036109d957600160801b6109eb565b6ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b031690506002821615610a20576080610a1b826ffff97272373d413259a46990580e213a611346565b901c90505b6004821615610a4a576080610a45826ffff2e50f5f656932ef12357cf3c7fdcc611346565b901c90505b6008821615610a74576080610a6f826fffe5caca7e10e4e61c3624eaa0941cd0611346565b901c90505b6010821615610a9e576080610a99826fffcb9843d60f6159c9db58835c926644611346565b901c90505b6020821615610ac8576080610ac3826fff973b41fa98c081472e6896dfb254c0611346565b901c90505b6040821615610af2576080610aed826fff2ea16466c96a3843ec78b326b52861611346565b901c90505b6080821615610b1c576080610b17826ffe5dee046a99a2a811c461f1969c3053611346565b901c90505b610100821615610b47576080610b42826ffcbe86c7900a88aedcffc83b479aa3a4611346565b901c90505b610200821615610b72576080610b6d826ff987a7253ac413176f2b074cf7815e54611346565b901c90505b610400821615610b9d576080610b98826ff3392b0822b70005940c7a398e4b70f3611346565b901c90505b610800821615610bc8576080610bc3826fe7159475a2c29b7443b29c7fa6e889d9611346565b901c90505b611000821615610bf3576080610bee826fd097f3bdfd2022b8845ad8f792aa5825611346565b901c90505b612000821615610c1e576080610c19826fa9f746462d870fdf8a65dc1f90e061e5611346565b901c90505b614000821615610c49576080610c44826f70d869a156d2a1b890bb3df62baf32f7611346565b901c90505b618000821615610c74576080610c6f826f31be135f97d08fd981231505542fcfa6611346565b901c90505b62010000821615610ca0576080610c9b826f09aa508b5b7a84e1c677de54f3e99bc9611346565b901c90505b62020000821615610ccb576080610cc6826e5d6af8dedb81196699c329225ee604611346565b901c90505b62040000821615610cf5576080610cf0826d2216e584f5fa1ea926041bedfe98611346565b901c90505b62080000821615610d1d576080610d18826b048a170391f7dc42444e8fa2611346565b901c90505b60008460020b1315610d3857610d358160001961130c565b90505b610d476401000000008261139b565b15610d53576001610d56565b60005b610d679060ff16602083901c611333565b949350505050565b6000826001600160a01b0316846001600160a01b03161115610d8f579192915b6000610db2856001600160a01b0316856001600160a01b0316600160601b6103fa565b9050610dd9610dd48483610dc689896113af565b6001600160a01b03166103fa565b610f1a565b95945050505050565b6000826001600160a01b0316846001600160a01b03161115610e02579192915b610d67610dd483600160601b610dc688886113af565b6000826001600160a01b0316846001600160a01b03161115610e38579192915b610d676001610e73600160601b600160e01b03606086901b16610e5b88886113af565b6001600160a01b0316876001600160a01b0316610f35565b866001600160a01b0316610f35565b6000826001600160a01b0316846001600160a01b03161115610ea2579192915b610d676001600160801b038316610eb986866113af565b6001600160a01b0316600160601b610f35565b6000818311610edb57816104a7565b5090919050565b600081600003610ef457506000919050565b60005b82156103f457610f08600a8461130c565b9250610f13816113d6565b9050610ef7565b806001600160801b0381168114610f3057600080fd5b919050565b6000610f428484846103fa565b905060008280610f5457610f546112f6565b84860911156104a7576000198110610f6b57600080fd5b80610dd9816113d6565b6001600160a01b0381168114610f8a57600080fd5b50565b8060020b8114610f8a57600080fd5b600080600080600060a08688031215610fb457600080fd5b8535610fbf81610f75565b94506020860135610fcf81610f8d565b93506040860135610fdf81610f8d565b94979396509394606081013594506080013592915050565b6000806000806080858703121561100d57600080fd5b843561101881610f75565b9350602085013561102881610f8d565b9250604085013561103881610f8d565b915060608501356001600160801b038116811461105457600080fd5b939692955090935050565b60006020828403121561107157600080fd5b81356104a781610f75565b60008060006060848603121561109157600080fd5b505081359360208301359350604090920135919050565b600080604083850312156110bb57600080fd5b82356110c681610f75565b915060208301356110d681610f75565b809150509250929050565b805161ffff81168114610f3057600080fd5b600080600080600080600060e0888a03121561110e57600080fd5b875161111981610f75565b602089015190975061112a81610f8d565b9550611138604089016110e1565b9450611146606089016110e1565b9350611154608089016110e1565b925060a088015163ffffffff8116811461116d57600080fd5b60c0890151909250801515811461118357600080fd5b8091505092959891949750929550565b6000602082840312156111a557600080fd5b81516104a781610f8d565b6000602082840312156111c257600080fd5b81516104a781610f75565b6000602082840312156111df57600080fd5b815160ff811681146104a757600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611241578160001904821115611227576112276111f0565b8085161561123457918102915b93841c939080029061120b565b509250929050565b600082611258575060016103f4565b81611265575060006103f4565b816001811461127b5760028114611285576112a1565b60019150506103f4565b60ff841115611296576112966111f0565b50506001821b6103f4565b5060208310610133831016604e8410600b84101617156112c4575081810a6103f4565b6112ce8383611206565b80600019048211156112e2576112e26111f0565b029392505050565b60006104a78383611249565b634e487b7160e01b600052601260045260246000fd5b60008261131b5761131b6112f6565b500490565b818103818111156103f4576103f46111f0565b808201808211156103f4576103f46111f0565b80820281158282048414176103f4576103f46111f0565b6000600160ff1b8201611372576113726111f0565b5060000390565b60008160020b627fffff198103611392576113926111f0565b60000392915050565b6000826113aa576113aa6112f6565b500690565b6001600160a01b038281168282160390808211156113cf576113cf6111f0565b5092915050565b6000600182016113e8576113e86111f0565b506001019056fea26469706673582212200622d3786fec1b4d44a99443b2c59fea613d72cb8ebbe0cc6f857ba3a53f36b664736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPrice(address,address)": {
        "returns": {
          "_0": "price with decimals of paired token"
        }
      },
      "mulDiv(uint256,uint256,uint256)": {
        "details": "Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv",
        "params": {
          "a": "The multiplicand",
          "b": "The multiplier",
          "denominator": "The divisor"
        },
        "returns": {
          "result": "The 256-bit result"
        }
      }
    },
    "stateVariables": {
      "MAX_TICK": {
        "details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
      },
      "MIN_TICK": {
        "details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
      }
    },
    "title": "PancakeSwap liquidity management helper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAmountsForLiquidity(uint160,int24,int24,uint128)": {
        "notice": "Computes the token0 and token1 value for a given amount of liquidity, the current pool prices and the prices at the tick boundaries"
      },
      "getLiquidityForAmounts(uint160,int24,int24,uint256,uint256)": {
        "notice": "Computes the maximum amount of liquidity received for a given amount of token0, token1, the current pool prices and the prices at the tick boundaries"
      },
      "getPrice(address,address)": {
        "notice": "Calculates price in pool"
      },
      "mulDiv(uint256,uint256,uint256)": {
        "notice": "Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint or denominator == 0"
      }
    },
    "notice": "Provides functions for computing liquidity amounts from token amounts and prices",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}